package org.telegram.tgnet;

import android.text.TextUtils;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map.Entry;
import org.telegram.messenger.Utilities;

public class TLRPC {
   public static final int CHAT_FLAG_IS_PUBLIC = 64;
   public static final int LAYER = 100;
   public static final int MESSAGE_FLAG_EDITED = 32768;
   public static final int MESSAGE_FLAG_FWD = 4;
   public static final int MESSAGE_FLAG_HAS_BOT_ID = 2048;
   public static final int MESSAGE_FLAG_HAS_ENTITIES = 128;
   public static final int MESSAGE_FLAG_HAS_FROM_ID = 256;
   public static final int MESSAGE_FLAG_HAS_MARKUP = 64;
   public static final int MESSAGE_FLAG_HAS_MEDIA = 512;
   public static final int MESSAGE_FLAG_HAS_VIEWS = 1024;
   public static final int MESSAGE_FLAG_MEGAGROUP = Integer.MIN_VALUE;
   public static final int MESSAGE_FLAG_REPLY = 8;
   public static final int USER_FLAG_ACCESS_HASH = 1;
   public static final int USER_FLAG_FIRST_NAME = 2;
   public static final int USER_FLAG_LAST_NAME = 4;
   public static final int USER_FLAG_PHONE = 16;
   public static final int USER_FLAG_PHOTO = 32;
   public static final int USER_FLAG_STATUS = 64;
   public static final int USER_FLAG_UNUSED = 128;
   public static final int USER_FLAG_UNUSED2 = 256;
   public static final int USER_FLAG_UNUSED3 = 512;
   public static final int USER_FLAG_USERNAME = 8;

   public abstract static class Audio extends TLObject {
      public long access_hash;
      public int date;
      public int dc_id;
      public int duration;
      public long id;
      public byte[] iv;
      public byte[] key;
      public String mime_type;
      public int size;
      public int user_id;

      public static TLRPC.Audio TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         switch(var1) {
         case -945003370:
            var3 = new TLRPC.TL_audio_old2();
            break;
         case -102543275:
            var3 = new TLRPC.TL_audio_layer45();
            break;
         case 1114908135:
            var3 = new TLRPC.TL_audio_old();
            break;
         case 1431655926:
            var3 = new TLRPC.TL_audioEncrypted();
            break;
         case 1483311320:
            var3 = new TLRPC.TL_audioEmpty_layer45();
            break;
         default:
            var3 = null;
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in Audio", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.Audio)var3;
         }
      }
   }

   public abstract static class Bool extends TLObject {
      public static TLRPC.Bool TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != -1720552011) {
            if (var1 != -1132882121) {
               var3 = null;
            } else {
               var3 = new TLRPC.TL_boolFalse();
            }
         } else {
            var3 = new TLRPC.TL_boolTrue();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in Bool", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.Bool)var3;
         }
      }
   }

   public abstract static class BotInfo extends TLObject {
      public ArrayList commands = new ArrayList();
      public String description;
      public int user_id;
      public int version;

      public static TLRPC.BotInfo TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != -1729618630) {
            if (var1 != -1154598962) {
               if (var1 != 164583517) {
                  var3 = null;
               } else {
                  var3 = new TLRPC.TL_botInfo_layer48();
               }
            } else {
               var3 = new TLRPC.TL_botInfoEmpty_layer48();
            }
         } else {
            var3 = new TLRPC.TL_botInfo();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in BotInfo", var1));
         } else {
            if (var3 != null) {
               ((TLRPC.TL_botInfo)var3).readParams(var0, var2);
            }

            return (TLRPC.BotInfo)var3;
         }
      }
   }

   public abstract static class BotInlineMessage extends TLObject {
      public String address;
      public ArrayList entities = new ArrayList();
      public String first_name;
      public int flags;
      public TLRPC.GeoPoint geo;
      public String last_name;
      public String message;
      public boolean no_webpage;
      public int period;
      public String phone_number;
      public String provider;
      public TLRPC.ReplyMarkup reply_markup;
      public String title;
      public String vcard;
      public String venue_id;
      public String venue_type;

      public static TLRPC.BotInlineMessage TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         switch(var1) {
         case -1970903652:
            var3 = new TLRPC.TL_botInlineMessageMediaVenue();
            break;
         case -1937807902:
            var3 = new TLRPC.TL_botInlineMessageText();
            break;
         case -1222451611:
            var3 = new TLRPC.TL_botInlineMessageMediaGeo();
            break;
         case 175419739:
            var3 = new TLRPC.TL_botInlineMessageMediaAuto_layer74();
            break;
         case 416402882:
            var3 = new TLRPC.TL_botInlineMessageMediaContact();
            break;
         case 904770772:
            var3 = new TLRPC.TL_botInlineMessageMediaContact_layer81();
            break;
         case 982505656:
            var3 = new TLRPC.TL_botInlineMessageMediaGeo_layer71();
            break;
         case 1130767150:
            var3 = new TLRPC.TL_botInlineMessageMediaVenue_layer77();
            break;
         case 1984755728:
            var3 = new TLRPC.TL_botInlineMessageMediaAuto();
            break;
         default:
            var3 = null;
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in BotInlineMessage", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.BotInlineMessage)var3;
         }
      }
   }

   public abstract static class BotInlineResult extends TLObject {
      public TLRPC.WebDocument content;
      public String description;
      public TLRPC.Document document;
      public int flags;
      public String id;
      public TLRPC.Photo photo;
      public long query_id;
      public TLRPC.BotInlineMessage send_message;
      public TLRPC.WebDocument thumb;
      public String title;
      public String type;
      public String url;

      public static TLRPC.BotInlineResult TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != 295067450) {
            if (var1 != 400266251) {
               var3 = null;
            } else {
               var3 = new TLRPC.TL_botInlineMediaResult();
            }
         } else {
            var3 = new TLRPC.TL_botInlineResult();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in BotInlineResult", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.BotInlineResult)var3;
         }
      }
   }

   public abstract static class ChannelAdminLogEventAction extends TLObject {
      public TLRPC.Message message;
      public TLRPC.Message new_message;
      public TLRPC.ChannelParticipant new_participant;
      public TLRPC.Photo new_photo;
      public TLRPC.InputStickerSet new_stickerset;
      public TLRPC.ChannelParticipant participant;
      public TLRPC.Message prev_message;
      public TLRPC.ChannelParticipant prev_participant;
      public TLRPC.Photo prev_photo;
      public TLRPC.InputStickerSet prev_stickerset;
      public String prev_value;

      public static TLRPC.ChannelAdminLogEventAction TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         switch(var1) {
         case -1895328189:
            var3 = new TLRPC.TL_channelAdminLogEventActionStopPoll();
            break;
         case -1569748965:
            var3 = new TLRPC.TL_channelAdminLogEventActionChangeLinkedChat();
            break;
         case -1312568665:
            var3 = new TLRPC.TL_channelAdminLogEventActionChangeStickerSet();
            break;
         case -714643696:
            var3 = new TLRPC.TL_channelAdminLogEventActionParticipantToggleAdmin();
            break;
         case -484690728:
            var3 = new TLRPC.TL_channelAdminLogEventActionParticipantInvite();
            break;
         case -422036098:
            var3 = new TLRPC.TL_channelAdminLogEventActionParticipantToggleBan();
            break;
         case -421545947:
            var3 = new TLRPC.TL_channelAdminLogEventActionChangeTitle();
            break;
         case -370660328:
            var3 = new TLRPC.TL_channelAdminLogEventActionUpdatePinned();
            break;
         case -124291086:
            var3 = new TLRPC.TL_channelAdminLogEventActionParticipantLeave();
            break;
         case 405815507:
            var3 = new TLRPC.TL_channelAdminLogEventActionParticipantJoin();
            break;
         case 460916654:
            var3 = new TLRPC.TL_channelAdminLogEventActionToggleInvites();
            break;
         case 648939889:
            var3 = new TLRPC.TL_channelAdminLogEventActionToggleSignatures();
            break;
         case 771095562:
            var3 = new TLRPC.TL_channelAdminLogEventActionDefaultBannedRights();
            break;
         case 1121994683:
            var3 = new TLRPC.TL_channelAdminLogEventActionDeleteMessage();
            break;
         case 1129042607:
            var3 = new TLRPC.TL_channelAdminLogEventActionChangePhoto();
            break;
         case 1427671598:
            var3 = new TLRPC.TL_channelAdminLogEventActionChangeAbout();
            break;
         case 1599903217:
            var3 = new TLRPC.TL_channelAdminLogEventActionTogglePreHistoryHidden();
            break;
         case 1783299128:
            var3 = new TLRPC.TL_channelAdminLogEventActionChangeUsername();
            break;
         case 1889215493:
            var3 = new TLRPC.TL_channelAdminLogEventActionEditMessage();
            break;
         default:
            var3 = null;
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in ChannelAdminLogEventAction", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.ChannelAdminLogEventAction)var3;
         }
      }
   }

   public abstract static class ChannelMessagesFilter extends TLObject {
      public boolean exclude_new_messages;
      public int flags;
      public ArrayList ranges = new ArrayList();

      public static TLRPC.ChannelMessagesFilter TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != -1798033689) {
            if (var1 != -847783593) {
               var3 = null;
            } else {
               var3 = new TLRPC.TL_channelMessagesFilter();
            }
         } else {
            var3 = new TLRPC.TL_channelMessagesFilterEmpty();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in ChannelMessagesFilter", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.ChannelMessagesFilter)var3;
         }
      }
   }

   public abstract static class ChannelParticipant extends TLObject {
      public TLRPC.TL_chatAdminRights admin_rights;
      public TLRPC.TL_channelAdminRights_layer92 admin_rights_layer92;
      public TLRPC.TL_chatBannedRights banned_rights;
      public TLRPC.TL_channelBannedRights_layer92 banned_rights_layer92;
      public boolean can_edit;
      public int date;
      public int flags;
      public int inviter_id;
      public int kicked_by;
      public boolean left;
      public int promoted_by;
      public boolean self;
      public int user_id;

      public static TLRPC.ChannelParticipant TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         switch(var1) {
         case -1933187430:
            var3 = new TLRPC.TL_channelParticipantKicked_layer67();
            break;
         case -1861910545:
            var3 = new TLRPC.TL_channelParticipantModerator_layer67();
            break;
         case -1743180447:
            var3 = new TLRPC.TL_channelParticipantEditor_layer67();
            break;
         case -1557620115:
            var3 = new TLRPC.TL_channelParticipantSelf();
            break;
         case -1473271656:
            var3 = new TLRPC.TL_channelParticipantAdmin_layer92();
            break;
         case -471670279:
            var3 = new TLRPC.TL_channelParticipantCreator();
            break;
         case 367766557:
            var3 = new TLRPC.TL_channelParticipant();
            break;
         case 470789295:
            var3 = new TLRPC.TL_channelParticipantBanned();
            break;
         case 573315206:
            var3 = new TLRPC.TL_channelParticipantBanned_layer92();
            break;
         case 1571450403:
            var3 = new TLRPC.TL_channelParticipantAdmin();
            break;
         default:
            var3 = null;
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in ChannelParticipant", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.ChannelParticipant)var3;
         }
      }
   }

   public abstract static class ChannelParticipantsFilter extends TLObject {
      public String q;

      public static TLRPC.ChannelParticipantsFilter TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         switch(var1) {
         case -1548400251:
            var3 = new TLRPC.TL_channelParticipantsKicked();
            break;
         case -1328445861:
            var3 = new TLRPC.TL_channelParticipantsBots();
            break;
         case -1268741783:
            var3 = new TLRPC.TL_channelParticipantsAdmins();
            break;
         case -1150621555:
            var3 = new TLRPC.TL_channelParticipantsContacts();
            break;
         case -566281095:
            var3 = new TLRPC.TL_channelParticipantsRecent();
            break;
         case 106343499:
            var3 = new TLRPC.TL_channelParticipantsSearch();
            break;
         case 338142689:
            var3 = new TLRPC.TL_channelParticipantsBanned();
            break;
         default:
            var3 = null;
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in ChannelParticipantsFilter", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.ChannelParticipantsFilter)var3;
         }
      }
   }

   public abstract static class Chat extends TLObject {
      public long access_hash;
      public TLRPC.TL_chatAdminRights admin_rights;
      public TLRPC.TL_channelAdminRights_layer92 admin_rights_layer92;
      public TLRPC.TL_chatBannedRights banned_rights;
      public TLRPC.TL_channelBannedRights_layer92 banned_rights_layer92;
      public boolean broadcast;
      public boolean creator;
      public int date;
      public boolean deactivated;
      public TLRPC.TL_chatBannedRights default_banned_rights;
      public boolean explicit_content;
      public int flags;
      public boolean has_link;
      public int id;
      public boolean kicked;
      public boolean left;
      public boolean megagroup;
      public TLRPC.InputChannel migrated_to;
      public boolean min;
      public boolean moderator;
      public int participants_count;
      public TLRPC.ChatPhoto photo;
      public boolean restricted;
      public String restriction_reason;
      public boolean scam;
      public boolean signatures;
      public String title;
      public int until_date;
      public String username;
      public boolean verified;
      public int version;

      public static TLRPC.Chat TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         switch(var1) {
         case -2059962289:
            var3 = new TLRPC.TL_channelForbidden_layer67();
            break;
         case -1683826688:
            var3 = new TLRPC.TL_chatEmpty();
            break;
         case -1588737454:
            var3 = new TLRPC.TL_channel_layer67();
            break;
         case -930515796:
            var3 = new TLRPC.TL_channel_layer92();
            break;
         case -652419756:
            var3 = new TLRPC.TL_chat_layer92();
            break;
         case -83047359:
            var3 = new TLRPC.TL_chatForbidden_old();
            break;
         case 120753115:
            var3 = new TLRPC.TL_chatForbidden();
            break;
         case 213142300:
            var3 = new TLRPC.TL_channel_layer72();
            break;
         case 681420594:
            var3 = new TLRPC.TL_channelForbidden();
            break;
         case 763724588:
            var3 = new TLRPC.TL_channelForbidden_layer52();
            break;
         case 1004149726:
            var3 = new TLRPC.TL_chat();
            break;
         case 1158377749:
            var3 = new TLRPC.TL_channel_layer77();
            break;
         case 1260090630:
            var3 = new TLRPC.TL_channel_layer48();
            break;
         case 1307772980:
            var3 = new TLRPC.TL_channel();
            break;
         case 1737397639:
            var3 = new TLRPC.TL_channel_old();
            break;
         case 1855757255:
            var3 = new TLRPC.TL_chat_old();
            break;
         case 1930607688:
            var3 = new TLRPC.TL_chat_old2();
            break;
         default:
            var3 = null;
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in Chat", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.Chat)var3;
         }
      }

      protected static TLRPC.TL_chatAdminRights mergeAdminRights(TLRPC.TL_channelAdminRights_layer92 var0) {
         if (var0 == null) {
            return null;
         } else {
            TLRPC.TL_chatAdminRights var1 = new TLRPC.TL_chatAdminRights();
            var1.change_info = var0.change_info;
            var1.post_messages = var0.post_messages;
            var1.edit_messages = var0.edit_messages;
            var1.delete_messages = var0.delete_messages;
            var1.ban_users = var0.ban_users;
            var1.invite_users = var0.invite_users;
            var1.pin_messages = var0.pin_messages;
            var1.add_admins = var0.add_admins;
            return var1;
         }
      }

      protected static TLRPC.TL_chatBannedRights mergeBannedRights(TLRPC.TL_channelBannedRights_layer92 var0) {
         if (var0 == null) {
            return null;
         } else {
            TLRPC.TL_chatBannedRights var1 = new TLRPC.TL_chatBannedRights();
            var1.view_messages = var0.view_messages;
            var1.send_messages = var0.send_messages;
            boolean var2 = var0.send_media;
            var1.send_media = var2;
            var1.send_stickers = var0.send_stickers;
            var1.send_gifs = var0.send_gifs;
            var1.send_games = var0.send_games;
            var1.send_inline = var0.send_inline;
            var1.embed_links = var0.embed_links;
            var1.send_polls = var2;
            var1.change_info = true;
            var1.invite_users = true;
            var1.pin_messages = true;
            var1.until_date = var0.until_date;
            return var1;
         }
      }
   }

   public abstract static class ChatFull extends TLObject {
      public String about;
      public int admins_count;
      public int available_min_id;
      public int banned_count;
      public ArrayList bot_info = new ArrayList();
      public int call_msg_id;
      public boolean can_set_stickers;
      public boolean can_set_username;
      public boolean can_view_participants;
      public boolean can_view_stats;
      public TLRPC.Photo chat_photo;
      public TLRPC.ExportedChatInvite exported_invite;
      public int flags;
      public int folder_id;
      public boolean hidden_prehistory;
      public int id;
      public int kicked_count;
      public int linked_chat_id;
      public int migrated_from_chat_id;
      public int migrated_from_max_id;
      public TLRPC.PeerNotifySettings notify_settings;
      public int online_count;
      public TLRPC.ChatParticipants participants;
      public int participants_count;
      public int pinned_msg_id;
      public int pts;
      public int read_inbox_max_id;
      public int read_outbox_max_id;
      public TLRPC.StickerSet stickerset;
      public int unread_count;
      public int unread_important_count;

      public static TLRPC.ChatFull TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         switch(var1) {
         case -1781833897:
            var3 = new TLRPC.TL_channelFull_layer70();
            break;
         case -1749097118:
            var3 = new TLRPC.TL_channelFull_layer52();
            break;
         case -1736252138:
            var3 = new TLRPC.TL_channelFull();
            break;
         case -1640751649:
            var3 = new TLRPC.TL_channelFull_layer48();
            break;
         case -1009430225:
            var3 = new TLRPC.TL_channelFull_layer67();
            break;
         case -877254512:
            var3 = new TLRPC.TL_channelFull_layer89();
            break;
         case -304961647:
            var3 = new TLRPC.TL_chatFull_layer92();
            break;
         case -88925533:
            var3 = new TLRPC.TL_channelFull_old();
            break;
         case 56920439:
            var3 = new TLRPC.TL_channelFull_layer99();
            break;
         case 401891279:
            var3 = new TLRPC.TL_channelFull_layer71();
            break;
         case 461151667:
            var3 = new TLRPC.TL_chatFull();
            break;
         case 478652186:
            var3 = new TLRPC.TL_channelFull_layer98();
            break;
         case 581055962:
            var3 = new TLRPC.TL_chatFull_layer98();
            break;
         case 771925524:
            var3 = new TLRPC.TL_chatFull_layer87();
            break;
         case 1991201921:
            var3 = new TLRPC.TL_channelFull_layer72();
            break;
         default:
            var3 = null;
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in ChatFull", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.ChatFull)var3;
         }
      }
   }

   public abstract static class ChatInvite extends TLObject {
      public boolean broadcast;
      public boolean channel;
      public TLRPC.Chat chat;
      public int flags;
      public boolean isPublic;
      public boolean megagroup;
      public ArrayList participants = new ArrayList();
      public int participants_count;
      public TLRPC.Photo photo;
      public String title;

      public static TLRPC.ChatInvite TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != -540871282) {
            if (var1 != 1516793212) {
               var3 = null;
            } else {
               var3 = new TLRPC.TL_chatInviteAlready();
            }
         } else {
            var3 = new TLRPC.TL_chatInvite();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in ChatInvite", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.ChatInvite)var3;
         }
      }
   }

   public abstract static class ChatParticipant extends TLObject {
      public int date;
      public int inviter_id;
      public int user_id;

      public static TLRPC.ChatParticipant TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != -925415106) {
            if (var1 != -636267638) {
               if (var1 != -489233354) {
                  var3 = null;
               } else {
                  var3 = new TLRPC.TL_chatParticipantAdmin();
               }
            } else {
               var3 = new TLRPC.TL_chatParticipantCreator();
            }
         } else {
            var3 = new TLRPC.TL_chatParticipant();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in ChatParticipant", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.ChatParticipant)var3;
         }
      }
   }

   public abstract static class ChatParticipants extends TLObject {
      public int admin_id;
      public int chat_id;
      public int flags;
      public ArrayList participants = new ArrayList();
      public TLRPC.ChatParticipant self_participant;
      public int version;

      public static TLRPC.ChatParticipants TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         switch(var1) {
         case -57668565:
            var3 = new TLRPC.TL_chatParticipantsForbidden();
            break;
         case 265468810:
            var3 = new TLRPC.TL_chatParticipantsForbidden_old();
            break;
         case 1061556205:
            var3 = new TLRPC.TL_chatParticipants();
            break;
         case 2017571861:
            var3 = new TLRPC.TL_chatParticipants_old();
            break;
         default:
            var3 = null;
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in ChatParticipants", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.ChatParticipants)var3;
         }
      }
   }

   public abstract static class ChatPhoto extends TLObject {
      public int dc_id;
      public TLRPC.FileLocation photo_big;
      public TLRPC.FileLocation photo_small;

      public static TLRPC.ChatPhoto TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != 935395612) {
            if (var1 != 1197267925) {
               if (var1 != 1632839530) {
                  var3 = null;
               } else {
                  var3 = new TLRPC.TL_chatPhoto_layer97();
               }
            } else {
               var3 = new TLRPC.TL_chatPhoto();
            }
         } else {
            var3 = new TLRPC.TL_chatPhotoEmpty();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in ChatPhoto", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.ChatPhoto)var3;
         }
      }
   }

   public abstract static class ContactLink extends TLObject {
      public static TLRPC.ContactLink TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != -721239344) {
            if (var1 != -17968211) {
               if (var1 != 1599050311) {
                  var3 = null;
               } else {
                  var3 = new TLRPC.TL_contactLinkUnknown();
               }
            } else {
               var3 = new TLRPC.TL_contactLinkNone();
            }
         } else {
            var3 = new TLRPC.TL_contactLinkContact();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in ContactLink", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.ContactLink)var3;
         }
      }
   }

   public abstract static class DecryptedMessage extends TLObject {
      public TLRPC.DecryptedMessageAction action;
      public ArrayList entities = new ArrayList();
      public int flags;
      public long grouped_id;
      public TLRPC.DecryptedMessageMedia media;
      public String message;
      public byte[] random_bytes;
      public long random_id;
      public long reply_to_random_id;
      public int ttl;
      public String via_bot_name;

      public static TLRPC.DecryptedMessage TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         switch(var1) {
         case -1848883596:
            var3 = new TLRPC.TL_decryptedMessage();
            break;
         case -1438109059:
            var3 = new TLRPC.TL_decryptedMessageService_layer8();
            break;
         case 528568095:
            var3 = new TLRPC.TL_decryptedMessage_layer8();
            break;
         case 541931640:
            var3 = new TLRPC.TL_decryptedMessage_layer17();
            break;
         case 917541342:
            var3 = new TLRPC.TL_decryptedMessage_layer45();
            break;
         case 1930838368:
            var3 = new TLRPC.TL_decryptedMessageService();
            break;
         default:
            var3 = null;
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in DecryptedMessage", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.DecryptedMessage)var3;
         }
      }
   }

   public abstract static class DecryptedMessageAction extends TLObject {
      public TLRPC.SendMessageAction action;
      public int end_seq_no;
      public long exchange_id;
      public byte[] g_a;
      public byte[] g_b;
      public long key_fingerprint;
      public int layer;
      public ArrayList random_ids = new ArrayList();
      public int start_seq_no;
      public int ttl_seconds;

      public static TLRPC.DecryptedMessageAction TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         switch(var1) {
         case -1967000459:
            var3 = new TLRPC.TL_decryptedMessageActionScreenshotMessages();
            break;
         case -1586283796:
            var3 = new TLRPC.TL_decryptedMessageActionSetMessageTTL();
            break;
         case -1473258141:
            var3 = new TLRPC.TL_decryptedMessageActionNoop();
            break;
         case -860719551:
            var3 = new TLRPC.TL_decryptedMessageActionTyping();
            break;
         case -586814357:
            var3 = new TLRPC.TL_decryptedMessageActionAbortKey();
            break;
         case -332526693:
            var3 = new TLRPC.TL_decryptedMessageActionCommitKey();
            break;
         case -217806717:
            var3 = new TLRPC.TL_decryptedMessageActionNotifyLayer();
            break;
         case -204906213:
            var3 = new TLRPC.TL_decryptedMessageActionRequestKey();
            break;
         case 206520510:
            var3 = new TLRPC.TL_decryptedMessageActionReadMessages();
            break;
         case 1360072880:
            var3 = new TLRPC.TL_decryptedMessageActionResend();
            break;
         case 1700872964:
            var3 = new TLRPC.TL_decryptedMessageActionDeleteMessages();
            break;
         case 1729750108:
            var3 = new TLRPC.TL_decryptedMessageActionFlushHistory();
            break;
         case 1877046107:
            var3 = new TLRPC.TL_decryptedMessageActionAcceptKey();
            break;
         default:
            var3 = null;
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in DecryptedMessageAction", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.DecryptedMessageAction)var3;
         }
      }
   }

   public abstract static class DecryptedMessageMedia extends TLObject {
      public double _long;
      public long access_hash;
      public String address;
      public ArrayList attributes = new ArrayList();
      public String caption;
      public int date;
      public int dc_id;
      public int duration;
      public String file_name;
      public String first_name;
      public int h;
      public long id;
      public byte[] iv;
      public byte[] key;
      public String last_name;
      public double lat;
      public String mime_type;
      public String phone_number;
      public String provider;
      public int size;
      public int thumb_h;
      public int thumb_w;
      public String title;
      public String url;
      public int user_id;
      public String venue_id;
      public int w;

      public static TLRPC.DecryptedMessageMedia TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         switch(var1) {
         case -1978796689:
            var3 = new TLRPC.TL_decryptedMessageMediaVenue();
            break;
         case -1760785394:
            var3 = new TLRPC.TL_decryptedMessageMediaVideo();
            break;
         case -1332395189:
            var3 = new TLRPC.TL_decryptedMessageMediaDocument_layer8();
            break;
         case -452652584:
            var3 = new TLRPC.TL_decryptedMessageMediaWebPage();
            break;
         case -235238024:
            var3 = new TLRPC.TL_decryptedMessageMediaPhoto();
            break;
         case -90853155:
            var3 = new TLRPC.TL_decryptedMessageMediaExternalDocument();
            break;
         case 144661578:
            var3 = new TLRPC.TL_decryptedMessageMediaEmpty();
            break;
         case 846826124:
            var3 = new TLRPC.TL_decryptedMessageMediaPhoto_layer8();
            break;
         case 893913689:
            var3 = new TLRPC.TL_decryptedMessageMediaGeoPoint();
            break;
         case 1290694387:
            var3 = new TLRPC.TL_decryptedMessageMediaVideo_layer8();
            break;
         case 1380598109:
            var3 = new TLRPC.TL_decryptedMessageMediaVideo_layer17();
            break;
         case 1474341323:
            var3 = new TLRPC.TL_decryptedMessageMediaAudio();
            break;
         case 1485441687:
            var3 = new TLRPC.TL_decryptedMessageMediaContact();
            break;
         case 1619031439:
            var3 = new TLRPC.TL_decryptedMessageMediaAudio_layer8();
            break;
         case 2063502050:
            var3 = new TLRPC.TL_decryptedMessageMediaDocument();
            break;
         default:
            var3 = null;
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in DecryptedMessageMedia", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.DecryptedMessageMedia)var3;
         }
      }
   }

   public abstract static class Dialog extends TLObject {
      public TLRPC.DraftMessage draft;
      public int flags;
      public int folder_id;
      public long id;
      public int last_message_date;
      public TLRPC.PeerNotifySettings notify_settings;
      public TLRPC.Peer peer;
      public boolean pinned;
      public int pinnedNum;
      public int pts;
      public int read_inbox_max_id;
      public int read_outbox_max_id;
      public int top_message;
      public int unread_count;
      public boolean unread_mark;
      public int unread_mentions_count;

      public static TLRPC.Dialog TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != 739712882) {
            if (var1 != 1908216652) {
               var3 = null;
            } else {
               var3 = new TLRPC.TL_dialogFolder();
            }
         } else {
            var3 = new TLRPC.TL_dialog();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in Dialog", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.Dialog)var3;
         }
      }
   }

   public abstract static class DialogPeer extends TLObject {
      public static TLRPC.DialogPeer TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != -445792507) {
            if (var1 != 1363483106) {
               var3 = null;
            } else {
               var3 = new TLRPC.TL_dialogPeerFolder();
            }
         } else {
            var3 = new TLRPC.TL_dialogPeer();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in DialogPeer", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.DialogPeer)var3;
         }
      }
   }

   public abstract static class Document extends TLObject {
      public long access_hash;
      public ArrayList attributes = new ArrayList();
      public int date;
      public int dc_id;
      public String file_name;
      public byte[] file_reference;
      public int flags;
      public long id;
      public byte[] iv;
      public byte[] key;
      public String mime_type;
      public int size;
      public ArrayList thumbs = new ArrayList();
      public int user_id;
      public int version;

      public static TLRPC.Document TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         switch(var1) {
         case -2027738169:
            var3 = new TLRPC.TL_document_layer82();
            break;
         case -1683841855:
            var3 = new TLRPC.TL_document();
            break;
         case -1627626714:
            var3 = new TLRPC.TL_document_old();
            break;
         case -106717361:
            var3 = new TLRPC.TL_document_layer53();
            break;
         case 922273905:
            var3 = new TLRPC.TL_documentEmpty();
            break;
         case 1431655766:
            var3 = new TLRPC.TL_documentEncrypted_old();
            break;
         case 1431655768:
            var3 = new TLRPC.TL_documentEncrypted();
            break;
         case 1498631756:
            var3 = new TLRPC.TL_document_layer92();
            break;
         default:
            var3 = null;
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in Document", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.Document)var3;
         }
      }
   }

   public abstract static class DocumentAttribute extends TLObject {
      public String alt;
      public int duration;
      public String file_name;
      public int flags;
      public int h;
      public boolean mask;
      public TLRPC.TL_maskCoords mask_coords;
      public String performer;
      public boolean round_message;
      public TLRPC.InputStickerSet stickerset;
      public boolean supports_streaming;
      public String title;
      public boolean voice;
      public int w;
      public byte[] waveform;

      public static TLRPC.DocumentAttribute TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         switch(var1) {
         case -1744710921:
            var3 = new TLRPC.TL_documentAttributeHasStickers();
            break;
         case -1739392570:
            var3 = new TLRPC.TL_documentAttributeAudio();
            break;
         case -1723033470:
            var3 = new TLRPC.TL_documentAttributeSticker_old2();
            break;
         case -556656416:
            var3 = new TLRPC.TL_documentAttributeAudio_layer45();
            break;
         case -83208409:
            var3 = new TLRPC.TL_documentAttributeSticker_old();
            break;
         case 85215461:
            var3 = new TLRPC.TL_documentAttributeAudio_old();
            break;
         case 250621158:
            var3 = new TLRPC.TL_documentAttributeVideo();
            break;
         case 297109817:
            var3 = new TLRPC.TL_documentAttributeAnimated();
            break;
         case 358154344:
            var3 = new TLRPC.TL_documentAttributeFilename();
            break;
         case 978674434:
            var3 = new TLRPC.TL_documentAttributeSticker_layer55();
            break;
         case 1494273227:
            var3 = new TLRPC.TL_documentAttributeVideo_layer65();
            break;
         case 1662637586:
            var3 = new TLRPC.TL_documentAttributeSticker();
            break;
         case 1815593308:
            var3 = new TLRPC.TL_documentAttributeImageSize();
            break;
         default:
            var3 = null;
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in DocumentAttribute", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.DocumentAttribute)var3;
         }
      }
   }

   public abstract static class DraftMessage extends TLObject {
      public int date;
      public ArrayList entities = new ArrayList();
      public int flags;
      public String message;
      public boolean no_webpage;
      public int reply_to_msg_id;

      public static TLRPC.DraftMessage TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != -1169445179) {
            if (var1 != -40996577) {
               if (var1 != 453805082) {
                  var3 = null;
               } else {
                  var3 = new TLRPC.TL_draftMessageEmpty();
               }
            } else {
               var3 = new TLRPC.TL_draftMessage();
            }
         } else {
            var3 = new TLRPC.TL_draftMessageEmpty_layer81();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in DraftMessage", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.DraftMessage)var3;
         }
      }
   }

   public abstract static class EmojiKeyword extends TLObject {
      public static TLRPC.EmojiKeyword TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != -709641735) {
            if (var1 != 594408994) {
               var3 = null;
            } else {
               var3 = new TLRPC.TL_emojiKeywordDeleted();
            }
         } else {
            var3 = new TLRPC.TL_emojiKeyword();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in EmojiKeyword", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.EmojiKeyword)var3;
         }
      }
   }

   public abstract static class EncryptedChat extends TLObject {
      public byte[] a_or_b;
      public long access_hash;
      public int admin_id;
      public byte[] auth_key;
      public int date;
      public long exchange_id;
      public byte[] future_auth_key;
      public long future_key_fingerprint;
      public byte[] g_a;
      public byte[] g_a_or_b;
      public int id;
      public int in_seq_no;
      public int key_create_date;
      public long key_fingerprint;
      public byte[] key_hash;
      public short key_use_count_in;
      public short key_use_count_out;
      public int layer;
      public int mtproto_seq;
      public byte[] nonce;
      public int participant_id;
      public int seq_in;
      public int seq_out;
      public int ttl;
      public int user_id;

      public static TLRPC.EncryptedChat TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         switch(var1) {
         case -1417756512:
            var3 = new TLRPC.TL_encryptedChatEmpty();
            break;
         case -931638658:
            var3 = new TLRPC.TL_encryptedChatRequested();
            break;
         case -94974410:
            var3 = new TLRPC.TL_encryptedChat();
            break;
         case -39213129:
            var3 = new TLRPC.TL_encryptedChatRequested_old();
            break;
         case 332848423:
            var3 = new TLRPC.TL_encryptedChatDiscarded();
            break;
         case 1006044124:
            var3 = new TLRPC.TL_encryptedChatWaiting();
            break;
         case 1711395151:
            var3 = new TLRPC.TL_encryptedChat_old();
            break;
         default:
            var3 = null;
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in EncryptedChat", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.EncryptedChat)var3;
         }
      }
   }

   public abstract static class EncryptedFile extends TLObject {
      public long access_hash;
      public int dc_id;
      public long id;
      public int key_fingerprint;
      public int size;

      public static TLRPC.EncryptedFile TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != -1038136962) {
            if (var1 != 1248893260) {
               var3 = null;
            } else {
               var3 = new TLRPC.TL_encryptedFile();
            }
         } else {
            var3 = new TLRPC.TL_encryptedFileEmpty();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in EncryptedFile", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.EncryptedFile)var3;
         }
      }
   }

   public abstract static class EncryptedMessage extends TLObject {
      public byte[] bytes;
      public int chat_id;
      public int date;
      public TLRPC.EncryptedFile file;
      public long random_id;

      public static TLRPC.EncryptedMessage TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != -317144808) {
            if (var1 != 594758406) {
               var3 = null;
            } else {
               var3 = new TLRPC.TL_encryptedMessageService();
            }
         } else {
            var3 = new TLRPC.TL_encryptedMessage();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in EncryptedMessage", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.EncryptedMessage)var3;
         }
      }
   }

   public abstract static class ExportedChatInvite extends TLObject {
      public String link;

      public static TLRPC.ExportedChatInvite TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != -64092740) {
            if (var1 != 1776236393) {
               var3 = null;
            } else {
               var3 = new TLRPC.TL_chatInviteEmpty();
            }
         } else {
            var3 = new TLRPC.TL_chatInviteExported();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in ExportedChatInvite", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.ExportedChatInvite)var3;
         }
      }
   }

   public abstract static class FileLocation extends TLObject {
      public int dc_id;
      public byte[] file_reference;
      public byte[] iv;
      public byte[] key;
      public int local_id;
      public long secret;
      public long volume_id;

      public static TLRPC.FileLocation TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         switch(var1) {
         case -1132476723:
            var3 = new TLRPC.TL_fileLocationToBeDeprecated();
            break;
         case 152900075:
            var3 = new TLRPC.TL_fileLocation_layer97();
            break;
         case 1406570614:
            var3 = new TLRPC.TL_fileLocation_layer82();
            break;
         case 1431655764:
            var3 = new TLRPC.TL_fileEncryptedLocation();
            break;
         case 2086234950:
            var3 = new TLRPC.TL_fileLocationUnavailable();
            break;
         default:
            var3 = null;
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in FileLocation", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.FileLocation)var3;
         }
      }
   }

   public abstract static class FoundGif extends TLObject {
      public String content_type;
      public String content_url;
      public TLRPC.Document document;
      public int h;
      public TLRPC.Photo photo;
      public String thumb_url;
      public String url;
      public int w;

      public static TLRPC.FoundGif TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != -1670052855) {
            if (var1 != 372165663) {
               var3 = null;
            } else {
               var3 = new TLRPC.TL_foundGif();
            }
         } else {
            var3 = new TLRPC.TL_foundGifCached();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in FoundGif", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.FoundGif)var3;
         }
      }
   }

   public abstract static class GeoPoint extends TLObject {
      public double _long;
      public long access_hash;
      public double lat;

      public static TLRPC.GeoPoint TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != 43446532) {
            if (var1 != 286776671) {
               if (var1 != 541710092) {
                  var3 = null;
               } else {
                  var3 = new TLRPC.TL_geoPoint_layer81();
               }
            } else {
               var3 = new TLRPC.TL_geoPointEmpty();
            }
         } else {
            var3 = new TLRPC.TL_geoPoint();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in GeoPoint", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.GeoPoint)var3;
         }
      }
   }

   public abstract static class GroupCall extends TLObject {
      public long access_hash;
      public int admin_id;
      public int channel_id;
      public TLRPC.TL_groupCallConnection connection;
      public int duration;
      public byte[] encryption_key;
      public int flags;
      public long id;
      public long key_fingerprint;
      public int participants_count;
      public TLRPC.TL_phoneCallProtocol protocol;
      public byte[] reflector_group_tag;
      public byte[] reflector_self_secret;
      public byte[] reflector_self_tag;

      public static TLRPC.GroupCall TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != 177149476) {
            if (var1 != 1829443076) {
               if (var1 != 2004925620) {
                  var3 = null;
               } else {
                  var3 = new TLRPC.TL_groupCallDiscarded();
               }
            } else {
               var3 = new TLRPC.TL_groupCallPrivate();
            }
         } else {
            var3 = new TLRPC.TL_groupCall();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in GroupCall", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.GroupCall)var3;
         }
      }
   }

   public abstract static class GroupCallParticipant extends TLObject {
      public int date;
      public int flags;
      public int inviter_id;
      public byte[] member_tag_hash;
      public TLRPC.TL_inputPhoneCall phone_call;
      public boolean readonly;
      public byte[] streams;
      public int user_id;

      public static TLRPC.GroupCallParticipant TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         switch(var1) {
         case 930387696:
            var3 = new TLRPC.TL_groupCallParticipantInvited();
            break;
         case 1100680690:
            var3 = new TLRPC.TL_groupCallParticipantLeft();
            break;
         case 1326135736:
            var3 = new TLRPC.TL_groupCallParticipantAdmin();
            break;
         case 1486730135:
            var3 = new TLRPC.TL_groupCallParticipant();
            break;
         default:
            var3 = null;
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in GroupCallParticipant", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.GroupCallParticipant)var3;
         }
      }
   }

   public abstract static class InputChannel extends TLObject {
      public long access_hash;
      public int channel_id;

      public static TLRPC.InputChannel TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != -1343524562) {
            if (var1 != -292807034) {
               if (var1 != 707290417) {
                  var3 = null;
               } else {
                  var3 = new TLRPC.TL_inputChannelFromMessage();
               }
            } else {
               var3 = new TLRPC.TL_inputChannelEmpty();
            }
         } else {
            var3 = new TLRPC.TL_inputChannel();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in InputChannel", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.InputChannel)var3;
         }
      }
   }

   public abstract static class InputChatPhoto extends TLObject {
      public TLRPC.InputFile file;
      public TLRPC.InputPhoto id;

      public static TLRPC.InputChatPhoto TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != -1991004873) {
            if (var1 != -1837345356) {
               if (var1 != 480546647) {
                  var3 = null;
               } else {
                  var3 = new TLRPC.TL_inputChatPhotoEmpty();
               }
            } else {
               var3 = new TLRPC.TL_inputChatUploadedPhoto();
            }
         } else {
            var3 = new TLRPC.TL_inputChatPhoto();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in InputChatPhoto", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.InputChatPhoto)var3;
         }
      }
   }

   public abstract static class InputCheckPasswordSRP extends TLObject {
      public static TLRPC.InputCheckPasswordSRP TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != -1736378792) {
            if (var1 != -763367294) {
               var3 = null;
            } else {
               var3 = new TLRPC.TL_inputCheckPasswordSRP();
            }
         } else {
            var3 = new TLRPC.TL_inputCheckPasswordEmpty();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in InputCheckPasswordSRP", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.InputCheckPasswordSRP)var3;
         }
      }
   }

   public abstract static class InputDialogPeer extends TLObject {
      public static TLRPC.InputDialogPeer TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != -55902537) {
            if (var1 != 1684014375) {
               var3 = null;
            } else {
               var3 = new TLRPC.TL_inputDialogPeerFolder();
            }
         } else {
            var3 = new TLRPC.TL_inputDialogPeer();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in InputDialogPeer", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.InputDialogPeer)var3;
         }
      }
   }

   public abstract static class InputDocument extends TLObject {
      public long access_hash;
      public byte[] file_reference;
      public long id;

      public static TLRPC.InputDocument TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != 448771445) {
            if (var1 != 1928391342) {
               var3 = null;
            } else {
               var3 = new TLRPC.TL_inputDocumentEmpty();
            }
         } else {
            var3 = new TLRPC.TL_inputDocument();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in InputDocument", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.InputDocument)var3;
         }
      }
   }

   public abstract static class InputEncryptedFile extends TLObject {
      public long access_hash;
      public long id;
      public int key_fingerprint;
      public String md5_checksum;
      public int parts;

      public static TLRPC.InputEncryptedFile TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         switch(var1) {
         case 406307684:
            var3 = new TLRPC.TL_inputEncryptedFileEmpty();
            break;
         case 767652808:
            var3 = new TLRPC.TL_inputEncryptedFileBigUploaded();
            break;
         case 1511503333:
            var3 = new TLRPC.TL_inputEncryptedFile();
            break;
         case 1690108678:
            var3 = new TLRPC.TL_inputEncryptedFileUploaded();
            break;
         default:
            var3 = null;
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in InputEncryptedFile", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.InputEncryptedFile)var3;
         }
      }
   }

   public abstract static class InputFile extends TLObject {
      public long id;
      public String md5_checksum;
      public String name;
      public int parts;

      public static TLRPC.InputFile TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != -181407105) {
            if (var1 != -95482955) {
               var3 = null;
            } else {
               var3 = new TLRPC.TL_inputFileBig();
            }
         } else {
            var3 = new TLRPC.TL_inputFile();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in InputFile", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.InputFile)var3;
         }
      }
   }

   public abstract static class InputFileLocation extends TLObject {
      public long access_hash;
      public boolean big;
      public byte[] file_reference;
      public int flags;
      public long id;
      public int local_id;
      public TLRPC.InputPeer peer;
      public long secret;
      public TLRPC.InputStickerSet stickerset;
      public String thumb_size;
      public long volume_id;

      public static TLRPC.InputFileLocation TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         switch(var1) {
         case -1160743548:
            var3 = new TLRPC.TL_inputDocumentFileLocation();
            break;
         case -876089816:
            var3 = new TLRPC.TL_inputSecureFileLocation();
            break;
         case -539317279:
            var3 = new TLRPC.TL_inputFileLocation();
            break;
         case -182231723:
            var3 = new TLRPC.TL_inputEncryptedFileLocation();
            break;
         case 230353641:
            var3 = new TLRPC.TL_inputStickerSetThumb();
            break;
         case 668375447:
            var3 = new TLRPC.TL_inputPeerPhotoFileLocation();
            break;
         case 1075322878:
            var3 = new TLRPC.TL_inputPhotoFileLocation();
            break;
         default:
            var3 = null;
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in InputFileLocation", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.InputFileLocation)var3;
         }
      }
   }

   public abstract static class InputGame extends TLObject {
      public long access_hash;
      public TLRPC.InputUser bot_id;
      public long id;
      public String short_name;

      public static TLRPC.InputGame TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != -1020139510) {
            if (var1 != 53231223) {
               var3 = null;
            } else {
               var3 = new TLRPC.TL_inputGameID();
            }
         } else {
            var3 = new TLRPC.TL_inputGameShortName();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in InputGame", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.InputGame)var3;
         }
      }
   }

   public abstract static class InputGeoPoint extends TLObject {
      public double _long;
      public double lat;

      public static TLRPC.InputGeoPoint TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != -457104426) {
            if (var1 != -206066487) {
               var3 = null;
            } else {
               var3 = new TLRPC.TL_inputGeoPoint();
            }
         } else {
            var3 = new TLRPC.TL_inputGeoPointEmpty();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in InputGeoPoint", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.InputGeoPoint)var3;
         }
      }
   }

   public abstract static class InputMedia extends TLObject {
      public String address;
      public ArrayList attributes = new ArrayList();
      public TLRPC.InputFile file;
      public String first_name;
      public int flags;
      public TLRPC.InputGeoPoint geo_point;
      public String last_name;
      public String mime_type;
      public boolean nosound_video;
      public int period;
      public String phone_number;
      public String provider;
      public String q;
      public ArrayList stickers = new ArrayList();
      public boolean stopped;
      public TLRPC.InputFile thumb;
      public String title;
      public int ttl_seconds;
      public String url;
      public String vcard;
      public String venue_id;
      public String venue_type;

      public static TLRPC.InputMedia TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         switch(var1) {
         case -1771768449:
            var3 = new TLRPC.TL_inputMediaEmpty();
            break;
         case -1279654347:
            var3 = new TLRPC.TL_inputMediaPhoto();
            break;
         case -1052959727:
            var3 = new TLRPC.TL_inputMediaVenue();
            break;
         case -833715459:
            var3 = new TLRPC.TL_inputMediaGeoLive();
            break;
         case -750828557:
            var3 = new TLRPC.TL_inputMediaGame();
            break;
         case -440664550:
            var3 = new TLRPC.TL_inputMediaPhotoExternal();
            break;
         case -122978821:
            var3 = new TLRPC.TL_inputMediaContact();
            break;
         case -104578748:
            var3 = new TLRPC.TL_inputMediaGeoPoint();
            break;
         case -78455655:
            var3 = new TLRPC.TL_inputMediaDocumentExternal();
            break;
         case 112424539:
            var3 = new TLRPC.TL_inputMediaPoll();
            break;
         case 505969924:
            var3 = new TLRPC.TL_inputMediaUploadedPhoto();
            break;
         case 598418386:
            var3 = new TLRPC.TL_inputMediaDocument();
            break;
         case 1212395773:
            var3 = new TLRPC.TL_inputMediaGifExternal();
            break;
         case 1530447553:
            var3 = new TLRPC.TL_inputMediaUploadedDocument();
            break;
         default:
            var3 = null;
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in InputMedia", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.InputMedia)var3;
         }
      }
   }

   public abstract static class InputNotifyPeer extends TLObject {
      public static TLRPC.InputNotifyPeer TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         switch(var1) {
         case -1311015810:
            var3 = new TLRPC.TL_inputNotifyBroadcasts();
            break;
         case -1195615476:
            var3 = new TLRPC.TL_inputNotifyPeer();
            break;
         case 423314455:
            var3 = new TLRPC.TL_inputNotifyUsers();
            break;
         case 1251338318:
            var3 = new TLRPC.TL_inputNotifyChats();
            break;
         default:
            var3 = null;
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in InputNotifyPeer", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.InputNotifyPeer)var3;
         }
      }
   }

   public abstract static class InputPaymentCredentials extends TLObject {
      public TLRPC.TL_dataJSON data;
      public int flags;
      public String google_transaction_id;
      public String id;
      public TLRPC.TL_dataJSON payment_token;
      public boolean save;
      public byte[] tmp_password;

      public static TLRPC.InputPaymentCredentials TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != -1056001329) {
            if (var1 != -905587442) {
               if (var1 != 873977640) {
                  var3 = null;
               } else {
                  var3 = new TLRPC.TL_inputPaymentCredentials();
               }
            } else {
               var3 = new TLRPC.TL_inputPaymentCredentialsAndroidPay();
            }
         } else {
            var3 = new TLRPC.TL_inputPaymentCredentialsSaved();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in InputPaymentCredentials", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.InputPaymentCredentials)var3;
         }
      }
   }

   public abstract static class InputPeer extends TLObject {
      public long access_hash;
      public int channel_id;
      public int chat_id;
      public int user_id;

      public static TLRPC.InputPeer TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         switch(var1) {
         case -1667893317:
            var3 = new TLRPC.TL_inputPeerChannelFromMessage();
            break;
         case 396093539:
            var3 = new TLRPC.TL_inputPeerChat();
            break;
         case 398123750:
            var3 = new TLRPC.TL_inputPeerUserFromMessage();
            break;
         case 548253432:
            var3 = new TLRPC.TL_inputPeerChannel();
            break;
         case 2072935910:
            var3 = new TLRPC.TL_inputPeerUser();
            break;
         case 2107670217:
            var3 = new TLRPC.TL_inputPeerSelf();
            break;
         case 2134579434:
            var3 = new TLRPC.TL_inputPeerEmpty();
            break;
         default:
            var3 = null;
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in InputPeer", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.InputPeer)var3;
         }
      }
   }

   public abstract static class InputPhoto extends TLObject {
      public long access_hash;
      public byte[] file_reference;
      public long id;

      public static TLRPC.InputPhoto TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != 483901197) {
            if (var1 != 1001634122) {
               var3 = null;
            } else {
               var3 = new TLRPC.TL_inputPhoto();
            }
         } else {
            var3 = new TLRPC.TL_inputPhotoEmpty();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in InputPhoto", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.InputPhoto)var3;
         }
      }
   }

   public abstract static class InputPrivacyKey extends TLObject {
      public static TLRPC.InputPrivacyKey TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         switch(var1) {
         case -1529000952:
            var3 = new TLRPC.TL_inputPrivacyKeyForwards();
            break;
         case -1107622874:
            var3 = new TLRPC.TL_inputPrivacyKeyChatInvite();
            break;
         case -610373422:
            var3 = new TLRPC.TL_inputPrivacyKeyPhoneP2P();
            break;
         case -88417185:
            var3 = new TLRPC.TL_inputPrivacyKeyPhoneCall();
            break;
         case 55761658:
            var3 = new TLRPC.TL_inputPrivacyKeyPhoneNumber();
            break;
         case 1335282456:
            var3 = new TLRPC.TL_inputPrivacyKeyStatusTimestamp();
            break;
         case 1461304012:
            var3 = new TLRPC.TL_inputPrivacyKeyProfilePhoto();
            break;
         default:
            var3 = null;
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in InputPrivacyKey", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.InputPrivacyKey)var3;
         }
      }
   }

   public abstract static class InputPrivacyRule extends TLObject {
      public static TLRPC.InputPrivacyRule TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         switch(var1) {
         case -1877932953:
            var3 = new TLRPC.TL_inputPrivacyValueDisallowUsers();
            break;
         case -697604407:
            var3 = new TLRPC.TL_inputPrivacyValueDisallowAll();
            break;
         case -668769361:
            var3 = new TLRPC.TL_inputPrivacyValueDisallowChatParticipants();
            break;
         case 195371015:
            var3 = new TLRPC.TL_inputPrivacyValueDisallowContacts();
            break;
         case 218751099:
            var3 = new TLRPC.TL_inputPrivacyValueAllowContacts();
            break;
         case 320652927:
            var3 = new TLRPC.TL_inputPrivacyValueAllowUsers();
            break;
         case 407582158:
            var3 = new TLRPC.TL_inputPrivacyValueAllowAll();
            break;
         case 1283572154:
            var3 = new TLRPC.TL_inputPrivacyValueAllowChatParticipants();
            break;
         default:
            var3 = null;
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in InputPrivacyRule", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.InputPrivacyRule)var3;
         }
      }
   }

   public abstract static class InputSecureFile extends TLObject {
      public static TLRPC.InputSecureFile TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != 859091184) {
            if (var1 != 1399317950) {
               var3 = null;
            } else {
               var3 = new TLRPC.TL_inputSecureFile();
            }
         } else {
            var3 = new TLRPC.TL_inputSecureFileUploaded();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in InputSecureFile", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.InputSecureFile)var3;
         }
      }
   }

   public abstract static class InputStickerSet extends TLObject {
      public long access_hash;
      public long id;
      public String short_name;

      public static TLRPC.InputStickerSet TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != -2044933984) {
            if (var1 != -1645763991) {
               if (var1 != -4838507) {
                  var3 = null;
               } else {
                  var3 = new TLRPC.TL_inputStickerSetEmpty();
               }
            } else {
               var3 = new TLRPC.TL_inputStickerSetID();
            }
         } else {
            var3 = new TLRPC.TL_inputStickerSetShortName();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in InputStickerSet", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.InputStickerSet)var3;
         }
      }
   }

   public abstract static class InputStickeredMedia extends TLObject {
      public static TLRPC.InputStickeredMedia TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != 70813275) {
            if (var1 != 1251549527) {
               var3 = null;
            } else {
               var3 = new TLRPC.TL_inputStickeredMediaPhoto();
            }
         } else {
            var3 = new TLRPC.TL_inputStickeredMediaDocument();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in InputStickeredMedia", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.InputStickeredMedia)var3;
         }
      }
   }

   public abstract static class InputUser extends TLObject {
      public long access_hash;
      public int user_id;

      public static TLRPC.InputUser TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         switch(var1) {
         case -1182234929:
            var3 = new TLRPC.TL_inputUserEmpty();
            break;
         case -668391402:
            var3 = new TLRPC.TL_inputUser();
            break;
         case -138301121:
            var3 = new TLRPC.TL_inputUserSelf();
            break;
         case 756118935:
            var3 = new TLRPC.TL_inputUserFromMessage();
            break;
         default:
            var3 = null;
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in InputUser", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.InputUser)var3;
         }
      }
   }

   public abstract static class InputWallPaper extends TLObject {
      public static TLRPC.InputWallPaper TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != -433014407) {
            if (var1 != 1913199744) {
               var3 = null;
            } else {
               var3 = new TLRPC.TL_inputWallPaperSlug();
            }
         } else {
            var3 = new TLRPC.TL_inputWallPaper();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in InputWallPaper", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.InputWallPaper)var3;
         }
      }
   }

   public abstract static class InputWebFileLocation extends TLObject {
      public static TLRPC.InputWebFileLocation TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != -1625153079) {
            if (var1 != -1036396922) {
               var3 = null;
            } else {
               var3 = new TLRPC.TL_inputWebFileLocation();
            }
         } else {
            var3 = new TLRPC.TL_inputWebFileGeoPointLocation();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in InputWebFileLocation", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.InputWebFileLocation)var3;
         }
      }
   }

   public abstract static class JSONValue extends TLObject {
      public static TLRPC.JSONValue TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         switch(var1) {
         case -1715350371:
            var3 = new TLRPC.TL_jsonObject();
            break;
         case -1222740358:
            var3 = new TLRPC.TL_jsonString();
            break;
         case -952869270:
            var3 = new TLRPC.TL_jsonBool();
            break;
         case -146520221:
            var3 = new TLRPC.TL_jsonArray();
            break;
         case 736157604:
            var3 = new TLRPC.TL_jsonNumber();
            break;
         case 1064139624:
            var3 = new TLRPC.TL_jsonNull();
            break;
         default:
            var3 = null;
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in JSONValue", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.JSONValue)var3;
         }
      }
   }

   public abstract static class KeyboardButton extends TLObject {
      public TLRPC.InputUser bot;
      public int button_id;
      public byte[] data;
      public int flags;
      public String fwd_text;
      public String query;
      public boolean request_write_access;
      public boolean same_peer;
      public String text;
      public String url;

      public static TLRPC.KeyboardButton TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         switch(var1) {
         case -1560655744:
            var3 = new TLRPC.TL_keyboardButton();
            break;
         case -1344716869:
            var3 = new TLRPC.TL_keyboardButtonBuy();
            break;
         case -1318425559:
            var3 = new TLRPC.TL_keyboardButtonRequestPhone();
            break;
         case -802258988:
            var3 = new TLRPC.TL_inputKeyboardButtonUrlAuth();
            break;
         case -59151553:
            var3 = new TLRPC.TL_keyboardButtonRequestGeoLocation();
            break;
         case 90744648:
            var3 = new TLRPC.TL_keyboardButtonSwitchInline();
            break;
         case 280464681:
            var3 = new TLRPC.TL_keyboardButtonUrlAuth();
            break;
         case 629866245:
            var3 = new TLRPC.TL_keyboardButtonUrl();
            break;
         case 1358175439:
            var3 = new TLRPC.TL_keyboardButtonGame();
            break;
         case 1748655686:
            var3 = new TLRPC.TL_keyboardButtonCallback();
            break;
         default:
            var3 = null;
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in KeyboardButton", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.KeyboardButton)var3;
         }
      }
   }

   public abstract static class LangPackString extends TLObject {
      public String few_value;
      public int flags;
      public String key;
      public String many_value;
      public String one_value;
      public String other_value;
      public String two_value;
      public String value;
      public String zero_value;

      public static TLRPC.LangPackString TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != -892239370) {
            if (var1 != 695856818) {
               if (var1 != 1816636575) {
                  var3 = null;
               } else {
                  var3 = new TLRPC.TL_langPackStringPluralized();
               }
            } else {
               var3 = new TLRPC.TL_langPackStringDeleted();
            }
         } else {
            var3 = new TLRPC.TL_langPackString();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in LangPackString", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.LangPackString)var3;
         }
      }
   }

   public abstract static class Message extends TLObject {
      public TLRPC.MessageAction action;
      public String attachPath = "";
      public int date;
      public int destroyTime;
      public long dialog_id;
      public int edit_date;
      public ArrayList entities = new ArrayList();
      public int flags;
      public int from_id;
      public boolean from_scheduled;
      public TLRPC.MessageFwdHeader fwd_from;
      public int fwd_msg_id = 0;
      public long grouped_id;
      public int id;
      public int layer;
      public boolean legacy;
      public int local_id = 0;
      public TLRPC.MessageMedia media;
      public boolean media_unread;
      public boolean mentioned;
      public String message;
      public boolean out;
      public HashMap params;
      public boolean post;
      public String post_author;
      public long random_id;
      public int realId;
      public TLRPC.Message replyMessage;
      public TLRPC.ReplyMarkup reply_markup;
      public int reply_to_msg_id;
      public long reply_to_random_id;
      public int reqId;
      public int send_state = 0;
      public int seq_in;
      public int seq_out;
      public boolean silent;
      public TLRPC.Peer to_id;
      public int ttl;
      public boolean unread;
      public int via_bot_id;
      public String via_bot_name;
      public int views;
      public boolean with_my_score;

      public static TLRPC.Message TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         switch(var1) {
         case -2082087340:
            var3 = new TLRPC.TL_messageEmpty();
            break;
         case -1864508399:
            var3 = new TLRPC.TL_message_layer72();
            break;
         case -1642487306:
            var3 = new TLRPC.TL_messageService();
            break;
         case -1618124613:
            var3 = new TLRPC.TL_messageService_old();
            break;
         case -1553471722:
            var3 = new TLRPC.TL_messageForwarded_old2();
            break;
         case -1481959023:
            var3 = new TLRPC.TL_message_old3();
            break;
         case -1066691065:
            var3 = new TLRPC.TL_messageService_layer48();
            break;
         case -1063525281:
            var3 = new TLRPC.TL_message_layer68();
            break;
         case -1023016155:
            var3 = new TLRPC.TL_message_old4();
            break;
         case -913120932:
            var3 = new TLRPC.TL_message_layer47();
            break;
         case -260565816:
            var3 = new TLRPC.TL_message_old5();
            break;
         case 99903492:
            var3 = new TLRPC.TL_messageForwarded_old();
            break;
         case 495384334:
            var3 = new TLRPC.TL_messageService_old2();
            break;
         case 585853626:
            var3 = new TLRPC.TL_message_old();
            break;
         case 736885382:
            var3 = new TLRPC.TL_message_old6();
            break;
         case 1157215293:
            var3 = new TLRPC.TL_message();
            break;
         case 1431655928:
            var3 = new TLRPC.TL_message_secret_old();
            break;
         case 1431655929:
            var3 = new TLRPC.TL_message_secret_layer72();
            break;
         case 1431655930:
            var3 = new TLRPC.TL_message_secret();
            break;
         case 1450613171:
            var3 = new TLRPC.TL_message_old2();
            break;
         case 1537633299:
            var3 = new TLRPC.TL_message_old7();
            break;
         default:
            var3 = null;
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in Message", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.Message)var3;
         }
      }

      public void readAttachPath(AbstractSerializedData var1, int var2) {
         TLRPC.MessageMedia var3 = this.media;
         boolean var4;
         if (var3 != null && !(var3 instanceof TLRPC.TL_messageMediaEmpty) && !(var3 instanceof TLRPC.TL_messageMediaWebPage)) {
            var4 = true;
         } else {
            var4 = false;
         }

         boolean var5;
         label121: {
            if (!TextUtils.isEmpty(this.message)) {
               var3 = this.media;
               if ((var3 instanceof TLRPC.TL_messageMediaPhoto_old || var3 instanceof TLRPC.TL_messageMediaPhoto_layer68 || var3 instanceof TLRPC.TL_messageMediaPhoto_layer74 || var3 instanceof TLRPC.TL_messageMediaDocument_old || var3 instanceof TLRPC.TL_messageMediaDocument_layer68 || var3 instanceof TLRPC.TL_messageMediaDocument_layer74) && this.message.startsWith("-1")) {
                  var5 = true;
                  break label121;
               }
            }

            var5 = false;
         }

         label138: {
            label107: {
               label131: {
                  if (!this.out) {
                     TLRPC.Peer var9 = this.to_id;
                     if (var9 == null) {
                        break label131;
                     }

                     int var6 = var9.user_id;
                     if (var6 == 0) {
                        break label131;
                     }

                     int var7 = this.from_id;
                     if (var6 != var7 || var7 != var2) {
                        break label131;
                     }
                  }

                  if (this.id < 0 || var4 || this.send_state == 3) {
                     break label107;
                  }
               }

               if (!this.legacy) {
                  break label138;
               }
            }

            if (var4 && var5) {
               if (this.message.length() > 6 && this.message.charAt(2) == '_') {
                  this.params = new HashMap();
                  this.params.put("ve", this.message);
               }

               if (this.params != null || this.message.length() == 2) {
                  this.message = "";
               }
            }

            if (var1.remaining() > 0) {
               this.attachPath = var1.readString(false);
               if ((this.id < 0 || this.send_state == 3 || this.legacy) && this.attachPath.startsWith("||")) {
                  String[] var8 = this.attachPath.split("\\|\\|");
                  if (var8.length > 0) {
                     if (this.params == null) {
                        this.params = new HashMap();
                     }

                     for(var2 = 1; var2 < var8.length - 1; ++var2) {
                        String[] var10 = var8[var2].split("\\|=\\|");
                        if (var10.length == 2) {
                           this.params.put(var10[0], var10[1]);
                        }
                     }

                     this.attachPath = var8[var8.length - 1].trim();
                     if (this.legacy) {
                        this.layer = Utilities.parseInt((String)this.params.get("legacy_layer"));
                     }
                  }
               }
            }
         }

         if ((this.flags & 4) != 0 && this.id < 0) {
            this.fwd_msg_id = var1.readInt32(false);
         }

      }

      protected void writeAttachPath(AbstractSerializedData var1) {
         String var2;
         String var3;
         HashMap var4;
         StringBuilder var5;
         Iterator var6;
         StringBuilder var7;
         Entry var8;
         if (!(this instanceof TLRPC.TL_message_secret) && !(this instanceof TLRPC.TL_message_secret_layer72)) {
            if (!TextUtils.isEmpty(this.attachPath)) {
               var2 = this.attachPath;
            } else {
               var2 = " ";
            }

            if (this.legacy) {
               if (this.params == null) {
                  this.params = new HashMap();
               }

               this.layer = 100;
               this.params.put("legacy_layer", "100");
            }

            label85: {
               if (this.id >= 0 && this.send_state != 3) {
                  var3 = var2;
                  if (!this.legacy) {
                     break label85;
                  }
               }

               var4 = this.params;
               var3 = var2;
               if (var4 != null) {
                  var3 = var2;
                  if (var4.size() > 0) {
                     for(var6 = this.params.entrySet().iterator(); var6.hasNext(); var2 = var5.toString()) {
                        var8 = (Entry)var6.next();
                        var5 = new StringBuilder();
                        var5.append((String)var8.getKey());
                        var5.append("|=|");
                        var5.append((String)var8.getValue());
                        var5.append("||");
                        var5.append(var2);
                     }

                     var7 = new StringBuilder();
                     var7.append("||");
                     var7.append(var2);
                     var3 = var7.toString();
                  }
               }
            }

            var1.writeString(var3);
            if ((this.flags & 4) != 0 && this.id < 0) {
               var1.writeInt32(this.fwd_msg_id);
            }
         } else {
            var2 = this.attachPath;
            if (var2 == null) {
               var2 = "";
            }

            var3 = var2;
            if (this.send_state == 1) {
               var4 = this.params;
               var3 = var2;
               if (var4 != null) {
                  var3 = var2;
                  if (var4.size() > 0) {
                     for(var6 = this.params.entrySet().iterator(); var6.hasNext(); var2 = var5.toString()) {
                        var8 = (Entry)var6.next();
                        var5 = new StringBuilder();
                        var5.append((String)var8.getKey());
                        var5.append("|=|");
                        var5.append((String)var8.getValue());
                        var5.append("||");
                        var5.append(var2);
                     }

                     var7 = new StringBuilder();
                     var7.append("||");
                     var7.append(var2);
                     var3 = var7.toString();
                  }
               }
            }

            var1.writeString(var3);
         }

      }
   }

   public abstract static class MessageAction extends TLObject {
      public String address;
      public TLRPC.TL_inputGroupCall call;
      public long call_id;
      public int channel_id;
      public int chat_id;
      public String currency;
      public int duration;
      public TLRPC.DecryptedMessageAction encryptedAction;
      public int flags;
      public long game_id;
      public int inviter_id;
      public String message;
      public TLRPC.UserProfilePhoto newUserPhoto;
      public TLRPC.Photo photo;
      public TLRPC.PhoneCallDiscardReason reason;
      public int score;
      public String title;
      public long total_amount;
      public int ttl;
      public int user_id;
      public ArrayList users = new ArrayList();
      public boolean video;

      public static TLRPC.MessageAction TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         switch(var1) {
         case -2132731265:
            var3 = new TLRPC.TL_messageActionPhoneCall();
            break;
         case -1834538890:
            var3 = new TLRPC.TL_messageActionGameScore();
            break;
         case -1799538451:
            var3 = new TLRPC.TL_messageActionPinMessage();
            break;
         case -1781355374:
            var3 = new TLRPC.TL_messageActionChannelCreate();
            break;
         case -1780220945:
            var3 = new TLRPC.TL_messageActionChatDeletePhoto();
            break;
         case -1615153660:
            var3 = new TLRPC.TL_messageActionHistoryClear();
            break;
         case -1503425638:
            var3 = new TLRPC.TL_messageActionChatCreate();
            break;
         case -1410748418:
            var3 = new TLRPC.TL_messageActionBotAllowed();
            break;
         case -1336546578:
            var3 = new TLRPC.TL_messageActionChannelMigrateFrom();
            break;
         case -1297179892:
            var3 = new TLRPC.TL_messageActionChatDeleteUser();
            break;
         case -1247687078:
            var3 = new TLRPC.TL_messageActionChatEditTitle();
            break;
         case -1230047312:
            var3 = new TLRPC.TL_messageActionEmpty();
            break;
         case -648257196:
            var3 = new TLRPC.TL_messageActionSecureValuesSent();
            break;
         case -202219658:
            var3 = new TLRPC.TL_messageActionContactSignUp();
            break;
         case -123931160:
            var3 = new TLRPC.TL_messageActionChatJoinedByLink();
            break;
         case -85549226:
            var3 = new TLRPC.TL_messageActionCustomAction();
            break;
         case 1080663248:
            var3 = new TLRPC.TL_messageActionPaymentSent();
            break;
         case 1200788123:
            var3 = new TLRPC.TL_messageActionScreenshotTaken();
            break;
         case 1217033015:
            var3 = new TLRPC.TL_messageActionChatAddUser();
            break;
         case 1371385889:
            var3 = new TLRPC.TL_messageActionChatMigrateTo();
            break;
         case 1431655760:
            var3 = new TLRPC.TL_messageActionUserJoined();
            break;
         case 1431655761:
            var3 = new TLRPC.TL_messageActionUserUpdatedPhoto();
            break;
         case 1431655762:
            var3 = new TLRPC.TL_messageActionTTLChange();
            break;
         case 1431655767:
            var3 = new TLRPC.TL_messageActionCreatedBroadcastList();
            break;
         case 1431655925:
            var3 = new TLRPC.TL_messageActionLoginUnknownLocation();
            break;
         case 1431655927:
            var3 = new TLRPC.TL_messageEncryptedAction();
            break;
         case 1581055051:
            var3 = new TLRPC.TL_messageActionChatAddUser_old();
            break;
         case 2047704898:
            var3 = new TLRPC.TL_messageActionGroupCall();
            break;
         case 2144015272:
            var3 = new TLRPC.TL_messageActionChatEditPhoto();
            break;
         default:
            var3 = null;
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in MessageAction", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.MessageAction)var3;
         }
      }
   }

   public abstract static class MessageEntity extends TLObject {
      public String language;
      public int length;
      public int offset;
      public String url;

      public static TLRPC.MessageEntity TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         switch(var1) {
         case -2106619040:
            var3 = new TLRPC.TL_messageEntityItalic();
            break;
         case -1687559349:
            var3 = new TLRPC.TL_messageEntityPhone();
            break;
         case -1672577397:
            var3 = new TLRPC.TL_messageEntityUnderline();
            break;
         case -1148011883:
            var3 = new TLRPC.TL_messageEntityUnknown();
            break;
         case -1117713463:
            var3 = new TLRPC.TL_messageEntityBold();
            break;
         case -1090087980:
            var3 = new TLRPC.TL_messageEntityStrike();
            break;
         case -100378723:
            var3 = new TLRPC.TL_messageEntityMention();
            break;
         case 34469328:
            var3 = new TLRPC.TL_messageEntityBlockquote();
            break;
         case 546203849:
            var3 = new TLRPC.TL_inputMessageEntityMentionName();
            break;
         case 681706865:
            var3 = new TLRPC.TL_messageEntityCode();
            break;
         case 892193368:
            var3 = new TLRPC.TL_messageEntityMentionName();
            break;
         case 1280209983:
            var3 = new TLRPC.TL_messageEntityCashtag();
            break;
         case 1692693954:
            var3 = new TLRPC.TL_messageEntityEmail();
            break;
         case 1827637959:
            var3 = new TLRPC.TL_messageEntityBotCommand();
            break;
         case 1859134776:
            var3 = new TLRPC.TL_messageEntityUrl();
            break;
         case 1868782349:
            var3 = new TLRPC.TL_messageEntityHashtag();
            break;
         case 1938967520:
            var3 = new TLRPC.TL_messageEntityPre();
            break;
         case 1990644519:
            var3 = new TLRPC.TL_messageEntityTextUrl();
            break;
         default:
            var3 = null;
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in MessageEntity", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.MessageEntity)var3;
         }
      }
   }

   public abstract static class MessageFwdHeader extends TLObject {
      public int channel_id;
      public int channel_post;
      public int date;
      public int flags;
      public int from_id;
      public String from_name;
      public String post_author;
      public int saved_from_msg_id;
      public TLRPC.Peer saved_from_peer;

      public static TLRPC.MessageFwdHeader TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         switch(var1) {
         case -947462709:
            var3 = new TLRPC.TL_messageFwdHeader_layer68();
            break;
         case -332168592:
            var3 = new TLRPC.TL_messageFwdHeader();
            break;
         case -85986132:
            var3 = new TLRPC.TL_messageFwdHeader_layer72();
            break;
         case 1436466797:
            var3 = new TLRPC.TL_messageFwdHeader_layer96();
            break;
         default:
            var3 = null;
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in MessageFwdHeader", var1));
         } else {
            if (var3 != null) {
               ((TLRPC.TL_messageFwdHeader)var3).readParams(var0, var2);
            }

            return (TLRPC.MessageFwdHeader)var3;
         }
      }
   }

   public abstract static class MessageMedia extends TLObject {
      public String address;
      public TLRPC.Audio audio_unused;
      public byte[] bytes;
      public String captionLegacy;
      public String currency;
      public String description;
      public TLRPC.Document document;
      public String first_name;
      public int flags;
      public TLRPC.TL_game game;
      public TLRPC.GeoPoint geo;
      public String last_name;
      public int period;
      public String phone_number;
      public TLRPC.Photo photo;
      public String provider;
      public int receipt_msg_id;
      public boolean shipping_address_requested;
      public String start_param;
      public boolean test;
      public String title;
      public long total_amount;
      public int ttl_seconds;
      public int user_id;
      public String vcard;
      public String venue_id;
      public String venue_type;
      public TLRPC.Video video_unused;
      public TLRPC.WebPage webpage;

      public static TLRPC.MessageMedia TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         switch(var1) {
         case -2074799289:
            var3 = new TLRPC.TL_messageMediaInvoice();
            break;
         case -1666158377:
            var3 = new TLRPC.TL_messageMediaDocument();
            break;
         case -1618676578:
            var3 = new TLRPC.TL_messageMediaUnsupported();
            break;
         case -1563278704:
            var3 = new TLRPC.TL_messageMediaVideo_old();
            break;
         case -1557277184:
            var3 = new TLRPC.TL_messageMediaWebPage();
            break;
         case -1256047857:
            var3 = new TLRPC.TL_messageMediaPhoto_layer74();
            break;
         case -961117440:
            var3 = new TLRPC.TL_messageMediaAudio_layer45();
            break;
         case -926655958:
            var3 = new TLRPC.TL_messageMediaPhoto_old();
            break;
         case -873313984:
            var3 = new TLRPC.TL_messageMediaContact();
            break;
         case -203411800:
            var3 = new TLRPC.TL_messageMediaDocument_layer68();
            break;
         case -38694904:
            var3 = new TLRPC.TL_messageMediaGame();
            break;
         case 694364726:
            var3 = new TLRPC.TL_messageMediaUnsupported_old();
            break;
         case 784356159:
            var3 = new TLRPC.TL_messageMediaVenue();
            break;
         case 802824708:
            var3 = new TLRPC.TL_messageMediaDocument_old();
            break;
         case 1032643901:
            var3 = new TLRPC.TL_messageMediaPhoto_layer68();
            break;
         case 1038967584:
            var3 = new TLRPC.TL_messageMediaEmpty();
            break;
         case 1272375192:
            var3 = new TLRPC.TL_messageMediaPoll();
            break;
         case 1457575028:
            var3 = new TLRPC.TL_messageMediaGeo();
            break;
         case 1540298357:
            var3 = new TLRPC.TL_messageMediaVideo_layer45();
            break;
         case 1585262393:
            var3 = new TLRPC.TL_messageMediaContact_layer81();
            break;
         case 1766936791:
            var3 = new TLRPC.TL_messageMediaPhoto();
            break;
         case 2031269663:
            var3 = new TLRPC.TL_messageMediaVenue_layer71();
            break;
         case 2084316681:
            var3 = new TLRPC.TL_messageMediaGeoLive();
            break;
         case 2084836563:
            var3 = new TLRPC.TL_messageMediaDocument_layer74();
            break;
         default:
            var3 = null;
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in MessageMedia", var1));
         } else {
            Object var6;
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
               TLRPC.TL_messageMediaDocument var4;
               TLRPC.Document var5;
               TLRPC.Document var8;
               String var14;
               if (((TLRPC.MessageMedia)var3).video_unused != null) {
                  var4 = new TLRPC.TL_messageMediaDocument();
                  TLRPC.Video var11;
                  if (((TLRPC.MessageMedia)var3).video_unused instanceof TLRPC.TL_videoEncrypted) {
                     var4.document = new TLRPC.TL_documentEncrypted();
                     var5 = var4.document;
                     var11 = ((TLRPC.MessageMedia)var3).video_unused;
                     var5.key = var11.key;
                     var5.iv = var11.iv;
                  } else {
                     var4.document = new TLRPC.TL_document();
                  }

                  var4.flags = 3;
                  var8 = var4.document;
                  var8.file_reference = new byte[0];
                  TLRPC.Video var15 = ((TLRPC.MessageMedia)var3).video_unused;
                  var8.id = var15.id;
                  var8.access_hash = var15.access_hash;
                  var8.date = var15.date;
                  var14 = var15.mime_type;
                  if (var14 != null) {
                     var8.mime_type = var14;
                  } else {
                     var8.mime_type = "video/mp4";
                  }

                  var5 = var4.document;
                  var11 = ((TLRPC.MessageMedia)var3).video_unused;
                  var5.size = var11.size;
                  var5.thumbs.add(var11.thumb);
                  var4.document.dc_id = ((TLRPC.MessageMedia)var3).video_unused.dc_id;
                  var4.captionLegacy = ((TLRPC.MessageMedia)var3).captionLegacy;
                  TLRPC.TL_documentAttributeVideo var12 = new TLRPC.TL_documentAttributeVideo();
                  TLRPC.Video var16 = ((TLRPC.MessageMedia)var3).video_unused;
                  var12.w = var16.w;
                  var12.h = var16.h;
                  var12.duration = var16.duration;
                  var4.document.attributes.add(var12);
                  var6 = var4;
                  if (var4.captionLegacy == null) {
                     var4.captionLegacy = "";
                     var6 = var4;
                  }

                  return (TLRPC.MessageMedia)var6;
               }

               if (((TLRPC.MessageMedia)var3).audio_unused != null) {
                  var4 = new TLRPC.TL_messageMediaDocument();
                  if (((TLRPC.MessageMedia)var3).audio_unused instanceof TLRPC.TL_audioEncrypted) {
                     var4.document = new TLRPC.TL_documentEncrypted();
                     var5 = var4.document;
                     TLRPC.Audio var7 = ((TLRPC.MessageMedia)var3).audio_unused;
                     var5.key = var7.key;
                     var5.iv = var7.iv;
                  } else {
                     var4.document = new TLRPC.TL_document();
                  }

                  var4.flags = 3;
                  var8 = var4.document;
                  var8.file_reference = new byte[0];
                  TLRPC.Audio var13 = ((TLRPC.MessageMedia)var3).audio_unused;
                  var8.id = var13.id;
                  var8.access_hash = var13.access_hash;
                  var8.date = var13.date;
                  var14 = var13.mime_type;
                  if (var14 != null) {
                     var8.mime_type = var14;
                  } else {
                     var8.mime_type = "audio/ogg";
                  }

                  var4.document.size = ((TLRPC.MessageMedia)var3).audio_unused.size;
                  TLRPC.TL_photoSizeEmpty var9 = new TLRPC.TL_photoSizeEmpty();
                  var9.type = "s";
                  var4.document.thumbs.add(var9);
                  var4.document.dc_id = ((TLRPC.MessageMedia)var3).audio_unused.dc_id;
                  var4.captionLegacy = ((TLRPC.MessageMedia)var3).captionLegacy;
                  TLRPC.TL_documentAttributeAudio var10 = new TLRPC.TL_documentAttributeAudio();
                  var10.duration = ((TLRPC.MessageMedia)var3).audio_unused.duration;
                  var10.voice = true;
                  var4.document.attributes.add(var10);
                  var6 = var4;
                  if (var4.captionLegacy == null) {
                     var4.captionLegacy = "";
                     var6 = var4;
                  }

                  return (TLRPC.MessageMedia)var6;
               }
            }

            var6 = var3;
            return (TLRPC.MessageMedia)var6;
         }
      }
   }

   public abstract static class MessagesFilter extends TLObject {
      public int flags;
      public boolean missed;

      public static TLRPC.MessagesFilter TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         switch(var1) {
         case -2134272152:
            var3 = new TLRPC.TL_inputMessagesFilterPhoneCalls();
            break;
         case -1777752804:
            var3 = new TLRPC.TL_inputMessagesFilterPhotos();
            break;
         case -1629621880:
            var3 = new TLRPC.TL_inputMessagesFilterDocument();
            break;
         case -1614803355:
            var3 = new TLRPC.TL_inputMessagesFilterVideo();
            break;
         case -1253451181:
            var3 = new TLRPC.TL_inputMessagesFilterRoundVideo();
            break;
         case -1040652646:
            var3 = new TLRPC.TL_inputMessagesFilterMyMentions();
            break;
         case -648121413:
            var3 = new TLRPC.TL_inputMessagesFilterPhotoVideoDocuments();
            break;
         case -530392189:
            var3 = new TLRPC.TL_inputMessagesFilterContacts();
            break;
         case -419271411:
            var3 = new TLRPC.TL_inputMessagesFilterGeo();
            break;
         case -3644025:
            var3 = new TLRPC.TL_inputMessagesFilterGif();
            break;
         case 928101534:
            var3 = new TLRPC.TL_inputMessagesFilterMusic();
            break;
         case 975236280:
            var3 = new TLRPC.TL_inputMessagesFilterChatPhotos();
            break;
         case 1358283666:
            var3 = new TLRPC.TL_inputMessagesFilterVoice();
            break;
         case 1458172132:
            var3 = new TLRPC.TL_inputMessagesFilterPhotoVideo();
            break;
         case 1474492012:
            var3 = new TLRPC.TL_inputMessagesFilterEmpty();
            break;
         case 2054952868:
            var3 = new TLRPC.TL_inputMessagesFilterRoundVoice();
            break;
         case 2129714567:
            var3 = new TLRPC.TL_inputMessagesFilterUrl();
            break;
         default:
            var3 = null;
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in MessagesFilter", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.MessagesFilter)var3;
         }
      }
   }

   public abstract static class NotifyPeer extends TLObject {
      public static TLRPC.NotifyPeer TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         switch(var1) {
         case -1613493288:
            var3 = new TLRPC.TL_notifyPeer();
            break;
         case -1261946036:
            var3 = new TLRPC.TL_notifyUsers();
            break;
         case -1073230141:
            var3 = new TLRPC.TL_notifyChats();
            break;
         case -703403793:
            var3 = new TLRPC.TL_notifyBroadcasts();
            break;
         default:
            var3 = null;
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in NotifyPeer", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.NotifyPeer)var3;
         }
      }
   }

   public abstract static class Page extends TLObject {
      public ArrayList blocks = new ArrayList();
      public ArrayList documents = new ArrayList();
      public int flags;
      public boolean part;
      public ArrayList photos = new ArrayList();
      public boolean rtl;
      public String url;

      public static TLRPC.Page TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         switch(var1) {
         case -1913754556:
            var3 = new TLRPC.TL_pagePart_layer67();
            break;
         case -1908433218:
            var3 = new TLRPC.TL_pagePart_layer82();
            break;
         case -1366746132:
            var3 = new TLRPC.TL_page();
            break;
         case -677274263:
            var3 = new TLRPC.TL_pageFull_layer67();
            break;
         case 1433323434:
            var3 = new TLRPC.TL_pageFull_layer82();
            break;
         default:
            var3 = null;
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in Page", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.Page)var3;
         }
      }
   }

   public abstract static class PageBlock extends TLObject {
      public boolean bottom;
      public boolean first;
      public int groupId;
      public int level;
      public int mid;
      public TLRPC.PhotoSize thumb;
      public TLObject thumbObject;

      public static TLRPC.PageBlock TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         switch(var1) {
         case -2143067670:
            var3 = new TLRPC.TL_pageBlockAudio();
            break;
         case -1879401953:
            var3 = new TLRPC.TL_pageBlockSubtitle();
            break;
         case -1702174239:
            var3 = new TLRPC.TL_pageBlockOrderedList();
            break;
         case -1538310410:
            var3 = new TLRPC.TL_pageBlockMap();
            break;
         case -1468953147:
            var3 = new TLRPC.TL_pageBlockEmbed();
            break;
         case -1162877472:
            var3 = new TLRPC.TL_pageBlockAuthorDate();
            break;
         case -1085412734:
            var3 = new TLRPC.TL_pageBlockTable();
            break;
         case -1076861716:
            var3 = new TLRPC.TL_pageBlockHeader();
            break;
         case -1066346178:
            var3 = new TLRPC.TL_pageBlockPreformatted();
            break;
         case -840826671:
            var3 = new TLRPC.TL_pageBlockEmbed_layer82();
            break;
         case -837994576:
            var3 = new TLRPC.TL_pageBlockAnchor();
            break;
         case -650782469:
            var3 = new TLRPC.TL_pageBlockEmbed_layer60();
            break;
         case -640214938:
            var3 = new TLRPC.TL_pageBlockVideo_layer82();
            break;
         case -618614392:
            var3 = new TLRPC.TL_pageBlockDivider();
            break;
         case -454524911:
            var3 = new TLRPC.TL_pageBlockList();
            break;
         case -372860542:
            var3 = new TLRPC.TL_pageBlockPhoto_layer82();
            break;
         case -283684427:
            var3 = new TLRPC.TL_pageBlockChannel();
            break;
         case -248793375:
            var3 = new TLRPC.TL_pageBlockSubheader();
            break;
         case -229005301:
            var3 = new TLRPC.TL_pageBlockEmbedPost();
            break;
         case 52401552:
            var3 = new TLRPC.TL_pageBlockSlideshow();
            break;
         case 145955919:
            var3 = new TLRPC.TL_pageBlockCollage_layer82();
            break;
         case 319588707:
            var3 = new TLRPC.TL_pageBlockSlideshow_layer82();
            break;
         case 324435594:
            var3 = new TLRPC.TL_pageBlockUnsupported();
            break;
         case 370236054:
            var3 = new TLRPC.TL_pageBlockRelatedArticles();
            break;
         case 391759200:
            var3 = new TLRPC.TL_pageBlockPhoto();
            break;
         case 504660880:
            var3 = new TLRPC.TL_pageBlockKicker();
            break;
         case 641563686:
            var3 = new TLRPC.TL_pageBlockBlockquote();
            break;
         case 690781161:
            var3 = new TLRPC.TL_pageBlockEmbedPost_layer82();
            break;
         case 834148991:
            var3 = new TLRPC.TL_pageBlockAudio_layer82();
            break;
         case 972174080:
            var3 = new TLRPC.TL_pageBlockCover();
            break;
         case 978896884:
            var3 = new TLRPC.TL_pageBlockList_layer82();
            break;
         case 1029399794:
            var3 = new TLRPC.TL_pageBlockAuthorDate_layer60();
            break;
         case 1182402406:
            var3 = new TLRPC.TL_pageBlockParagraph();
            break;
         case 1216809369:
            var3 = new TLRPC.TL_pageBlockFooter();
            break;
         case 1329878739:
            var3 = new TLRPC.TL_pageBlockPullquote();
            break;
         case 1705048653:
            var3 = new TLRPC.TL_pageBlockCollage();
            break;
         case 1890305021:
            var3 = new TLRPC.TL_pageBlockTitle();
            break;
         case 1987480557:
            var3 = new TLRPC.TL_pageBlockDetails();
            break;
         case 2089805750:
            var3 = new TLRPC.TL_pageBlockVideo();
            break;
         default:
            var3 = null;
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in PageBlock", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.PageBlock)var3;
         }
      }
   }

   public abstract static class PageListItem extends TLObject {
      public static TLRPC.PageListItem TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != -1188055347) {
            if (var1 != 635466748) {
               var3 = null;
            } else {
               var3 = new TLRPC.TL_pageListItemBlocks();
            }
         } else {
            var3 = new TLRPC.TL_pageListItemText();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in PageListItem", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.PageListItem)var3;
         }
      }
   }

   public abstract static class PageListOrderedItem extends TLObject {
      public static TLRPC.PageListOrderedItem TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != -1730311882) {
            if (var1 != 1577484359) {
               var3 = null;
            } else {
               var3 = new TLRPC.TL_pageListOrderedItemText();
            }
         } else {
            var3 = new TLRPC.TL_pageListOrderedItemBlocks();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in PageListOrderedItem", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.PageListOrderedItem)var3;
         }
      }
   }

   public abstract static class PasswordKdfAlgo extends TLObject {
      public static TLRPC.PasswordKdfAlgo TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != -732254058) {
            if (var1 != 982592842) {
               var3 = null;
            } else {
               var3 = new TLRPC.TL_passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow();
            }
         } else {
            var3 = new TLRPC.TL_passwordKdfAlgoUnknown();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in PasswordKdfAlgo", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.PasswordKdfAlgo)var3;
         }
      }
   }

   public abstract static class Peer extends TLObject {
      public int channel_id;
      public int chat_id;
      public int user_id;

      public static TLRPC.Peer TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != -1649296275) {
            if (var1 != -1160714821) {
               if (var1 != -1109531342) {
                  var3 = null;
               } else {
                  var3 = new TLRPC.TL_peerChannel();
               }
            } else {
               var3 = new TLRPC.TL_peerChat();
            }
         } else {
            var3 = new TLRPC.TL_peerUser();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in Peer", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.Peer)var3;
         }
      }
   }

   public abstract static class PeerNotifySettings extends TLObject {
      public int events_mask;
      public int flags;
      public int mute_until;
      public boolean show_previews;
      public boolean silent;
      public String sound;

      public static TLRPC.PeerNotifySettings TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         switch(var1) {
         case -1923214866:
            var3 = new TLRPC.TL_peerNotifySettings_layer47();
            break;
         case -1697798976:
            var3 = new TLRPC.TL_peerNotifySettings_layer77();
            break;
         case -1353671392:
            var3 = new TLRPC.TL_peerNotifySettings();
            break;
         case 1889961234:
            var3 = new TLRPC.TL_peerNotifySettingsEmpty_layer77();
            break;
         default:
            var3 = null;
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in PeerNotifySettings", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.PeerNotifySettings)var3;
         }
      }
   }

   public abstract static class PhoneCall extends TLObject {
      public long access_hash;
      public int admin_id;
      public ArrayList connections = new ArrayList();
      public int date;
      public int duration;
      public int flags;
      public byte[] g_a_hash;
      public byte[] g_a_or_b;
      public byte[] g_b;
      public long id;
      public long key_fingerprint;
      public boolean need_debug;
      public boolean need_rating;
      public boolean p2p_allowed;
      public int participant_id;
      public TLRPC.TL_phoneCallProtocol protocol;
      public TLRPC.PhoneCallDiscardReason reason;
      public int receive_date;
      public int start_date;
      public boolean video;

      public static TLRPC.PhoneCall TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         switch(var1) {
         case -2025673089:
            var3 = new TLRPC.TL_phoneCall();
            break;
         case -2014659757:
            var3 = new TLRPC.TL_phoneCallRequested();
            break;
         case -1719909046:
            var3 = new TLRPC.TL_phoneCallAccepted();
            break;
         case 462375633:
            var3 = new TLRPC.TL_phoneCallWaiting();
            break;
         case 1355435489:
            var3 = new TLRPC.TL_phoneCallDiscarded();
            break;
         case 1399245077:
            var3 = new TLRPC.TL_phoneCallEmpty();
            break;
         default:
            var3 = null;
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in PhoneCall", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.PhoneCall)var3;
         }
      }
   }

   public abstract static class PhoneCallDiscardReason extends TLObject {
      public byte[] encrypted_key;

      public static TLRPC.PhoneCallDiscardReason TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         switch(var1) {
         case -2048646399:
            var3 = new TLRPC.TL_phoneCallDiscardReasonMissed();
            break;
         case -1344096199:
            var3 = new TLRPC.TL_phoneCallDiscardReasonAllowGroupCall();
            break;
         case -527056480:
            var3 = new TLRPC.TL_phoneCallDiscardReasonDisconnect();
            break;
         case -84416311:
            var3 = new TLRPC.TL_phoneCallDiscardReasonBusy();
            break;
         case 1471006352:
            var3 = new TLRPC.TL_phoneCallDiscardReasonHangup();
            break;
         default:
            var3 = null;
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in PhoneCallDiscardReason", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.PhoneCallDiscardReason)var3;
         }
      }
   }

   public abstract static class Photo extends TLObject {
      public long access_hash;
      public String caption;
      public int date;
      public int dc_id;
      public byte[] file_reference;
      public int flags;
      public TLRPC.GeoPoint geo;
      public boolean has_stickers;
      public long id;
      public ArrayList sizes = new ArrayList();
      public int user_id;

      public static TLRPC.Photo TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         switch(var1) {
         case -1836524247:
            var3 = new TLRPC.TL_photo_layer82();
            break;
         case -1673036328:
            var3 = new TLRPC.TL_photo_layer97();
            break;
         case -1014792074:
            var3 = new TLRPC.TL_photo_old2();
            break;
         case -840088834:
            var3 = new TLRPC.TL_photo_layer55();
            break;
         case -797637467:
            var3 = new TLRPC.TL_photo();
            break;
         case 582313809:
            var3 = new TLRPC.TL_photo_old();
            break;
         case 590459437:
            var3 = new TLRPC.TL_photoEmpty();
            break;
         default:
            var3 = null;
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in Photo", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.Photo)var3;
         }
      }
   }

   public abstract static class PhotoSize extends TLObject {
      public byte[] bytes;
      public int h;
      public TLRPC.FileLocation location;
      public int size;
      public String type;
      public int w;

      public static TLRPC.PhotoSize TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         switch(var1) {
         case -525288402:
            var3 = new TLRPC.TL_photoStrippedSize();
            break;
         case -374917894:
            var3 = new TLRPC.TL_photoCachedSize();
            break;
         case 236446268:
            var3 = new TLRPC.TL_photoSizeEmpty();
            break;
         case 2009052699:
            var3 = new TLRPC.TL_photoSize();
            break;
         default:
            var3 = null;
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in PhotoSize", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.PhotoSize)var3;
         }
      }
   }

   public abstract static class PrivacyKey extends TLObject {
      public static TLRPC.PrivacyKey TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         switch(var1) {
         case -1777000467:
            var3 = new TLRPC.TL_privacyKeyProfilePhoto();
            break;
         case -1137792208:
            var3 = new TLRPC.TL_privacyKeyStatusTimestamp();
            break;
         case -778378131:
            var3 = new TLRPC.TL_privacyKeyPhoneNumber();
            break;
         case 961092808:
            var3 = new TLRPC.TL_privacyKeyPhoneP2P();
            break;
         case 1030105979:
            var3 = new TLRPC.TL_privacyKeyPhoneCall();
            break;
         case 1343122938:
            var3 = new TLRPC.TL_privacyKeyChatInvite();
            break;
         case 1777096355:
            var3 = new TLRPC.TL_privacyKeyForwards();
            break;
         default:
            var3 = null;
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in PrivacyKey", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.PrivacyKey)var3;
         }
      }
   }

   public abstract static class PrivacyRule extends TLObject {
      public static TLRPC.PrivacyRule TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         switch(var1) {
         case -1955338397:
            var3 = new TLRPC.TL_privacyValueDisallowAll();
            break;
         case -1397881200:
            var3 = new TLRPC.TL_privacyValueDisallowChatParticipants();
            break;
         case -125240806:
            var3 = new TLRPC.TL_privacyValueDisallowContacts();
            break;
         case -123988:
            var3 = new TLRPC.TL_privacyValueAllowContacts();
            break;
         case 209668535:
            var3 = new TLRPC.TL_privacyValueDisallowUsers();
            break;
         case 415136107:
            var3 = new TLRPC.TL_privacyValueAllowChatParticipants();
            break;
         case 1297858060:
            var3 = new TLRPC.TL_privacyValueAllowUsers();
            break;
         case 1698855810:
            var3 = new TLRPC.TL_privacyValueAllowAll();
            break;
         default:
            var3 = null;
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in PrivacyRule", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.PrivacyRule)var3;
         }
      }
   }

   public abstract static class RecentMeUrl extends TLObject {
      public int chat_id;
      public TLRPC.ChatInvite chat_invite;
      public TLRPC.StickerSetCovered set;
      public String url;
      public int user_id;

      public static TLRPC.RecentMeUrl TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         switch(var1) {
         case -1917045962:
            var3 = new TLRPC.TL_recentMeUrlUser();
            break;
         case -1608834311:
            var3 = new TLRPC.TL_recentMeUrlChat();
            break;
         case -1140172836:
            var3 = new TLRPC.TL_recentMeUrlStickerSet();
            break;
         case -347535331:
            var3 = new TLRPC.TL_recentMeUrlChatInvite();
            break;
         case 1189204285:
            var3 = new TLRPC.TL_recentMeUrlUnknown();
            break;
         default:
            var3 = null;
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in RecentMeUrl", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.RecentMeUrl)var3;
         }
      }
   }

   public abstract static class ReplyMarkup extends TLObject {
      public int flags;
      public boolean resize;
      public ArrayList rows = new ArrayList();
      public boolean selective;
      public boolean single_use;

      public static TLRPC.ReplyMarkup TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         switch(var1) {
         case -1606526075:
            var3 = new TLRPC.TL_replyKeyboardHide();
            break;
         case -200242528:
            var3 = new TLRPC.TL_replyKeyboardForceReply();
            break;
         case 889353612:
            var3 = new TLRPC.TL_replyKeyboardMarkup();
            break;
         case 1218642516:
            var3 = new TLRPC.TL_replyInlineMarkup();
            break;
         default:
            var3 = null;
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in ReplyMarkup", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.ReplyMarkup)var3;
         }
      }
   }

   public abstract static class ReportReason extends TLObject {
      public static TLRPC.ReportReason TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         switch(var1) {
         case -1685456582:
            var3 = new TLRPC.TL_inputReportReasonCopyright();
            break;
         case -1376497949:
            var3 = new TLRPC.TL_inputReportReasonChildAbuse();
            break;
         case -512463606:
            var3 = new TLRPC.TL_inputReportReasonOther();
            break;
         case 505595789:
            var3 = new TLRPC.TL_inputReportReasonViolence();
            break;
         case 777640226:
            var3 = new TLRPC.TL_inputReportReasonPornography();
            break;
         case 1490799288:
            var3 = new TLRPC.TL_inputReportReasonSpam();
            break;
         default:
            var3 = null;
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in ReportReason", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.ReportReason)var3;
         }
      }
   }

   public abstract static class RichText extends TLObject {
      public String email;
      public TLRPC.RichText parentRichText;
      public ArrayList texts = new ArrayList();
      public String url;
      public long webpage_id;

      public static TLRPC.RichText TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         switch(var1) {
         case -1678197867:
            var3 = new TLRPC.TL_textStrike();
            break;
         case -1054465340:
            var3 = new TLRPC.TL_textUnderline();
            break;
         case -939827711:
            var3 = new TLRPC.TL_textSuperscript();
            break;
         case -653089380:
            var3 = new TLRPC.TL_textItalic();
            break;
         case -599948721:
            var3 = new TLRPC.TL_textEmpty();
            break;
         case -564523562:
            var3 = new TLRPC.TL_textEmail();
            break;
         case -311786236:
            var3 = new TLRPC.TL_textSubscript();
            break;
         case 55281185:
            var3 = new TLRPC.TL_textMarked();
            break;
         case 136105807:
            var3 = new TLRPC.TL_textImage();
            break;
         case 483104362:
            var3 = new TLRPC.TL_textPhone();
            break;
         case 894777186:
            var3 = new TLRPC.TL_textAnchor();
            break;
         case 1009288385:
            var3 = new TLRPC.TL_textUrl();
            break;
         case 1730456516:
            var3 = new TLRPC.TL_textBold();
            break;
         case 1816074681:
            var3 = new TLRPC.TL_textFixed();
            break;
         case 1950782688:
            var3 = new TLRPC.TL_textPlain();
            break;
         case 2120376535:
            var3 = new TLRPC.TL_textConcat();
            break;
         default:
            var3 = null;
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in RichText", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.RichText)var3;
         }
      }
   }

   public abstract static class SecureFile extends TLObject {
      public static TLRPC.SecureFile TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != -534283678) {
            if (var1 != 1679398724) {
               var3 = null;
            } else {
               var3 = new TLRPC.TL_secureFileEmpty();
            }
         } else {
            var3 = new TLRPC.TL_secureFile();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in SecureFile", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.SecureFile)var3;
         }
      }
   }

   public abstract static class SecurePasswordKdfAlgo extends TLObject {
      public static TLRPC.SecurePasswordKdfAlgo TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != -2042159726) {
            if (var1 != -1141711456) {
               if (var1 != 4883767) {
                  var3 = null;
               } else {
                  var3 = new TLRPC.TL_securePasswordKdfAlgoUnknown();
               }
            } else {
               var3 = new TLRPC.TL_securePasswordKdfAlgoPBKDF2HMACSHA512iter100000();
            }
         } else {
            var3 = new TLRPC.TL_securePasswordKdfAlgoSHA512();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in SecurePasswordKdfAlgo", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.SecurePasswordKdfAlgo)var3;
         }
      }
   }

   public abstract static class SecurePlainData extends TLObject {
      public static TLRPC.SecurePlainData TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != 569137759) {
            if (var1 != 2103482845) {
               var3 = null;
            } else {
               var3 = new TLRPC.TL_securePlainPhone();
            }
         } else {
            var3 = new TLRPC.TL_securePlainEmail();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in SecurePlainData", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.SecurePlainData)var3;
         }
      }
   }

   public abstract static class SecureRequiredType extends TLObject {
      public static TLRPC.SecureRequiredType TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != -2103600678) {
            if (var1 != 41187252) {
               var3 = null;
            } else {
               var3 = new TLRPC.TL_secureRequiredTypeOneOf();
            }
         } else {
            var3 = new TLRPC.TL_secureRequiredType();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in SecureRequiredType", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.SecureRequiredType)var3;
         }
      }
   }

   public abstract static class SecureValueError extends TLObject {
      public static TLRPC.SecureValueError TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         switch(var1) {
         case -2037765467:
            var3 = new TLRPC.TL_secureValueErrorReverseSide();
            break;
         case -2036501105:
            var3 = new TLRPC.TL_secureValueError();
            break;
         case -1592506512:
            var3 = new TLRPC.TL_secureValueErrorTranslationFile();
            break;
         case -449327402:
            var3 = new TLRPC.TL_secureValueErrorSelfie();
            break;
         case -391902247:
            var3 = new TLRPC.TL_secureValueErrorData();
            break;
         case 12467706:
            var3 = new TLRPC.TL_secureValueErrorFrontSide();
            break;
         case 878931416:
            var3 = new TLRPC.TL_secureValueErrorTranslationFiles();
            break;
         case 1717706985:
            var3 = new TLRPC.TL_secureValueErrorFiles();
            break;
         case 2054162547:
            var3 = new TLRPC.TL_secureValueErrorFile();
            break;
         default:
            var3 = null;
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in SecureValueError", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.SecureValueError)var3;
         }
      }
   }

   public abstract static class SecureValueType extends TLObject {
      public static TLRPC.SecureValueType TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         switch(var1) {
         case -1995211763:
            var3 = new TLRPC.TL_secureValueTypeBankStatement();
            break;
         case -1954007928:
            var3 = new TLRPC.TL_secureValueTypeRentalAgreement();
            break;
         case -1908627474:
            var3 = new TLRPC.TL_secureValueTypeEmail();
            break;
         case -1717268701:
            var3 = new TLRPC.TL_secureValueTypeInternalPassport();
            break;
         case -1713143702:
            var3 = new TLRPC.TL_secureValueTypePassportRegistration();
            break;
         case -1658158621:
            var3 = new TLRPC.TL_secureValueTypePersonalDetails();
            break;
         case -1596951477:
            var3 = new TLRPC.TL_secureValueTypeIdentityCard();
            break;
         case -1289704741:
            var3 = new TLRPC.TL_secureValueTypePhone();
            break;
         case -874308058:
            var3 = new TLRPC.TL_secureValueTypeAddress();
            break;
         case -368907213:
            var3 = new TLRPC.TL_secureValueTypeTemporaryRegistration();
            break;
         case -63531698:
            var3 = new TLRPC.TL_secureValueTypeUtilityBill();
            break;
         case 115615172:
            var3 = new TLRPC.TL_secureValueTypeDriverLicense();
            break;
         case 1034709504:
            var3 = new TLRPC.TL_secureValueTypePassport();
            break;
         default:
            var3 = null;
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in SecureValueType", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.SecureValueType)var3;
         }
      }
   }

   public abstract static class SendMessageAction extends TLObject {
      public int progress;

      public static TLRPC.SendMessageAction TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         switch(var1) {
         case -1997373508:
            var3 = new TLRPC.TL_sendMessageRecordRoundAction();
            break;
         case -1884362354:
            var3 = new TLRPC.TL_sendMessageUploadDocumentAction_old();
            break;
         case -1845219337:
            var3 = new TLRPC.TL_sendMessageUploadVideoAction_old();
            break;
         case -1727382502:
            var3 = new TLRPC.TL_sendMessageUploadPhotoAction_old();
            break;
         case -1584933265:
            var3 = new TLRPC.TL_sendMessageRecordVideoAction();
            break;
         case -1441998364:
            var3 = new TLRPC.TL_sendMessageUploadDocumentAction();
            break;
         case -774682074:
            var3 = new TLRPC.TL_sendMessageUploadPhotoAction();
            break;
         case -718310409:
            var3 = new TLRPC.TL_sendMessageRecordAudioAction();
            break;
         case -580219064:
            var3 = new TLRPC.TL_sendMessageGamePlayAction();
            break;
         case -424899985:
            var3 = new TLRPC.TL_sendMessageUploadAudioAction_old();
            break;
         case -378127636:
            var3 = new TLRPC.TL_sendMessageUploadVideoAction();
            break;
         case -212740181:
            var3 = new TLRPC.TL_sendMessageUploadAudioAction();
            break;
         case -44119819:
            var3 = new TLRPC.TL_sendMessageCancelAction();
            break;
         case 381645902:
            var3 = new TLRPC.TL_sendMessageTypingAction();
            break;
         case 393186209:
            var3 = new TLRPC.TL_sendMessageGeoLocationAction();
            break;
         case 608050278:
            var3 = new TLRPC.TL_sendMessageUploadRoundAction();
            break;
         case 1653390447:
            var3 = new TLRPC.TL_sendMessageChooseContactAction();
            break;
         default:
            var3 = null;
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in SendMessageAction", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.SendMessageAction)var3;
         }
      }
   }

   public abstract static class StickerSet extends TLObject {
      public long access_hash;
      public boolean archived;
      public int count;
      public int flags;
      public int hash;
      public long id;
      public boolean installed;
      public int installed_date;
      public boolean masks;
      public boolean official;
      public String short_name;
      public TLRPC.PhotoSize thumb;
      public int thumb_dc_id;
      public String title;

      public static TLRPC.StickerSet TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         switch(var1) {
         case -1482409193:
            var3 = new TLRPC.TL_stickerSet_old();
            break;
         case -852477119:
            var3 = new TLRPC.TL_stickerSet_layer75();
            break;
         case -290164953:
            var3 = new TLRPC.TL_stickerSet();
            break;
         case 1434820921:
            var3 = new TLRPC.TL_stickerSet_layer96();
            break;
         case 1787870391:
            var3 = new TLRPC.TL_stickerSet_layer97();
            break;
         default:
            var3 = null;
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in StickerSet", var1));
         } else {
            if (var3 != null) {
               ((TLRPC.TL_stickerSet)var3).readParams(var0, var2);
            }

            return (TLRPC.StickerSet)var3;
         }
      }
   }

   public abstract static class StickerSetCovered extends TLObject {
      public TLRPC.Document cover;
      public ArrayList covers = new ArrayList();
      public TLRPC.StickerSet set;

      public static TLRPC.StickerSetCovered TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != 872932635) {
            if (var1 != 1678812626) {
               var3 = null;
            } else {
               var3 = new TLRPC.TL_stickerSetCovered();
            }
         } else {
            var3 = new TLRPC.TL_stickerSetMultiCovered();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in StickerSetCovered", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.StickerSetCovered)var3;
         }
      }
   }

   public static class TL_accountDaysTTL extends TLObject {
      public static int constructor;
      public int days;

      public static TLRPC.TL_accountDaysTTL TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_accountDaysTTL", var1));
            }
         } else {
            TLRPC.TL_accountDaysTTL var3 = new TLRPC.TL_accountDaysTTL();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.days = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.days);
      }
   }

   public static class TL_account_acceptAuthorization extends TLObject {
      public static int constructor;
      public int bot_id;
      public TLRPC.TL_secureCredentialsEncrypted credentials;
      public String public_key;
      public String scope;
      public ArrayList value_hashes = new ArrayList();

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.bot_id);
         var1.writeString(this.scope);
         var1.writeString(this.public_key);
         var1.writeInt32(481674261);
         int var2 = this.value_hashes.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.TL_secureValueHash)this.value_hashes.get(var3)).serializeToStream(var1);
         }

         this.credentials.serializeToStream(var1);
      }
   }

   public static class TL_account_authorizationForm extends TLObject {
      public static int constructor;
      public ArrayList errors = new ArrayList();
      public int flags;
      public String privacy_policy_url;
      public ArrayList required_types = new ArrayList();
      public ArrayList users = new ArrayList();
      public ArrayList values = new ArrayList();

      public static TLRPC.TL_account_authorizationForm TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_account_authorizationForm", var1));
            }
         } else {
            TLRPC.TL_account_authorizationForm var3 = new TLRPC.TL_account_authorizationForm();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.flags = var1.readInt32(var2);
         int var3 = var1.readInt32(var2);
         byte var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            int var5 = var1.readInt32(var2);

            for(var3 = 0; var3 < var5; ++var3) {
               TLRPC.SecureRequiredType var6 = TLRPC.SecureRequiredType.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               this.required_types.add(var6);
            }

            var3 = var1.readInt32(var2);
            if (var3 != 481674261) {
               if (var2) {
                  throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
               }
            } else {
               var5 = var1.readInt32(var2);

               for(var3 = 0; var3 < var5; ++var3) {
                  TLRPC.TL_secureValue var7 = TLRPC.TL_secureValue.TLdeserialize(var1, var1.readInt32(var2), var2);
                  if (var7 == null) {
                     return;
                  }

                  this.values.add(var7);
               }

               var3 = var1.readInt32(var2);
               if (var3 != 481674261) {
                  if (var2) {
                     throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
                  }
               } else {
                  var5 = var1.readInt32(var2);

                  for(var3 = 0; var3 < var5; ++var3) {
                     TLRPC.SecureValueError var8 = TLRPC.SecureValueError.TLdeserialize(var1, var1.readInt32(var2), var2);
                     if (var8 == null) {
                        return;
                     }

                     this.errors.add(var8);
                  }

                  var3 = var1.readInt32(var2);
                  if (var3 != 481674261) {
                     if (var2) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
                     }
                  } else {
                     var5 = var1.readInt32(var2);

                     for(var3 = var4; var3 < var5; ++var3) {
                        TLRPC.User var9 = TLRPC.User.TLdeserialize(var1, var1.readInt32(var2), var2);
                        if (var9 == null) {
                           return;
                        }

                        this.users.add(var9);
                     }

                     if ((this.flags & 1) != 0) {
                        this.privacy_policy_url = var1.readString(var2);
                     }

                  }
               }
            }
         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.flags);
         var1.writeInt32(481674261);
         int var2 = this.required_types.size();
         var1.writeInt32(var2);
         byte var3 = 0;

         int var4;
         for(var4 = 0; var4 < var2; ++var4) {
            ((TLRPC.SecureRequiredType)this.required_types.get(var4)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var2 = this.values.size();
         var1.writeInt32(var2);

         for(var4 = 0; var4 < var2; ++var4) {
            ((TLRPC.TL_secureValue)this.values.get(var4)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var2 = this.errors.size();
         var1.writeInt32(var2);

         for(var4 = 0; var4 < var2; ++var4) {
            ((TLRPC.SecureValueError)this.errors.get(var4)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var2 = this.users.size();
         var1.writeInt32(var2);

         for(var4 = var3; var4 < var2; ++var4) {
            ((TLRPC.User)this.users.get(var4)).serializeToStream(var1);
         }

         if ((this.flags & 1) != 0) {
            var1.writeString(this.privacy_policy_url);
         }

      }
   }

   public static class TL_account_authorizations extends TLObject {
      public static int constructor;
      public ArrayList authorizations = new ArrayList();

      public static TLRPC.TL_account_authorizations TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_account_authorizations", var1));
            }
         } else {
            TLRPC.TL_account_authorizations var3 = new TLRPC.TL_account_authorizations();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.TL_authorization var5 = TLRPC.TL_authorization.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               this.authorizations.add(var5);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = this.authorizations.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.TL_authorization)this.authorizations.get(var3)).serializeToStream(var1);
         }

      }
   }

   public static class TL_account_autoDownloadSettings extends TLObject {
      public static int constructor;
      public TLRPC.TL_autoDownloadSettings high;
      public TLRPC.TL_autoDownloadSettings low;
      public TLRPC.TL_autoDownloadSettings medium;

      public static TLRPC.TL_account_autoDownloadSettings TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_account_autoDownloadSettings", var1));
            }
         } else {
            TLRPC.TL_account_autoDownloadSettings var3 = new TLRPC.TL_account_autoDownloadSettings();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.low = TLRPC.TL_autoDownloadSettings.TLdeserialize(var1, var1.readInt32(var2), var2);
         this.medium = TLRPC.TL_autoDownloadSettings.TLdeserialize(var1, var1.readInt32(var2), var2);
         this.high = TLRPC.TL_autoDownloadSettings.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.low.serializeToStream(var1);
         this.medium.serializeToStream(var1);
         this.high.serializeToStream(var1);
      }
   }

   public static class TL_account_cancelPasswordEmail extends TLObject {
      public static int constructor;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_account_changePhone extends TLObject {
      public static int constructor;
      public String phone_code;
      public String phone_code_hash;
      public String phone_number;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.User.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.phone_number);
         var1.writeString(this.phone_code_hash);
         var1.writeString(this.phone_code);
      }
   }

   public static class TL_account_checkUsername extends TLObject {
      public static int constructor;
      public String username;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.username);
      }
   }

   public static class TL_account_confirmPasswordEmail extends TLObject {
      public static int constructor;
      public String code;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.code);
      }
   }

   public static class TL_account_confirmPhone extends TLObject {
      public static int constructor;
      public String phone_code;
      public String phone_code_hash;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.phone_code_hash);
         var1.writeString(this.phone_code);
      }
   }

   public static class TL_account_deleteAccount extends TLObject {
      public static int constructor;
      public String reason;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.reason);
      }
   }

   public static class TL_account_deleteSecureValue extends TLObject {
      public static int constructor;
      public ArrayList types = new ArrayList();

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = this.types.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.SecureValueType)this.types.get(var3)).serializeToStream(var1);
         }

      }
   }

   public static class TL_account_getAccountTTL extends TLObject {
      public static int constructor;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_accountDaysTTL.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_account_getAllSecureValues extends TLObject {
      public static int constructor;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         TLRPC.Vector var4 = new TLRPC.Vector();
         int var5 = var1.readInt32(var3);

         for(var2 = 0; var2 < var5; ++var2) {
            TLRPC.TL_secureValue var6 = TLRPC.TL_secureValue.TLdeserialize(var1, var1.readInt32(var3), var3);
            if (var6 == null) {
               return var4;
            }

            var4.objects.add(var6);
         }

         return var4;
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_account_getAuthorizationForm extends TLObject {
      public static int constructor;
      public int bot_id;
      public String public_key;
      public String scope;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_account_authorizationForm.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.bot_id);
         var1.writeString(this.scope);
         var1.writeString(this.public_key);
      }
   }

   public static class TL_account_getAuthorizations extends TLObject {
      public static int constructor;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_account_authorizations.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_account_getAutoDownloadSettings extends TLObject {
      public static int constructor;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_account_autoDownloadSettings.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_account_getContactSignUpNotification extends TLObject {
      public static int constructor;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_account_getNotifyExceptions extends TLObject {
      public static int constructor;
      public boolean compare_sound;
      public int flags;
      public TLRPC.InputNotifyPeer peer;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Updates.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.compare_sound) {
            var2 = this.flags | 2;
         } else {
            var2 = this.flags & -3;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         if ((this.flags & 1) != 0) {
            this.peer.serializeToStream(var1);
         }

      }
   }

   public static class TL_account_getNotifySettings extends TLObject {
      public static int constructor;
      public TLRPC.InputNotifyPeer peer;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.PeerNotifySettings.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.peer.serializeToStream(var1);
      }
   }

   public static class TL_account_getPassword extends TLObject {
      public static int constructor;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_account_password.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_account_getPasswordSettings extends TLObject {
      public static int constructor;
      public TLRPC.InputCheckPasswordSRP password;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_account_passwordSettings.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.password.serializeToStream(var1);
      }
   }

   public static class TL_account_getPrivacy extends TLObject {
      public static int constructor;
      public TLRPC.InputPrivacyKey key;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_account_privacyRules.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.key.serializeToStream(var1);
      }
   }

   public static class TL_account_getSecureValue extends TLObject {
      public static int constructor;
      public ArrayList types = new ArrayList();

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         TLRPC.Vector var4 = new TLRPC.Vector();
         int var5 = var1.readInt32(var3);

         for(var2 = 0; var2 < var5; ++var2) {
            TLRPC.TL_secureValue var6 = TLRPC.TL_secureValue.TLdeserialize(var1, var1.readInt32(var3), var3);
            if (var6 == null) {
               return var4;
            }

            var4.objects.add(var6);
         }

         return var4;
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = this.types.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.SecureValueType)this.types.get(var3)).serializeToStream(var1);
         }

      }
   }

   public static class TL_account_getTmpPassword extends TLObject {
      public static int constructor;
      public TLRPC.InputCheckPasswordSRP password;
      public int period;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_account_tmpPassword.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.password.serializeToStream(var1);
         var1.writeInt32(this.period);
      }
   }

   public static class TL_account_getWallPaper extends TLObject {
      public static int constructor;
      public TLRPC.InputWallPaper wallpaper;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.WallPaper.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.wallpaper.serializeToStream(var1);
      }
   }

   public static class TL_account_getWallPapers extends TLObject {
      public static int constructor;
      public int hash;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.account_WallPapers.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.hash);
      }
   }

   public static class TL_account_getWebAuthorizations extends TLObject {
      public static int constructor;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_account_webAuthorizations.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_account_installWallPaper extends TLObject {
      public static int constructor;
      public TLRPC.TL_wallPaperSettings settings;
      public TLRPC.InputWallPaper wallpaper;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.wallpaper.serializeToStream(var1);
         this.settings.serializeToStream(var1);
      }
   }

   public static class TL_account_password extends TLObject {
      public static int constructor;
      public TLRPC.PasswordKdfAlgo current_algo;
      public String email_unconfirmed_pattern;
      public int flags;
      public boolean has_password;
      public boolean has_recovery;
      public boolean has_secure_values;
      public String hint;
      public TLRPC.PasswordKdfAlgo new_algo;
      public TLRPC.SecurePasswordKdfAlgo new_secure_algo;
      public byte[] secure_random;
      public byte[] srp_B;
      public long srp_id;

      public static TLRPC.TL_account_password TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_account_password", var1));
            }
         } else {
            TLRPC.TL_account_password var3 = new TLRPC.TL_account_password();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.flags = var1.readInt32(var2);
         int var3 = this.flags;
         boolean var4 = true;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.has_recovery = var5;
         if ((this.flags & 2) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.has_secure_values = var5;
         if ((this.flags & 4) != 0) {
            var5 = var4;
         } else {
            var5 = false;
         }

         this.has_password = var5;
         if ((this.flags & 4) != 0) {
            this.current_algo = TLRPC.PasswordKdfAlgo.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         if ((this.flags & 4) != 0) {
            this.srp_B = var1.readByteArray(var2);
         }

         if ((this.flags & 4) != 0) {
            this.srp_id = var1.readInt64(var2);
         }

         if ((this.flags & 8) != 0) {
            this.hint = var1.readString(var2);
         }

         if ((this.flags & 16) != 0) {
            this.email_unconfirmed_pattern = var1.readString(var2);
         }

         this.new_algo = TLRPC.PasswordKdfAlgo.TLdeserialize(var1, var1.readInt32(var2), var2);
         this.new_secure_algo = TLRPC.SecurePasswordKdfAlgo.TLdeserialize(var1, var1.readInt32(var2), var2);
         this.secure_random = var1.readByteArray(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.has_recovery) {
            var2 = this.flags | 1;
         } else {
            var2 = this.flags & -2;
         }

         this.flags = var2;
         if (this.has_secure_values) {
            var2 = this.flags | 2;
         } else {
            var2 = this.flags & -3;
         }

         this.flags = var2;
         if (this.has_password) {
            var2 = this.flags | 4;
         } else {
            var2 = this.flags & -5;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         if ((this.flags & 4) != 0) {
            this.current_algo.serializeToStream(var1);
         }

         if ((this.flags & 4) != 0) {
            var1.writeByteArray(this.srp_B);
         }

         if ((this.flags & 4) != 0) {
            var1.writeInt64(this.srp_id);
         }

         if ((this.flags & 8) != 0) {
            var1.writeString(this.hint);
         }

         if ((this.flags & 16) != 0) {
            var1.writeString(this.email_unconfirmed_pattern);
         }

         this.new_algo.serializeToStream(var1);
         this.new_secure_algo.serializeToStream(var1);
         var1.writeByteArray(this.secure_random);
      }
   }

   public static class TL_account_passwordInputSettings extends TLObject {
      public static int constructor;
      public String email;
      public int flags;
      public String hint;
      public TLRPC.PasswordKdfAlgo new_algo;
      public byte[] new_password_hash;
      public TLRPC.TL_secureSecretSettings new_secure_settings;

      public static TLRPC.TL_account_passwordInputSettings TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_account_passwordInputSettings", var1));
            }
         } else {
            TLRPC.TL_account_passwordInputSettings var3 = new TLRPC.TL_account_passwordInputSettings();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.flags = var1.readInt32(var2);
         if ((this.flags & 1) != 0) {
            this.new_algo = TLRPC.PasswordKdfAlgo.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         if ((this.flags & 1) != 0) {
            this.new_password_hash = var1.readByteArray(var2);
         }

         if ((this.flags & 1) != 0) {
            this.hint = var1.readString(var2);
         }

         if ((this.flags & 2) != 0) {
            this.email = var1.readString(var2);
         }

         if ((this.flags & 4) != 0) {
            this.new_secure_settings = TLRPC.TL_secureSecretSettings.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.flags);
         if ((this.flags & 1) != 0) {
            this.new_algo.serializeToStream(var1);
         }

         if ((this.flags & 1) != 0) {
            var1.writeByteArray(this.new_password_hash);
         }

         if ((this.flags & 1) != 0) {
            var1.writeString(this.hint);
         }

         if ((this.flags & 2) != 0) {
            var1.writeString(this.email);
         }

         if ((this.flags & 4) != 0) {
            this.new_secure_settings.serializeToStream(var1);
         }

      }
   }

   public static class TL_account_passwordSettings extends TLObject {
      public static int constructor;
      public String email;
      public int flags;
      public TLRPC.TL_secureSecretSettings secure_settings;

      public static TLRPC.TL_account_passwordSettings TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_account_passwordSettings", var1));
            }
         } else {
            TLRPC.TL_account_passwordSettings var3 = new TLRPC.TL_account_passwordSettings();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.flags = var1.readInt32(var2);
         if ((this.flags & 1) != 0) {
            this.email = var1.readString(var2);
         }

         if ((this.flags & 2) != 0) {
            this.secure_settings = TLRPC.TL_secureSecretSettings.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.flags);
         if ((this.flags & 1) != 0) {
            var1.writeString(this.email);
         }

         if ((this.flags & 2) != 0) {
            this.secure_settings.serializeToStream(var1);
         }

      }
   }

   public static class TL_account_privacyRules extends TLObject {
      public static int constructor;
      public ArrayList chats = new ArrayList();
      public ArrayList rules = new ArrayList();
      public ArrayList users = new ArrayList();

      public static TLRPC.TL_account_privacyRules TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_account_privacyRules", var1));
            }
         } else {
            TLRPC.TL_account_privacyRules var3 = new TLRPC.TL_account_privacyRules();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         int var3 = var1.readInt32(var2);
         byte var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            int var5 = var1.readInt32(var2);

            for(var3 = 0; var3 < var5; ++var3) {
               TLRPC.PrivacyRule var6 = TLRPC.PrivacyRule.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               this.rules.add(var6);
            }

            var3 = var1.readInt32(var2);
            if (var3 != 481674261) {
               if (var2) {
                  throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
               }
            } else {
               var5 = var1.readInt32(var2);

               for(var3 = 0; var3 < var5; ++var3) {
                  TLRPC.Chat var7 = TLRPC.Chat.TLdeserialize(var1, var1.readInt32(var2), var2);
                  if (var7 == null) {
                     return;
                  }

                  this.chats.add(var7);
               }

               var3 = var1.readInt32(var2);
               if (var3 != 481674261) {
                  if (var2) {
                     throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
                  }
               } else {
                  var5 = var1.readInt32(var2);

                  for(var3 = var4; var3 < var5; ++var3) {
                     TLRPC.User var8 = TLRPC.User.TLdeserialize(var1, var1.readInt32(var2), var2);
                     if (var8 == null) {
                        return;
                     }

                     this.users.add(var8);
                  }

               }
            }
         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = this.rules.size();
         var1.writeInt32(var2);
         byte var3 = 0;

         int var4;
         for(var4 = 0; var4 < var2; ++var4) {
            ((TLRPC.PrivacyRule)this.rules.get(var4)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var2 = this.chats.size();
         var1.writeInt32(var2);

         for(var4 = 0; var4 < var2; ++var4) {
            ((TLRPC.Chat)this.chats.get(var4)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var2 = this.users.size();
         var1.writeInt32(var2);

         for(var4 = var3; var4 < var2; ++var4) {
            ((TLRPC.User)this.users.get(var4)).serializeToStream(var1);
         }

      }
   }

   public static class TL_account_registerDevice extends TLObject {
      public static int constructor;
      public boolean app_sandbox;
      public ArrayList other_uids = new ArrayList();
      public byte[] secret;
      public String token;
      public int token_type;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.token_type);
         var1.writeString(this.token);
         var1.writeBool(this.app_sandbox);
         var1.writeByteArray(this.secret);
         var1.writeInt32(481674261);
         int var2 = this.other_uids.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            var1.writeInt32((Integer)this.other_uids.get(var3));
         }

      }
   }

   public static class TL_account_reportPeer extends TLObject {
      public static int constructor;
      public TLRPC.InputPeer peer;
      public TLRPC.ReportReason reason;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.peer.serializeToStream(var1);
         this.reason.serializeToStream(var1);
      }
   }

   public static class TL_account_resendPasswordEmail extends TLObject {
      public static int constructor;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_account_resetAuthorization extends TLObject {
      public static int constructor;
      public long hash;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(this.hash);
      }
   }

   public static class TL_account_resetNotifySettings extends TLObject {
      public static int constructor;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_account_resetWallPapers extends TLObject {
      public static int constructor;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_account_resetWebAuthorization extends TLObject {
      public static int constructor;
      public long hash;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(this.hash);
      }
   }

   public static class TL_account_resetWebAuthorizations extends TLObject {
      public static int constructor;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_account_saveAutoDownloadSettings extends TLObject {
      public static int constructor;
      public int flags;
      public boolean high;
      public boolean low;
      public TLRPC.TL_autoDownloadSettings settings;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.low) {
            var2 = this.flags | 1;
         } else {
            var2 = this.flags & -2;
         }

         this.flags = var2;
         if (this.high) {
            var2 = this.flags | 2;
         } else {
            var2 = this.flags & -3;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         this.settings.serializeToStream(var1);
      }
   }

   public static class TL_account_saveSecureValue extends TLObject {
      public static int constructor;
      public long secure_secret_id;
      public TLRPC.TL_inputSecureValue value;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_secureValue.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.value.serializeToStream(var1);
         var1.writeInt64(this.secure_secret_id);
      }
   }

   public static class TL_account_saveWallPaper extends TLObject {
      public static int constructor;
      public TLRPC.TL_wallPaperSettings settings;
      public boolean unsave;
      public TLRPC.InputWallPaper wallpaper;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.wallpaper.serializeToStream(var1);
         var1.writeBool(this.unsave);
         this.settings.serializeToStream(var1);
      }
   }

   public static class TL_account_sendChangePhoneCode extends TLObject {
      public static int constructor;
      public String phone_number;
      public TLRPC.TL_codeSettings settings;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_auth_sentCode.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.phone_number);
         this.settings.serializeToStream(var1);
      }
   }

   public static class TL_account_sendConfirmPhoneCode extends TLObject {
      public static int constructor;
      public String hash;
      public TLRPC.TL_codeSettings settings;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_auth_sentCode.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.hash);
         this.settings.serializeToStream(var1);
      }
   }

   public static class TL_account_sendVerifyEmailCode extends TLObject {
      public static int constructor;
      public String email;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_account_sentEmailCode.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.email);
      }
   }

   public static class TL_account_sendVerifyPhoneCode extends TLObject {
      public static int constructor;
      public String phone_number;
      public TLRPC.TL_codeSettings settings;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_auth_sentCode.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.phone_number);
         this.settings.serializeToStream(var1);
      }
   }

   public static class TL_account_sentEmailCode extends TLObject {
      public static int constructor;
      public String email_pattern;
      public int length;

      public static TLRPC.TL_account_sentEmailCode TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_account_sentEmailCode", var1));
            }
         } else {
            TLRPC.TL_account_sentEmailCode var3 = new TLRPC.TL_account_sentEmailCode();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.email_pattern = var1.readString(var2);
         this.length = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.email_pattern);
         var1.writeInt32(this.length);
      }
   }

   public static class TL_account_setAccountTTL extends TLObject {
      public static int constructor;
      public TLRPC.TL_accountDaysTTL ttl;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.ttl.serializeToStream(var1);
      }
   }

   public static class TL_account_setContactSignUpNotification extends TLObject {
      public static int constructor;
      public boolean silent;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeBool(this.silent);
      }
   }

   public static class TL_account_setPrivacy extends TLObject {
      public static int constructor;
      public TLRPC.InputPrivacyKey key;
      public ArrayList rules = new ArrayList();

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_account_privacyRules.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.key.serializeToStream(var1);
         var1.writeInt32(481674261);
         int var2 = this.rules.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.InputPrivacyRule)this.rules.get(var3)).serializeToStream(var1);
         }

      }
   }

   public static class TL_account_tmpPassword extends TLObject {
      public static int constructor;
      public byte[] tmp_password;
      public int valid_until;

      public static TLRPC.TL_account_tmpPassword TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_account_tmpPassword", var1));
            }
         } else {
            TLRPC.TL_account_tmpPassword var3 = new TLRPC.TL_account_tmpPassword();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.tmp_password = var1.readByteArray(var2);
         this.valid_until = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeByteArray(this.tmp_password);
         var1.writeInt32(this.valid_until);
      }
   }

   public static class TL_account_unregisterDevice extends TLObject {
      public static int constructor;
      public ArrayList other_uids = new ArrayList();
      public String token;
      public int token_type;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.token_type);
         var1.writeString(this.token);
         var1.writeInt32(481674261);
         int var2 = this.other_uids.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            var1.writeInt32((Integer)this.other_uids.get(var3));
         }

      }
   }

   public static class TL_account_updateDeviceLocked extends TLObject {
      public static int constructor;
      public int period;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.period);
      }
   }

   public static class TL_account_updateNotifySettings extends TLObject {
      public static int constructor;
      public TLRPC.InputNotifyPeer peer;
      public TLRPC.TL_inputPeerNotifySettings settings;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.peer.serializeToStream(var1);
         this.settings.serializeToStream(var1);
      }
   }

   public static class TL_account_updatePasswordSettings extends TLObject {
      public static int constructor;
      public TLRPC.TL_account_passwordInputSettings new_settings;
      public TLRPC.InputCheckPasswordSRP password;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.password.serializeToStream(var1);
         this.new_settings.serializeToStream(var1);
      }
   }

   public static class TL_account_updateProfile extends TLObject {
      public static int constructor;
      public String about;
      public String first_name;
      public int flags;
      public String last_name;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.User.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.flags);
         if ((this.flags & 1) != 0) {
            var1.writeString(this.first_name);
         }

         if ((this.flags & 2) != 0) {
            var1.writeString(this.last_name);
         }

         if ((this.flags & 4) != 0) {
            var1.writeString(this.about);
         }

      }
   }

   public static class TL_account_updateStatus extends TLObject {
      public static int constructor;
      public boolean offline;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeBool(this.offline);
      }
   }

   public static class TL_account_updateUsername extends TLObject {
      public static int constructor;
      public String username;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.User.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.username);
      }
   }

   public static class TL_account_uploadWallPaper extends TLObject {
      public static int constructor;
      public TLRPC.InputFile file;
      public String mime_type;
      public TLRPC.TL_wallPaperSettings settings;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.WallPaper.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.file.serializeToStream(var1);
         var1.writeString(this.mime_type);
         this.settings.serializeToStream(var1);
      }
   }

   public static class TL_account_verifyEmail extends TLObject {
      public static int constructor;
      public String code;
      public String email;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.email);
         var1.writeString(this.code);
      }
   }

   public static class TL_account_verifyPhone extends TLObject {
      public static int constructor;
      public String phone_code;
      public String phone_code_hash;
      public String phone_number;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.phone_number);
         var1.writeString(this.phone_code_hash);
         var1.writeString(this.phone_code);
      }
   }

   public static class TL_account_wallPapers extends TLRPC.account_WallPapers {
      public static int constructor;
      public int hash;
      public ArrayList wallpapers = new ArrayList();

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.hash = var1.readInt32(var2);
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.WallPaper var5 = TLRPC.WallPaper.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               this.wallpapers.add(var5);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.hash);
         var1.writeInt32(481674261);
         int var2 = this.wallpapers.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.WallPaper)this.wallpapers.get(var3)).serializeToStream(var1);
         }

      }
   }

   public static class TL_account_wallPapersNotModified extends TLRPC.account_WallPapers {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_account_webAuthorizations extends TLObject {
      public static int constructor;
      public ArrayList authorizations = new ArrayList();
      public ArrayList users = new ArrayList();

      public static TLRPC.TL_account_webAuthorizations TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_account_webAuthorizations", var1));
            }
         } else {
            TLRPC.TL_account_webAuthorizations var3 = new TLRPC.TL_account_webAuthorizations();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         int var3 = var1.readInt32(var2);
         byte var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            int var5 = var1.readInt32(var2);

            for(var3 = 0; var3 < var5; ++var3) {
               TLRPC.TL_webAuthorization var6 = TLRPC.TL_webAuthorization.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               this.authorizations.add(var6);
            }

            var3 = var1.readInt32(var2);
            if (var3 != 481674261) {
               if (var2) {
                  throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
               }
            } else {
               var5 = var1.readInt32(var2);

               for(var3 = var4; var3 < var5; ++var3) {
                  TLRPC.User var7 = TLRPC.User.TLdeserialize(var1, var1.readInt32(var2), var2);
                  if (var7 == null) {
                     return;
                  }

                  this.users.add(var7);
               }

            }
         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = this.authorizations.size();
         var1.writeInt32(var2);
         byte var3 = 0;

         int var4;
         for(var4 = 0; var4 < var2; ++var4) {
            ((TLRPC.TL_webAuthorization)this.authorizations.get(var4)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var2 = this.users.size();
         var1.writeInt32(var2);

         for(var4 = var3; var4 < var2; ++var4) {
            ((TLRPC.User)this.users.get(var4)).serializeToStream(var1);
         }

      }
   }

   public static class TL_audioEmpty_layer45 extends TLRPC.Audio {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt64(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(super.id);
      }
   }

   public static class TL_audioEncrypted extends TLRPC.TL_audio_layer45 {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt64(var2);
         super.access_hash = var1.readInt64(var2);
         super.user_id = var1.readInt32(var2);
         super.date = var1.readInt32(var2);
         super.duration = var1.readInt32(var2);
         super.size = var1.readInt32(var2);
         super.dc_id = var1.readInt32(var2);
         super.key = var1.readByteArray(var2);
         super.iv = var1.readByteArray(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(super.id);
         var1.writeInt64(super.access_hash);
         var1.writeInt32(super.user_id);
         var1.writeInt32(super.date);
         var1.writeInt32(super.duration);
         var1.writeInt32(super.size);
         var1.writeInt32(super.dc_id);
         var1.writeByteArray(super.key);
         var1.writeByteArray(super.iv);
      }
   }

   public static class TL_audio_layer45 extends TLRPC.Audio {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt64(var2);
         super.access_hash = var1.readInt64(var2);
         super.date = var1.readInt32(var2);
         super.duration = var1.readInt32(var2);
         super.mime_type = var1.readString(var2);
         super.size = var1.readInt32(var2);
         super.dc_id = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(super.id);
         var1.writeInt64(super.access_hash);
         var1.writeInt32(super.date);
         var1.writeInt32(super.duration);
         var1.writeString(super.mime_type);
         var1.writeInt32(super.size);
         var1.writeInt32(super.dc_id);
      }
   }

   public static class TL_audio_old extends TLRPC.TL_audio_layer45 {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt64(var2);
         super.access_hash = var1.readInt64(var2);
         super.user_id = var1.readInt32(var2);
         super.date = var1.readInt32(var2);
         super.duration = var1.readInt32(var2);
         super.size = var1.readInt32(var2);
         super.dc_id = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(super.id);
         var1.writeInt64(super.access_hash);
         var1.writeInt32(super.user_id);
         var1.writeInt32(super.date);
         var1.writeInt32(super.duration);
         var1.writeInt32(super.size);
         var1.writeInt32(super.dc_id);
      }
   }

   public static class TL_audio_old2 extends TLRPC.TL_audio_layer45 {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt64(var2);
         super.access_hash = var1.readInt64(var2);
         super.user_id = var1.readInt32(var2);
         super.date = var1.readInt32(var2);
         super.duration = var1.readInt32(var2);
         super.mime_type = var1.readString(var2);
         super.size = var1.readInt32(var2);
         super.dc_id = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(super.id);
         var1.writeInt64(super.access_hash);
         var1.writeInt32(super.user_id);
         var1.writeInt32(super.date);
         var1.writeInt32(super.duration);
         var1.writeString(super.mime_type);
         var1.writeInt32(super.size);
         var1.writeInt32(super.dc_id);
      }
   }

   public static class TL_auth_authorization extends TLObject {
      public static int constructor;
      public int flags;
      public int tmp_sessions;
      public TLRPC.User user;

      public static TLRPC.TL_auth_authorization TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_auth_authorization", var1));
            }
         } else {
            TLRPC.TL_auth_authorization var3 = new TLRPC.TL_auth_authorization();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.flags = var1.readInt32(var2);
         if ((this.flags & 1) != 0) {
            this.tmp_sessions = var1.readInt32(var2);
         }

         this.user = TLRPC.User.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.flags);
         if ((this.flags & 1) != 0) {
            var1.writeInt32(this.tmp_sessions);
         }

         this.user.serializeToStream(var1);
      }
   }

   public static class TL_auth_cancelCode extends TLObject {
      public static int constructor;
      public String phone_code_hash;
      public String phone_number;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.phone_number);
         var1.writeString(this.phone_code_hash);
      }
   }

   public static class TL_auth_checkPassword extends TLObject {
      public static int constructor;
      public TLRPC.InputCheckPasswordSRP password;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_auth_authorization.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.password.serializeToStream(var1);
      }
   }

   public static class TL_auth_checkPhone extends TLObject {
      public static int constructor;
      public String phone_number;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_auth_checkedPhone.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.phone_number);
      }
   }

   public static class TL_auth_checkedPhone extends TLObject {
      public static int constructor;
      public boolean phone_registered;

      public static TLRPC.TL_auth_checkedPhone TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_auth_checkedPhone", var1));
            }
         } else {
            TLRPC.TL_auth_checkedPhone var3 = new TLRPC.TL_auth_checkedPhone();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.phone_registered = var1.readBool(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeBool(this.phone_registered);
      }
   }

   public static class TL_auth_codeTypeCall extends TLRPC.auth_CodeType {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_auth_codeTypeFlashCall extends TLRPC.auth_CodeType {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_auth_codeTypeSms extends TLRPC.auth_CodeType {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_auth_exportAuthorization extends TLObject {
      public static int constructor;
      public int dc_id;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_auth_exportedAuthorization.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.dc_id);
      }
   }

   public static class TL_auth_exportedAuthorization extends TLObject {
      public static int constructor;
      public byte[] bytes;
      public int id;

      public static TLRPC.TL_auth_exportedAuthorization TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_auth_exportedAuthorization", var1));
            }
         } else {
            TLRPC.TL_auth_exportedAuthorization var3 = new TLRPC.TL_auth_exportedAuthorization();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.id = var1.readInt32(var2);
         this.bytes = var1.readByteArray(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.id);
         var1.writeByteArray(this.bytes);
      }
   }

   public static class TL_auth_importAuthorization extends TLObject {
      public static int constructor;
      public byte[] bytes;
      public int id;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_auth_authorization.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.id);
         var1.writeByteArray(this.bytes);
      }
   }

   public static class TL_auth_logOut extends TLObject {
      public static int constructor;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_auth_passwordRecovery extends TLObject {
      public static int constructor;
      public String email_pattern;

      public static TLRPC.TL_auth_passwordRecovery TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_auth_passwordRecovery", var1));
            }
         } else {
            TLRPC.TL_auth_passwordRecovery var3 = new TLRPC.TL_auth_passwordRecovery();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.email_pattern = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.email_pattern);
      }
   }

   public static class TL_auth_recoverPassword extends TLObject {
      public static int constructor;
      public String code;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_auth_authorization.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.code);
      }
   }

   public static class TL_auth_requestPasswordRecovery extends TLObject {
      public static int constructor;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_auth_passwordRecovery.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_auth_resendCode extends TLObject {
      public static int constructor;
      public String phone_code_hash;
      public String phone_number;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_auth_sentCode.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.phone_number);
         var1.writeString(this.phone_code_hash);
      }
   }

   public static class TL_auth_resetAuthorizations extends TLObject {
      public static int constructor;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_auth_sendCode extends TLObject {
      public static int constructor;
      public String api_hash;
      public int api_id;
      public String phone_number;
      public TLRPC.TL_codeSettings settings;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_auth_sentCode.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.phone_number);
         var1.writeInt32(this.api_id);
         var1.writeString(this.api_hash);
         this.settings.serializeToStream(var1);
      }
   }

   public static class TL_auth_sentCode extends TLObject {
      public static int constructor;
      public int flags;
      public TLRPC.auth_CodeType next_type;
      public String phone_code_hash;
      public boolean phone_registered;
      public TLRPC.TL_help_termsOfService terms_of_service;
      public int timeout;
      public TLRPC.auth_SentCodeType type;

      public static TLRPC.TL_auth_sentCode TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_auth_sentCode", var1));
            }
         } else {
            TLRPC.TL_auth_sentCode var3 = new TLRPC.TL_auth_sentCode();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.flags = var1.readInt32(var2);
         int var3 = this.flags;
         boolean var4 = true;
         if ((var3 & 1) == 0) {
            var4 = false;
         }

         this.phone_registered = var4;
         this.type = TLRPC.auth_SentCodeType.TLdeserialize(var1, var1.readInt32(var2), var2);
         this.phone_code_hash = var1.readString(var2);
         if ((this.flags & 2) != 0) {
            this.next_type = TLRPC.auth_CodeType.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         if ((this.flags & 4) != 0) {
            this.timeout = var1.readInt32(var2);
         }

         if ((this.flags & 8) != 0) {
            this.terms_of_service = TLRPC.TL_help_termsOfService.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.phone_registered) {
            var2 = this.flags | 1;
         } else {
            var2 = this.flags & -2;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         this.type.serializeToStream(var1);
         var1.writeString(this.phone_code_hash);
         if ((this.flags & 2) != 0) {
            this.next_type.serializeToStream(var1);
         }

         if ((this.flags & 4) != 0) {
            var1.writeInt32(this.timeout);
         }

         if ((this.flags & 8) != 0) {
            this.terms_of_service.serializeToStream(var1);
         }

      }
   }

   public static class TL_auth_sentCodeTypeApp extends TLRPC.auth_SentCodeType {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.length = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.length);
      }
   }

   public static class TL_auth_sentCodeTypeCall extends TLRPC.auth_SentCodeType {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.length = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.length);
      }
   }

   public static class TL_auth_sentCodeTypeFlashCall extends TLRPC.auth_SentCodeType {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.pattern = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(super.pattern);
      }
   }

   public static class TL_auth_sentCodeTypeSms extends TLRPC.auth_SentCodeType {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.length = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.length);
      }
   }

   public static class TL_auth_signIn extends TLObject {
      public static int constructor;
      public String phone_code;
      public String phone_code_hash;
      public String phone_number;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_auth_authorization.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.phone_number);
         var1.writeString(this.phone_code_hash);
         var1.writeString(this.phone_code);
      }
   }

   public static class TL_auth_signUp extends TLObject {
      public static int constructor;
      public String first_name;
      public String last_name;
      public String phone_code;
      public String phone_code_hash;
      public String phone_number;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_auth_authorization.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.phone_number);
         var1.writeString(this.phone_code_hash);
         var1.writeString(this.phone_code);
         var1.writeString(this.first_name);
         var1.writeString(this.last_name);
      }
   }

   public static class TL_authorization extends TLObject {
      public static int constructor;
      public int api_id;
      public String app_name;
      public String app_version;
      public String country;
      public boolean current;
      public int date_active;
      public int date_created;
      public String device_model;
      public int flags;
      public long hash;
      public String ip;
      public boolean official_app;
      public boolean password_pending;
      public String platform;
      public String region;
      public String system_version;

      public static TLRPC.TL_authorization TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_authorization", var1));
            }
         } else {
            TLRPC.TL_authorization var3 = new TLRPC.TL_authorization();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.flags = var1.readInt32(var2);
         int var3 = this.flags;
         boolean var4 = true;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.current = var5;
         if ((this.flags & 2) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.official_app = var5;
         if ((this.flags & 4) != 0) {
            var5 = var4;
         } else {
            var5 = false;
         }

         this.password_pending = var5;
         this.hash = var1.readInt64(var2);
         this.device_model = var1.readString(var2);
         this.platform = var1.readString(var2);
         this.system_version = var1.readString(var2);
         this.api_id = var1.readInt32(var2);
         this.app_name = var1.readString(var2);
         this.app_version = var1.readString(var2);
         this.date_created = var1.readInt32(var2);
         this.date_active = var1.readInt32(var2);
         this.ip = var1.readString(var2);
         this.country = var1.readString(var2);
         this.region = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.current) {
            var2 = this.flags | 1;
         } else {
            var2 = this.flags & -2;
         }

         this.flags = var2;
         if (this.official_app) {
            var2 = this.flags | 2;
         } else {
            var2 = this.flags & -3;
         }

         this.flags = var2;
         if (this.password_pending) {
            var2 = this.flags | 4;
         } else {
            var2 = this.flags & -5;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         var1.writeInt64(this.hash);
         var1.writeString(this.device_model);
         var1.writeString(this.platform);
         var1.writeString(this.system_version);
         var1.writeInt32(this.api_id);
         var1.writeString(this.app_name);
         var1.writeString(this.app_version);
         var1.writeInt32(this.date_created);
         var1.writeInt32(this.date_active);
         var1.writeString(this.ip);
         var1.writeString(this.country);
         var1.writeString(this.region);
      }
   }

   public static class TL_autoDownloadSettings extends TLObject {
      public static int constructor;
      public boolean audio_preload_next;
      public boolean disabled;
      public int file_size_max;
      public int flags;
      public boolean phonecalls_less_data;
      public int photo_size_max;
      public boolean video_preload_large;
      public int video_size_max;

      public static TLRPC.TL_autoDownloadSettings TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_autoDownloadSettings", var1));
            }
         } else {
            TLRPC.TL_autoDownloadSettings var3 = new TLRPC.TL_autoDownloadSettings();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.flags = var1.readInt32(var2);
         int var3 = this.flags;
         boolean var4 = true;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.disabled = var5;
         if ((this.flags & 2) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.video_preload_large = var5;
         if ((this.flags & 4) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.audio_preload_next = var5;
         if ((this.flags & 8) != 0) {
            var5 = var4;
         } else {
            var5 = false;
         }

         this.phonecalls_less_data = var5;
         this.photo_size_max = var1.readInt32(var2);
         this.video_size_max = var1.readInt32(var2);
         this.file_size_max = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.disabled) {
            var2 = this.flags | 1;
         } else {
            var2 = this.flags & -2;
         }

         this.flags = var2;
         if (this.video_preload_large) {
            var2 = this.flags | 2;
         } else {
            var2 = this.flags & -3;
         }

         this.flags = var2;
         if (this.audio_preload_next) {
            var2 = this.flags | 4;
         } else {
            var2 = this.flags & -5;
         }

         this.flags = var2;
         if (this.phonecalls_less_data) {
            var2 = this.flags | 8;
         } else {
            var2 = this.flags & -9;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         var1.writeInt32(this.photo_size_max);
         var1.writeInt32(this.video_size_max);
         var1.writeInt32(this.file_size_max);
      }
   }

   public static class TL_boolFalse extends TLRPC.Bool {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_boolTrue extends TLRPC.Bool {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_botCommand extends TLObject {
      public static int constructor;
      public String command;
      public String description;

      public static TLRPC.TL_botCommand TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_botCommand", var1));
            }
         } else {
            TLRPC.TL_botCommand var3 = new TLRPC.TL_botCommand();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.command = var1.readString(var2);
         this.description = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.command);
         var1.writeString(this.description);
      }
   }

   public static class TL_botInfo extends TLRPC.BotInfo {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.user_id = var1.readInt32(var2);
         super.description = var1.readString(var2);
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.TL_botCommand var5 = TLRPC.TL_botCommand.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               super.commands.add(var5);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.user_id);
         var1.writeString(super.description);
         var1.writeInt32(481674261);
         int var2 = super.commands.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.TL_botCommand)super.commands.get(var3)).serializeToStream(var1);
         }

      }
   }

   public static class TL_botInfoEmpty_layer48 extends TLRPC.TL_botInfo {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_botInfo_layer48 extends TLRPC.TL_botInfo {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.user_id = var1.readInt32(var2);
         super.version = var1.readInt32(var2);
         var1.readString(var2);
         super.description = var1.readString(var2);
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.TL_botCommand var5 = TLRPC.TL_botCommand.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               super.commands.add(var5);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.user_id);
         var1.writeInt32(super.version);
         var1.writeString("");
         var1.writeString(super.description);
         var1.writeInt32(481674261);
         int var2 = super.commands.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.TL_botCommand)super.commands.get(var3)).serializeToStream(var1);
         }

      }
   }

   public static class TL_botInlineMediaResult extends TLRPC.BotInlineResult {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         super.id = var1.readString(var2);
         super.type = var1.readString(var2);
         if ((super.flags & 1) != 0) {
            super.photo = TLRPC.Photo.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         if ((super.flags & 2) != 0) {
            super.document = TLRPC.Document.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         if ((super.flags & 4) != 0) {
            super.title = var1.readString(var2);
         }

         if ((super.flags & 8) != 0) {
            super.description = var1.readString(var2);
         }

         super.send_message = TLRPC.BotInlineMessage.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.flags);
         var1.writeString(super.id);
         var1.writeString(super.type);
         if ((super.flags & 1) != 0) {
            super.photo.serializeToStream(var1);
         }

         if ((super.flags & 2) != 0) {
            super.document.serializeToStream(var1);
         }

         if ((super.flags & 4) != 0) {
            var1.writeString(super.title);
         }

         if ((super.flags & 8) != 0) {
            var1.writeString(super.description);
         }

         super.send_message.serializeToStream(var1);
      }
   }

   public static class TL_botInlineMessageMediaAuto extends TLRPC.BotInlineMessage {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         super.message = var1.readString(var2);
         if ((super.flags & 2) != 0) {
            int var3 = var1.readInt32(var2);
            int var4 = 0;
            if (var3 != 481674261) {
               if (!var2) {
                  return;
               }

               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }

            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.MessageEntity var5 = TLRPC.MessageEntity.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               super.entities.add(var5);
            }
         }

         if ((super.flags & 4) != 0) {
            super.reply_markup = TLRPC.ReplyMarkup.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.flags);
         var1.writeString(super.message);
         if ((super.flags & 2) != 0) {
            var1.writeInt32(481674261);
            int var2 = super.entities.size();
            var1.writeInt32(var2);

            for(int var3 = 0; var3 < var2; ++var3) {
               ((TLRPC.MessageEntity)super.entities.get(var3)).serializeToStream(var1);
            }
         }

         if ((super.flags & 4) != 0) {
            super.reply_markup.serializeToStream(var1);
         }

      }
   }

   public static class TL_botInlineMessageMediaAuto_layer74 extends TLRPC.TL_botInlineMessageMediaAuto {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         super.message = var1.readString(var2);
         if ((super.flags & 4) != 0) {
            super.reply_markup = TLRPC.ReplyMarkup.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.flags);
         var1.writeString(super.message);
         if ((super.flags & 4) != 0) {
            super.reply_markup.serializeToStream(var1);
         }

      }
   }

   public static class TL_botInlineMessageMediaContact extends TLRPC.BotInlineMessage {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         super.phone_number = var1.readString(var2);
         super.first_name = var1.readString(var2);
         super.last_name = var1.readString(var2);
         super.vcard = var1.readString(var2);
         if ((super.flags & 4) != 0) {
            super.reply_markup = TLRPC.ReplyMarkup.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.flags);
         var1.writeString(super.phone_number);
         var1.writeString(super.first_name);
         var1.writeString(super.last_name);
         var1.writeString(super.vcard);
         if ((super.flags & 4) != 0) {
            super.reply_markup.serializeToStream(var1);
         }

      }
   }

   public static class TL_botInlineMessageMediaContact_layer81 extends TLRPC.TL_botInlineMessageMediaContact {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         super.phone_number = var1.readString(var2);
         super.first_name = var1.readString(var2);
         super.last_name = var1.readString(var2);
         if ((super.flags & 4) != 0) {
            super.reply_markup = TLRPC.ReplyMarkup.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.flags);
         var1.writeString(super.phone_number);
         var1.writeString(super.first_name);
         var1.writeString(super.last_name);
         if ((super.flags & 4) != 0) {
            super.reply_markup.serializeToStream(var1);
         }

      }
   }

   public static class TL_botInlineMessageMediaGeo extends TLRPC.BotInlineMessage {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         super.geo = TLRPC.GeoPoint.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.period = var1.readInt32(var2);
         if ((super.flags & 4) != 0) {
            super.reply_markup = TLRPC.ReplyMarkup.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.flags);
         super.geo.serializeToStream(var1);
         var1.writeInt32(super.period);
         if ((super.flags & 4) != 0) {
            super.reply_markup.serializeToStream(var1);
         }

      }
   }

   public static class TL_botInlineMessageMediaGeo_layer71 extends TLRPC.TL_botInlineMessageMediaGeo {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         super.geo = TLRPC.GeoPoint.TLdeserialize(var1, var1.readInt32(var2), var2);
         if ((super.flags & 4) != 0) {
            super.reply_markup = TLRPC.ReplyMarkup.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.flags);
         super.geo.serializeToStream(var1);
         if ((super.flags & 4) != 0) {
            super.reply_markup.serializeToStream(var1);
         }

      }
   }

   public static class TL_botInlineMessageMediaVenue extends TLRPC.BotInlineMessage {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         super.geo = TLRPC.GeoPoint.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.title = var1.readString(var2);
         super.address = var1.readString(var2);
         super.provider = var1.readString(var2);
         super.venue_id = var1.readString(var2);
         super.venue_type = var1.readString(var2);
         if ((super.flags & 4) != 0) {
            super.reply_markup = TLRPC.ReplyMarkup.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.flags);
         super.geo.serializeToStream(var1);
         var1.writeString(super.title);
         var1.writeString(super.address);
         var1.writeString(super.provider);
         var1.writeString(super.venue_id);
         var1.writeString(super.venue_type);
         if ((super.flags & 4) != 0) {
            super.reply_markup.serializeToStream(var1);
         }

      }
   }

   public static class TL_botInlineMessageMediaVenue_layer77 extends TLRPC.TL_botInlineMessageMediaVenue {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         super.geo = TLRPC.GeoPoint.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.title = var1.readString(var2);
         super.address = var1.readString(var2);
         super.provider = var1.readString(var2);
         super.venue_id = var1.readString(var2);
         if ((super.flags & 4) != 0) {
            super.reply_markup = TLRPC.ReplyMarkup.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.flags);
         super.geo.serializeToStream(var1);
         var1.writeString(super.title);
         var1.writeString(super.address);
         var1.writeString(super.provider);
         var1.writeString(super.venue_id);
         if ((super.flags & 4) != 0) {
            super.reply_markup.serializeToStream(var1);
         }

      }
   }

   public static class TL_botInlineMessageText extends TLRPC.BotInlineMessage {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         int var4 = 0;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.no_webpage = var5;
         super.message = var1.readString(var2);
         if ((super.flags & 2) != 0) {
            var3 = var1.readInt32(var2);
            if (var3 != 481674261) {
               if (!var2) {
                  return;
               }

               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }

            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.MessageEntity var6 = TLRPC.MessageEntity.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               super.entities.add(var6);
            }
         }

         if ((super.flags & 4) != 0) {
            super.reply_markup = TLRPC.ReplyMarkup.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.no_webpage) {
            var2 = super.flags | 1;
         } else {
            var2 = super.flags & -2;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeString(super.message);
         if ((super.flags & 2) != 0) {
            var1.writeInt32(481674261);
            int var3 = super.entities.size();
            var1.writeInt32(var3);

            for(var2 = 0; var2 < var3; ++var2) {
               ((TLRPC.MessageEntity)super.entities.get(var2)).serializeToStream(var1);
            }
         }

         if ((super.flags & 4) != 0) {
            super.reply_markup.serializeToStream(var1);
         }

      }
   }

   public static class TL_botInlineResult extends TLRPC.BotInlineResult {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         super.id = var1.readString(var2);
         super.type = var1.readString(var2);
         if ((super.flags & 2) != 0) {
            super.title = var1.readString(var2);
         }

         if ((super.flags & 4) != 0) {
            super.description = var1.readString(var2);
         }

         if ((super.flags & 8) != 0) {
            super.url = var1.readString(var2);
         }

         if ((super.flags & 16) != 0) {
            super.thumb = TLRPC.WebDocument.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         if ((super.flags & 32) != 0) {
            super.content = TLRPC.WebDocument.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         super.send_message = TLRPC.BotInlineMessage.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.flags);
         var1.writeString(super.id);
         var1.writeString(super.type);
         if ((super.flags & 2) != 0) {
            var1.writeString(super.title);
         }

         if ((super.flags & 4) != 0) {
            var1.writeString(super.description);
         }

         if ((super.flags & 8) != 0) {
            var1.writeString(super.url);
         }

         if ((super.flags & 16) != 0) {
            super.thumb.serializeToStream(var1);
         }

         if ((super.flags & 32) != 0) {
            super.content.serializeToStream(var1);
         }

         super.send_message.serializeToStream(var1);
      }
   }

   public static class TL_channel extends TLRPC.Chat {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         boolean var4 = true;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.creator = var5;
         if ((super.flags & 4) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.left = var5;
         if ((super.flags & 32) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.broadcast = var5;
         if ((super.flags & 128) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.verified = var5;
         if ((super.flags & 256) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.megagroup = var5;
         if ((super.flags & 512) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.restricted = var5;
         if ((super.flags & 2048) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.signatures = var5;
         if ((super.flags & 4096) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.min = var5;
         if ((super.flags & 524288) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.scam = var5;
         if ((super.flags & 1048576) != 0) {
            var5 = var4;
         } else {
            var5 = false;
         }

         super.has_link = var5;
         super.id = var1.readInt32(var2);
         if ((super.flags & 8192) != 0) {
            super.access_hash = var1.readInt64(var2);
         }

         super.title = var1.readString(var2);
         if ((super.flags & 64) != 0) {
            super.username = var1.readString(var2);
         }

         super.photo = TLRPC.ChatPhoto.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.date = var1.readInt32(var2);
         super.version = var1.readInt32(var2);
         if ((super.flags & 512) != 0) {
            super.restriction_reason = var1.readString(var2);
         }

         if ((super.flags & 16384) != 0) {
            super.admin_rights = TLRPC.TL_chatAdminRights.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         if ((super.flags & '耀') != 0) {
            super.banned_rights = TLRPC.TL_chatBannedRights.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         if ((super.flags & 262144) != 0) {
            super.default_banned_rights = TLRPC.TL_chatBannedRights.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         if ((super.flags & 131072) != 0) {
            super.participants_count = var1.readInt32(var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.creator) {
            var2 = super.flags | 1;
         } else {
            var2 = super.flags & -2;
         }

         super.flags = var2;
         if (super.left) {
            var2 = super.flags | 4;
         } else {
            var2 = super.flags & -5;
         }

         super.flags = var2;
         if (super.broadcast) {
            var2 = super.flags | 32;
         } else {
            var2 = super.flags & -33;
         }

         super.flags = var2;
         if (super.verified) {
            var2 = super.flags | 128;
         } else {
            var2 = super.flags & -129;
         }

         super.flags = var2;
         if (super.megagroup) {
            var2 = super.flags | 256;
         } else {
            var2 = super.flags & -257;
         }

         super.flags = var2;
         if (super.restricted) {
            var2 = super.flags | 512;
         } else {
            var2 = super.flags & -513;
         }

         super.flags = var2;
         if (super.signatures) {
            var2 = super.flags | 2048;
         } else {
            var2 = super.flags & -2049;
         }

         super.flags = var2;
         if (super.min) {
            var2 = super.flags | 4096;
         } else {
            var2 = super.flags & -4097;
         }

         super.flags = var2;
         if (super.scam) {
            var2 = super.flags | 524288;
         } else {
            var2 = super.flags & -524289;
         }

         super.flags = var2;
         if (super.has_link) {
            var2 = super.flags | 1048576;
         } else {
            var2 = super.flags & -1048577;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt32(super.id);
         if ((super.flags & 8192) != 0) {
            var1.writeInt64(super.access_hash);
         }

         var1.writeString(super.title);
         if ((super.flags & 64) != 0) {
            var1.writeString(super.username);
         }

         super.photo.serializeToStream(var1);
         var1.writeInt32(super.date);
         var1.writeInt32(super.version);
         if ((super.flags & 512) != 0) {
            var1.writeString(super.restriction_reason);
         }

         if ((super.flags & 16384) != 0) {
            super.admin_rights.serializeToStream(var1);
         }

         if ((super.flags & '耀') != 0) {
            super.banned_rights.serializeToStream(var1);
         }

         if ((super.flags & 262144) != 0) {
            super.default_banned_rights.serializeToStream(var1);
         }

         if ((super.flags & 131072) != 0) {
            var1.writeInt32(super.participants_count);
         }

      }
   }

   public static class TL_channelAdminLogEvent extends TLObject {
      public static int constructor;
      public TLRPC.ChannelAdminLogEventAction action;
      public int date;
      public long id;
      public int user_id;

      public static TLRPC.TL_channelAdminLogEvent TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_channelAdminLogEvent", var1));
            }
         } else {
            TLRPC.TL_channelAdminLogEvent var3 = new TLRPC.TL_channelAdminLogEvent();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.id = var1.readInt64(var2);
         this.date = var1.readInt32(var2);
         this.user_id = var1.readInt32(var2);
         this.action = TLRPC.ChannelAdminLogEventAction.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(this.id);
         var1.writeInt32(this.date);
         var1.writeInt32(this.user_id);
         this.action.serializeToStream(var1);
      }
   }

   public static class TL_channelAdminLogEventActionChangeAbout extends TLRPC.ChannelAdminLogEventAction {
      public static int constructor;
      public String new_value;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.prev_value = var1.readString(var2);
         this.new_value = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(super.prev_value);
         var1.writeString(this.new_value);
      }
   }

   public static class TL_channelAdminLogEventActionChangeLinkedChat extends TLRPC.ChannelAdminLogEventAction {
      public static int constructor;
      public int new_value;
      public int prev_value;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.prev_value = var1.readInt32(var2);
         this.new_value = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.prev_value);
         var1.writeInt32(this.new_value);
      }
   }

   public static class TL_channelAdminLogEventActionChangePhoto extends TLRPC.ChannelAdminLogEventAction {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.prev_photo = TLRPC.Photo.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.new_photo = TLRPC.Photo.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         super.prev_photo.serializeToStream(var1);
         super.new_photo.serializeToStream(var1);
      }
   }

   public static class TL_channelAdminLogEventActionChangeStickerSet extends TLRPC.ChannelAdminLogEventAction {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.prev_stickerset = TLRPC.InputStickerSet.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.new_stickerset = TLRPC.InputStickerSet.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         super.prev_stickerset.serializeToStream(var1);
         super.new_stickerset.serializeToStream(var1);
      }
   }

   public static class TL_channelAdminLogEventActionChangeTitle extends TLRPC.ChannelAdminLogEventAction {
      public static int constructor;
      public String new_value;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.prev_value = var1.readString(var2);
         this.new_value = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(super.prev_value);
         var1.writeString(this.new_value);
      }
   }

   public static class TL_channelAdminLogEventActionChangeUsername extends TLRPC.ChannelAdminLogEventAction {
      public static int constructor;
      public String new_value;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.prev_value = var1.readString(var2);
         this.new_value = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(super.prev_value);
         var1.writeString(this.new_value);
      }
   }

   public static class TL_channelAdminLogEventActionDefaultBannedRights extends TLRPC.ChannelAdminLogEventAction {
      public static int constructor;
      public TLRPC.TL_chatBannedRights new_banned_rights;
      public TLRPC.TL_chatBannedRights prev_banned_rights;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.prev_banned_rights = TLRPC.TL_chatBannedRights.TLdeserialize(var1, var1.readInt32(var2), var2);
         this.new_banned_rights = TLRPC.TL_chatBannedRights.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.prev_banned_rights.serializeToStream(var1);
         this.new_banned_rights.serializeToStream(var1);
      }
   }

   public static class TL_channelAdminLogEventActionDeleteMessage extends TLRPC.ChannelAdminLogEventAction {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.message = TLRPC.Message.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         super.message.serializeToStream(var1);
      }
   }

   public static class TL_channelAdminLogEventActionEditMessage extends TLRPC.ChannelAdminLogEventAction {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.prev_message = TLRPC.Message.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.new_message = TLRPC.Message.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         super.prev_message.serializeToStream(var1);
         super.new_message.serializeToStream(var1);
      }
   }

   public static class TL_channelAdminLogEventActionParticipantInvite extends TLRPC.ChannelAdminLogEventAction {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.participant = TLRPC.ChannelParticipant.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         super.participant.serializeToStream(var1);
      }
   }

   public static class TL_channelAdminLogEventActionParticipantJoin extends TLRPC.ChannelAdminLogEventAction {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_channelAdminLogEventActionParticipantLeave extends TLRPC.ChannelAdminLogEventAction {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_channelAdminLogEventActionParticipantToggleAdmin extends TLRPC.ChannelAdminLogEventAction {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.prev_participant = TLRPC.ChannelParticipant.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.new_participant = TLRPC.ChannelParticipant.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         super.prev_participant.serializeToStream(var1);
         super.new_participant.serializeToStream(var1);
      }
   }

   public static class TL_channelAdminLogEventActionParticipantToggleBan extends TLRPC.ChannelAdminLogEventAction {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.prev_participant = TLRPC.ChannelParticipant.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.new_participant = TLRPC.ChannelParticipant.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         super.prev_participant.serializeToStream(var1);
         super.new_participant.serializeToStream(var1);
      }
   }

   public static class TL_channelAdminLogEventActionStopPoll extends TLRPC.ChannelAdminLogEventAction {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.message = TLRPC.Message.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         super.message.serializeToStream(var1);
      }
   }

   public static class TL_channelAdminLogEventActionToggleInvites extends TLRPC.ChannelAdminLogEventAction {
      public static int constructor;
      public boolean new_value;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.new_value = var1.readBool(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeBool(this.new_value);
      }
   }

   public static class TL_channelAdminLogEventActionTogglePreHistoryHidden extends TLRPC.ChannelAdminLogEventAction {
      public static int constructor;
      public boolean new_value;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.new_value = var1.readBool(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeBool(this.new_value);
      }
   }

   public static class TL_channelAdminLogEventActionToggleSignatures extends TLRPC.ChannelAdminLogEventAction {
      public static int constructor;
      public boolean new_value;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.new_value = var1.readBool(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeBool(this.new_value);
      }
   }

   public static class TL_channelAdminLogEventActionUpdatePinned extends TLRPC.ChannelAdminLogEventAction {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.message = TLRPC.Message.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         super.message.serializeToStream(var1);
      }
   }

   public static class TL_channelAdminLogEventsFilter extends TLObject {
      public static int constructor;
      public boolean ban;
      public boolean delete;
      public boolean demote;
      public boolean edit;
      public int flags;
      public boolean info;
      public boolean invite;
      public boolean join;
      public boolean kick;
      public boolean leave;
      public boolean pinned;
      public boolean promote;
      public boolean settings;
      public boolean unban;
      public boolean unkick;

      public static TLRPC.TL_channelAdminLogEventsFilter TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_channelAdminLogEventsFilter", var1));
            }
         } else {
            TLRPC.TL_channelAdminLogEventsFilter var3 = new TLRPC.TL_channelAdminLogEventsFilter();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.flags = var1.readInt32(var2);
         int var3 = this.flags;
         boolean var4 = true;
         if ((var3 & 1) != 0) {
            var2 = true;
         } else {
            var2 = false;
         }

         this.join = var2;
         if ((this.flags & 2) != 0) {
            var2 = true;
         } else {
            var2 = false;
         }

         this.leave = var2;
         if ((this.flags & 4) != 0) {
            var2 = true;
         } else {
            var2 = false;
         }

         this.invite = var2;
         if ((this.flags & 8) != 0) {
            var2 = true;
         } else {
            var2 = false;
         }

         this.ban = var2;
         if ((this.flags & 16) != 0) {
            var2 = true;
         } else {
            var2 = false;
         }

         this.unban = var2;
         if ((this.flags & 32) != 0) {
            var2 = true;
         } else {
            var2 = false;
         }

         this.kick = var2;
         if ((this.flags & 64) != 0) {
            var2 = true;
         } else {
            var2 = false;
         }

         this.unkick = var2;
         if ((this.flags & 128) != 0) {
            var2 = true;
         } else {
            var2 = false;
         }

         this.promote = var2;
         if ((this.flags & 256) != 0) {
            var2 = true;
         } else {
            var2 = false;
         }

         this.demote = var2;
         if ((this.flags & 512) != 0) {
            var2 = true;
         } else {
            var2 = false;
         }

         this.info = var2;
         if ((this.flags & 1024) != 0) {
            var2 = true;
         } else {
            var2 = false;
         }

         this.settings = var2;
         if ((this.flags & 2048) != 0) {
            var2 = true;
         } else {
            var2 = false;
         }

         this.pinned = var2;
         if ((this.flags & 4096) != 0) {
            var2 = true;
         } else {
            var2 = false;
         }

         this.edit = var2;
         if ((this.flags & 8192) != 0) {
            var2 = var4;
         } else {
            var2 = false;
         }

         this.delete = var2;
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.join) {
            var2 = this.flags | 1;
         } else {
            var2 = this.flags & -2;
         }

         this.flags = var2;
         if (this.leave) {
            var2 = this.flags | 2;
         } else {
            var2 = this.flags & -3;
         }

         this.flags = var2;
         if (this.invite) {
            var2 = this.flags | 4;
         } else {
            var2 = this.flags & -5;
         }

         this.flags = var2;
         if (this.ban) {
            var2 = this.flags | 8;
         } else {
            var2 = this.flags & -9;
         }

         this.flags = var2;
         if (this.unban) {
            var2 = this.flags | 16;
         } else {
            var2 = this.flags & -17;
         }

         this.flags = var2;
         if (this.kick) {
            var2 = this.flags | 32;
         } else {
            var2 = this.flags & -33;
         }

         this.flags = var2;
         if (this.unkick) {
            var2 = this.flags | 64;
         } else {
            var2 = this.flags & -65;
         }

         this.flags = var2;
         if (this.promote) {
            var2 = this.flags | 128;
         } else {
            var2 = this.flags & -129;
         }

         this.flags = var2;
         if (this.demote) {
            var2 = this.flags | 256;
         } else {
            var2 = this.flags & -257;
         }

         this.flags = var2;
         if (this.info) {
            var2 = this.flags | 512;
         } else {
            var2 = this.flags & -513;
         }

         this.flags = var2;
         if (this.settings) {
            var2 = this.flags | 1024;
         } else {
            var2 = this.flags & -1025;
         }

         this.flags = var2;
         if (this.pinned) {
            var2 = this.flags | 2048;
         } else {
            var2 = this.flags & -2049;
         }

         this.flags = var2;
         if (this.edit) {
            var2 = this.flags | 4096;
         } else {
            var2 = this.flags & -4097;
         }

         this.flags = var2;
         if (this.delete) {
            var2 = this.flags | 8192;
         } else {
            var2 = this.flags & -8193;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
      }
   }

   public static class TL_channelAdminRights_layer92 extends TLObject {
      public static int constructor;
      public boolean add_admins;
      public boolean ban_users;
      public boolean change_info;
      public boolean delete_messages;
      public boolean edit_messages;
      public int flags;
      public boolean invite_users;
      public boolean manage_call;
      public boolean pin_messages;
      public boolean post_messages;

      public static TLRPC.TL_channelAdminRights_layer92 TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_channelAdminRights_layer92", var1));
            }
         } else {
            TLRPC.TL_channelAdminRights_layer92 var3 = new TLRPC.TL_channelAdminRights_layer92();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.flags = var1.readInt32(var2);
         int var3 = this.flags;
         boolean var4 = true;
         if ((var3 & 1) != 0) {
            var2 = true;
         } else {
            var2 = false;
         }

         this.change_info = var2;
         if ((this.flags & 2) != 0) {
            var2 = true;
         } else {
            var2 = false;
         }

         this.post_messages = var2;
         if ((this.flags & 4) != 0) {
            var2 = true;
         } else {
            var2 = false;
         }

         this.edit_messages = var2;
         if ((this.flags & 8) != 0) {
            var2 = true;
         } else {
            var2 = false;
         }

         this.delete_messages = var2;
         if ((this.flags & 16) != 0) {
            var2 = true;
         } else {
            var2 = false;
         }

         this.ban_users = var2;
         if ((this.flags & 32) != 0) {
            var2 = true;
         } else {
            var2 = false;
         }

         this.invite_users = var2;
         if ((this.flags & 128) != 0) {
            var2 = true;
         } else {
            var2 = false;
         }

         this.pin_messages = var2;
         if ((this.flags & 512) != 0) {
            var2 = true;
         } else {
            var2 = false;
         }

         this.add_admins = var2;
         if ((this.flags & 1024) != 0) {
            var2 = var4;
         } else {
            var2 = false;
         }

         this.manage_call = var2;
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.change_info) {
            var2 = this.flags | 1;
         } else {
            var2 = this.flags & -2;
         }

         this.flags = var2;
         if (this.post_messages) {
            var2 = this.flags | 2;
         } else {
            var2 = this.flags & -3;
         }

         this.flags = var2;
         if (this.edit_messages) {
            var2 = this.flags | 4;
         } else {
            var2 = this.flags & -5;
         }

         this.flags = var2;
         if (this.delete_messages) {
            var2 = this.flags | 8;
         } else {
            var2 = this.flags & -9;
         }

         this.flags = var2;
         if (this.ban_users) {
            var2 = this.flags | 16;
         } else {
            var2 = this.flags & -17;
         }

         this.flags = var2;
         if (this.invite_users) {
            var2 = this.flags | 32;
         } else {
            var2 = this.flags & -33;
         }

         this.flags = var2;
         if (this.pin_messages) {
            var2 = this.flags | 128;
         } else {
            var2 = this.flags & -129;
         }

         this.flags = var2;
         if (this.add_admins) {
            var2 = this.flags | 512;
         } else {
            var2 = this.flags & -513;
         }

         this.flags = var2;
         if (this.manage_call) {
            var2 = this.flags | 1024;
         } else {
            var2 = this.flags & -1025;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
      }
   }

   public static class TL_channelBannedRights_layer92 extends TLObject {
      public static int constructor;
      public boolean embed_links;
      public int flags;
      public boolean send_games;
      public boolean send_gifs;
      public boolean send_inline;
      public boolean send_media;
      public boolean send_messages;
      public boolean send_stickers;
      public int until_date;
      public boolean view_messages;

      public static TLRPC.TL_channelBannedRights_layer92 TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_channelBannedRights_layer92", var1));
            }
         } else {
            TLRPC.TL_channelBannedRights_layer92 var3 = new TLRPC.TL_channelBannedRights_layer92();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.flags = var1.readInt32(var2);
         int var3 = this.flags;
         boolean var4 = true;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.view_messages = var5;
         if ((this.flags & 2) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.send_messages = var5;
         if ((this.flags & 4) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.send_media = var5;
         if ((this.flags & 8) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.send_stickers = var5;
         if ((this.flags & 16) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.send_gifs = var5;
         if ((this.flags & 32) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.send_games = var5;
         if ((this.flags & 64) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.send_inline = var5;
         if ((this.flags & 128) != 0) {
            var5 = var4;
         } else {
            var5 = false;
         }

         this.embed_links = var5;
         this.until_date = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.view_messages) {
            var2 = this.flags | 1;
         } else {
            var2 = this.flags & -2;
         }

         this.flags = var2;
         if (this.send_messages) {
            var2 = this.flags | 2;
         } else {
            var2 = this.flags & -3;
         }

         this.flags = var2;
         if (this.send_media) {
            var2 = this.flags | 4;
         } else {
            var2 = this.flags & -5;
         }

         this.flags = var2;
         if (this.send_stickers) {
            var2 = this.flags | 8;
         } else {
            var2 = this.flags & -9;
         }

         this.flags = var2;
         if (this.send_gifs) {
            var2 = this.flags | 16;
         } else {
            var2 = this.flags & -17;
         }

         this.flags = var2;
         if (this.send_games) {
            var2 = this.flags | 32;
         } else {
            var2 = this.flags & -33;
         }

         this.flags = var2;
         if (this.send_inline) {
            var2 = this.flags | 64;
         } else {
            var2 = this.flags & -65;
         }

         this.flags = var2;
         if (this.embed_links) {
            var2 = this.flags | 128;
         } else {
            var2 = this.flags & -129;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         var1.writeInt32(this.until_date);
      }
   }

   public static class TL_channelForbidden extends TLRPC.Chat {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         boolean var4 = true;
         boolean var5;
         if ((var3 & 32) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.broadcast = var5;
         if ((super.flags & 256) != 0) {
            var5 = var4;
         } else {
            var5 = false;
         }

         super.megagroup = var5;
         super.id = var1.readInt32(var2);
         super.access_hash = var1.readInt64(var2);
         super.title = var1.readString(var2);
         if ((super.flags & 65536) != 0) {
            super.until_date = var1.readInt32(var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.broadcast) {
            var2 = super.flags | 32;
         } else {
            var2 = super.flags & -33;
         }

         super.flags = var2;
         if (super.megagroup) {
            var2 = super.flags | 256;
         } else {
            var2 = super.flags & -257;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt32(super.id);
         var1.writeInt64(super.access_hash);
         var1.writeString(super.title);
         if ((super.flags & 65536) != 0) {
            var1.writeInt32(super.until_date);
         }

      }
   }

   public static class TL_channelForbidden_layer52 extends TLRPC.TL_channelForbidden {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt32(var2);
         super.access_hash = var1.readInt64(var2);
         super.title = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.id);
         var1.writeInt64(super.access_hash);
         var1.writeString(super.title);
      }
   }

   public static class TL_channelForbidden_layer67 extends TLRPC.TL_channelForbidden {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         boolean var4 = true;
         boolean var5;
         if ((var3 & 32) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.broadcast = var5;
         if ((super.flags & 256) != 0) {
            var5 = var4;
         } else {
            var5 = false;
         }

         super.megagroup = var5;
         super.id = var1.readInt32(var2);
         super.access_hash = var1.readInt64(var2);
         super.title = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.broadcast) {
            var2 = super.flags | 32;
         } else {
            var2 = super.flags & -33;
         }

         super.flags = var2;
         if (super.megagroup) {
            var2 = super.flags | 256;
         } else {
            var2 = super.flags & -257;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt32(super.id);
         var1.writeInt64(super.access_hash);
         var1.writeString(super.title);
      }
   }

   public static class TL_channelFull extends TLRPC.ChatFull {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         int var4 = 0;
         boolean var5;
         if ((var3 & 8) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.can_view_participants = var5;
         if ((super.flags & 64) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.can_set_username = var5;
         if ((super.flags & 128) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.can_set_stickers = var5;
         if ((super.flags & 1024) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.hidden_prehistory = var5;
         if ((super.flags & 4096) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.can_view_stats = var5;
         super.id = var1.readInt32(var2);
         super.about = var1.readString(var2);
         if ((super.flags & 1) != 0) {
            super.participants_count = var1.readInt32(var2);
         }

         if ((super.flags & 2) != 0) {
            super.admins_count = var1.readInt32(var2);
         }

         if ((super.flags & 4) != 0) {
            super.kicked_count = var1.readInt32(var2);
         }

         if ((super.flags & 4) != 0) {
            super.banned_count = var1.readInt32(var2);
         }

         if ((super.flags & 8192) != 0) {
            super.online_count = var1.readInt32(var2);
         }

         super.read_inbox_max_id = var1.readInt32(var2);
         super.read_outbox_max_id = var1.readInt32(var2);
         super.unread_count = var1.readInt32(var2);
         super.chat_photo = TLRPC.Photo.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.notify_settings = TLRPC.PeerNotifySettings.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.exported_invite = TLRPC.ExportedChatInvite.TLdeserialize(var1, var1.readInt32(var2), var2);
         var3 = var1.readInt32(var2);
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.BotInfo var6 = TLRPC.BotInfo.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               super.bot_info.add(var6);
            }

            if ((super.flags & 16) != 0) {
               super.migrated_from_chat_id = var1.readInt32(var2);
            }

            if ((super.flags & 16) != 0) {
               super.migrated_from_max_id = var1.readInt32(var2);
            }

            if ((super.flags & 32) != 0) {
               super.pinned_msg_id = var1.readInt32(var2);
            }

            if ((super.flags & 256) != 0) {
               super.stickerset = TLRPC.StickerSet.TLdeserialize(var1, var1.readInt32(var2), var2);
            }

            if ((super.flags & 512) != 0) {
               super.available_min_id = var1.readInt32(var2);
            }

            if ((super.flags & 2048) != 0) {
               super.folder_id = var1.readInt32(var2);
            }

            if ((super.flags & 8192) != 0) {
               super.linked_chat_id = var1.readInt32(var2);
            }

            super.pts = var1.readInt32(var2);
         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.can_view_participants) {
            var2 = super.flags | 8;
         } else {
            var2 = super.flags & -9;
         }

         super.flags = var2;
         if (super.can_set_username) {
            var2 = super.flags | 64;
         } else {
            var2 = super.flags & -65;
         }

         super.flags = var2;
         if (super.can_set_stickers) {
            var2 = super.flags | 128;
         } else {
            var2 = super.flags & -129;
         }

         super.flags = var2;
         if (super.hidden_prehistory) {
            var2 = super.flags | 1024;
         } else {
            var2 = super.flags & -1025;
         }

         super.flags = var2;
         if (super.can_view_stats) {
            var2 = super.flags | 4096;
         } else {
            var2 = super.flags & -4097;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt32(super.id);
         var1.writeString(super.about);
         if ((super.flags & 1) != 0) {
            var1.writeInt32(super.participants_count);
         }

         if ((super.flags & 2) != 0) {
            var1.writeInt32(super.admins_count);
         }

         if ((super.flags & 4) != 0) {
            var1.writeInt32(super.kicked_count);
         }

         if ((super.flags & 4) != 0) {
            var1.writeInt32(super.banned_count);
         }

         if ((super.flags & 8192) != 0) {
            var1.writeInt32(super.online_count);
         }

         var1.writeInt32(super.read_inbox_max_id);
         var1.writeInt32(super.read_outbox_max_id);
         var1.writeInt32(super.unread_count);
         super.chat_photo.serializeToStream(var1);
         super.notify_settings.serializeToStream(var1);
         super.exported_invite.serializeToStream(var1);
         var1.writeInt32(481674261);
         int var3 = super.bot_info.size();
         var1.writeInt32(var3);

         for(var2 = 0; var2 < var3; ++var2) {
            ((TLRPC.BotInfo)super.bot_info.get(var2)).serializeToStream(var1);
         }

         if ((super.flags & 16) != 0) {
            var1.writeInt32(super.migrated_from_chat_id);
         }

         if ((super.flags & 16) != 0) {
            var1.writeInt32(super.migrated_from_max_id);
         }

         if ((super.flags & 32) != 0) {
            var1.writeInt32(super.pinned_msg_id);
         }

         if ((super.flags & 256) != 0) {
            super.stickerset.serializeToStream(var1);
         }

         if ((super.flags & 512) != 0) {
            var1.writeInt32(super.available_min_id);
         }

         if ((super.flags & 2048) != 0) {
            var1.writeInt32(super.folder_id);
         }

         if ((super.flags & 8192) != 0) {
            var1.writeInt32(super.linked_chat_id);
         }

         var1.writeInt32(super.pts);
      }
   }

   public static class TL_channelFull_layer48 extends TLRPC.TL_channelFull {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         int var4 = 0;
         boolean var5;
         if ((var3 & 8) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.can_view_participants = var5;
         super.id = var1.readInt32(var2);
         super.about = var1.readString(var2);
         if ((super.flags & 1) != 0) {
            super.participants_count = var1.readInt32(var2);
         }

         if ((super.flags & 2) != 0) {
            super.admins_count = var1.readInt32(var2);
         }

         if ((super.flags & 4) != 0) {
            super.kicked_count = var1.readInt32(var2);
         }

         super.read_inbox_max_id = var1.readInt32(var2);
         super.unread_count = var1.readInt32(var2);
         super.unread_important_count = var1.readInt32(var2);
         super.chat_photo = TLRPC.Photo.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.notify_settings = TLRPC.PeerNotifySettings.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.exported_invite = TLRPC.ExportedChatInvite.TLdeserialize(var1, var1.readInt32(var2), var2);
         var3 = var1.readInt32(var2);
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.BotInfo var6 = TLRPC.BotInfo.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               super.bot_info.add(var6);
            }

            if ((super.flags & 16) != 0) {
               super.migrated_from_chat_id = var1.readInt32(var2);
            }

            if ((super.flags & 16) != 0) {
               super.migrated_from_max_id = var1.readInt32(var2);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.can_view_participants) {
            var2 = super.flags | 8;
         } else {
            var2 = super.flags & -9;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt32(super.id);
         var1.writeString(super.about);
         if ((super.flags & 1) != 0) {
            var1.writeInt32(super.participants_count);
         }

         if ((super.flags & 2) != 0) {
            var1.writeInt32(super.admins_count);
         }

         if ((super.flags & 4) != 0) {
            var1.writeInt32(super.kicked_count);
         }

         var1.writeInt32(super.read_inbox_max_id);
         var1.writeInt32(super.unread_count);
         var1.writeInt32(super.unread_important_count);
         super.chat_photo.serializeToStream(var1);
         super.notify_settings.serializeToStream(var1);
         super.exported_invite.serializeToStream(var1);
         var1.writeInt32(481674261);
         int var3 = super.bot_info.size();
         var1.writeInt32(var3);

         for(var2 = 0; var2 < var3; ++var2) {
            ((TLRPC.BotInfo)super.bot_info.get(var2)).serializeToStream(var1);
         }

         if ((super.flags & 16) != 0) {
            var1.writeInt32(super.migrated_from_chat_id);
         }

         if ((super.flags & 16) != 0) {
            var1.writeInt32(super.migrated_from_max_id);
         }

      }
   }

   public static class TL_channelFull_layer52 extends TLRPC.TL_channelFull {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         int var4 = 0;
         boolean var5;
         if ((var3 & 8) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.can_view_participants = var5;
         if ((super.flags & 64) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.can_set_username = var5;
         super.id = var1.readInt32(var2);
         super.about = var1.readString(var2);
         if ((super.flags & 1) != 0) {
            super.participants_count = var1.readInt32(var2);
         }

         if ((super.flags & 2) != 0) {
            super.admins_count = var1.readInt32(var2);
         }

         if ((super.flags & 4) != 0) {
            super.kicked_count = var1.readInt32(var2);
         }

         super.read_inbox_max_id = var1.readInt32(var2);
         super.unread_count = var1.readInt32(var2);
         super.unread_important_count = var1.readInt32(var2);
         super.chat_photo = TLRPC.Photo.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.notify_settings = TLRPC.PeerNotifySettings.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.exported_invite = TLRPC.ExportedChatInvite.TLdeserialize(var1, var1.readInt32(var2), var2);
         var3 = var1.readInt32(var2);
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.BotInfo var6 = TLRPC.BotInfo.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               super.bot_info.add(var6);
            }

            if ((super.flags & 16) != 0) {
               super.migrated_from_chat_id = var1.readInt32(var2);
            }

            if ((super.flags & 16) != 0) {
               super.migrated_from_max_id = var1.readInt32(var2);
            }

            if ((super.flags & 32) != 0) {
               super.pinned_msg_id = var1.readInt32(var2);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.can_view_participants) {
            var2 = super.flags | 8;
         } else {
            var2 = super.flags & -9;
         }

         super.flags = var2;
         if (super.can_set_username) {
            var2 = super.flags | 64;
         } else {
            var2 = super.flags & -65;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt32(super.id);
         var1.writeString(super.about);
         if ((super.flags & 1) != 0) {
            var1.writeInt32(super.participants_count);
         }

         if ((super.flags & 2) != 0) {
            var1.writeInt32(super.admins_count);
         }

         if ((super.flags & 4) != 0) {
            var1.writeInt32(super.kicked_count);
         }

         var1.writeInt32(super.read_inbox_max_id);
         var1.writeInt32(super.unread_count);
         var1.writeInt32(super.unread_important_count);
         super.chat_photo.serializeToStream(var1);
         super.notify_settings.serializeToStream(var1);
         super.exported_invite.serializeToStream(var1);
         var1.writeInt32(481674261);
         int var3 = super.bot_info.size();
         var1.writeInt32(var3);

         for(var2 = 0; var2 < var3; ++var2) {
            ((TLRPC.BotInfo)super.bot_info.get(var2)).serializeToStream(var1);
         }

         if ((super.flags & 16) != 0) {
            var1.writeInt32(super.migrated_from_chat_id);
         }

         if ((super.flags & 16) != 0) {
            var1.writeInt32(super.migrated_from_max_id);
         }

         if ((super.flags & 32) != 0) {
            var1.writeInt32(super.pinned_msg_id);
         }

      }
   }

   public static class TL_channelFull_layer67 extends TLRPC.TL_channelFull {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         int var4 = 0;
         boolean var5;
         if ((var3 & 8) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.can_view_participants = var5;
         if ((super.flags & 64) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.can_set_username = var5;
         super.id = var1.readInt32(var2);
         super.about = var1.readString(var2);
         if ((super.flags & 1) != 0) {
            super.participants_count = var1.readInt32(var2);
         }

         if ((super.flags & 2) != 0) {
            super.admins_count = var1.readInt32(var2);
         }

         if ((super.flags & 4) != 0) {
            super.kicked_count = var1.readInt32(var2);
         }

         super.read_inbox_max_id = var1.readInt32(var2);
         super.read_outbox_max_id = var1.readInt32(var2);
         super.unread_count = var1.readInt32(var2);
         super.chat_photo = TLRPC.Photo.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.notify_settings = TLRPC.PeerNotifySettings.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.exported_invite = TLRPC.ExportedChatInvite.TLdeserialize(var1, var1.readInt32(var2), var2);
         var3 = var1.readInt32(var2);
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.BotInfo var6 = TLRPC.BotInfo.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               super.bot_info.add(var6);
            }

            if ((super.flags & 16) != 0) {
               super.migrated_from_chat_id = var1.readInt32(var2);
            }

            if ((super.flags & 16) != 0) {
               super.migrated_from_max_id = var1.readInt32(var2);
            }

            if ((super.flags & 32) != 0) {
               super.pinned_msg_id = var1.readInt32(var2);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.can_view_participants) {
            var2 = super.flags | 8;
         } else {
            var2 = super.flags & -9;
         }

         super.flags = var2;
         if (super.can_set_username) {
            var2 = super.flags | 64;
         } else {
            var2 = super.flags & -65;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt32(super.id);
         var1.writeString(super.about);
         if ((super.flags & 1) != 0) {
            var1.writeInt32(super.participants_count);
         }

         if ((super.flags & 2) != 0) {
            var1.writeInt32(super.admins_count);
         }

         if ((super.flags & 4) != 0) {
            var1.writeInt32(super.kicked_count);
         }

         var1.writeInt32(super.read_inbox_max_id);
         var1.writeInt32(super.read_outbox_max_id);
         var1.writeInt32(super.unread_count);
         super.chat_photo.serializeToStream(var1);
         super.notify_settings.serializeToStream(var1);
         super.exported_invite.serializeToStream(var1);
         var1.writeInt32(481674261);
         int var3 = super.bot_info.size();
         var1.writeInt32(var3);

         for(var2 = 0; var2 < var3; ++var2) {
            ((TLRPC.BotInfo)super.bot_info.get(var2)).serializeToStream(var1);
         }

         if ((super.flags & 16) != 0) {
            var1.writeInt32(super.migrated_from_chat_id);
         }

         if ((super.flags & 16) != 0) {
            var1.writeInt32(super.migrated_from_max_id);
         }

         if ((super.flags & 32) != 0) {
            var1.writeInt32(super.pinned_msg_id);
         }

      }
   }

   public static class TL_channelFull_layer70 extends TLRPC.TL_channelFull {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         int var4 = 0;
         boolean var5;
         if ((var3 & 8) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.can_view_participants = var5;
         if ((super.flags & 64) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.can_set_username = var5;
         super.id = var1.readInt32(var2);
         super.about = var1.readString(var2);
         if ((super.flags & 1) != 0) {
            super.participants_count = var1.readInt32(var2);
         }

         if ((super.flags & 2) != 0) {
            super.admins_count = var1.readInt32(var2);
         }

         if ((super.flags & 4) != 0) {
            super.kicked_count = var1.readInt32(var2);
         }

         if ((super.flags & 4) != 0) {
            super.banned_count = var1.readInt32(var2);
         }

         super.read_inbox_max_id = var1.readInt32(var2);
         super.read_outbox_max_id = var1.readInt32(var2);
         super.unread_count = var1.readInt32(var2);
         super.chat_photo = TLRPC.Photo.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.notify_settings = TLRPC.PeerNotifySettings.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.exported_invite = TLRPC.ExportedChatInvite.TLdeserialize(var1, var1.readInt32(var2), var2);
         var3 = var1.readInt32(var2);
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.BotInfo var6 = TLRPC.BotInfo.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               super.bot_info.add(var6);
            }

            if ((super.flags & 16) != 0) {
               super.migrated_from_chat_id = var1.readInt32(var2);
            }

            if ((super.flags & 16) != 0) {
               super.migrated_from_max_id = var1.readInt32(var2);
            }

            if ((super.flags & 32) != 0) {
               super.pinned_msg_id = var1.readInt32(var2);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.can_view_participants) {
            var2 = super.flags | 8;
         } else {
            var2 = super.flags & -9;
         }

         super.flags = var2;
         if (super.can_set_username) {
            var2 = super.flags | 64;
         } else {
            var2 = super.flags & -65;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt32(super.id);
         var1.writeString(super.about);
         if ((super.flags & 1) != 0) {
            var1.writeInt32(super.participants_count);
         }

         if ((super.flags & 2) != 0) {
            var1.writeInt32(super.admins_count);
         }

         if ((super.flags & 4) != 0) {
            var1.writeInt32(super.kicked_count);
         }

         if ((super.flags & 4) != 0) {
            var1.writeInt32(super.banned_count);
         }

         var1.writeInt32(super.read_inbox_max_id);
         var1.writeInt32(super.read_outbox_max_id);
         var1.writeInt32(super.unread_count);
         super.chat_photo.serializeToStream(var1);
         super.notify_settings.serializeToStream(var1);
         super.exported_invite.serializeToStream(var1);
         var1.writeInt32(481674261);
         int var3 = super.bot_info.size();
         var1.writeInt32(var3);

         for(var2 = 0; var2 < var3; ++var2) {
            ((TLRPC.BotInfo)super.bot_info.get(var2)).serializeToStream(var1);
         }

         if ((super.flags & 16) != 0) {
            var1.writeInt32(super.migrated_from_chat_id);
         }

         if ((super.flags & 16) != 0) {
            var1.writeInt32(super.migrated_from_max_id);
         }

         if ((super.flags & 32) != 0) {
            var1.writeInt32(super.pinned_msg_id);
         }

      }
   }

   public static class TL_channelFull_layer71 extends TLRPC.TL_channelFull {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         int var4 = 0;
         boolean var5;
         if ((var3 & 8) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.can_view_participants = var5;
         if ((super.flags & 64) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.can_set_username = var5;
         if ((super.flags & 128) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.can_set_stickers = var5;
         super.id = var1.readInt32(var2);
         super.about = var1.readString(var2);
         if ((super.flags & 1) != 0) {
            super.participants_count = var1.readInt32(var2);
         }

         if ((super.flags & 2) != 0) {
            super.admins_count = var1.readInt32(var2);
         }

         if ((super.flags & 4) != 0) {
            super.kicked_count = var1.readInt32(var2);
         }

         if ((super.flags & 4) != 0) {
            super.banned_count = var1.readInt32(var2);
         }

         super.read_inbox_max_id = var1.readInt32(var2);
         super.read_outbox_max_id = var1.readInt32(var2);
         super.unread_count = var1.readInt32(var2);
         super.chat_photo = TLRPC.Photo.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.notify_settings = TLRPC.PeerNotifySettings.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.exported_invite = TLRPC.ExportedChatInvite.TLdeserialize(var1, var1.readInt32(var2), var2);
         var3 = var1.readInt32(var2);
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.BotInfo var6 = TLRPC.BotInfo.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               super.bot_info.add(var6);
            }

            if ((super.flags & 16) != 0) {
               super.migrated_from_chat_id = var1.readInt32(var2);
            }

            if ((super.flags & 16) != 0) {
               super.migrated_from_max_id = var1.readInt32(var2);
            }

            if ((super.flags & 32) != 0) {
               super.pinned_msg_id = var1.readInt32(var2);
            }

            if ((super.flags & 256) != 0) {
               super.stickerset = TLRPC.StickerSet.TLdeserialize(var1, var1.readInt32(var2), var2);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.can_view_participants) {
            var2 = super.flags | 8;
         } else {
            var2 = super.flags & -9;
         }

         super.flags = var2;
         if (super.can_set_username) {
            var2 = super.flags | 64;
         } else {
            var2 = super.flags & -65;
         }

         super.flags = var2;
         if (super.can_set_stickers) {
            var2 = super.flags | 128;
         } else {
            var2 = super.flags & -129;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt32(super.id);
         var1.writeString(super.about);
         if ((super.flags & 1) != 0) {
            var1.writeInt32(super.participants_count);
         }

         if ((super.flags & 2) != 0) {
            var1.writeInt32(super.admins_count);
         }

         if ((super.flags & 4) != 0) {
            var1.writeInt32(super.kicked_count);
         }

         if ((super.flags & 4) != 0) {
            var1.writeInt32(super.banned_count);
         }

         var1.writeInt32(super.read_inbox_max_id);
         var1.writeInt32(super.read_outbox_max_id);
         var1.writeInt32(super.unread_count);
         super.chat_photo.serializeToStream(var1);
         super.notify_settings.serializeToStream(var1);
         super.exported_invite.serializeToStream(var1);
         var1.writeInt32(481674261);
         int var3 = super.bot_info.size();
         var1.writeInt32(var3);

         for(var2 = 0; var2 < var3; ++var2) {
            ((TLRPC.BotInfo)super.bot_info.get(var2)).serializeToStream(var1);
         }

         if ((super.flags & 16) != 0) {
            var1.writeInt32(super.migrated_from_chat_id);
         }

         if ((super.flags & 16) != 0) {
            var1.writeInt32(super.migrated_from_max_id);
         }

         if ((super.flags & 32) != 0) {
            var1.writeInt32(super.pinned_msg_id);
         }

         if ((super.flags & 256) != 0) {
            super.stickerset.serializeToStream(var1);
         }

      }
   }

   public static class TL_channelFull_layer72 extends TLRPC.TL_channelFull {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         int var4 = 0;
         boolean var5;
         if ((var3 & 8) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.can_view_participants = var5;
         if ((super.flags & 64) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.can_set_username = var5;
         if ((super.flags & 128) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.can_set_stickers = var5;
         if ((super.flags & 1024) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.hidden_prehistory = var5;
         super.id = var1.readInt32(var2);
         super.about = var1.readString(var2);
         if ((super.flags & 1) != 0) {
            super.participants_count = var1.readInt32(var2);
         }

         if ((super.flags & 2) != 0) {
            super.admins_count = var1.readInt32(var2);
         }

         if ((super.flags & 4) != 0) {
            super.kicked_count = var1.readInt32(var2);
         }

         if ((super.flags & 4) != 0) {
            super.banned_count = var1.readInt32(var2);
         }

         super.read_inbox_max_id = var1.readInt32(var2);
         super.read_outbox_max_id = var1.readInt32(var2);
         super.unread_count = var1.readInt32(var2);
         super.chat_photo = TLRPC.Photo.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.notify_settings = TLRPC.PeerNotifySettings.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.exported_invite = TLRPC.ExportedChatInvite.TLdeserialize(var1, var1.readInt32(var2), var2);
         var3 = var1.readInt32(var2);
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.BotInfo var6 = TLRPC.BotInfo.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               super.bot_info.add(var6);
            }

            if ((super.flags & 16) != 0) {
               super.migrated_from_chat_id = var1.readInt32(var2);
            }

            if ((super.flags & 16) != 0) {
               super.migrated_from_max_id = var1.readInt32(var2);
            }

            if ((super.flags & 32) != 0) {
               super.pinned_msg_id = var1.readInt32(var2);
            }

            if ((super.flags & 256) != 0) {
               super.stickerset = TLRPC.StickerSet.TLdeserialize(var1, var1.readInt32(var2), var2);
            }

            if ((super.flags & 512) != 0) {
               super.available_min_id = var1.readInt32(var2);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.can_view_participants) {
            var2 = super.flags | 8;
         } else {
            var2 = super.flags & -9;
         }

         super.flags = var2;
         if (super.can_set_username) {
            var2 = super.flags | 64;
         } else {
            var2 = super.flags & -65;
         }

         super.flags = var2;
         if (super.can_set_stickers) {
            var2 = super.flags | 128;
         } else {
            var2 = super.flags & -129;
         }

         super.flags = var2;
         if (super.hidden_prehistory) {
            var2 = super.flags | 1024;
         } else {
            var2 = super.flags & -1025;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt32(super.id);
         var1.writeString(super.about);
         if ((super.flags & 1) != 0) {
            var1.writeInt32(super.participants_count);
         }

         if ((super.flags & 2) != 0) {
            var1.writeInt32(super.admins_count);
         }

         if ((super.flags & 4) != 0) {
            var1.writeInt32(super.kicked_count);
         }

         if ((super.flags & 4) != 0) {
            var1.writeInt32(super.banned_count);
         }

         var1.writeInt32(super.read_inbox_max_id);
         var1.writeInt32(super.read_outbox_max_id);
         var1.writeInt32(super.unread_count);
         super.chat_photo.serializeToStream(var1);
         super.notify_settings.serializeToStream(var1);
         super.exported_invite.serializeToStream(var1);
         var1.writeInt32(481674261);
         int var3 = super.bot_info.size();
         var1.writeInt32(var3);

         for(var2 = 0; var2 < var3; ++var2) {
            ((TLRPC.BotInfo)super.bot_info.get(var2)).serializeToStream(var1);
         }

         if ((super.flags & 16) != 0) {
            var1.writeInt32(super.migrated_from_chat_id);
         }

         if ((super.flags & 16) != 0) {
            var1.writeInt32(super.migrated_from_max_id);
         }

         if ((super.flags & 32) != 0) {
            var1.writeInt32(super.pinned_msg_id);
         }

         if ((super.flags & 256) != 0) {
            super.stickerset.serializeToStream(var1);
         }

         if ((super.flags & 512) != 0) {
            var1.writeInt32(super.available_min_id);
         }

      }
   }

   public static class TL_channelFull_layer89 extends TLRPC.TL_channelFull {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         int var4 = 0;
         boolean var5;
         if ((var3 & 8) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.can_view_participants = var5;
         if ((super.flags & 64) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.can_set_username = var5;
         if ((super.flags & 128) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.can_set_stickers = var5;
         if ((super.flags & 1024) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.hidden_prehistory = var5;
         super.id = var1.readInt32(var2);
         super.about = var1.readString(var2);
         if ((super.flags & 1) != 0) {
            super.participants_count = var1.readInt32(var2);
         }

         if ((super.flags & 2) != 0) {
            super.admins_count = var1.readInt32(var2);
         }

         if ((super.flags & 4) != 0) {
            super.kicked_count = var1.readInt32(var2);
         }

         if ((super.flags & 4) != 0) {
            super.banned_count = var1.readInt32(var2);
         }

         super.read_inbox_max_id = var1.readInt32(var2);
         super.read_outbox_max_id = var1.readInt32(var2);
         super.unread_count = var1.readInt32(var2);
         super.chat_photo = TLRPC.Photo.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.notify_settings = TLRPC.PeerNotifySettings.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.exported_invite = TLRPC.ExportedChatInvite.TLdeserialize(var1, var1.readInt32(var2), var2);
         var3 = var1.readInt32(var2);
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.BotInfo var6 = TLRPC.BotInfo.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               super.bot_info.add(var6);
            }

            if ((super.flags & 16) != 0) {
               super.migrated_from_chat_id = var1.readInt32(var2);
            }

            if ((super.flags & 16) != 0) {
               super.migrated_from_max_id = var1.readInt32(var2);
            }

            if ((super.flags & 32) != 0) {
               super.pinned_msg_id = var1.readInt32(var2);
            }

            if ((super.flags & 256) != 0) {
               super.stickerset = TLRPC.StickerSet.TLdeserialize(var1, var1.readInt32(var2), var2);
            }

            if ((super.flags & 512) != 0) {
               super.available_min_id = var1.readInt32(var2);
            }

            if ((super.flags & 2048) != 0) {
               super.call_msg_id = var1.readInt32(var2);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.can_view_participants) {
            var2 = super.flags | 8;
         } else {
            var2 = super.flags & -9;
         }

         super.flags = var2;
         if (super.can_set_username) {
            var2 = super.flags | 64;
         } else {
            var2 = super.flags & -65;
         }

         super.flags = var2;
         if (super.can_set_stickers) {
            var2 = super.flags | 128;
         } else {
            var2 = super.flags & -129;
         }

         super.flags = var2;
         if (super.hidden_prehistory) {
            var2 = super.flags | 1024;
         } else {
            var2 = super.flags & -1025;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt32(super.id);
         var1.writeString(super.about);
         if ((super.flags & 1) != 0) {
            var1.writeInt32(super.participants_count);
         }

         if ((super.flags & 2) != 0) {
            var1.writeInt32(super.admins_count);
         }

         if ((super.flags & 4) != 0) {
            var1.writeInt32(super.kicked_count);
         }

         if ((super.flags & 4) != 0) {
            var1.writeInt32(super.banned_count);
         }

         var1.writeInt32(super.read_inbox_max_id);
         var1.writeInt32(super.read_outbox_max_id);
         var1.writeInt32(super.unread_count);
         super.chat_photo.serializeToStream(var1);
         super.notify_settings.serializeToStream(var1);
         super.exported_invite.serializeToStream(var1);
         var1.writeInt32(481674261);
         int var3 = super.bot_info.size();
         var1.writeInt32(var3);

         for(var2 = 0; var2 < var3; ++var2) {
            ((TLRPC.BotInfo)super.bot_info.get(var2)).serializeToStream(var1);
         }

         if ((super.flags & 16) != 0) {
            var1.writeInt32(super.migrated_from_chat_id);
         }

         if ((super.flags & 16) != 0) {
            var1.writeInt32(super.migrated_from_max_id);
         }

         if ((super.flags & 32) != 0) {
            var1.writeInt32(super.pinned_msg_id);
         }

         if ((super.flags & 256) != 0) {
            super.stickerset.serializeToStream(var1);
         }

         if ((super.flags & 512) != 0) {
            var1.writeInt32(super.available_min_id);
         }

         if ((super.flags & 2048) != 0) {
            var1.writeInt32(super.call_msg_id);
         }

      }
   }

   public static class TL_channelFull_layer98 extends TLRPC.TL_channelFull {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         int var4 = 0;
         boolean var5;
         if ((var3 & 8) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.can_view_participants = var5;
         if ((super.flags & 64) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.can_set_username = var5;
         if ((super.flags & 128) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.can_set_stickers = var5;
         if ((super.flags & 1024) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.hidden_prehistory = var5;
         if ((super.flags & 4096) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.can_view_stats = var5;
         super.id = var1.readInt32(var2);
         super.about = var1.readString(var2);
         if ((super.flags & 1) != 0) {
            super.participants_count = var1.readInt32(var2);
         }

         if ((super.flags & 2) != 0) {
            super.admins_count = var1.readInt32(var2);
         }

         if ((super.flags & 4) != 0) {
            super.kicked_count = var1.readInt32(var2);
         }

         if ((super.flags & 4) != 0) {
            super.banned_count = var1.readInt32(var2);
         }

         if ((super.flags & 8192) != 0) {
            super.online_count = var1.readInt32(var2);
         }

         super.read_inbox_max_id = var1.readInt32(var2);
         super.read_outbox_max_id = var1.readInt32(var2);
         super.unread_count = var1.readInt32(var2);
         super.chat_photo = TLRPC.Photo.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.notify_settings = TLRPC.PeerNotifySettings.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.exported_invite = TLRPC.ExportedChatInvite.TLdeserialize(var1, var1.readInt32(var2), var2);
         var3 = var1.readInt32(var2);
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.BotInfo var6 = TLRPC.BotInfo.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               super.bot_info.add(var6);
            }

            if ((super.flags & 16) != 0) {
               super.migrated_from_chat_id = var1.readInt32(var2);
            }

            if ((super.flags & 16) != 0) {
               super.migrated_from_max_id = var1.readInt32(var2);
            }

            if ((super.flags & 32) != 0) {
               super.pinned_msg_id = var1.readInt32(var2);
            }

            if ((super.flags & 256) != 0) {
               super.stickerset = TLRPC.StickerSet.TLdeserialize(var1, var1.readInt32(var2), var2);
            }

            if ((super.flags & 512) != 0) {
               super.available_min_id = var1.readInt32(var2);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.can_view_participants) {
            var2 = super.flags | 8;
         } else {
            var2 = super.flags & -9;
         }

         super.flags = var2;
         if (super.can_set_username) {
            var2 = super.flags | 64;
         } else {
            var2 = super.flags & -65;
         }

         super.flags = var2;
         if (super.can_set_stickers) {
            var2 = super.flags | 128;
         } else {
            var2 = super.flags & -129;
         }

         super.flags = var2;
         if (super.hidden_prehistory) {
            var2 = super.flags | 1024;
         } else {
            var2 = super.flags & -1025;
         }

         super.flags = var2;
         if (super.can_view_stats) {
            var2 = super.flags | 4096;
         } else {
            var2 = super.flags & -4097;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt32(super.id);
         var1.writeString(super.about);
         if ((super.flags & 1) != 0) {
            var1.writeInt32(super.participants_count);
         }

         if ((super.flags & 2) != 0) {
            var1.writeInt32(super.admins_count);
         }

         if ((super.flags & 4) != 0) {
            var1.writeInt32(super.kicked_count);
         }

         if ((super.flags & 4) != 0) {
            var1.writeInt32(super.banned_count);
         }

         if ((super.flags & 8192) != 0) {
            var1.writeInt32(super.online_count);
         }

         var1.writeInt32(super.read_inbox_max_id);
         var1.writeInt32(super.read_outbox_max_id);
         var1.writeInt32(super.unread_count);
         super.chat_photo.serializeToStream(var1);
         super.notify_settings.serializeToStream(var1);
         super.exported_invite.serializeToStream(var1);
         var1.writeInt32(481674261);
         int var3 = super.bot_info.size();
         var1.writeInt32(var3);

         for(var2 = 0; var2 < var3; ++var2) {
            ((TLRPC.BotInfo)super.bot_info.get(var2)).serializeToStream(var1);
         }

         if ((super.flags & 16) != 0) {
            var1.writeInt32(super.migrated_from_chat_id);
         }

         if ((super.flags & 16) != 0) {
            var1.writeInt32(super.migrated_from_max_id);
         }

         if ((super.flags & 32) != 0) {
            var1.writeInt32(super.pinned_msg_id);
         }

         if ((super.flags & 256) != 0) {
            super.stickerset.serializeToStream(var1);
         }

         if ((super.flags & 512) != 0) {
            var1.writeInt32(super.available_min_id);
         }

      }
   }

   public static class TL_channelFull_layer99 extends TLRPC.TL_channelFull {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         int var4 = 0;
         boolean var5;
         if ((var3 & 8) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.can_view_participants = var5;
         if ((super.flags & 64) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.can_set_username = var5;
         if ((super.flags & 128) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.can_set_stickers = var5;
         if ((super.flags & 1024) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.hidden_prehistory = var5;
         if ((super.flags & 4096) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.can_view_stats = var5;
         super.id = var1.readInt32(var2);
         super.about = var1.readString(var2);
         if ((super.flags & 1) != 0) {
            super.participants_count = var1.readInt32(var2);
         }

         if ((super.flags & 2) != 0) {
            super.admins_count = var1.readInt32(var2);
         }

         if ((super.flags & 4) != 0) {
            super.kicked_count = var1.readInt32(var2);
         }

         if ((super.flags & 4) != 0) {
            super.banned_count = var1.readInt32(var2);
         }

         if ((super.flags & 8192) != 0) {
            super.online_count = var1.readInt32(var2);
         }

         super.read_inbox_max_id = var1.readInt32(var2);
         super.read_outbox_max_id = var1.readInt32(var2);
         super.unread_count = var1.readInt32(var2);
         super.chat_photo = TLRPC.Photo.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.notify_settings = TLRPC.PeerNotifySettings.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.exported_invite = TLRPC.ExportedChatInvite.TLdeserialize(var1, var1.readInt32(var2), var2);
         var3 = var1.readInt32(var2);
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.BotInfo var6 = TLRPC.BotInfo.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               super.bot_info.add(var6);
            }

            if ((super.flags & 16) != 0) {
               super.migrated_from_chat_id = var1.readInt32(var2);
            }

            if ((super.flags & 16) != 0) {
               super.migrated_from_max_id = var1.readInt32(var2);
            }

            if ((super.flags & 32) != 0) {
               super.pinned_msg_id = var1.readInt32(var2);
            }

            if ((super.flags & 256) != 0) {
               super.stickerset = TLRPC.StickerSet.TLdeserialize(var1, var1.readInt32(var2), var2);
            }

            if ((super.flags & 512) != 0) {
               super.available_min_id = var1.readInt32(var2);
            }

            if ((super.flags & 2048) != 0) {
               super.folder_id = var1.readInt32(var2);
            }

            super.pts = var1.readInt32(var2);
         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.can_view_participants) {
            var2 = super.flags | 8;
         } else {
            var2 = super.flags & -9;
         }

         super.flags = var2;
         if (super.can_set_username) {
            var2 = super.flags | 64;
         } else {
            var2 = super.flags & -65;
         }

         super.flags = var2;
         if (super.can_set_stickers) {
            var2 = super.flags | 128;
         } else {
            var2 = super.flags & -129;
         }

         super.flags = var2;
         if (super.hidden_prehistory) {
            var2 = super.flags | 1024;
         } else {
            var2 = super.flags & -1025;
         }

         super.flags = var2;
         if (super.can_view_stats) {
            var2 = super.flags | 4096;
         } else {
            var2 = super.flags & -4097;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt32(super.id);
         var1.writeString(super.about);
         if ((super.flags & 1) != 0) {
            var1.writeInt32(super.participants_count);
         }

         if ((super.flags & 2) != 0) {
            var1.writeInt32(super.admins_count);
         }

         if ((super.flags & 4) != 0) {
            var1.writeInt32(super.kicked_count);
         }

         if ((super.flags & 4) != 0) {
            var1.writeInt32(super.banned_count);
         }

         if ((super.flags & 8192) != 0) {
            var1.writeInt32(super.online_count);
         }

         var1.writeInt32(super.read_inbox_max_id);
         var1.writeInt32(super.read_outbox_max_id);
         var1.writeInt32(super.unread_count);
         super.chat_photo.serializeToStream(var1);
         super.notify_settings.serializeToStream(var1);
         super.exported_invite.serializeToStream(var1);
         var1.writeInt32(481674261);
         int var3 = super.bot_info.size();
         var1.writeInt32(var3);

         for(var2 = 0; var2 < var3; ++var2) {
            ((TLRPC.BotInfo)super.bot_info.get(var2)).serializeToStream(var1);
         }

         if ((super.flags & 16) != 0) {
            var1.writeInt32(super.migrated_from_chat_id);
         }

         if ((super.flags & 16) != 0) {
            var1.writeInt32(super.migrated_from_max_id);
         }

         if ((super.flags & 32) != 0) {
            var1.writeInt32(super.pinned_msg_id);
         }

         if ((super.flags & 256) != 0) {
            super.stickerset.serializeToStream(var1);
         }

         if ((super.flags & 512) != 0) {
            var1.writeInt32(super.available_min_id);
         }

         if ((super.flags & 2048) != 0) {
            var1.writeInt32(super.folder_id);
         }

         var1.writeInt32(super.pts);
      }
   }

   public static class TL_channelFull_old extends TLRPC.TL_channelFull {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         boolean var3;
         if ((super.flags & 8) != 0) {
            var3 = true;
         } else {
            var3 = false;
         }

         super.can_view_participants = var3;
         super.id = var1.readInt32(var2);
         super.about = var1.readString(var2);
         if ((super.flags & 1) != 0) {
            super.participants_count = var1.readInt32(var2);
         }

         if ((super.flags & 2) != 0) {
            super.admins_count = var1.readInt32(var2);
         }

         if ((super.flags & 4) != 0) {
            super.kicked_count = var1.readInt32(var2);
         }

         super.read_inbox_max_id = var1.readInt32(var2);
         super.unread_count = var1.readInt32(var2);
         super.unread_important_count = var1.readInt32(var2);
         super.chat_photo = TLRPC.Photo.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.notify_settings = TLRPC.PeerNotifySettings.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.exported_invite = TLRPC.ExportedChatInvite.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.can_view_participants) {
            var2 = super.flags | 8;
         } else {
            var2 = super.flags & -9;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt32(super.id);
         var1.writeString(super.about);
         if ((super.flags & 1) != 0) {
            var1.writeInt32(super.participants_count);
         }

         if ((super.flags & 2) != 0) {
            var1.writeInt32(super.admins_count);
         }

         if ((super.flags & 4) != 0) {
            var1.writeInt32(super.kicked_count);
         }

         var1.writeInt32(super.read_inbox_max_id);
         var1.writeInt32(super.unread_count);
         var1.writeInt32(super.unread_important_count);
         super.chat_photo.serializeToStream(var1);
         super.notify_settings.serializeToStream(var1);
         super.exported_invite.serializeToStream(var1);
      }
   }

   public static class TL_channelMessagesFilter extends TLRPC.ChannelMessagesFilter {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         int var4 = 0;
         boolean var5;
         if ((var3 & 2) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.exclude_new_messages = var5;
         var3 = var1.readInt32(var2);
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.TL_messageRange var6 = TLRPC.TL_messageRange.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               super.ranges.add(var6);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.exclude_new_messages) {
            var2 = super.flags | 2;
         } else {
            var2 = super.flags & -3;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt32(481674261);
         int var3 = super.ranges.size();
         var1.writeInt32(var3);

         for(var2 = 0; var2 < var3; ++var2) {
            ((TLRPC.TL_messageRange)super.ranges.get(var2)).serializeToStream(var1);
         }

      }
   }

   public static class TL_channelMessagesFilterEmpty extends TLRPC.ChannelMessagesFilter {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_channelParticipant extends TLRPC.ChannelParticipant {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.user_id = var1.readInt32(var2);
         super.date = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.user_id);
         var1.writeInt32(super.date);
      }
   }

   public static class TL_channelParticipantAdmin extends TLRPC.ChannelParticipant {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         boolean var4 = true;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.can_edit = var5;
         if ((super.flags & 2) != 0) {
            var5 = var4;
         } else {
            var5 = false;
         }

         super.self = var5;
         super.user_id = var1.readInt32(var2);
         if ((super.flags & 2) != 0) {
            super.inviter_id = var1.readInt32(var2);
         }

         super.promoted_by = var1.readInt32(var2);
         super.date = var1.readInt32(var2);
         super.admin_rights = TLRPC.TL_chatAdminRights.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.can_edit) {
            var2 = super.flags | 1;
         } else {
            var2 = super.flags & -2;
         }

         super.flags = var2;
         if (super.self) {
            var2 = super.flags | 2;
         } else {
            var2 = super.flags & -3;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt32(super.user_id);
         if ((super.flags & 2) != 0) {
            var1.writeInt32(super.inviter_id);
         }

         var1.writeInt32(super.promoted_by);
         var1.writeInt32(super.date);
         super.admin_rights.serializeToStream(var1);
      }
   }

   public static class TL_channelParticipantAdmin_layer92 extends TLRPC.TL_channelParticipantAdmin {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         boolean var4 = true;
         if ((var3 & 1) == 0) {
            var4 = false;
         }

         super.can_edit = var4;
         super.user_id = var1.readInt32(var2);
         super.inviter_id = var1.readInt32(var2);
         super.promoted_by = var1.readInt32(var2);
         super.date = var1.readInt32(var2);
         super.admin_rights_layer92 = TLRPC.TL_channelAdminRights_layer92.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.admin_rights = TLRPC.Chat.mergeAdminRights(super.admin_rights_layer92);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.can_edit) {
            var2 = super.flags | 1;
         } else {
            var2 = super.flags & -2;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt32(super.user_id);
         var1.writeInt32(super.inviter_id);
         var1.writeInt32(super.promoted_by);
         var1.writeInt32(super.date);
         super.admin_rights_layer92.serializeToStream(var1);
      }
   }

   public static class TL_channelParticipantBanned extends TLRPC.ChannelParticipant {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         boolean var4 = true;
         if ((var3 & 1) == 0) {
            var4 = false;
         }

         super.left = var4;
         super.user_id = var1.readInt32(var2);
         super.kicked_by = var1.readInt32(var2);
         super.date = var1.readInt32(var2);
         super.banned_rights = TLRPC.TL_chatBannedRights.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.left) {
            var2 = super.flags | 1;
         } else {
            var2 = super.flags & -2;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt32(super.user_id);
         var1.writeInt32(super.kicked_by);
         var1.writeInt32(super.date);
         super.banned_rights.serializeToStream(var1);
      }
   }

   public static class TL_channelParticipantBanned_layer92 extends TLRPC.TL_channelParticipantBanned {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         boolean var4 = true;
         if ((var3 & 1) == 0) {
            var4 = false;
         }

         super.left = var4;
         super.user_id = var1.readInt32(var2);
         super.kicked_by = var1.readInt32(var2);
         super.date = var1.readInt32(var2);
         super.banned_rights_layer92 = TLRPC.TL_channelBannedRights_layer92.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.banned_rights = TLRPC.Chat.mergeBannedRights(super.banned_rights_layer92);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.left) {
            var2 = super.flags | 1;
         } else {
            var2 = super.flags & -2;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt32(super.user_id);
         var1.writeInt32(super.kicked_by);
         var1.writeInt32(super.date);
         super.banned_rights_layer92.serializeToStream(var1);
      }
   }

   public static class TL_channelParticipantCreator extends TLRPC.ChannelParticipant {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.user_id = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.user_id);
      }
   }

   public static class TL_channelParticipantEditor_layer67 extends TLRPC.TL_channelParticipantAdmin {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.user_id = var1.readInt32(var2);
         super.inviter_id = var1.readInt32(var2);
         super.date = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.user_id);
         var1.writeInt32(super.inviter_id);
         var1.writeInt32(super.date);
      }
   }

   public static class TL_channelParticipantKicked_layer67 extends TLRPC.ChannelParticipant {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.user_id = var1.readInt32(var2);
         super.kicked_by = var1.readInt32(var2);
         super.date = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.user_id);
         var1.writeInt32(super.kicked_by);
         var1.writeInt32(super.date);
      }
   }

   public static class TL_channelParticipantModerator_layer67 extends TLRPC.TL_channelParticipantAdmin {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.user_id = var1.readInt32(var2);
         super.inviter_id = var1.readInt32(var2);
         super.date = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.user_id);
         var1.writeInt32(super.inviter_id);
         var1.writeInt32(super.date);
      }
   }

   public static class TL_channelParticipantSelf extends TLRPC.ChannelParticipant {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.user_id = var1.readInt32(var2);
         super.inviter_id = var1.readInt32(var2);
         super.date = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.user_id);
         var1.writeInt32(super.inviter_id);
         var1.writeInt32(super.date);
      }
   }

   public static class TL_channelParticipantsAdmins extends TLRPC.ChannelParticipantsFilter {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_channelParticipantsBanned extends TLRPC.ChannelParticipantsFilter {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.q = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(super.q);
      }
   }

   public static class TL_channelParticipantsBots extends TLRPC.ChannelParticipantsFilter {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_channelParticipantsContacts extends TLRPC.ChannelParticipantsFilter {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.q = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(super.q);
      }
   }

   public static class TL_channelParticipantsKicked extends TLRPC.ChannelParticipantsFilter {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.q = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(super.q);
      }
   }

   public static class TL_channelParticipantsRecent extends TLRPC.ChannelParticipantsFilter {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_channelParticipantsSearch extends TLRPC.ChannelParticipantsFilter {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.q = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(super.q);
      }
   }

   public static class TL_channel_layer48 extends TLRPC.TL_channel {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         boolean var4 = true;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.creator = var5;
         if ((super.flags & 2) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.kicked = var5;
         if ((super.flags & 4) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.left = var5;
         if ((super.flags & 16) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.moderator = var5;
         if ((super.flags & 32) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.broadcast = var5;
         if ((super.flags & 128) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.verified = var5;
         if ((super.flags & 256) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.megagroup = var5;
         if ((super.flags & 512) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.restricted = var5;
         if ((super.flags & 2048) != 0) {
            var5 = var4;
         } else {
            var5 = false;
         }

         super.signatures = var5;
         super.id = var1.readInt32(var2);
         super.access_hash = var1.readInt64(var2);
         super.title = var1.readString(var2);
         if ((super.flags & 64) != 0) {
            super.username = var1.readString(var2);
         }

         super.photo = TLRPC.ChatPhoto.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.date = var1.readInt32(var2);
         super.version = var1.readInt32(var2);
         if ((super.flags & 512) != 0) {
            super.restriction_reason = var1.readString(var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.creator) {
            var2 = super.flags | 1;
         } else {
            var2 = super.flags & -2;
         }

         super.flags = var2;
         if (super.kicked) {
            var2 = super.flags | 2;
         } else {
            var2 = super.flags & -3;
         }

         super.flags = var2;
         if (super.left) {
            var2 = super.flags | 4;
         } else {
            var2 = super.flags & -5;
         }

         super.flags = var2;
         if (super.moderator) {
            var2 = super.flags | 16;
         } else {
            var2 = super.flags & -17;
         }

         super.flags = var2;
         if (super.broadcast) {
            var2 = super.flags | 32;
         } else {
            var2 = super.flags & -33;
         }

         super.flags = var2;
         if (super.verified) {
            var2 = super.flags | 128;
         } else {
            var2 = super.flags & -129;
         }

         super.flags = var2;
         if (super.megagroup) {
            var2 = super.flags | 256;
         } else {
            var2 = super.flags & -257;
         }

         super.flags = var2;
         if (super.restricted) {
            var2 = super.flags | 512;
         } else {
            var2 = super.flags & -513;
         }

         super.flags = var2;
         if (super.signatures) {
            var2 = super.flags | 2048;
         } else {
            var2 = super.flags & -2049;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt32(super.id);
         var1.writeInt64(super.access_hash);
         var1.writeString(super.title);
         if ((super.flags & 64) != 0) {
            var1.writeString(super.username);
         }

         super.photo.serializeToStream(var1);
         var1.writeInt32(super.date);
         var1.writeInt32(super.version);
         if ((super.flags & 512) != 0) {
            var1.writeString(super.restriction_reason);
         }

      }
   }

   public static class TL_channel_layer67 extends TLRPC.TL_channel {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         boolean var4 = true;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.creator = var5;
         if ((super.flags & 2) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.kicked = var5;
         if ((super.flags & 4) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.left = var5;
         if ((super.flags & 16) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.moderator = var5;
         if ((super.flags & 32) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.broadcast = var5;
         if ((super.flags & 128) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.verified = var5;
         if ((super.flags & 256) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.megagroup = var5;
         if ((super.flags & 512) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.restricted = var5;
         if ((super.flags & 2048) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.signatures = var5;
         if ((super.flags & 4096) != 0) {
            var5 = var4;
         } else {
            var5 = false;
         }

         super.min = var5;
         super.id = var1.readInt32(var2);
         if ((super.flags & 8192) != 0) {
            super.access_hash = var1.readInt64(var2);
         }

         super.title = var1.readString(var2);
         if ((super.flags & 64) != 0) {
            super.username = var1.readString(var2);
         }

         super.photo = TLRPC.ChatPhoto.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.date = var1.readInt32(var2);
         super.version = var1.readInt32(var2);
         if ((super.flags & 512) != 0) {
            super.restriction_reason = var1.readString(var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.creator) {
            var2 = super.flags | 1;
         } else {
            var2 = super.flags & -2;
         }

         super.flags = var2;
         if (super.kicked) {
            var2 = super.flags | 2;
         } else {
            var2 = super.flags & -3;
         }

         super.flags = var2;
         if (super.left) {
            var2 = super.flags | 4;
         } else {
            var2 = super.flags & -5;
         }

         super.flags = var2;
         if (super.moderator) {
            var2 = super.flags | 16;
         } else {
            var2 = super.flags & -17;
         }

         super.flags = var2;
         if (super.broadcast) {
            var2 = super.flags | 32;
         } else {
            var2 = super.flags & -33;
         }

         super.flags = var2;
         if (super.verified) {
            var2 = super.flags | 128;
         } else {
            var2 = super.flags & -129;
         }

         super.flags = var2;
         if (super.megagroup) {
            var2 = super.flags | 256;
         } else {
            var2 = super.flags & -257;
         }

         super.flags = var2;
         if (super.restricted) {
            var2 = super.flags | 512;
         } else {
            var2 = super.flags & -513;
         }

         super.flags = var2;
         if (super.signatures) {
            var2 = super.flags | 2048;
         } else {
            var2 = super.flags & -2049;
         }

         super.flags = var2;
         if (super.min) {
            var2 = super.flags | 4096;
         } else {
            var2 = super.flags & -4097;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt32(super.id);
         if ((super.flags & 8192) != 0) {
            var1.writeInt64(super.access_hash);
         }

         var1.writeString(super.title);
         if ((super.flags & 64) != 0) {
            var1.writeString(super.username);
         }

         super.photo.serializeToStream(var1);
         var1.writeInt32(super.date);
         var1.writeInt32(super.version);
         if ((super.flags & 512) != 0) {
            var1.writeString(super.restriction_reason);
         }

      }
   }

   public static class TL_channel_layer72 extends TLRPC.TL_channel {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         boolean var4 = true;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.creator = var5;
         if ((super.flags & 4) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.left = var5;
         if ((super.flags & 32) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.broadcast = var5;
         if ((super.flags & 128) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.verified = var5;
         if ((super.flags & 256) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.megagroup = var5;
         if ((super.flags & 512) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.restricted = var5;
         if ((super.flags & 2048) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.signatures = var5;
         if ((super.flags & 4096) != 0) {
            var5 = var4;
         } else {
            var5 = false;
         }

         super.min = var5;
         super.id = var1.readInt32(var2);
         if ((super.flags & 8192) != 0) {
            super.access_hash = var1.readInt64(var2);
         }

         super.title = var1.readString(var2);
         if ((super.flags & 64) != 0) {
            super.username = var1.readString(var2);
         }

         super.photo = TLRPC.ChatPhoto.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.date = var1.readInt32(var2);
         super.version = var1.readInt32(var2);
         if ((super.flags & 512) != 0) {
            super.restriction_reason = var1.readString(var2);
         }

         if ((super.flags & 16384) != 0) {
            super.admin_rights_layer92 = TLRPC.TL_channelAdminRights_layer92.TLdeserialize(var1, var1.readInt32(var2), var2);
            super.admin_rights = TLRPC.Chat.mergeAdminRights(super.admin_rights_layer92);
         }

         if ((super.flags & '耀') != 0) {
            super.banned_rights_layer92 = TLRPC.TL_channelBannedRights_layer92.TLdeserialize(var1, var1.readInt32(var2), var2);
            super.banned_rights = TLRPC.Chat.mergeBannedRights(super.banned_rights_layer92);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.creator) {
            var2 = super.flags | 1;
         } else {
            var2 = super.flags & -2;
         }

         super.flags = var2;
         if (super.kicked) {
            var2 = super.flags | 2;
         } else {
            var2 = super.flags & -3;
         }

         super.flags = var2;
         if (super.left) {
            var2 = super.flags | 4;
         } else {
            var2 = super.flags & -5;
         }

         super.flags = var2;
         if (super.broadcast) {
            var2 = super.flags | 32;
         } else {
            var2 = super.flags & -33;
         }

         super.flags = var2;
         if (super.verified) {
            var2 = super.flags | 128;
         } else {
            var2 = super.flags & -129;
         }

         super.flags = var2;
         if (super.megagroup) {
            var2 = super.flags | 256;
         } else {
            var2 = super.flags & -257;
         }

         super.flags = var2;
         if (super.restricted) {
            var2 = super.flags | 512;
         } else {
            var2 = super.flags & -513;
         }

         super.flags = var2;
         if (super.signatures) {
            var2 = super.flags | 2048;
         } else {
            var2 = super.flags & -2049;
         }

         super.flags = var2;
         if (super.min) {
            var2 = super.flags | 4096;
         } else {
            var2 = super.flags & -4097;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt32(super.id);
         if ((super.flags & 8192) != 0) {
            var1.writeInt64(super.access_hash);
         }

         var1.writeString(super.title);
         if ((super.flags & 64) != 0) {
            var1.writeString(super.username);
         }

         super.photo.serializeToStream(var1);
         var1.writeInt32(super.date);
         var1.writeInt32(super.version);
         if ((super.flags & 512) != 0) {
            var1.writeString(super.restriction_reason);
         }

         if ((super.flags & 16384) != 0) {
            super.admin_rights_layer92.serializeToStream(var1);
         }

         if ((super.flags & '耀') != 0) {
            super.banned_rights_layer92.serializeToStream(var1);
         }

      }
   }

   public static class TL_channel_layer77 extends TLRPC.TL_channel {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         boolean var4 = true;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.creator = var5;
         if ((super.flags & 4) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.left = var5;
         if ((super.flags & 32) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.broadcast = var5;
         if ((super.flags & 128) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.verified = var5;
         if ((super.flags & 256) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.megagroup = var5;
         if ((super.flags & 512) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.restricted = var5;
         if ((super.flags & 2048) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.signatures = var5;
         if ((super.flags & 4096) != 0) {
            var5 = var4;
         } else {
            var5 = false;
         }

         super.min = var5;
         super.id = var1.readInt32(var2);
         if ((super.flags & 8192) != 0) {
            super.access_hash = var1.readInt64(var2);
         }

         super.title = var1.readString(var2);
         if ((super.flags & 64) != 0) {
            super.username = var1.readString(var2);
         }

         super.photo = TLRPC.ChatPhoto.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.date = var1.readInt32(var2);
         super.version = var1.readInt32(var2);
         if ((super.flags & 512) != 0) {
            super.restriction_reason = var1.readString(var2);
         }

         if ((super.flags & 16384) != 0) {
            super.admin_rights_layer92 = TLRPC.TL_channelAdminRights_layer92.TLdeserialize(var1, var1.readInt32(var2), var2);
            super.admin_rights = TLRPC.Chat.mergeAdminRights(super.admin_rights_layer92);
         }

         if ((super.flags & '耀') != 0) {
            super.banned_rights_layer92 = TLRPC.TL_channelBannedRights_layer92.TLdeserialize(var1, var1.readInt32(var2), var2);
            super.banned_rights = TLRPC.Chat.mergeBannedRights(super.banned_rights_layer92);
         }

         if ((super.flags & 131072) != 0) {
            super.participants_count = var1.readInt32(var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.creator) {
            var2 = super.flags | 1;
         } else {
            var2 = super.flags & -2;
         }

         super.flags = var2;
         if (super.left) {
            var2 = super.flags | 4;
         } else {
            var2 = super.flags & -5;
         }

         super.flags = var2;
         if (super.broadcast) {
            var2 = super.flags | 32;
         } else {
            var2 = super.flags & -33;
         }

         super.flags = var2;
         if (super.verified) {
            var2 = super.flags | 128;
         } else {
            var2 = super.flags & -129;
         }

         super.flags = var2;
         if (super.megagroup) {
            var2 = super.flags | 256;
         } else {
            var2 = super.flags & -257;
         }

         super.flags = var2;
         if (super.restricted) {
            var2 = super.flags | 512;
         } else {
            var2 = super.flags & -513;
         }

         super.flags = var2;
         if (super.signatures) {
            var2 = super.flags | 2048;
         } else {
            var2 = super.flags & -2049;
         }

         super.flags = var2;
         if (super.min) {
            var2 = super.flags | 4096;
         } else {
            var2 = super.flags & -4097;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt32(super.id);
         if ((super.flags & 8192) != 0) {
            var1.writeInt64(super.access_hash);
         }

         var1.writeString(super.title);
         if ((super.flags & 64) != 0) {
            var1.writeString(super.username);
         }

         super.photo.serializeToStream(var1);
         var1.writeInt32(super.date);
         var1.writeInt32(super.version);
         if ((super.flags & 512) != 0) {
            var1.writeString(super.restriction_reason);
         }

         if ((super.flags & 16384) != 0) {
            super.admin_rights_layer92.serializeToStream(var1);
         }

         if ((super.flags & '耀') != 0) {
            super.banned_rights_layer92.serializeToStream(var1);
         }

         if ((super.flags & 131072) != 0) {
            var1.writeInt32(super.participants_count);
         }

      }
   }

   public static class TL_channel_layer92 extends TLRPC.TL_channel {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         boolean var4 = true;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.creator = var5;
         if ((super.flags & 4) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.left = var5;
         if ((super.flags & 32) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.broadcast = var5;
         if ((super.flags & 128) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.verified = var5;
         if ((super.flags & 256) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.megagroup = var5;
         if ((super.flags & 512) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.restricted = var5;
         if ((super.flags & 2048) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.signatures = var5;
         if ((super.flags & 4096) != 0) {
            var5 = var4;
         } else {
            var5 = false;
         }

         super.min = var5;
         super.id = var1.readInt32(var2);
         if ((super.flags & 8192) != 0) {
            super.access_hash = var1.readInt64(var2);
         }

         super.title = var1.readString(var2);
         if ((super.flags & 64) != 0) {
            super.username = var1.readString(var2);
         }

         super.photo = TLRPC.ChatPhoto.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.date = var1.readInt32(var2);
         super.version = var1.readInt32(var2);
         if ((super.flags & 512) != 0) {
            super.restriction_reason = var1.readString(var2);
         }

         if ((super.flags & 16384) != 0) {
            super.admin_rights_layer92 = TLRPC.TL_channelAdminRights_layer92.TLdeserialize(var1, var1.readInt32(var2), var2);
            super.admin_rights = TLRPC.Chat.mergeAdminRights(super.admin_rights_layer92);
         }

         if ((super.flags & '耀') != 0) {
            super.banned_rights_layer92 = TLRPC.TL_channelBannedRights_layer92.TLdeserialize(var1, var1.readInt32(var2), var2);
            super.banned_rights = TLRPC.Chat.mergeBannedRights(super.banned_rights_layer92);
         }

         if ((super.flags & 131072) != 0) {
            super.participants_count = var1.readInt32(var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.creator) {
            var2 = super.flags | 1;
         } else {
            var2 = super.flags & -2;
         }

         super.flags = var2;
         if (super.left) {
            var2 = super.flags | 4;
         } else {
            var2 = super.flags & -5;
         }

         super.flags = var2;
         if (super.broadcast) {
            var2 = super.flags | 32;
         } else {
            var2 = super.flags & -33;
         }

         super.flags = var2;
         if (super.verified) {
            var2 = super.flags | 128;
         } else {
            var2 = super.flags & -129;
         }

         super.flags = var2;
         if (super.megagroup) {
            var2 = super.flags | 256;
         } else {
            var2 = super.flags & -257;
         }

         super.flags = var2;
         if (super.restricted) {
            var2 = super.flags | 512;
         } else {
            var2 = super.flags & -513;
         }

         super.flags = var2;
         if (super.signatures) {
            var2 = super.flags | 2048;
         } else {
            var2 = super.flags & -2049;
         }

         super.flags = var2;
         if (super.min) {
            var2 = super.flags | 4096;
         } else {
            var2 = super.flags & -4097;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt32(super.id);
         if ((super.flags & 8192) != 0) {
            var1.writeInt64(super.access_hash);
         }

         var1.writeString(super.title);
         if ((super.flags & 64) != 0) {
            var1.writeString(super.username);
         }

         super.photo.serializeToStream(var1);
         var1.writeInt32(super.date);
         var1.writeInt32(super.version);
         if ((super.flags & 512) != 0) {
            var1.writeString(super.restriction_reason);
         }

         if ((super.flags & 16384) != 0) {
            super.admin_rights_layer92.serializeToStream(var1);
         }

         if ((super.flags & '耀') != 0) {
            super.banned_rights_layer92.serializeToStream(var1);
         }

         if ((super.flags & 131072) != 0) {
            var1.writeInt32(super.participants_count);
         }

      }
   }

   public static class TL_channel_old extends TLRPC.TL_channel {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         boolean var4 = true;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.creator = var5;
         if ((super.flags & 2) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.kicked = var5;
         if ((super.flags & 4) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.left = var5;
         if ((super.flags & 16) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.moderator = var5;
         if ((super.flags & 32) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.broadcast = var5;
         if ((super.flags & 128) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.verified = var5;
         if ((super.flags & 256) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.megagroup = var5;
         if ((super.flags & 512) != 0) {
            var5 = var4;
         } else {
            var5 = false;
         }

         super.explicit_content = var5;
         super.id = var1.readInt32(var2);
         super.access_hash = var1.readInt64(var2);
         super.title = var1.readString(var2);
         if ((super.flags & 64) != 0) {
            super.username = var1.readString(var2);
         }

         super.photo = TLRPC.ChatPhoto.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.date = var1.readInt32(var2);
         super.version = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.creator) {
            var2 = super.flags | 1;
         } else {
            var2 = super.flags & -2;
         }

         super.flags = var2;
         if (super.kicked) {
            var2 = super.flags | 2;
         } else {
            var2 = super.flags & -3;
         }

         super.flags = var2;
         if (super.left) {
            var2 = super.flags | 4;
         } else {
            var2 = super.flags & -5;
         }

         super.flags = var2;
         if (super.moderator) {
            var2 = super.flags | 16;
         } else {
            var2 = super.flags & -17;
         }

         super.flags = var2;
         if (super.broadcast) {
            var2 = super.flags | 32;
         } else {
            var2 = super.flags & -33;
         }

         super.flags = var2;
         if (super.verified) {
            var2 = super.flags | 128;
         } else {
            var2 = super.flags & -129;
         }

         super.flags = var2;
         if (super.megagroup) {
            var2 = super.flags | 256;
         } else {
            var2 = super.flags & -257;
         }

         super.flags = var2;
         if (super.explicit_content) {
            var2 = super.flags | 512;
         } else {
            var2 = super.flags & -513;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt32(super.id);
         var1.writeInt64(super.access_hash);
         var1.writeString(super.title);
         if ((super.flags & 64) != 0) {
            var1.writeString(super.username);
         }

         super.photo.serializeToStream(var1);
         var1.writeInt32(super.date);
         var1.writeInt32(super.version);
      }
   }

   public static class TL_channels_adminLogResults extends TLObject {
      public static int constructor;
      public ArrayList chats = new ArrayList();
      public ArrayList events = new ArrayList();
      public ArrayList users = new ArrayList();

      public static TLRPC.TL_channels_adminLogResults TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_channels_adminLogResults", var1));
            }
         } else {
            TLRPC.TL_channels_adminLogResults var3 = new TLRPC.TL_channels_adminLogResults();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         int var3 = var1.readInt32(var2);
         byte var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            int var5 = var1.readInt32(var2);

            for(var3 = 0; var3 < var5; ++var3) {
               TLRPC.TL_channelAdminLogEvent var6 = TLRPC.TL_channelAdminLogEvent.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               this.events.add(var6);
            }

            var3 = var1.readInt32(var2);
            if (var3 != 481674261) {
               if (var2) {
                  throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
               }
            } else {
               var5 = var1.readInt32(var2);

               for(var3 = 0; var3 < var5; ++var3) {
                  TLRPC.Chat var7 = TLRPC.Chat.TLdeserialize(var1, var1.readInt32(var2), var2);
                  if (var7 == null) {
                     return;
                  }

                  this.chats.add(var7);
               }

               var3 = var1.readInt32(var2);
               if (var3 != 481674261) {
                  if (var2) {
                     throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
                  }
               } else {
                  var5 = var1.readInt32(var2);

                  for(var3 = var4; var3 < var5; ++var3) {
                     TLRPC.User var8 = TLRPC.User.TLdeserialize(var1, var1.readInt32(var2), var2);
                     if (var8 == null) {
                        return;
                     }

                     this.users.add(var8);
                  }

               }
            }
         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = this.events.size();
         var1.writeInt32(var2);
         byte var3 = 0;

         int var4;
         for(var4 = 0; var4 < var2; ++var4) {
            ((TLRPC.TL_channelAdminLogEvent)this.events.get(var4)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var2 = this.chats.size();
         var1.writeInt32(var2);

         for(var4 = 0; var4 < var2; ++var4) {
            ((TLRPC.Chat)this.chats.get(var4)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var2 = this.users.size();
         var1.writeInt32(var2);

         for(var4 = var3; var4 < var2; ++var4) {
            ((TLRPC.User)this.users.get(var4)).serializeToStream(var1);
         }

      }
   }

   public static class TL_channels_channelParticipant extends TLObject {
      public static int constructor;
      public TLRPC.ChannelParticipant participant;
      public ArrayList users = new ArrayList();

      public static TLRPC.TL_channels_channelParticipant TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_channels_channelParticipant", var1));
            }
         } else {
            TLRPC.TL_channels_channelParticipant var3 = new TLRPC.TL_channels_channelParticipant();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.participant = TLRPC.ChannelParticipant.TLdeserialize(var1, var1.readInt32(var2), var2);
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.User var5 = TLRPC.User.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               this.users.add(var5);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.participant.serializeToStream(var1);
         var1.writeInt32(481674261);
         int var2 = this.users.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.User)this.users.get(var3)).serializeToStream(var1);
         }

      }
   }

   public static class TL_channels_channelParticipants extends TLRPC.channels_ChannelParticipants {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.count = var1.readInt32(var2);
         int var3 = var1.readInt32(var2);
         byte var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            int var5 = var1.readInt32(var2);

            for(var3 = 0; var3 < var5; ++var3) {
               TLRPC.ChannelParticipant var6 = TLRPC.ChannelParticipant.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               super.participants.add(var6);
            }

            var3 = var1.readInt32(var2);
            if (var3 != 481674261) {
               if (var2) {
                  throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
               }
            } else {
               var5 = var1.readInt32(var2);

               for(var3 = var4; var3 < var5; ++var3) {
                  TLRPC.User var7 = TLRPC.User.TLdeserialize(var1, var1.readInt32(var2), var2);
                  if (var7 == null) {
                     return;
                  }

                  super.users.add(var7);
               }

            }
         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.count);
         var1.writeInt32(481674261);
         int var2 = super.participants.size();
         var1.writeInt32(var2);
         byte var3 = 0;

         int var4;
         for(var4 = 0; var4 < var2; ++var4) {
            ((TLRPC.ChannelParticipant)super.participants.get(var4)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var2 = super.users.size();
         var1.writeInt32(var2);

         for(var4 = var3; var4 < var2; ++var4) {
            ((TLRPC.User)super.users.get(var4)).serializeToStream(var1);
         }

      }
   }

   public static class TL_channels_channelParticipantsNotModified extends TLRPC.channels_ChannelParticipants {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_channels_checkUsername extends TLObject {
      public static int constructor;
      public TLRPC.InputChannel channel;
      public String username;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.channel.serializeToStream(var1);
         var1.writeString(this.username);
      }
   }

   public static class TL_channels_createChannel extends TLObject {
      public static int constructor;
      public String about;
      public boolean broadcast;
      public int flags;
      public boolean megagroup;
      public String title;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Updates.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.broadcast) {
            var2 = this.flags | 1;
         } else {
            var2 = this.flags & -2;
         }

         this.flags = var2;
         if (this.megagroup) {
            var2 = this.flags | 2;
         } else {
            var2 = this.flags & -3;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         var1.writeString(this.title);
         var1.writeString(this.about);
      }
   }

   public static class TL_channels_deleteChannel extends TLObject {
      public static int constructor;
      public TLRPC.InputChannel channel;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Updates.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.channel.serializeToStream(var1);
      }
   }

   public static class TL_channels_deleteHistory extends TLObject {
      public static int constructor;
      public TLRPC.InputChannel channel;
      public int max_id;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.channel.serializeToStream(var1);
         var1.writeInt32(this.max_id);
      }
   }

   public static class TL_channels_deleteMessages extends TLObject {
      public static int constructor;
      public TLRPC.InputChannel channel;
      public ArrayList id = new ArrayList();

      public static TLRPC.TL_channels_deleteMessages TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_channels_deleteMessages", var1));
            }
         } else {
            TLRPC.TL_channels_deleteMessages var3 = new TLRPC.TL_channels_deleteMessages();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_messages_affectedMessages.TLdeserialize(var1, var2, var3);
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.channel = TLRPC.InputChannel.TLdeserialize(var1, var1.readInt32(var2), var2);
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               this.id.add(var1.readInt32(var2));
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.channel.serializeToStream(var1);
         var1.writeInt32(481674261);
         int var2 = this.id.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            var1.writeInt32((Integer)this.id.get(var3));
         }

      }
   }

   public static class TL_channels_deleteUserHistory extends TLObject {
      public static int constructor;
      public TLRPC.InputChannel channel;
      public TLRPC.InputUser user_id;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_messages_affectedHistory.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.channel.serializeToStream(var1);
         this.user_id.serializeToStream(var1);
      }
   }

   public static class TL_channels_editAdmin extends TLObject {
      public static int constructor;
      public TLRPC.TL_chatAdminRights admin_rights;
      public TLRPC.InputChannel channel;
      public TLRPC.InputUser user_id;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Updates.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.channel.serializeToStream(var1);
         this.user_id.serializeToStream(var1);
         this.admin_rights.serializeToStream(var1);
      }
   }

   public static class TL_channels_editBanned extends TLObject {
      public static int constructor;
      public TLRPC.TL_chatBannedRights banned_rights;
      public TLRPC.InputChannel channel;
      public TLRPC.InputUser user_id;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Updates.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.channel.serializeToStream(var1);
         this.user_id.serializeToStream(var1);
         this.banned_rights.serializeToStream(var1);
      }
   }

   public static class TL_channels_editPhoto extends TLObject {
      public static int constructor;
      public TLRPC.InputChannel channel;
      public TLRPC.InputChatPhoto photo;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Updates.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.channel.serializeToStream(var1);
         this.photo.serializeToStream(var1);
      }
   }

   public static class TL_channels_editTitle extends TLObject {
      public static int constructor;
      public TLRPC.InputChannel channel;
      public String title;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Updates.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.channel.serializeToStream(var1);
         var1.writeString(this.title);
      }
   }

   public static class TL_channels_exportMessageLink extends TLObject {
      public static int constructor;
      public TLRPC.InputChannel channel;
      public int id;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_exportedMessageLink.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.channel.serializeToStream(var1);
         var1.writeInt32(this.id);
      }
   }

   public static class TL_channels_getAdminLog extends TLObject {
      public static int constructor;
      public ArrayList admins = new ArrayList();
      public TLRPC.InputChannel channel;
      public TLRPC.TL_channelAdminLogEventsFilter events_filter;
      public int flags;
      public int limit;
      public long max_id;
      public long min_id;
      public String q;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_channels_adminLogResults.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.flags);
         this.channel.serializeToStream(var1);
         var1.writeString(this.q);
         if ((this.flags & 1) != 0) {
            this.events_filter.serializeToStream(var1);
         }

         if ((this.flags & 2) != 0) {
            var1.writeInt32(481674261);
            int var2 = this.admins.size();
            var1.writeInt32(var2);

            for(int var3 = 0; var3 < var2; ++var3) {
               ((TLRPC.InputUser)this.admins.get(var3)).serializeToStream(var1);
            }
         }

         var1.writeInt64(this.max_id);
         var1.writeInt64(this.min_id);
         var1.writeInt32(this.limit);
      }
   }

   public static class TL_channels_getAdminedPublicChannels extends TLObject {
      public static int constructor;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.messages_Chats.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_channels_getBroadcastsForDiscussion extends TLObject {
      public static int constructor;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.messages_Chats.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_channels_getChannels extends TLObject {
      public static int constructor;
      public ArrayList id = new ArrayList();

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.messages_Chats.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = this.id.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.InputChannel)this.id.get(var3)).serializeToStream(var1);
         }

      }
   }

   public static class TL_channels_getFullChannel extends TLObject {
      public static int constructor;
      public TLRPC.InputChannel channel;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_messages_chatFull.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.channel.serializeToStream(var1);
      }
   }

   public static class TL_channels_getGroupsForDiscussion extends TLObject {
      public static int constructor;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.messages_Chats.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_channels_getMessages extends TLObject {
      public static int constructor;
      public TLRPC.InputChannel channel;
      public ArrayList id = new ArrayList();

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.messages_Messages.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.channel.serializeToStream(var1);
         var1.writeInt32(481674261);
         int var2 = this.id.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            var1.writeInt32((Integer)this.id.get(var3));
         }

      }
   }

   public static class TL_channels_getParticipant extends TLObject {
      public static int constructor;
      public TLRPC.InputChannel channel;
      public TLRPC.InputUser user_id;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_channels_channelParticipant.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.channel.serializeToStream(var1);
         this.user_id.serializeToStream(var1);
      }
   }

   public static class TL_channels_getParticipants extends TLObject {
      public static int constructor;
      public TLRPC.InputChannel channel;
      public TLRPC.ChannelParticipantsFilter filter;
      public int hash;
      public int limit;
      public int offset;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.channels_ChannelParticipants.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.channel.serializeToStream(var1);
         this.filter.serializeToStream(var1);
         var1.writeInt32(this.offset);
         var1.writeInt32(this.limit);
         var1.writeInt32(this.hash);
      }
   }

   public static class TL_channels_inviteToChannel extends TLObject {
      public static int constructor;
      public TLRPC.InputChannel channel;
      public ArrayList users = new ArrayList();

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Updates.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.channel.serializeToStream(var1);
         var1.writeInt32(481674261);
         int var2 = this.users.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.InputUser)this.users.get(var3)).serializeToStream(var1);
         }

      }
   }

   public static class TL_channels_joinChannel extends TLObject {
      public static int constructor;
      public TLRPC.InputChannel channel;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Updates.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.channel.serializeToStream(var1);
      }
   }

   public static class TL_channels_leaveChannel extends TLObject {
      public static int constructor;
      public TLRPC.InputChannel channel;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Updates.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.channel.serializeToStream(var1);
      }
   }

   public static class TL_channels_readHistory extends TLObject {
      public static int constructor;
      public TLRPC.InputChannel channel;
      public int max_id;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.channel.serializeToStream(var1);
         var1.writeInt32(this.max_id);
      }
   }

   public static class TL_channels_readMessageContents extends TLObject {
      public static int constructor;
      public TLRPC.InputChannel channel;
      public ArrayList id = new ArrayList();

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.channel.serializeToStream(var1);
         var1.writeInt32(481674261);
         int var2 = this.id.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            var1.writeInt32((Integer)this.id.get(var3));
         }

      }
   }

   public static class TL_channels_reportSpam extends TLObject {
      public static int constructor;
      public TLRPC.InputChannel channel;
      public ArrayList id = new ArrayList();
      public TLRPC.InputUser user_id;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.channel.serializeToStream(var1);
         this.user_id.serializeToStream(var1);
         var1.writeInt32(481674261);
         int var2 = this.id.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            var1.writeInt32((Integer)this.id.get(var3));
         }

      }
   }

   public static class TL_channels_searchPosts extends TLObject {
      public static int constructor;
      public int limit;
      public int offset_id;
      public TLRPC.InputPeer offset_peer;
      public int offset_rate;
      public String q;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.messages_Messages.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.q);
         var1.writeInt32(this.offset_rate);
         this.offset_peer.serializeToStream(var1);
         var1.writeInt32(this.offset_id);
         var1.writeInt32(this.limit);
      }
   }

   public static class TL_channels_setDiscussionGroup extends TLObject {
      public static int constructor;
      public TLRPC.InputChannel broadcast;
      public TLRPC.InputChannel group;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.broadcast.serializeToStream(var1);
         this.group.serializeToStream(var1);
      }
   }

   public static class TL_channels_setStickers extends TLObject {
      public static int constructor;
      public TLRPC.InputChannel channel;
      public TLRPC.InputStickerSet stickerset;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.channel.serializeToStream(var1);
         this.stickerset.serializeToStream(var1);
      }
   }

   public static class TL_channels_togglePreHistoryHidden extends TLObject {
      public static int constructor;
      public TLRPC.InputChannel channel;
      public boolean enabled;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Updates.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.channel.serializeToStream(var1);
         var1.writeBool(this.enabled);
      }
   }

   public static class TL_channels_toggleSignatures extends TLObject {
      public static int constructor;
      public TLRPC.InputChannel channel;
      public boolean enabled;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Updates.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.channel.serializeToStream(var1);
         var1.writeBool(this.enabled);
      }
   }

   public static class TL_channels_updateUsername extends TLObject {
      public static int constructor;
      public TLRPC.InputChannel channel;
      public String username;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.channel.serializeToStream(var1);
         var1.writeString(this.username);
      }
   }

   public static class TL_chat extends TLRPC.Chat {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         boolean var4 = true;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.creator = var5;
         if ((super.flags & 2) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.kicked = var5;
         if ((super.flags & 4) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.left = var5;
         if ((super.flags & 32) != 0) {
            var5 = var4;
         } else {
            var5 = false;
         }

         super.deactivated = var5;
         super.id = var1.readInt32(var2);
         super.title = var1.readString(var2);
         super.photo = TLRPC.ChatPhoto.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.participants_count = var1.readInt32(var2);
         super.date = var1.readInt32(var2);
         super.version = var1.readInt32(var2);
         if ((super.flags & 64) != 0) {
            super.migrated_to = TLRPC.InputChannel.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         if ((super.flags & 16384) != 0) {
            super.admin_rights = TLRPC.TL_chatAdminRights.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         if ((super.flags & 262144) != 0) {
            super.default_banned_rights = TLRPC.TL_chatBannedRights.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.creator) {
            var2 = super.flags | 1;
         } else {
            var2 = super.flags & -2;
         }

         super.flags = var2;
         if (super.kicked) {
            var2 = super.flags | 2;
         } else {
            var2 = super.flags & -3;
         }

         super.flags = var2;
         if (super.left) {
            var2 = super.flags | 4;
         } else {
            var2 = super.flags & -5;
         }

         super.flags = var2;
         if (super.deactivated) {
            var2 = super.flags | 32;
         } else {
            var2 = super.flags & -33;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt32(super.id);
         var1.writeString(super.title);
         super.photo.serializeToStream(var1);
         var1.writeInt32(super.participants_count);
         var1.writeInt32(super.date);
         var1.writeInt32(super.version);
         if ((super.flags & 64) != 0) {
            super.migrated_to.serializeToStream(var1);
         }

         if ((super.flags & 16384) != 0) {
            super.admin_rights.serializeToStream(var1);
         }

         if ((super.flags & 262144) != 0) {
            super.default_banned_rights.serializeToStream(var1);
         }

      }
   }

   public static class TL_chatAdminRights extends TLObject {
      public static int constructor;
      public boolean add_admins;
      public boolean ban_users;
      public boolean change_info;
      public boolean delete_messages;
      public boolean edit_messages;
      public int flags;
      public boolean invite_users;
      public boolean pin_messages;
      public boolean post_messages;

      public static TLRPC.TL_chatAdminRights TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_chatAdminRights", var1));
            }
         } else {
            TLRPC.TL_chatAdminRights var3 = new TLRPC.TL_chatAdminRights();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.flags = var1.readInt32(var2);
         int var3 = this.flags;
         boolean var4 = true;
         if ((var3 & 1) != 0) {
            var2 = true;
         } else {
            var2 = false;
         }

         this.change_info = var2;
         if ((this.flags & 2) != 0) {
            var2 = true;
         } else {
            var2 = false;
         }

         this.post_messages = var2;
         if ((this.flags & 4) != 0) {
            var2 = true;
         } else {
            var2 = false;
         }

         this.edit_messages = var2;
         if ((this.flags & 8) != 0) {
            var2 = true;
         } else {
            var2 = false;
         }

         this.delete_messages = var2;
         if ((this.flags & 16) != 0) {
            var2 = true;
         } else {
            var2 = false;
         }

         this.ban_users = var2;
         if ((this.flags & 32) != 0) {
            var2 = true;
         } else {
            var2 = false;
         }

         this.invite_users = var2;
         if ((this.flags & 128) != 0) {
            var2 = true;
         } else {
            var2 = false;
         }

         this.pin_messages = var2;
         if ((this.flags & 512) != 0) {
            var2 = var4;
         } else {
            var2 = false;
         }

         this.add_admins = var2;
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.change_info) {
            var2 = this.flags | 1;
         } else {
            var2 = this.flags & -2;
         }

         this.flags = var2;
         if (this.post_messages) {
            var2 = this.flags | 2;
         } else {
            var2 = this.flags & -3;
         }

         this.flags = var2;
         if (this.edit_messages) {
            var2 = this.flags | 4;
         } else {
            var2 = this.flags & -5;
         }

         this.flags = var2;
         if (this.delete_messages) {
            var2 = this.flags | 8;
         } else {
            var2 = this.flags & -9;
         }

         this.flags = var2;
         if (this.ban_users) {
            var2 = this.flags | 16;
         } else {
            var2 = this.flags & -17;
         }

         this.flags = var2;
         if (this.invite_users) {
            var2 = this.flags | 32;
         } else {
            var2 = this.flags & -33;
         }

         this.flags = var2;
         if (this.pin_messages) {
            var2 = this.flags | 128;
         } else {
            var2 = this.flags & -129;
         }

         this.flags = var2;
         if (this.add_admins) {
            var2 = this.flags | 512;
         } else {
            var2 = this.flags & -513;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
      }
   }

   public static class TL_chatBannedRights extends TLObject {
      public static int constructor;
      public boolean change_info;
      public boolean embed_links;
      public int flags;
      public boolean invite_users;
      public boolean pin_messages;
      public boolean send_games;
      public boolean send_gifs;
      public boolean send_inline;
      public boolean send_media;
      public boolean send_messages;
      public boolean send_polls;
      public boolean send_stickers;
      public int until_date;
      public boolean view_messages;

      public static TLRPC.TL_chatBannedRights TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_chatBannedRights", var1));
            }
         } else {
            TLRPC.TL_chatBannedRights var3 = new TLRPC.TL_chatBannedRights();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.flags = var1.readInt32(var2);
         int var3 = this.flags;
         boolean var4 = true;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.view_messages = var5;
         if ((this.flags & 2) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.send_messages = var5;
         if ((this.flags & 4) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.send_media = var5;
         if ((this.flags & 8) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.send_stickers = var5;
         if ((this.flags & 16) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.send_gifs = var5;
         if ((this.flags & 32) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.send_games = var5;
         if ((this.flags & 64) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.send_inline = var5;
         if ((this.flags & 128) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.embed_links = var5;
         if ((this.flags & 256) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.send_polls = var5;
         if ((this.flags & 1024) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.change_info = var5;
         if ((this.flags & '耀') != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.invite_users = var5;
         if ((this.flags & 131072) != 0) {
            var5 = var4;
         } else {
            var5 = false;
         }

         this.pin_messages = var5;
         this.until_date = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.view_messages) {
            var2 = this.flags | 1;
         } else {
            var2 = this.flags & -2;
         }

         this.flags = var2;
         if (this.send_messages) {
            var2 = this.flags | 2;
         } else {
            var2 = this.flags & -3;
         }

         this.flags = var2;
         if (this.send_media) {
            var2 = this.flags | 4;
         } else {
            var2 = this.flags & -5;
         }

         this.flags = var2;
         if (this.send_stickers) {
            var2 = this.flags | 8;
         } else {
            var2 = this.flags & -9;
         }

         this.flags = var2;
         if (this.send_gifs) {
            var2 = this.flags | 16;
         } else {
            var2 = this.flags & -17;
         }

         this.flags = var2;
         if (this.send_games) {
            var2 = this.flags | 32;
         } else {
            var2 = this.flags & -33;
         }

         this.flags = var2;
         if (this.send_inline) {
            var2 = this.flags | 64;
         } else {
            var2 = this.flags & -65;
         }

         this.flags = var2;
         if (this.embed_links) {
            var2 = this.flags | 128;
         } else {
            var2 = this.flags & -129;
         }

         this.flags = var2;
         if (this.send_polls) {
            var2 = this.flags | 256;
         } else {
            var2 = this.flags & -257;
         }

         this.flags = var2;
         if (this.change_info) {
            var2 = this.flags | 1024;
         } else {
            var2 = this.flags & -1025;
         }

         this.flags = var2;
         if (this.invite_users) {
            var2 = this.flags | '耀';
         } else {
            var2 = this.flags & -32769;
         }

         this.flags = var2;
         if (this.pin_messages) {
            var2 = this.flags | 131072;
         } else {
            var2 = this.flags & -131073;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         var1.writeInt32(this.until_date);
      }
   }

   public static class TL_chatChannelParticipant extends TLRPC.ChatParticipant {
      public static int constructor;
      public TLRPC.ChannelParticipant channelParticipant;
   }

   public static class TL_chatEmpty extends TLRPC.Chat {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt32(var2);
         super.title = "DELETED";
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.id);
      }
   }

   public static class TL_chatForbidden extends TLRPC.Chat {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt32(var2);
         super.title = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.id);
         var1.writeString(super.title);
      }
   }

   public static class TL_chatForbidden_old extends TLRPC.TL_chatForbidden {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt32(var2);
         super.title = var1.readString(var2);
         super.date = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.id);
         var1.writeString(super.title);
         var1.writeInt32(super.date);
      }
   }

   public static class TL_chatFull extends TLRPC.ChatFull {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         int var4 = 0;
         boolean var5;
         if ((var3 & 128) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.can_set_username = var5;
         super.id = var1.readInt32(var2);
         super.about = var1.readString(var2);
         super.participants = TLRPC.ChatParticipants.TLdeserialize(var1, var1.readInt32(var2), var2);
         if ((super.flags & 4) != 0) {
            super.chat_photo = TLRPC.Photo.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         super.notify_settings = TLRPC.PeerNotifySettings.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.exported_invite = TLRPC.ExportedChatInvite.TLdeserialize(var1, var1.readInt32(var2), var2);
         if ((super.flags & 8) != 0) {
            var3 = var1.readInt32(var2);
            if (var3 != 481674261) {
               if (!var2) {
                  return;
               }

               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }

            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.BotInfo var6 = TLRPC.BotInfo.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               super.bot_info.add(var6);
            }
         }

         if ((super.flags & 64) != 0) {
            super.pinned_msg_id = var1.readInt32(var2);
         }

         if ((super.flags & 2048) != 0) {
            super.folder_id = var1.readInt32(var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.can_set_username) {
            var2 = super.flags | 128;
         } else {
            var2 = super.flags & -129;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt32(super.id);
         var1.writeString(super.about);
         super.participants.serializeToStream(var1);
         if ((super.flags & 4) != 0) {
            super.chat_photo.serializeToStream(var1);
         }

         super.notify_settings.serializeToStream(var1);
         super.exported_invite.serializeToStream(var1);
         if ((super.flags & 8) != 0) {
            var1.writeInt32(481674261);
            int var3 = super.bot_info.size();
            var1.writeInt32(var3);

            for(var2 = 0; var2 < var3; ++var2) {
               ((TLRPC.BotInfo)super.bot_info.get(var2)).serializeToStream(var1);
            }
         }

         if ((super.flags & 64) != 0) {
            var1.writeInt32(super.pinned_msg_id);
         }

         if ((super.flags & 2048) != 0) {
            var1.writeInt32(super.folder_id);
         }

      }
   }

   public static class TL_chatFull_layer87 extends TLRPC.TL_chatFull {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt32(var2);
         super.participants = TLRPC.ChatParticipants.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.chat_photo = TLRPC.Photo.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.notify_settings = TLRPC.PeerNotifySettings.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.exported_invite = TLRPC.ExportedChatInvite.TLdeserialize(var1, var1.readInt32(var2), var2);
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.BotInfo var5 = TLRPC.BotInfo.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               super.bot_info.add(var5);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.id);
         super.participants.serializeToStream(var1);
         super.chat_photo.serializeToStream(var1);
         super.notify_settings.serializeToStream(var1);
         super.exported_invite.serializeToStream(var1);
         var1.writeInt32(481674261);
         int var2 = super.bot_info.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.BotInfo)super.bot_info.get(var3)).serializeToStream(var1);
         }

      }
   }

   public static class TL_chatFull_layer92 extends TLRPC.TL_chatFull {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         super.id = var1.readInt32(var2);
         super.participants = TLRPC.ChatParticipants.TLdeserialize(var1, var1.readInt32(var2), var2);
         if ((super.flags & 4) != 0) {
            super.chat_photo = TLRPC.Photo.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         super.notify_settings = TLRPC.PeerNotifySettings.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.exported_invite = TLRPC.ExportedChatInvite.TLdeserialize(var1, var1.readInt32(var2), var2);
         if ((super.flags & 8) != 0) {
            int var3 = var1.readInt32(var2);
            int var4 = 0;
            if (var3 != 481674261) {
               if (!var2) {
                  return;
               }

               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }

            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.BotInfo var5 = TLRPC.BotInfo.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               super.bot_info.add(var5);
            }
         }

         if ((super.flags & 64) != 0) {
            super.pinned_msg_id = var1.readInt32(var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.flags);
         var1.writeInt32(super.id);
         super.participants.serializeToStream(var1);
         if ((super.flags & 4) != 0) {
            super.chat_photo.serializeToStream(var1);
         }

         super.notify_settings.serializeToStream(var1);
         super.exported_invite.serializeToStream(var1);
         if ((super.flags & 8) != 0) {
            var1.writeInt32(481674261);
            int var2 = super.bot_info.size();
            var1.writeInt32(var2);

            for(int var3 = 0; var3 < var2; ++var3) {
               ((TLRPC.BotInfo)super.bot_info.get(var3)).serializeToStream(var1);
            }
         }

         if ((super.flags & 64) != 0) {
            var1.writeInt32(super.pinned_msg_id);
         }

      }
   }

   public static class TL_chatFull_layer98 extends TLRPC.TL_chatFull {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         int var4 = 0;
         boolean var5;
         if ((var3 & 128) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.can_set_username = var5;
         super.id = var1.readInt32(var2);
         super.about = var1.readString(var2);
         super.participants = TLRPC.ChatParticipants.TLdeserialize(var1, var1.readInt32(var2), var2);
         if ((super.flags & 4) != 0) {
            super.chat_photo = TLRPC.Photo.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         super.notify_settings = TLRPC.PeerNotifySettings.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.exported_invite = TLRPC.ExportedChatInvite.TLdeserialize(var1, var1.readInt32(var2), var2);
         if ((super.flags & 8) != 0) {
            var3 = var1.readInt32(var2);
            if (var3 != 481674261) {
               if (!var2) {
                  return;
               }

               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }

            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.BotInfo var6 = TLRPC.BotInfo.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               super.bot_info.add(var6);
            }
         }

         if ((super.flags & 64) != 0) {
            super.pinned_msg_id = var1.readInt32(var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.can_set_username) {
            var2 = super.flags | 128;
         } else {
            var2 = super.flags & -129;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt32(super.id);
         var1.writeString(super.about);
         super.participants.serializeToStream(var1);
         if ((super.flags & 4) != 0) {
            super.chat_photo.serializeToStream(var1);
         }

         super.notify_settings.serializeToStream(var1);
         super.exported_invite.serializeToStream(var1);
         if ((super.flags & 8) != 0) {
            var1.writeInt32(481674261);
            int var3 = super.bot_info.size();
            var1.writeInt32(var3);

            for(var2 = 0; var2 < var3; ++var2) {
               ((TLRPC.BotInfo)super.bot_info.get(var2)).serializeToStream(var1);
            }
         }

         if ((super.flags & 64) != 0) {
            var1.writeInt32(super.pinned_msg_id);
         }

      }
   }

   public static class TL_chatInvite extends TLRPC.ChatInvite {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         int var4 = 0;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.channel = var5;
         if ((super.flags & 2) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.broadcast = var5;
         if ((super.flags & 4) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.isPublic = var5;
         if ((super.flags & 8) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.megagroup = var5;
         super.title = var1.readString(var2);
         super.photo = TLRPC.Photo.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.participants_count = var1.readInt32(var2);
         if ((super.flags & 16) != 0) {
            var3 = var1.readInt32(var2);
            if (var3 != 481674261) {
               if (!var2) {
                  return;
               }

               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }

            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.User var6 = TLRPC.User.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               super.participants.add(var6);
            }
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.channel) {
            var2 = super.flags | 1;
         } else {
            var2 = super.flags & -2;
         }

         super.flags = var2;
         if (super.broadcast) {
            var2 = super.flags | 2;
         } else {
            var2 = super.flags & -3;
         }

         super.flags = var2;
         if (super.isPublic) {
            var2 = super.flags | 4;
         } else {
            var2 = super.flags & -5;
         }

         super.flags = var2;
         if (super.megagroup) {
            var2 = super.flags | 8;
         } else {
            var2 = super.flags & -9;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeString(super.title);
         super.photo.serializeToStream(var1);
         var1.writeInt32(super.participants_count);
         if ((super.flags & 16) != 0) {
            var1.writeInt32(481674261);
            int var3 = super.participants.size();
            var1.writeInt32(var3);

            for(var2 = 0; var2 < var3; ++var2) {
               ((TLRPC.User)super.participants.get(var2)).serializeToStream(var1);
            }
         }

      }
   }

   public static class TL_chatInviteAlready extends TLRPC.ChatInvite {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.chat = TLRPC.Chat.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         super.chat.serializeToStream(var1);
      }
   }

   public static class TL_chatInviteEmpty extends TLRPC.ExportedChatInvite {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_chatInviteExported extends TLRPC.ExportedChatInvite {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.link = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(super.link);
      }
   }

   public static class TL_chatLocated extends TLObject {
      public static int constructor;
      public int chat_id;
      public int distance;

      public static TLRPC.TL_chatLocated TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_chatLocated", var1));
            }
         } else {
            TLRPC.TL_chatLocated var3 = new TLRPC.TL_chatLocated();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.chat_id = var1.readInt32(var2);
         this.distance = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.chat_id);
         var1.writeInt32(this.distance);
      }
   }

   public static class TL_chatOnlines extends TLObject {
      public static int constructor;
      public int onlines;

      public static TLRPC.TL_chatOnlines TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_chatOnlines", var1));
            }
         } else {
            TLRPC.TL_chatOnlines var3 = new TLRPC.TL_chatOnlines();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.onlines = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.onlines);
      }
   }

   public static class TL_chatParticipant extends TLRPC.ChatParticipant {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.user_id = var1.readInt32(var2);
         super.inviter_id = var1.readInt32(var2);
         super.date = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.user_id);
         var1.writeInt32(super.inviter_id);
         var1.writeInt32(super.date);
      }
   }

   public static class TL_chatParticipantAdmin extends TLRPC.ChatParticipant {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.user_id = var1.readInt32(var2);
         super.inviter_id = var1.readInt32(var2);
         super.date = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.user_id);
         var1.writeInt32(super.inviter_id);
         var1.writeInt32(super.date);
      }
   }

   public static class TL_chatParticipantCreator extends TLRPC.ChatParticipant {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.user_id = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.user_id);
      }
   }

   public static class TL_chatParticipants extends TLRPC.ChatParticipants {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.chat_id = var1.readInt32(var2);
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.ChatParticipant var5 = TLRPC.ChatParticipant.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               super.participants.add(var5);
            }

            super.version = var1.readInt32(var2);
         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.chat_id);
         var1.writeInt32(481674261);
         int var2 = super.participants.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.ChatParticipant)super.participants.get(var3)).serializeToStream(var1);
         }

         var1.writeInt32(super.version);
      }
   }

   public static class TL_chatParticipantsForbidden extends TLRPC.ChatParticipants {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         super.chat_id = var1.readInt32(var2);
         if ((super.flags & 1) != 0) {
            super.self_participant = TLRPC.ChatParticipant.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.flags);
         var1.writeInt32(super.chat_id);
         if ((super.flags & 1) != 0) {
            super.self_participant.serializeToStream(var1);
         }

      }
   }

   public static class TL_chatParticipantsForbidden_old extends TLRPC.TL_chatParticipantsForbidden {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.chat_id = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.chat_id);
      }
   }

   public static class TL_chatParticipants_old extends TLRPC.TL_chatParticipants {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.chat_id = var1.readInt32(var2);
         super.admin_id = var1.readInt32(var2);
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.ChatParticipant var5 = TLRPC.ChatParticipant.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               super.participants.add(var5);
            }

            super.version = var1.readInt32(var2);
         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.chat_id);
         var1.writeInt32(super.admin_id);
         var1.writeInt32(481674261);
         int var2 = super.participants.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.ChatParticipant)super.participants.get(var3)).serializeToStream(var1);
         }

         var1.writeInt32(super.version);
      }
   }

   public static class TL_chatPhoto extends TLRPC.ChatPhoto {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.photo_small = TLRPC.FileLocation.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.photo_big = TLRPC.FileLocation.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.dc_id = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         super.photo_small.serializeToStream(var1);
         super.photo_big.serializeToStream(var1);
         var1.writeInt32(super.dc_id);
      }
   }

   public static class TL_chatPhotoEmpty extends TLRPC.ChatPhoto {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_chatPhoto_layer97 extends TLRPC.TL_chatPhoto {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.photo_small = TLRPC.FileLocation.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.photo_big = TLRPC.FileLocation.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         super.photo_small.serializeToStream(var1);
         super.photo_big.serializeToStream(var1);
      }
   }

   public static class TL_chat_layer92 extends TLRPC.TL_chat {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         boolean var4 = true;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.creator = var5;
         if ((super.flags & 2) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.kicked = var5;
         if ((super.flags & 4) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.left = var5;
         if ((super.flags & 32) != 0) {
            var5 = var4;
         } else {
            var5 = false;
         }

         super.deactivated = var5;
         super.id = var1.readInt32(var2);
         super.title = var1.readString(var2);
         super.photo = TLRPC.ChatPhoto.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.participants_count = var1.readInt32(var2);
         super.date = var1.readInt32(var2);
         super.version = var1.readInt32(var2);
         if ((super.flags & 64) != 0) {
            super.migrated_to = TLRPC.InputChannel.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.creator) {
            var2 = super.flags | 1;
         } else {
            var2 = super.flags & -2;
         }

         super.flags = var2;
         if (super.kicked) {
            var2 = super.flags | 2;
         } else {
            var2 = super.flags & -3;
         }

         super.flags = var2;
         if (super.left) {
            var2 = super.flags | 4;
         } else {
            var2 = super.flags & -5;
         }

         super.flags = var2;
         if (super.deactivated) {
            var2 = super.flags | 32;
         } else {
            var2 = super.flags & -33;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt32(super.id);
         var1.writeString(super.title);
         super.photo.serializeToStream(var1);
         var1.writeInt32(super.participants_count);
         var1.writeInt32(super.date);
         var1.writeInt32(super.version);
         if ((super.flags & 64) != 0) {
            super.migrated_to.serializeToStream(var1);
         }

      }
   }

   public static class TL_chat_old extends TLRPC.TL_chat {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt32(var2);
         super.title = var1.readString(var2);
         super.photo = TLRPC.ChatPhoto.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.participants_count = var1.readInt32(var2);
         super.date = var1.readInt32(var2);
         super.left = var1.readBool(var2);
         super.version = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.id);
         var1.writeString(super.title);
         super.photo.serializeToStream(var1);
         var1.writeInt32(super.participants_count);
         var1.writeInt32(super.date);
         var1.writeBool(super.left);
         var1.writeInt32(super.version);
      }
   }

   public static class TL_chat_old2 extends TLRPC.TL_chat {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         boolean var4 = true;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.creator = var5;
         if ((super.flags & 2) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.kicked = var5;
         if ((super.flags & 4) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.left = var5;
         if ((super.flags & 32) != 0) {
            var5 = var4;
         } else {
            var5 = false;
         }

         super.deactivated = var5;
         super.id = var1.readInt32(var2);
         super.title = var1.readString(var2);
         super.photo = TLRPC.ChatPhoto.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.participants_count = var1.readInt32(var2);
         super.date = var1.readInt32(var2);
         super.version = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.creator) {
            var2 = super.flags | 1;
         } else {
            var2 = super.flags & -2;
         }

         super.flags = var2;
         if (super.kicked) {
            var2 = super.flags | 2;
         } else {
            var2 = super.flags & -3;
         }

         super.flags = var2;
         if (super.left) {
            var2 = super.flags | 4;
         } else {
            var2 = super.flags & -5;
         }

         super.flags = var2;
         if (super.deactivated) {
            var2 = super.flags | 32;
         } else {
            var2 = super.flags & -33;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt32(super.id);
         var1.writeString(super.title);
         super.photo.serializeToStream(var1);
         var1.writeInt32(super.participants_count);
         var1.writeInt32(super.date);
         var1.writeInt32(super.version);
      }
   }

   public static class TL_codeSettings extends TLObject {
      public static int constructor;
      public boolean allow_flashcall;
      public String app_hash;
      public boolean app_hash_persistent;
      public boolean current_number;
      public int flags;

      public static TLRPC.TL_codeSettings TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_codeSettings", var1));
            }
         } else {
            TLRPC.TL_codeSettings var3 = new TLRPC.TL_codeSettings();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.flags = var1.readInt32(var2);
         int var3 = this.flags;
         boolean var4 = true;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.allow_flashcall = var5;
         if ((this.flags & 2) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.current_number = var5;
         if ((this.flags & 4) != 0) {
            var5 = var4;
         } else {
            var5 = false;
         }

         this.app_hash_persistent = var5;
         if ((this.flags & 8) != 0) {
            this.app_hash = var1.readString(var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.allow_flashcall) {
            var2 = this.flags | 1;
         } else {
            var2 = this.flags & -2;
         }

         this.flags = var2;
         if (this.current_number) {
            var2 = this.flags | 2;
         } else {
            var2 = this.flags & -3;
         }

         this.flags = var2;
         if (this.app_hash_persistent) {
            var2 = this.flags | 4;
         } else {
            var2 = this.flags & -5;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         if ((this.flags & 8) != 0) {
            var1.writeString(this.app_hash);
         }

      }
   }

   public static class TL_config extends TLObject {
      public static int constructor;
      public String autoupdate_url_prefix;
      public int base_lang_pack_version;
      public boolean blocked_mode;
      public int call_connect_timeout_ms;
      public int call_packet_timeout_ms;
      public int call_receive_timeout_ms;
      public int call_ring_timeout_ms;
      public int caption_length_max;
      public int channels_read_media_period;
      public int chat_size_max;
      public int date;
      public ArrayList dc_options = new ArrayList();
      public String dc_txt_domain_name;
      public boolean default_p2p_contacts;
      public int edit_time_limit;
      public int expires;
      public int flags;
      public int forwarded_count_max;
      public String gif_search_username;
      public boolean ignore_phone_entities;
      public String img_search_username;
      public int lang_pack_version;
      public String me_url_prefix;
      public int megagroup_size_max;
      public int message_length_max;
      public int notify_cloud_delay_ms;
      public int notify_default_delay_ms;
      public int offline_blur_timeout_ms;
      public int offline_idle_timeout_ms;
      public int online_cloud_timeout_ms;
      public int online_update_period_ms;
      public boolean pfs_enabled;
      public boolean phonecalls_enabled;
      public int pinned_dialogs_count_max;
      public int pinned_infolder_count_max;
      public boolean preload_featured_stickers;
      public int push_chat_limit;
      public int push_chat_period_ms;
      public int rating_e_decay;
      public boolean revoke_pm_inbox;
      public int revoke_pm_time_limit;
      public int revoke_time_limit;
      public int saved_gifs_limit;
      public String static_maps_provider;
      public int stickers_faved_limit;
      public int stickers_recent_limit;
      public String suggested_lang_code;
      public boolean test_mode;
      public int this_dc;
      public int tmp_sessions;
      public String venue_search_username;
      public int webfile_dc_id;

      public static TLRPC.TL_config TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_config", var1));
            }
         } else {
            TLRPC.TL_config var3 = new TLRPC.TL_config();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.flags = var1.readInt32(var2);
         int var3 = this.flags;
         int var4 = 0;
         boolean var5;
         if ((var3 & 2) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.phonecalls_enabled = var5;
         if ((this.flags & 8) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.default_p2p_contacts = var5;
         if ((this.flags & 16) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.preload_featured_stickers = var5;
         if ((this.flags & 32) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.ignore_phone_entities = var5;
         if ((this.flags & 64) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.revoke_pm_inbox = var5;
         if ((this.flags & 256) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.blocked_mode = var5;
         if ((this.flags & 8192) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.pfs_enabled = var5;
         this.date = var1.readInt32(var2);
         this.expires = var1.readInt32(var2);
         this.test_mode = var1.readBool(var2);
         this.this_dc = var1.readInt32(var2);
         var3 = var1.readInt32(var2);
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.TL_dcOption var6 = TLRPC.TL_dcOption.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               this.dc_options.add(var6);
            }

            this.dc_txt_domain_name = var1.readString(var2);
            this.chat_size_max = var1.readInt32(var2);
            this.megagroup_size_max = var1.readInt32(var2);
            this.forwarded_count_max = var1.readInt32(var2);
            this.online_update_period_ms = var1.readInt32(var2);
            this.offline_blur_timeout_ms = var1.readInt32(var2);
            this.offline_idle_timeout_ms = var1.readInt32(var2);
            this.online_cloud_timeout_ms = var1.readInt32(var2);
            this.notify_cloud_delay_ms = var1.readInt32(var2);
            this.notify_default_delay_ms = var1.readInt32(var2);
            this.push_chat_period_ms = var1.readInt32(var2);
            this.push_chat_limit = var1.readInt32(var2);
            this.saved_gifs_limit = var1.readInt32(var2);
            this.edit_time_limit = var1.readInt32(var2);
            this.revoke_time_limit = var1.readInt32(var2);
            this.revoke_pm_time_limit = var1.readInt32(var2);
            this.rating_e_decay = var1.readInt32(var2);
            this.stickers_recent_limit = var1.readInt32(var2);
            this.stickers_faved_limit = var1.readInt32(var2);
            this.channels_read_media_period = var1.readInt32(var2);
            if ((this.flags & 1) != 0) {
               this.tmp_sessions = var1.readInt32(var2);
            }

            this.pinned_dialogs_count_max = var1.readInt32(var2);
            this.pinned_infolder_count_max = var1.readInt32(var2);
            this.call_receive_timeout_ms = var1.readInt32(var2);
            this.call_ring_timeout_ms = var1.readInt32(var2);
            this.call_connect_timeout_ms = var1.readInt32(var2);
            this.call_packet_timeout_ms = var1.readInt32(var2);
            this.me_url_prefix = var1.readString(var2);
            if ((this.flags & 128) != 0) {
               this.autoupdate_url_prefix = var1.readString(var2);
            }

            if ((this.flags & 512) != 0) {
               this.gif_search_username = var1.readString(var2);
            }

            if ((this.flags & 1024) != 0) {
               this.venue_search_username = var1.readString(var2);
            }

            if ((this.flags & 2048) != 0) {
               this.img_search_username = var1.readString(var2);
            }

            if ((this.flags & 4096) != 0) {
               this.static_maps_provider = var1.readString(var2);
            }

            this.caption_length_max = var1.readInt32(var2);
            this.message_length_max = var1.readInt32(var2);
            this.webfile_dc_id = var1.readInt32(var2);
            if ((this.flags & 4) != 0) {
               this.suggested_lang_code = var1.readString(var2);
            }

            if ((this.flags & 4) != 0) {
               this.lang_pack_version = var1.readInt32(var2);
            }

            if ((this.flags & 4) != 0) {
               this.base_lang_pack_version = var1.readInt32(var2);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.phonecalls_enabled) {
            var2 = this.flags | 2;
         } else {
            var2 = this.flags & -3;
         }

         this.flags = var2;
         if (this.default_p2p_contacts) {
            var2 = this.flags | 8;
         } else {
            var2 = this.flags & -9;
         }

         this.flags = var2;
         if (this.preload_featured_stickers) {
            var2 = this.flags | 16;
         } else {
            var2 = this.flags & -17;
         }

         this.flags = var2;
         if (this.ignore_phone_entities) {
            var2 = this.flags | 32;
         } else {
            var2 = this.flags & -33;
         }

         this.flags = var2;
         if (this.revoke_pm_inbox) {
            var2 = this.flags | 64;
         } else {
            var2 = this.flags & -65;
         }

         this.flags = var2;
         if (this.blocked_mode) {
            var2 = this.flags | 256;
         } else {
            var2 = this.flags & -257;
         }

         this.flags = var2;
         if (this.pfs_enabled) {
            var2 = this.flags | 8192;
         } else {
            var2 = this.flags & -8193;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         var1.writeInt32(this.date);
         var1.writeInt32(this.expires);
         var1.writeBool(this.test_mode);
         var1.writeInt32(this.this_dc);
         var1.writeInt32(481674261);
         int var3 = this.dc_options.size();
         var1.writeInt32(var3);

         for(var2 = 0; var2 < var3; ++var2) {
            ((TLRPC.TL_dcOption)this.dc_options.get(var2)).serializeToStream(var1);
         }

         var1.writeString(this.dc_txt_domain_name);
         var1.writeInt32(this.chat_size_max);
         var1.writeInt32(this.megagroup_size_max);
         var1.writeInt32(this.forwarded_count_max);
         var1.writeInt32(this.online_update_period_ms);
         var1.writeInt32(this.offline_blur_timeout_ms);
         var1.writeInt32(this.offline_idle_timeout_ms);
         var1.writeInt32(this.online_cloud_timeout_ms);
         var1.writeInt32(this.notify_cloud_delay_ms);
         var1.writeInt32(this.notify_default_delay_ms);
         var1.writeInt32(this.push_chat_period_ms);
         var1.writeInt32(this.push_chat_limit);
         var1.writeInt32(this.saved_gifs_limit);
         var1.writeInt32(this.edit_time_limit);
         var1.writeInt32(this.revoke_time_limit);
         var1.writeInt32(this.revoke_pm_time_limit);
         var1.writeInt32(this.rating_e_decay);
         var1.writeInt32(this.stickers_recent_limit);
         var1.writeInt32(this.stickers_faved_limit);
         var1.writeInt32(this.channels_read_media_period);
         if ((this.flags & 1) != 0) {
            var1.writeInt32(this.tmp_sessions);
         }

         var1.writeInt32(this.pinned_dialogs_count_max);
         var1.writeInt32(this.pinned_infolder_count_max);
         var1.writeInt32(this.call_receive_timeout_ms);
         var1.writeInt32(this.call_ring_timeout_ms);
         var1.writeInt32(this.call_connect_timeout_ms);
         var1.writeInt32(this.call_packet_timeout_ms);
         var1.writeString(this.me_url_prefix);
         if ((this.flags & 128) != 0) {
            var1.writeString(this.autoupdate_url_prefix);
         }

         if ((this.flags & 512) != 0) {
            var1.writeString(this.gif_search_username);
         }

         if ((this.flags & 1024) != 0) {
            var1.writeString(this.venue_search_username);
         }

         if ((this.flags & 2048) != 0) {
            var1.writeString(this.img_search_username);
         }

         if ((this.flags & 4096) != 0) {
            var1.writeString(this.static_maps_provider);
         }

         var1.writeInt32(this.caption_length_max);
         var1.writeInt32(this.message_length_max);
         var1.writeInt32(this.webfile_dc_id);
         if ((this.flags & 4) != 0) {
            var1.writeString(this.suggested_lang_code);
         }

         if ((this.flags & 4) != 0) {
            var1.writeInt32(this.lang_pack_version);
         }

         if ((this.flags & 4) != 0) {
            var1.writeInt32(this.base_lang_pack_version);
         }

      }
   }

   public static class TL_contact extends TLObject {
      public static int constructor;
      public boolean mutual;
      public int user_id;

      public static TLRPC.TL_contact TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_contact", var1));
            }
         } else {
            TLRPC.TL_contact var3 = new TLRPC.TL_contact();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.user_id = var1.readInt32(var2);
         this.mutual = var1.readBool(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.user_id);
         var1.writeBool(this.mutual);
      }
   }

   public static class TL_contactBlocked extends TLObject {
      public static int constructor;
      public int date;
      public int user_id;

      public static TLRPC.TL_contactBlocked TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_contactBlocked", var1));
            }
         } else {
            TLRPC.TL_contactBlocked var3 = new TLRPC.TL_contactBlocked();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.user_id = var1.readInt32(var2);
         this.date = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.user_id);
         var1.writeInt32(this.date);
      }
   }

   public static class TL_contactFound extends TLObject {
      public static int constructor;
      public int user_id;

      public static TLRPC.TL_contactFound TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_contactFound", var1));
            }
         } else {
            TLRPC.TL_contactFound var3 = new TLRPC.TL_contactFound();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.user_id = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.user_id);
      }
   }

   public static class TL_contactLinkContact extends TLRPC.ContactLink {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_contactLinkNone extends TLRPC.ContactLink {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_contactLinkUnknown extends TLRPC.ContactLink {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_contactStatus extends TLObject {
      public static int constructor;
      public TLRPC.UserStatus status;
      public int user_id;

      public static TLRPC.TL_contactStatus TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_contactStatus", var1));
            }
         } else {
            TLRPC.TL_contactStatus var3 = new TLRPC.TL_contactStatus();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.user_id = var1.readInt32(var2);
         this.status = TLRPC.UserStatus.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.user_id);
         this.status.serializeToStream(var1);
      }
   }

   public static class TL_contacts_block extends TLObject {
      public static int constructor;
      public TLRPC.InputUser id;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.id.serializeToStream(var1);
      }
   }

   public static class TL_contacts_blocked extends TLRPC.contacts_Blocked {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         int var3 = var1.readInt32(var2);
         byte var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            int var5 = var1.readInt32(var2);

            for(var3 = 0; var3 < var5; ++var3) {
               TLRPC.TL_contactBlocked var6 = TLRPC.TL_contactBlocked.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               super.blocked.add(var6);
            }

            var3 = var1.readInt32(var2);
            if (var3 != 481674261) {
               if (var2) {
                  throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
               }
            } else {
               var5 = var1.readInt32(var2);

               for(var3 = var4; var3 < var5; ++var3) {
                  TLRPC.User var7 = TLRPC.User.TLdeserialize(var1, var1.readInt32(var2), var2);
                  if (var7 == null) {
                     return;
                  }

                  super.users.add(var7);
               }

            }
         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = super.blocked.size();
         var1.writeInt32(var2);
         byte var3 = 0;

         int var4;
         for(var4 = 0; var4 < var2; ++var4) {
            ((TLRPC.TL_contactBlocked)super.blocked.get(var4)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var2 = super.users.size();
         var1.writeInt32(var2);

         for(var4 = var3; var4 < var2; ++var4) {
            ((TLRPC.User)super.users.get(var4)).serializeToStream(var1);
         }

      }
   }

   public static class TL_contacts_blockedSlice extends TLRPC.contacts_Blocked {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.count = var1.readInt32(var2);
         int var3 = var1.readInt32(var2);
         byte var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            int var5 = var1.readInt32(var2);

            for(var3 = 0; var3 < var5; ++var3) {
               TLRPC.TL_contactBlocked var6 = TLRPC.TL_contactBlocked.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               super.blocked.add(var6);
            }

            var3 = var1.readInt32(var2);
            if (var3 != 481674261) {
               if (var2) {
                  throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
               }
            } else {
               var5 = var1.readInt32(var2);

               for(var3 = var4; var3 < var5; ++var3) {
                  TLRPC.User var7 = TLRPC.User.TLdeserialize(var1, var1.readInt32(var2), var2);
                  if (var7 == null) {
                     return;
                  }

                  super.users.add(var7);
               }

            }
         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.count);
         var1.writeInt32(481674261);
         int var2 = super.blocked.size();
         var1.writeInt32(var2);
         byte var3 = 0;

         int var4;
         for(var4 = 0; var4 < var2; ++var4) {
            ((TLRPC.TL_contactBlocked)super.blocked.get(var4)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var2 = super.users.size();
         var1.writeInt32(var2);

         for(var4 = var3; var4 < var2; ++var4) {
            ((TLRPC.User)super.users.get(var4)).serializeToStream(var1);
         }

      }
   }

   public static class TL_contacts_contacts extends TLRPC.contacts_Contacts {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         int var3 = var1.readInt32(var2);
         byte var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            int var5 = var1.readInt32(var2);

            for(var3 = 0; var3 < var5; ++var3) {
               TLRPC.TL_contact var6 = TLRPC.TL_contact.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               super.contacts.add(var6);
            }

            super.saved_count = var1.readInt32(var2);
            var3 = var1.readInt32(var2);
            if (var3 != 481674261) {
               if (var2) {
                  throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
               }
            } else {
               var5 = var1.readInt32(var2);

               for(var3 = var4; var3 < var5; ++var3) {
                  TLRPC.User var7 = TLRPC.User.TLdeserialize(var1, var1.readInt32(var2), var2);
                  if (var7 == null) {
                     return;
                  }

                  super.users.add(var7);
               }

            }
         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = super.contacts.size();
         var1.writeInt32(var2);
         byte var3 = 0;

         int var4;
         for(var4 = 0; var4 < var2; ++var4) {
            ((TLRPC.TL_contact)super.contacts.get(var4)).serializeToStream(var1);
         }

         var1.writeInt32(super.saved_count);
         var1.writeInt32(481674261);
         var2 = super.users.size();
         var1.writeInt32(var2);

         for(var4 = var3; var4 < var2; ++var4) {
            ((TLRPC.User)super.users.get(var4)).serializeToStream(var1);
         }

      }
   }

   public static class TL_contacts_contactsNotModified extends TLRPC.contacts_Contacts {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_contacts_deleteByPhones extends TLObject {
      public static int constructor;
      public ArrayList phones = new ArrayList();

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = this.phones.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            var1.writeString((String)this.phones.get(var3));
         }

      }
   }

   public static class TL_contacts_deleteContact extends TLObject {
      public static int constructor;
      public TLRPC.InputUser id;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_contacts_link.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.id.serializeToStream(var1);
      }
   }

   public static class TL_contacts_deleteContacts extends TLObject {
      public static int constructor;
      public ArrayList id = new ArrayList();

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = this.id.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.InputUser)this.id.get(var3)).serializeToStream(var1);
         }

      }
   }

   public static class TL_contacts_exportCard extends TLObject {
      public static int constructor;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         TLRPC.Vector var4 = new TLRPC.Vector();
         int var5 = var1.readInt32(var3);

         for(var2 = 0; var2 < var5; ++var2) {
            var4.objects.add(var1.readInt32(var3));
         }

         return var4;
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_contacts_found extends TLObject {
      public static int constructor;
      public ArrayList chats = new ArrayList();
      public ArrayList my_results = new ArrayList();
      public ArrayList results = new ArrayList();
      public ArrayList users = new ArrayList();

      public static TLRPC.TL_contacts_found TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_contacts_found", var1));
            }
         } else {
            TLRPC.TL_contacts_found var3 = new TLRPC.TL_contacts_found();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         int var3 = var1.readInt32(var2);
         byte var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            int var5 = var1.readInt32(var2);

            TLRPC.Peer var6;
            for(var3 = 0; var3 < var5; ++var3) {
               var6 = TLRPC.Peer.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               this.my_results.add(var6);
            }

            var3 = var1.readInt32(var2);
            if (var3 != 481674261) {
               if (var2) {
                  throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
               }
            } else {
               var5 = var1.readInt32(var2);

               for(var3 = 0; var3 < var5; ++var3) {
                  var6 = TLRPC.Peer.TLdeserialize(var1, var1.readInt32(var2), var2);
                  if (var6 == null) {
                     return;
                  }

                  this.results.add(var6);
               }

               var3 = var1.readInt32(var2);
               if (var3 != 481674261) {
                  if (var2) {
                     throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
                  }
               } else {
                  var5 = var1.readInt32(var2);

                  for(var3 = 0; var3 < var5; ++var3) {
                     TLRPC.Chat var7 = TLRPC.Chat.TLdeserialize(var1, var1.readInt32(var2), var2);
                     if (var7 == null) {
                        return;
                     }

                     this.chats.add(var7);
                  }

                  var3 = var1.readInt32(var2);
                  if (var3 != 481674261) {
                     if (var2) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
                     }
                  } else {
                     var5 = var1.readInt32(var2);

                     for(var3 = var4; var3 < var5; ++var3) {
                        TLRPC.User var8 = TLRPC.User.TLdeserialize(var1, var1.readInt32(var2), var2);
                        if (var8 == null) {
                           return;
                        }

                        this.users.add(var8);
                     }

                  }
               }
            }
         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = this.my_results.size();
         var1.writeInt32(var2);
         byte var3 = 0;

         int var4;
         for(var4 = 0; var4 < var2; ++var4) {
            ((TLRPC.Peer)this.my_results.get(var4)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var2 = this.results.size();
         var1.writeInt32(var2);

         for(var4 = 0; var4 < var2; ++var4) {
            ((TLRPC.Peer)this.results.get(var4)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var2 = this.chats.size();
         var1.writeInt32(var2);

         for(var4 = 0; var4 < var2; ++var4) {
            ((TLRPC.Chat)this.chats.get(var4)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var2 = this.users.size();
         var1.writeInt32(var2);

         for(var4 = var3; var4 < var2; ++var4) {
            ((TLRPC.User)this.users.get(var4)).serializeToStream(var1);
         }

      }
   }

   public static class TL_contacts_getBlocked extends TLObject {
      public static int constructor;
      public int limit;
      public int offset;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.contacts_Blocked.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.offset);
         var1.writeInt32(this.limit);
      }
   }

   public static class TL_contacts_getContacts extends TLObject {
      public static int constructor;
      public int hash;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.contacts_Contacts.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.hash);
      }
   }

   public static class TL_contacts_getStatuses extends TLObject {
      public static int constructor;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         TLRPC.Vector var4 = new TLRPC.Vector();
         int var5 = var1.readInt32(var3);

         for(var2 = 0; var2 < var5; ++var2) {
            TLRPC.TL_contactStatus var6 = TLRPC.TL_contactStatus.TLdeserialize(var1, var1.readInt32(var3), var3);
            if (var6 == null) {
               return var4;
            }

            var4.objects.add(var6);
         }

         return var4;
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_contacts_getTopPeers extends TLObject {
      public static int constructor;
      public boolean bots_inline;
      public boolean bots_pm;
      public boolean channels;
      public boolean correspondents;
      public int flags;
      public boolean forward_chats;
      public boolean forward_users;
      public boolean groups;
      public int hash;
      public int limit;
      public int offset;
      public boolean phone_calls;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.contacts_TopPeers.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.correspondents) {
            var2 = this.flags | 1;
         } else {
            var2 = this.flags & -2;
         }

         this.flags = var2;
         if (this.bots_pm) {
            var2 = this.flags | 2;
         } else {
            var2 = this.flags & -3;
         }

         this.flags = var2;
         if (this.bots_inline) {
            var2 = this.flags | 4;
         } else {
            var2 = this.flags & -5;
         }

         this.flags = var2;
         if (this.phone_calls) {
            var2 = this.flags | 8;
         } else {
            var2 = this.flags & -9;
         }

         this.flags = var2;
         if (this.forward_users) {
            var2 = this.flags | 16;
         } else {
            var2 = this.flags & -17;
         }

         this.flags = var2;
         if (this.forward_chats) {
            var2 = this.flags | 32;
         } else {
            var2 = this.flags & -33;
         }

         this.flags = var2;
         if (this.groups) {
            var2 = this.flags | 1024;
         } else {
            var2 = this.flags & -1025;
         }

         this.flags = var2;
         if (this.channels) {
            var2 = this.flags | '耀';
         } else {
            var2 = this.flags & -32769;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         var1.writeInt32(this.offset);
         var1.writeInt32(this.limit);
         var1.writeInt32(this.hash);
      }
   }

   public static class TL_contacts_importCard extends TLObject {
      public static int constructor;
      public ArrayList export_card = new ArrayList();

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.User.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = this.export_card.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            var1.writeInt32((Integer)this.export_card.get(var3));
         }

      }
   }

   public static class TL_contacts_importContacts extends TLObject {
      public static int constructor;
      public ArrayList contacts = new ArrayList();

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_contacts_importedContacts.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = this.contacts.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.TL_inputPhoneContact)this.contacts.get(var3)).serializeToStream(var1);
         }

      }
   }

   public static class TL_contacts_importedContacts extends TLObject {
      public static int constructor;
      public ArrayList imported = new ArrayList();
      public ArrayList popular_invites = new ArrayList();
      public ArrayList retry_contacts = new ArrayList();
      public ArrayList users = new ArrayList();

      public static TLRPC.TL_contacts_importedContacts TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_contacts_importedContacts", var1));
            }
         } else {
            TLRPC.TL_contacts_importedContacts var3 = new TLRPC.TL_contacts_importedContacts();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         int var3 = var1.readInt32(var2);
         byte var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            int var5 = var1.readInt32(var2);

            for(var3 = 0; var3 < var5; ++var3) {
               TLRPC.TL_importedContact var6 = TLRPC.TL_importedContact.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               this.imported.add(var6);
            }

            var3 = var1.readInt32(var2);
            if (var3 != 481674261) {
               if (var2) {
                  throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
               }
            } else {
               var5 = var1.readInt32(var2);

               for(var3 = 0; var3 < var5; ++var3) {
                  TLRPC.TL_popularContact var7 = TLRPC.TL_popularContact.TLdeserialize(var1, var1.readInt32(var2), var2);
                  if (var7 == null) {
                     return;
                  }

                  this.popular_invites.add(var7);
               }

               var3 = var1.readInt32(var2);
               if (var3 != 481674261) {
                  if (var2) {
                     throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
                  }
               } else {
                  var5 = var1.readInt32(var2);

                  for(var3 = 0; var3 < var5; ++var3) {
                     this.retry_contacts.add(var1.readInt64(var2));
                  }

                  var3 = var1.readInt32(var2);
                  if (var3 != 481674261) {
                     if (var2) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
                     }
                  } else {
                     var5 = var1.readInt32(var2);

                     for(var3 = var4; var3 < var5; ++var3) {
                        TLRPC.User var8 = TLRPC.User.TLdeserialize(var1, var1.readInt32(var2), var2);
                        if (var8 == null) {
                           return;
                        }

                        this.users.add(var8);
                     }

                  }
               }
            }
         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = this.imported.size();
         var1.writeInt32(var2);
         byte var3 = 0;

         int var4;
         for(var4 = 0; var4 < var2; ++var4) {
            ((TLRPC.TL_importedContact)this.imported.get(var4)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var2 = this.popular_invites.size();
         var1.writeInt32(var2);

         for(var4 = 0; var4 < var2; ++var4) {
            ((TLRPC.TL_popularContact)this.popular_invites.get(var4)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var2 = this.retry_contacts.size();
         var1.writeInt32(var2);

         for(var4 = 0; var4 < var2; ++var4) {
            var1.writeInt64((Long)this.retry_contacts.get(var4));
         }

         var1.writeInt32(481674261);
         var2 = this.users.size();
         var1.writeInt32(var2);

         for(var4 = var3; var4 < var2; ++var4) {
            ((TLRPC.User)this.users.get(var4)).serializeToStream(var1);
         }

      }
   }

   public static class TL_contacts_link extends TLObject {
      public static int constructor;
      public TLRPC.ContactLink foreign_link;
      public TLRPC.ContactLink my_link;
      public TLRPC.User user;

      public static TLRPC.TL_contacts_link TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_contacts_link", var1));
            }
         } else {
            TLRPC.TL_contacts_link var3 = new TLRPC.TL_contacts_link();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.my_link = TLRPC.ContactLink.TLdeserialize(var1, var1.readInt32(var2), var2);
         this.foreign_link = TLRPC.ContactLink.TLdeserialize(var1, var1.readInt32(var2), var2);
         this.user = TLRPC.User.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.my_link.serializeToStream(var1);
         this.foreign_link.serializeToStream(var1);
         this.user.serializeToStream(var1);
      }
   }

   public static class TL_contacts_resetSaved extends TLObject {
      public static int constructor;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_contacts_resetTopPeerRating extends TLObject {
      public static int constructor;
      public TLRPC.TopPeerCategory category;
      public TLRPC.InputPeer peer;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.category.serializeToStream(var1);
         this.peer.serializeToStream(var1);
      }
   }

   public static class TL_contacts_resolveUsername extends TLObject {
      public static int constructor;
      public String username;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_contacts_resolvedPeer.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.username);
      }
   }

   public static class TL_contacts_resolvedPeer extends TLObject {
      public static int constructor;
      public ArrayList chats = new ArrayList();
      public TLRPC.Peer peer;
      public ArrayList users = new ArrayList();

      public static TLRPC.TL_contacts_resolvedPeer TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_contacts_resolvedPeer", var1));
            }
         } else {
            TLRPC.TL_contacts_resolvedPeer var3 = new TLRPC.TL_contacts_resolvedPeer();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.peer = TLRPC.Peer.TLdeserialize(var1, var1.readInt32(var2), var2);
         int var3 = var1.readInt32(var2);
         byte var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            int var5 = var1.readInt32(var2);

            for(var3 = 0; var3 < var5; ++var3) {
               TLRPC.Chat var6 = TLRPC.Chat.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               this.chats.add(var6);
            }

            var3 = var1.readInt32(var2);
            if (var3 != 481674261) {
               if (var2) {
                  throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
               }
            } else {
               var5 = var1.readInt32(var2);

               for(var3 = var4; var3 < var5; ++var3) {
                  TLRPC.User var7 = TLRPC.User.TLdeserialize(var1, var1.readInt32(var2), var2);
                  if (var7 == null) {
                     return;
                  }

                  this.users.add(var7);
               }

            }
         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.peer.serializeToStream(var1);
         var1.writeInt32(481674261);
         int var2 = this.chats.size();
         var1.writeInt32(var2);
         byte var3 = 0;

         int var4;
         for(var4 = 0; var4 < var2; ++var4) {
            ((TLRPC.Chat)this.chats.get(var4)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var2 = this.users.size();
         var1.writeInt32(var2);

         for(var4 = var3; var4 < var2; ++var4) {
            ((TLRPC.User)this.users.get(var4)).serializeToStream(var1);
         }

      }
   }

   public static class TL_contacts_search extends TLObject {
      public static int constructor;
      public int limit;
      public String q;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_contacts_found.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.q);
         var1.writeInt32(this.limit);
      }
   }

   public static class TL_contacts_toggleTopPeers extends TLObject {
      public static int constructor;
      public boolean enabled;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeBool(this.enabled);
      }
   }

   public static class TL_contacts_topPeers extends TLRPC.contacts_TopPeers {
      public static int constructor;
      public ArrayList categories = new ArrayList();
      public ArrayList chats = new ArrayList();
      public ArrayList users = new ArrayList();

      public void readParams(AbstractSerializedData var1, boolean var2) {
         int var3 = var1.readInt32(var2);
         byte var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            int var5 = var1.readInt32(var2);

            for(var3 = 0; var3 < var5; ++var3) {
               TLRPC.TL_topPeerCategoryPeers var6 = TLRPC.TL_topPeerCategoryPeers.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               this.categories.add(var6);
            }

            var3 = var1.readInt32(var2);
            if (var3 != 481674261) {
               if (var2) {
                  throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
               }
            } else {
               var5 = var1.readInt32(var2);

               for(var3 = 0; var3 < var5; ++var3) {
                  TLRPC.Chat var7 = TLRPC.Chat.TLdeserialize(var1, var1.readInt32(var2), var2);
                  if (var7 == null) {
                     return;
                  }

                  this.chats.add(var7);
               }

               var3 = var1.readInt32(var2);
               if (var3 != 481674261) {
                  if (var2) {
                     throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
                  }
               } else {
                  var5 = var1.readInt32(var2);

                  for(var3 = var4; var3 < var5; ++var3) {
                     TLRPC.User var8 = TLRPC.User.TLdeserialize(var1, var1.readInt32(var2), var2);
                     if (var8 == null) {
                        return;
                     }

                     this.users.add(var8);
                  }

               }
            }
         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = this.categories.size();
         var1.writeInt32(var2);
         byte var3 = 0;

         int var4;
         for(var4 = 0; var4 < var2; ++var4) {
            ((TLRPC.TL_topPeerCategoryPeers)this.categories.get(var4)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var2 = this.chats.size();
         var1.writeInt32(var2);

         for(var4 = 0; var4 < var2; ++var4) {
            ((TLRPC.Chat)this.chats.get(var4)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var2 = this.users.size();
         var1.writeInt32(var2);

         for(var4 = var3; var4 < var2; ++var4) {
            ((TLRPC.User)this.users.get(var4)).serializeToStream(var1);
         }

      }
   }

   public static class TL_contacts_topPeersDisabled extends TLRPC.contacts_TopPeers {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_contacts_topPeersNotModified extends TLRPC.contacts_TopPeers {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_contacts_unblock extends TLObject {
      public static int constructor;
      public TLRPC.InputUser id;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.id.serializeToStream(var1);
      }
   }

   public static class TL_dataJSON extends TLObject {
      public static int constructor;
      public String data;

      public static TLRPC.TL_dataJSON TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_dataJSON", var1));
            }
         } else {
            TLRPC.TL_dataJSON var3 = new TLRPC.TL_dataJSON();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.data = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.data);
      }
   }

   public static class TL_dcOption extends TLObject {
      public static int constructor;
      public boolean cdn;
      public int flags;
      public int id;
      public String ip_address;
      public boolean ipv6;
      public boolean isStatic;
      public boolean media_only;
      public int port;
      public byte[] secret;
      public boolean tcpo_only;

      public static TLRPC.TL_dcOption TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_dcOption", var1));
            }
         } else {
            TLRPC.TL_dcOption var3 = new TLRPC.TL_dcOption();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.flags = var1.readInt32(var2);
         int var3 = this.flags;
         boolean var4 = true;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.ipv6 = var5;
         if ((this.flags & 2) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.media_only = var5;
         if ((this.flags & 4) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.tcpo_only = var5;
         if ((this.flags & 8) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.cdn = var5;
         if ((this.flags & 16) != 0) {
            var5 = var4;
         } else {
            var5 = false;
         }

         this.isStatic = var5;
         this.id = var1.readInt32(var2);
         this.ip_address = var1.readString(var2);
         this.port = var1.readInt32(var2);
         if ((this.flags & 1024) != 0) {
            this.secret = var1.readByteArray(var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.ipv6) {
            var2 = this.flags | 1;
         } else {
            var2 = this.flags & -2;
         }

         this.flags = var2;
         if (this.media_only) {
            var2 = this.flags | 2;
         } else {
            var2 = this.flags & -3;
         }

         this.flags = var2;
         if (this.tcpo_only) {
            var2 = this.flags | 4;
         } else {
            var2 = this.flags & -5;
         }

         this.flags = var2;
         if (this.cdn) {
            var2 = this.flags | 8;
         } else {
            var2 = this.flags & -9;
         }

         this.flags = var2;
         if (this.isStatic) {
            var2 = this.flags | 16;
         } else {
            var2 = this.flags & -17;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         var1.writeInt32(this.id);
         var1.writeString(this.ip_address);
         var1.writeInt32(this.port);
         if ((this.flags & 1024) != 0) {
            var1.writeByteArray(this.secret);
         }

      }
   }

   public static class TL_decryptedMessage extends TLRPC.DecryptedMessage {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         super.random_id = var1.readInt64(var2);
         super.ttl = var1.readInt32(var2);
         super.message = var1.readString(var2);
         if ((super.flags & 512) != 0) {
            super.media = TLRPC.DecryptedMessageMedia.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         if ((super.flags & 128) != 0) {
            int var3 = var1.readInt32(var2);
            int var4 = 0;
            if (var3 != 481674261) {
               if (!var2) {
                  return;
               }

               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }

            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.MessageEntity var5 = TLRPC.MessageEntity.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               super.entities.add(var5);
            }
         }

         if ((super.flags & 2048) != 0) {
            super.via_bot_name = var1.readString(var2);
         }

         if ((super.flags & 8) != 0) {
            super.reply_to_random_id = var1.readInt64(var2);
         }

         if ((super.flags & 131072) != 0) {
            super.grouped_id = var1.readInt64(var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.flags);
         var1.writeInt64(super.random_id);
         var1.writeInt32(super.ttl);
         var1.writeString(super.message);
         if ((super.flags & 512) != 0) {
            super.media.serializeToStream(var1);
         }

         if ((super.flags & 128) != 0) {
            var1.writeInt32(481674261);
            int var2 = super.entities.size();
            var1.writeInt32(var2);

            for(int var3 = 0; var3 < var2; ++var3) {
               ((TLRPC.MessageEntity)super.entities.get(var3)).serializeToStream(var1);
            }
         }

         if ((super.flags & 2048) != 0) {
            var1.writeString(super.via_bot_name);
         }

         if ((super.flags & 8) != 0) {
            var1.writeInt64(super.reply_to_random_id);
         }

         if ((super.flags & 131072) != 0) {
            var1.writeInt64(super.grouped_id);
         }

      }
   }

   public static class TL_decryptedMessageActionAbortKey extends TLRPC.DecryptedMessageAction {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.exchange_id = var1.readInt64(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(super.exchange_id);
      }
   }

   public static class TL_decryptedMessageActionAcceptKey extends TLRPC.DecryptedMessageAction {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.exchange_id = var1.readInt64(var2);
         super.g_b = var1.readByteArray(var2);
         super.key_fingerprint = var1.readInt64(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(super.exchange_id);
         var1.writeByteArray(super.g_b);
         var1.writeInt64(super.key_fingerprint);
      }
   }

   public static class TL_decryptedMessageActionCommitKey extends TLRPC.DecryptedMessageAction {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.exchange_id = var1.readInt64(var2);
         super.key_fingerprint = var1.readInt64(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(super.exchange_id);
         var1.writeInt64(super.key_fingerprint);
      }
   }

   public static class TL_decryptedMessageActionDeleteMessages extends TLRPC.DecryptedMessageAction {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               super.random_ids.add(var1.readInt64(var2));
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = super.random_ids.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            var1.writeInt64((Long)super.random_ids.get(var3));
         }

      }
   }

   public static class TL_decryptedMessageActionFlushHistory extends TLRPC.DecryptedMessageAction {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_decryptedMessageActionNoop extends TLRPC.DecryptedMessageAction {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_decryptedMessageActionNotifyLayer extends TLRPC.DecryptedMessageAction {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.layer = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.layer);
      }
   }

   public static class TL_decryptedMessageActionReadMessages extends TLRPC.DecryptedMessageAction {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               super.random_ids.add(var1.readInt64(var2));
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = super.random_ids.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            var1.writeInt64((Long)super.random_ids.get(var3));
         }

      }
   }

   public static class TL_decryptedMessageActionRequestKey extends TLRPC.DecryptedMessageAction {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.exchange_id = var1.readInt64(var2);
         super.g_a = var1.readByteArray(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(super.exchange_id);
         var1.writeByteArray(super.g_a);
      }
   }

   public static class TL_decryptedMessageActionResend extends TLRPC.DecryptedMessageAction {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.start_seq_no = var1.readInt32(var2);
         super.end_seq_no = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.start_seq_no);
         var1.writeInt32(super.end_seq_no);
      }
   }

   public static class TL_decryptedMessageActionScreenshotMessages extends TLRPC.DecryptedMessageAction {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               super.random_ids.add(var1.readInt64(var2));
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = super.random_ids.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            var1.writeInt64((Long)super.random_ids.get(var3));
         }

      }
   }

   public static class TL_decryptedMessageActionSetMessageTTL extends TLRPC.DecryptedMessageAction {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.ttl_seconds = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.ttl_seconds);
      }
   }

   public static class TL_decryptedMessageActionTyping extends TLRPC.DecryptedMessageAction {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.action = TLRPC.SendMessageAction.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         super.action.serializeToStream(var1);
      }
   }

   public static class TL_decryptedMessageLayer extends TLObject {
      public static int constructor;
      public int in_seq_no;
      public int layer;
      public TLRPC.DecryptedMessage message;
      public int out_seq_no;
      public byte[] random_bytes;

      public static TLRPC.TL_decryptedMessageLayer TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_decryptedMessageLayer", var1));
            }
         } else {
            TLRPC.TL_decryptedMessageLayer var3 = new TLRPC.TL_decryptedMessageLayer();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.random_bytes = var1.readByteArray(var2);
         this.layer = var1.readInt32(var2);
         this.in_seq_no = var1.readInt32(var2);
         this.out_seq_no = var1.readInt32(var2);
         this.message = TLRPC.DecryptedMessage.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeByteArray(this.random_bytes);
         var1.writeInt32(this.layer);
         var1.writeInt32(this.in_seq_no);
         var1.writeInt32(this.out_seq_no);
         this.message.serializeToStream(var1);
      }
   }

   public static class TL_decryptedMessageMediaAudio extends TLRPC.DecryptedMessageMedia {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.duration = var1.readInt32(var2);
         super.mime_type = var1.readString(var2);
         super.size = var1.readInt32(var2);
         super.key = var1.readByteArray(var2);
         super.iv = var1.readByteArray(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.duration);
         var1.writeString(super.mime_type);
         var1.writeInt32(super.size);
         var1.writeByteArray(super.key);
         var1.writeByteArray(super.iv);
      }
   }

   public static class TL_decryptedMessageMediaAudio_layer8 extends TLRPC.TL_decryptedMessageMediaAudio {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.duration = var1.readInt32(var2);
         super.size = var1.readInt32(var2);
         super.key = var1.readByteArray(var2);
         super.iv = var1.readByteArray(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.duration);
         var1.writeInt32(super.size);
         var1.writeByteArray(super.key);
         var1.writeByteArray(super.iv);
      }
   }

   public static class TL_decryptedMessageMediaContact extends TLRPC.DecryptedMessageMedia {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.phone_number = var1.readString(var2);
         super.first_name = var1.readString(var2);
         super.last_name = var1.readString(var2);
         super.user_id = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(super.phone_number);
         var1.writeString(super.first_name);
         var1.writeString(super.last_name);
         var1.writeInt32(super.user_id);
      }
   }

   public static class TL_decryptedMessageMediaDocument extends TLRPC.DecryptedMessageMedia {
      public static int constructor;
      public byte[] thumb;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.thumb = var1.readByteArray(var2);
         super.thumb_w = var1.readInt32(var2);
         super.thumb_h = var1.readInt32(var2);
         super.mime_type = var1.readString(var2);
         super.size = var1.readInt32(var2);
         super.key = var1.readByteArray(var2);
         super.iv = var1.readByteArray(var2);
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.DocumentAttribute var5 = TLRPC.DocumentAttribute.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               super.attributes.add(var5);
            }

            super.caption = var1.readString(var2);
         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeByteArray(this.thumb);
         var1.writeInt32(super.thumb_w);
         var1.writeInt32(super.thumb_h);
         var1.writeString(super.mime_type);
         var1.writeInt32(super.size);
         var1.writeByteArray(super.key);
         var1.writeByteArray(super.iv);
         var1.writeInt32(481674261);
         int var2 = super.attributes.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.DocumentAttribute)super.attributes.get(var3)).serializeToStream(var1);
         }

         var1.writeString(super.caption);
      }
   }

   public static class TL_decryptedMessageMediaDocument_layer8 extends TLRPC.TL_decryptedMessageMediaDocument {
      public static int constructor;
      public byte[] thumb;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.thumb = var1.readByteArray(var2);
         super.thumb_w = var1.readInt32(var2);
         super.thumb_h = var1.readInt32(var2);
         super.file_name = var1.readString(var2);
         super.mime_type = var1.readString(var2);
         super.size = var1.readInt32(var2);
         super.key = var1.readByteArray(var2);
         super.iv = var1.readByteArray(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeByteArray(this.thumb);
         var1.writeInt32(super.thumb_w);
         var1.writeInt32(super.thumb_h);
         var1.writeString(super.file_name);
         var1.writeString(super.mime_type);
         var1.writeInt32(super.size);
         var1.writeByteArray(super.key);
         var1.writeByteArray(super.iv);
      }
   }

   public static class TL_decryptedMessageMediaEmpty extends TLRPC.DecryptedMessageMedia {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_decryptedMessageMediaExternalDocument extends TLRPC.DecryptedMessageMedia {
      public static int constructor;
      public TLRPC.PhotoSize thumb;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt64(var2);
         super.access_hash = var1.readInt64(var2);
         super.date = var1.readInt32(var2);
         super.mime_type = var1.readString(var2);
         super.size = var1.readInt32(var2);
         this.thumb = TLRPC.PhotoSize.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.dc_id = var1.readInt32(var2);
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.DocumentAttribute var5 = TLRPC.DocumentAttribute.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               super.attributes.add(var5);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(super.id);
         var1.writeInt64(super.access_hash);
         var1.writeInt32(super.date);
         var1.writeString(super.mime_type);
         var1.writeInt32(super.size);
         this.thumb.serializeToStream(var1);
         var1.writeInt32(super.dc_id);
         var1.writeInt32(481674261);
         int var2 = super.attributes.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.DocumentAttribute)super.attributes.get(var3)).serializeToStream(var1);
         }

      }
   }

   public static class TL_decryptedMessageMediaGeoPoint extends TLRPC.DecryptedMessageMedia {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.lat = var1.readDouble(var2);
         super._long = var1.readDouble(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeDouble(super.lat);
         var1.writeDouble(super._long);
      }
   }

   public static class TL_decryptedMessageMediaPhoto extends TLRPC.DecryptedMessageMedia {
      public static int constructor;
      public byte[] thumb;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.thumb = var1.readByteArray(var2);
         super.thumb_w = var1.readInt32(var2);
         super.thumb_h = var1.readInt32(var2);
         super.w = var1.readInt32(var2);
         super.h = var1.readInt32(var2);
         super.size = var1.readInt32(var2);
         super.key = var1.readByteArray(var2);
         super.iv = var1.readByteArray(var2);
         super.caption = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeByteArray(this.thumb);
         var1.writeInt32(super.thumb_w);
         var1.writeInt32(super.thumb_h);
         var1.writeInt32(super.w);
         var1.writeInt32(super.h);
         var1.writeInt32(super.size);
         var1.writeByteArray(super.key);
         var1.writeByteArray(super.iv);
         var1.writeString(super.caption);
      }
   }

   public static class TL_decryptedMessageMediaPhoto_layer8 extends TLRPC.TL_decryptedMessageMediaPhoto {
      public static int constructor;
      public byte[] thumb;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.thumb = var1.readByteArray(var2);
         super.thumb_w = var1.readInt32(var2);
         super.thumb_h = var1.readInt32(var2);
         super.w = var1.readInt32(var2);
         super.h = var1.readInt32(var2);
         super.size = var1.readInt32(var2);
         super.key = var1.readByteArray(var2);
         super.iv = var1.readByteArray(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeByteArray(this.thumb);
         var1.writeInt32(super.thumb_w);
         var1.writeInt32(super.thumb_h);
         var1.writeInt32(super.w);
         var1.writeInt32(super.h);
         var1.writeInt32(super.size);
         var1.writeByteArray(super.key);
         var1.writeByteArray(super.iv);
      }
   }

   public static class TL_decryptedMessageMediaVenue extends TLRPC.DecryptedMessageMedia {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.lat = var1.readDouble(var2);
         super._long = var1.readDouble(var2);
         super.title = var1.readString(var2);
         super.address = var1.readString(var2);
         super.provider = var1.readString(var2);
         super.venue_id = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeDouble(super.lat);
         var1.writeDouble(super._long);
         var1.writeString(super.title);
         var1.writeString(super.address);
         var1.writeString(super.provider);
         var1.writeString(super.venue_id);
      }
   }

   public static class TL_decryptedMessageMediaVideo extends TLRPC.DecryptedMessageMedia {
      public static int constructor;
      public byte[] thumb;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.thumb = var1.readByteArray(var2);
         super.thumb_w = var1.readInt32(var2);
         super.thumb_h = var1.readInt32(var2);
         super.duration = var1.readInt32(var2);
         super.mime_type = var1.readString(var2);
         super.w = var1.readInt32(var2);
         super.h = var1.readInt32(var2);
         super.size = var1.readInt32(var2);
         super.key = var1.readByteArray(var2);
         super.iv = var1.readByteArray(var2);
         super.caption = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeByteArray(this.thumb);
         var1.writeInt32(super.thumb_w);
         var1.writeInt32(super.thumb_h);
         var1.writeInt32(super.duration);
         var1.writeString(super.mime_type);
         var1.writeInt32(super.w);
         var1.writeInt32(super.h);
         var1.writeInt32(super.size);
         var1.writeByteArray(super.key);
         var1.writeByteArray(super.iv);
         var1.writeString(super.caption);
      }
   }

   public static class TL_decryptedMessageMediaVideo_layer17 extends TLRPC.TL_decryptedMessageMediaVideo {
      public static int constructor;
      public byte[] thumb;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.thumb = var1.readByteArray(var2);
         super.thumb_w = var1.readInt32(var2);
         super.thumb_h = var1.readInt32(var2);
         super.duration = var1.readInt32(var2);
         super.mime_type = var1.readString(var2);
         super.w = var1.readInt32(var2);
         super.h = var1.readInt32(var2);
         super.size = var1.readInt32(var2);
         super.key = var1.readByteArray(var2);
         super.iv = var1.readByteArray(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeByteArray(this.thumb);
         var1.writeInt32(super.thumb_w);
         var1.writeInt32(super.thumb_h);
         var1.writeInt32(super.duration);
         var1.writeString(super.mime_type);
         var1.writeInt32(super.w);
         var1.writeInt32(super.h);
         var1.writeInt32(super.size);
         var1.writeByteArray(super.key);
         var1.writeByteArray(super.iv);
      }
   }

   public static class TL_decryptedMessageMediaVideo_layer8 extends TLRPC.TL_decryptedMessageMediaVideo {
      public static int constructor;
      public byte[] thumb;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.thumb = var1.readByteArray(var2);
         super.thumb_w = var1.readInt32(var2);
         super.thumb_h = var1.readInt32(var2);
         super.duration = var1.readInt32(var2);
         super.w = var1.readInt32(var2);
         super.h = var1.readInt32(var2);
         super.size = var1.readInt32(var2);
         super.key = var1.readByteArray(var2);
         super.iv = var1.readByteArray(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeByteArray(this.thumb);
         var1.writeInt32(super.thumb_w);
         var1.writeInt32(super.thumb_h);
         var1.writeInt32(super.duration);
         var1.writeInt32(super.w);
         var1.writeInt32(super.h);
         var1.writeInt32(super.size);
         var1.writeByteArray(super.key);
         var1.writeByteArray(super.iv);
      }
   }

   public static class TL_decryptedMessageMediaWebPage extends TLRPC.DecryptedMessageMedia {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.url = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(super.url);
      }
   }

   public static class TL_decryptedMessageService extends TLRPC.DecryptedMessage {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.random_id = var1.readInt64(var2);
         super.action = TLRPC.DecryptedMessageAction.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(super.random_id);
         super.action.serializeToStream(var1);
      }
   }

   public static class TL_decryptedMessageService_layer8 extends TLRPC.TL_decryptedMessageService {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.random_id = var1.readInt64(var2);
         super.random_bytes = var1.readByteArray(var2);
         super.action = TLRPC.DecryptedMessageAction.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(super.random_id);
         var1.writeByteArray(super.random_bytes);
         super.action.serializeToStream(var1);
      }
   }

   public static class TL_decryptedMessage_layer17 extends TLRPC.TL_decryptedMessage {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.random_id = var1.readInt64(var2);
         super.ttl = var1.readInt32(var2);
         super.message = var1.readString(var2);
         super.media = TLRPC.DecryptedMessageMedia.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(super.random_id);
         var1.writeInt32(super.ttl);
         var1.writeString(super.message);
         super.media.serializeToStream(var1);
      }
   }

   public static class TL_decryptedMessage_layer45 extends TLRPC.TL_decryptedMessage {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         super.random_id = var1.readInt64(var2);
         super.ttl = var1.readInt32(var2);
         super.message = var1.readString(var2);
         if ((super.flags & 512) != 0) {
            super.media = TLRPC.DecryptedMessageMedia.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         if ((super.flags & 128) != 0) {
            int var3 = var1.readInt32(var2);
            int var4 = 0;
            if (var3 != 481674261) {
               if (!var2) {
                  return;
               }

               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }

            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.MessageEntity var5 = TLRPC.MessageEntity.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               super.entities.add(var5);
            }
         }

         if ((super.flags & 2048) != 0) {
            super.via_bot_name = var1.readString(var2);
         }

         if ((super.flags & 8) != 0) {
            super.reply_to_random_id = var1.readInt64(var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.flags);
         var1.writeInt64(super.random_id);
         var1.writeInt32(super.ttl);
         var1.writeString(super.message);
         if ((super.flags & 512) != 0) {
            super.media.serializeToStream(var1);
         }

         if ((super.flags & 128) != 0) {
            var1.writeInt32(481674261);
            int var2 = super.entities.size();
            var1.writeInt32(var2);

            for(int var3 = 0; var3 < var2; ++var3) {
               ((TLRPC.MessageEntity)super.entities.get(var3)).serializeToStream(var1);
            }
         }

         if ((super.flags & 2048) != 0) {
            var1.writeString(super.via_bot_name);
         }

         if ((super.flags & 8) != 0) {
            var1.writeInt64(super.reply_to_random_id);
         }

      }
   }

   public static class TL_decryptedMessage_layer8 extends TLRPC.TL_decryptedMessage {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.random_id = var1.readInt64(var2);
         super.random_bytes = var1.readByteArray(var2);
         super.message = var1.readString(var2);
         super.media = TLRPC.DecryptedMessageMedia.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(super.random_id);
         var1.writeByteArray(super.random_bytes);
         var1.writeString(super.message);
         super.media.serializeToStream(var1);
      }
   }

   public static class TL_dialog extends TLRPC.Dialog {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         boolean var4 = false;
         boolean var5;
         if ((var3 & 4) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.pinned = var5;
         var5 = var4;
         if ((super.flags & 8) != 0) {
            var5 = true;
         }

         super.unread_mark = var5;
         super.peer = TLRPC.Peer.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.top_message = var1.readInt32(var2);
         super.read_inbox_max_id = var1.readInt32(var2);
         super.read_outbox_max_id = var1.readInt32(var2);
         super.unread_count = var1.readInt32(var2);
         super.unread_mentions_count = var1.readInt32(var2);
         super.notify_settings = TLRPC.PeerNotifySettings.TLdeserialize(var1, var1.readInt32(var2), var2);
         if ((super.flags & 1) != 0) {
            super.pts = var1.readInt32(var2);
         }

         if ((super.flags & 2) != 0) {
            super.draft = TLRPC.DraftMessage.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         if ((super.flags & 16) != 0) {
            super.folder_id = var1.readInt32(var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.pinned) {
            var2 = super.flags | 4;
         } else {
            var2 = super.flags & -5;
         }

         super.flags = var2;
         if (super.unread_mark) {
            var2 = super.flags | 8;
         } else {
            var2 = super.flags & -9;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         super.peer.serializeToStream(var1);
         var1.writeInt32(super.top_message);
         var1.writeInt32(super.read_inbox_max_id);
         var1.writeInt32(super.read_outbox_max_id);
         var1.writeInt32(super.unread_count);
         var1.writeInt32(super.unread_mentions_count);
         super.notify_settings.serializeToStream(var1);
         if ((super.flags & 1) != 0) {
            var1.writeInt32(super.pts);
         }

         if ((super.flags & 2) != 0) {
            super.draft.serializeToStream(var1);
         }

         if ((super.flags & 16) != 0) {
            var1.writeInt32(super.folder_id);
         }

      }
   }

   public static class TL_dialogFolder extends TLRPC.Dialog {
      public static int constructor;
      public TLRPC.TL_folder folder;
      public int unread_muted_messages_count;
      public int unread_muted_peers_count;
      public int unread_unmuted_messages_count;
      public int unread_unmuted_peers_count;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         boolean var3;
         if ((super.flags & 4) != 0) {
            var3 = true;
         } else {
            var3 = false;
         }

         super.pinned = var3;
         this.folder = TLRPC.TL_folder.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.peer = TLRPC.Peer.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.top_message = var1.readInt32(var2);
         this.unread_muted_peers_count = var1.readInt32(var2);
         this.unread_unmuted_peers_count = var1.readInt32(var2);
         this.unread_muted_messages_count = var1.readInt32(var2);
         this.unread_unmuted_messages_count = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.pinned) {
            var2 = super.flags | 4;
         } else {
            var2 = super.flags & -5;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         this.folder.serializeToStream(var1);
         super.peer.serializeToStream(var1);
         var1.writeInt32(super.top_message);
         var1.writeInt32(this.unread_muted_peers_count);
         var1.writeInt32(this.unread_unmuted_peers_count);
         var1.writeInt32(this.unread_muted_messages_count);
         var1.writeInt32(this.unread_unmuted_messages_count);
      }
   }

   public static class TL_dialogPeer extends TLRPC.DialogPeer {
      public static int constructor;
      public TLRPC.Peer peer;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.peer = TLRPC.Peer.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.peer.serializeToStream(var1);
      }
   }

   public static class TL_dialogPeerFolder extends TLRPC.DialogPeer {
      public static int constructor;
      public int folder_id;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.folder_id = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.folder_id);
      }
   }

   public static class TL_document extends TLRPC.Document {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         super.id = var1.readInt64(var2);
         super.access_hash = var1.readInt64(var2);
         super.file_reference = var1.readByteArray(var2);
         super.date = var1.readInt32(var2);
         super.mime_type = var1.readString(var2);
         super.size = var1.readInt32(var2);
         int var3 = super.flags;
         byte var4 = 0;
         int var5;
         if ((var3 & 1) != 0) {
            var3 = var1.readInt32(var2);
            if (var3 != 481674261) {
               if (!var2) {
                  return;
               }

               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }

            var5 = var1.readInt32(var2);

            for(var3 = 0; var3 < var5; ++var3) {
               TLRPC.PhotoSize var6 = TLRPC.PhotoSize.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               super.thumbs.add(var6);
            }
         }

         super.dc_id = var1.readInt32(var2);
         var3 = var1.readInt32(var2);
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            var5 = var1.readInt32(var2);

            for(var3 = var4; var3 < var5; ++var3) {
               TLRPC.DocumentAttribute var7 = TLRPC.DocumentAttribute.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var7 == null) {
                  return;
               }

               super.attributes.add(var7);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.flags);
         var1.writeInt64(super.id);
         var1.writeInt64(super.access_hash);
         var1.writeByteArray(super.file_reference);
         var1.writeInt32(super.date);
         var1.writeString(super.mime_type);
         var1.writeInt32(super.size);
         int var2 = super.flags;
         byte var3 = 0;
         int var4;
         if ((var2 & 1) != 0) {
            var1.writeInt32(481674261);
            var4 = super.thumbs.size();
            var1.writeInt32(var4);

            for(var2 = 0; var2 < var4; ++var2) {
               ((TLRPC.PhotoSize)super.thumbs.get(var2)).serializeToStream(var1);
            }
         }

         var1.writeInt32(super.dc_id);
         var1.writeInt32(481674261);
         var4 = super.attributes.size();
         var1.writeInt32(var4);

         for(var2 = var3; var2 < var4; ++var2) {
            ((TLRPC.DocumentAttribute)super.attributes.get(var2)).serializeToStream(var1);
         }

      }
   }

   public static class TL_documentAttributeAnimated extends TLRPC.DocumentAttribute {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_documentAttributeAudio extends TLRPC.DocumentAttribute {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         boolean var3;
         if ((super.flags & 1024) != 0) {
            var3 = true;
         } else {
            var3 = false;
         }

         super.voice = var3;
         super.duration = var1.readInt32(var2);
         if ((super.flags & 1) != 0) {
            super.title = var1.readString(var2);
         }

         if ((super.flags & 2) != 0) {
            super.performer = var1.readString(var2);
         }

         if ((super.flags & 4) != 0) {
            super.waveform = var1.readByteArray(var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.voice) {
            var2 = super.flags | 1024;
         } else {
            var2 = super.flags & -1025;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt32(super.duration);
         if ((super.flags & 1) != 0) {
            var1.writeString(super.title);
         }

         if ((super.flags & 2) != 0) {
            var1.writeString(super.performer);
         }

         if ((super.flags & 4) != 0) {
            var1.writeByteArray(super.waveform);
         }

      }
   }

   public static class TL_documentAttributeAudio_layer45 extends TLRPC.TL_documentAttributeAudio {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.duration = var1.readInt32(var2);
         super.title = var1.readString(var2);
         super.performer = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.duration);
         var1.writeString(super.title);
         var1.writeString(super.performer);
      }
   }

   public static class TL_documentAttributeAudio_old extends TLRPC.TL_documentAttributeAudio {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.duration = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.duration);
      }
   }

   public static class TL_documentAttributeFilename extends TLRPC.DocumentAttribute {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.file_name = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(super.file_name);
      }
   }

   public static class TL_documentAttributeHasStickers extends TLRPC.DocumentAttribute {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_documentAttributeImageSize extends TLRPC.DocumentAttribute {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.w = var1.readInt32(var2);
         super.h = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.w);
         var1.writeInt32(super.h);
      }
   }

   public static class TL_documentAttributeSticker extends TLRPC.DocumentAttribute {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         boolean var3;
         if ((super.flags & 2) != 0) {
            var3 = true;
         } else {
            var3 = false;
         }

         super.mask = var3;
         super.alt = var1.readString(var2);
         super.stickerset = TLRPC.InputStickerSet.TLdeserialize(var1, var1.readInt32(var2), var2);
         if ((super.flags & 1) != 0) {
            super.mask_coords = TLRPC.TL_maskCoords.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.mask) {
            var2 = super.flags | 2;
         } else {
            var2 = super.flags & -3;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeString(super.alt);
         super.stickerset.serializeToStream(var1);
         if ((super.flags & 1) != 0) {
            super.mask_coords.serializeToStream(var1);
         }

      }
   }

   public static class TL_documentAttributeSticker_layer55 extends TLRPC.TL_documentAttributeSticker {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.alt = var1.readString(var2);
         super.stickerset = TLRPC.InputStickerSet.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(super.alt);
         super.stickerset.serializeToStream(var1);
      }
   }

   public static class TL_documentAttributeSticker_old extends TLRPC.TL_documentAttributeSticker {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_documentAttributeSticker_old2 extends TLRPC.TL_documentAttributeSticker {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.alt = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(super.alt);
      }
   }

   public static class TL_documentAttributeVideo extends TLRPC.DocumentAttribute {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         boolean var4 = true;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.round_message = var5;
         if ((super.flags & 2) != 0) {
            var5 = var4;
         } else {
            var5 = false;
         }

         super.supports_streaming = var5;
         super.duration = var1.readInt32(var2);
         super.w = var1.readInt32(var2);
         super.h = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.round_message) {
            var2 = super.flags | 1;
         } else {
            var2 = super.flags & -2;
         }

         super.flags = var2;
         if (super.supports_streaming) {
            var2 = super.flags | 2;
         } else {
            var2 = super.flags & -3;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt32(super.duration);
         var1.writeInt32(super.w);
         var1.writeInt32(super.h);
      }
   }

   public static class TL_documentAttributeVideo_layer65 extends TLRPC.TL_documentAttributeVideo {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.duration = var1.readInt32(var2);
         super.w = var1.readInt32(var2);
         super.h = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.duration);
         var1.writeInt32(super.w);
         var1.writeInt32(super.h);
      }
   }

   public static class TL_documentEmpty extends TLRPC.Document {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt64(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(super.id);
      }
   }

   public static class TL_documentEncrypted extends TLRPC.Document {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt64(var2);
         super.access_hash = var1.readInt64(var2);
         super.date = var1.readInt32(var2);
         super.mime_type = var1.readString(var2);
         super.size = var1.readInt32(var2);
         super.thumbs.add(TLRPC.PhotoSize.TLdeserialize(var1, var1.readInt32(var2), var2));
         super.dc_id = var1.readInt32(var2);
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.DocumentAttribute var5 = TLRPC.DocumentAttribute.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               super.attributes.add(var5);
            }

            super.key = var1.readByteArray(var2);
            super.iv = var1.readByteArray(var2);
         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(super.id);
         var1.writeInt64(super.access_hash);
         var1.writeInt32(super.date);
         var1.writeString(super.mime_type);
         var1.writeInt32(super.size);
         ArrayList var2 = super.thumbs;
         int var3 = 0;
         ((TLRPC.PhotoSize)var2.get(0)).serializeToStream(var1);
         var1.writeInt32(super.dc_id);
         var1.writeInt32(481674261);
         int var4 = super.attributes.size();
         var1.writeInt32(var4);

         while(var3 < var4) {
            ((TLRPC.DocumentAttribute)super.attributes.get(var3)).serializeToStream(var1);
            ++var3;
         }

         var1.writeByteArray(super.key);
         var1.writeByteArray(super.iv);
      }
   }

   public static class TL_documentEncrypted_old extends TLRPC.TL_document {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt64(var2);
         super.access_hash = var1.readInt64(var2);
         super.user_id = var1.readInt32(var2);
         super.date = var1.readInt32(var2);
         super.file_name = var1.readString(var2);
         super.mime_type = var1.readString(var2);
         super.size = var1.readInt32(var2);
         super.thumbs.add(TLRPC.PhotoSize.TLdeserialize(var1, var1.readInt32(var2), var2));
         super.dc_id = var1.readInt32(var2);
         super.key = var1.readByteArray(var2);
         super.iv = var1.readByteArray(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(super.id);
         var1.writeInt64(super.access_hash);
         var1.writeInt32(super.user_id);
         var1.writeInt32(super.date);
         var1.writeString(super.file_name);
         var1.writeString(super.mime_type);
         var1.writeInt32(super.size);
         ((TLRPC.PhotoSize)super.thumbs.get(0)).serializeToStream(var1);
         var1.writeInt32(super.dc_id);
         var1.writeByteArray(super.key);
         var1.writeByteArray(super.iv);
      }
   }

   public static class TL_document_layer53 extends TLRPC.TL_document {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt64(var2);
         super.access_hash = var1.readInt64(var2);
         super.date = var1.readInt32(var2);
         super.mime_type = var1.readString(var2);
         super.size = var1.readInt32(var2);
         super.thumbs.add(TLRPC.PhotoSize.TLdeserialize(var1, var1.readInt32(var2), var2));
         super.dc_id = var1.readInt32(var2);
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.DocumentAttribute var5 = TLRPC.DocumentAttribute.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               super.attributes.add(var5);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(super.id);
         var1.writeInt64(super.access_hash);
         var1.writeInt32(super.date);
         var1.writeString(super.mime_type);
         var1.writeInt32(super.size);
         ArrayList var2 = super.thumbs;
         int var3 = 0;
         ((TLRPC.PhotoSize)var2.get(0)).serializeToStream(var1);
         var1.writeInt32(super.dc_id);
         var1.writeInt32(481674261);
         int var4 = super.attributes.size();
         var1.writeInt32(var4);

         while(var3 < var4) {
            ((TLRPC.DocumentAttribute)super.attributes.get(var3)).serializeToStream(var1);
            ++var3;
         }

      }
   }

   public static class TL_document_layer82 extends TLRPC.TL_document {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt64(var2);
         super.access_hash = var1.readInt64(var2);
         super.date = var1.readInt32(var2);
         super.mime_type = var1.readString(var2);
         super.size = var1.readInt32(var2);
         super.thumbs.add(TLRPC.PhotoSize.TLdeserialize(var1, var1.readInt32(var2), var2));
         super.dc_id = var1.readInt32(var2);
         var1.readInt32(var2);
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.DocumentAttribute var5 = TLRPC.DocumentAttribute.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               super.attributes.add(var5);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(super.id);
         var1.writeInt64(super.access_hash);
         var1.writeInt32(super.date);
         var1.writeString(super.mime_type);
         var1.writeInt32(super.size);
         ArrayList var2 = super.thumbs;
         int var3 = 0;
         ((TLRPC.PhotoSize)var2.get(0)).serializeToStream(var1);
         var1.writeInt32(super.dc_id);
         var1.writeInt32(0);
         var1.writeInt32(481674261);
         int var4 = super.attributes.size();
         var1.writeInt32(var4);

         while(var3 < var4) {
            ((TLRPC.DocumentAttribute)super.attributes.get(var3)).serializeToStream(var1);
            ++var3;
         }

      }
   }

   public static class TL_document_layer92 extends TLRPC.TL_document {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt64(var2);
         super.access_hash = var1.readInt64(var2);
         super.file_reference = var1.readByteArray(var2);
         super.date = var1.readInt32(var2);
         super.mime_type = var1.readString(var2);
         super.size = var1.readInt32(var2);
         super.thumbs.add(TLRPC.PhotoSize.TLdeserialize(var1, var1.readInt32(var2), var2));
         super.dc_id = var1.readInt32(var2);
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.DocumentAttribute var5 = TLRPC.DocumentAttribute.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               super.attributes.add(var5);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(super.id);
         var1.writeInt64(super.access_hash);
         var1.writeByteArray(super.file_reference);
         var1.writeInt32(super.date);
         var1.writeString(super.mime_type);
         var1.writeInt32(super.size);
         ArrayList var2 = super.thumbs;
         int var3 = 0;
         ((TLRPC.PhotoSize)var2.get(0)).serializeToStream(var1);
         var1.writeInt32(super.dc_id);
         var1.writeInt32(481674261);
         int var4 = super.attributes.size();
         var1.writeInt32(var4);

         while(var3 < var4) {
            ((TLRPC.DocumentAttribute)super.attributes.get(var3)).serializeToStream(var1);
            ++var3;
         }

      }
   }

   public static class TL_document_old extends TLRPC.TL_document {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt64(var2);
         super.access_hash = var1.readInt64(var2);
         super.user_id = var1.readInt32(var2);
         super.date = var1.readInt32(var2);
         super.file_name = var1.readString(var2);
         super.mime_type = var1.readString(var2);
         super.size = var1.readInt32(var2);
         super.thumbs.add(TLRPC.PhotoSize.TLdeserialize(var1, var1.readInt32(var2), var2));
         super.dc_id = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(super.id);
         var1.writeInt64(super.access_hash);
         var1.writeInt32(super.user_id);
         var1.writeInt32(super.date);
         var1.writeString(super.file_name);
         var1.writeString(super.mime_type);
         var1.writeInt32(super.size);
         ((TLRPC.PhotoSize)super.thumbs.get(0)).serializeToStream(var1);
         var1.writeInt32(super.dc_id);
      }
   }

   public static class TL_draftMessage extends TLRPC.DraftMessage {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         int var4 = 0;
         boolean var5;
         if ((var3 & 2) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.no_webpage = var5;
         if ((super.flags & 1) != 0) {
            super.reply_to_msg_id = var1.readInt32(var2);
         }

         super.message = var1.readString(var2);
         if ((super.flags & 8) != 0) {
            var3 = var1.readInt32(var2);
            if (var3 != 481674261) {
               if (!var2) {
                  return;
               }

               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }

            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.MessageEntity var6 = TLRPC.MessageEntity.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               super.entities.add(var6);
            }
         }

         super.date = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.no_webpage) {
            var2 = super.flags | 2;
         } else {
            var2 = super.flags & -3;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         if ((super.flags & 1) != 0) {
            var1.writeInt32(super.reply_to_msg_id);
         }

         var1.writeString(super.message);
         if ((super.flags & 8) != 0) {
            var1.writeInt32(481674261);
            int var3 = super.entities.size();
            var1.writeInt32(var3);

            for(var2 = 0; var2 < var3; ++var2) {
               ((TLRPC.MessageEntity)super.entities.get(var2)).serializeToStream(var1);
            }
         }

         var1.writeInt32(super.date);
      }
   }

   public static class TL_draftMessageEmpty extends TLRPC.DraftMessage {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         if ((super.flags & 1) != 0) {
            super.date = var1.readInt32(var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.flags);
         if ((super.flags & 1) != 0) {
            var1.writeInt32(super.date);
         }

      }
   }

   public static class TL_draftMessageEmpty_layer81 extends TLRPC.TL_draftMessageEmpty {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_emojiKeyword extends TLRPC.EmojiKeyword {
      public static int constructor;
      public ArrayList emoticons = new ArrayList();
      public String keyword;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.keyword = var1.readString(var2);
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               this.emoticons.add(var1.readString(var2));
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.keyword);
         var1.writeInt32(481674261);
         int var2 = this.emoticons.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            var1.writeString((String)this.emoticons.get(var3));
         }

      }
   }

   public static class TL_emojiKeywordDeleted extends TLRPC.EmojiKeyword {
      public static int constructor;
      public ArrayList emoticons = new ArrayList();
      public String keyword;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.keyword = var1.readString(var2);
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               this.emoticons.add(var1.readString(var2));
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.keyword);
         var1.writeInt32(481674261);
         int var2 = this.emoticons.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            var1.writeString((String)this.emoticons.get(var3));
         }

      }
   }

   public static class TL_emojiKeywordsDifference extends TLObject {
      public static int constructor;
      public int from_version;
      public ArrayList keywords = new ArrayList();
      public String lang_code;
      public int version;

      public static TLRPC.TL_emojiKeywordsDifference TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_emojiKeywordsDifference", var1));
            }
         } else {
            TLRPC.TL_emojiKeywordsDifference var3 = new TLRPC.TL_emojiKeywordsDifference();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.lang_code = var1.readString(var2);
         this.from_version = var1.readInt32(var2);
         this.version = var1.readInt32(var2);
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.EmojiKeyword var5 = TLRPC.EmojiKeyword.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               this.keywords.add(var5);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.lang_code);
         var1.writeInt32(this.from_version);
         var1.writeInt32(this.version);
         var1.writeInt32(481674261);
         int var2 = this.keywords.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.EmojiKeyword)this.keywords.get(var3)).serializeToStream(var1);
         }

      }
   }

   public static class TL_emojiLanguage extends TLObject {
      public static int constructor;
      public String lang_code;

      public static TLRPC.TL_emojiLanguage TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_emojiLanguage", var1));
            }
         } else {
            TLRPC.TL_emojiLanguage var3 = new TLRPC.TL_emojiLanguage();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.lang_code = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.lang_code);
      }
   }

   public static class TL_emojiURL extends TLObject {
      public static int constructor;
      public String url;

      public static TLRPC.TL_emojiURL TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_emojiURL", var1));
            }
         } else {
            TLRPC.TL_emojiURL var3 = new TLRPC.TL_emojiURL();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.url = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.url);
      }
   }

   public static class TL_encryptedChat extends TLRPC.EncryptedChat {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt32(var2);
         super.access_hash = var1.readInt64(var2);
         super.date = var1.readInt32(var2);
         super.admin_id = var1.readInt32(var2);
         super.participant_id = var1.readInt32(var2);
         super.g_a_or_b = var1.readByteArray(var2);
         super.key_fingerprint = var1.readInt64(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.id);
         var1.writeInt64(super.access_hash);
         var1.writeInt32(super.date);
         var1.writeInt32(super.admin_id);
         var1.writeInt32(super.participant_id);
         var1.writeByteArray(super.g_a_or_b);
         var1.writeInt64(super.key_fingerprint);
      }
   }

   public static class TL_encryptedChatDiscarded extends TLRPC.EncryptedChat {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.id);
      }
   }

   public static class TL_encryptedChatEmpty extends TLRPC.EncryptedChat {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.id);
      }
   }

   public static class TL_encryptedChatRequested extends TLRPC.EncryptedChat {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt32(var2);
         super.access_hash = var1.readInt64(var2);
         super.date = var1.readInt32(var2);
         super.admin_id = var1.readInt32(var2);
         super.participant_id = var1.readInt32(var2);
         super.g_a = var1.readByteArray(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.id);
         var1.writeInt64(super.access_hash);
         var1.writeInt32(super.date);
         var1.writeInt32(super.admin_id);
         var1.writeInt32(super.participant_id);
         var1.writeByteArray(super.g_a);
      }
   }

   public static class TL_encryptedChatRequested_old extends TLRPC.TL_encryptedChatRequested {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt32(var2);
         super.access_hash = var1.readInt64(var2);
         super.date = var1.readInt32(var2);
         super.admin_id = var1.readInt32(var2);
         super.participant_id = var1.readInt32(var2);
         super.g_a = var1.readByteArray(var2);
         super.nonce = var1.readByteArray(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.id);
         var1.writeInt64(super.access_hash);
         var1.writeInt32(super.date);
         var1.writeInt32(super.admin_id);
         var1.writeInt32(super.participant_id);
         var1.writeByteArray(super.g_a);
         var1.writeByteArray(super.nonce);
      }
   }

   public static class TL_encryptedChatWaiting extends TLRPC.EncryptedChat {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt32(var2);
         super.access_hash = var1.readInt64(var2);
         super.date = var1.readInt32(var2);
         super.admin_id = var1.readInt32(var2);
         super.participant_id = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.id);
         var1.writeInt64(super.access_hash);
         var1.writeInt32(super.date);
         var1.writeInt32(super.admin_id);
         var1.writeInt32(super.participant_id);
      }
   }

   public static class TL_encryptedChat_old extends TLRPC.TL_encryptedChat {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt32(var2);
         super.access_hash = var1.readInt64(var2);
         super.date = var1.readInt32(var2);
         super.admin_id = var1.readInt32(var2);
         super.participant_id = var1.readInt32(var2);
         super.g_a_or_b = var1.readByteArray(var2);
         super.nonce = var1.readByteArray(var2);
         super.key_fingerprint = var1.readInt64(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.id);
         var1.writeInt64(super.access_hash);
         var1.writeInt32(super.date);
         var1.writeInt32(super.admin_id);
         var1.writeInt32(super.participant_id);
         var1.writeByteArray(super.g_a_or_b);
         var1.writeByteArray(super.nonce);
         var1.writeInt64(super.key_fingerprint);
      }
   }

   public static class TL_encryptedFile extends TLRPC.EncryptedFile {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt64(var2);
         super.access_hash = var1.readInt64(var2);
         super.size = var1.readInt32(var2);
         super.dc_id = var1.readInt32(var2);
         super.key_fingerprint = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(super.id);
         var1.writeInt64(super.access_hash);
         var1.writeInt32(super.size);
         var1.writeInt32(super.dc_id);
         var1.writeInt32(super.key_fingerprint);
      }
   }

   public static class TL_encryptedFileEmpty extends TLRPC.EncryptedFile {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_encryptedMessage extends TLRPC.EncryptedMessage {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.random_id = var1.readInt64(var2);
         super.chat_id = var1.readInt32(var2);
         super.date = var1.readInt32(var2);
         super.bytes = var1.readByteArray(var2);
         super.file = TLRPC.EncryptedFile.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(super.random_id);
         var1.writeInt32(super.chat_id);
         var1.writeInt32(super.date);
         var1.writeByteArray(super.bytes);
         super.file.serializeToStream(var1);
      }
   }

   public static class TL_encryptedMessageService extends TLRPC.EncryptedMessage {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.random_id = var1.readInt64(var2);
         super.chat_id = var1.readInt32(var2);
         super.date = var1.readInt32(var2);
         super.bytes = var1.readByteArray(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(super.random_id);
         var1.writeInt32(super.chat_id);
         var1.writeInt32(super.date);
         var1.writeByteArray(super.bytes);
      }
   }

   public static class TL_error extends TLObject {
      public static int constructor;
      public int code;
      public String text;

      public static TLRPC.TL_error TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_error", var1));
            }
         } else {
            TLRPC.TL_error var3 = new TLRPC.TL_error();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.code = var1.readInt32(var2);
         this.text = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.code);
         var1.writeString(this.text);
      }
   }

   public static class TL_exportedMessageLink extends TLObject {
      public static int constructor;
      public String html;
      public String link;

      public static TLRPC.TL_exportedMessageLink TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_exportedMessageLink", var1));
            }
         } else {
            TLRPC.TL_exportedMessageLink var3 = new TLRPC.TL_exportedMessageLink();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.link = var1.readString(var2);
         this.html = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.link);
         var1.writeString(this.html);
      }
   }

   public static class TL_fileEncryptedLocation extends TLRPC.FileLocation {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.dc_id = var1.readInt32(var2);
         super.volume_id = var1.readInt64(var2);
         super.local_id = var1.readInt32(var2);
         super.secret = var1.readInt64(var2);
         super.key = var1.readByteArray(var2);
         super.iv = var1.readByteArray(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.dc_id);
         var1.writeInt64(super.volume_id);
         var1.writeInt32(super.local_id);
         var1.writeInt64(super.secret);
         var1.writeByteArray(super.key);
         var1.writeByteArray(super.iv);
      }
   }

   public static class TL_fileHash extends TLObject {
      public static int constructor;
      public byte[] hash;
      public int limit;
      public int offset;

      public static TLRPC.TL_fileHash TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_fileHash", var1));
            }
         } else {
            TLRPC.TL_fileHash var3 = new TLRPC.TL_fileHash();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.offset = var1.readInt32(var2);
         this.limit = var1.readInt32(var2);
         this.hash = var1.readByteArray(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.offset);
         var1.writeInt32(this.limit);
         var1.writeByteArray(this.hash);
      }
   }

   public static class TL_fileLocationToBeDeprecated extends TLRPC.FileLocation {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.volume_id = var1.readInt64(var2);
         super.local_id = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(super.volume_id);
         var1.writeInt32(super.local_id);
      }
   }

   public static class TL_fileLocationUnavailable extends TLRPC.FileLocation {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.volume_id = var1.readInt64(var2);
         super.local_id = var1.readInt32(var2);
         super.secret = var1.readInt64(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(super.volume_id);
         var1.writeInt32(super.local_id);
         var1.writeInt64(super.secret);
      }
   }

   public static class TL_fileLocation_layer82 extends TLRPC.TL_fileLocation_layer97 {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.dc_id = var1.readInt32(var2);
         super.volume_id = var1.readInt64(var2);
         super.local_id = var1.readInt32(var2);
         super.secret = var1.readInt64(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.dc_id);
         var1.writeInt64(super.volume_id);
         var1.writeInt32(super.local_id);
         var1.writeInt64(super.secret);
      }
   }

   public static class TL_fileLocation_layer97 extends TLRPC.FileLocation {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.dc_id = var1.readInt32(var2);
         super.volume_id = var1.readInt64(var2);
         super.local_id = var1.readInt32(var2);
         super.secret = var1.readInt64(var2);
         super.file_reference = var1.readByteArray(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.dc_id);
         var1.writeInt64(super.volume_id);
         var1.writeInt32(super.local_id);
         var1.writeInt64(super.secret);
         var1.writeByteArray(super.file_reference);
      }
   }

   public static class TL_folder extends TLObject {
      public static int constructor;
      public boolean autofill_new_broadcasts;
      public boolean autofill_new_correspondents;
      public boolean autofill_public_groups;
      public int flags;
      public int id;
      public TLRPC.ChatPhoto photo;
      public String title;

      public static TLRPC.TL_folder TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_folder", var1));
            }
         } else {
            TLRPC.TL_folder var3 = new TLRPC.TL_folder();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.flags = var1.readInt32(var2);
         int var3 = this.flags;
         boolean var4 = true;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.autofill_new_broadcasts = var5;
         if ((this.flags & 2) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.autofill_public_groups = var5;
         if ((this.flags & 4) != 0) {
            var5 = var4;
         } else {
            var5 = false;
         }

         this.autofill_new_correspondents = var5;
         this.id = var1.readInt32(var2);
         this.title = var1.readString(var2);
         if ((this.flags & 8) != 0) {
            this.photo = TLRPC.ChatPhoto.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.autofill_new_broadcasts) {
            var2 = this.flags | 1;
         } else {
            var2 = this.flags & -2;
         }

         this.flags = var2;
         if (this.autofill_public_groups) {
            var2 = this.flags | 2;
         } else {
            var2 = this.flags & -3;
         }

         this.flags = var2;
         if (this.autofill_new_correspondents) {
            var2 = this.flags | 4;
         } else {
            var2 = this.flags & -5;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         var1.writeInt32(this.id);
         var1.writeString(this.title);
         if ((this.flags & 8) != 0) {
            this.photo.serializeToStream(var1);
         }

      }
   }

   public static class TL_folderPeer extends TLObject {
      public static int constructor;
      public int folder_id;
      public TLRPC.Peer peer;

      public static TLRPC.TL_folderPeer TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_folderPeer", var1));
            }
         } else {
            TLRPC.TL_folderPeer var3 = new TLRPC.TL_folderPeer();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.peer = TLRPC.Peer.TLdeserialize(var1, var1.readInt32(var2), var2);
         this.folder_id = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.peer.serializeToStream(var1);
         var1.writeInt32(this.folder_id);
      }
   }

   public static class TL_folders_deleteFolder extends TLObject {
      public static int constructor;
      public int folder_id;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Updates.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.folder_id);
      }
   }

   public static class TL_folders_editPeerFolders extends TLObject {
      public static int constructor;
      public ArrayList folder_peers = new ArrayList();

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Updates.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = this.folder_peers.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.TL_inputFolderPeer)this.folder_peers.get(var3)).serializeToStream(var1);
         }

      }
   }

   public static class TL_foundGif extends TLRPC.FoundGif {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.url = var1.readString(var2);
         super.thumb_url = var1.readString(var2);
         super.content_url = var1.readString(var2);
         super.content_type = var1.readString(var2);
         super.w = var1.readInt32(var2);
         super.h = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(super.url);
         var1.writeString(super.thumb_url);
         var1.writeString(super.content_url);
         var1.writeString(super.content_type);
         var1.writeInt32(super.w);
         var1.writeInt32(super.h);
      }
   }

   public static class TL_foundGifCached extends TLRPC.FoundGif {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.url = var1.readString(var2);
         super.photo = TLRPC.Photo.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.document = TLRPC.Document.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(super.url);
         super.photo.serializeToStream(var1);
         super.document.serializeToStream(var1);
      }
   }

   public static class TL_game extends TLObject {
      public static int constructor;
      public long access_hash;
      public String description;
      public TLRPC.Document document;
      public int flags;
      public long id;
      public TLRPC.Photo photo;
      public String short_name;
      public String title;

      public static TLRPC.TL_game TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_game", var1));
            }
         } else {
            TLRPC.TL_game var3 = new TLRPC.TL_game();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.flags = var1.readInt32(var2);
         this.id = var1.readInt64(var2);
         this.access_hash = var1.readInt64(var2);
         this.short_name = var1.readString(var2);
         this.title = var1.readString(var2);
         this.description = var1.readString(var2);
         this.photo = TLRPC.Photo.TLdeserialize(var1, var1.readInt32(var2), var2);
         if ((this.flags & 1) != 0) {
            this.document = TLRPC.Document.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.flags);
         var1.writeInt64(this.id);
         var1.writeInt64(this.access_hash);
         var1.writeString(this.short_name);
         var1.writeString(this.title);
         var1.writeString(this.description);
         this.photo.serializeToStream(var1);
         if ((this.flags & 1) != 0) {
            this.document.serializeToStream(var1);
         }

      }
   }

   public static class TL_geoPoint extends TLRPC.GeoPoint {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super._long = var1.readDouble(var2);
         super.lat = var1.readDouble(var2);
         super.access_hash = var1.readInt64(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeDouble(super._long);
         var1.writeDouble(super.lat);
         var1.writeInt64(super.access_hash);
      }
   }

   public static class TL_geoPointEmpty extends TLRPC.GeoPoint {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_geoPoint_layer81 extends TLRPC.TL_geoPoint {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super._long = var1.readDouble(var2);
         super.lat = var1.readDouble(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeDouble(super._long);
         var1.writeDouble(super.lat);
      }
   }

   public static class TL_groupCall extends TLRPC.GroupCall {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         super.id = var1.readInt64(var2);
         super.access_hash = var1.readInt64(var2);
         if ((super.flags & 1) != 0) {
            super.channel_id = var1.readInt32(var2);
         }

         super.admin_id = var1.readInt32(var2);
         if ((super.flags & 2) != 0) {
            super.encryption_key = var1.readByteArray(var2);
         }

         super.key_fingerprint = var1.readInt64(var2);
         super.protocol = TLRPC.TL_phoneCallProtocol.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.connection = TLRPC.TL_groupCallConnection.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.reflector_group_tag = var1.readByteArray(var2);
         super.reflector_self_tag = var1.readByteArray(var2);
         super.reflector_self_secret = var1.readByteArray(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.flags);
         var1.writeInt64(super.id);
         var1.writeInt64(super.access_hash);
         if ((super.flags & 1) != 0) {
            var1.writeInt32(super.channel_id);
         }

         var1.writeInt32(super.admin_id);
         if ((super.flags & 2) != 0) {
            var1.writeByteArray(super.encryption_key);
         }

         var1.writeInt64(super.key_fingerprint);
         super.protocol.serializeToStream(var1);
         super.connection.serializeToStream(var1);
         var1.writeByteArray(super.reflector_group_tag);
         var1.writeByteArray(super.reflector_self_tag);
         var1.writeByteArray(super.reflector_self_secret);
      }
   }

   public static class TL_groupCallConnection extends TLObject {
      public static int constructor;
      public long id;
      public String ip;
      public String ipv6;
      public int port;

      public static TLRPC.TL_groupCallConnection TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_groupCallConnection", var1));
            }
         } else {
            TLRPC.TL_groupCallConnection var3 = new TLRPC.TL_groupCallConnection();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.id = var1.readInt64(var2);
         this.ip = var1.readString(var2);
         this.ipv6 = var1.readString(var2);
         this.port = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(this.id);
         var1.writeString(this.ip);
         var1.writeString(this.ipv6);
         var1.writeInt32(this.port);
      }
   }

   public static class TL_groupCallDiscarded extends TLRPC.GroupCall {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt64(var2);
         super.access_hash = var1.readInt64(var2);
         super.duration = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(super.id);
         var1.writeInt64(super.access_hash);
         var1.writeInt32(super.duration);
      }
   }

   public static class TL_groupCallParticipant extends TLRPC.GroupCallParticipant {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         boolean var4 = true;
         if ((var3 & 1) == 0) {
            var4 = false;
         }

         super.readonly = var4;
         super.user_id = var1.readInt32(var2);
         super.date = var1.readInt32(var2);
         super.member_tag_hash = var1.readByteArray(var2);
         super.streams = var1.readByteArray(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.readonly) {
            var2 = super.flags | 1;
         } else {
            var2 = super.flags & -2;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt32(super.user_id);
         var1.writeInt32(super.date);
         var1.writeByteArray(super.member_tag_hash);
         var1.writeByteArray(super.streams);
      }
   }

   public static class TL_groupCallParticipantAdmin extends TLRPC.GroupCallParticipant {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.user_id = var1.readInt32(var2);
         super.member_tag_hash = var1.readByteArray(var2);
         super.streams = var1.readByteArray(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.user_id);
         var1.writeByteArray(super.member_tag_hash);
         var1.writeByteArray(super.streams);
      }
   }

   public static class TL_groupCallParticipantInvited extends TLRPC.GroupCallParticipant {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         super.user_id = var1.readInt32(var2);
         super.inviter_id = var1.readInt32(var2);
         super.date = var1.readInt32(var2);
         if ((super.flags & 1) != 0) {
            super.phone_call = TLRPC.TL_inputPhoneCall.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.flags);
         var1.writeInt32(super.user_id);
         var1.writeInt32(super.inviter_id);
         var1.writeInt32(super.date);
         if ((super.flags & 1) != 0) {
            super.phone_call.serializeToStream(var1);
         }

      }
   }

   public static class TL_groupCallParticipantLeft extends TLRPC.GroupCallParticipant {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.user_id = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.user_id);
      }
   }

   public static class TL_groupCallPrivate extends TLRPC.GroupCall {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         super.id = var1.readInt64(var2);
         super.access_hash = var1.readInt64(var2);
         if ((super.flags & 1) != 0) {
            super.channel_id = var1.readInt32(var2);
         }

         super.participants_count = var1.readInt32(var2);
         super.admin_id = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.flags);
         var1.writeInt64(super.id);
         var1.writeInt64(super.access_hash);
         if ((super.flags & 1) != 0) {
            var1.writeInt32(super.channel_id);
         }

         var1.writeInt32(super.participants_count);
         var1.writeInt32(super.admin_id);
      }
   }

   public static class TL_help_acceptTermsOfService extends TLObject {
      public static int constructor;
      public TLRPC.TL_dataJSON id;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.id.serializeToStream(var1);
      }
   }

   public static class TL_help_appUpdate extends TLRPC.help_AppUpdate {
      public static int constructor;
      public TLRPC.Document document;
      public ArrayList entities = new ArrayList();
      public int flags;
      public int id;
      public boolean popup;
      public String text;
      public String url;
      public String version;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.flags = var1.readInt32(var2);
         int var3 = this.flags;
         int var4 = 0;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.popup = var5;
         this.id = var1.readInt32(var2);
         this.version = var1.readString(var2);
         this.text = var1.readString(var2);
         var3 = var1.readInt32(var2);
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.MessageEntity var6 = TLRPC.MessageEntity.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               this.entities.add(var6);
            }

            if ((this.flags & 2) != 0) {
               this.document = TLRPC.Document.TLdeserialize(var1, var1.readInt32(var2), var2);
            }

            if ((this.flags & 4) != 0) {
               this.url = var1.readString(var2);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.popup) {
            var2 = this.flags | 1;
         } else {
            var2 = this.flags & -2;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         var1.writeInt32(this.id);
         var1.writeString(this.version);
         var1.writeString(this.text);
         var1.writeInt32(481674261);
         int var3 = this.entities.size();
         var1.writeInt32(var3);

         for(var2 = 0; var2 < var3; ++var2) {
            ((TLRPC.MessageEntity)this.entities.get(var2)).serializeToStream(var1);
         }

         if ((this.flags & 2) != 0) {
            this.document.serializeToStream(var1);
         }

         if ((this.flags & 4) != 0) {
            var1.writeString(this.url);
         }

      }
   }

   public static class TL_help_deepLinkInfo extends TLRPC.help_DeepLinkInfo {
      public static int constructor;
      public ArrayList entities = new ArrayList();
      public int flags;
      public String message;
      public boolean update_app;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.flags = var1.readInt32(var2);
         int var3 = this.flags;
         int var4 = 0;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.update_app = var5;
         this.message = var1.readString(var2);
         if ((this.flags & 2) != 0) {
            var3 = var1.readInt32(var2);
            if (var3 != 481674261) {
               if (!var2) {
                  return;
               }

               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }

            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.MessageEntity var6 = TLRPC.MessageEntity.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               this.entities.add(var6);
            }
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.update_app) {
            var2 = this.flags | 1;
         } else {
            var2 = this.flags & -2;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         var1.writeString(this.message);
         if ((this.flags & 2) != 0) {
            var1.writeInt32(481674261);
            int var3 = this.entities.size();
            var1.writeInt32(var3);

            for(var2 = 0; var2 < var3; ++var2) {
               ((TLRPC.MessageEntity)this.entities.get(var2)).serializeToStream(var1);
            }
         }

      }
   }

   public static class TL_help_deepLinkInfoEmpty extends TLRPC.help_DeepLinkInfo {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_help_editUserInfo extends TLObject {
      public static int constructor;
      public ArrayList entities = new ArrayList();
      public String message;
      public TLRPC.InputUser user_id;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.help_UserInfo.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.user_id.serializeToStream(var1);
         var1.writeString(this.message);
         var1.writeInt32(481674261);
         int var2 = this.entities.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.MessageEntity)this.entities.get(var3)).serializeToStream(var1);
         }

      }
   }

   public static class TL_help_getAppChangelog extends TLObject {
      public static int constructor;
      public String prev_app_version;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Updates.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.prev_app_version);
      }
   }

   public static class TL_help_getAppConfig extends TLObject {
      public static int constructor;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.JSONValue.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_help_getAppUpdate extends TLObject {
      public static int constructor;
      public String source;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.help_AppUpdate.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.source);
      }
   }

   public static class TL_help_getConfig extends TLObject {
      public static int constructor;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_config.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_help_getDeepLinkInfo extends TLObject {
      public static int constructor;
      public String path;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.help_DeepLinkInfo.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.path);
      }
   }

   public static class TL_help_getInviteText extends TLObject {
      public static int constructor;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_help_inviteText.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_help_getNearestDc extends TLObject {
      public static int constructor;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_nearestDc.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_help_getPassportConfig extends TLObject {
      public static int constructor;
      public int hash;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.help_PassportConfig.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.hash);
      }
   }

   public static class TL_help_getProxyData extends TLObject {
      public static int constructor;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.help_ProxyData.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_help_getRecentMeUrls extends TLObject {
      public static int constructor;
      public String referer;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_help_recentMeUrls.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.referer);
      }
   }

   public static class TL_help_getSupport extends TLObject {
      public static int constructor;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_help_support.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_help_getSupportName extends TLObject {
      public static int constructor;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_help_supportName.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_help_getTermsOfServiceUpdate extends TLObject {
      public static int constructor;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.help_TermsOfServiceUpdate.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_help_getUserInfo extends TLObject {
      public static int constructor;
      public TLRPC.InputUser user_id;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.help_UserInfo.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.user_id.serializeToStream(var1);
      }
   }

   public static class TL_help_inviteText extends TLObject {
      public static int constructor;
      public String message;

      public static TLRPC.TL_help_inviteText TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_help_inviteText", var1));
            }
         } else {
            TLRPC.TL_help_inviteText var3 = new TLRPC.TL_help_inviteText();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.message = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.message);
      }
   }

   public static class TL_help_noAppUpdate extends TLRPC.help_AppUpdate {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_help_passportConfig extends TLRPC.help_PassportConfig {
      public static int constructor;
      public TLRPC.TL_dataJSON countries_langs;
      public int hash;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.hash = var1.readInt32(var2);
         this.countries_langs = TLRPC.TL_dataJSON.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.hash);
         this.countries_langs.serializeToStream(var1);
      }
   }

   public static class TL_help_passportConfigNotModified extends TLRPC.help_PassportConfig {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_help_proxyDataEmpty extends TLRPC.help_ProxyData {
      public static int constructor;
      public int expires;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.expires = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.expires);
      }
   }

   public static class TL_help_proxyDataPromo extends TLRPC.help_ProxyData {
      public static int constructor;
      public ArrayList chats = new ArrayList();
      public int expires;
      public TLRPC.Peer peer;
      public ArrayList users = new ArrayList();

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.expires = var1.readInt32(var2);
         this.peer = TLRPC.Peer.TLdeserialize(var1, var1.readInt32(var2), var2);
         int var3 = var1.readInt32(var2);
         byte var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            int var5 = var1.readInt32(var2);

            for(var3 = 0; var3 < var5; ++var3) {
               TLRPC.Chat var6 = TLRPC.Chat.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               this.chats.add(var6);
            }

            var3 = var1.readInt32(var2);
            if (var3 != 481674261) {
               if (var2) {
                  throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
               }
            } else {
               var5 = var1.readInt32(var2);

               for(var3 = var4; var3 < var5; ++var3) {
                  TLRPC.User var7 = TLRPC.User.TLdeserialize(var1, var1.readInt32(var2), var2);
                  if (var7 == null) {
                     return;
                  }

                  this.users.add(var7);
               }

            }
         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.expires);
         this.peer.serializeToStream(var1);
         var1.writeInt32(481674261);
         int var2 = this.chats.size();
         var1.writeInt32(var2);
         byte var3 = 0;

         int var4;
         for(var4 = 0; var4 < var2; ++var4) {
            ((TLRPC.Chat)this.chats.get(var4)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var2 = this.users.size();
         var1.writeInt32(var2);

         for(var4 = var3; var4 < var2; ++var4) {
            ((TLRPC.User)this.users.get(var4)).serializeToStream(var1);
         }

      }
   }

   public static class TL_help_recentMeUrls extends TLObject {
      public static int constructor;
      public ArrayList chats = new ArrayList();
      public ArrayList urls = new ArrayList();
      public ArrayList users = new ArrayList();

      public static TLRPC.TL_help_recentMeUrls TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_help_recentMeUrls", var1));
            }
         } else {
            TLRPC.TL_help_recentMeUrls var3 = new TLRPC.TL_help_recentMeUrls();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         int var3 = var1.readInt32(var2);
         byte var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            int var5 = var1.readInt32(var2);

            for(var3 = 0; var3 < var5; ++var3) {
               TLRPC.RecentMeUrl var6 = TLRPC.RecentMeUrl.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               this.urls.add(var6);
            }

            var3 = var1.readInt32(var2);
            if (var3 != 481674261) {
               if (var2) {
                  throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
               }
            } else {
               var5 = var1.readInt32(var2);

               for(var3 = 0; var3 < var5; ++var3) {
                  TLRPC.Chat var7 = TLRPC.Chat.TLdeserialize(var1, var1.readInt32(var2), var2);
                  if (var7 == null) {
                     return;
                  }

                  this.chats.add(var7);
               }

               var3 = var1.readInt32(var2);
               if (var3 != 481674261) {
                  if (var2) {
                     throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
                  }
               } else {
                  var5 = var1.readInt32(var2);

                  for(var3 = var4; var3 < var5; ++var3) {
                     TLRPC.User var8 = TLRPC.User.TLdeserialize(var1, var1.readInt32(var2), var2);
                     if (var8 == null) {
                        return;
                     }

                     this.users.add(var8);
                  }

               }
            }
         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = this.urls.size();
         var1.writeInt32(var2);
         byte var3 = 0;

         int var4;
         for(var4 = 0; var4 < var2; ++var4) {
            ((TLRPC.RecentMeUrl)this.urls.get(var4)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var2 = this.chats.size();
         var1.writeInt32(var2);

         for(var4 = 0; var4 < var2; ++var4) {
            ((TLRPC.Chat)this.chats.get(var4)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var2 = this.users.size();
         var1.writeInt32(var2);

         for(var4 = var3; var4 < var2; ++var4) {
            ((TLRPC.User)this.users.get(var4)).serializeToStream(var1);
         }

      }
   }

   public static class TL_help_saveAppLog extends TLObject {
      public static int constructor;
      public ArrayList events = new ArrayList();

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = this.events.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.TL_inputAppEvent)this.events.get(var3)).serializeToStream(var1);
         }

      }
   }

   public static class TL_help_setBotUpdatesStatus extends TLObject {
      public static int constructor;
      public String message;
      public int pending_updates_count;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.pending_updates_count);
         var1.writeString(this.message);
      }
   }

   public static class TL_help_support extends TLObject {
      public static int constructor;
      public String phone_number;
      public TLRPC.User user;

      public static TLRPC.TL_help_support TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_help_support", var1));
            }
         } else {
            TLRPC.TL_help_support var3 = new TLRPC.TL_help_support();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.phone_number = var1.readString(var2);
         this.user = TLRPC.User.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.phone_number);
         this.user.serializeToStream(var1);
      }
   }

   public static class TL_help_supportName extends TLObject {
      public static int constructor;
      public String name;

      public static TLRPC.TL_help_supportName TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_help_supportName", var1));
            }
         } else {
            TLRPC.TL_help_supportName var3 = new TLRPC.TL_help_supportName();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.name = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.name);
      }
   }

   public static class TL_help_termsOfService extends TLObject {
      public static int constructor;
      public ArrayList entities = new ArrayList();
      public int flags;
      public TLRPC.TL_dataJSON id;
      public int min_age_confirm;
      public boolean popup;
      public String text;

      public static TLRPC.TL_help_termsOfService TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_help_termsOfService", var1));
            }
         } else {
            TLRPC.TL_help_termsOfService var3 = new TLRPC.TL_help_termsOfService();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.flags = var1.readInt32(var2);
         int var3 = this.flags;
         int var4 = 0;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.popup = var5;
         this.id = TLRPC.TL_dataJSON.TLdeserialize(var1, var1.readInt32(var2), var2);
         this.text = var1.readString(var2);
         var3 = var1.readInt32(var2);
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.MessageEntity var6 = TLRPC.MessageEntity.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               this.entities.add(var6);
            }

            if ((this.flags & 2) != 0) {
               this.min_age_confirm = var1.readInt32(var2);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.popup) {
            var2 = this.flags | 1;
         } else {
            var2 = this.flags & -2;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         this.id.serializeToStream(var1);
         var1.writeString(this.text);
         var1.writeInt32(481674261);
         int var3 = this.entities.size();
         var1.writeInt32(var3);

         for(var2 = 0; var2 < var3; ++var2) {
            ((TLRPC.MessageEntity)this.entities.get(var2)).serializeToStream(var1);
         }

         if ((this.flags & 2) != 0) {
            var1.writeInt32(this.min_age_confirm);
         }

      }
   }

   public static class TL_help_termsOfServiceUpdate extends TLRPC.help_TermsOfServiceUpdate {
      public static int constructor;
      public int expires;
      public TLRPC.TL_help_termsOfService terms_of_service;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.expires = var1.readInt32(var2);
         this.terms_of_service = TLRPC.TL_help_termsOfService.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.expires);
         this.terms_of_service.serializeToStream(var1);
      }
   }

   public static class TL_help_termsOfServiceUpdateEmpty extends TLRPC.help_TermsOfServiceUpdate {
      public static int constructor;
      public int expires;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.expires = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.expires);
      }
   }

   public static class TL_help_userInfo extends TLRPC.help_UserInfo {
      public static int constructor;
      public String author;
      public int date;
      public ArrayList entities = new ArrayList();
      public String message;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.message = var1.readString(var2);
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.MessageEntity var5 = TLRPC.MessageEntity.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               this.entities.add(var5);
            }

            this.author = var1.readString(var2);
            this.date = var1.readInt32(var2);
         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.message);
         var1.writeInt32(481674261);
         int var2 = this.entities.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.MessageEntity)this.entities.get(var3)).serializeToStream(var1);
         }

         var1.writeString(this.author);
         var1.writeInt32(this.date);
      }
   }

   public static class TL_help_userInfoEmpty extends TLRPC.help_UserInfo {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_highScore extends TLObject {
      public static int constructor;
      public int pos;
      public int score;
      public int user_id;

      public static TLRPC.TL_highScore TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_highScore", var1));
            }
         } else {
            TLRPC.TL_highScore var3 = new TLRPC.TL_highScore();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.pos = var1.readInt32(var2);
         this.user_id = var1.readInt32(var2);
         this.score = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.pos);
         var1.writeInt32(this.user_id);
         var1.writeInt32(this.score);
      }
   }

   public static class TL_importedContact extends TLObject {
      public static int constructor;
      public long client_id;
      public int user_id;

      public static TLRPC.TL_importedContact TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_importedContact", var1));
            }
         } else {
            TLRPC.TL_importedContact var3 = new TLRPC.TL_importedContact();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.user_id = var1.readInt32(var2);
         this.client_id = var1.readInt64(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.user_id);
         var1.writeInt64(this.client_id);
      }
   }

   public static class TL_inlineBotSwitchPM extends TLObject {
      public static int constructor;
      public String start_param;
      public String text;

      public static TLRPC.TL_inlineBotSwitchPM TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_inlineBotSwitchPM", var1));
            }
         } else {
            TLRPC.TL_inlineBotSwitchPM var3 = new TLRPC.TL_inlineBotSwitchPM();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.text = var1.readString(var2);
         this.start_param = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.text);
         var1.writeString(this.start_param);
      }
   }

   public static class TL_inputAppEvent extends TLObject {
      public static int constructor;
      public TLRPC.JSONValue data;
      public long peer;
      public double time;
      public String type;

      public static TLRPC.TL_inputAppEvent TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_inputAppEvent", var1));
            }
         } else {
            TLRPC.TL_inputAppEvent var3 = new TLRPC.TL_inputAppEvent();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.time = var1.readDouble(var2);
         this.type = var1.readString(var2);
         this.peer = var1.readInt64(var2);
         this.data = TLRPC.JSONValue.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeDouble(this.time);
         var1.writeString(this.type);
         var1.writeInt64(this.peer);
         this.data.serializeToStream(var1);
      }
   }

   public static class TL_inputBotInlineMessageID extends TLObject {
      public static int constructor;
      public long access_hash;
      public int dc_id;
      public long id;

      public static TLRPC.TL_inputBotInlineMessageID TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_inputBotInlineMessageID", var1));
            }
         } else {
            TLRPC.TL_inputBotInlineMessageID var3 = new TLRPC.TL_inputBotInlineMessageID();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.dc_id = var1.readInt32(var2);
         this.id = var1.readInt64(var2);
         this.access_hash = var1.readInt64(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.dc_id);
         var1.writeInt64(this.id);
         var1.writeInt64(this.access_hash);
      }
   }

   public static class TL_inputChannel extends TLRPC.InputChannel {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.channel_id = var1.readInt32(var2);
         super.access_hash = var1.readInt64(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.channel_id);
         var1.writeInt64(super.access_hash);
      }
   }

   public static class TL_inputChannelEmpty extends TLRPC.InputChannel {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_inputChannelFromMessage extends TLRPC.InputChannel {
      public static int constructor;
      public int msg_id;
      public TLRPC.InputPeer peer;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.peer = TLRPC.InputPeer.TLdeserialize(var1, var1.readInt32(var2), var2);
         this.msg_id = var1.readInt32(var2);
         super.channel_id = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.peer.serializeToStream(var1);
         var1.writeInt32(this.msg_id);
         var1.writeInt32(super.channel_id);
      }
   }

   public static class TL_inputChatPhoto extends TLRPC.InputChatPhoto {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = TLRPC.InputPhoto.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         super.id.serializeToStream(var1);
      }
   }

   public static class TL_inputChatPhotoEmpty extends TLRPC.InputChatPhoto {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_inputChatUploadedPhoto extends TLRPC.InputChatPhoto {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.file = TLRPC.InputFile.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         super.file.serializeToStream(var1);
      }
   }

   public static class TL_inputCheckPasswordEmpty extends TLRPC.InputCheckPasswordSRP {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_inputCheckPasswordSRP extends TLRPC.InputCheckPasswordSRP {
      public static int constructor;
      public byte[] A;
      public byte[] M1;
      public long srp_id;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.srp_id = var1.readInt64(var2);
         this.A = var1.readByteArray(var2);
         this.M1 = var1.readByteArray(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(this.srp_id);
         var1.writeByteArray(this.A);
         var1.writeByteArray(this.M1);
      }
   }

   public static class TL_inputDialogPeer extends TLRPC.InputDialogPeer {
      public static int constructor;
      public TLRPC.InputPeer peer;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.peer = TLRPC.InputPeer.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.peer.serializeToStream(var1);
      }
   }

   public static class TL_inputDialogPeerFolder extends TLRPC.InputDialogPeer {
      public static int constructor;
      public int folder_id;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.folder_id = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.folder_id);
      }
   }

   public static class TL_inputDocument extends TLRPC.InputDocument {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt64(var2);
         super.access_hash = var1.readInt64(var2);
         super.file_reference = var1.readByteArray(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(super.id);
         var1.writeInt64(super.access_hash);
         var1.writeByteArray(super.file_reference);
      }
   }

   public static class TL_inputDocumentEmpty extends TLRPC.InputDocument {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_inputDocumentFileLocation extends TLRPC.InputFileLocation {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt64(var2);
         super.access_hash = var1.readInt64(var2);
         super.file_reference = var1.readByteArray(var2);
         super.thumb_size = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(super.id);
         var1.writeInt64(super.access_hash);
         var1.writeByteArray(super.file_reference);
         var1.writeString(super.thumb_size);
      }
   }

   public static class TL_inputEncryptedChat extends TLObject {
      public static int constructor;
      public long access_hash;
      public int chat_id;

      public static TLRPC.TL_inputEncryptedChat TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_inputEncryptedChat", var1));
            }
         } else {
            TLRPC.TL_inputEncryptedChat var3 = new TLRPC.TL_inputEncryptedChat();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.chat_id = var1.readInt32(var2);
         this.access_hash = var1.readInt64(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.chat_id);
         var1.writeInt64(this.access_hash);
      }
   }

   public static class TL_inputEncryptedFile extends TLRPC.InputEncryptedFile {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt64(var2);
         super.access_hash = var1.readInt64(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(super.id);
         var1.writeInt64(super.access_hash);
      }
   }

   public static class TL_inputEncryptedFileBigUploaded extends TLRPC.InputEncryptedFile {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt64(var2);
         super.parts = var1.readInt32(var2);
         super.key_fingerprint = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(super.id);
         var1.writeInt32(super.parts);
         var1.writeInt32(super.key_fingerprint);
      }
   }

   public static class TL_inputEncryptedFileEmpty extends TLRPC.InputEncryptedFile {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_inputEncryptedFileLocation extends TLRPC.InputFileLocation {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt64(var2);
         super.access_hash = var1.readInt64(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(super.id);
         var1.writeInt64(super.access_hash);
      }
   }

   public static class TL_inputEncryptedFileUploaded extends TLRPC.InputEncryptedFile {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt64(var2);
         super.parts = var1.readInt32(var2);
         super.md5_checksum = var1.readString(var2);
         super.key_fingerprint = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(super.id);
         var1.writeInt32(super.parts);
         var1.writeString(super.md5_checksum);
         var1.writeInt32(super.key_fingerprint);
      }
   }

   public static class TL_inputFile extends TLRPC.InputFile {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt64(var2);
         super.parts = var1.readInt32(var2);
         super.name = var1.readString(var2);
         super.md5_checksum = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(super.id);
         var1.writeInt32(super.parts);
         var1.writeString(super.name);
         var1.writeString(super.md5_checksum);
      }
   }

   public static class TL_inputFileBig extends TLRPC.InputFile {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt64(var2);
         super.parts = var1.readInt32(var2);
         super.name = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(super.id);
         var1.writeInt32(super.parts);
         var1.writeString(super.name);
      }
   }

   public static class TL_inputFileLocation extends TLRPC.InputFileLocation {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.volume_id = var1.readInt64(var2);
         super.local_id = var1.readInt32(var2);
         super.secret = var1.readInt64(var2);
         super.file_reference = var1.readByteArray(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(super.volume_id);
         var1.writeInt32(super.local_id);
         var1.writeInt64(super.secret);
         var1.writeByteArray(super.file_reference);
      }
   }

   public static class TL_inputFolderPeer extends TLObject {
      public static int constructor;
      public int folder_id;
      public TLRPC.InputPeer peer;

      public static TLRPC.TL_inputFolderPeer TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_inputFolderPeer", var1));
            }
         } else {
            TLRPC.TL_inputFolderPeer var3 = new TLRPC.TL_inputFolderPeer();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.peer = TLRPC.InputPeer.TLdeserialize(var1, var1.readInt32(var2), var2);
         this.folder_id = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.peer.serializeToStream(var1);
         var1.writeInt32(this.folder_id);
      }
   }

   public static class TL_inputGameID extends TLRPC.InputGame {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt64(var2);
         super.access_hash = var1.readInt64(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(super.id);
         var1.writeInt64(super.access_hash);
      }
   }

   public static class TL_inputGameShortName extends TLRPC.InputGame {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.bot_id = TLRPC.InputUser.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.short_name = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         super.bot_id.serializeToStream(var1);
         var1.writeString(super.short_name);
      }
   }

   public static class TL_inputGeoPoint extends TLRPC.InputGeoPoint {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.lat = var1.readDouble(var2);
         super._long = var1.readDouble(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeDouble(super.lat);
         var1.writeDouble(super._long);
      }
   }

   public static class TL_inputGeoPointEmpty extends TLRPC.InputGeoPoint {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_inputGroupCall extends TLObject {
      public static int constructor;
      public long access_hash;
      public long id;

      public static TLRPC.TL_inputGroupCall TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_inputGroupCall", var1));
            }
         } else {
            TLRPC.TL_inputGroupCall var3 = new TLRPC.TL_inputGroupCall();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.id = var1.readInt64(var2);
         this.access_hash = var1.readInt64(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(this.id);
         var1.writeInt64(this.access_hash);
      }
   }

   public static class TL_inputKeyboardButtonUrlAuth extends TLRPC.KeyboardButton {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         boolean var4 = true;
         if ((var3 & 1) == 0) {
            var4 = false;
         }

         super.request_write_access = var4;
         super.text = var1.readString(var2);
         if ((super.flags & 2) != 0) {
            super.fwd_text = var1.readString(var2);
         }

         super.url = var1.readString(var2);
         super.bot = TLRPC.InputUser.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.request_write_access) {
            var2 = super.flags | 1;
         } else {
            var2 = super.flags & -2;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeString(super.text);
         if ((super.flags & 2) != 0) {
            var1.writeString(super.fwd_text);
         }

         var1.writeString(super.url);
         super.bot.serializeToStream(var1);
      }
   }

   public static class TL_inputMediaContact extends TLRPC.InputMedia {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.phone_number = var1.readString(var2);
         super.first_name = var1.readString(var2);
         super.last_name = var1.readString(var2);
         super.vcard = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(super.phone_number);
         var1.writeString(super.first_name);
         var1.writeString(super.last_name);
         var1.writeString(super.vcard);
      }
   }

   public static class TL_inputMediaDocument extends TLRPC.InputMedia {
      public static int constructor;
      public TLRPC.InputDocument id;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         this.id = TLRPC.InputDocument.TLdeserialize(var1, var1.readInt32(var2), var2);
         if ((super.flags & 1) != 0) {
            super.ttl_seconds = var1.readInt32(var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.flags);
         this.id.serializeToStream(var1);
         if ((super.flags & 1) != 0) {
            var1.writeInt32(super.ttl_seconds);
         }

      }
   }

   public static class TL_inputMediaDocumentExternal extends TLRPC.InputMedia {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         super.url = var1.readString(var2);
         if ((super.flags & 1) != 0) {
            super.ttl_seconds = var1.readInt32(var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.flags);
         var1.writeString(super.url);
         if ((super.flags & 1) != 0) {
            var1.writeInt32(super.ttl_seconds);
         }

      }
   }

   public static class TL_inputMediaEmpty extends TLRPC.InputMedia {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_inputMediaGame extends TLRPC.InputMedia {
      public static int constructor;
      public TLRPC.InputGame id;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.id = TLRPC.InputGame.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.id.serializeToStream(var1);
      }
   }

   public static class TL_inputMediaGeoLive extends TLRPC.InputMedia {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         boolean var4 = true;
         if ((var3 & 1) == 0) {
            var4 = false;
         }

         super.stopped = var4;
         super.geo_point = TLRPC.InputGeoPoint.TLdeserialize(var1, var1.readInt32(var2), var2);
         if ((super.flags & 2) != 0) {
            super.period = var1.readInt32(var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.stopped) {
            var2 = super.flags | 1;
         } else {
            var2 = super.flags & -2;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         super.geo_point.serializeToStream(var1);
         if ((super.flags & 2) != 0) {
            var1.writeInt32(super.period);
         }

      }
   }

   public static class TL_inputMediaGeoPoint extends TLRPC.InputMedia {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.geo_point = TLRPC.InputGeoPoint.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         super.geo_point.serializeToStream(var1);
      }
   }

   public static class TL_inputMediaGifExternal extends TLRPC.InputMedia {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.url = var1.readString(var2);
         super.q = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(super.url);
         var1.writeString(super.q);
      }
   }

   public static class TL_inputMediaPhoto extends TLRPC.InputMedia {
      public static int constructor;
      public TLRPC.InputPhoto id;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         this.id = TLRPC.InputPhoto.TLdeserialize(var1, var1.readInt32(var2), var2);
         if ((super.flags & 1) != 0) {
            super.ttl_seconds = var1.readInt32(var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.flags);
         this.id.serializeToStream(var1);
         if ((super.flags & 1) != 0) {
            var1.writeInt32(super.ttl_seconds);
         }

      }
   }

   public static class TL_inputMediaPhotoExternal extends TLRPC.InputMedia {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         super.url = var1.readString(var2);
         if ((super.flags & 1) != 0) {
            super.ttl_seconds = var1.readInt32(var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.flags);
         var1.writeString(super.url);
         if ((super.flags & 1) != 0) {
            var1.writeInt32(super.ttl_seconds);
         }

      }
   }

   public static class TL_inputMediaPoll extends TLRPC.InputMedia {
      public static int constructor;
      public TLRPC.TL_poll poll;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.poll = TLRPC.TL_poll.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.poll.serializeToStream(var1);
      }
   }

   public static class TL_inputMediaUploadedDocument extends TLRPC.InputMedia {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         byte var4 = 0;
         boolean var5;
         if ((var3 & 8) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.nosound_video = var5;
         super.file = TLRPC.InputFile.TLdeserialize(var1, var1.readInt32(var2), var2);
         if ((super.flags & 4) != 0) {
            super.thumb = TLRPC.InputFile.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         super.mime_type = var1.readString(var2);
         var3 = var1.readInt32(var2);
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            int var6 = var1.readInt32(var2);

            for(var3 = 0; var3 < var6; ++var3) {
               TLRPC.DocumentAttribute var7 = TLRPC.DocumentAttribute.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var7 == null) {
                  return;
               }

               super.attributes.add(var7);
            }

            if ((super.flags & 1) != 0) {
               var3 = var1.readInt32(var2);
               if (var3 != 481674261) {
                  if (!var2) {
                     return;
                  }

                  throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
               }

               var6 = var1.readInt32(var2);

               for(var3 = var4; var3 < var6; ++var3) {
                  TLRPC.InputDocument var8 = TLRPC.InputDocument.TLdeserialize(var1, var1.readInt32(var2), var2);
                  if (var8 == null) {
                     return;
                  }

                  super.stickers.add(var8);
               }
            }

            if ((super.flags & 2) != 0) {
               super.ttl_seconds = var1.readInt32(var2);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.nosound_video) {
            var2 = super.flags | 8;
         } else {
            var2 = super.flags & -9;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         super.file.serializeToStream(var1);
         if ((super.flags & 4) != 0) {
            super.thumb.serializeToStream(var1);
         }

         var1.writeString(super.mime_type);
         var1.writeInt32(481674261);
         int var3 = super.attributes.size();
         var1.writeInt32(var3);
         byte var4 = 0;

         for(var2 = 0; var2 < var3; ++var2) {
            ((TLRPC.DocumentAttribute)super.attributes.get(var2)).serializeToStream(var1);
         }

         if ((super.flags & 1) != 0) {
            var1.writeInt32(481674261);
            var3 = super.stickers.size();
            var1.writeInt32(var3);

            for(var2 = var4; var2 < var3; ++var2) {
               ((TLRPC.InputDocument)super.stickers.get(var2)).serializeToStream(var1);
            }
         }

         if ((super.flags & 2) != 0) {
            var1.writeInt32(super.ttl_seconds);
         }

      }
   }

   public static class TL_inputMediaUploadedPhoto extends TLRPC.InputMedia {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         super.file = TLRPC.InputFile.TLdeserialize(var1, var1.readInt32(var2), var2);
         if ((super.flags & 1) != 0) {
            int var3 = var1.readInt32(var2);
            int var4 = 0;
            if (var3 != 481674261) {
               if (!var2) {
                  return;
               }

               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }

            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.InputDocument var5 = TLRPC.InputDocument.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               super.stickers.add(var5);
            }
         }

         if ((super.flags & 2) != 0) {
            super.ttl_seconds = var1.readInt32(var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.flags);
         super.file.serializeToStream(var1);
         if ((super.flags & 1) != 0) {
            var1.writeInt32(481674261);
            int var2 = super.stickers.size();
            var1.writeInt32(var2);

            for(int var3 = 0; var3 < var2; ++var3) {
               ((TLRPC.InputDocument)super.stickers.get(var3)).serializeToStream(var1);
            }
         }

         if ((super.flags & 2) != 0) {
            var1.writeInt32(super.ttl_seconds);
         }

      }
   }

   public static class TL_inputMediaVenue extends TLRPC.InputMedia {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.geo_point = TLRPC.InputGeoPoint.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.title = var1.readString(var2);
         super.address = var1.readString(var2);
         super.provider = var1.readString(var2);
         super.venue_id = var1.readString(var2);
         super.venue_type = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         super.geo_point.serializeToStream(var1);
         var1.writeString(super.title);
         var1.writeString(super.address);
         var1.writeString(super.provider);
         var1.writeString(super.venue_id);
         var1.writeString(super.venue_type);
      }
   }

   public static class TL_inputMessageEntityMentionName extends TLRPC.MessageEntity {
      public static int constructor;
      public TLRPC.InputUser user_id;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.offset = var1.readInt32(var2);
         super.length = var1.readInt32(var2);
         this.user_id = TLRPC.InputUser.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.offset);
         var1.writeInt32(super.length);
         this.user_id.serializeToStream(var1);
      }
   }

   public static class TL_inputMessagesFilterChatPhotos extends TLRPC.MessagesFilter {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_inputMessagesFilterContacts extends TLRPC.MessagesFilter {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_inputMessagesFilterDocument extends TLRPC.MessagesFilter {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_inputMessagesFilterEmpty extends TLRPC.MessagesFilter {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_inputMessagesFilterGeo extends TLRPC.MessagesFilter {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_inputMessagesFilterGif extends TLRPC.MessagesFilter {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_inputMessagesFilterMusic extends TLRPC.MessagesFilter {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_inputMessagesFilterMyMentions extends TLRPC.MessagesFilter {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_inputMessagesFilterPhoneCalls extends TLRPC.MessagesFilter {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         var2 = true;
         if ((var3 & 1) == 0) {
            var2 = false;
         }

         super.missed = var2;
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.missed) {
            var2 = super.flags | 1;
         } else {
            var2 = super.flags & -2;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
      }
   }

   public static class TL_inputMessagesFilterPhotoVideo extends TLRPC.MessagesFilter {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_inputMessagesFilterPhotoVideoDocuments extends TLRPC.MessagesFilter {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_inputMessagesFilterPhotos extends TLRPC.MessagesFilter {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_inputMessagesFilterRoundVideo extends TLRPC.MessagesFilter {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_inputMessagesFilterRoundVoice extends TLRPC.MessagesFilter {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_inputMessagesFilterUrl extends TLRPC.MessagesFilter {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_inputMessagesFilterVideo extends TLRPC.MessagesFilter {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_inputMessagesFilterVoice extends TLRPC.MessagesFilter {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_inputNotifyBroadcasts extends TLRPC.InputNotifyPeer {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_inputNotifyChats extends TLRPC.InputNotifyPeer {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_inputNotifyPeer extends TLRPC.InputNotifyPeer {
      public static int constructor;
      public TLRPC.InputPeer peer;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.peer = TLRPC.InputPeer.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.peer.serializeToStream(var1);
      }
   }

   public static class TL_inputNotifyUsers extends TLRPC.InputNotifyPeer {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_inputPaymentCredentials extends TLRPC.InputPaymentCredentials {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         boolean var4 = true;
         if ((var3 & 1) == 0) {
            var4 = false;
         }

         super.save = var4;
         super.data = TLRPC.TL_dataJSON.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.save) {
            var2 = super.flags | 1;
         } else {
            var2 = super.flags & -2;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         super.data.serializeToStream(var1);
      }
   }

   public static class TL_inputPaymentCredentialsAndroidPay extends TLRPC.InputPaymentCredentials {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.payment_token = TLRPC.TL_dataJSON.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.google_transaction_id = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         super.payment_token.serializeToStream(var1);
         var1.writeString(super.google_transaction_id);
      }
   }

   public static class TL_inputPaymentCredentialsSaved extends TLRPC.InputPaymentCredentials {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readString(var2);
         super.tmp_password = var1.readByteArray(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(super.id);
         var1.writeByteArray(super.tmp_password);
      }
   }

   public static class TL_inputPeerChannel extends TLRPC.InputPeer {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.channel_id = var1.readInt32(var2);
         super.access_hash = var1.readInt64(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.channel_id);
         var1.writeInt64(super.access_hash);
      }
   }

   public static class TL_inputPeerChannelFromMessage extends TLRPC.InputPeer {
      public static int constructor;
      public int msg_id;
      public TLRPC.InputPeer peer;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.peer = TLRPC.InputPeer.TLdeserialize(var1, var1.readInt32(var2), var2);
         this.msg_id = var1.readInt32(var2);
         super.channel_id = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.peer.serializeToStream(var1);
         var1.writeInt32(this.msg_id);
         var1.writeInt32(super.channel_id);
      }
   }

   public static class TL_inputPeerChat extends TLRPC.InputPeer {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.chat_id = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.chat_id);
      }
   }

   public static class TL_inputPeerEmpty extends TLRPC.InputPeer {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_inputPeerNotifySettings extends TLObject {
      public static int constructor;
      public int flags;
      public int mute_until;
      public boolean show_previews;
      public boolean silent;
      public String sound;

      public static TLRPC.TL_inputPeerNotifySettings TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_inputPeerNotifySettings", var1));
            }
         } else {
            TLRPC.TL_inputPeerNotifySettings var3 = new TLRPC.TL_inputPeerNotifySettings();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.flags = var1.readInt32(var2);
         if ((this.flags & 1) != 0) {
            this.show_previews = var1.readBool(var2);
         }

         if ((this.flags & 2) != 0) {
            this.silent = var1.readBool(var2);
         }

         if ((this.flags & 4) != 0) {
            this.mute_until = var1.readInt32(var2);
         }

         if ((this.flags & 8) != 0) {
            this.sound = var1.readString(var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.flags);
         if ((this.flags & 1) != 0) {
            var1.writeBool(this.show_previews);
         }

         if ((this.flags & 2) != 0) {
            var1.writeBool(this.silent);
         }

         if ((this.flags & 4) != 0) {
            var1.writeInt32(this.mute_until);
         }

         if ((this.flags & 8) != 0) {
            var1.writeString(this.sound);
         }

      }
   }

   public static class TL_inputPeerPhotoFileLocation extends TLRPC.InputFileLocation {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         boolean var4 = true;
         if ((var3 & 1) == 0) {
            var4 = false;
         }

         super.big = var4;
         super.peer = TLRPC.InputPeer.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.volume_id = var1.readInt64(var2);
         super.local_id = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.big) {
            var2 = super.flags | 1;
         } else {
            var2 = super.flags & -2;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         super.peer.serializeToStream(var1);
         var1.writeInt64(super.volume_id);
         var1.writeInt32(super.local_id);
      }
   }

   public static class TL_inputPeerSelf extends TLRPC.InputPeer {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_inputPeerUser extends TLRPC.InputPeer {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.user_id = var1.readInt32(var2);
         super.access_hash = var1.readInt64(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.user_id);
         var1.writeInt64(super.access_hash);
      }
   }

   public static class TL_inputPeerUserFromMessage extends TLRPC.InputPeer {
      public static int constructor;
      public int msg_id;
      public TLRPC.InputPeer peer;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.peer = TLRPC.InputPeer.TLdeserialize(var1, var1.readInt32(var2), var2);
         this.msg_id = var1.readInt32(var2);
         super.user_id = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.peer.serializeToStream(var1);
         var1.writeInt32(this.msg_id);
         var1.writeInt32(super.user_id);
      }
   }

   public static class TL_inputPhoneCall extends TLObject {
      public static int constructor;
      public long access_hash;
      public long id;

      public static TLRPC.TL_inputPhoneCall TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_inputPhoneCall", var1));
            }
         } else {
            TLRPC.TL_inputPhoneCall var3 = new TLRPC.TL_inputPhoneCall();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.id = var1.readInt64(var2);
         this.access_hash = var1.readInt64(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(this.id);
         var1.writeInt64(this.access_hash);
      }
   }

   public static class TL_inputPhoneContact extends TLObject {
      public static int constructor;
      public long client_id;
      public String first_name;
      public String last_name;
      public String phone;

      public static TLRPC.TL_inputPhoneContact TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_inputPhoneContact", var1));
            }
         } else {
            TLRPC.TL_inputPhoneContact var3 = new TLRPC.TL_inputPhoneContact();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.client_id = var1.readInt64(var2);
         this.phone = var1.readString(var2);
         this.first_name = var1.readString(var2);
         this.last_name = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(this.client_id);
         var1.writeString(this.phone);
         var1.writeString(this.first_name);
         var1.writeString(this.last_name);
      }
   }

   public static class TL_inputPhoto extends TLRPC.InputPhoto {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt64(var2);
         super.access_hash = var1.readInt64(var2);
         super.file_reference = var1.readByteArray(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(super.id);
         var1.writeInt64(super.access_hash);
         var1.writeByteArray(super.file_reference);
      }
   }

   public static class TL_inputPhotoEmpty extends TLRPC.InputPhoto {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_inputPhotoFileLocation extends TLRPC.InputFileLocation {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt64(var2);
         super.access_hash = var1.readInt64(var2);
         super.file_reference = var1.readByteArray(var2);
         super.thumb_size = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(super.id);
         var1.writeInt64(super.access_hash);
         var1.writeByteArray(super.file_reference);
         var1.writeString(super.thumb_size);
      }
   }

   public static class TL_inputPrivacyKeyChatInvite extends TLRPC.InputPrivacyKey {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_inputPrivacyKeyForwards extends TLRPC.InputPrivacyKey {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_inputPrivacyKeyPhoneCall extends TLRPC.InputPrivacyKey {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_inputPrivacyKeyPhoneNumber extends TLRPC.InputPrivacyKey {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_inputPrivacyKeyPhoneP2P extends TLRPC.InputPrivacyKey {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_inputPrivacyKeyProfilePhoto extends TLRPC.InputPrivacyKey {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_inputPrivacyKeyStatusTimestamp extends TLRPC.InputPrivacyKey {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_inputPrivacyValueAllowAll extends TLRPC.InputPrivacyRule {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_inputPrivacyValueAllowChatParticipants extends TLRPC.InputPrivacyRule {
      public static int constructor;
      public ArrayList chats = new ArrayList();

      public void readParams(AbstractSerializedData var1, boolean var2) {
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               this.chats.add(var1.readInt32(var2));
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = this.chats.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            var1.writeInt32((Integer)this.chats.get(var3));
         }

      }
   }

   public static class TL_inputPrivacyValueAllowContacts extends TLRPC.InputPrivacyRule {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_inputPrivacyValueAllowUsers extends TLRPC.InputPrivacyRule {
      public static int constructor;
      public ArrayList users = new ArrayList();

      public void readParams(AbstractSerializedData var1, boolean var2) {
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.InputUser var5 = TLRPC.InputUser.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               this.users.add(var5);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = this.users.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.InputUser)this.users.get(var3)).serializeToStream(var1);
         }

      }
   }

   public static class TL_inputPrivacyValueDisallowAll extends TLRPC.InputPrivacyRule {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_inputPrivacyValueDisallowChatParticipants extends TLRPC.InputPrivacyRule {
      public static int constructor;
      public ArrayList chats = new ArrayList();

      public void readParams(AbstractSerializedData var1, boolean var2) {
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               this.chats.add(var1.readInt32(var2));
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = this.chats.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            var1.writeInt32((Integer)this.chats.get(var3));
         }

      }
   }

   public static class TL_inputPrivacyValueDisallowContacts extends TLRPC.InputPrivacyRule {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_inputPrivacyValueDisallowUsers extends TLRPC.InputPrivacyRule {
      public static int constructor;
      public ArrayList users = new ArrayList();

      public void readParams(AbstractSerializedData var1, boolean var2) {
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.InputUser var5 = TLRPC.InputUser.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               this.users.add(var5);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = this.users.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.InputUser)this.users.get(var3)).serializeToStream(var1);
         }

      }
   }

   public static class TL_inputReportReasonChildAbuse extends TLRPC.ReportReason {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_inputReportReasonCopyright extends TLRPC.ReportReason {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_inputReportReasonOther extends TLRPC.ReportReason {
      public static int constructor;
      public String text;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.text = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.text);
      }
   }

   public static class TL_inputReportReasonPornography extends TLRPC.ReportReason {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_inputReportReasonSpam extends TLRPC.ReportReason {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_inputReportReasonViolence extends TLRPC.ReportReason {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_inputSecureFile extends TLRPC.InputSecureFile {
      public static int constructor;
      public long access_hash;
      public long id;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.id = var1.readInt64(var2);
         this.access_hash = var1.readInt64(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(this.id);
         var1.writeInt64(this.access_hash);
      }
   }

   public static class TL_inputSecureFileLocation extends TLRPC.InputFileLocation {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt64(var2);
         super.access_hash = var1.readInt64(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(super.id);
         var1.writeInt64(super.access_hash);
      }
   }

   public static class TL_inputSecureFileUploaded extends TLRPC.InputSecureFile {
      public static int constructor;
      public byte[] file_hash;
      public long id;
      public String md5_checksum;
      public int parts;
      public byte[] secret;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.id = var1.readInt64(var2);
         this.parts = var1.readInt32(var2);
         this.md5_checksum = var1.readString(var2);
         this.file_hash = var1.readByteArray(var2);
         this.secret = var1.readByteArray(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(this.id);
         var1.writeInt32(this.parts);
         var1.writeString(this.md5_checksum);
         var1.writeByteArray(this.file_hash);
         var1.writeByteArray(this.secret);
      }
   }

   public static class TL_inputSecureValue extends TLObject {
      public static int constructor;
      public TLRPC.TL_secureData data;
      public ArrayList files = new ArrayList();
      public int flags;
      public TLRPC.InputSecureFile front_side;
      public TLRPC.SecurePlainData plain_data;
      public TLRPC.InputSecureFile reverse_side;
      public TLRPC.InputSecureFile selfie;
      public ArrayList translation = new ArrayList();
      public TLRPC.SecureValueType type;

      public static TLRPC.TL_inputSecureValue TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_inputSecureValue", var1));
            }
         } else {
            TLRPC.TL_inputSecureValue var3 = new TLRPC.TL_inputSecureValue();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.flags = var1.readInt32(var2);
         this.type = TLRPC.SecureValueType.TLdeserialize(var1, var1.readInt32(var2), var2);
         if ((this.flags & 1) != 0) {
            this.data = TLRPC.TL_secureData.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         if ((this.flags & 2) != 0) {
            this.front_side = TLRPC.InputSecureFile.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         if ((this.flags & 4) != 0) {
            this.reverse_side = TLRPC.InputSecureFile.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         if ((this.flags & 8) != 0) {
            this.selfie = TLRPC.InputSecureFile.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         int var3 = this.flags;
         byte var4 = 0;
         int var5;
         TLRPC.InputSecureFile var6;
         if ((var3 & 64) != 0) {
            var3 = var1.readInt32(var2);
            if (var3 != 481674261) {
               if (!var2) {
                  return;
               }

               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }

            var5 = var1.readInt32(var2);

            for(var3 = 0; var3 < var5; ++var3) {
               var6 = TLRPC.InputSecureFile.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               this.translation.add(var6);
            }
         }

         if ((this.flags & 16) != 0) {
            var3 = var1.readInt32(var2);
            if (var3 != 481674261) {
               if (!var2) {
                  return;
               }

               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }

            var5 = var1.readInt32(var2);

            for(var3 = var4; var3 < var5; ++var3) {
               var6 = TLRPC.InputSecureFile.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               this.files.add(var6);
            }
         }

         if ((this.flags & 32) != 0) {
            this.plain_data = TLRPC.SecurePlainData.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.flags);
         this.type.serializeToStream(var1);
         if ((this.flags & 1) != 0) {
            this.data.serializeToStream(var1);
         }

         if ((this.flags & 2) != 0) {
            this.front_side.serializeToStream(var1);
         }

         if ((this.flags & 4) != 0) {
            this.reverse_side.serializeToStream(var1);
         }

         if ((this.flags & 8) != 0) {
            this.selfie.serializeToStream(var1);
         }

         int var2 = this.flags;
         byte var3 = 0;
         int var4;
         if ((var2 & 64) != 0) {
            var1.writeInt32(481674261);
            var4 = this.translation.size();
            var1.writeInt32(var4);

            for(var2 = 0; var2 < var4; ++var2) {
               ((TLRPC.InputSecureFile)this.translation.get(var2)).serializeToStream(var1);
            }
         }

         if ((this.flags & 16) != 0) {
            var1.writeInt32(481674261);
            var4 = this.files.size();
            var1.writeInt32(var4);

            for(var2 = var3; var2 < var4; ++var2) {
               ((TLRPC.InputSecureFile)this.files.get(var2)).serializeToStream(var1);
            }
         }

         if ((this.flags & 32) != 0) {
            this.plain_data.serializeToStream(var1);
         }

      }
   }

   public static class TL_inputSingleMedia extends TLObject {
      public static int constructor;
      public ArrayList entities = new ArrayList();
      public int flags;
      public TLRPC.InputMedia media;
      public String message;
      public long random_id;

      public static TLRPC.TL_inputSingleMedia TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_inputSingleMedia", var1));
            }
         } else {
            TLRPC.TL_inputSingleMedia var3 = new TLRPC.TL_inputSingleMedia();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.flags = var1.readInt32(var2);
         this.media = TLRPC.InputMedia.TLdeserialize(var1, var1.readInt32(var2), var2);
         this.random_id = var1.readInt64(var2);
         this.message = var1.readString(var2);
         if ((this.flags & 1) != 0) {
            int var3 = var1.readInt32(var2);
            int var4 = 0;
            if (var3 != 481674261) {
               if (!var2) {
                  return;
               }

               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }

            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.MessageEntity var5 = TLRPC.MessageEntity.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               this.entities.add(var5);
            }
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.flags);
         this.media.serializeToStream(var1);
         var1.writeInt64(this.random_id);
         var1.writeString(this.message);
         if ((this.flags & 1) != 0) {
            var1.writeInt32(481674261);
            int var2 = this.entities.size();
            var1.writeInt32(var2);

            for(int var3 = 0; var3 < var2; ++var3) {
               ((TLRPC.MessageEntity)this.entities.get(var3)).serializeToStream(var1);
            }
         }

      }
   }

   public static class TL_inputStickerSetEmpty extends TLRPC.InputStickerSet {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_inputStickerSetID extends TLRPC.InputStickerSet {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt64(var2);
         super.access_hash = var1.readInt64(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(super.id);
         var1.writeInt64(super.access_hash);
      }
   }

   public static class TL_inputStickerSetShortName extends TLRPC.InputStickerSet {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.short_name = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(super.short_name);
      }
   }

   public static class TL_inputStickerSetThumb extends TLRPC.InputFileLocation {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.stickerset = TLRPC.InputStickerSet.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.volume_id = var1.readInt64(var2);
         super.local_id = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         super.stickerset.serializeToStream(var1);
         var1.writeInt64(super.volume_id);
         var1.writeInt32(super.local_id);
      }
   }

   public static class TL_inputStickeredMediaDocument extends TLRPC.InputStickeredMedia {
      public static int constructor;
      public TLRPC.InputDocument id;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.id = TLRPC.InputDocument.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.id.serializeToStream(var1);
      }
   }

   public static class TL_inputStickeredMediaPhoto extends TLRPC.InputStickeredMedia {
      public static int constructor;
      public TLRPC.InputPhoto id;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.id = TLRPC.InputPhoto.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.id.serializeToStream(var1);
      }
   }

   public static class TL_inputUser extends TLRPC.InputUser {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.user_id = var1.readInt32(var2);
         super.access_hash = var1.readInt64(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.user_id);
         var1.writeInt64(super.access_hash);
      }
   }

   public static class TL_inputUserEmpty extends TLRPC.InputUser {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_inputUserFromMessage extends TLRPC.InputUser {
      public static int constructor;
      public int msg_id;
      public TLRPC.InputPeer peer;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.peer = TLRPC.InputPeer.TLdeserialize(var1, var1.readInt32(var2), var2);
         this.msg_id = var1.readInt32(var2);
         super.user_id = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.peer.serializeToStream(var1);
         var1.writeInt32(this.msg_id);
         var1.writeInt32(super.user_id);
      }
   }

   public static class TL_inputUserSelf extends TLRPC.InputUser {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_inputWallPaper extends TLRPC.InputWallPaper {
      public static int constructor;
      public long access_hash;
      public long id;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.id = var1.readInt64(var2);
         this.access_hash = var1.readInt64(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(this.id);
         var1.writeInt64(this.access_hash);
      }
   }

   public static class TL_inputWallPaperSlug extends TLRPC.InputWallPaper {
      public static int constructor;
      public String slug;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.slug = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.slug);
      }
   }

   public static class TL_inputWebDocument extends TLObject {
      public static int constructor;
      public ArrayList attributes = new ArrayList();
      public String mime_type;
      public int size;
      public String url;

      public static TLRPC.TL_inputWebDocument TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_inputWebDocument", var1));
            }
         } else {
            TLRPC.TL_inputWebDocument var3 = new TLRPC.TL_inputWebDocument();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.url = var1.readString(var2);
         this.size = var1.readInt32(var2);
         this.mime_type = var1.readString(var2);
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.DocumentAttribute var5 = TLRPC.DocumentAttribute.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               this.attributes.add(var5);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.url);
         var1.writeInt32(this.size);
         var1.writeString(this.mime_type);
         var1.writeInt32(481674261);
         int var2 = this.attributes.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.DocumentAttribute)this.attributes.get(var3)).serializeToStream(var1);
         }

      }
   }

   public static class TL_inputWebFileGeoPointLocation extends TLRPC.InputWebFileLocation {
      public static int constructor;
      public long access_hash;
      public TLRPC.InputGeoPoint geo_point;
      public int h;
      public int scale;
      public int w;
      public int zoom;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.geo_point = TLRPC.InputGeoPoint.TLdeserialize(var1, var1.readInt32(var2), var2);
         this.access_hash = var1.readInt64(var2);
         this.w = var1.readInt32(var2);
         this.h = var1.readInt32(var2);
         this.zoom = var1.readInt32(var2);
         this.scale = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.geo_point.serializeToStream(var1);
         var1.writeInt64(this.access_hash);
         var1.writeInt32(this.w);
         var1.writeInt32(this.h);
         var1.writeInt32(this.zoom);
         var1.writeInt32(this.scale);
      }
   }

   public static class TL_inputWebFileLocation extends TLRPC.InputWebFileLocation {
      public static int constructor;
      public long access_hash;
      public String url;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.url = var1.readString(var2);
         this.access_hash = var1.readInt64(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.url);
         var1.writeInt64(this.access_hash);
      }
   }

   public static class TL_invoice extends TLObject {
      public static int constructor;
      public String currency;
      public boolean email_requested;
      public boolean email_to_provider;
      public int flags;
      public boolean flexible;
      public boolean name_requested;
      public boolean phone_requested;
      public boolean phone_to_provider;
      public ArrayList prices = new ArrayList();
      public boolean shipping_address_requested;
      public boolean test;

      public static TLRPC.TL_invoice TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_invoice", var1));
            }
         } else {
            TLRPC.TL_invoice var3 = new TLRPC.TL_invoice();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.flags = var1.readInt32(var2);
         int var3 = this.flags;
         int var4 = 0;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.test = var5;
         if ((this.flags & 2) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.name_requested = var5;
         if ((this.flags & 4) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.phone_requested = var5;
         if ((this.flags & 8) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.email_requested = var5;
         if ((this.flags & 16) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.shipping_address_requested = var5;
         if ((this.flags & 32) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.flexible = var5;
         if ((this.flags & 64) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.phone_to_provider = var5;
         if ((this.flags & 128) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.email_to_provider = var5;
         this.currency = var1.readString(var2);
         var3 = var1.readInt32(var2);
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.TL_labeledPrice var6 = TLRPC.TL_labeledPrice.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               this.prices.add(var6);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.test) {
            var2 = this.flags | 1;
         } else {
            var2 = this.flags & -2;
         }

         this.flags = var2;
         if (this.name_requested) {
            var2 = this.flags | 2;
         } else {
            var2 = this.flags & -3;
         }

         this.flags = var2;
         if (this.phone_requested) {
            var2 = this.flags | 4;
         } else {
            var2 = this.flags & -5;
         }

         this.flags = var2;
         if (this.email_requested) {
            var2 = this.flags | 8;
         } else {
            var2 = this.flags & -9;
         }

         this.flags = var2;
         if (this.shipping_address_requested) {
            var2 = this.flags | 16;
         } else {
            var2 = this.flags & -17;
         }

         this.flags = var2;
         if (this.flexible) {
            var2 = this.flags | 32;
         } else {
            var2 = this.flags & -33;
         }

         this.flags = var2;
         if (this.phone_to_provider) {
            var2 = this.flags | 64;
         } else {
            var2 = this.flags & -65;
         }

         this.flags = var2;
         if (this.email_to_provider) {
            var2 = this.flags | 128;
         } else {
            var2 = this.flags & -129;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         var1.writeString(this.currency);
         var1.writeInt32(481674261);
         int var3 = this.prices.size();
         var1.writeInt32(var3);

         for(var2 = 0; var2 < var3; ++var2) {
            ((TLRPC.TL_labeledPrice)this.prices.get(var2)).serializeToStream(var1);
         }

      }
   }

   public static class TL_jsonArray extends TLRPC.JSONValue {
      public static int constructor;
      public ArrayList value = new ArrayList();

      public void readParams(AbstractSerializedData var1, boolean var2) {
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.JSONValue var5 = TLRPC.JSONValue.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               this.value.add(var5);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = this.value.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.JSONValue)this.value.get(var3)).serializeToStream(var1);
         }

      }
   }

   public static class TL_jsonBool extends TLRPC.JSONValue {
      public static int constructor;
      public boolean value;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.value = var1.readBool(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeBool(this.value);
      }
   }

   public static class TL_jsonNull extends TLRPC.JSONValue {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_jsonNumber extends TLRPC.JSONValue {
      public static int constructor;
      public double value;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.value = var1.readDouble(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeDouble(this.value);
      }
   }

   public static class TL_jsonObject extends TLRPC.JSONValue {
      public static int constructor;
      public ArrayList value = new ArrayList();

      public void readParams(AbstractSerializedData var1, boolean var2) {
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.TL_jsonObjectValue var5 = TLRPC.TL_jsonObjectValue.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               this.value.add(var5);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = this.value.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.TL_jsonObjectValue)this.value.get(var3)).serializeToStream(var1);
         }

      }
   }

   public static class TL_jsonObjectValue extends TLObject {
      public static int constructor;
      public String key;
      public TLRPC.JSONValue value;

      public static TLRPC.TL_jsonObjectValue TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_jsonObjectValue", var1));
            }
         } else {
            TLRPC.TL_jsonObjectValue var3 = new TLRPC.TL_jsonObjectValue();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.key = var1.readString(var2);
         this.value = TLRPC.JSONValue.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.key);
         this.value.serializeToStream(var1);
      }
   }

   public static class TL_jsonString extends TLRPC.JSONValue {
      public static int constructor;
      public String value;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.value = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.value);
      }
   }

   public static class TL_keyboardButton extends TLRPC.KeyboardButton {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.text = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(super.text);
      }
   }

   public static class TL_keyboardButtonBuy extends TLRPC.KeyboardButton {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.text = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(super.text);
      }
   }

   public static class TL_keyboardButtonCallback extends TLRPC.KeyboardButton {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.text = var1.readString(var2);
         super.data = var1.readByteArray(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(super.text);
         var1.writeByteArray(super.data);
      }
   }

   public static class TL_keyboardButtonGame extends TLRPC.KeyboardButton {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.text = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(super.text);
      }
   }

   public static class TL_keyboardButtonRequestGeoLocation extends TLRPC.KeyboardButton {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.text = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(super.text);
      }
   }

   public static class TL_keyboardButtonRequestPhone extends TLRPC.KeyboardButton {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.text = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(super.text);
      }
   }

   public static class TL_keyboardButtonRow extends TLObject {
      public static int constructor;
      public ArrayList buttons = new ArrayList();

      public static TLRPC.TL_keyboardButtonRow TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_keyboardButtonRow", var1));
            }
         } else {
            TLRPC.TL_keyboardButtonRow var3 = new TLRPC.TL_keyboardButtonRow();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.KeyboardButton var5 = TLRPC.KeyboardButton.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               this.buttons.add(var5);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = this.buttons.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.KeyboardButton)this.buttons.get(var3)).serializeToStream(var1);
         }

      }
   }

   public static class TL_keyboardButtonSwitchInline extends TLRPC.KeyboardButton {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         boolean var4 = true;
         if ((var3 & 1) == 0) {
            var4 = false;
         }

         super.same_peer = var4;
         super.text = var1.readString(var2);
         super.query = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.same_peer) {
            var2 = super.flags | 1;
         } else {
            var2 = super.flags & -2;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeString(super.text);
         var1.writeString(super.query);
      }
   }

   public static class TL_keyboardButtonUrl extends TLRPC.KeyboardButton {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.text = var1.readString(var2);
         super.url = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(super.text);
         var1.writeString(super.url);
      }
   }

   public static class TL_keyboardButtonUrlAuth extends TLRPC.KeyboardButton {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         super.text = var1.readString(var2);
         if ((super.flags & 1) != 0) {
            super.fwd_text = var1.readString(var2);
         }

         super.url = var1.readString(var2);
         super.button_id = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.flags);
         var1.writeString(super.text);
         if ((super.flags & 1) != 0) {
            var1.writeString(super.fwd_text);
         }

         var1.writeString(super.url);
         var1.writeInt32(super.button_id);
      }
   }

   public static class TL_labeledPrice extends TLObject {
      public static int constructor;
      public long amount;
      public String label;

      public static TLRPC.TL_labeledPrice TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_labeledPrice", var1));
            }
         } else {
            TLRPC.TL_labeledPrice var3 = new TLRPC.TL_labeledPrice();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.label = var1.readString(var2);
         this.amount = var1.readInt64(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.label);
         var1.writeInt64(this.amount);
      }
   }

   public static class TL_langPackDifference extends TLObject {
      public static int constructor;
      public int from_version;
      public String lang_code;
      public ArrayList strings = new ArrayList();
      public int version;

      public static TLRPC.TL_langPackDifference TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_langPackDifference", var1));
            }
         } else {
            TLRPC.TL_langPackDifference var3 = new TLRPC.TL_langPackDifference();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.lang_code = var1.readString(var2);
         this.from_version = var1.readInt32(var2);
         this.version = var1.readInt32(var2);
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.LangPackString var5 = TLRPC.LangPackString.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               this.strings.add(var5);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.lang_code);
         var1.writeInt32(this.from_version);
         var1.writeInt32(this.version);
         var1.writeInt32(481674261);
         int var2 = this.strings.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.LangPackString)this.strings.get(var3)).serializeToStream(var1);
         }

      }
   }

   public static class TL_langPackLanguage extends TLObject {
      public static int constructor;
      public String base_lang_code;
      public int flags;
      public String lang_code;
      public String name;
      public String native_name;
      public boolean official;
      public String plural_code;
      public boolean rtl;
      public int strings_count;
      public int translated_count;
      public String translations_url;

      public static TLRPC.TL_langPackLanguage TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_langPackLanguage", var1));
            }
         } else {
            TLRPC.TL_langPackLanguage var3 = new TLRPC.TL_langPackLanguage();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.flags = var1.readInt32(var2);
         int var3 = this.flags;
         boolean var4 = true;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.official = var5;
         if ((this.flags & 4) != 0) {
            var5 = var4;
         } else {
            var5 = false;
         }

         this.rtl = var5;
         this.name = var1.readString(var2);
         this.native_name = var1.readString(var2);
         this.lang_code = var1.readString(var2);
         if ((this.flags & 2) != 0) {
            this.base_lang_code = var1.readString(var2);
         }

         this.plural_code = var1.readString(var2);
         this.strings_count = var1.readInt32(var2);
         this.translated_count = var1.readInt32(var2);
         this.translations_url = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.official) {
            var2 = this.flags | 1;
         } else {
            var2 = this.flags & -2;
         }

         this.flags = var2;
         if (this.rtl) {
            var2 = this.flags | 4;
         } else {
            var2 = this.flags & -5;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         var1.writeString(this.name);
         var1.writeString(this.native_name);
         var1.writeString(this.lang_code);
         if ((this.flags & 2) != 0) {
            var1.writeString(this.base_lang_code);
         }

         var1.writeString(this.plural_code);
         var1.writeInt32(this.strings_count);
         var1.writeInt32(this.translated_count);
         var1.writeString(this.translations_url);
      }
   }

   public static class TL_langPackString extends TLRPC.LangPackString {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.key = var1.readString(var2);
         super.value = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(super.key);
         var1.writeString(super.value);
      }
   }

   public static class TL_langPackStringDeleted extends TLRPC.LangPackString {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.key = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(super.key);
      }
   }

   public static class TL_langPackStringPluralized extends TLRPC.LangPackString {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         super.key = var1.readString(var2);
         if ((super.flags & 1) != 0) {
            super.zero_value = var1.readString(var2);
         }

         if ((super.flags & 2) != 0) {
            super.one_value = var1.readString(var2);
         }

         if ((super.flags & 4) != 0) {
            super.two_value = var1.readString(var2);
         }

         if ((super.flags & 8) != 0) {
            super.few_value = var1.readString(var2);
         }

         if ((super.flags & 16) != 0) {
            super.many_value = var1.readString(var2);
         }

         super.other_value = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.flags);
         var1.writeString(super.key);
         if ((super.flags & 1) != 0) {
            var1.writeString(super.zero_value);
         }

         if ((super.flags & 2) != 0) {
            var1.writeString(super.one_value);
         }

         if ((super.flags & 4) != 0) {
            var1.writeString(super.two_value);
         }

         if ((super.flags & 8) != 0) {
            var1.writeString(super.few_value);
         }

         if ((super.flags & 16) != 0) {
            var1.writeString(super.many_value);
         }

         var1.writeString(super.other_value);
      }
   }

   public static class TL_langpack_getDifference extends TLObject {
      public static int constructor;
      public int from_version;
      public String lang_code;
      public String lang_pack;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_langPackDifference.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.lang_pack);
         var1.writeString(this.lang_code);
         var1.writeInt32(this.from_version);
      }
   }

   public static class TL_langpack_getLangPack extends TLObject {
      public static int constructor;
      public String lang_code;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_langPackDifference.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.lang_code);
      }
   }

   public static class TL_langpack_getLanguage extends TLObject {
      public static int constructor;
      public String lang_code;
      public String lang_pack;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_langPackLanguage.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.lang_pack);
         var1.writeString(this.lang_code);
      }
   }

   public static class TL_langpack_getLanguages extends TLObject {
      public static int constructor;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         TLRPC.Vector var4 = new TLRPC.Vector();
         int var5 = var1.readInt32(var3);

         for(var2 = 0; var2 < var5; ++var2) {
            TLRPC.TL_langPackLanguage var6 = TLRPC.TL_langPackLanguage.TLdeserialize(var1, var1.readInt32(var3), var3);
            if (var6 == null) {
               return var4;
            }

            var4.objects.add(var6);
         }

         return var4;
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_langpack_getStrings extends TLObject {
      public static int constructor;
      public ArrayList keys = new ArrayList();
      public String lang_code;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         TLRPC.Vector var4 = new TLRPC.Vector();
         int var5 = var1.readInt32(var3);

         for(var2 = 0; var2 < var5; ++var2) {
            TLRPC.LangPackString var6 = TLRPC.LangPackString.TLdeserialize(var1, var1.readInt32(var3), var3);
            if (var6 == null) {
               return var4;
            }

            var4.objects.add(var6);
         }

         return var4;
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.lang_code);
         var1.writeInt32(481674261);
         int var2 = this.keys.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            var1.writeString((String)this.keys.get(var3));
         }

      }
   }

   public static class TL_maskCoords extends TLObject {
      public static int constructor;
      public int n;
      public double x;
      public double y;
      public double zoom;

      public static TLRPC.TL_maskCoords TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_maskCoords", var1));
            }
         } else {
            TLRPC.TL_maskCoords var3 = new TLRPC.TL_maskCoords();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.n = var1.readInt32(var2);
         this.x = var1.readDouble(var2);
         this.y = var1.readDouble(var2);
         this.zoom = var1.readDouble(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.n);
         var1.writeDouble(this.x);
         var1.writeDouble(this.y);
         var1.writeDouble(this.zoom);
      }
   }

   public static class TL_message extends TLRPC.Message {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         int var4 = 0;
         boolean var5;
         if ((var3 & 2) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.out = var5;
         if ((super.flags & 16) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.mentioned = var5;
         if ((super.flags & 32) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.media_unread = var5;
         if ((super.flags & 8192) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.silent = var5;
         if ((super.flags & 16384) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.post = var5;
         if ((super.flags & 262144) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.from_scheduled = var5;
         if ((super.flags & 524288) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.legacy = var5;
         super.id = var1.readInt32(var2);
         if ((super.flags & 256) != 0) {
            super.from_id = var1.readInt32(var2);
         }

         super.to_id = TLRPC.Peer.TLdeserialize(var1, var1.readInt32(var2), var2);
         if ((super.flags & 4) != 0) {
            super.fwd_from = TLRPC.MessageFwdHeader.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         if ((super.flags & 2048) != 0) {
            super.via_bot_id = var1.readInt32(var2);
         }

         if ((super.flags & 8) != 0) {
            super.reply_to_msg_id = var1.readInt32(var2);
         }

         super.date = var1.readInt32(var2);
         super.message = var1.readString(var2);
         if ((super.flags & 512) != 0) {
            super.media = TLRPC.MessageMedia.TLdeserialize(var1, var1.readInt32(var2), var2);
            TLRPC.MessageMedia var6 = super.media;
            if (var6 != null) {
               super.ttl = var6.ttl_seconds;
            }

            var6 = super.media;
            if (var6 != null && !TextUtils.isEmpty(var6.captionLegacy)) {
               super.message = super.media.captionLegacy;
            }
         }

         if ((super.flags & 64) != 0) {
            super.reply_markup = TLRPC.ReplyMarkup.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         if ((super.flags & 128) != 0) {
            var3 = var1.readInt32(var2);
            if (var3 != 481674261) {
               if (!var2) {
                  return;
               }

               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }

            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.MessageEntity var7 = TLRPC.MessageEntity.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var7 == null) {
                  return;
               }

               super.entities.add(var7);
            }
         }

         if ((super.flags & 1024) != 0) {
            super.views = var1.readInt32(var2);
         }

         if ((super.flags & '耀') != 0) {
            super.edit_date = var1.readInt32(var2);
         }

         if ((super.flags & 65536) != 0) {
            super.post_author = var1.readString(var2);
         }

         if ((super.flags & 131072) != 0) {
            super.grouped_id = var1.readInt64(var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.out) {
            var2 = super.flags | 2;
         } else {
            var2 = super.flags & -3;
         }

         super.flags = var2;
         if (super.mentioned) {
            var2 = super.flags | 16;
         } else {
            var2 = super.flags & -17;
         }

         super.flags = var2;
         if (super.media_unread) {
            var2 = super.flags | 32;
         } else {
            var2 = super.flags & -33;
         }

         super.flags = var2;
         if (super.silent) {
            var2 = super.flags | 8192;
         } else {
            var2 = super.flags & -8193;
         }

         super.flags = var2;
         if (super.post) {
            var2 = super.flags | 16384;
         } else {
            var2 = super.flags & -16385;
         }

         super.flags = var2;
         if (super.from_scheduled) {
            var2 = super.flags | 262144;
         } else {
            var2 = super.flags & -262145;
         }

         super.flags = var2;
         if (super.legacy) {
            var2 = super.flags | 524288;
         } else {
            var2 = super.flags & -524289;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt32(super.id);
         if ((super.flags & 256) != 0) {
            var1.writeInt32(super.from_id);
         }

         super.to_id.serializeToStream(var1);
         if ((super.flags & 4) != 0) {
            super.fwd_from.serializeToStream(var1);
         }

         if ((super.flags & 2048) != 0) {
            var1.writeInt32(super.via_bot_id);
         }

         if ((super.flags & 8) != 0) {
            var1.writeInt32(super.reply_to_msg_id);
         }

         var1.writeInt32(super.date);
         var1.writeString(super.message);
         if ((super.flags & 512) != 0) {
            super.media.serializeToStream(var1);
         }

         if ((super.flags & 64) != 0) {
            super.reply_markup.serializeToStream(var1);
         }

         if ((super.flags & 128) != 0) {
            var1.writeInt32(481674261);
            int var3 = super.entities.size();
            var1.writeInt32(var3);

            for(var2 = 0; var2 < var3; ++var2) {
               ((TLRPC.MessageEntity)super.entities.get(var2)).serializeToStream(var1);
            }
         }

         if ((super.flags & 1024) != 0) {
            var1.writeInt32(super.views);
         }

         if ((super.flags & '耀') != 0) {
            var1.writeInt32(super.edit_date);
         }

         if ((super.flags & 65536) != 0) {
            var1.writeString(super.post_author);
         }

         if ((super.flags & 131072) != 0) {
            var1.writeInt64(super.grouped_id);
         }

         this.writeAttachPath(var1);
      }
   }

   public static class TL_messageActionBotAllowed extends TLRPC.MessageAction {
      public static int constructor;
      public String domain;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.domain = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.domain);
      }
   }

   public static class TL_messageActionChannelCreate extends TLRPC.MessageAction {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.title = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(super.title);
      }
   }

   public static class TL_messageActionChannelMigrateFrom extends TLRPC.MessageAction {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.title = var1.readString(var2);
         super.chat_id = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(super.title);
         var1.writeInt32(super.chat_id);
      }
   }

   public static class TL_messageActionChatAddUser extends TLRPC.MessageAction {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               super.users.add(var1.readInt32(var2));
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = super.users.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            var1.writeInt32((Integer)super.users.get(var3));
         }

      }
   }

   public static class TL_messageActionChatAddUser_old extends TLRPC.TL_messageActionChatAddUser {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.user_id = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.user_id);
      }
   }

   public static class TL_messageActionChatCreate extends TLRPC.MessageAction {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.title = var1.readString(var2);
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               super.users.add(var1.readInt32(var2));
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(super.title);
         var1.writeInt32(481674261);
         int var2 = super.users.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            var1.writeInt32((Integer)super.users.get(var3));
         }

      }
   }

   public static class TL_messageActionChatDeletePhoto extends TLRPC.MessageAction {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_messageActionChatDeleteUser extends TLRPC.MessageAction {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.user_id = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.user_id);
      }
   }

   public static class TL_messageActionChatEditPhoto extends TLRPC.MessageAction {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.photo = TLRPC.Photo.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         super.photo.serializeToStream(var1);
      }
   }

   public static class TL_messageActionChatEditTitle extends TLRPC.MessageAction {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.title = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(super.title);
      }
   }

   public static class TL_messageActionChatJoinedByLink extends TLRPC.MessageAction {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.inviter_id = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.inviter_id);
      }
   }

   public static class TL_messageActionChatMigrateTo extends TLRPC.MessageAction {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.channel_id = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.channel_id);
      }
   }

   public static class TL_messageActionContactSignUp extends TLRPC.MessageAction {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_messageActionCreatedBroadcastList extends TLRPC.MessageAction {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_messageActionCustomAction extends TLRPC.MessageAction {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.message = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(super.message);
      }
   }

   public static class TL_messageActionEmpty extends TLRPC.MessageAction {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_messageActionGameScore extends TLRPC.MessageAction {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.game_id = var1.readInt64(var2);
         super.score = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(super.game_id);
         var1.writeInt32(super.score);
      }
   }

   public static class TL_messageActionGroupCall extends TLRPC.MessageAction {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         super.call = TLRPC.TL_inputGroupCall.TLdeserialize(var1, var1.readInt32(var2), var2);
         if ((super.flags & 1) != 0) {
            super.duration = var1.readInt32(var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.flags);
         super.call.serializeToStream(var1);
         if ((super.flags & 1) != 0) {
            var1.writeInt32(super.duration);
         }

      }
   }

   public static class TL_messageActionHistoryClear extends TLRPC.MessageAction {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_messageActionLoginUnknownLocation extends TLRPC.MessageAction {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.title = var1.readString(var2);
         super.address = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(super.title);
         var1.writeString(super.address);
      }
   }

   public static class TL_messageActionPaymentSent extends TLRPC.MessageAction {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.currency = var1.readString(var2);
         super.total_amount = var1.readInt64(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(super.currency);
         var1.writeInt64(super.total_amount);
      }
   }

   public static class TL_messageActionPhoneCall extends TLRPC.MessageAction {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         boolean var3;
         if ((super.flags & 4) != 0) {
            var3 = true;
         } else {
            var3 = false;
         }

         super.video = var3;
         super.call_id = var1.readInt64(var2);
         if ((super.flags & 1) != 0) {
            super.reason = TLRPC.PhoneCallDiscardReason.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         if ((super.flags & 2) != 0) {
            super.duration = var1.readInt32(var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.video) {
            var2 = super.flags | 4;
         } else {
            var2 = super.flags & -5;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt64(super.call_id);
         if ((super.flags & 1) != 0) {
            super.reason.serializeToStream(var1);
         }

         if ((super.flags & 2) != 0) {
            var1.writeInt32(super.duration);
         }

      }
   }

   public static class TL_messageActionPinMessage extends TLRPC.MessageAction {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_messageActionScreenshotTaken extends TLRPC.MessageAction {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_messageActionSecureValuesSent extends TLRPC.MessageAction {
      public static int constructor;
      public ArrayList types = new ArrayList();

      public void readParams(AbstractSerializedData var1, boolean var2) {
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.SecureValueType var5 = TLRPC.SecureValueType.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               this.types.add(var5);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = this.types.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.SecureValueType)this.types.get(var3)).serializeToStream(var1);
         }

      }
   }

   public static class TL_messageActionTTLChange extends TLRPC.MessageAction {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.ttl = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.ttl);
      }
   }

   public static class TL_messageActionUserJoined extends TLRPC.MessageAction {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_messageActionUserUpdatedPhoto extends TLRPC.MessageAction {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.newUserPhoto = TLRPC.UserProfilePhoto.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         super.newUserPhoto.serializeToStream(var1);
      }
   }

   public static class TL_messageEmpty extends TLRPC.Message {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt32(var2);
         super.to_id = new TLRPC.TL_peerUser();
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.id);
      }
   }

   public static class TL_messageEncryptedAction extends TLRPC.MessageAction {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.encryptedAction = TLRPC.DecryptedMessageAction.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         super.encryptedAction.serializeToStream(var1);
      }
   }

   public static class TL_messageEntityBlockquote extends TLRPC.MessageEntity {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.offset = var1.readInt32(var2);
         super.length = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.offset);
         var1.writeInt32(super.length);
      }
   }

   public static class TL_messageEntityBold extends TLRPC.MessageEntity {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.offset = var1.readInt32(var2);
         super.length = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.offset);
         var1.writeInt32(super.length);
      }
   }

   public static class TL_messageEntityBotCommand extends TLRPC.MessageEntity {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.offset = var1.readInt32(var2);
         super.length = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.offset);
         var1.writeInt32(super.length);
      }
   }

   public static class TL_messageEntityCashtag extends TLRPC.MessageEntity {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.offset = var1.readInt32(var2);
         super.length = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.offset);
         var1.writeInt32(super.length);
      }
   }

   public static class TL_messageEntityCode extends TLRPC.MessageEntity {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.offset = var1.readInt32(var2);
         super.length = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.offset);
         var1.writeInt32(super.length);
      }
   }

   public static class TL_messageEntityEmail extends TLRPC.MessageEntity {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.offset = var1.readInt32(var2);
         super.length = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.offset);
         var1.writeInt32(super.length);
      }
   }

   public static class TL_messageEntityHashtag extends TLRPC.MessageEntity {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.offset = var1.readInt32(var2);
         super.length = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.offset);
         var1.writeInt32(super.length);
      }
   }

   public static class TL_messageEntityItalic extends TLRPC.MessageEntity {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.offset = var1.readInt32(var2);
         super.length = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.offset);
         var1.writeInt32(super.length);
      }
   }

   public static class TL_messageEntityMention extends TLRPC.MessageEntity {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.offset = var1.readInt32(var2);
         super.length = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.offset);
         var1.writeInt32(super.length);
      }
   }

   public static class TL_messageEntityMentionName extends TLRPC.MessageEntity {
      public static int constructor;
      public int user_id;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.offset = var1.readInt32(var2);
         super.length = var1.readInt32(var2);
         this.user_id = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.offset);
         var1.writeInt32(super.length);
         var1.writeInt32(this.user_id);
      }
   }

   public static class TL_messageEntityPhone extends TLRPC.MessageEntity {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.offset = var1.readInt32(var2);
         super.length = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.offset);
         var1.writeInt32(super.length);
      }
   }

   public static class TL_messageEntityPre extends TLRPC.MessageEntity {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.offset = var1.readInt32(var2);
         super.length = var1.readInt32(var2);
         super.language = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.offset);
         var1.writeInt32(super.length);
         var1.writeString(super.language);
      }
   }

   public static class TL_messageEntityStrike extends TLRPC.MessageEntity {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.offset = var1.readInt32(var2);
         super.length = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.offset);
         var1.writeInt32(super.length);
      }
   }

   public static class TL_messageEntityTextUrl extends TLRPC.MessageEntity {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.offset = var1.readInt32(var2);
         super.length = var1.readInt32(var2);
         super.url = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.offset);
         var1.writeInt32(super.length);
         var1.writeString(super.url);
      }
   }

   public static class TL_messageEntityUnderline extends TLRPC.MessageEntity {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.offset = var1.readInt32(var2);
         super.length = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.offset);
         var1.writeInt32(super.length);
      }
   }

   public static class TL_messageEntityUnknown extends TLRPC.MessageEntity {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.offset = var1.readInt32(var2);
         super.length = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.offset);
         var1.writeInt32(super.length);
      }
   }

   public static class TL_messageEntityUrl extends TLRPC.MessageEntity {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.offset = var1.readInt32(var2);
         super.length = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.offset);
         var1.writeInt32(super.length);
      }
   }

   public static class TL_messageForwarded_old extends TLRPC.TL_messageForwarded_old2 {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt32(var2);
         super.fwd_from = new TLRPC.TL_messageFwdHeader();
         super.fwd_from.from_id = var1.readInt32(var2);
         TLRPC.MessageFwdHeader var3 = super.fwd_from;
         var3.flags |= 1;
         var3.date = var1.readInt32(var2);
         super.from_id = var1.readInt32(var2);
         super.to_id = TLRPC.Peer.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.out = var1.readBool(var2);
         super.unread = var1.readBool(var2);
         super.flags |= 772;
         super.date = var1.readInt32(var2);
         super.message = var1.readString(var2);
         super.media = TLRPC.MessageMedia.TLdeserialize(var1, var1.readInt32(var2), var2);
         TLRPC.MessageMedia var4 = super.media;
         if (var4 != null && !TextUtils.isEmpty(var4.captionLegacy)) {
            super.message = super.media.captionLegacy;
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.id);
         var1.writeInt32(super.fwd_from.from_id);
         var1.writeInt32(super.fwd_from.date);
         var1.writeInt32(super.from_id);
         super.to_id.serializeToStream(var1);
         var1.writeBool(super.out);
         var1.writeBool(super.unread);
         var1.writeInt32(super.date);
         var1.writeString(super.message);
         super.media.serializeToStream(var1);
         this.writeAttachPath(var1);
      }
   }

   public static class TL_messageForwarded_old2 extends TLRPC.Message {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         boolean var4 = false;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.unread = var5;
         if ((super.flags & 2) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.out = var5;
         if ((super.flags & 16) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.mentioned = var5;
         var5 = var4;
         if ((super.flags & 32) != 0) {
            var5 = true;
         }

         super.media_unread = var5;
         super.id = var1.readInt32(var2);
         super.fwd_from = new TLRPC.TL_messageFwdHeader();
         super.fwd_from.from_id = var1.readInt32(var2);
         TLRPC.MessageFwdHeader var6 = super.fwd_from;
         var6.flags |= 1;
         var6.date = var1.readInt32(var2);
         super.from_id = var1.readInt32(var2);
         super.to_id = TLRPC.Peer.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.date = var1.readInt32(var2);
         super.message = var1.readString(var2);
         super.flags |= 772;
         super.media = TLRPC.MessageMedia.TLdeserialize(var1, var1.readInt32(var2), var2);
         TLRPC.MessageMedia var7 = super.media;
         if (var7 != null && !TextUtils.isEmpty(var7.captionLegacy)) {
            super.message = super.media.captionLegacy;
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.unread) {
            var2 = super.flags | 1;
         } else {
            var2 = super.flags & -2;
         }

         super.flags = var2;
         if (super.out) {
            var2 = super.flags | 2;
         } else {
            var2 = super.flags & -3;
         }

         super.flags = var2;
         if (super.mentioned) {
            var2 = super.flags | 16;
         } else {
            var2 = super.flags & -17;
         }

         super.flags = var2;
         if (super.media_unread) {
            var2 = super.flags | 32;
         } else {
            var2 = super.flags & -33;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt32(super.id);
         var1.writeInt32(super.fwd_from.from_id);
         var1.writeInt32(super.fwd_from.date);
         var1.writeInt32(super.from_id);
         super.to_id.serializeToStream(var1);
         var1.writeInt32(super.date);
         var1.writeString(super.message);
         super.media.serializeToStream(var1);
      }
   }

   public static class TL_messageFwdHeader extends TLRPC.MessageFwdHeader {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         if ((super.flags & 1) != 0) {
            super.from_id = var1.readInt32(var2);
         }

         if ((super.flags & 32) != 0) {
            super.from_name = var1.readString(var2);
         }

         super.date = var1.readInt32(var2);
         if ((super.flags & 2) != 0) {
            super.channel_id = var1.readInt32(var2);
         }

         if ((super.flags & 4) != 0) {
            super.channel_post = var1.readInt32(var2);
         }

         if ((super.flags & 8) != 0) {
            super.post_author = var1.readString(var2);
         }

         if ((super.flags & 16) != 0) {
            super.saved_from_peer = TLRPC.Peer.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         if ((super.flags & 16) != 0) {
            super.saved_from_msg_id = var1.readInt32(var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.flags);
         if ((super.flags & 1) != 0) {
            var1.writeInt32(super.from_id);
         }

         if ((super.flags & 32) != 0) {
            var1.writeString(super.from_name);
         }

         var1.writeInt32(super.date);
         if ((super.flags & 2) != 0) {
            var1.writeInt32(super.channel_id);
         }

         if ((super.flags & 4) != 0) {
            var1.writeInt32(super.channel_post);
         }

         if ((super.flags & 8) != 0) {
            var1.writeString(super.post_author);
         }

         if ((super.flags & 16) != 0) {
            super.saved_from_peer.serializeToStream(var1);
         }

         if ((super.flags & 16) != 0) {
            var1.writeInt32(super.saved_from_msg_id);
         }

      }
   }

   public static class TL_messageFwdHeader_layer68 extends TLRPC.TL_messageFwdHeader {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         if ((super.flags & 1) != 0) {
            super.from_id = var1.readInt32(var2);
         }

         super.date = var1.readInt32(var2);
         if ((super.flags & 2) != 0) {
            super.channel_id = var1.readInt32(var2);
         }

         if ((super.flags & 4) != 0) {
            super.channel_post = var1.readInt32(var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.flags);
         if ((super.flags & 1) != 0) {
            var1.writeInt32(super.from_id);
         }

         var1.writeInt32(super.date);
         if ((super.flags & 2) != 0) {
            var1.writeInt32(super.channel_id);
         }

         if ((super.flags & 4) != 0) {
            var1.writeInt32(super.channel_post);
         }

      }
   }

   public static class TL_messageFwdHeader_layer72 extends TLRPC.TL_messageFwdHeader {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         if ((super.flags & 1) != 0) {
            super.from_id = var1.readInt32(var2);
         }

         super.date = var1.readInt32(var2);
         if ((super.flags & 2) != 0) {
            super.channel_id = var1.readInt32(var2);
         }

         if ((super.flags & 4) != 0) {
            super.channel_post = var1.readInt32(var2);
         }

         if ((super.flags & 8) != 0) {
            super.post_author = var1.readString(var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.flags);
         if ((super.flags & 1) != 0) {
            var1.writeInt32(super.from_id);
         }

         var1.writeInt32(super.date);
         if ((super.flags & 2) != 0) {
            var1.writeInt32(super.channel_id);
         }

         if ((super.flags & 4) != 0) {
            var1.writeInt32(super.channel_post);
         }

         if ((super.flags & 8) != 0) {
            var1.writeString(super.post_author);
         }

      }
   }

   public static class TL_messageFwdHeader_layer96 extends TLRPC.TL_messageFwdHeader {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         if ((super.flags & 1) != 0) {
            super.from_id = var1.readInt32(var2);
         }

         super.date = var1.readInt32(var2);
         if ((super.flags & 2) != 0) {
            super.channel_id = var1.readInt32(var2);
         }

         if ((super.flags & 4) != 0) {
            super.channel_post = var1.readInt32(var2);
         }

         if ((super.flags & 8) != 0) {
            super.post_author = var1.readString(var2);
         }

         if ((super.flags & 16) != 0) {
            super.saved_from_peer = TLRPC.Peer.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         if ((super.flags & 16) != 0) {
            super.saved_from_msg_id = var1.readInt32(var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.flags);
         if ((super.flags & 1) != 0) {
            var1.writeInt32(super.from_id);
         }

         var1.writeInt32(super.date);
         if ((super.flags & 2) != 0) {
            var1.writeInt32(super.channel_id);
         }

         if ((super.flags & 4) != 0) {
            var1.writeInt32(super.channel_post);
         }

         if ((super.flags & 8) != 0) {
            var1.writeString(super.post_author);
         }

         if ((super.flags & 16) != 0) {
            super.saved_from_peer.serializeToStream(var1);
         }

         if ((super.flags & 16) != 0) {
            var1.writeInt32(super.saved_from_msg_id);
         }

      }
   }

   public static class TL_messageMediaAudio_layer45 extends TLRPC.MessageMedia {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.audio_unused = TLRPC.Audio.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         super.audio_unused.serializeToStream(var1);
      }
   }

   public static class TL_messageMediaContact extends TLRPC.MessageMedia {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.phone_number = var1.readString(var2);
         super.first_name = var1.readString(var2);
         super.last_name = var1.readString(var2);
         super.vcard = var1.readString(var2);
         super.user_id = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(super.phone_number);
         var1.writeString(super.first_name);
         var1.writeString(super.last_name);
         var1.writeString(super.vcard);
         var1.writeInt32(super.user_id);
      }
   }

   public static class TL_messageMediaContact_layer81 extends TLRPC.TL_messageMediaContact {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.phone_number = var1.readString(var2);
         super.first_name = var1.readString(var2);
         super.last_name = var1.readString(var2);
         super.user_id = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(super.phone_number);
         var1.writeString(super.first_name);
         var1.writeString(super.last_name);
         var1.writeInt32(super.user_id);
      }
   }

   public static class TL_messageMediaDocument extends TLRPC.MessageMedia {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         if ((super.flags & 1) != 0) {
            super.document = TLRPC.Document.TLdeserialize(var1, var1.readInt32(var2), var2);
         } else {
            super.document = new TLRPC.TL_documentEmpty();
         }

         if ((super.flags & 4) != 0) {
            super.ttl_seconds = var1.readInt32(var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.flags);
         if ((super.flags & 1) != 0) {
            super.document.serializeToStream(var1);
         }

         if ((super.flags & 4) != 0) {
            var1.writeInt32(super.ttl_seconds);
         }

      }
   }

   public static class TL_messageMediaDocument_layer68 extends TLRPC.TL_messageMediaDocument {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.document = TLRPC.Document.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.captionLegacy = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         super.document.serializeToStream(var1);
         var1.writeString(super.captionLegacy);
      }
   }

   public static class TL_messageMediaDocument_layer74 extends TLRPC.TL_messageMediaDocument {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         if ((super.flags & 1) != 0) {
            super.document = TLRPC.Document.TLdeserialize(var1, var1.readInt32(var2), var2);
         } else {
            super.document = new TLRPC.TL_documentEmpty();
         }

         if ((super.flags & 2) != 0) {
            super.captionLegacy = var1.readString(var2);
         }

         if ((super.flags & 4) != 0) {
            super.ttl_seconds = var1.readInt32(var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.flags);
         if ((super.flags & 1) != 0) {
            super.document.serializeToStream(var1);
         }

         if ((super.flags & 2) != 0) {
            var1.writeString(super.captionLegacy);
         }

         if ((super.flags & 4) != 0) {
            var1.writeInt32(super.ttl_seconds);
         }

      }
   }

   public static class TL_messageMediaDocument_old extends TLRPC.TL_messageMediaDocument {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.document = TLRPC.Document.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         super.document.serializeToStream(var1);
      }
   }

   public static class TL_messageMediaEmpty extends TLRPC.MessageMedia {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_messageMediaGame extends TLRPC.MessageMedia {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.game = TLRPC.TL_game.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         super.game.serializeToStream(var1);
      }
   }

   public static class TL_messageMediaGeo extends TLRPC.MessageMedia {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.geo = TLRPC.GeoPoint.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         super.geo.serializeToStream(var1);
      }
   }

   public static class TL_messageMediaGeoLive extends TLRPC.MessageMedia {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.geo = TLRPC.GeoPoint.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.period = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         super.geo.serializeToStream(var1);
         var1.writeInt32(super.period);
      }
   }

   public static class TL_messageMediaInvoice extends TLRPC.MessageMedia {
      public static int constructor;
      public TLRPC.WebDocument photo;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         boolean var4 = false;
         boolean var5;
         if ((var3 & 2) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.shipping_address_requested = var5;
         var5 = var4;
         if ((super.flags & 8) != 0) {
            var5 = true;
         }

         super.test = var5;
         super.title = var1.readString(var2);
         super.description = var1.readString(var2);
         if ((super.flags & 1) != 0) {
            this.photo = TLRPC.WebDocument.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         if ((super.flags & 4) != 0) {
            super.receipt_msg_id = var1.readInt32(var2);
         }

         super.currency = var1.readString(var2);
         super.total_amount = var1.readInt64(var2);
         super.start_param = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.shipping_address_requested) {
            var2 = super.flags | 2;
         } else {
            var2 = super.flags & -3;
         }

         super.flags = var2;
         if (super.test) {
            var2 = super.flags | 8;
         } else {
            var2 = super.flags & -9;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeString(super.title);
         var1.writeString(super.description);
         if ((super.flags & 1) != 0) {
            this.photo.serializeToStream(var1);
         }

         if ((super.flags & 4) != 0) {
            var1.writeInt32(super.receipt_msg_id);
         }

         var1.writeString(super.currency);
         var1.writeInt64(super.total_amount);
         var1.writeString(super.start_param);
      }
   }

   public static class TL_messageMediaPhoto extends TLRPC.MessageMedia {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         if ((super.flags & 1) != 0) {
            super.photo = TLRPC.Photo.TLdeserialize(var1, var1.readInt32(var2), var2);
         } else {
            super.photo = new TLRPC.TL_photoEmpty();
         }

         if ((super.flags & 4) != 0) {
            super.ttl_seconds = var1.readInt32(var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.flags);
         if ((super.flags & 1) != 0) {
            super.photo.serializeToStream(var1);
         }

         if ((super.flags & 4) != 0) {
            var1.writeInt32(super.ttl_seconds);
         }

      }
   }

   public static class TL_messageMediaPhoto_layer68 extends TLRPC.TL_messageMediaPhoto {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.photo = TLRPC.Photo.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.captionLegacy = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         super.photo.serializeToStream(var1);
         var1.writeString(super.captionLegacy);
      }
   }

   public static class TL_messageMediaPhoto_layer74 extends TLRPC.TL_messageMediaPhoto {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         if ((super.flags & 1) != 0) {
            super.photo = TLRPC.Photo.TLdeserialize(var1, var1.readInt32(var2), var2);
         } else {
            super.photo = new TLRPC.TL_photoEmpty();
         }

         if ((super.flags & 2) != 0) {
            super.captionLegacy = var1.readString(var2);
         }

         if ((super.flags & 4) != 0) {
            super.ttl_seconds = var1.readInt32(var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.flags);
         if ((super.flags & 1) != 0) {
            super.photo.serializeToStream(var1);
         }

         if ((super.flags & 2) != 0) {
            var1.writeString(super.captionLegacy);
         }

         if ((super.flags & 4) != 0) {
            var1.writeInt32(super.ttl_seconds);
         }

      }
   }

   public static class TL_messageMediaPhoto_old extends TLRPC.TL_messageMediaPhoto {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.photo = TLRPC.Photo.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         super.photo.serializeToStream(var1);
      }
   }

   public static class TL_messageMediaPoll extends TLRPC.MessageMedia {
      public static int constructor;
      public TLRPC.TL_poll poll;
      public TLRPC.TL_pollResults results;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.poll = TLRPC.TL_poll.TLdeserialize(var1, var1.readInt32(var2), var2);
         this.results = TLRPC.TL_pollResults.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.poll.serializeToStream(var1);
         this.results.serializeToStream(var1);
      }
   }

   public static class TL_messageMediaUnsupported extends TLRPC.MessageMedia {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_messageMediaUnsupported_old extends TLRPC.TL_messageMediaUnsupported {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.bytes = var1.readByteArray(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeByteArray(super.bytes);
      }
   }

   public static class TL_messageMediaVenue extends TLRPC.MessageMedia {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.geo = TLRPC.GeoPoint.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.title = var1.readString(var2);
         super.address = var1.readString(var2);
         super.provider = var1.readString(var2);
         super.venue_id = var1.readString(var2);
         super.venue_type = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         super.geo.serializeToStream(var1);
         var1.writeString(super.title);
         var1.writeString(super.address);
         var1.writeString(super.provider);
         var1.writeString(super.venue_id);
         var1.writeString(super.venue_type);
      }
   }

   public static class TL_messageMediaVenue_layer71 extends TLRPC.MessageMedia {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.geo = TLRPC.GeoPoint.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.title = var1.readString(var2);
         super.address = var1.readString(var2);
         super.provider = var1.readString(var2);
         super.venue_id = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         super.geo.serializeToStream(var1);
         var1.writeString(super.title);
         var1.writeString(super.address);
         var1.writeString(super.provider);
         var1.writeString(super.venue_id);
      }
   }

   public static class TL_messageMediaVideo_layer45 extends TLRPC.MessageMedia {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.video_unused = TLRPC.Video.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.captionLegacy = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         super.video_unused.serializeToStream(var1);
         var1.writeString(super.captionLegacy);
      }
   }

   public static class TL_messageMediaVideo_old extends TLRPC.TL_messageMediaVideo_layer45 {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.video_unused = TLRPC.Video.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         super.video_unused.serializeToStream(var1);
      }
   }

   public static class TL_messageMediaWebPage extends TLRPC.MessageMedia {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.webpage = TLRPC.WebPage.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         super.webpage.serializeToStream(var1);
      }
   }

   public static class TL_messageRange extends TLObject {
      public static int constructor;
      public int max_id;
      public int min_id;

      public static TLRPC.TL_messageRange TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_messageRange", var1));
            }
         } else {
            TLRPC.TL_messageRange var3 = new TLRPC.TL_messageRange();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.min_id = var1.readInt32(var2);
         this.max_id = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.min_id);
         var1.writeInt32(this.max_id);
      }
   }

   public static class TL_messageService extends TLRPC.Message {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         boolean var4 = true;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.unread = var5;
         if ((super.flags & 2) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.out = var5;
         if ((super.flags & 16) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.mentioned = var5;
         if ((super.flags & 32) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.media_unread = var5;
         if ((super.flags & 8192) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.silent = var5;
         if ((super.flags & 16384) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.post = var5;
         if ((super.flags & 524288) != 0) {
            var5 = var4;
         } else {
            var5 = false;
         }

         super.legacy = var5;
         super.id = var1.readInt32(var2);
         if ((super.flags & 256) != 0) {
            super.from_id = var1.readInt32(var2);
         }

         super.to_id = TLRPC.Peer.TLdeserialize(var1, var1.readInt32(var2), var2);
         if ((super.flags & 8) != 0) {
            super.reply_to_msg_id = var1.readInt32(var2);
         }

         super.date = var1.readInt32(var2);
         super.action = TLRPC.MessageAction.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.unread) {
            var2 = super.flags | 1;
         } else {
            var2 = super.flags & -2;
         }

         super.flags = var2;
         if (super.out) {
            var2 = super.flags | 2;
         } else {
            var2 = super.flags & -3;
         }

         super.flags = var2;
         if (super.mentioned) {
            var2 = super.flags | 16;
         } else {
            var2 = super.flags & -17;
         }

         super.flags = var2;
         if (super.media_unread) {
            var2 = super.flags | 32;
         } else {
            var2 = super.flags & -33;
         }

         super.flags = var2;
         if (super.silent) {
            var2 = super.flags | 8192;
         } else {
            var2 = super.flags & -8193;
         }

         super.flags = var2;
         if (super.post) {
            var2 = super.flags | 16384;
         } else {
            var2 = super.flags & -16385;
         }

         super.flags = var2;
         if (super.legacy) {
            var2 = super.flags | 524288;
         } else {
            var2 = super.flags & -524289;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt32(super.id);
         if ((super.flags & 256) != 0) {
            var1.writeInt32(super.from_id);
         }

         super.to_id.serializeToStream(var1);
         if ((super.flags & 8) != 0) {
            var1.writeInt32(super.reply_to_msg_id);
         }

         var1.writeInt32(super.date);
         super.action.serializeToStream(var1);
         this.writeAttachPath(var1);
      }
   }

   public static class TL_messageService_layer48 extends TLRPC.TL_messageService {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         boolean var4 = true;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.unread = var5;
         if ((super.flags & 2) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.out = var5;
         if ((super.flags & 16) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.mentioned = var5;
         if ((super.flags & 32) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.media_unread = var5;
         if ((super.flags & 8192) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.silent = var5;
         if ((super.flags & 16384) != 0) {
            var5 = var4;
         } else {
            var5 = false;
         }

         super.post = var5;
         super.id = var1.readInt32(var2);
         if ((super.flags & 256) != 0) {
            super.from_id = var1.readInt32(var2);
         }

         super.to_id = TLRPC.Peer.TLdeserialize(var1, var1.readInt32(var2), var2);
         if (super.from_id == 0) {
            TLRPC.Peer var6 = super.to_id;
            var3 = var6.user_id;
            if (var3 != 0) {
               super.from_id = var3;
            } else {
               super.from_id = -var6.channel_id;
            }
         }

         super.date = var1.readInt32(var2);
         super.action = TLRPC.MessageAction.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.unread) {
            var2 = super.flags | 1;
         } else {
            var2 = super.flags & -2;
         }

         super.flags = var2;
         if (super.out) {
            var2 = super.flags | 2;
         } else {
            var2 = super.flags & -3;
         }

         super.flags = var2;
         if (super.mentioned) {
            var2 = super.flags | 16;
         } else {
            var2 = super.flags & -17;
         }

         super.flags = var2;
         if (super.media_unread) {
            var2 = super.flags | 32;
         } else {
            var2 = super.flags & -33;
         }

         super.flags = var2;
         if (super.silent) {
            var2 = super.flags | 8192;
         } else {
            var2 = super.flags & -8193;
         }

         super.flags = var2;
         if (super.post) {
            var2 = super.flags | 16384;
         } else {
            var2 = super.flags & -16385;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt32(super.id);
         if ((super.flags & 256) != 0) {
            var1.writeInt32(super.from_id);
         }

         super.to_id.serializeToStream(var1);
         var1.writeInt32(super.date);
         super.action.serializeToStream(var1);
      }
   }

   public static class TL_messageService_old extends TLRPC.TL_messageService {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt32(var2);
         super.from_id = var1.readInt32(var2);
         super.to_id = TLRPC.Peer.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.out = var1.readBool(var2);
         super.unread = var1.readBool(var2);
         super.flags |= 256;
         super.date = var1.readInt32(var2);
         super.action = TLRPC.MessageAction.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.id);
         var1.writeInt32(super.from_id);
         super.to_id.serializeToStream(var1);
         var1.writeBool(super.out);
         var1.writeBool(super.unread);
         var1.writeInt32(super.date);
         super.action.serializeToStream(var1);
      }
   }

   public static class TL_messageService_old2 extends TLRPC.TL_messageService {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         boolean var4 = true;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.unread = var5;
         if ((super.flags & 2) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.out = var5;
         if ((super.flags & 16) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.mentioned = var5;
         if ((super.flags & 32) != 0) {
            var5 = var4;
         } else {
            var5 = false;
         }

         super.media_unread = var5;
         super.id = var1.readInt32(var2);
         super.from_id = var1.readInt32(var2);
         super.to_id = TLRPC.Peer.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.date = var1.readInt32(var2);
         super.action = TLRPC.MessageAction.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.flags |= 256;
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.unread) {
            var2 = super.flags | 1;
         } else {
            var2 = super.flags & -2;
         }

         super.flags = var2;
         if (super.out) {
            var2 = super.flags | 2;
         } else {
            var2 = super.flags & -3;
         }

         super.flags = var2;
         if (super.mentioned) {
            var2 = super.flags | 16;
         } else {
            var2 = super.flags & -17;
         }

         super.flags = var2;
         if (super.media_unread) {
            var2 = super.flags | 32;
         } else {
            var2 = super.flags & -33;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt32(super.id);
         var1.writeInt32(super.from_id);
         super.to_id.serializeToStream(var1);
         var1.writeInt32(super.date);
         super.action.serializeToStream(var1);
      }
   }

   public static class TL_message_layer47 extends TLRPC.TL_message {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         int var4 = 0;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.unread = var5;
         if ((super.flags & 2) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.out = var5;
         if ((super.flags & 16) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.mentioned = var5;
         if ((super.flags & 32) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.media_unread = var5;
         super.id = var1.readInt32(var2);
         if ((super.flags & 256) != 0) {
            super.from_id = var1.readInt32(var2);
         }

         super.to_id = TLRPC.Peer.TLdeserialize(var1, var1.readInt32(var2), var2);
         TLRPC.Peer var6;
         if (super.from_id == 0) {
            var6 = super.to_id;
            var3 = var6.user_id;
            if (var3 != 0) {
               super.from_id = var3;
            } else {
               super.from_id = -var6.channel_id;
            }
         }

         if ((super.flags & 4) != 0) {
            super.fwd_from = new TLRPC.TL_messageFwdHeader();
            var6 = TLRPC.Peer.TLdeserialize(var1, var1.readInt32(var2), var2);
            TLRPC.MessageFwdHeader var7;
            if (var6 instanceof TLRPC.TL_peerChannel) {
               var7 = super.fwd_from;
               var7.channel_id = var6.channel_id;
               var7.flags |= 2;
            } else if (var6 instanceof TLRPC.TL_peerUser) {
               var7 = super.fwd_from;
               var7.from_id = var6.user_id;
               var7.flags |= 1;
            }

            super.fwd_from.date = var1.readInt32(var2);
         }

         if ((super.flags & 2048) != 0) {
            super.via_bot_id = var1.readInt32(var2);
         }

         if ((super.flags & 8) != 0) {
            super.reply_to_msg_id = var1.readInt32(var2);
         }

         super.date = var1.readInt32(var2);
         super.message = var1.readString(var2);
         if ((super.flags & 512) != 0) {
            super.media = TLRPC.MessageMedia.TLdeserialize(var1, var1.readInt32(var2), var2);
            TLRPC.MessageMedia var8 = super.media;
            if (var8 != null && !TextUtils.isEmpty(var8.captionLegacy)) {
               super.message = super.media.captionLegacy;
            }
         } else {
            super.media = new TLRPC.TL_messageMediaEmpty();
         }

         if ((super.flags & 64) != 0) {
            super.reply_markup = TLRPC.ReplyMarkup.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         if ((super.flags & 128) != 0) {
            var3 = var1.readInt32(var2);
            if (var3 != 481674261) {
               if (!var2) {
                  return;
               }

               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }

            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.MessageEntity var9 = TLRPC.MessageEntity.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var9 == null) {
                  return;
               }

               super.entities.add(var9);
            }
         }

         if ((super.flags & 1024) != 0) {
            super.views = var1.readInt32(var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.unread) {
            var2 = super.flags | 1;
         } else {
            var2 = super.flags & -2;
         }

         super.flags = var2;
         if (super.out) {
            var2 = super.flags | 2;
         } else {
            var2 = super.flags & -3;
         }

         super.flags = var2;
         if (super.mentioned) {
            var2 = super.flags | 16;
         } else {
            var2 = super.flags & -17;
         }

         super.flags = var2;
         if (super.media_unread) {
            var2 = super.flags | 32;
         } else {
            var2 = super.flags & -33;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt32(super.id);
         if ((super.flags & 256) != 0) {
            var1.writeInt32(super.from_id);
         }

         super.to_id.serializeToStream(var1);
         if ((super.flags & 4) != 0) {
            if (super.fwd_from.from_id != 0) {
               TLRPC.TL_peerUser var3 = new TLRPC.TL_peerUser();
               var3.user_id = super.fwd_from.from_id;
               var3.serializeToStream(var1);
            } else {
               TLRPC.TL_peerChannel var5 = new TLRPC.TL_peerChannel();
               var5.channel_id = super.fwd_from.channel_id;
               var5.serializeToStream(var1);
            }

            var1.writeInt32(super.fwd_from.date);
         }

         if ((super.flags & 2048) != 0) {
            var1.writeInt32(super.via_bot_id);
         }

         if ((super.flags & 8) != 0) {
            var1.writeInt32(super.reply_to_msg_id);
         }

         var1.writeInt32(super.date);
         var1.writeString(super.message);
         if ((super.flags & 512) != 0) {
            super.media.serializeToStream(var1);
         }

         if ((super.flags & 64) != 0) {
            super.reply_markup.serializeToStream(var1);
         }

         if ((super.flags & 128) != 0) {
            var1.writeInt32(481674261);
            int var4 = super.entities.size();
            var1.writeInt32(var4);

            for(var2 = 0; var2 < var4; ++var2) {
               ((TLRPC.MessageEntity)super.entities.get(var2)).serializeToStream(var1);
            }
         }

         if ((super.flags & 1024) != 0) {
            var1.writeInt32(super.views);
         }

         this.writeAttachPath(var1);
      }
   }

   public static class TL_message_layer68 extends TLRPC.TL_message {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         int var4 = 0;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.unread = var5;
         if ((super.flags & 2) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.out = var5;
         if ((super.flags & 16) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.mentioned = var5;
         if ((super.flags & 32) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.media_unread = var5;
         if ((super.flags & 8192) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.silent = var5;
         if ((super.flags & 16384) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.post = var5;
         if ((super.flags & 1073741824) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.with_my_score = var5;
         super.id = var1.readInt32(var2);
         if ((super.flags & 256) != 0) {
            super.from_id = var1.readInt32(var2);
         }

         super.to_id = TLRPC.Peer.TLdeserialize(var1, var1.readInt32(var2), var2);
         if (super.from_id == 0) {
            TLRPC.Peer var6 = super.to_id;
            var3 = var6.user_id;
            if (var3 != 0) {
               super.from_id = var3;
            } else {
               super.from_id = -var6.channel_id;
            }
         }

         if ((super.flags & 4) != 0) {
            super.fwd_from = TLRPC.MessageFwdHeader.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         if ((super.flags & 2048) != 0) {
            super.via_bot_id = var1.readInt32(var2);
         }

         if ((super.flags & 8) != 0) {
            super.reply_to_msg_id = var1.readInt32(var2);
         }

         super.date = var1.readInt32(var2);
         super.message = var1.readString(var2);
         if ((super.flags & 512) != 0) {
            super.media = TLRPC.MessageMedia.TLdeserialize(var1, var1.readInt32(var2), var2);
            TLRPC.MessageMedia var7 = super.media;
            if (var7 != null && !TextUtils.isEmpty(var7.captionLegacy)) {
               super.message = super.media.captionLegacy;
            }
         } else {
            super.media = new TLRPC.TL_messageMediaEmpty();
         }

         if ((super.flags & 64) != 0) {
            super.reply_markup = TLRPC.ReplyMarkup.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         if ((super.flags & 128) != 0) {
            var3 = var1.readInt32(var2);
            if (var3 != 481674261) {
               if (!var2) {
                  return;
               }

               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }

            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.MessageEntity var8 = TLRPC.MessageEntity.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var8 == null) {
                  return;
               }

               super.entities.add(var8);
            }
         }

         if ((super.flags & 1024) != 0) {
            super.views = var1.readInt32(var2);
         }

         if ((super.flags & '耀') != 0) {
            super.edit_date = var1.readInt32(var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.unread) {
            var2 = super.flags | 1;
         } else {
            var2 = super.flags & -2;
         }

         super.flags = var2;
         if (super.out) {
            var2 = super.flags | 2;
         } else {
            var2 = super.flags & -3;
         }

         super.flags = var2;
         if (super.mentioned) {
            var2 = super.flags | 16;
         } else {
            var2 = super.flags & -17;
         }

         super.flags = var2;
         if (super.media_unread) {
            var2 = super.flags | 32;
         } else {
            var2 = super.flags & -33;
         }

         super.flags = var2;
         if (super.silent) {
            var2 = super.flags | 8192;
         } else {
            var2 = super.flags & -8193;
         }

         super.flags = var2;
         if (super.post) {
            var2 = super.flags | 16384;
         } else {
            var2 = super.flags & -16385;
         }

         super.flags = var2;
         if (super.with_my_score) {
            var2 = super.flags | 1073741824;
         } else {
            var2 = super.flags & -1073741825;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt32(super.id);
         if ((super.flags & 256) != 0) {
            var1.writeInt32(super.from_id);
         }

         super.to_id.serializeToStream(var1);
         if ((super.flags & 4) != 0) {
            super.fwd_from.serializeToStream(var1);
         }

         if ((super.flags & 2048) != 0) {
            var1.writeInt32(super.via_bot_id);
         }

         if ((super.flags & 8) != 0) {
            var1.writeInt32(super.reply_to_msg_id);
         }

         var1.writeInt32(super.date);
         var1.writeString(super.message);
         if ((super.flags & 512) != 0) {
            super.media.serializeToStream(var1);
         }

         if ((super.flags & 64) != 0) {
            super.reply_markup.serializeToStream(var1);
         }

         if ((super.flags & 128) != 0) {
            var1.writeInt32(481674261);
            int var3 = super.entities.size();
            var1.writeInt32(var3);

            for(var2 = 0; var2 < var3; ++var2) {
               ((TLRPC.MessageEntity)super.entities.get(var2)).serializeToStream(var1);
            }
         }

         if ((super.flags & 1024) != 0) {
            var1.writeInt32(super.views);
         }

         if ((super.flags & '耀') != 0) {
            var1.writeInt32(super.edit_date);
         }

         this.writeAttachPath(var1);
      }
   }

   public static class TL_message_layer72 extends TLRPC.TL_message {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         int var4 = 0;
         boolean var5;
         if ((var3 & 2) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.out = var5;
         if ((super.flags & 16) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.mentioned = var5;
         if ((super.flags & 32) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.media_unread = var5;
         if ((super.flags & 8192) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.silent = var5;
         if ((super.flags & 16384) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.post = var5;
         super.id = var1.readInt32(var2);
         if ((super.flags & 256) != 0) {
            super.from_id = var1.readInt32(var2);
         }

         super.to_id = TLRPC.Peer.TLdeserialize(var1, var1.readInt32(var2), var2);
         if ((super.flags & 4) != 0) {
            super.fwd_from = TLRPC.MessageFwdHeader.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         if ((super.flags & 2048) != 0) {
            super.via_bot_id = var1.readInt32(var2);
         }

         if ((super.flags & 8) != 0) {
            super.reply_to_msg_id = var1.readInt32(var2);
         }

         super.date = var1.readInt32(var2);
         super.message = var1.readString(var2);
         if ((super.flags & 512) != 0) {
            super.media = TLRPC.MessageMedia.TLdeserialize(var1, var1.readInt32(var2), var2);
            TLRPC.MessageMedia var6 = super.media;
            if (var6 != null) {
               super.ttl = var6.ttl_seconds;
            }

            var6 = super.media;
            if (var6 != null && !TextUtils.isEmpty(var6.captionLegacy)) {
               super.message = super.media.captionLegacy;
            }
         }

         if ((super.flags & 64) != 0) {
            super.reply_markup = TLRPC.ReplyMarkup.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         if ((super.flags & 128) != 0) {
            var3 = var1.readInt32(var2);
            if (var3 != 481674261) {
               if (!var2) {
                  return;
               }

               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }

            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.MessageEntity var7 = TLRPC.MessageEntity.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var7 == null) {
                  return;
               }

               super.entities.add(var7);
            }
         }

         if ((super.flags & 1024) != 0) {
            super.views = var1.readInt32(var2);
         }

         if ((super.flags & '耀') != 0) {
            super.edit_date = var1.readInt32(var2);
         }

         if ((super.flags & 65536) != 0) {
            super.post_author = var1.readString(var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.out) {
            var2 = super.flags | 2;
         } else {
            var2 = super.flags & -3;
         }

         super.flags = var2;
         if (super.mentioned) {
            var2 = super.flags | 16;
         } else {
            var2 = super.flags & -17;
         }

         super.flags = var2;
         if (super.media_unread) {
            var2 = super.flags | 32;
         } else {
            var2 = super.flags & -33;
         }

         super.flags = var2;
         if (super.silent) {
            var2 = super.flags | 8192;
         } else {
            var2 = super.flags & -8193;
         }

         super.flags = var2;
         if (super.post) {
            var2 = super.flags | 16384;
         } else {
            var2 = super.flags & -16385;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt32(super.id);
         if ((super.flags & 256) != 0) {
            var1.writeInt32(super.from_id);
         }

         super.to_id.serializeToStream(var1);
         if ((super.flags & 4) != 0) {
            super.fwd_from.serializeToStream(var1);
         }

         if ((super.flags & 2048) != 0) {
            var1.writeInt32(super.via_bot_id);
         }

         if ((super.flags & 8) != 0) {
            var1.writeInt32(super.reply_to_msg_id);
         }

         var1.writeInt32(super.date);
         var1.writeString(super.message);
         if ((super.flags & 512) != 0) {
            super.media.serializeToStream(var1);
         }

         if ((super.flags & 64) != 0) {
            super.reply_markup.serializeToStream(var1);
         }

         if ((super.flags & 128) != 0) {
            var1.writeInt32(481674261);
            int var3 = super.entities.size();
            var1.writeInt32(var3);

            for(var2 = 0; var2 < var3; ++var2) {
               ((TLRPC.MessageEntity)super.entities.get(var2)).serializeToStream(var1);
            }
         }

         if ((super.flags & 1024) != 0) {
            var1.writeInt32(super.views);
         }

         if ((super.flags & '耀') != 0) {
            var1.writeInt32(super.edit_date);
         }

         if ((super.flags & 65536) != 0) {
            var1.writeString(super.post_author);
         }

         this.writeAttachPath(var1);
      }
   }

   public static class TL_message_old extends TLRPC.TL_message {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt32(var2);
         super.from_id = var1.readInt32(var2);
         super.to_id = TLRPC.Peer.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.out = var1.readBool(var2);
         super.unread = var1.readBool(var2);
         super.flags |= 768;
         super.date = var1.readInt32(var2);
         super.message = var1.readString(var2);
         super.media = TLRPC.MessageMedia.TLdeserialize(var1, var1.readInt32(var2), var2);
         TLRPC.MessageMedia var3 = super.media;
         if (var3 != null && !TextUtils.isEmpty(var3.captionLegacy)) {
            super.message = super.media.captionLegacy;
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.id);
         var1.writeInt32(super.from_id);
         super.to_id.serializeToStream(var1);
         var1.writeBool(super.out);
         var1.writeBool(super.unread);
         var1.writeInt32(super.date);
         var1.writeString(super.message);
         super.media.serializeToStream(var1);
         this.writeAttachPath(var1);
      }
   }

   public static class TL_message_old2 extends TLRPC.TL_message {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2) | 256 | 512;
         int var3 = super.flags;
         boolean var4 = true;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.unread = var5;
         if ((super.flags & 2) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.out = var5;
         if ((super.flags & 16) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.mentioned = var5;
         if ((super.flags & 32) != 0) {
            var5 = var4;
         } else {
            var5 = false;
         }

         super.media_unread = var5;
         super.id = var1.readInt32(var2);
         super.from_id = var1.readInt32(var2);
         super.to_id = TLRPC.Peer.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.date = var1.readInt32(var2);
         super.message = var1.readString(var2);
         super.media = TLRPC.MessageMedia.TLdeserialize(var1, var1.readInt32(var2), var2);
         TLRPC.MessageMedia var6 = super.media;
         if (var6 != null && !TextUtils.isEmpty(var6.captionLegacy)) {
            super.message = super.media.captionLegacy;
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.unread) {
            var2 = super.flags | 1;
         } else {
            var2 = super.flags & -2;
         }

         super.flags = var2;
         if (super.out) {
            var2 = super.flags | 2;
         } else {
            var2 = super.flags & -3;
         }

         super.flags = var2;
         if (super.mentioned) {
            var2 = super.flags | 16;
         } else {
            var2 = super.flags & -17;
         }

         super.flags = var2;
         if (super.media_unread) {
            var2 = super.flags | 32;
         } else {
            var2 = super.flags & -33;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt32(super.id);
         var1.writeInt32(super.from_id);
         super.to_id.serializeToStream(var1);
         var1.writeInt32(super.date);
         var1.writeString(super.message);
         super.media.serializeToStream(var1);
         this.writeAttachPath(var1);
      }
   }

   public static class TL_message_old3 extends TLRPC.TL_message {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2) | 256 | 512;
         int var3 = super.flags;
         boolean var4 = false;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.unread = var5;
         if ((super.flags & 2) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.out = var5;
         if ((super.flags & 16) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.mentioned = var5;
         var5 = var4;
         if ((super.flags & 32) != 0) {
            var5 = true;
         }

         super.media_unread = var5;
         super.id = var1.readInt32(var2);
         super.from_id = var1.readInt32(var2);
         super.to_id = TLRPC.Peer.TLdeserialize(var1, var1.readInt32(var2), var2);
         if ((super.flags & 4) != 0) {
            super.fwd_from = new TLRPC.TL_messageFwdHeader();
            super.fwd_from.from_id = var1.readInt32(var2);
            TLRPC.MessageFwdHeader var6 = super.fwd_from;
            var6.flags |= 1;
            var6.date = var1.readInt32(var2);
         }

         if ((super.flags & 8) != 0) {
            super.reply_to_msg_id = var1.readInt32(var2);
         }

         super.date = var1.readInt32(var2);
         super.message = var1.readString(var2);
         super.media = TLRPC.MessageMedia.TLdeserialize(var1, var1.readInt32(var2), var2);
         TLRPC.MessageMedia var7 = super.media;
         if (var7 != null && !TextUtils.isEmpty(var7.captionLegacy)) {
            super.message = super.media.captionLegacy;
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.unread) {
            var2 = super.flags | 1;
         } else {
            var2 = super.flags & -2;
         }

         super.flags = var2;
         if (super.out) {
            var2 = super.flags | 2;
         } else {
            var2 = super.flags & -3;
         }

         super.flags = var2;
         if (super.mentioned) {
            var2 = super.flags | 16;
         } else {
            var2 = super.flags & -17;
         }

         super.flags = var2;
         if (super.media_unread) {
            var2 = super.flags | 32;
         } else {
            var2 = super.flags & -33;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt32(super.id);
         var1.writeInt32(super.from_id);
         super.to_id.serializeToStream(var1);
         if ((super.flags & 4) != 0) {
            var1.writeInt32(super.fwd_from.from_id);
            var1.writeInt32(super.fwd_from.date);
         }

         if ((super.flags & 8) != 0) {
            var1.writeInt32(super.reply_to_msg_id);
         }

         var1.writeInt32(super.date);
         var1.writeString(super.message);
         super.media.serializeToStream(var1);
         this.writeAttachPath(var1);
      }
   }

   public static class TL_message_old4 extends TLRPC.TL_message {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2) | 256 | 512;
         int var3 = super.flags;
         boolean var4 = false;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.unread = var5;
         if ((super.flags & 2) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.out = var5;
         if ((super.flags & 16) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.mentioned = var5;
         var5 = var4;
         if ((super.flags & 32) != 0) {
            var5 = true;
         }

         super.media_unread = var5;
         super.id = var1.readInt32(var2);
         super.from_id = var1.readInt32(var2);
         super.to_id = TLRPC.Peer.TLdeserialize(var1, var1.readInt32(var2), var2);
         if ((super.flags & 4) != 0) {
            super.fwd_from = new TLRPC.TL_messageFwdHeader();
            super.fwd_from.from_id = var1.readInt32(var2);
            TLRPC.MessageFwdHeader var6 = super.fwd_from;
            var6.flags |= 1;
            var6.date = var1.readInt32(var2);
         }

         if ((super.flags & 8) != 0) {
            super.reply_to_msg_id = var1.readInt32(var2);
         }

         super.date = var1.readInt32(var2);
         super.message = var1.readString(var2);
         super.media = TLRPC.MessageMedia.TLdeserialize(var1, var1.readInt32(var2), var2);
         TLRPC.MessageMedia var7 = super.media;
         if (var7 != null && !TextUtils.isEmpty(var7.captionLegacy)) {
            super.message = super.media.captionLegacy;
         }

         if ((super.flags & 64) != 0) {
            super.reply_markup = TLRPC.ReplyMarkup.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.unread) {
            var2 = super.flags | 1;
         } else {
            var2 = super.flags & -2;
         }

         super.flags = var2;
         if (super.out) {
            var2 = super.flags | 2;
         } else {
            var2 = super.flags & -3;
         }

         super.flags = var2;
         if (super.mentioned) {
            var2 = super.flags | 16;
         } else {
            var2 = super.flags & -17;
         }

         super.flags = var2;
         if (super.media_unread) {
            var2 = super.flags | 32;
         } else {
            var2 = super.flags & -33;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt32(super.id);
         var1.writeInt32(super.from_id);
         super.to_id.serializeToStream(var1);
         if ((super.flags & 4) != 0) {
            var1.writeInt32(super.fwd_from.from_id);
            var1.writeInt32(super.fwd_from.date);
         }

         if ((super.flags & 8) != 0) {
            var1.writeInt32(super.reply_to_msg_id);
         }

         var1.writeInt32(super.date);
         var1.writeString(super.message);
         super.media.serializeToStream(var1);
         if ((super.flags & 64) != 0) {
            super.reply_markup.serializeToStream(var1);
         }

         this.writeAttachPath(var1);
      }
   }

   public static class TL_message_old5 extends TLRPC.TL_message {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2) | 256 | 512;
         int var3 = super.flags;
         int var4 = 0;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.unread = var5;
         if ((super.flags & 2) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.out = var5;
         if ((super.flags & 16) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.mentioned = var5;
         if ((super.flags & 32) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.media_unread = var5;
         super.id = var1.readInt32(var2);
         super.from_id = var1.readInt32(var2);
         super.to_id = TLRPC.Peer.TLdeserialize(var1, var1.readInt32(var2), var2);
         if ((super.flags & 4) != 0) {
            super.fwd_from = new TLRPC.TL_messageFwdHeader();
            super.fwd_from.from_id = var1.readInt32(var2);
            TLRPC.MessageFwdHeader var6 = super.fwd_from;
            var6.flags |= 1;
            var6.date = var1.readInt32(var2);
         }

         if ((super.flags & 8) != 0) {
            super.reply_to_msg_id = var1.readInt32(var2);
         }

         super.date = var1.readInt32(var2);
         super.message = var1.readString(var2);
         super.media = TLRPC.MessageMedia.TLdeserialize(var1, var1.readInt32(var2), var2);
         TLRPC.MessageMedia var7 = super.media;
         if (var7 != null && !TextUtils.isEmpty(var7.captionLegacy)) {
            super.message = super.media.captionLegacy;
         }

         if ((super.flags & 64) != 0) {
            super.reply_markup = TLRPC.ReplyMarkup.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         if ((super.flags & 128) != 0) {
            var3 = var1.readInt32(var2);
            if (var3 != 481674261) {
               if (!var2) {
                  return;
               }

               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }

            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.MessageEntity var8 = TLRPC.MessageEntity.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var8 == null) {
                  return;
               }

               super.entities.add(var8);
            }
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.unread) {
            var2 = super.flags | 1;
         } else {
            var2 = super.flags & -2;
         }

         super.flags = var2;
         if (super.out) {
            var2 = super.flags | 2;
         } else {
            var2 = super.flags & -3;
         }

         super.flags = var2;
         if (super.mentioned) {
            var2 = super.flags | 16;
         } else {
            var2 = super.flags & -17;
         }

         super.flags = var2;
         if (super.media_unread) {
            var2 = super.flags | 32;
         } else {
            var2 = super.flags & -33;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt32(super.id);
         var1.writeInt32(super.from_id);
         super.to_id.serializeToStream(var1);
         if ((super.flags & 4) != 0) {
            var1.writeInt32(super.fwd_from.from_id);
            var1.writeInt32(super.fwd_from.date);
         }

         if ((super.flags & 8) != 0) {
            var1.writeInt32(super.reply_to_msg_id);
         }

         var1.writeInt32(super.date);
         var1.writeString(super.message);
         super.media.serializeToStream(var1);
         if ((super.flags & 64) != 0) {
            super.reply_markup.serializeToStream(var1);
         }

         if ((super.flags & 128) != 0) {
            var1.writeInt32(481674261);
            int var3 = super.entities.size();
            var1.writeInt32(var3);

            for(var2 = 0; var2 < var3; ++var2) {
               ((TLRPC.MessageEntity)super.entities.get(var2)).serializeToStream(var1);
            }
         }

         this.writeAttachPath(var1);
      }
   }

   public static class TL_message_old6 extends TLRPC.TL_message {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2) | 256;
         int var3 = super.flags;
         int var4 = 0;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.unread = var5;
         if ((super.flags & 2) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.out = var5;
         if ((super.flags & 16) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.mentioned = var5;
         if ((super.flags & 32) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.media_unread = var5;
         super.id = var1.readInt32(var2);
         super.from_id = var1.readInt32(var2);
         super.to_id = TLRPC.Peer.TLdeserialize(var1, var1.readInt32(var2), var2);
         if ((super.flags & 4) != 0) {
            super.fwd_from = new TLRPC.TL_messageFwdHeader();
            super.fwd_from.from_id = var1.readInt32(var2);
            TLRPC.MessageFwdHeader var6 = super.fwd_from;
            var6.flags |= 1;
            var6.date = var1.readInt32(var2);
         }

         if ((super.flags & 8) != 0) {
            super.reply_to_msg_id = var1.readInt32(var2);
         }

         super.date = var1.readInt32(var2);
         super.message = var1.readString(var2);
         if ((super.flags & 512) != 0) {
            super.media = TLRPC.MessageMedia.TLdeserialize(var1, var1.readInt32(var2), var2);
            TLRPC.MessageMedia var7 = super.media;
            if (var7 != null && !TextUtils.isEmpty(var7.captionLegacy)) {
               super.message = super.media.captionLegacy;
            }
         } else {
            super.media = new TLRPC.TL_messageMediaEmpty();
         }

         if ((super.flags & 64) != 0) {
            super.reply_markup = TLRPC.ReplyMarkup.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         if ((super.flags & 128) != 0) {
            var3 = var1.readInt32(var2);
            if (var3 != 481674261) {
               if (!var2) {
                  return;
               }

               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }

            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.MessageEntity var8 = TLRPC.MessageEntity.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var8 == null) {
                  return;
               }

               super.entities.add(var8);
            }
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.unread) {
            var2 = super.flags | 1;
         } else {
            var2 = super.flags & -2;
         }

         super.flags = var2;
         if (super.out) {
            var2 = super.flags | 2;
         } else {
            var2 = super.flags & -3;
         }

         super.flags = var2;
         if (super.mentioned) {
            var2 = super.flags | 16;
         } else {
            var2 = super.flags & -17;
         }

         super.flags = var2;
         if (super.media_unread) {
            var2 = super.flags | 32;
         } else {
            var2 = super.flags & -33;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt32(super.id);
         var1.writeInt32(super.from_id);
         super.to_id.serializeToStream(var1);
         if ((super.flags & 4) != 0) {
            var1.writeInt32(super.fwd_from.from_id);
            var1.writeInt32(super.fwd_from.date);
         }

         if ((super.flags & 8) != 0) {
            var1.writeInt32(super.reply_to_msg_id);
         }

         var1.writeInt32(super.date);
         var1.writeString(super.message);
         if ((super.flags & 512) != 0) {
            super.media.serializeToStream(var1);
         }

         if ((super.flags & 64) != 0) {
            super.reply_markup.serializeToStream(var1);
         }

         if ((super.flags & 128) != 0) {
            var1.writeInt32(481674261);
            int var3 = super.entities.size();
            var1.writeInt32(var3);

            for(var2 = 0; var2 < var3; ++var2) {
               ((TLRPC.MessageEntity)super.entities.get(var2)).serializeToStream(var1);
            }
         }

         this.writeAttachPath(var1);
      }
   }

   public static class TL_message_old7 extends TLRPC.TL_message {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         int var4 = 0;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.unread = var5;
         if ((super.flags & 2) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.out = var5;
         if ((super.flags & 16) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.mentioned = var5;
         if ((super.flags & 32) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.media_unread = var5;
         super.id = var1.readInt32(var2);
         if ((super.flags & 256) != 0) {
            super.from_id = var1.readInt32(var2);
         }

         super.to_id = TLRPC.Peer.TLdeserialize(var1, var1.readInt32(var2), var2);
         TLRPC.Peer var6;
         if (super.from_id == 0) {
            var6 = super.to_id;
            var3 = var6.user_id;
            if (var3 != 0) {
               super.from_id = var3;
            } else {
               super.from_id = -var6.channel_id;
            }
         }

         if ((super.flags & 4) != 0) {
            super.fwd_from = new TLRPC.TL_messageFwdHeader();
            var6 = TLRPC.Peer.TLdeserialize(var1, var1.readInt32(var2), var2);
            TLRPC.MessageFwdHeader var7;
            if (var6 instanceof TLRPC.TL_peerChannel) {
               var7 = super.fwd_from;
               var7.channel_id = var6.channel_id;
               var7.flags |= 2;
            } else if (var6 instanceof TLRPC.TL_peerUser) {
               var7 = super.fwd_from;
               var7.from_id = var6.user_id;
               var7.flags |= 1;
            }

            super.fwd_from.date = var1.readInt32(var2);
         }

         if ((super.flags & 8) != 0) {
            super.reply_to_msg_id = var1.readInt32(var2);
         }

         super.date = var1.readInt32(var2);
         super.message = var1.readString(var2);
         if ((super.flags & 512) != 0) {
            super.media = TLRPC.MessageMedia.TLdeserialize(var1, var1.readInt32(var2), var2);
            TLRPC.MessageMedia var8 = super.media;
            if (var8 != null && !TextUtils.isEmpty(var8.captionLegacy)) {
               super.message = super.media.captionLegacy;
            }
         } else {
            super.media = new TLRPC.TL_messageMediaEmpty();
         }

         if ((super.flags & 64) != 0) {
            super.reply_markup = TLRPC.ReplyMarkup.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         if ((super.flags & 128) != 0) {
            var3 = var1.readInt32(var2);
            if (var3 != 481674261) {
               if (!var2) {
                  return;
               }

               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }

            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.MessageEntity var9 = TLRPC.MessageEntity.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var9 == null) {
                  return;
               }

               super.entities.add(var9);
            }
         }

         if ((super.flags & 1024) != 0) {
            super.views = var1.readInt32(var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.unread) {
            var2 = super.flags | 1;
         } else {
            var2 = super.flags & -2;
         }

         super.flags = var2;
         if (super.out) {
            var2 = super.flags | 2;
         } else {
            var2 = super.flags & -3;
         }

         super.flags = var2;
         if (super.mentioned) {
            var2 = super.flags | 16;
         } else {
            var2 = super.flags & -17;
         }

         super.flags = var2;
         if (super.media_unread) {
            var2 = super.flags | 32;
         } else {
            var2 = super.flags & -33;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt32(super.id);
         if ((super.flags & 256) != 0) {
            var1.writeInt32(super.from_id);
         }

         super.to_id.serializeToStream(var1);
         if ((super.flags & 4) != 0) {
            if (super.fwd_from.from_id != 0) {
               TLRPC.TL_peerUser var3 = new TLRPC.TL_peerUser();
               var3.user_id = super.fwd_from.from_id;
               var3.serializeToStream(var1);
            } else {
               TLRPC.TL_peerChannel var5 = new TLRPC.TL_peerChannel();
               var5.channel_id = super.fwd_from.channel_id;
               var5.serializeToStream(var1);
            }

            var1.writeInt32(super.fwd_from.date);
         }

         if ((super.flags & 8) != 0) {
            var1.writeInt32(super.reply_to_msg_id);
         }

         var1.writeInt32(super.date);
         var1.writeString(super.message);
         if ((super.flags & 512) != 0) {
            super.media.serializeToStream(var1);
         }

         if ((super.flags & 64) != 0) {
            super.reply_markup.serializeToStream(var1);
         }

         if ((super.flags & 128) != 0) {
            var1.writeInt32(481674261);
            int var4 = super.entities.size();
            var1.writeInt32(var4);

            for(var2 = 0; var2 < var4; ++var2) {
               ((TLRPC.MessageEntity)super.entities.get(var2)).serializeToStream(var1);
            }
         }

         if ((super.flags & 1024) != 0) {
            var1.writeInt32(super.views);
         }

         this.writeAttachPath(var1);
      }
   }

   public static class TL_message_secret extends TLRPC.TL_message {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         int var4 = 0;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.unread = var5;
         if ((super.flags & 2) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.out = var5;
         if ((super.flags & 16) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.mentioned = var5;
         if ((super.flags & 32) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.media_unread = var5;
         super.id = var1.readInt32(var2);
         super.ttl = var1.readInt32(var2);
         super.from_id = var1.readInt32(var2);
         super.to_id = TLRPC.Peer.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.date = var1.readInt32(var2);
         super.message = var1.readString(var2);
         super.media = TLRPC.MessageMedia.TLdeserialize(var1, var1.readInt32(var2), var2);
         TLRPC.MessageMedia var6 = super.media;
         if (var6 != null && !TextUtils.isEmpty(var6.captionLegacy)) {
            super.message = super.media.captionLegacy;
         }

         var3 = var1.readInt32(var2);
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.MessageEntity var7 = TLRPC.MessageEntity.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var7 == null) {
                  return;
               }

               super.entities.add(var7);
            }

            if ((super.flags & 2048) != 0) {
               super.via_bot_name = var1.readString(var2);
            }

            if ((super.flags & 8) != 0) {
               super.reply_to_random_id = var1.readInt64(var2);
            }

            if ((super.flags & 131072) != 0) {
               super.grouped_id = var1.readInt64(var2);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.unread) {
            var2 = super.flags | 1;
         } else {
            var2 = super.flags & -2;
         }

         super.flags = var2;
         if (super.out) {
            var2 = super.flags | 2;
         } else {
            var2 = super.flags & -3;
         }

         super.flags = var2;
         if (super.mentioned) {
            var2 = super.flags | 16;
         } else {
            var2 = super.flags & -17;
         }

         super.flags = var2;
         if (super.media_unread) {
            var2 = super.flags | 32;
         } else {
            var2 = super.flags & -33;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt32(super.id);
         var1.writeInt32(super.ttl);
         var1.writeInt32(super.from_id);
         super.to_id.serializeToStream(var1);
         var1.writeInt32(super.date);
         var1.writeString(super.message);
         super.media.serializeToStream(var1);
         var1.writeInt32(481674261);
         int var3 = super.entities.size();
         var1.writeInt32(var3);

         for(var2 = 0; var2 < var3; ++var2) {
            ((TLRPC.MessageEntity)super.entities.get(var2)).serializeToStream(var1);
         }

         if ((super.flags & 2048) != 0) {
            var1.writeString(super.via_bot_name);
         }

         if ((super.flags & 8) != 0) {
            var1.writeInt64(super.reply_to_random_id);
         }

         if ((super.flags & 131072) != 0) {
            var1.writeInt64(super.grouped_id);
         }

         this.writeAttachPath(var1);
      }
   }

   public static class TL_message_secret_layer72 extends TLRPC.TL_message {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         int var4 = 0;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.unread = var5;
         if ((super.flags & 2) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.out = var5;
         if ((super.flags & 16) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.mentioned = var5;
         if ((super.flags & 32) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.media_unread = var5;
         super.id = var1.readInt32(var2);
         super.ttl = var1.readInt32(var2);
         super.from_id = var1.readInt32(var2);
         super.to_id = TLRPC.Peer.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.date = var1.readInt32(var2);
         super.message = var1.readString(var2);
         super.media = TLRPC.MessageMedia.TLdeserialize(var1, var1.readInt32(var2), var2);
         TLRPC.MessageMedia var6 = super.media;
         if (var6 != null && !TextUtils.isEmpty(var6.captionLegacy)) {
            super.message = super.media.captionLegacy;
         }

         var3 = var1.readInt32(var2);
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.MessageEntity var7 = TLRPC.MessageEntity.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var7 == null) {
                  return;
               }

               super.entities.add(var7);
            }

            if ((super.flags & 2048) != 0) {
               super.via_bot_name = var1.readString(var2);
            }

            if ((super.flags & 8) != 0) {
               super.reply_to_random_id = var1.readInt64(var2);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.unread) {
            var2 = super.flags | 1;
         } else {
            var2 = super.flags & -2;
         }

         super.flags = var2;
         if (super.out) {
            var2 = super.flags | 2;
         } else {
            var2 = super.flags & -3;
         }

         super.flags = var2;
         if (super.mentioned) {
            var2 = super.flags | 16;
         } else {
            var2 = super.flags & -17;
         }

         super.flags = var2;
         if (super.media_unread) {
            var2 = super.flags | 32;
         } else {
            var2 = super.flags & -33;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt32(super.id);
         var1.writeInt32(super.ttl);
         var1.writeInt32(super.from_id);
         super.to_id.serializeToStream(var1);
         var1.writeInt32(super.date);
         var1.writeString(super.message);
         super.media.serializeToStream(var1);
         var1.writeInt32(481674261);
         int var3 = super.entities.size();
         var1.writeInt32(var3);

         for(var2 = 0; var2 < var3; ++var2) {
            ((TLRPC.MessageEntity)super.entities.get(var2)).serializeToStream(var1);
         }

         if ((super.flags & 2048) != 0) {
            var1.writeString(super.via_bot_name);
         }

         if ((super.flags & 8) != 0) {
            var1.writeInt64(super.reply_to_random_id);
         }

         this.writeAttachPath(var1);
      }
   }

   public static class TL_message_secret_old extends TLRPC.TL_message_secret {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2) | 256 | 512;
         int var3 = super.flags;
         boolean var4 = true;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.unread = var5;
         if ((super.flags & 2) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.out = var5;
         if ((super.flags & 16) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.mentioned = var5;
         if ((super.flags & 32) != 0) {
            var5 = var4;
         } else {
            var5 = false;
         }

         super.media_unread = var5;
         super.id = var1.readInt32(var2);
         super.ttl = var1.readInt32(var2);
         super.from_id = var1.readInt32(var2);
         super.to_id = TLRPC.Peer.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.date = var1.readInt32(var2);
         super.message = var1.readString(var2);
         super.media = TLRPC.MessageMedia.TLdeserialize(var1, var1.readInt32(var2), var2);
         TLRPC.MessageMedia var6 = super.media;
         if (var6 != null && !TextUtils.isEmpty(var6.captionLegacy)) {
            super.message = super.media.captionLegacy;
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.unread) {
            var2 = super.flags | 1;
         } else {
            var2 = super.flags & -2;
         }

         super.flags = var2;
         if (super.out) {
            var2 = super.flags | 2;
         } else {
            var2 = super.flags & -3;
         }

         super.flags = var2;
         if (super.mentioned) {
            var2 = super.flags | 16;
         } else {
            var2 = super.flags & -17;
         }

         super.flags = var2;
         if (super.media_unread) {
            var2 = super.flags | 32;
         } else {
            var2 = super.flags & -33;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt32(super.id);
         var1.writeInt32(super.ttl);
         var1.writeInt32(super.from_id);
         super.to_id.serializeToStream(var1);
         var1.writeInt32(super.date);
         var1.writeString(super.message);
         super.media.serializeToStream(var1);
         this.writeAttachPath(var1);
      }
   }

   public static class TL_messages_acceptEncryption extends TLObject {
      public static int constructor;
      public byte[] g_b;
      public long key_fingerprint;
      public TLRPC.TL_inputEncryptedChat peer;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.EncryptedChat.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.peer.serializeToStream(var1);
         var1.writeByteArray(this.g_b);
         var1.writeInt64(this.key_fingerprint);
      }
   }

   public static class TL_messages_acceptUrlAuth extends TLObject {
      public static int constructor;
      public int button_id;
      public int flags;
      public int msg_id;
      public TLRPC.InputPeer peer;
      public boolean write_allowed;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.UrlAuthResult.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.write_allowed) {
            var2 = this.flags | 1;
         } else {
            var2 = this.flags & -2;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         this.peer.serializeToStream(var1);
         var1.writeInt32(this.msg_id);
         var1.writeInt32(this.button_id);
      }
   }

   public static class TL_messages_addChatUser extends TLObject {
      public static int constructor;
      public int chat_id;
      public int fwd_limit;
      public TLRPC.InputUser user_id;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Updates.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.chat_id);
         this.user_id.serializeToStream(var1);
         var1.writeInt32(this.fwd_limit);
      }
   }

   public static class TL_messages_affectedHistory extends TLObject {
      public static int constructor;
      public int offset;
      public int pts;
      public int pts_count;

      public static TLRPC.TL_messages_affectedHistory TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_messages_affectedHistory", var1));
            }
         } else {
            TLRPC.TL_messages_affectedHistory var3 = new TLRPC.TL_messages_affectedHistory();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.pts = var1.readInt32(var2);
         this.pts_count = var1.readInt32(var2);
         this.offset = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.pts);
         var1.writeInt32(this.pts_count);
         var1.writeInt32(this.offset);
      }
   }

   public static class TL_messages_affectedMessages extends TLObject {
      public static int constructor;
      public int pts;
      public int pts_count;

      public static TLRPC.TL_messages_affectedMessages TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_messages_affectedMessages", var1));
            }
         } else {
            TLRPC.TL_messages_affectedMessages var3 = new TLRPC.TL_messages_affectedMessages();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.pts = var1.readInt32(var2);
         this.pts_count = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.pts);
         var1.writeInt32(this.pts_count);
      }
   }

   public static class TL_messages_allStickers extends TLRPC.messages_AllStickers {
      public static int constructor;
      public int hash;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.hash = var1.readInt32(var2);
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.StickerSet var5 = TLRPC.StickerSet.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               super.sets.add(var5);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.hash);
         var1.writeInt32(481674261);
         int var2 = super.sets.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.StickerSet)super.sets.get(var3)).serializeToStream(var1);
         }

      }
   }

   public static class TL_messages_allStickersNotModified extends TLRPC.messages_AllStickers {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_messages_archivedStickers extends TLObject {
      public static int constructor;
      public int count;
      public ArrayList sets = new ArrayList();

      public static TLRPC.TL_messages_archivedStickers TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_messages_archivedStickers", var1));
            }
         } else {
            TLRPC.TL_messages_archivedStickers var3 = new TLRPC.TL_messages_archivedStickers();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.count = var1.readInt32(var2);
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.StickerSetCovered var5 = TLRPC.StickerSetCovered.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               this.sets.add(var5);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.count);
         var1.writeInt32(481674261);
         int var2 = this.sets.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.StickerSetCovered)this.sets.get(var3)).serializeToStream(var1);
         }

      }
   }

   public static class TL_messages_botCallbackAnswer extends TLObject {
      public static int constructor;
      public boolean alert;
      public int cache_time;
      public int flags;
      public boolean has_url;
      public String message;
      public boolean native_ui;
      public String url;

      public static TLRPC.TL_messages_botCallbackAnswer TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_messages_botCallbackAnswer", var1));
            }
         } else {
            TLRPC.TL_messages_botCallbackAnswer var3 = new TLRPC.TL_messages_botCallbackAnswer();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.flags = var1.readInt32(var2);
         int var3 = this.flags;
         boolean var4 = false;
         boolean var5;
         if ((var3 & 2) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.alert = var5;
         if ((this.flags & 8) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.has_url = var5;
         var5 = var4;
         if ((this.flags & 16) != 0) {
            var5 = true;
         }

         this.native_ui = var5;
         if ((this.flags & 1) != 0) {
            this.message = var1.readString(var2);
         }

         if ((this.flags & 4) != 0) {
            this.url = var1.readString(var2);
         }

         this.cache_time = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.alert) {
            var2 = this.flags | 2;
         } else {
            var2 = this.flags & -3;
         }

         this.flags = var2;
         if (this.has_url) {
            var2 = this.flags | 8;
         } else {
            var2 = this.flags & -9;
         }

         this.flags = var2;
         if (this.native_ui) {
            var2 = this.flags | 16;
         } else {
            var2 = this.flags & -17;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         if ((this.flags & 1) != 0) {
            var1.writeString(this.message);
         }

         if ((this.flags & 4) != 0) {
            var1.writeString(this.url);
         }

         var1.writeInt32(this.cache_time);
      }
   }

   public static class TL_messages_botResults extends TLRPC.messages_BotResults {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         byte var4 = 0;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.gallery = var5;
         super.query_id = var1.readInt64(var2);
         if ((super.flags & 2) != 0) {
            super.next_offset = var1.readString(var2);
         }

         if ((super.flags & 4) != 0) {
            super.switch_pm = TLRPC.TL_inlineBotSwitchPM.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         var3 = var1.readInt32(var2);
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            int var6 = var1.readInt32(var2);

            for(var3 = 0; var3 < var6; ++var3) {
               TLRPC.BotInlineResult var7 = TLRPC.BotInlineResult.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var7 == null) {
                  return;
               }

               super.results.add(var7);
            }

            super.cache_time = var1.readInt32(var2);
            var3 = var1.readInt32(var2);
            if (var3 != 481674261) {
               if (var2) {
                  throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
               }
            } else {
               var6 = var1.readInt32(var2);

               for(var3 = var4; var3 < var6; ++var3) {
                  TLRPC.User var8 = TLRPC.User.TLdeserialize(var1, var1.readInt32(var2), var2);
                  if (var8 == null) {
                     return;
                  }

                  super.users.add(var8);
               }

            }
         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.gallery) {
            var2 = super.flags | 1;
         } else {
            var2 = super.flags & -2;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt64(super.query_id);
         if ((super.flags & 2) != 0) {
            var1.writeString(super.next_offset);
         }

         if ((super.flags & 4) != 0) {
            super.switch_pm.serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         int var3 = super.results.size();
         var1.writeInt32(var3);
         byte var4 = 0;

         for(var2 = 0; var2 < var3; ++var2) {
            ((TLRPC.BotInlineResult)super.results.get(var2)).serializeToStream(var1);
         }

         var1.writeInt32(super.cache_time);
         var1.writeInt32(481674261);
         var3 = super.users.size();
         var1.writeInt32(var3);

         for(var2 = var4; var2 < var3; ++var2) {
            ((TLRPC.User)super.users.get(var2)).serializeToStream(var1);
         }

      }
   }

   public static class TL_messages_botResults_layer71 extends TLRPC.TL_messages_botResults {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         int var4 = 0;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.gallery = var5;
         super.query_id = var1.readInt64(var2);
         if ((super.flags & 2) != 0) {
            super.next_offset = var1.readString(var2);
         }

         if ((super.flags & 4) != 0) {
            super.switch_pm = TLRPC.TL_inlineBotSwitchPM.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         var3 = var1.readInt32(var2);
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.BotInlineResult var6 = TLRPC.BotInlineResult.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               super.results.add(var6);
            }

            super.cache_time = var1.readInt32(var2);
         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.gallery) {
            var2 = super.flags | 1;
         } else {
            var2 = super.flags & -2;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt64(super.query_id);
         if ((super.flags & 2) != 0) {
            var1.writeString(super.next_offset);
         }

         if ((super.flags & 4) != 0) {
            super.switch_pm.serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         int var3 = super.results.size();
         var1.writeInt32(var3);

         for(var2 = 0; var2 < var3; ++var2) {
            ((TLRPC.BotInlineResult)super.results.get(var2)).serializeToStream(var1);
         }

         var1.writeInt32(super.cache_time);
      }
   }

   public static class TL_messages_channelMessages extends TLRPC.messages_Messages {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         byte var4 = 0;
         boolean var5;
         if ((var3 & 2) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.inexact = var5;
         super.pts = var1.readInt32(var2);
         super.count = var1.readInt32(var2);
         var3 = var1.readInt32(var2);
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            int var6 = var1.readInt32(var2);

            for(var3 = 0; var3 < var6; ++var3) {
               TLRPC.Message var7 = TLRPC.Message.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var7 == null) {
                  return;
               }

               super.messages.add(var7);
            }

            var3 = var1.readInt32(var2);
            if (var3 != 481674261) {
               if (var2) {
                  throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
               }
            } else {
               var6 = var1.readInt32(var2);

               for(var3 = 0; var3 < var6; ++var3) {
                  TLRPC.Chat var8 = TLRPC.Chat.TLdeserialize(var1, var1.readInt32(var2), var2);
                  if (var8 == null) {
                     return;
                  }

                  super.chats.add(var8);
               }

               var3 = var1.readInt32(var2);
               if (var3 != 481674261) {
                  if (var2) {
                     throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
                  }
               } else {
                  var6 = var1.readInt32(var2);

                  for(var3 = var4; var3 < var6; ++var3) {
                     TLRPC.User var9 = TLRPC.User.TLdeserialize(var1, var1.readInt32(var2), var2);
                     if (var9 == null) {
                        return;
                     }

                     super.users.add(var9);
                  }

               }
            }
         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.inexact) {
            var2 = super.flags | 2;
         } else {
            var2 = super.flags & -3;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt32(super.pts);
         var1.writeInt32(super.count);
         var1.writeInt32(481674261);
         int var3 = super.messages.size();
         var1.writeInt32(var3);
         byte var4 = 0;

         for(var2 = 0; var2 < var3; ++var2) {
            ((TLRPC.Message)super.messages.get(var2)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var3 = super.chats.size();
         var1.writeInt32(var3);

         for(var2 = 0; var2 < var3; ++var2) {
            ((TLRPC.Chat)super.chats.get(var2)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var3 = super.users.size();
         var1.writeInt32(var3);

         for(var2 = var4; var2 < var3; ++var2) {
            ((TLRPC.User)super.users.get(var2)).serializeToStream(var1);
         }

      }
   }

   public static class TL_messages_chatFull extends TLObject {
      public static int constructor;
      public ArrayList chats = new ArrayList();
      public TLRPC.ChatFull full_chat;
      public ArrayList users = new ArrayList();

      public static TLRPC.TL_messages_chatFull TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_messages_chatFull", var1));
            }
         } else {
            TLRPC.TL_messages_chatFull var3 = new TLRPC.TL_messages_chatFull();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.full_chat = TLRPC.ChatFull.TLdeserialize(var1, var1.readInt32(var2), var2);
         int var3 = var1.readInt32(var2);
         byte var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            int var5 = var1.readInt32(var2);

            for(var3 = 0; var3 < var5; ++var3) {
               TLRPC.Chat var6 = TLRPC.Chat.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               this.chats.add(var6);
            }

            var3 = var1.readInt32(var2);
            if (var3 != 481674261) {
               if (var2) {
                  throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
               }
            } else {
               var5 = var1.readInt32(var2);

               for(var3 = var4; var3 < var5; ++var3) {
                  TLRPC.User var7 = TLRPC.User.TLdeserialize(var1, var1.readInt32(var2), var2);
                  if (var7 == null) {
                     return;
                  }

                  this.users.add(var7);
               }

            }
         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.full_chat.serializeToStream(var1);
         var1.writeInt32(481674261);
         int var2 = this.chats.size();
         var1.writeInt32(var2);
         byte var3 = 0;

         int var4;
         for(var4 = 0; var4 < var2; ++var4) {
            ((TLRPC.Chat)this.chats.get(var4)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var2 = this.users.size();
         var1.writeInt32(var2);

         for(var4 = var3; var4 < var2; ++var4) {
            ((TLRPC.User)this.users.get(var4)).serializeToStream(var1);
         }

      }
   }

   public static class TL_messages_chats extends TLRPC.messages_Chats {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.Chat var5 = TLRPC.Chat.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               super.chats.add(var5);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = super.chats.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.Chat)super.chats.get(var3)).serializeToStream(var1);
         }

      }
   }

   public static class TL_messages_chatsSlice extends TLRPC.messages_Chats {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.count = var1.readInt32(var2);
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.Chat var5 = TLRPC.Chat.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               super.chats.add(var5);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.count);
         var1.writeInt32(481674261);
         int var2 = super.chats.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.Chat)super.chats.get(var3)).serializeToStream(var1);
         }

      }
   }

   public static class TL_messages_checkChatInvite extends TLObject {
      public static int constructor;
      public String hash;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.ChatInvite.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.hash);
      }
   }

   public static class TL_messages_clearAllDrafts extends TLObject {
      public static int constructor;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_messages_clearRecentStickers extends TLObject {
      public static int constructor;
      public boolean attached;
      public int flags;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.attached) {
            var2 = this.flags | 1;
         } else {
            var2 = this.flags & -2;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
      }
   }

   public static class TL_messages_createChat extends TLObject {
      public static int constructor;
      public String title;
      public ArrayList users = new ArrayList();

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Updates.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = this.users.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.InputUser)this.users.get(var3)).serializeToStream(var1);
         }

         var1.writeString(this.title);
      }
   }

   public static class TL_messages_deleteChatUser extends TLObject {
      public static int constructor;
      public int chat_id;
      public TLRPC.InputUser user_id;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Updates.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.chat_id);
         this.user_id.serializeToStream(var1);
      }
   }

   public static class TL_messages_deleteHistory extends TLObject {
      public static int constructor;
      public int flags;
      public boolean just_clear;
      public int max_id;
      public TLRPC.InputPeer peer;
      public boolean revoke;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_messages_affectedHistory.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.just_clear) {
            var2 = this.flags | 1;
         } else {
            var2 = this.flags & -2;
         }

         this.flags = var2;
         if (this.revoke) {
            var2 = this.flags | 2;
         } else {
            var2 = this.flags & -3;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         this.peer.serializeToStream(var1);
         var1.writeInt32(this.max_id);
      }
   }

   public static class TL_messages_deleteMessages extends TLObject {
      public static int constructor;
      public int flags;
      public ArrayList id = new ArrayList();
      public boolean revoke;

      public static TLRPC.TL_messages_deleteMessages TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_messages_deleteMessages", var1));
            }
         } else {
            TLRPC.TL_messages_deleteMessages var3 = new TLRPC.TL_messages_deleteMessages();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_messages_affectedMessages.TLdeserialize(var1, var2, var3);
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.flags = var1.readInt32(var2);
         int var3 = this.flags;
         int var4 = 0;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.revoke = var5;
         var3 = var1.readInt32(var2);
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               this.id.add(var1.readInt32(var2));
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.revoke) {
            var2 = this.flags | 1;
         } else {
            var2 = this.flags & -2;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         var1.writeInt32(481674261);
         int var3 = this.id.size();
         var1.writeInt32(var3);

         for(var2 = 0; var2 < var3; ++var2) {
            var1.writeInt32((Integer)this.id.get(var2));
         }

      }
   }

   public static class TL_messages_dhConfig extends TLRPC.messages_DhConfig {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.g = var1.readInt32(var2);
         super.p = var1.readByteArray(var2);
         super.version = var1.readInt32(var2);
         super.random = var1.readByteArray(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.g);
         var1.writeByteArray(super.p);
         var1.writeInt32(super.version);
         var1.writeByteArray(super.random);
      }
   }

   public static class TL_messages_dhConfigNotModified extends TLRPC.messages_DhConfig {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.random = var1.readByteArray(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeByteArray(super.random);
      }
   }

   public static class TL_messages_dialogs extends TLRPC.messages_Dialogs {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         int var3 = var1.readInt32(var2);
         byte var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            int var5 = var1.readInt32(var2);

            for(var3 = 0; var3 < var5; ++var3) {
               TLRPC.Dialog var6 = TLRPC.Dialog.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               super.dialogs.add(var6);
            }

            var3 = var1.readInt32(var2);
            if (var3 != 481674261) {
               if (var2) {
                  throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
               }
            } else {
               var5 = var1.readInt32(var2);

               for(var3 = 0; var3 < var5; ++var3) {
                  TLRPC.Message var7 = TLRPC.Message.TLdeserialize(var1, var1.readInt32(var2), var2);
                  if (var7 == null) {
                     return;
                  }

                  super.messages.add(var7);
               }

               var3 = var1.readInt32(var2);
               if (var3 != 481674261) {
                  if (var2) {
                     throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
                  }
               } else {
                  var5 = var1.readInt32(var2);

                  for(var3 = 0; var3 < var5; ++var3) {
                     TLRPC.Chat var8 = TLRPC.Chat.TLdeserialize(var1, var1.readInt32(var2), var2);
                     if (var8 == null) {
                        return;
                     }

                     super.chats.add(var8);
                  }

                  var3 = var1.readInt32(var2);
                  if (var3 != 481674261) {
                     if (var2) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
                     }
                  } else {
                     var5 = var1.readInt32(var2);

                     for(var3 = var4; var3 < var5; ++var3) {
                        TLRPC.User var9 = TLRPC.User.TLdeserialize(var1, var1.readInt32(var2), var2);
                        if (var9 == null) {
                           return;
                        }

                        super.users.add(var9);
                     }

                  }
               }
            }
         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = super.dialogs.size();
         var1.writeInt32(var2);
         byte var3 = 0;

         int var4;
         for(var4 = 0; var4 < var2; ++var4) {
            ((TLRPC.Dialog)super.dialogs.get(var4)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var2 = super.messages.size();
         var1.writeInt32(var2);

         for(var4 = 0; var4 < var2; ++var4) {
            ((TLRPC.Message)super.messages.get(var4)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var2 = super.chats.size();
         var1.writeInt32(var2);

         for(var4 = 0; var4 < var2; ++var4) {
            ((TLRPC.Chat)super.chats.get(var4)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var2 = super.users.size();
         var1.writeInt32(var2);

         for(var4 = var3; var4 < var2; ++var4) {
            ((TLRPC.User)super.users.get(var4)).serializeToStream(var1);
         }

      }
   }

   public static class TL_messages_dialogsNotModified extends TLRPC.messages_Dialogs {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.count = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.count);
      }
   }

   public static class TL_messages_dialogsSlice extends TLRPC.messages_Dialogs {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.count = var1.readInt32(var2);
         int var3 = var1.readInt32(var2);
         byte var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            int var5 = var1.readInt32(var2);

            for(var3 = 0; var3 < var5; ++var3) {
               TLRPC.Dialog var6 = TLRPC.Dialog.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               super.dialogs.add(var6);
            }

            var3 = var1.readInt32(var2);
            if (var3 != 481674261) {
               if (var2) {
                  throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
               }
            } else {
               var5 = var1.readInt32(var2);

               for(var3 = 0; var3 < var5; ++var3) {
                  TLRPC.Message var7 = TLRPC.Message.TLdeserialize(var1, var1.readInt32(var2), var2);
                  if (var7 == null) {
                     return;
                  }

                  super.messages.add(var7);
               }

               var3 = var1.readInt32(var2);
               if (var3 != 481674261) {
                  if (var2) {
                     throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
                  }
               } else {
                  var5 = var1.readInt32(var2);

                  for(var3 = 0; var3 < var5; ++var3) {
                     TLRPC.Chat var8 = TLRPC.Chat.TLdeserialize(var1, var1.readInt32(var2), var2);
                     if (var8 == null) {
                        return;
                     }

                     super.chats.add(var8);
                  }

                  var3 = var1.readInt32(var2);
                  if (var3 != 481674261) {
                     if (var2) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
                     }
                  } else {
                     var5 = var1.readInt32(var2);

                     for(var3 = var4; var3 < var5; ++var3) {
                        TLRPC.User var9 = TLRPC.User.TLdeserialize(var1, var1.readInt32(var2), var2);
                        if (var9 == null) {
                           return;
                        }

                        super.users.add(var9);
                     }

                  }
               }
            }
         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.count);
         var1.writeInt32(481674261);
         int var2 = super.dialogs.size();
         var1.writeInt32(var2);
         byte var3 = 0;

         int var4;
         for(var4 = 0; var4 < var2; ++var4) {
            ((TLRPC.Dialog)super.dialogs.get(var4)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var2 = super.messages.size();
         var1.writeInt32(var2);

         for(var4 = 0; var4 < var2; ++var4) {
            ((TLRPC.Message)super.messages.get(var4)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var2 = super.chats.size();
         var1.writeInt32(var2);

         for(var4 = 0; var4 < var2; ++var4) {
            ((TLRPC.Chat)super.chats.get(var4)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var2 = super.users.size();
         var1.writeInt32(var2);

         for(var4 = var3; var4 < var2; ++var4) {
            ((TLRPC.User)super.users.get(var4)).serializeToStream(var1);
         }

      }
   }

   public static class TL_messages_discardEncryption extends TLObject {
      public static int constructor;
      public int chat_id;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.chat_id);
      }
   }

   public static class TL_messages_editChatAbout extends TLObject {
      public static int constructor;
      public String about;
      public TLRPC.InputPeer peer;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.peer.serializeToStream(var1);
         var1.writeString(this.about);
      }
   }

   public static class TL_messages_editChatAdmin extends TLObject {
      public static int constructor;
      public int chat_id;
      public boolean is_admin;
      public TLRPC.InputUser user_id;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.chat_id);
         this.user_id.serializeToStream(var1);
         var1.writeBool(this.is_admin);
      }
   }

   public static class TL_messages_editChatDefaultBannedRights extends TLObject {
      public static int constructor;
      public TLRPC.TL_chatBannedRights banned_rights;
      public TLRPC.InputPeer peer;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Updates.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.peer.serializeToStream(var1);
         this.banned_rights.serializeToStream(var1);
      }
   }

   public static class TL_messages_editChatPhoto extends TLObject {
      public static int constructor;
      public int chat_id;
      public TLRPC.InputChatPhoto photo;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Updates.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.chat_id);
         this.photo.serializeToStream(var1);
      }
   }

   public static class TL_messages_editChatTitle extends TLObject {
      public static int constructor;
      public int chat_id;
      public String title;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Updates.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.chat_id);
         var1.writeString(this.title);
      }
   }

   public static class TL_messages_editMessage extends TLObject {
      public static int constructor;
      public ArrayList entities = new ArrayList();
      public int flags;
      public int id;
      public TLRPC.InputMedia media;
      public String message;
      public boolean no_webpage;
      public TLRPC.InputPeer peer;
      public TLRPC.ReplyMarkup reply_markup;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Updates.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.no_webpage) {
            var2 = this.flags | 2;
         } else {
            var2 = this.flags & -3;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         this.peer.serializeToStream(var1);
         var1.writeInt32(this.id);
         if ((this.flags & 2048) != 0) {
            var1.writeString(this.message);
         }

         if ((this.flags & 16384) != 0) {
            this.media.serializeToStream(var1);
         }

         if ((this.flags & 4) != 0) {
            this.reply_markup.serializeToStream(var1);
         }

         if ((this.flags & 8) != 0) {
            var1.writeInt32(481674261);
            int var3 = this.entities.size();
            var1.writeInt32(var3);

            for(var2 = 0; var2 < var3; ++var2) {
               ((TLRPC.MessageEntity)this.entities.get(var2)).serializeToStream(var1);
            }
         }

      }
   }

   public static class TL_messages_exportChatInvite extends TLObject {
      public static int constructor;
      public TLRPC.InputPeer peer;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.ExportedChatInvite.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.peer.serializeToStream(var1);
      }
   }

   public static class TL_messages_faveSticker extends TLObject {
      public static int constructor;
      public TLRPC.InputDocument id;
      public boolean unfave;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.id.serializeToStream(var1);
         var1.writeBool(this.unfave);
      }
   }

   public static class TL_messages_favedStickers extends TLRPC.messages_FavedStickers {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.hash = var1.readInt32(var2);
         int var3 = var1.readInt32(var2);
         byte var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            int var5 = var1.readInt32(var2);

            for(var3 = 0; var3 < var5; ++var3) {
               TLRPC.TL_stickerPack var6 = TLRPC.TL_stickerPack.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               super.packs.add(var6);
            }

            var3 = var1.readInt32(var2);
            if (var3 != 481674261) {
               if (var2) {
                  throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
               }
            } else {
               var5 = var1.readInt32(var2);

               for(var3 = var4; var3 < var5; ++var3) {
                  TLRPC.Document var7 = TLRPC.Document.TLdeserialize(var1, var1.readInt32(var2), var2);
                  if (var7 == null) {
                     return;
                  }

                  super.stickers.add(var7);
               }

            }
         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.hash);
         var1.writeInt32(481674261);
         int var2 = super.packs.size();
         var1.writeInt32(var2);
         byte var3 = 0;

         int var4;
         for(var4 = 0; var4 < var2; ++var4) {
            ((TLRPC.TL_stickerPack)super.packs.get(var4)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var2 = super.stickers.size();
         var1.writeInt32(var2);

         for(var4 = var3; var4 < var2; ++var4) {
            ((TLRPC.Document)super.stickers.get(var4)).serializeToStream(var1);
         }

      }
   }

   public static class TL_messages_favedStickersNotModified extends TLRPC.messages_FavedStickers {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_messages_featuredStickers extends TLRPC.messages_FeaturedStickers {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.hash = var1.readInt32(var2);
         int var3 = var1.readInt32(var2);
         byte var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            int var5 = var1.readInt32(var2);

            for(var3 = 0; var3 < var5; ++var3) {
               TLRPC.StickerSetCovered var6 = TLRPC.StickerSetCovered.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               super.sets.add(var6);
            }

            var3 = var1.readInt32(var2);
            if (var3 != 481674261) {
               if (var2) {
                  throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
               }
            } else {
               var5 = var1.readInt32(var2);

               for(var3 = var4; var3 < var5; ++var3) {
                  super.unread.add(var1.readInt64(var2));
               }

            }
         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.hash);
         var1.writeInt32(481674261);
         int var2 = super.sets.size();
         var1.writeInt32(var2);
         byte var3 = 0;

         int var4;
         for(var4 = 0; var4 < var2; ++var4) {
            ((TLRPC.StickerSetCovered)super.sets.get(var4)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var2 = super.unread.size();
         var1.writeInt32(var2);

         for(var4 = var3; var4 < var2; ++var4) {
            var1.writeInt64((Long)super.unread.get(var4));
         }

      }
   }

   public static class TL_messages_featuredStickersNotModified extends TLRPC.messages_FeaturedStickers {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_messages_forwardMessage extends TLObject {
      public static int constructor;
      public int id;
      public TLRPC.InputPeer peer;
      public long random_id;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Updates.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.peer.serializeToStream(var1);
         var1.writeInt32(this.id);
         var1.writeInt64(this.random_id);
      }
   }

   public static class TL_messages_forwardMessages extends TLObject {
      public static int constructor;
      public boolean background;
      public int flags;
      public TLRPC.InputPeer from_peer;
      public boolean grouped;
      public ArrayList id = new ArrayList();
      public ArrayList random_id = new ArrayList();
      public boolean silent;
      public TLRPC.InputPeer to_peer;
      public boolean with_my_score;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Updates.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.silent) {
            var2 = this.flags | 32;
         } else {
            var2 = this.flags & -33;
         }

         this.flags = var2;
         if (this.background) {
            var2 = this.flags | 64;
         } else {
            var2 = this.flags & -65;
         }

         this.flags = var2;
         if (this.with_my_score) {
            var2 = this.flags | 256;
         } else {
            var2 = this.flags & -257;
         }

         this.flags = var2;
         if (this.grouped) {
            var2 = this.flags | 512;
         } else {
            var2 = this.flags & -513;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         this.from_peer.serializeToStream(var1);
         var1.writeInt32(481674261);
         int var3 = this.id.size();
         var1.writeInt32(var3);
         byte var4 = 0;

         for(var2 = 0; var2 < var3; ++var2) {
            var1.writeInt32((Integer)this.id.get(var2));
         }

         var1.writeInt32(481674261);
         var3 = this.random_id.size();
         var1.writeInt32(var3);

         for(var2 = var4; var2 < var3; ++var2) {
            var1.writeInt64((Long)this.random_id.get(var2));
         }

         this.to_peer.serializeToStream(var1);
      }
   }

   public static class TL_messages_foundGifs extends TLObject {
      public static int constructor;
      public int next_offset;
      public ArrayList results = new ArrayList();

      public static TLRPC.TL_messages_foundGifs TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_messages_foundGifs", var1));
            }
         } else {
            TLRPC.TL_messages_foundGifs var3 = new TLRPC.TL_messages_foundGifs();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.next_offset = var1.readInt32(var2);
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.FoundGif var5 = TLRPC.FoundGif.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               this.results.add(var5);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.next_offset);
         var1.writeInt32(481674261);
         int var2 = this.results.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.FoundGif)this.results.get(var3)).serializeToStream(var1);
         }

      }
   }

   public static class TL_messages_foundStickerSets extends TLRPC.messages_FoundStickerSets {
      public static int constructor;
      public int hash;
      public ArrayList sets = new ArrayList();

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.hash = var1.readInt32(var2);
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.StickerSetCovered var5 = TLRPC.StickerSetCovered.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               this.sets.add(var5);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.hash);
         var1.writeInt32(481674261);
         int var2 = this.sets.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.StickerSetCovered)this.sets.get(var3)).serializeToStream(var1);
         }

      }
   }

   public static class TL_messages_foundStickerSetsNotModified extends TLRPC.messages_FoundStickerSets {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_messages_getAllChats extends TLObject {
      public static int constructor;
      public ArrayList except_ids = new ArrayList();

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.messages_Chats.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = this.except_ids.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            var1.writeInt32((Integer)this.except_ids.get(var3));
         }

      }
   }

   public static class TL_messages_getAllDrafts extends TLObject {
      public static int constructor;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Updates.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_messages_getAllStickers extends TLObject {
      public static int constructor;
      public int hash;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.messages_AllStickers.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.hash);
      }
   }

   public static class TL_messages_getArchivedStickers extends TLObject {
      public static int constructor;
      public int flags;
      public int limit;
      public boolean masks;
      public long offset_id;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_messages_archivedStickers.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.masks) {
            var2 = this.flags | 1;
         } else {
            var2 = this.flags & -2;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         var1.writeInt64(this.offset_id);
         var1.writeInt32(this.limit);
      }
   }

   public static class TL_messages_getAttachedStickers extends TLObject {
      public static int constructor;
      public TLRPC.InputStickeredMedia media;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         TLRPC.Vector var4 = new TLRPC.Vector();
         int var5 = var1.readInt32(var3);

         for(var2 = 0; var2 < var5; ++var2) {
            TLRPC.StickerSetCovered var6 = TLRPC.StickerSetCovered.TLdeserialize(var1, var1.readInt32(var3), var3);
            if (var6 == null) {
               return var4;
            }

            var4.objects.add(var6);
         }

         return var4;
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.media.serializeToStream(var1);
      }
   }

   public static class TL_messages_getBotCallbackAnswer extends TLObject {
      public static int constructor;
      public byte[] data;
      public int flags;
      public boolean game;
      public int msg_id;
      public TLRPC.InputPeer peer;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_messages_botCallbackAnswer.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.game) {
            var2 = this.flags | 2;
         } else {
            var2 = this.flags & -3;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         this.peer.serializeToStream(var1);
         var1.writeInt32(this.msg_id);
         if ((this.flags & 1) != 0) {
            var1.writeByteArray(this.data);
         }

      }
   }

   public static class TL_messages_getChats extends TLObject {
      public static int constructor;
      public ArrayList id = new ArrayList();

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.messages_Chats.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = this.id.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            var1.writeInt32((Integer)this.id.get(var3));
         }

      }
   }

   public static class TL_messages_getCommonChats extends TLObject {
      public static int constructor;
      public int limit;
      public int max_id;
      public TLRPC.InputUser user_id;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.messages_Chats.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.user_id.serializeToStream(var1);
         var1.writeInt32(this.max_id);
         var1.writeInt32(this.limit);
      }
   }

   public static class TL_messages_getDhConfig extends TLObject {
      public static int constructor;
      public int random_length;
      public int version;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.messages_DhConfig.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.version);
         var1.writeInt32(this.random_length);
      }
   }

   public static class TL_messages_getDialogUnreadMarks extends TLObject {
      public static int constructor;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         TLRPC.Vector var4 = new TLRPC.Vector();
         int var5 = var1.readInt32(var3);

         for(var2 = 0; var2 < var5; ++var2) {
            TLRPC.DialogPeer var6 = TLRPC.DialogPeer.TLdeserialize(var1, var1.readInt32(var3), var3);
            if (var6 == null) {
               return var4;
            }

            var4.objects.add(var6);
         }

         return var4;
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_messages_getDialogs extends TLObject {
      public static int constructor;
      public boolean exclude_pinned;
      public int flags;
      public int folder_id;
      public int hash;
      public int limit;
      public int offset_date;
      public int offset_id;
      public TLRPC.InputPeer offset_peer;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.messages_Dialogs.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.exclude_pinned) {
            var2 = this.flags | 1;
         } else {
            var2 = this.flags & -2;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         if ((this.flags & 2) != 0) {
            var1.writeInt32(this.folder_id);
         }

         var1.writeInt32(this.offset_date);
         var1.writeInt32(this.offset_id);
         this.offset_peer.serializeToStream(var1);
         var1.writeInt32(this.limit);
         var1.writeInt32(this.hash);
      }
   }

   public static class TL_messages_getDocumentByHash extends TLObject {
      public static int constructor;
      public String mime_type;
      public byte[] sha256;
      public int size;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Document.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeByteArray(this.sha256);
         var1.writeInt32(this.size);
         var1.writeString(this.mime_type);
      }
   }

   public static class TL_messages_getEmojiKeywords extends TLObject {
      public static int constructor;
      public String lang_code;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_emojiKeywordsDifference.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.lang_code);
      }
   }

   public static class TL_messages_getEmojiKeywordsDifference extends TLObject {
      public static int constructor;
      public int from_version;
      public String lang_code;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_emojiKeywordsDifference.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.lang_code);
         var1.writeInt32(this.from_version);
      }
   }

   public static class TL_messages_getEmojiKeywordsLanguages extends TLObject {
      public static int constructor;
      public ArrayList lang_codes = new ArrayList();

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         TLRPC.Vector var4 = new TLRPC.Vector();
         int var5 = var1.readInt32(var3);

         for(var2 = 0; var2 < var5; ++var2) {
            TLRPC.TL_emojiLanguage var6 = TLRPC.TL_emojiLanguage.TLdeserialize(var1, var1.readInt32(var3), var3);
            if (var6 == null) {
               return var4;
            }

            var4.objects.add(var6);
         }

         return var4;
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = this.lang_codes.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            var1.writeString((String)this.lang_codes.get(var3));
         }

      }
   }

   public static class TL_messages_getEmojiURL extends TLObject {
      public static int constructor;
      public String lang_code;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_emojiURL.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.lang_code);
      }
   }

   public static class TL_messages_getFavedStickers extends TLObject {
      public static int constructor;
      public int hash;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.messages_FavedStickers.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.hash);
      }
   }

   public static class TL_messages_getFeaturedStickers extends TLObject {
      public static int constructor;
      public int hash;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.messages_FeaturedStickers.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.hash);
      }
   }

   public static class TL_messages_getFullChat extends TLObject {
      public static int constructor;
      public int chat_id;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_messages_chatFull.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.chat_id);
      }
   }

   public static class TL_messages_getGameHighScores extends TLObject {
      public static int constructor;
      public int id;
      public TLRPC.InputPeer peer;
      public TLRPC.InputUser user_id;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_messages_highScores.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.peer.serializeToStream(var1);
         var1.writeInt32(this.id);
         this.user_id.serializeToStream(var1);
      }
   }

   public static class TL_messages_getHistory extends TLObject {
      public static int constructor;
      public int add_offset;
      public int limit;
      public int max_id;
      public int min_id;
      public int offset_date;
      public int offset_id;
      public TLRPC.InputPeer peer;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.messages_Messages.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.peer.serializeToStream(var1);
         var1.writeInt32(this.offset_id);
         var1.writeInt32(this.offset_date);
         var1.writeInt32(this.add_offset);
         var1.writeInt32(this.limit);
         var1.writeInt32(this.max_id);
         var1.writeInt32(this.min_id);
      }
   }

   public static class TL_messages_getInlineBotResults extends TLObject {
      public static int constructor;
      public TLRPC.InputUser bot;
      public int flags;
      public TLRPC.InputGeoPoint geo_point;
      public String offset;
      public TLRPC.InputPeer peer;
      public String query;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.messages_BotResults.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.flags);
         this.bot.serializeToStream(var1);
         this.peer.serializeToStream(var1);
         if ((this.flags & 1) != 0) {
            this.geo_point.serializeToStream(var1);
         }

         var1.writeString(this.query);
         var1.writeString(this.offset);
      }
   }

   public static class TL_messages_getInlineGameHighScores extends TLObject {
      public static int constructor;
      public TLRPC.TL_inputBotInlineMessageID id;
      public TLRPC.InputUser user_id;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_messages_highScores.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.id.serializeToStream(var1);
         this.user_id.serializeToStream(var1);
      }
   }

   public static class TL_messages_getMaskStickers extends TLObject {
      public static int constructor;
      public int hash;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.messages_AllStickers.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.hash);
      }
   }

   public static class TL_messages_getMessageEditData extends TLObject {
      public static int constructor;
      public int id;
      public TLRPC.InputPeer peer;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_messages_messageEditData.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.peer.serializeToStream(var1);
         var1.writeInt32(this.id);
      }
   }

   public static class TL_messages_getMessages extends TLObject {
      public static int constructor;
      public ArrayList id = new ArrayList();

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.messages_Messages.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = this.id.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            var1.writeInt32((Integer)this.id.get(var3));
         }

      }
   }

   public static class TL_messages_getMessagesViews extends TLObject {
      public static int constructor;
      public ArrayList id = new ArrayList();
      public boolean increment;
      public TLRPC.InputPeer peer;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         TLRPC.Vector var4 = new TLRPC.Vector();
         int var5 = var1.readInt32(var3);

         for(var2 = 0; var2 < var5; ++var2) {
            var4.objects.add(var1.readInt32(var3));
         }

         return var4;
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.peer.serializeToStream(var1);
         var1.writeInt32(481674261);
         int var2 = this.id.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            var1.writeInt32((Integer)this.id.get(var3));
         }

         var1.writeBool(this.increment);
      }
   }

   public static class TL_messages_getOnlines extends TLObject {
      public static int constructor;
      public TLRPC.InputPeer peer;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_chatOnlines.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.peer.serializeToStream(var1);
      }
   }

   public static class TL_messages_getPeerDialogs extends TLObject {
      public static int constructor;
      public ArrayList peers = new ArrayList();

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_messages_peerDialogs.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = this.peers.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.InputDialogPeer)this.peers.get(var3)).serializeToStream(var1);
         }

      }
   }

   public static class TL_messages_getPeerSettings extends TLObject {
      public static int constructor;
      public TLRPC.InputPeer peer;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_peerSettings.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.peer.serializeToStream(var1);
      }
   }

   public static class TL_messages_getPinnedDialogs extends TLObject {
      public static int constructor;
      public int folder_id;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_messages_peerDialogs.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.folder_id);
      }
   }

   public static class TL_messages_getPollResults extends TLObject {
      public static int constructor;
      public int msg_id;
      public TLRPC.InputPeer peer;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Updates.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.peer.serializeToStream(var1);
         var1.writeInt32(this.msg_id);
      }
   }

   public static class TL_messages_getRecentLocations extends TLObject {
      public static int constructor;
      public int hash;
      public int limit;
      public TLRPC.InputPeer peer;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.messages_Messages.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.peer.serializeToStream(var1);
         var1.writeInt32(this.limit);
         var1.writeInt32(this.hash);
      }
   }

   public static class TL_messages_getRecentStickers extends TLObject {
      public static int constructor;
      public boolean attached;
      public int flags;
      public int hash;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.messages_RecentStickers.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.attached) {
            var2 = this.flags | 1;
         } else {
            var2 = this.flags & -2;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         var1.writeInt32(this.hash);
      }
   }

   public static class TL_messages_getSavedGifs extends TLObject {
      public static int constructor;
      public int hash;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.messages_SavedGifs.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.hash);
      }
   }

   public static class TL_messages_getSearchCounters extends TLObject {
      public static int constructor;
      public ArrayList filters = new ArrayList();
      public TLRPC.InputPeer peer;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         TLRPC.Vector var4 = new TLRPC.Vector();
         int var5 = var1.readInt32(var3);

         for(var2 = 0; var2 < var5; ++var2) {
            TLRPC.TL_messages_searchCounter var6 = TLRPC.TL_messages_searchCounter.TLdeserialize(var1, var1.readInt32(var3), var3);
            if (var6 == null) {
               return var4;
            }

            var4.objects.add(var6);
         }

         return var4;
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.peer.serializeToStream(var1);
         var1.writeInt32(481674261);
         int var2 = this.filters.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.MessagesFilter)this.filters.get(var3)).serializeToStream(var1);
         }

      }
   }

   public static class TL_messages_getStatsURL extends TLObject {
      public static int constructor;
      public boolean dark;
      public int flags;
      public String params;
      public TLRPC.InputPeer peer;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_statsURL.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.dark) {
            var2 = this.flags | 1;
         } else {
            var2 = this.flags & -2;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         this.peer.serializeToStream(var1);
         var1.writeString(this.params);
      }
   }

   public static class TL_messages_getStickerSet extends TLObject {
      public static int constructor;
      public TLRPC.InputStickerSet stickerset;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_messages_stickerSet.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.stickerset.serializeToStream(var1);
      }
   }

   public static class TL_messages_getStickers extends TLObject {
      public static int constructor;
      public String emoticon;
      public int hash;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.messages_Stickers.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.emoticon);
         var1.writeInt32(this.hash);
      }
   }

   public static class TL_messages_getUnreadMentions extends TLObject {
      public static int constructor;
      public int add_offset;
      public int limit;
      public int max_id;
      public int min_id;
      public int offset_id;
      public TLRPC.InputPeer peer;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.messages_Messages.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.peer.serializeToStream(var1);
         var1.writeInt32(this.offset_id);
         var1.writeInt32(this.add_offset);
         var1.writeInt32(this.limit);
         var1.writeInt32(this.max_id);
         var1.writeInt32(this.min_id);
      }
   }

   public static class TL_messages_getWebPage extends TLObject {
      public static int constructor;
      public int hash;
      public String url;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.WebPage.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.url);
         var1.writeInt32(this.hash);
      }
   }

   public static class TL_messages_getWebPagePreview extends TLObject {
      public static int constructor;
      public ArrayList entities = new ArrayList();
      public int flags;
      public String message;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.MessageMedia.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.flags);
         var1.writeString(this.message);
         if ((this.flags & 8) != 0) {
            var1.writeInt32(481674261);
            int var2 = this.entities.size();
            var1.writeInt32(var2);

            for(int var3 = 0; var3 < var2; ++var3) {
               ((TLRPC.MessageEntity)this.entities.get(var3)).serializeToStream(var1);
            }
         }

      }
   }

   public static class TL_messages_hideReportSpam extends TLObject {
      public static int constructor;
      public TLRPC.InputPeer peer;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.peer.serializeToStream(var1);
      }
   }

   public static class TL_messages_highScores extends TLObject {
      public static int constructor;
      public ArrayList scores = new ArrayList();
      public ArrayList users = new ArrayList();

      public static TLRPC.TL_messages_highScores TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_messages_highScores", var1));
            }
         } else {
            TLRPC.TL_messages_highScores var3 = new TLRPC.TL_messages_highScores();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         int var3 = var1.readInt32(var2);
         byte var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            int var5 = var1.readInt32(var2);

            for(var3 = 0; var3 < var5; ++var3) {
               TLRPC.TL_highScore var6 = TLRPC.TL_highScore.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               this.scores.add(var6);
            }

            var3 = var1.readInt32(var2);
            if (var3 != 481674261) {
               if (var2) {
                  throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
               }
            } else {
               var5 = var1.readInt32(var2);

               for(var3 = var4; var3 < var5; ++var3) {
                  TLRPC.User var7 = TLRPC.User.TLdeserialize(var1, var1.readInt32(var2), var2);
                  if (var7 == null) {
                     return;
                  }

                  this.users.add(var7);
               }

            }
         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = this.scores.size();
         var1.writeInt32(var2);
         byte var3 = 0;

         int var4;
         for(var4 = 0; var4 < var2; ++var4) {
            ((TLRPC.TL_highScore)this.scores.get(var4)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var2 = this.users.size();
         var1.writeInt32(var2);

         for(var4 = var3; var4 < var2; ++var4) {
            ((TLRPC.User)this.users.get(var4)).serializeToStream(var1);
         }

      }
   }

   public static class TL_messages_importChatInvite extends TLObject {
      public static int constructor;
      public String hash;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Updates.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.hash);
      }
   }

   public static class TL_messages_installStickerSet extends TLObject {
      public static int constructor;
      public boolean archived;
      public TLRPC.InputStickerSet stickerset;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.messages_StickerSetInstallResult.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.stickerset.serializeToStream(var1);
         var1.writeBool(this.archived);
      }
   }

   public static class TL_messages_markDialogUnread extends TLObject {
      public static int constructor;
      public int flags;
      public TLRPC.InputDialogPeer peer;
      public boolean unread;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.unread) {
            var2 = this.flags | 1;
         } else {
            var2 = this.flags & -2;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         this.peer.serializeToStream(var1);
      }
   }

   public static class TL_messages_messageEditData extends TLObject {
      public static int constructor;
      public boolean caption;
      public int flags;

      public static TLRPC.TL_messages_messageEditData TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_messages_messageEditData", var1));
            }
         } else {
            TLRPC.TL_messages_messageEditData var3 = new TLRPC.TL_messages_messageEditData();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.flags = var1.readInt32(var2);
         int var3 = this.flags;
         var2 = true;
         if ((var3 & 1) == 0) {
            var2 = false;
         }

         this.caption = var2;
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.caption) {
            var2 = this.flags | 1;
         } else {
            var2 = this.flags & -2;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
      }
   }

   public static class TL_messages_messageEmpty extends TLObject {
      public static int constructor;

      public static TLRPC.TL_messages_messageEmpty TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_messages_messageEmpty", var1));
            }
         } else {
            TLRPC.TL_messages_messageEmpty var3 = new TLRPC.TL_messages_messageEmpty();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_messages_messages extends TLRPC.messages_Messages {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         int var3 = var1.readInt32(var2);
         byte var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            int var5 = var1.readInt32(var2);

            for(var3 = 0; var3 < var5; ++var3) {
               TLRPC.Message var6 = TLRPC.Message.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               super.messages.add(var6);
            }

            var3 = var1.readInt32(var2);
            if (var3 != 481674261) {
               if (var2) {
                  throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
               }
            } else {
               var5 = var1.readInt32(var2);

               for(var3 = 0; var3 < var5; ++var3) {
                  TLRPC.Chat var7 = TLRPC.Chat.TLdeserialize(var1, var1.readInt32(var2), var2);
                  if (var7 == null) {
                     return;
                  }

                  super.chats.add(var7);
               }

               var3 = var1.readInt32(var2);
               if (var3 != 481674261) {
                  if (var2) {
                     throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
                  }
               } else {
                  var5 = var1.readInt32(var2);

                  for(var3 = var4; var3 < var5; ++var3) {
                     TLRPC.User var8 = TLRPC.User.TLdeserialize(var1, var1.readInt32(var2), var2);
                     if (var8 == null) {
                        return;
                     }

                     super.users.add(var8);
                  }

               }
            }
         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = super.messages.size();
         var1.writeInt32(var2);
         byte var3 = 0;

         int var4;
         for(var4 = 0; var4 < var2; ++var4) {
            ((TLRPC.Message)super.messages.get(var4)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var2 = super.chats.size();
         var1.writeInt32(var2);

         for(var4 = 0; var4 < var2; ++var4) {
            ((TLRPC.Chat)super.chats.get(var4)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var2 = super.users.size();
         var1.writeInt32(var2);

         for(var4 = var3; var4 < var2; ++var4) {
            ((TLRPC.User)super.users.get(var4)).serializeToStream(var1);
         }

      }
   }

   public static class TL_messages_messagesSlice extends TLRPC.messages_Messages {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         byte var4 = 0;
         boolean var5;
         if ((var3 & 2) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.inexact = var5;
         super.count = var1.readInt32(var2);
         if ((super.flags & 1) != 0) {
            super.next_rate = var1.readInt32(var2);
         }

         var3 = var1.readInt32(var2);
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            int var6 = var1.readInt32(var2);

            for(var3 = 0; var3 < var6; ++var3) {
               TLRPC.Message var7 = TLRPC.Message.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var7 == null) {
                  return;
               }

               super.messages.add(var7);
            }

            var3 = var1.readInt32(var2);
            if (var3 != 481674261) {
               if (var2) {
                  throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
               }
            } else {
               var6 = var1.readInt32(var2);

               for(var3 = 0; var3 < var6; ++var3) {
                  TLRPC.Chat var8 = TLRPC.Chat.TLdeserialize(var1, var1.readInt32(var2), var2);
                  if (var8 == null) {
                     return;
                  }

                  super.chats.add(var8);
               }

               var3 = var1.readInt32(var2);
               if (var3 != 481674261) {
                  if (var2) {
                     throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
                  }
               } else {
                  var6 = var1.readInt32(var2);

                  for(var3 = var4; var3 < var6; ++var3) {
                     TLRPC.User var9 = TLRPC.User.TLdeserialize(var1, var1.readInt32(var2), var2);
                     if (var9 == null) {
                        return;
                     }

                     super.users.add(var9);
                  }

               }
            }
         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.inexact) {
            var2 = super.flags | 2;
         } else {
            var2 = super.flags & -3;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt32(super.count);
         if ((super.flags & 1) != 0) {
            var1.writeInt32(super.next_rate);
         }

         var1.writeInt32(481674261);
         int var3 = super.messages.size();
         var1.writeInt32(var3);
         byte var4 = 0;

         for(var2 = 0; var2 < var3; ++var2) {
            ((TLRPC.Message)super.messages.get(var2)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var3 = super.chats.size();
         var1.writeInt32(var3);

         for(var2 = 0; var2 < var3; ++var2) {
            ((TLRPC.Chat)super.chats.get(var2)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var3 = super.users.size();
         var1.writeInt32(var3);

         for(var2 = var4; var2 < var3; ++var2) {
            ((TLRPC.User)super.users.get(var2)).serializeToStream(var1);
         }

      }
   }

   public static class TL_messages_migrateChat extends TLObject {
      public static int constructor;
      public int chat_id;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Updates.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.chat_id);
      }
   }

   public static class TL_messages_peerDialogs extends TLObject {
      public static int constructor;
      public ArrayList chats = new ArrayList();
      public ArrayList dialogs = new ArrayList();
      public ArrayList messages = new ArrayList();
      public TLRPC.TL_updates_state state;
      public ArrayList users = new ArrayList();

      public static TLRPC.TL_messages_peerDialogs TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_messages_peerDialogs", var1));
            }
         } else {
            TLRPC.TL_messages_peerDialogs var3 = new TLRPC.TL_messages_peerDialogs();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         int var3 = var1.readInt32(var2);
         byte var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            int var5 = var1.readInt32(var2);

            for(var3 = 0; var3 < var5; ++var3) {
               TLRPC.Dialog var6 = TLRPC.Dialog.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               this.dialogs.add(var6);
            }

            var3 = var1.readInt32(var2);
            if (var3 != 481674261) {
               if (var2) {
                  throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
               }
            } else {
               var5 = var1.readInt32(var2);

               for(var3 = 0; var3 < var5; ++var3) {
                  TLRPC.Message var7 = TLRPC.Message.TLdeserialize(var1, var1.readInt32(var2), var2);
                  if (var7 == null) {
                     return;
                  }

                  this.messages.add(var7);
               }

               var3 = var1.readInt32(var2);
               if (var3 != 481674261) {
                  if (var2) {
                     throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
                  }
               } else {
                  var5 = var1.readInt32(var2);

                  for(var3 = 0; var3 < var5; ++var3) {
                     TLRPC.Chat var8 = TLRPC.Chat.TLdeserialize(var1, var1.readInt32(var2), var2);
                     if (var8 == null) {
                        return;
                     }

                     this.chats.add(var8);
                  }

                  var3 = var1.readInt32(var2);
                  if (var3 != 481674261) {
                     if (var2) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
                     }
                  } else {
                     var5 = var1.readInt32(var2);

                     for(var3 = var4; var3 < var5; ++var3) {
                        TLRPC.User var9 = TLRPC.User.TLdeserialize(var1, var1.readInt32(var2), var2);
                        if (var9 == null) {
                           return;
                        }

                        this.users.add(var9);
                     }

                     this.state = TLRPC.TL_updates_state.TLdeserialize(var1, var1.readInt32(var2), var2);
                  }
               }
            }
         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = this.dialogs.size();
         var1.writeInt32(var2);
         byte var3 = 0;

         int var4;
         for(var4 = 0; var4 < var2; ++var4) {
            ((TLRPC.Dialog)this.dialogs.get(var4)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var2 = this.messages.size();
         var1.writeInt32(var2);

         for(var4 = 0; var4 < var2; ++var4) {
            ((TLRPC.Message)this.messages.get(var4)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var2 = this.chats.size();
         var1.writeInt32(var2);

         for(var4 = 0; var4 < var2; ++var4) {
            ((TLRPC.Chat)this.chats.get(var4)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var2 = this.users.size();
         var1.writeInt32(var2);

         for(var4 = var3; var4 < var2; ++var4) {
            ((TLRPC.User)this.users.get(var4)).serializeToStream(var1);
         }

         this.state.serializeToStream(var1);
      }
   }

   public static class TL_messages_readEncryptedHistory extends TLObject {
      public static int constructor;
      public int max_date;
      public TLRPC.TL_inputEncryptedChat peer;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.peer.serializeToStream(var1);
         var1.writeInt32(this.max_date);
      }
   }

   public static class TL_messages_readFeaturedStickers extends TLObject {
      public static int constructor;
      public ArrayList id = new ArrayList();

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = this.id.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            var1.writeInt64((Long)this.id.get(var3));
         }

      }
   }

   public static class TL_messages_readHistory extends TLObject {
      public static int constructor;
      public int max_id;
      public TLRPC.InputPeer peer;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_messages_affectedMessages.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.peer.serializeToStream(var1);
         var1.writeInt32(this.max_id);
      }
   }

   public static class TL_messages_readMentions extends TLObject {
      public static int constructor;
      public TLRPC.InputPeer peer;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_messages_affectedHistory.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.peer.serializeToStream(var1);
      }
   }

   public static class TL_messages_readMessageContents extends TLObject {
      public static int constructor;
      public ArrayList id = new ArrayList();

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_messages_affectedMessages.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = this.id.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            var1.writeInt32((Integer)this.id.get(var3));
         }

      }
   }

   public static class TL_messages_receivedMessages extends TLObject {
      public static int constructor;
      public int max_id;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         TLRPC.Vector var4 = new TLRPC.Vector();
         int var5 = var1.readInt32(var3);

         for(var2 = 0; var2 < var5; ++var2) {
            TLRPC.TL_receivedNotifyMessage var6 = TLRPC.TL_receivedNotifyMessage.TLdeserialize(var1, var1.readInt32(var3), var3);
            if (var6 == null) {
               return var4;
            }

            var4.objects.add(var6);
         }

         return var4;
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.max_id);
      }
   }

   public static class TL_messages_receivedQueue extends TLObject {
      public static int constructor;
      public int max_qts;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         TLRPC.Vector var4 = new TLRPC.Vector();
         int var5 = var1.readInt32(var3);

         for(var2 = 0; var2 < var5; ++var2) {
            var4.objects.add(var1.readInt64(var3));
         }

         return var4;
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.max_qts);
      }
   }

   public static class TL_messages_recentStickers extends TLRPC.messages_RecentStickers {
      public static int constructor;
      public ArrayList dates = new ArrayList();
      public int hash;
      public ArrayList packs = new ArrayList();
      public ArrayList stickers = new ArrayList();

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.hash = var1.readInt32(var2);
         int var3 = var1.readInt32(var2);
         byte var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            int var5 = var1.readInt32(var2);

            for(var3 = 0; var3 < var5; ++var3) {
               TLRPC.TL_stickerPack var6 = TLRPC.TL_stickerPack.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               this.packs.add(var6);
            }

            var3 = var1.readInt32(var2);
            if (var3 != 481674261) {
               if (var2) {
                  throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
               }
            } else {
               var5 = var1.readInt32(var2);

               for(var3 = 0; var3 < var5; ++var3) {
                  TLRPC.Document var7 = TLRPC.Document.TLdeserialize(var1, var1.readInt32(var2), var2);
                  if (var7 == null) {
                     return;
                  }

                  this.stickers.add(var7);
               }

               var3 = var1.readInt32(var2);
               if (var3 != 481674261) {
                  if (var2) {
                     throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
                  }
               } else {
                  var5 = var1.readInt32(var2);

                  for(var3 = var4; var3 < var5; ++var3) {
                     this.dates.add(var1.readInt32(var2));
                  }

               }
            }
         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.hash);
         var1.writeInt32(481674261);
         int var2 = this.packs.size();
         var1.writeInt32(var2);
         byte var3 = 0;

         int var4;
         for(var4 = 0; var4 < var2; ++var4) {
            ((TLRPC.TL_stickerPack)this.packs.get(var4)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var2 = this.stickers.size();
         var1.writeInt32(var2);

         for(var4 = 0; var4 < var2; ++var4) {
            ((TLRPC.Document)this.stickers.get(var4)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var2 = this.dates.size();
         var1.writeInt32(var2);

         for(var4 = var3; var4 < var2; ++var4) {
            var1.writeInt32((Integer)this.dates.get(var4));
         }

      }
   }

   public static class TL_messages_recentStickersNotModified extends TLRPC.messages_RecentStickers {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_messages_reorderPinnedDialogs extends TLObject {
      public static int constructor;
      public int flags;
      public int folder_id;
      public boolean force;
      public ArrayList order = new ArrayList();

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.force) {
            var2 = this.flags | 1;
         } else {
            var2 = this.flags & -2;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         var1.writeInt32(this.folder_id);
         var1.writeInt32(481674261);
         int var3 = this.order.size();
         var1.writeInt32(var3);

         for(var2 = 0; var2 < var3; ++var2) {
            ((TLRPC.InputDialogPeer)this.order.get(var2)).serializeToStream(var1);
         }

      }
   }

   public static class TL_messages_reorderStickerSets extends TLObject {
      public static int constructor;
      public int flags;
      public boolean masks;
      public ArrayList order = new ArrayList();

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.masks) {
            var2 = this.flags | 1;
         } else {
            var2 = this.flags & -2;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         var1.writeInt32(481674261);
         int var3 = this.order.size();
         var1.writeInt32(var3);

         for(var2 = 0; var2 < var3; ++var2) {
            var1.writeInt64((Long)this.order.get(var2));
         }

      }
   }

   public static class TL_messages_report extends TLObject {
      public static int constructor;
      public ArrayList id = new ArrayList();
      public TLRPC.InputPeer peer;
      public TLRPC.ReportReason reason;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.peer.serializeToStream(var1);
         var1.writeInt32(481674261);
         int var2 = this.id.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            var1.writeInt32((Integer)this.id.get(var3));
         }

         this.reason.serializeToStream(var1);
      }
   }

   public static class TL_messages_reportEncryptedSpam extends TLObject {
      public static int constructor;
      public TLRPC.TL_inputEncryptedChat peer;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.peer.serializeToStream(var1);
      }
   }

   public static class TL_messages_reportSpam extends TLObject {
      public static int constructor;
      public TLRPC.InputPeer peer;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.peer.serializeToStream(var1);
      }
   }

   public static class TL_messages_requestEncryption extends TLObject {
      public static int constructor;
      public byte[] g_a;
      public int random_id;
      public TLRPC.InputUser user_id;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.EncryptedChat.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.user_id.serializeToStream(var1);
         var1.writeInt32(this.random_id);
         var1.writeByteArray(this.g_a);
      }
   }

   public static class TL_messages_requestUrlAuth extends TLObject {
      public static int constructor;
      public int button_id;
      public int msg_id;
      public TLRPC.InputPeer peer;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.UrlAuthResult.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.peer.serializeToStream(var1);
         var1.writeInt32(this.msg_id);
         var1.writeInt32(this.button_id);
      }
   }

   public static class TL_messages_saveDraft extends TLObject {
      public static int constructor;
      public ArrayList entities = new ArrayList();
      public int flags;
      public String message;
      public boolean no_webpage;
      public TLRPC.InputPeer peer;
      public int reply_to_msg_id;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.no_webpage) {
            var2 = this.flags | 2;
         } else {
            var2 = this.flags & -3;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         if ((this.flags & 1) != 0) {
            var1.writeInt32(this.reply_to_msg_id);
         }

         this.peer.serializeToStream(var1);
         var1.writeString(this.message);
         if ((this.flags & 8) != 0) {
            var1.writeInt32(481674261);
            int var3 = this.entities.size();
            var1.writeInt32(var3);

            for(var2 = 0; var2 < var3; ++var2) {
               ((TLRPC.MessageEntity)this.entities.get(var2)).serializeToStream(var1);
            }
         }

      }
   }

   public static class TL_messages_saveGif extends TLObject {
      public static int constructor;
      public TLRPC.InputDocument id;
      public boolean unsave;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.id.serializeToStream(var1);
         var1.writeBool(this.unsave);
      }
   }

   public static class TL_messages_saveRecentSticker extends TLObject {
      public static int constructor;
      public boolean attached;
      public int flags;
      public TLRPC.InputDocument id;
      public boolean unsave;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.attached) {
            var2 = this.flags | 1;
         } else {
            var2 = this.flags & -2;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         this.id.serializeToStream(var1);
         var1.writeBool(this.unsave);
      }
   }

   public static class TL_messages_savedGifs extends TLRPC.messages_SavedGifs {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.hash = var1.readInt32(var2);
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.Document var5 = TLRPC.Document.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               super.gifs.add(var5);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.hash);
         var1.writeInt32(481674261);
         int var2 = super.gifs.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.Document)super.gifs.get(var3)).serializeToStream(var1);
         }

      }
   }

   public static class TL_messages_savedGifsNotModified extends TLRPC.messages_SavedGifs {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_messages_search extends TLObject {
      public static int constructor;
      public int add_offset;
      public TLRPC.MessagesFilter filter;
      public int flags;
      public TLRPC.InputUser from_id;
      public int hash;
      public int limit;
      public int max_date;
      public int max_id;
      public int min_date;
      public int min_id;
      public int offset_id;
      public TLRPC.InputPeer peer;
      public String q;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.messages_Messages.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.flags);
         this.peer.serializeToStream(var1);
         var1.writeString(this.q);
         if ((this.flags & 1) != 0) {
            this.from_id.serializeToStream(var1);
         }

         this.filter.serializeToStream(var1);
         var1.writeInt32(this.min_date);
         var1.writeInt32(this.max_date);
         var1.writeInt32(this.offset_id);
         var1.writeInt32(this.add_offset);
         var1.writeInt32(this.limit);
         var1.writeInt32(this.max_id);
         var1.writeInt32(this.min_id);
         var1.writeInt32(this.hash);
      }
   }

   public static class TL_messages_searchCounter extends TLObject {
      public static int constructor;
      public int count;
      public TLRPC.MessagesFilter filter;
      public int flags;
      public boolean inexact;

      public static TLRPC.TL_messages_searchCounter TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_messages_searchCounter", var1));
            }
         } else {
            TLRPC.TL_messages_searchCounter var3 = new TLRPC.TL_messages_searchCounter();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.flags = var1.readInt32(var2);
         boolean var3;
         if ((this.flags & 2) != 0) {
            var3 = true;
         } else {
            var3 = false;
         }

         this.inexact = var3;
         this.filter = TLRPC.MessagesFilter.TLdeserialize(var1, var1.readInt32(var2), var2);
         this.count = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.inexact) {
            var2 = this.flags | 2;
         } else {
            var2 = this.flags & -3;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         this.filter.serializeToStream(var1);
         var1.writeInt32(this.count);
      }
   }

   public static class TL_messages_searchGifs extends TLObject {
      public static int constructor;
      public int offset;
      public String q;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_messages_foundGifs.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.q);
         var1.writeInt32(this.offset);
      }
   }

   public static class TL_messages_searchGlobal extends TLObject {
      public static int constructor;
      public int limit;
      public int offset_id;
      public TLRPC.InputPeer offset_peer;
      public int offset_rate;
      public String q;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.messages_Messages.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.q);
         var1.writeInt32(this.offset_rate);
         this.offset_peer.serializeToStream(var1);
         var1.writeInt32(this.offset_id);
         var1.writeInt32(this.limit);
      }
   }

   public static class TL_messages_searchStickerSets extends TLObject {
      public static int constructor;
      public boolean exclude_featured;
      public int flags;
      public int hash;
      public String q;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.messages_FoundStickerSets.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.exclude_featured) {
            var2 = this.flags | 1;
         } else {
            var2 = this.flags & -2;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         var1.writeString(this.q);
         var1.writeInt32(this.hash);
      }
   }

   public static class TL_messages_sendBroadcast extends TLObject {
      public static int constructor;
      public ArrayList contacts = new ArrayList();
      public TLRPC.InputMedia media;
      public String message;
      public ArrayList random_id = new ArrayList();

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Updates.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = this.contacts.size();
         var1.writeInt32(var2);
         byte var3 = 0;

         int var4;
         for(var4 = 0; var4 < var2; ++var4) {
            ((TLRPC.InputUser)this.contacts.get(var4)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var2 = this.random_id.size();
         var1.writeInt32(var2);

         for(var4 = var3; var4 < var2; ++var4) {
            var1.writeInt64((Long)this.random_id.get(var4));
         }

         var1.writeString(this.message);
         this.media.serializeToStream(var1);
      }
   }

   public static class TL_messages_sendEncrypted extends TLObject {
      public static int constructor;
      public NativeByteBuffer data;
      public TLRPC.TL_inputEncryptedChat peer;
      public long random_id;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.messages_SentEncryptedMessage.TLdeserialize(var1, var2, var3);
      }

      public void freeResources() {
         NativeByteBuffer var1 = this.data;
         if (var1 != null) {
            var1.reuse();
            this.data = null;
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.peer.serializeToStream(var1);
         var1.writeInt64(this.random_id);
         var1.writeByteBuffer(this.data);
      }
   }

   public static class TL_messages_sendEncryptedFile extends TLObject {
      public static int constructor;
      public NativeByteBuffer data;
      public TLRPC.InputEncryptedFile file;
      public TLRPC.TL_inputEncryptedChat peer;
      public long random_id;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.messages_SentEncryptedMessage.TLdeserialize(var1, var2, var3);
      }

      public void freeResources() {
         NativeByteBuffer var1 = this.data;
         if (var1 != null) {
            var1.reuse();
            this.data = null;
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.peer.serializeToStream(var1);
         var1.writeInt64(this.random_id);
         var1.writeByteBuffer(this.data);
         this.file.serializeToStream(var1);
      }
   }

   public static class TL_messages_sendEncryptedMultiMedia extends TLObject {
      public static int constructor;
      public ArrayList files = new ArrayList();
      public ArrayList messages = new ArrayList();

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.messages_SentEncryptedMessage.TLdeserialize(var1, var2, var3);
      }

      public void freeResources() {
      }

      public void serializeToStream(AbstractSerializedData var1) {
      }
   }

   public static class TL_messages_sendEncryptedService extends TLObject {
      public static int constructor;
      public NativeByteBuffer data;
      public TLRPC.TL_inputEncryptedChat peer;
      public long random_id;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.messages_SentEncryptedMessage.TLdeserialize(var1, var2, var3);
      }

      public void freeResources() {
         NativeByteBuffer var1 = this.data;
         if (var1 != null) {
            var1.reuse();
            this.data = null;
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.peer.serializeToStream(var1);
         var1.writeInt64(this.random_id);
         var1.writeByteBuffer(this.data);
      }
   }

   public static class TL_messages_sendInlineBotResult extends TLObject {
      public static int constructor;
      public boolean background;
      public boolean clear_draft;
      public int flags;
      public boolean hide_via;
      public String id;
      public TLRPC.InputPeer peer;
      public long query_id;
      public long random_id;
      public int reply_to_msg_id;
      public boolean silent;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Updates.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.silent) {
            var2 = this.flags | 32;
         } else {
            var2 = this.flags & -33;
         }

         this.flags = var2;
         if (this.background) {
            var2 = this.flags | 64;
         } else {
            var2 = this.flags & -65;
         }

         this.flags = var2;
         if (this.clear_draft) {
            var2 = this.flags | 128;
         } else {
            var2 = this.flags & -129;
         }

         this.flags = var2;
         if (this.hide_via) {
            var2 = this.flags | 2048;
         } else {
            var2 = this.flags & -2049;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         this.peer.serializeToStream(var1);
         if ((this.flags & 1) != 0) {
            var1.writeInt32(this.reply_to_msg_id);
         }

         var1.writeInt64(this.random_id);
         var1.writeInt64(this.query_id);
         var1.writeString(this.id);
      }
   }

   public static class TL_messages_sendMedia extends TLObject {
      public static int constructor;
      public boolean background;
      public boolean clear_draft;
      public ArrayList entities = new ArrayList();
      public int flags;
      public TLRPC.InputMedia media;
      public String message;
      public TLRPC.InputPeer peer;
      public long random_id;
      public TLRPC.ReplyMarkup reply_markup;
      public int reply_to_msg_id;
      public boolean silent;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Updates.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.silent) {
            var2 = this.flags | 32;
         } else {
            var2 = this.flags & -33;
         }

         this.flags = var2;
         if (this.background) {
            var2 = this.flags | 64;
         } else {
            var2 = this.flags & -65;
         }

         this.flags = var2;
         if (this.clear_draft) {
            var2 = this.flags | 128;
         } else {
            var2 = this.flags & -129;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         this.peer.serializeToStream(var1);
         if ((this.flags & 1) != 0) {
            var1.writeInt32(this.reply_to_msg_id);
         }

         this.media.serializeToStream(var1);
         var1.writeString(this.message);
         var1.writeInt64(this.random_id);
         if ((this.flags & 4) != 0) {
            this.reply_markup.serializeToStream(var1);
         }

         if ((this.flags & 8) != 0) {
            var1.writeInt32(481674261);
            int var3 = this.entities.size();
            var1.writeInt32(var3);

            for(var2 = 0; var2 < var3; ++var2) {
               ((TLRPC.MessageEntity)this.entities.get(var2)).serializeToStream(var1);
            }
         }

      }
   }

   public static class TL_messages_sendMessage extends TLObject {
      public static int constructor;
      public boolean background;
      public boolean clear_draft;
      public ArrayList entities = new ArrayList();
      public int flags;
      public String message;
      public boolean no_webpage;
      public TLRPC.InputPeer peer;
      public long random_id;
      public TLRPC.ReplyMarkup reply_markup;
      public int reply_to_msg_id;
      public boolean silent;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Updates.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.no_webpage) {
            var2 = this.flags | 2;
         } else {
            var2 = this.flags & -3;
         }

         this.flags = var2;
         if (this.silent) {
            var2 = this.flags | 32;
         } else {
            var2 = this.flags & -33;
         }

         this.flags = var2;
         if (this.background) {
            var2 = this.flags | 64;
         } else {
            var2 = this.flags & -65;
         }

         this.flags = var2;
         if (this.clear_draft) {
            var2 = this.flags | 128;
         } else {
            var2 = this.flags & -129;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         this.peer.serializeToStream(var1);
         if ((this.flags & 1) != 0) {
            var1.writeInt32(this.reply_to_msg_id);
         }

         var1.writeString(this.message);
         var1.writeInt64(this.random_id);
         if ((this.flags & 4) != 0) {
            this.reply_markup.serializeToStream(var1);
         }

         if ((this.flags & 8) != 0) {
            var1.writeInt32(481674261);
            int var3 = this.entities.size();
            var1.writeInt32(var3);

            for(var2 = 0; var2 < var3; ++var2) {
               ((TLRPC.MessageEntity)this.entities.get(var2)).serializeToStream(var1);
            }
         }

      }
   }

   public static class TL_messages_sendMultiMedia extends TLObject {
      public static int constructor;
      public boolean background;
      public boolean clear_draft;
      public int flags;
      public ArrayList multi_media = new ArrayList();
      public TLRPC.InputPeer peer;
      public int reply_to_msg_id;
      public boolean silent;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Updates.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.silent) {
            var2 = this.flags | 32;
         } else {
            var2 = this.flags & -33;
         }

         this.flags = var2;
         if (this.background) {
            var2 = this.flags | 64;
         } else {
            var2 = this.flags & -65;
         }

         this.flags = var2;
         if (this.clear_draft) {
            var2 = this.flags | 128;
         } else {
            var2 = this.flags & -129;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         this.peer.serializeToStream(var1);
         if ((this.flags & 1) != 0) {
            var1.writeInt32(this.reply_to_msg_id);
         }

         var1.writeInt32(481674261);
         int var3 = this.multi_media.size();
         var1.writeInt32(var3);

         for(var2 = 0; var2 < var3; ++var2) {
            ((TLRPC.TL_inputSingleMedia)this.multi_media.get(var2)).serializeToStream(var1);
         }

      }
   }

   public static class TL_messages_sendScreenshotNotification extends TLObject {
      public static int constructor;
      public TLRPC.InputPeer peer;
      public long random_id;
      public int reply_to_msg_id;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Updates.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.peer.serializeToStream(var1);
         var1.writeInt32(this.reply_to_msg_id);
         var1.writeInt64(this.random_id);
      }
   }

   public static class TL_messages_sendVote extends TLObject {
      public static int constructor;
      public int msg_id;
      public ArrayList options = new ArrayList();
      public TLRPC.InputPeer peer;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Updates.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.peer.serializeToStream(var1);
         var1.writeInt32(this.msg_id);
         var1.writeInt32(481674261);
         int var2 = this.options.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            var1.writeByteArray((byte[])this.options.get(var3));
         }

      }
   }

   public static class TL_messages_sentEncryptedFile extends TLRPC.messages_SentEncryptedMessage {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.date = var1.readInt32(var2);
         super.file = TLRPC.EncryptedFile.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.date);
         super.file.serializeToStream(var1);
      }
   }

   public static class TL_messages_sentEncryptedMessage extends TLRPC.messages_SentEncryptedMessage {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.date = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.date);
      }
   }

   public static class TL_messages_setBotCallbackAnswer extends TLObject {
      public static int constructor;
      public boolean alert;
      public int cache_time;
      public int flags;
      public String message;
      public long query_id;
      public String url;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.alert) {
            var2 = this.flags | 2;
         } else {
            var2 = this.flags & -3;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         var1.writeInt64(this.query_id);
         if ((this.flags & 1) != 0) {
            var1.writeString(this.message);
         }

         if ((this.flags & 4) != 0) {
            var1.writeString(this.url);
         }

         var1.writeInt32(this.cache_time);
      }
   }

   public static class TL_messages_setEncryptedTyping extends TLObject {
      public static int constructor;
      public TLRPC.TL_inputEncryptedChat peer;
      public boolean typing;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.peer.serializeToStream(var1);
         var1.writeBool(this.typing);
      }
   }

   public static class TL_messages_setGameScore extends TLObject {
      public static int constructor;
      public boolean edit_message;
      public int flags;
      public boolean force;
      public int id;
      public TLRPC.InputPeer peer;
      public int score;
      public TLRPC.InputUser user_id;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Updates.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.edit_message) {
            var2 = this.flags | 1;
         } else {
            var2 = this.flags & -2;
         }

         this.flags = var2;
         if (this.force) {
            var2 = this.flags | 2;
         } else {
            var2 = this.flags & -3;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         this.peer.serializeToStream(var1);
         var1.writeInt32(this.id);
         this.user_id.serializeToStream(var1);
         var1.writeInt32(this.score);
      }
   }

   public static class TL_messages_setInlineGameScore extends TLObject {
      public static int constructor;
      public boolean edit_message;
      public int flags;
      public boolean force;
      public TLRPC.TL_inputBotInlineMessageID id;
      public int score;
      public TLRPC.InputUser user_id;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.edit_message) {
            var2 = this.flags | 1;
         } else {
            var2 = this.flags & -2;
         }

         this.flags = var2;
         if (this.force) {
            var2 = this.flags | 2;
         } else {
            var2 = this.flags & -3;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         this.id.serializeToStream(var1);
         this.user_id.serializeToStream(var1);
         var1.writeInt32(this.score);
      }
   }

   public static class TL_messages_setTyping extends TLObject {
      public static int constructor;
      public TLRPC.SendMessageAction action;
      public TLRPC.InputPeer peer;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.peer.serializeToStream(var1);
         this.action.serializeToStream(var1);
      }
   }

   public static class TL_messages_startBot extends TLObject {
      public static int constructor;
      public TLRPC.InputUser bot;
      public TLRPC.InputPeer peer;
      public long random_id;
      public String start_param;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Updates.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.bot.serializeToStream(var1);
         this.peer.serializeToStream(var1);
         var1.writeInt64(this.random_id);
         var1.writeString(this.start_param);
      }
   }

   public static class TL_messages_stickerSet extends TLObject {
      public static int constructor;
      public ArrayList documents = new ArrayList();
      public ArrayList packs = new ArrayList();
      public TLRPC.StickerSet set;

      public static TLRPC.TL_messages_stickerSet TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_messages_stickerSet", var1));
            }
         } else {
            TLRPC.TL_messages_stickerSet var3 = new TLRPC.TL_messages_stickerSet();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.set = TLRPC.StickerSet.TLdeserialize(var1, var1.readInt32(var2), var2);
         int var3 = var1.readInt32(var2);
         byte var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            int var5 = var1.readInt32(var2);

            for(var3 = 0; var3 < var5; ++var3) {
               TLRPC.TL_stickerPack var6 = TLRPC.TL_stickerPack.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               this.packs.add(var6);
            }

            var3 = var1.readInt32(var2);
            if (var3 != 481674261) {
               if (var2) {
                  throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
               }
            } else {
               var5 = var1.readInt32(var2);

               for(var3 = var4; var3 < var5; ++var3) {
                  TLRPC.Document var7 = TLRPC.Document.TLdeserialize(var1, var1.readInt32(var2), var2);
                  if (var7 == null) {
                     return;
                  }

                  this.documents.add(var7);
               }

            }
         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.set.serializeToStream(var1);
         var1.writeInt32(481674261);
         int var2 = this.packs.size();
         var1.writeInt32(var2);
         byte var3 = 0;

         int var4;
         for(var4 = 0; var4 < var2; ++var4) {
            ((TLRPC.TL_stickerPack)this.packs.get(var4)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var2 = this.documents.size();
         var1.writeInt32(var2);

         for(var4 = var3; var4 < var2; ++var4) {
            ((TLRPC.Document)this.documents.get(var4)).serializeToStream(var1);
         }

      }
   }

   public static class TL_messages_stickerSetInstallResultArchive extends TLRPC.messages_StickerSetInstallResult {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.StickerSetCovered var5 = TLRPC.StickerSetCovered.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               super.sets.add(var5);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = super.sets.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.StickerSetCovered)super.sets.get(var3)).serializeToStream(var1);
         }

      }
   }

   public static class TL_messages_stickerSetInstallResultSuccess extends TLRPC.messages_StickerSetInstallResult {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_messages_stickers extends TLRPC.messages_Stickers {
      public static int constructor;
      public int hash;
      public ArrayList stickers = new ArrayList();

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.hash = var1.readInt32(var2);
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.Document var5 = TLRPC.Document.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               this.stickers.add(var5);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.hash);
         var1.writeInt32(481674261);
         int var2 = this.stickers.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.Document)this.stickers.get(var3)).serializeToStream(var1);
         }

      }
   }

   public static class TL_messages_stickersNotModified extends TLRPC.messages_Stickers {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_messages_toggleDialogPin extends TLObject {
      public static int constructor;
      public int flags;
      public TLRPC.InputDialogPeer peer;
      public boolean pinned;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.pinned) {
            var2 = this.flags | 1;
         } else {
            var2 = this.flags & -2;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         this.peer.serializeToStream(var1);
      }
   }

   public static class TL_messages_uninstallStickerSet extends TLObject {
      public static int constructor;
      public TLRPC.InputStickerSet stickerset;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.stickerset.serializeToStream(var1);
      }
   }

   public static class TL_messages_updatePinnedMessage extends TLObject {
      public static int constructor;
      public int flags;
      public int id;
      public TLRPC.InputPeer peer;
      public boolean silent;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Updates.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.silent) {
            var2 = this.flags | 1;
         } else {
            var2 = this.flags & -2;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         this.peer.serializeToStream(var1);
         var1.writeInt32(this.id);
      }
   }

   public static class TL_messages_uploadEncryptedFile extends TLObject {
      public static int constructor;
      public TLRPC.InputEncryptedFile file;
      public TLRPC.TL_inputEncryptedChat peer;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.EncryptedFile.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.peer.serializeToStream(var1);
         this.file.serializeToStream(var1);
      }
   }

   public static class TL_messages_uploadMedia extends TLObject {
      public static int constructor;
      public TLRPC.InputMedia media;
      public TLRPC.InputPeer peer;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.MessageMedia.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.peer.serializeToStream(var1);
         this.media.serializeToStream(var1);
      }
   }

   public static class TL_nearestDc extends TLObject {
      public static int constructor;
      public String country;
      public int nearest_dc;
      public int this_dc;

      public static TLRPC.TL_nearestDc TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_nearestDc", var1));
            }
         } else {
            TLRPC.TL_nearestDc var3 = new TLRPC.TL_nearestDc();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.country = var1.readString(var2);
         this.this_dc = var1.readInt32(var2);
         this.nearest_dc = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.country);
         var1.writeInt32(this.this_dc);
         var1.writeInt32(this.nearest_dc);
      }
   }

   public static class TL_notifyBroadcasts extends TLRPC.NotifyPeer {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_notifyChats extends TLRPC.NotifyPeer {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_notifyPeer extends TLRPC.NotifyPeer {
      public static int constructor;
      public TLRPC.Peer peer;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.peer = TLRPC.Peer.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.peer.serializeToStream(var1);
      }
   }

   public static class TL_notifyUsers extends TLRPC.NotifyPeer {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_null extends TLObject {
      public static int constructor;

      public static TLRPC.TL_null TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_null", var1));
            }
         } else {
            TLRPC.TL_null var3 = new TLRPC.TL_null();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_page extends TLRPC.Page {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         byte var4 = 0;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.part = var5;
         if ((super.flags & 2) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.rtl = var5;
         super.url = var1.readString(var2);
         var3 = var1.readInt32(var2);
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            int var6 = var1.readInt32(var2);

            for(var3 = 0; var3 < var6; ++var3) {
               TLRPC.PageBlock var7 = TLRPC.PageBlock.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var7 == null) {
                  return;
               }

               super.blocks.add(var7);
            }

            var3 = var1.readInt32(var2);
            if (var3 != 481674261) {
               if (var2) {
                  throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
               }
            } else {
               var6 = var1.readInt32(var2);

               for(var3 = 0; var3 < var6; ++var3) {
                  TLRPC.Photo var8 = TLRPC.Photo.TLdeserialize(var1, var1.readInt32(var2), var2);
                  if (var8 == null) {
                     return;
                  }

                  super.photos.add(var8);
               }

               var3 = var1.readInt32(var2);
               if (var3 != 481674261) {
                  if (var2) {
                     throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
                  }
               } else {
                  var6 = var1.readInt32(var2);

                  for(var3 = var4; var3 < var6; ++var3) {
                     TLRPC.Document var9 = TLRPC.Document.TLdeserialize(var1, var1.readInt32(var2), var2);
                     if (var9 == null) {
                        return;
                     }

                     super.documents.add(var9);
                  }

               }
            }
         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.part) {
            var2 = super.flags | 1;
         } else {
            var2 = super.flags & -2;
         }

         super.flags = var2;
         if (super.rtl) {
            var2 = super.flags | 2;
         } else {
            var2 = super.flags & -3;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeString(super.url);
         var1.writeInt32(481674261);
         int var3 = super.blocks.size();
         var1.writeInt32(var3);
         byte var4 = 0;

         for(var2 = 0; var2 < var3; ++var2) {
            ((TLRPC.PageBlock)super.blocks.get(var2)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var3 = super.photos.size();
         var1.writeInt32(var3);

         for(var2 = 0; var2 < var3; ++var2) {
            ((TLRPC.Photo)super.photos.get(var2)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var3 = super.documents.size();
         var1.writeInt32(var3);

         for(var2 = var4; var2 < var3; ++var2) {
            ((TLRPC.Document)super.documents.get(var2)).serializeToStream(var1);
         }

      }
   }

   public static class TL_pageBlockAnchor extends TLRPC.PageBlock {
      public static int constructor;
      public String name;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.name = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.name);
      }
   }

   public static class TL_pageBlockAudio extends TLRPC.PageBlock {
      public static int constructor;
      public long audio_id;
      public TLRPC.TL_pageCaption caption;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.audio_id = var1.readInt64(var2);
         this.caption = TLRPC.TL_pageCaption.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(this.audio_id);
         this.caption.serializeToStream(var1);
      }
   }

   public static class TL_pageBlockAudio_layer82 extends TLRPC.TL_pageBlockAudio {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.audio_id = var1.readInt64(var2);
         super.caption = new TLRPC.TL_pageCaption();
         super.caption.text = TLRPC.RichText.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.caption.credit = new TLRPC.TL_textEmpty();
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(super.audio_id);
         super.caption.text.serializeToStream(var1);
      }
   }

   public static class TL_pageBlockAuthorDate extends TLRPC.PageBlock {
      public static int constructor;
      public TLRPC.RichText author;
      public int published_date;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.author = TLRPC.RichText.TLdeserialize(var1, var1.readInt32(var2), var2);
         this.published_date = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.author.serializeToStream(var1);
         var1.writeInt32(this.published_date);
      }
   }

   public static class TL_pageBlockAuthorDate_layer60 extends TLRPC.TL_pageBlockAuthorDate {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         String var3 = var1.readString(var2);
         super.author = new TLRPC.TL_textPlain();
         ((TLRPC.TL_textPlain)super.author).text = var3;
         super.published_date = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(((TLRPC.TL_textPlain)super.author).text);
         var1.writeInt32(super.published_date);
      }
   }

   public static class TL_pageBlockBlockquote extends TLRPC.PageBlock {
      public static int constructor;
      public TLRPC.RichText caption;
      public TLRPC.RichText text;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.text = TLRPC.RichText.TLdeserialize(var1, var1.readInt32(var2), var2);
         this.caption = TLRPC.RichText.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.text.serializeToStream(var1);
         this.caption.serializeToStream(var1);
      }
   }

   public static class TL_pageBlockChannel extends TLRPC.PageBlock {
      public static int constructor;
      public TLRPC.Chat channel;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.channel = TLRPC.Chat.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.channel.serializeToStream(var1);
      }
   }

   public static class TL_pageBlockCollage extends TLRPC.PageBlock {
      public static int constructor;
      public TLRPC.TL_pageCaption caption;
      public ArrayList items = new ArrayList();

      public void readParams(AbstractSerializedData var1, boolean var2) {
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.PageBlock var5 = TLRPC.PageBlock.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               this.items.add(var5);
            }

            this.caption = TLRPC.TL_pageCaption.TLdeserialize(var1, var1.readInt32(var2), var2);
         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = this.items.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.PageBlock)this.items.get(var3)).serializeToStream(var1);
         }

         this.caption.serializeToStream(var1);
      }
   }

   public static class TL_pageBlockCollage_layer82 extends TLRPC.TL_pageBlockCollage {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.PageBlock var5 = TLRPC.PageBlock.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               super.items.add(var5);
            }

            super.caption = new TLRPC.TL_pageCaption();
            super.caption.text = TLRPC.RichText.TLdeserialize(var1, var1.readInt32(var2), var2);
            super.caption.credit = new TLRPC.TL_textEmpty();
         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = super.items.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.PageBlock)super.items.get(var3)).serializeToStream(var1);
         }

         super.caption.text.serializeToStream(var1);
      }
   }

   public static class TL_pageBlockCover extends TLRPC.PageBlock {
      public static int constructor;
      public TLRPC.PageBlock cover;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.cover = TLRPC.PageBlock.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.cover.serializeToStream(var1);
      }
   }

   public static class TL_pageBlockDetails extends TLRPC.PageBlock {
      public static int constructor;
      public ArrayList blocks = new ArrayList();
      public int flags;
      public boolean open;
      public TLRPC.RichText title;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.flags = var1.readInt32(var2);
         int var3 = this.flags;
         int var4 = 0;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.open = var5;
         var3 = var1.readInt32(var2);
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.PageBlock var6 = TLRPC.PageBlock.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               this.blocks.add(var6);
            }

            this.title = TLRPC.RichText.TLdeserialize(var1, var1.readInt32(var2), var2);
         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.open) {
            var2 = this.flags | 1;
         } else {
            var2 = this.flags & -2;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         var1.writeInt32(481674261);
         int var3 = this.blocks.size();
         var1.writeInt32(var3);

         for(var2 = 0; var2 < var3; ++var2) {
            ((TLRPC.PageBlock)this.blocks.get(var2)).serializeToStream(var1);
         }

         this.title.serializeToStream(var1);
      }
   }

   public static class TL_pageBlockDivider extends TLRPC.PageBlock {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_pageBlockEmbed extends TLRPC.PageBlock {
      public static int constructor;
      public boolean allow_scrolling;
      public TLRPC.TL_pageCaption caption;
      public int flags;
      public boolean full_width;
      public int h;
      public String html;
      public long poster_photo_id;
      public String url;
      public int w;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.flags = var1.readInt32(var2);
         int var3 = this.flags;
         boolean var4 = true;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.full_width = var5;
         if ((this.flags & 8) != 0) {
            var5 = var4;
         } else {
            var5 = false;
         }

         this.allow_scrolling = var5;
         if ((this.flags & 2) != 0) {
            this.url = var1.readString(var2);
         }

         if ((this.flags & 4) != 0) {
            this.html = var1.readString(var2);
         }

         if ((this.flags & 16) != 0) {
            this.poster_photo_id = var1.readInt64(var2);
         }

         if ((this.flags & 32) != 0) {
            this.w = var1.readInt32(var2);
         }

         if ((this.flags & 32) != 0) {
            this.h = var1.readInt32(var2);
         }

         this.caption = TLRPC.TL_pageCaption.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.full_width) {
            var2 = this.flags | 1;
         } else {
            var2 = this.flags & -2;
         }

         this.flags = var2;
         if (this.allow_scrolling) {
            var2 = this.flags | 8;
         } else {
            var2 = this.flags & -9;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         if ((this.flags & 2) != 0) {
            var1.writeString(this.url);
         }

         if ((this.flags & 4) != 0) {
            var1.writeString(this.html);
         }

         if ((this.flags & 16) != 0) {
            var1.writeInt64(this.poster_photo_id);
         }

         if ((this.flags & 32) != 0) {
            var1.writeInt32(this.w);
         }

         if ((this.flags & 32) != 0) {
            var1.writeInt32(this.h);
         }

         this.caption.serializeToStream(var1);
      }
   }

   public static class TL_pageBlockEmbedPost extends TLRPC.PageBlock {
      public static int constructor;
      public String author;
      public long author_photo_id;
      public ArrayList blocks = new ArrayList();
      public TLRPC.TL_pageCaption caption;
      public int date;
      public String url;
      public long webpage_id;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.url = var1.readString(var2);
         this.webpage_id = var1.readInt64(var2);
         this.author_photo_id = var1.readInt64(var2);
         this.author = var1.readString(var2);
         this.date = var1.readInt32(var2);
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.PageBlock var5 = TLRPC.PageBlock.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               this.blocks.add(var5);
            }

            this.caption = TLRPC.TL_pageCaption.TLdeserialize(var1, var1.readInt32(var2), var2);
         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.url);
         var1.writeInt64(this.webpage_id);
         var1.writeInt64(this.author_photo_id);
         var1.writeString(this.author);
         var1.writeInt32(this.date);
         var1.writeInt32(481674261);
         int var2 = this.blocks.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.PageBlock)this.blocks.get(var3)).serializeToStream(var1);
         }

         this.caption.serializeToStream(var1);
      }
   }

   public static class TL_pageBlockEmbedPost_layer82 extends TLRPC.TL_pageBlockEmbedPost {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.url = var1.readString(var2);
         super.webpage_id = var1.readInt64(var2);
         super.author_photo_id = var1.readInt64(var2);
         super.author = var1.readString(var2);
         super.date = var1.readInt32(var2);
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.PageBlock var5 = TLRPC.PageBlock.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               super.blocks.add(var5);
            }

            super.caption = new TLRPC.TL_pageCaption();
            super.caption.text = TLRPC.RichText.TLdeserialize(var1, var1.readInt32(var2), var2);
            super.caption.credit = new TLRPC.TL_textEmpty();
         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(super.url);
         var1.writeInt64(super.webpage_id);
         var1.writeInt64(super.author_photo_id);
         var1.writeString(super.author);
         var1.writeInt32(super.date);
         var1.writeInt32(481674261);
         int var2 = super.blocks.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.PageBlock)super.blocks.get(var3)).serializeToStream(var1);
         }

         super.caption.text.serializeToStream(var1);
      }
   }

   public static class TL_pageBlockEmbed_layer60 extends TLRPC.TL_pageBlockEmbed {
      public static int constructor;
      public boolean allow_scrolling;
      public TLRPC.RichText caption;
      public int flags;
      public boolean full_width;
      public int h;
      public String html;
      public String url;
      public int w;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.flags = var1.readInt32(var2);
         int var3 = this.flags;
         boolean var4 = true;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.full_width = var5;
         if ((this.flags & 8) != 0) {
            var5 = var4;
         } else {
            var5 = false;
         }

         this.allow_scrolling = var5;
         if ((this.flags & 2) != 0) {
            this.url = var1.readString(var2);
         }

         if ((this.flags & 4) != 0) {
            this.html = var1.readString(var2);
         }

         this.w = var1.readInt32(var2);
         this.h = var1.readInt32(var2);
         this.caption = TLRPC.RichText.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.full_width) {
            var2 = this.flags | 1;
         } else {
            var2 = this.flags & -2;
         }

         this.flags = var2;
         if (this.allow_scrolling) {
            var2 = this.flags | 8;
         } else {
            var2 = this.flags & -9;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         if ((this.flags & 2) != 0) {
            var1.writeString(this.url);
         }

         if ((this.flags & 4) != 0) {
            var1.writeString(this.html);
         }

         var1.writeInt32(this.w);
         var1.writeInt32(this.h);
         this.caption.serializeToStream(var1);
      }
   }

   public static class TL_pageBlockEmbed_layer82 extends TLRPC.TL_pageBlockEmbed {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         boolean var4 = true;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.full_width = var5;
         if ((super.flags & 8) != 0) {
            var5 = var4;
         } else {
            var5 = false;
         }

         super.allow_scrolling = var5;
         if ((super.flags & 2) != 0) {
            super.url = var1.readString(var2);
         }

         if ((super.flags & 4) != 0) {
            super.html = var1.readString(var2);
         }

         if ((super.flags & 16) != 0) {
            super.poster_photo_id = var1.readInt64(var2);
         }

         super.w = var1.readInt32(var2);
         super.h = var1.readInt32(var2);
         super.caption = new TLRPC.TL_pageCaption();
         super.caption.text = TLRPC.RichText.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.caption.credit = new TLRPC.TL_textEmpty();
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.full_width) {
            var2 = super.flags | 1;
         } else {
            var2 = super.flags & -2;
         }

         super.flags = var2;
         if (super.allow_scrolling) {
            var2 = super.flags | 8;
         } else {
            var2 = super.flags & -9;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         if ((super.flags & 2) != 0) {
            var1.writeString(super.url);
         }

         if ((super.flags & 4) != 0) {
            var1.writeString(super.html);
         }

         if ((super.flags & 16) != 0) {
            var1.writeInt64(super.poster_photo_id);
         }

         var1.writeInt32(super.w);
         var1.writeInt32(super.h);
         super.caption.text.serializeToStream(var1);
      }
   }

   public static class TL_pageBlockFooter extends TLRPC.PageBlock {
      public static int constructor;
      public TLRPC.RichText text;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.text = TLRPC.RichText.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.text.serializeToStream(var1);
      }
   }

   public static class TL_pageBlockHeader extends TLRPC.PageBlock {
      public static int constructor;
      public TLRPC.RichText text;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.text = TLRPC.RichText.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.text.serializeToStream(var1);
      }
   }

   public static class TL_pageBlockKicker extends TLRPC.PageBlock {
      public static int constructor;
      public TLRPC.RichText text;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.text = TLRPC.RichText.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.text.serializeToStream(var1);
      }
   }

   public static class TL_pageBlockList extends TLRPC.PageBlock {
      public static int constructor;
      public ArrayList items = new ArrayList();
      public boolean ordered;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.PageListItem var5 = TLRPC.PageListItem.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               this.items.add(var5);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = this.items.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.PageListItem)this.items.get(var3)).serializeToStream(var1);
         }

      }
   }

   public static class TL_pageBlockList_layer82 extends TLRPC.TL_pageBlockList {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.ordered = var1.readBool(var2);
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.RichText var5 = TLRPC.RichText.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               TLRPC.TL_pageListItemText var6 = new TLRPC.TL_pageListItemText();
               var6.text = var5;
               super.items.add(var6);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeBool(super.ordered);
         var1.writeInt32(481674261);
         int var2 = super.items.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.TL_pageListItemText)super.items.get(var3)).text.serializeToStream(var1);
         }

      }
   }

   public static class TL_pageBlockMap extends TLRPC.PageBlock {
      public static int constructor;
      public TLRPC.TL_pageCaption caption;
      public TLRPC.GeoPoint geo;
      public int h;
      public int w;
      public int zoom;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.geo = TLRPC.GeoPoint.TLdeserialize(var1, var1.readInt32(var2), var2);
         this.zoom = var1.readInt32(var2);
         this.w = var1.readInt32(var2);
         this.h = var1.readInt32(var2);
         this.caption = TLRPC.TL_pageCaption.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.geo.serializeToStream(var1);
         var1.writeInt32(this.zoom);
         var1.writeInt32(this.w);
         var1.writeInt32(this.h);
         this.caption.serializeToStream(var1);
      }
   }

   public static class TL_pageBlockOrderedList extends TLRPC.PageBlock {
      public static int constructor;
      public ArrayList items = new ArrayList();

      public void readParams(AbstractSerializedData var1, boolean var2) {
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.PageListOrderedItem var5 = TLRPC.PageListOrderedItem.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               this.items.add(var5);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = this.items.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.PageListOrderedItem)this.items.get(var3)).serializeToStream(var1);
         }

      }
   }

   public static class TL_pageBlockParagraph extends TLRPC.PageBlock {
      public static int constructor;
      public TLRPC.RichText text;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.text = TLRPC.RichText.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.text.serializeToStream(var1);
      }
   }

   public static class TL_pageBlockPhoto extends TLRPC.PageBlock {
      public static int constructor;
      public TLRPC.TL_pageCaption caption;
      public int flags;
      public long photo_id;
      public String url;
      public long webpage_id;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.flags = var1.readInt32(var2);
         this.photo_id = var1.readInt64(var2);
         this.caption = TLRPC.TL_pageCaption.TLdeserialize(var1, var1.readInt32(var2), var2);
         if ((this.flags & 1) != 0) {
            this.url = var1.readString(var2);
         }

         if ((this.flags & 1) != 0) {
            this.webpage_id = var1.readInt64(var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.flags);
         var1.writeInt64(this.photo_id);
         this.caption.serializeToStream(var1);
         if ((this.flags & 1) != 0) {
            var1.writeString(this.url);
         }

         if ((this.flags & 1) != 0) {
            var1.writeInt64(this.webpage_id);
         }

      }
   }

   public static class TL_pageBlockPhoto_layer82 extends TLRPC.TL_pageBlockPhoto {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.photo_id = var1.readInt64(var2);
         super.caption = new TLRPC.TL_pageCaption();
         super.caption.text = TLRPC.RichText.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.caption.credit = new TLRPC.TL_textEmpty();
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(super.photo_id);
         super.caption.text.serializeToStream(var1);
      }
   }

   public static class TL_pageBlockPreformatted extends TLRPC.PageBlock {
      public static int constructor;
      public String language;
      public TLRPC.RichText text;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.text = TLRPC.RichText.TLdeserialize(var1, var1.readInt32(var2), var2);
         this.language = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.text.serializeToStream(var1);
         var1.writeString(this.language);
      }
   }

   public static class TL_pageBlockPullquote extends TLRPC.PageBlock {
      public static int constructor;
      public TLRPC.RichText caption;
      public TLRPC.RichText text;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.text = TLRPC.RichText.TLdeserialize(var1, var1.readInt32(var2), var2);
         this.caption = TLRPC.RichText.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.text.serializeToStream(var1);
         this.caption.serializeToStream(var1);
      }
   }

   public static class TL_pageBlockRelatedArticles extends TLRPC.PageBlock {
      public static int constructor;
      public ArrayList articles = new ArrayList();
      public TLRPC.RichText title;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.title = TLRPC.RichText.TLdeserialize(var1, var1.readInt32(var2), var2);
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.TL_pageRelatedArticle var5 = TLRPC.TL_pageRelatedArticle.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               this.articles.add(var5);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.title.serializeToStream(var1);
         var1.writeInt32(481674261);
         int var2 = this.articles.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.TL_pageRelatedArticle)this.articles.get(var3)).serializeToStream(var1);
         }

      }
   }

   public static class TL_pageBlockSlideshow extends TLRPC.PageBlock {
      public static int constructor;
      public TLRPC.TL_pageCaption caption;
      public ArrayList items = new ArrayList();

      public void readParams(AbstractSerializedData var1, boolean var2) {
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.PageBlock var5 = TLRPC.PageBlock.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               this.items.add(var5);
            }

            this.caption = TLRPC.TL_pageCaption.TLdeserialize(var1, var1.readInt32(var2), var2);
         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = this.items.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.PageBlock)this.items.get(var3)).serializeToStream(var1);
         }

         this.caption.serializeToStream(var1);
      }
   }

   public static class TL_pageBlockSlideshow_layer82 extends TLRPC.TL_pageBlockSlideshow {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.PageBlock var5 = TLRPC.PageBlock.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               super.items.add(var5);
            }

            super.caption = new TLRPC.TL_pageCaption();
            super.caption.text = TLRPC.RichText.TLdeserialize(var1, var1.readInt32(var2), var2);
            super.caption.credit = new TLRPC.TL_textEmpty();
         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = super.items.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.PageBlock)super.items.get(var3)).serializeToStream(var1);
         }

         super.caption.text.serializeToStream(var1);
      }
   }

   public static class TL_pageBlockSubheader extends TLRPC.PageBlock {
      public static int constructor;
      public TLRPC.RichText text;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.text = TLRPC.RichText.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.text.serializeToStream(var1);
      }
   }

   public static class TL_pageBlockSubtitle extends TLRPC.PageBlock {
      public static int constructor;
      public TLRPC.RichText text;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.text = TLRPC.RichText.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.text.serializeToStream(var1);
      }
   }

   public static class TL_pageBlockTable extends TLRPC.PageBlock {
      public static int constructor;
      public boolean bordered;
      public int flags;
      public ArrayList rows = new ArrayList();
      public boolean striped;
      public TLRPC.RichText title;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.flags = var1.readInt32(var2);
         int var3 = this.flags;
         int var4 = 0;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.bordered = var5;
         if ((this.flags & 2) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.striped = var5;
         this.title = TLRPC.RichText.TLdeserialize(var1, var1.readInt32(var2), var2);
         var3 = var1.readInt32(var2);
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.TL_pageTableRow var6 = TLRPC.TL_pageTableRow.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               this.rows.add(var6);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.bordered) {
            var2 = this.flags | 1;
         } else {
            var2 = this.flags & -2;
         }

         this.flags = var2;
         if (this.striped) {
            var2 = this.flags | 2;
         } else {
            var2 = this.flags & -3;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         this.title.serializeToStream(var1);
         var1.writeInt32(481674261);
         int var3 = this.rows.size();
         var1.writeInt32(var3);

         for(var2 = 0; var2 < var3; ++var2) {
            ((TLRPC.TL_pageTableRow)this.rows.get(var2)).serializeToStream(var1);
         }

      }
   }

   public static class TL_pageBlockTitle extends TLRPC.PageBlock {
      public static int constructor;
      public TLRPC.RichText text;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.text = TLRPC.RichText.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.text.serializeToStream(var1);
      }
   }

   public static class TL_pageBlockUnsupported extends TLRPC.PageBlock {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_pageBlockVideo extends TLRPC.PageBlock {
      public static int constructor;
      public boolean autoplay;
      public TLRPC.TL_pageCaption caption;
      public int flags;
      public boolean loop;
      public long video_id;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.flags = var1.readInt32(var2);
         int var3 = this.flags;
         boolean var4 = true;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.autoplay = var5;
         if ((this.flags & 2) != 0) {
            var5 = var4;
         } else {
            var5 = false;
         }

         this.loop = var5;
         this.video_id = var1.readInt64(var2);
         this.caption = TLRPC.TL_pageCaption.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.autoplay) {
            var2 = this.flags | 1;
         } else {
            var2 = this.flags & -2;
         }

         this.flags = var2;
         if (this.loop) {
            var2 = this.flags | 2;
         } else {
            var2 = this.flags & -3;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         var1.writeInt64(this.video_id);
         this.caption.serializeToStream(var1);
      }
   }

   public static class TL_pageBlockVideo_layer82 extends TLRPC.TL_pageBlockVideo {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         boolean var4 = true;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.autoplay = var5;
         if ((super.flags & 2) != 0) {
            var5 = var4;
         } else {
            var5 = false;
         }

         super.loop = var5;
         super.video_id = var1.readInt64(var2);
         super.caption = new TLRPC.TL_pageCaption();
         super.caption.text = TLRPC.RichText.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.caption.credit = new TLRPC.TL_textEmpty();
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.autoplay) {
            var2 = super.flags | 1;
         } else {
            var2 = super.flags & -2;
         }

         super.flags = var2;
         if (super.loop) {
            var2 = super.flags | 2;
         } else {
            var2 = super.flags & -3;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt64(super.video_id);
         super.caption.text.serializeToStream(var1);
      }
   }

   public static class TL_pageCaption extends TLObject {
      public static int constructor;
      public TLRPC.RichText credit;
      public TLRPC.RichText text;

      public static TLRPC.TL_pageCaption TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_pageCaption", var1));
            }
         } else {
            TLRPC.TL_pageCaption var3 = new TLRPC.TL_pageCaption();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.text = TLRPC.RichText.TLdeserialize(var1, var1.readInt32(var2), var2);
         this.credit = TLRPC.RichText.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.text.serializeToStream(var1);
         this.credit.serializeToStream(var1);
      }
   }

   public static class TL_pageFull_layer67 extends TLRPC.TL_page {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         int var3 = var1.readInt32(var2);
         byte var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            int var5 = var1.readInt32(var2);

            for(var3 = 0; var3 < var5; ++var3) {
               TLRPC.PageBlock var6 = TLRPC.PageBlock.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               super.blocks.add(var6);
            }

            var3 = var1.readInt32(var2);
            if (var3 != 481674261) {
               if (var2) {
                  throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
               }
            } else {
               var5 = var1.readInt32(var2);

               for(var3 = 0; var3 < var5; ++var3) {
                  TLRPC.Photo var7 = TLRPC.Photo.TLdeserialize(var1, var1.readInt32(var2), var2);
                  if (var7 == null) {
                     return;
                  }

                  super.photos.add(var7);
               }

               var3 = var1.readInt32(var2);
               if (var3 != 481674261) {
                  if (var2) {
                     throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
                  }
               } else {
                  var5 = var1.readInt32(var2);

                  for(var3 = var4; var3 < var5; ++var3) {
                     TLRPC.Document var8 = TLRPC.Document.TLdeserialize(var1, var1.readInt32(var2), var2);
                     if (var8 == null) {
                        return;
                     }

                     super.documents.add(var8);
                  }

               }
            }
         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = super.blocks.size();
         var1.writeInt32(var2);
         byte var3 = 0;

         int var4;
         for(var4 = 0; var4 < var2; ++var4) {
            ((TLRPC.PageBlock)super.blocks.get(var4)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var2 = super.photos.size();
         var1.writeInt32(var2);

         for(var4 = 0; var4 < var2; ++var4) {
            ((TLRPC.Photo)super.photos.get(var4)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var2 = super.documents.size();
         var1.writeInt32(var2);

         for(var4 = var3; var4 < var2; ++var4) {
            ((TLRPC.Document)super.documents.get(var4)).serializeToStream(var1);
         }

      }
   }

   public static class TL_pageFull_layer82 extends TLRPC.TL_page {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         int var3 = var1.readInt32(var2);
         byte var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            int var5 = var1.readInt32(var2);

            for(var3 = 0; var3 < var5; ++var3) {
               TLRPC.PageBlock var6 = TLRPC.PageBlock.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               super.blocks.add(var6);
            }

            var3 = var1.readInt32(var2);
            if (var3 != 481674261) {
               if (var2) {
                  throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
               }
            } else {
               var5 = var1.readInt32(var2);

               for(var3 = 0; var3 < var5; ++var3) {
                  TLRPC.Photo var7 = TLRPC.Photo.TLdeserialize(var1, var1.readInt32(var2), var2);
                  if (var7 == null) {
                     return;
                  }

                  super.photos.add(var7);
               }

               var3 = var1.readInt32(var2);
               if (var3 != 481674261) {
                  if (var2) {
                     throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
                  }
               } else {
                  var5 = var1.readInt32(var2);

                  for(var3 = var4; var3 < var5; ++var3) {
                     TLRPC.Document var8 = TLRPC.Document.TLdeserialize(var1, var1.readInt32(var2), var2);
                     if (var8 == null) {
                        return;
                     }

                     super.documents.add(var8);
                  }

               }
            }
         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = super.blocks.size();
         var1.writeInt32(var2);
         byte var3 = 0;

         int var4;
         for(var4 = 0; var4 < var2; ++var4) {
            ((TLRPC.PageBlock)super.blocks.get(var4)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var2 = super.photos.size();
         var1.writeInt32(var2);

         for(var4 = 0; var4 < var2; ++var4) {
            ((TLRPC.Photo)super.photos.get(var4)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var2 = super.documents.size();
         var1.writeInt32(var2);

         for(var4 = var3; var4 < var2; ++var4) {
            ((TLRPC.Document)super.documents.get(var4)).serializeToStream(var1);
         }

      }
   }

   public static class TL_pageListItemBlocks extends TLRPC.PageListItem {
      public static int constructor;
      public ArrayList blocks = new ArrayList();

      public void readParams(AbstractSerializedData var1, boolean var2) {
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.PageBlock var5 = TLRPC.PageBlock.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               this.blocks.add(var5);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = this.blocks.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.PageBlock)this.blocks.get(var3)).serializeToStream(var1);
         }

      }
   }

   public static class TL_pageListItemText extends TLRPC.PageListItem {
      public static int constructor;
      public TLRPC.RichText text;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.text = TLRPC.RichText.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.text.serializeToStream(var1);
      }
   }

   public static class TL_pageListOrderedItemBlocks extends TLRPC.PageListOrderedItem {
      public static int constructor;
      public ArrayList blocks = new ArrayList();
      public String num;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.num = var1.readString(var2);
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.PageBlock var5 = TLRPC.PageBlock.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               this.blocks.add(var5);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.num);
         var1.writeInt32(481674261);
         int var2 = this.blocks.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.PageBlock)this.blocks.get(var3)).serializeToStream(var1);
         }

      }
   }

   public static class TL_pageListOrderedItemText extends TLRPC.PageListOrderedItem {
      public static int constructor;
      public String num;
      public TLRPC.RichText text;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.num = var1.readString(var2);
         this.text = TLRPC.RichText.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.num);
         this.text.serializeToStream(var1);
      }
   }

   public static class TL_pagePart_layer67 extends TLRPC.TL_pagePart_layer82 {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         int var3 = var1.readInt32(var2);
         byte var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            int var5 = var1.readInt32(var2);

            for(var3 = 0; var3 < var5; ++var3) {
               TLRPC.PageBlock var6 = TLRPC.PageBlock.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               super.blocks.add(var6);
            }

            var3 = var1.readInt32(var2);
            if (var3 != 481674261) {
               if (var2) {
                  throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
               }
            } else {
               var5 = var1.readInt32(var2);

               for(var3 = 0; var3 < var5; ++var3) {
                  TLRPC.Photo var7 = TLRPC.Photo.TLdeserialize(var1, var1.readInt32(var2), var2);
                  if (var7 == null) {
                     return;
                  }

                  super.photos.add(var7);
               }

               var3 = var1.readInt32(var2);
               if (var3 != 481674261) {
                  if (var2) {
                     throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
                  }
               } else {
                  var5 = var1.readInt32(var2);

                  for(var3 = var4; var3 < var5; ++var3) {
                     TLRPC.Document var8 = TLRPC.Document.TLdeserialize(var1, var1.readInt32(var2), var2);
                     if (var8 == null) {
                        return;
                     }

                     super.documents.add(var8);
                  }

               }
            }
         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = super.blocks.size();
         var1.writeInt32(var2);
         byte var3 = 0;

         int var4;
         for(var4 = 0; var4 < var2; ++var4) {
            ((TLRPC.PageBlock)super.blocks.get(var4)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var2 = super.photos.size();
         var1.writeInt32(var2);

         for(var4 = 0; var4 < var2; ++var4) {
            ((TLRPC.Photo)super.photos.get(var4)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var2 = super.documents.size();
         var1.writeInt32(var2);

         for(var4 = var3; var4 < var2; ++var4) {
            ((TLRPC.Document)super.documents.get(var4)).serializeToStream(var1);
         }

      }
   }

   public static class TL_pagePart_layer82 extends TLRPC.Page {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         int var3 = var1.readInt32(var2);
         byte var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            int var5 = var1.readInt32(var2);

            for(var3 = 0; var3 < var5; ++var3) {
               TLRPC.PageBlock var6 = TLRPC.PageBlock.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               super.blocks.add(var6);
            }

            var3 = var1.readInt32(var2);
            if (var3 != 481674261) {
               if (var2) {
                  throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
               }
            } else {
               var5 = var1.readInt32(var2);

               for(var3 = 0; var3 < var5; ++var3) {
                  TLRPC.Photo var7 = TLRPC.Photo.TLdeserialize(var1, var1.readInt32(var2), var2);
                  if (var7 == null) {
                     return;
                  }

                  super.photos.add(var7);
               }

               var3 = var1.readInt32(var2);
               if (var3 != 481674261) {
                  if (var2) {
                     throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
                  }
               } else {
                  var5 = var1.readInt32(var2);

                  for(var3 = var4; var3 < var5; ++var3) {
                     TLRPC.Document var8 = TLRPC.Document.TLdeserialize(var1, var1.readInt32(var2), var2);
                     if (var8 == null) {
                        return;
                     }

                     super.documents.add(var8);
                  }

               }
            }
         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = super.blocks.size();
         var1.writeInt32(var2);
         byte var3 = 0;

         int var4;
         for(var4 = 0; var4 < var2; ++var4) {
            ((TLRPC.PageBlock)super.blocks.get(var4)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var2 = super.photos.size();
         var1.writeInt32(var2);

         for(var4 = 0; var4 < var2; ++var4) {
            ((TLRPC.Photo)super.photos.get(var4)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var2 = super.documents.size();
         var1.writeInt32(var2);

         for(var4 = var3; var4 < var2; ++var4) {
            ((TLRPC.Document)super.documents.get(var4)).serializeToStream(var1);
         }

      }
   }

   public static class TL_pageRelatedArticle extends TLObject {
      public static int constructor;
      public String author;
      public String description;
      public int flags;
      public long photo_id;
      public int published_date;
      public String title;
      public String url;
      public long webpage_id;

      public static TLRPC.TL_pageRelatedArticle TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_pageRelatedArticle", var1));
            }
         } else {
            TLRPC.TL_pageRelatedArticle var3 = new TLRPC.TL_pageRelatedArticle();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.flags = var1.readInt32(var2);
         this.url = var1.readString(var2);
         this.webpage_id = var1.readInt64(var2);
         if ((this.flags & 1) != 0) {
            this.title = var1.readString(var2);
         }

         if ((this.flags & 2) != 0) {
            this.description = var1.readString(var2);
         }

         if ((this.flags & 4) != 0) {
            this.photo_id = var1.readInt64(var2);
         }

         if ((this.flags & 8) != 0) {
            this.author = var1.readString(var2);
         }

         if ((this.flags & 16) != 0) {
            this.published_date = var1.readInt32(var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.flags);
         var1.writeString(this.url);
         var1.writeInt64(this.webpage_id);
         if ((this.flags & 1) != 0) {
            var1.writeString(this.title);
         }

         if ((this.flags & 2) != 0) {
            var1.writeString(this.description);
         }

         if ((this.flags & 4) != 0) {
            var1.writeInt64(this.photo_id);
         }

         if ((this.flags & 8) != 0) {
            var1.writeString(this.author);
         }

         if ((this.flags & 16) != 0) {
            var1.writeInt32(this.published_date);
         }

      }
   }

   public static class TL_pageTableCell extends TLObject {
      public static int constructor;
      public boolean align_center;
      public boolean align_right;
      public int colspan;
      public int flags;
      public boolean header;
      public int rowspan;
      public TLRPC.RichText text;
      public boolean valign_bottom;
      public boolean valign_middle;

      public static TLRPC.TL_pageTableCell TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_pageTableCell", var1));
            }
         } else {
            TLRPC.TL_pageTableCell var3 = new TLRPC.TL_pageTableCell();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.flags = var1.readInt32(var2);
         int var3 = this.flags;
         boolean var4 = true;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.header = var5;
         if ((this.flags & 8) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.align_center = var5;
         if ((this.flags & 16) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.align_right = var5;
         if ((this.flags & 32) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.valign_middle = var5;
         if ((this.flags & 64) != 0) {
            var5 = var4;
         } else {
            var5 = false;
         }

         this.valign_bottom = var5;
         if ((this.flags & 128) != 0) {
            this.text = TLRPC.RichText.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         if ((this.flags & 2) != 0) {
            this.colspan = var1.readInt32(var2);
         }

         if ((this.flags & 4) != 0) {
            this.rowspan = var1.readInt32(var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.header) {
            var2 = this.flags | 1;
         } else {
            var2 = this.flags & -2;
         }

         this.flags = var2;
         if (this.align_center) {
            var2 = this.flags | 8;
         } else {
            var2 = this.flags & -9;
         }

         this.flags = var2;
         if (this.align_right) {
            var2 = this.flags | 16;
         } else {
            var2 = this.flags & -17;
         }

         this.flags = var2;
         if (this.valign_middle) {
            var2 = this.flags | 32;
         } else {
            var2 = this.flags & -33;
         }

         this.flags = var2;
         if (this.valign_bottom) {
            var2 = this.flags | 64;
         } else {
            var2 = this.flags & -65;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         if ((this.flags & 128) != 0) {
            this.text.serializeToStream(var1);
         }

         if ((this.flags & 2) != 0) {
            var1.writeInt32(this.colspan);
         }

         if ((this.flags & 4) != 0) {
            var1.writeInt32(this.rowspan);
         }

      }
   }

   public static class TL_pageTableRow extends TLObject {
      public static int constructor;
      public ArrayList cells = new ArrayList();

      public static TLRPC.TL_pageTableRow TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_pageTableRow", var1));
            }
         } else {
            TLRPC.TL_pageTableRow var3 = new TLRPC.TL_pageTableRow();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.TL_pageTableCell var5 = TLRPC.TL_pageTableCell.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               this.cells.add(var5);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = this.cells.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.TL_pageTableCell)this.cells.get(var3)).serializeToStream(var1);
         }

      }
   }

   public static class TL_passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow extends TLRPC.PasswordKdfAlgo {
      public static int constructor;
      public int g;
      public byte[] p;
      public byte[] salt1;
      public byte[] salt2;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.salt1 = var1.readByteArray(var2);
         this.salt2 = var1.readByteArray(var2);
         this.g = var1.readInt32(var2);
         this.p = var1.readByteArray(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeByteArray(this.salt1);
         var1.writeByteArray(this.salt2);
         var1.writeInt32(this.g);
         var1.writeByteArray(this.p);
      }
   }

   public static class TL_passwordKdfAlgoUnknown extends TLRPC.PasswordKdfAlgo {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_paymentRequestedInfo extends TLObject {
      public static int constructor;
      public String email;
      public int flags;
      public String name;
      public String phone;
      public TLRPC.TL_postAddress shipping_address;

      public static TLRPC.TL_paymentRequestedInfo TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_paymentRequestedInfo", var1));
            }
         } else {
            TLRPC.TL_paymentRequestedInfo var3 = new TLRPC.TL_paymentRequestedInfo();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.flags = var1.readInt32(var2);
         if ((this.flags & 1) != 0) {
            this.name = var1.readString(var2);
         }

         if ((this.flags & 2) != 0) {
            this.phone = var1.readString(var2);
         }

         if ((this.flags & 4) != 0) {
            this.email = var1.readString(var2);
         }

         if ((this.flags & 8) != 0) {
            this.shipping_address = TLRPC.TL_postAddress.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.flags);
         if ((this.flags & 1) != 0) {
            var1.writeString(this.name);
         }

         if ((this.flags & 2) != 0) {
            var1.writeString(this.phone);
         }

         if ((this.flags & 4) != 0) {
            var1.writeString(this.email);
         }

         if ((this.flags & 8) != 0) {
            this.shipping_address.serializeToStream(var1);
         }

      }
   }

   public static class TL_paymentSavedCredentialsCard extends TLObject {
      public static int constructor;
      public String id;
      public String title;

      public static TLRPC.TL_paymentSavedCredentialsCard TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_paymentSavedCredentialsCard", var1));
            }
         } else {
            TLRPC.TL_paymentSavedCredentialsCard var3 = new TLRPC.TL_paymentSavedCredentialsCard();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.id = var1.readString(var2);
         this.title = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.id);
         var1.writeString(this.title);
      }
   }

   public static class TL_payments_clearSavedInfo extends TLObject {
      public static int constructor;
      public boolean credentials;
      public int flags;
      public boolean info;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.credentials) {
            var2 = this.flags | 1;
         } else {
            var2 = this.flags & -2;
         }

         this.flags = var2;
         if (this.info) {
            var2 = this.flags | 2;
         } else {
            var2 = this.flags & -3;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
      }
   }

   public static class TL_payments_getPaymentForm extends TLObject {
      public static int constructor;
      public int msg_id;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_payments_paymentForm.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.msg_id);
      }
   }

   public static class TL_payments_getPaymentReceipt extends TLObject {
      public static int constructor;
      public int msg_id;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_payments_paymentReceipt.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.msg_id);
      }
   }

   public static class TL_payments_getSavedInfo extends TLObject {
      public static int constructor;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_payments_savedInfo.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_payments_paymentForm extends TLObject {
      public static int constructor;
      public int bot_id;
      public boolean can_save_credentials;
      public int flags;
      public TLRPC.TL_invoice invoice;
      public TLRPC.TL_dataJSON native_params;
      public String native_provider;
      public boolean password_missing;
      public int provider_id;
      public TLRPC.TL_paymentSavedCredentialsCard saved_credentials;
      public TLRPC.TL_paymentRequestedInfo saved_info;
      public String url;
      public ArrayList users = new ArrayList();

      public static TLRPC.TL_payments_paymentForm TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_payments_paymentForm", var1));
            }
         } else {
            TLRPC.TL_payments_paymentForm var3 = new TLRPC.TL_payments_paymentForm();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.flags = var1.readInt32(var2);
         int var3 = this.flags;
         int var4 = 0;
         boolean var5;
         if ((var3 & 4) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.can_save_credentials = var5;
         if ((this.flags & 8) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.password_missing = var5;
         this.bot_id = var1.readInt32(var2);
         this.invoice = TLRPC.TL_invoice.TLdeserialize(var1, var1.readInt32(var2), var2);
         this.provider_id = var1.readInt32(var2);
         this.url = var1.readString(var2);
         if ((this.flags & 16) != 0) {
            this.native_provider = var1.readString(var2);
         }

         if ((this.flags & 16) != 0) {
            this.native_params = TLRPC.TL_dataJSON.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         if ((this.flags & 1) != 0) {
            this.saved_info = TLRPC.TL_paymentRequestedInfo.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         if ((this.flags & 2) != 0) {
            this.saved_credentials = TLRPC.TL_paymentSavedCredentialsCard.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         var3 = var1.readInt32(var2);
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.User var6 = TLRPC.User.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               this.users.add(var6);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.can_save_credentials) {
            var2 = this.flags | 4;
         } else {
            var2 = this.flags & -5;
         }

         this.flags = var2;
         if (this.password_missing) {
            var2 = this.flags | 8;
         } else {
            var2 = this.flags & -9;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         var1.writeInt32(this.bot_id);
         this.invoice.serializeToStream(var1);
         var1.writeInt32(this.provider_id);
         var1.writeString(this.url);
         if ((this.flags & 16) != 0) {
            var1.writeString(this.native_provider);
         }

         if ((this.flags & 16) != 0) {
            this.native_params.serializeToStream(var1);
         }

         if ((this.flags & 1) != 0) {
            this.saved_info.serializeToStream(var1);
         }

         if ((this.flags & 2) != 0) {
            this.saved_credentials.serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         int var3 = this.users.size();
         var1.writeInt32(var3);

         for(var2 = 0; var2 < var3; ++var2) {
            ((TLRPC.User)this.users.get(var2)).serializeToStream(var1);
         }

      }
   }

   public static class TL_payments_paymentReceipt extends TLObject {
      public static int constructor;
      public int bot_id;
      public String credentials_title;
      public String currency;
      public int date;
      public int flags;
      public TLRPC.TL_paymentRequestedInfo info;
      public TLRPC.TL_invoice invoice;
      public int provider_id;
      public TLRPC.TL_shippingOption shipping;
      public long total_amount;
      public ArrayList users = new ArrayList();

      public static TLRPC.TL_payments_paymentReceipt TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_payments_paymentReceipt", var1));
            }
         } else {
            TLRPC.TL_payments_paymentReceipt var3 = new TLRPC.TL_payments_paymentReceipt();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.flags = var1.readInt32(var2);
         this.date = var1.readInt32(var2);
         this.bot_id = var1.readInt32(var2);
         this.invoice = TLRPC.TL_invoice.TLdeserialize(var1, var1.readInt32(var2), var2);
         this.provider_id = var1.readInt32(var2);
         if ((this.flags & 1) != 0) {
            this.info = TLRPC.TL_paymentRequestedInfo.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         if ((this.flags & 2) != 0) {
            this.shipping = TLRPC.TL_shippingOption.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         this.currency = var1.readString(var2);
         this.total_amount = var1.readInt64(var2);
         this.credentials_title = var1.readString(var2);
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.User var5 = TLRPC.User.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               this.users.add(var5);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.flags);
         var1.writeInt32(this.date);
         var1.writeInt32(this.bot_id);
         this.invoice.serializeToStream(var1);
         var1.writeInt32(this.provider_id);
         if ((this.flags & 1) != 0) {
            this.info.serializeToStream(var1);
         }

         if ((this.flags & 2) != 0) {
            this.shipping.serializeToStream(var1);
         }

         var1.writeString(this.currency);
         var1.writeInt64(this.total_amount);
         var1.writeString(this.credentials_title);
         var1.writeInt32(481674261);
         int var2 = this.users.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.User)this.users.get(var3)).serializeToStream(var1);
         }

      }
   }

   public static class TL_payments_paymentResult extends TLRPC.payments_PaymentResult {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.updates = TLRPC.Updates.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         super.updates.serializeToStream(var1);
      }
   }

   public static class TL_payments_paymentVerficationNeeded extends TLRPC.payments_PaymentResult {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.url = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(super.url);
      }
   }

   public static class TL_payments_savedInfo extends TLObject {
      public static int constructor;
      public int flags;
      public boolean has_saved_credentials;
      public TLRPC.TL_paymentRequestedInfo saved_info;

      public static TLRPC.TL_payments_savedInfo TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_payments_savedInfo", var1));
            }
         } else {
            TLRPC.TL_payments_savedInfo var3 = new TLRPC.TL_payments_savedInfo();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.flags = var1.readInt32(var2);
         boolean var3;
         if ((this.flags & 2) != 0) {
            var3 = true;
         } else {
            var3 = false;
         }

         this.has_saved_credentials = var3;
         if ((this.flags & 1) != 0) {
            this.saved_info = TLRPC.TL_paymentRequestedInfo.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.has_saved_credentials) {
            var2 = this.flags | 2;
         } else {
            var2 = this.flags & -3;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         if ((this.flags & 1) != 0) {
            this.saved_info.serializeToStream(var1);
         }

      }
   }

   public static class TL_payments_sendPaymentForm extends TLObject {
      public static int constructor;
      public TLRPC.InputPaymentCredentials credentials;
      public int flags;
      public int msg_id;
      public String requested_info_id;
      public String shipping_option_id;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.payments_PaymentResult.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.flags);
         var1.writeInt32(this.msg_id);
         if ((this.flags & 1) != 0) {
            var1.writeString(this.requested_info_id);
         }

         if ((this.flags & 2) != 0) {
            var1.writeString(this.shipping_option_id);
         }

         this.credentials.serializeToStream(var1);
      }
   }

   public static class TL_payments_validateRequestedInfo extends TLObject {
      public static int constructor;
      public int flags;
      public TLRPC.TL_paymentRequestedInfo info;
      public int msg_id;
      public boolean save;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_payments_validatedRequestedInfo.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.save) {
            var2 = this.flags | 1;
         } else {
            var2 = this.flags & -2;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         var1.writeInt32(this.msg_id);
         this.info.serializeToStream(var1);
      }
   }

   public static class TL_payments_validatedRequestedInfo extends TLObject {
      public static int constructor;
      public int flags;
      public String id;
      public ArrayList shipping_options = new ArrayList();

      public static TLRPC.TL_payments_validatedRequestedInfo TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_payments_validatedRequestedInfo", var1));
            }
         } else {
            TLRPC.TL_payments_validatedRequestedInfo var3 = new TLRPC.TL_payments_validatedRequestedInfo();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.flags = var1.readInt32(var2);
         if ((this.flags & 1) != 0) {
            this.id = var1.readString(var2);
         }

         if ((this.flags & 2) != 0) {
            int var3 = var1.readInt32(var2);
            int var4 = 0;
            if (var3 != 481674261) {
               if (!var2) {
                  return;
               }

               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }

            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.TL_shippingOption var5 = TLRPC.TL_shippingOption.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               this.shipping_options.add(var5);
            }
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.flags);
         if ((this.flags & 1) != 0) {
            var1.writeString(this.id);
         }

         if ((this.flags & 2) != 0) {
            var1.writeInt32(481674261);
            int var2 = this.shipping_options.size();
            var1.writeInt32(var2);

            for(int var3 = 0; var3 < var2; ++var3) {
               ((TLRPC.TL_shippingOption)this.shipping_options.get(var3)).serializeToStream(var1);
            }
         }

      }
   }

   public static class TL_peerChannel extends TLRPC.Peer {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.channel_id = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.channel_id);
      }
   }

   public static class TL_peerChat extends TLRPC.Peer {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.chat_id = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.chat_id);
      }
   }

   public static class TL_peerNotifySettings extends TLRPC.PeerNotifySettings {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         if ((super.flags & 1) != 0) {
            super.show_previews = var1.readBool(var2);
         }

         if ((super.flags & 2) != 0) {
            super.silent = var1.readBool(var2);
         }

         if ((super.flags & 4) != 0) {
            super.mute_until = var1.readInt32(var2);
         }

         if ((super.flags & 8) != 0) {
            super.sound = var1.readString(var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.flags);
         if ((super.flags & 1) != 0) {
            var1.writeBool(super.show_previews);
         }

         if ((super.flags & 2) != 0) {
            var1.writeBool(super.silent);
         }

         if ((super.flags & 4) != 0) {
            var1.writeInt32(super.mute_until);
         }

         if ((super.flags & 8) != 0) {
            var1.writeString(super.sound);
         }

      }
   }

   public static class TL_peerNotifySettingsEmpty_layer77 extends TLRPC.PeerNotifySettings {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_peerNotifySettings_layer47 extends TLRPC.TL_peerNotifySettings {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.mute_until = var1.readInt32(var2);
         super.sound = var1.readString(var2);
         super.show_previews = var1.readBool(var2);
         super.events_mask = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.mute_until);
         var1.writeString(super.sound);
         var1.writeBool(super.show_previews);
         var1.writeInt32(super.events_mask);
      }
   }

   public static class TL_peerNotifySettings_layer77 extends TLRPC.TL_peerNotifySettings {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         boolean var4 = true;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.show_previews = var5;
         if ((super.flags & 2) != 0) {
            var5 = var4;
         } else {
            var5 = false;
         }

         super.silent = var5;
         super.mute_until = var1.readInt32(var2);
         super.sound = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.show_previews) {
            var2 = super.flags | 1;
         } else {
            var2 = super.flags & -2;
         }

         super.flags = var2;
         if (super.silent) {
            var2 = super.flags | 2;
         } else {
            var2 = super.flags & -3;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt32(super.mute_until);
         var1.writeString(super.sound);
      }
   }

   public static class TL_peerSettings extends TLObject {
      public static int constructor;
      public int flags;
      public boolean report_spam;

      public static TLRPC.TL_peerSettings TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_peerSettings", var1));
            }
         } else {
            TLRPC.TL_peerSettings var3 = new TLRPC.TL_peerSettings();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.flags = var1.readInt32(var2);
         int var3 = this.flags;
         var2 = true;
         if ((var3 & 1) == 0) {
            var2 = false;
         }

         this.report_spam = var2;
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.report_spam) {
            var2 = this.flags | 1;
         } else {
            var2 = this.flags & -2;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
      }
   }

   public static class TL_peerUser extends TLRPC.Peer {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.user_id = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.user_id);
      }
   }

   public static class TL_phoneCall extends TLRPC.PhoneCall {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         int var4 = 0;
         boolean var5;
         if ((var3 & 32) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.p2p_allowed = var5;
         super.id = var1.readInt64(var2);
         super.access_hash = var1.readInt64(var2);
         super.date = var1.readInt32(var2);
         super.admin_id = var1.readInt32(var2);
         super.participant_id = var1.readInt32(var2);
         super.g_a_or_b = var1.readByteArray(var2);
         super.key_fingerprint = var1.readInt64(var2);
         super.protocol = TLRPC.TL_phoneCallProtocol.TLdeserialize(var1, var1.readInt32(var2), var2);
         var3 = var1.readInt32(var2);
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.TL_phoneConnection var6 = TLRPC.TL_phoneConnection.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               super.connections.add(var6);
            }

            super.start_date = var1.readInt32(var2);
         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.p2p_allowed) {
            var2 = super.flags | 32;
         } else {
            var2 = super.flags & -33;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt64(super.id);
         var1.writeInt64(super.access_hash);
         var1.writeInt32(super.date);
         var1.writeInt32(super.admin_id);
         var1.writeInt32(super.participant_id);
         var1.writeByteArray(super.g_a_or_b);
         var1.writeInt64(super.key_fingerprint);
         super.protocol.serializeToStream(var1);
         var1.writeInt32(481674261);
         int var3 = super.connections.size();
         var1.writeInt32(var3);

         for(var2 = 0; var2 < var3; ++var2) {
            ((TLRPC.TL_phoneConnection)super.connections.get(var2)).serializeToStream(var1);
         }

         var1.writeInt32(super.start_date);
      }
   }

   public static class TL_phoneCallAccepted extends TLRPC.PhoneCall {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         boolean var3;
         if ((super.flags & 32) != 0) {
            var3 = true;
         } else {
            var3 = false;
         }

         super.video = var3;
         super.id = var1.readInt64(var2);
         super.access_hash = var1.readInt64(var2);
         super.date = var1.readInt32(var2);
         super.admin_id = var1.readInt32(var2);
         super.participant_id = var1.readInt32(var2);
         super.g_b = var1.readByteArray(var2);
         super.protocol = TLRPC.TL_phoneCallProtocol.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.video) {
            var2 = super.flags | 32;
         } else {
            var2 = super.flags & -33;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt64(super.id);
         var1.writeInt64(super.access_hash);
         var1.writeInt32(super.date);
         var1.writeInt32(super.admin_id);
         var1.writeInt32(super.participant_id);
         var1.writeByteArray(super.g_b);
         super.protocol.serializeToStream(var1);
      }
   }

   public static class TL_phoneCallDiscardReasonAllowGroupCall extends TLRPC.PhoneCallDiscardReason {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.encrypted_key = var1.readByteArray(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeByteArray(super.encrypted_key);
      }
   }

   public static class TL_phoneCallDiscardReasonBusy extends TLRPC.PhoneCallDiscardReason {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_phoneCallDiscardReasonDisconnect extends TLRPC.PhoneCallDiscardReason {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_phoneCallDiscardReasonHangup extends TLRPC.PhoneCallDiscardReason {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_phoneCallDiscardReasonMissed extends TLRPC.PhoneCallDiscardReason {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_phoneCallDiscarded extends TLRPC.PhoneCall {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         boolean var4 = false;
         boolean var5;
         if ((var3 & 4) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.need_rating = var5;
         if ((super.flags & 8) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.need_debug = var5;
         var5 = var4;
         if ((super.flags & 32) != 0) {
            var5 = true;
         }

         super.video = var5;
         super.id = var1.readInt64(var2);
         if ((super.flags & 1) != 0) {
            super.reason = TLRPC.PhoneCallDiscardReason.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         if ((super.flags & 2) != 0) {
            super.duration = var1.readInt32(var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.need_rating) {
            var2 = super.flags | 4;
         } else {
            var2 = super.flags & -5;
         }

         super.flags = var2;
         if (super.need_debug) {
            var2 = super.flags | 8;
         } else {
            var2 = super.flags & -9;
         }

         super.flags = var2;
         if (super.video) {
            var2 = super.flags | 32;
         } else {
            var2 = super.flags & -33;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt64(super.id);
         if ((super.flags & 1) != 0) {
            super.reason.serializeToStream(var1);
         }

         if ((super.flags & 2) != 0) {
            var1.writeInt32(super.duration);
         }

      }
   }

   public static class TL_phoneCallEmpty extends TLRPC.PhoneCall {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt64(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(super.id);
      }
   }

   public static class TL_phoneCallProtocol extends TLObject {
      public static int constructor;
      public int flags;
      public int max_layer;
      public int min_layer;
      public boolean udp_p2p;
      public boolean udp_reflector;

      public static TLRPC.TL_phoneCallProtocol TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_phoneCallProtocol", var1));
            }
         } else {
            TLRPC.TL_phoneCallProtocol var3 = new TLRPC.TL_phoneCallProtocol();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.flags = var1.readInt32(var2);
         int var3 = this.flags;
         boolean var4 = true;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.udp_p2p = var5;
         if ((this.flags & 2) != 0) {
            var5 = var4;
         } else {
            var5 = false;
         }

         this.udp_reflector = var5;
         this.min_layer = var1.readInt32(var2);
         this.max_layer = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.udp_p2p) {
            var2 = this.flags | 1;
         } else {
            var2 = this.flags & -2;
         }

         this.flags = var2;
         if (this.udp_reflector) {
            var2 = this.flags | 2;
         } else {
            var2 = this.flags & -3;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         var1.writeInt32(this.min_layer);
         var1.writeInt32(this.max_layer);
      }
   }

   public static class TL_phoneCallRequested extends TLRPC.PhoneCall {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         boolean var3;
         if ((super.flags & 32) != 0) {
            var3 = true;
         } else {
            var3 = false;
         }

         super.video = var3;
         super.id = var1.readInt64(var2);
         super.access_hash = var1.readInt64(var2);
         super.date = var1.readInt32(var2);
         super.admin_id = var1.readInt32(var2);
         super.participant_id = var1.readInt32(var2);
         super.g_a_hash = var1.readByteArray(var2);
         super.protocol = TLRPC.TL_phoneCallProtocol.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.video) {
            var2 = super.flags | 32;
         } else {
            var2 = super.flags & -33;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt64(super.id);
         var1.writeInt64(super.access_hash);
         var1.writeInt32(super.date);
         var1.writeInt32(super.admin_id);
         var1.writeInt32(super.participant_id);
         var1.writeByteArray(super.g_a_hash);
         super.protocol.serializeToStream(var1);
      }
   }

   public static class TL_phoneCallWaiting extends TLRPC.PhoneCall {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         boolean var3;
         if ((super.flags & 32) != 0) {
            var3 = true;
         } else {
            var3 = false;
         }

         super.video = var3;
         super.id = var1.readInt64(var2);
         super.access_hash = var1.readInt64(var2);
         super.date = var1.readInt32(var2);
         super.admin_id = var1.readInt32(var2);
         super.participant_id = var1.readInt32(var2);
         super.protocol = TLRPC.TL_phoneCallProtocol.TLdeserialize(var1, var1.readInt32(var2), var2);
         if ((super.flags & 1) != 0) {
            super.receive_date = var1.readInt32(var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.video) {
            var2 = super.flags | 32;
         } else {
            var2 = super.flags & -33;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt64(super.id);
         var1.writeInt64(super.access_hash);
         var1.writeInt32(super.date);
         var1.writeInt32(super.admin_id);
         var1.writeInt32(super.participant_id);
         super.protocol.serializeToStream(var1);
         if ((super.flags & 1) != 0) {
            var1.writeInt32(super.receive_date);
         }

      }
   }

   public static class TL_phoneConnection extends TLObject {
      public static int constructor;
      public long id;
      public String ip;
      public String ipv6;
      public byte[] peer_tag;
      public int port;

      public static TLRPC.TL_phoneConnection TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_phoneConnection", var1));
            }
         } else {
            TLRPC.TL_phoneConnection var3 = new TLRPC.TL_phoneConnection();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.id = var1.readInt64(var2);
         this.ip = var1.readString(var2);
         this.ipv6 = var1.readString(var2);
         this.port = var1.readInt32(var2);
         this.peer_tag = var1.readByteArray(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(this.id);
         var1.writeString(this.ip);
         var1.writeString(this.ipv6);
         var1.writeInt32(this.port);
         var1.writeByteArray(this.peer_tag);
      }
   }

   public static class TL_phone_acceptCall extends TLObject {
      public static int constructor;
      public byte[] g_b;
      public TLRPC.TL_inputPhoneCall peer;
      public TLRPC.TL_phoneCallProtocol protocol;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_phone_phoneCall.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.peer.serializeToStream(var1);
         var1.writeByteArray(this.g_b);
         this.protocol.serializeToStream(var1);
      }
   }

   public static class TL_phone_confirmCall extends TLObject {
      public static int constructor;
      public byte[] g_a;
      public long key_fingerprint;
      public TLRPC.TL_inputPhoneCall peer;
      public TLRPC.TL_phoneCallProtocol protocol;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_phone_phoneCall.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.peer.serializeToStream(var1);
         var1.writeByteArray(this.g_a);
         var1.writeInt64(this.key_fingerprint);
         this.protocol.serializeToStream(var1);
      }
   }

   public static class TL_phone_createGroupCall extends TLObject {
      public static int constructor;
      public TLRPC.InputChannel channel;
      public byte[] encryption_key;
      public int flags;
      public long key_fingerprint;
      public TLRPC.TL_phoneCallProtocol protocol;
      public int random_id;
      public byte[] streams;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Updates.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.flags);
         this.channel.serializeToStream(var1);
         var1.writeInt32(this.random_id);
         this.protocol.serializeToStream(var1);
         if ((this.flags & 1) != 0) {
            var1.writeByteArray(this.encryption_key);
         }

         var1.writeInt64(this.key_fingerprint);
         var1.writeByteArray(this.streams);
      }
   }

   public static class TL_phone_discardCall extends TLObject {
      public static int constructor;
      public long connection_id;
      public int duration;
      public int flags;
      public TLRPC.TL_inputPhoneCall peer;
      public TLRPC.PhoneCallDiscardReason reason;
      public boolean video;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Updates.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.video) {
            var2 = this.flags | 1;
         } else {
            var2 = this.flags & -2;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         this.peer.serializeToStream(var1);
         var1.writeInt32(this.duration);
         this.reason.serializeToStream(var1);
         var1.writeInt64(this.connection_id);
      }
   }

   public static class TL_phone_discardGroupCall extends TLObject {
      public static int constructor;
      public TLRPC.TL_inputGroupCall call;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Updates.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.call.serializeToStream(var1);
      }
   }

   public static class TL_phone_editGroupCallMember extends TLObject {
      public static int constructor;
      public TLRPC.TL_inputGroupCall call;
      public int flags;
      public boolean kicked;
      public boolean readonly;
      public byte[] streams;
      public TLRPC.InputUser user_id;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Updates.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.readonly) {
            var2 = this.flags | 1;
         } else {
            var2 = this.flags & -2;
         }

         this.flags = var2;
         if (this.kicked) {
            var2 = this.flags | 2;
         } else {
            var2 = this.flags & -3;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         this.call.serializeToStream(var1);
         this.user_id.serializeToStream(var1);
         if ((this.flags & 4) != 0) {
            var1.writeByteArray(this.streams);
         }

      }
   }

   public static class TL_phone_getCall extends TLObject {
      public static int constructor;
      public TLRPC.TL_inputPhoneCall peer;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_phone_phoneCall.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.peer.serializeToStream(var1);
      }
   }

   public static class TL_phone_getCallConfig extends TLObject {
      public static int constructor;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_dataJSON.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_phone_getGroupCall extends TLObject {
      public static int constructor;
      public TLRPC.TL_inputGroupCall call;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_phone_groupCall.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.call.serializeToStream(var1);
      }
   }

   public static class TL_phone_groupCall extends TLObject {
      public static int constructor;
      public TLRPC.GroupCall call;
      public ArrayList chats = new ArrayList();
      public ArrayList participants = new ArrayList();
      public ArrayList users = new ArrayList();

      public static TLRPC.TL_phone_groupCall TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_phone_groupCall", var1));
            }
         } else {
            TLRPC.TL_phone_groupCall var3 = new TLRPC.TL_phone_groupCall();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.call = TLRPC.GroupCall.TLdeserialize(var1, var1.readInt32(var2), var2);
         int var3 = var1.readInt32(var2);
         byte var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            int var5 = var1.readInt32(var2);

            for(var3 = 0; var3 < var5; ++var3) {
               TLRPC.GroupCallParticipant var6 = TLRPC.GroupCallParticipant.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               this.participants.add(var6);
            }

            var3 = var1.readInt32(var2);
            if (var3 != 481674261) {
               if (var2) {
                  throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
               }
            } else {
               var5 = var1.readInt32(var2);

               for(var3 = 0; var3 < var5; ++var3) {
                  TLRPC.Chat var7 = TLRPC.Chat.TLdeserialize(var1, var1.readInt32(var2), var2);
                  if (var7 == null) {
                     return;
                  }

                  this.chats.add(var7);
               }

               var3 = var1.readInt32(var2);
               if (var3 != 481674261) {
                  if (var2) {
                     throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
                  }
               } else {
                  var5 = var1.readInt32(var2);

                  for(var3 = var4; var3 < var5; ++var3) {
                     TLRPC.User var8 = TLRPC.User.TLdeserialize(var1, var1.readInt32(var2), var2);
                     if (var8 == null) {
                        return;
                     }

                     this.users.add(var8);
                  }

               }
            }
         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.call.serializeToStream(var1);
         var1.writeInt32(481674261);
         int var2 = this.participants.size();
         var1.writeInt32(var2);
         byte var3 = 0;

         int var4;
         for(var4 = 0; var4 < var2; ++var4) {
            ((TLRPC.GroupCallParticipant)this.participants.get(var4)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var2 = this.chats.size();
         var1.writeInt32(var2);

         for(var4 = 0; var4 < var2; ++var4) {
            ((TLRPC.Chat)this.chats.get(var4)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var2 = this.users.size();
         var1.writeInt32(var2);

         for(var4 = var3; var4 < var2; ++var4) {
            ((TLRPC.User)this.users.get(var4)).serializeToStream(var1);
         }

      }
   }

   public static class TL_phone_inviteGroupCallMembers extends TLObject {
      public static int constructor;
      public TLRPC.TL_inputGroupCall call;
      public int flags;
      public boolean uninvite;
      public ArrayList users = new ArrayList();

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.uninvite) {
            var2 = this.flags | 1;
         } else {
            var2 = this.flags & -2;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         this.call.serializeToStream(var1);
         var1.writeInt32(481674261);
         int var3 = this.users.size();
         var1.writeInt32(var3);

         for(var2 = 0; var2 < var3; ++var2) {
            ((TLRPC.InputUser)this.users.get(var2)).serializeToStream(var1);
         }

      }
   }

   public static class TL_phone_joinGroupCall extends TLObject {
      public static int constructor;
      public TLRPC.TL_inputGroupCall call;
      public long key_fingerprint;
      public byte[] streams;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Updates.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.call.serializeToStream(var1);
         var1.writeByteArray(this.streams);
         var1.writeInt64(this.key_fingerprint);
      }
   }

   public static class TL_phone_leaveGroupCall extends TLObject {
      public static int constructor;
      public TLRPC.TL_inputGroupCall call;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Updates.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.call.serializeToStream(var1);
      }
   }

   public static class TL_phone_phoneCall extends TLObject {
      public static int constructor;
      public TLRPC.PhoneCall phone_call;
      public ArrayList users = new ArrayList();

      public static TLRPC.TL_phone_phoneCall TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_phone_phoneCall", var1));
            }
         } else {
            TLRPC.TL_phone_phoneCall var3 = new TLRPC.TL_phone_phoneCall();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.phone_call = TLRPC.PhoneCall.TLdeserialize(var1, var1.readInt32(var2), var2);
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.User var5 = TLRPC.User.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               this.users.add(var5);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.phone_call.serializeToStream(var1);
         var1.writeInt32(481674261);
         int var2 = this.users.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.User)this.users.get(var3)).serializeToStream(var1);
         }

      }
   }

   public static class TL_phone_receivedCall extends TLObject {
      public static int constructor;
      public TLRPC.TL_inputPhoneCall peer;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.peer.serializeToStream(var1);
      }
   }

   public static class TL_phone_requestCall extends TLObject {
      public static int constructor;
      public int flags;
      public byte[] g_a_hash;
      public TLRPC.TL_phoneCallProtocol protocol;
      public int random_id;
      public TLRPC.InputUser user_id;
      public boolean video;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_phone_phoneCall.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.video) {
            var2 = this.flags | 1;
         } else {
            var2 = this.flags & -2;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         this.user_id.serializeToStream(var1);
         var1.writeInt32(this.random_id);
         var1.writeByteArray(this.g_a_hash);
         this.protocol.serializeToStream(var1);
      }
   }

   public static class TL_phone_saveCallDebug extends TLObject {
      public static int constructor;
      public TLRPC.TL_dataJSON debug;
      public TLRPC.TL_inputPhoneCall peer;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.peer.serializeToStream(var1);
         this.debug.serializeToStream(var1);
      }
   }

   public static class TL_phone_setCallRating extends TLObject {
      public static int constructor;
      public String comment;
      public int flags;
      public TLRPC.TL_inputPhoneCall peer;
      public int rating;
      public boolean user_initiative;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Updates.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.user_initiative) {
            var2 = this.flags | 1;
         } else {
            var2 = this.flags & -2;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         this.peer.serializeToStream(var1);
         var1.writeInt32(this.rating);
         var1.writeString(this.comment);
      }
   }

   public static class TL_phone_upgradePhoneCall extends TLObject {
      public static int constructor;
      public byte[] encryption_key;
      public int flags;
      public long key_fingerprint;
      public TLRPC.TL_inputPhoneCall peer;
      public byte[] streams;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_phone_groupCall.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.flags);
         this.peer.serializeToStream(var1);
         if ((this.flags & 1) != 0) {
            var1.writeByteArray(this.encryption_key);
         }

         var1.writeInt64(this.key_fingerprint);
         var1.writeByteArray(this.streams);
      }
   }

   public static class TL_photo extends TLRPC.Photo {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         int var4 = 0;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.has_stickers = var5;
         super.id = var1.readInt64(var2);
         super.access_hash = var1.readInt64(var2);
         super.file_reference = var1.readByteArray(var2);
         super.date = var1.readInt32(var2);
         var3 = var1.readInt32(var2);
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.PhotoSize var6 = TLRPC.PhotoSize.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               super.sizes.add(var6);
            }

            super.dc_id = var1.readInt32(var2);
         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.has_stickers) {
            var2 = super.flags | 1;
         } else {
            var2 = super.flags & -2;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt64(super.id);
         var1.writeInt64(super.access_hash);
         var1.writeByteArray(super.file_reference);
         var1.writeInt32(super.date);
         var1.writeInt32(481674261);
         int var3 = super.sizes.size();
         var1.writeInt32(var3);

         for(var2 = 0; var2 < var3; ++var2) {
            ((TLRPC.PhotoSize)super.sizes.get(var2)).serializeToStream(var1);
         }

         var1.writeInt32(super.dc_id);
      }
   }

   public static class TL_photoCachedSize extends TLRPC.PhotoSize {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.type = var1.readString(var2);
         super.location = TLRPC.FileLocation.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.w = var1.readInt32(var2);
         super.h = var1.readInt32(var2);
         super.bytes = var1.readByteArray(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(super.type);
         super.location.serializeToStream(var1);
         var1.writeInt32(super.w);
         var1.writeInt32(super.h);
         var1.writeByteArray(super.bytes);
      }
   }

   public static class TL_photoEmpty extends TLRPC.Photo {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt64(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(super.id);
      }
   }

   public static class TL_photoSize extends TLRPC.PhotoSize {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.type = var1.readString(var2);
         super.location = TLRPC.FileLocation.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.w = var1.readInt32(var2);
         super.h = var1.readInt32(var2);
         super.size = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(super.type);
         super.location.serializeToStream(var1);
         var1.writeInt32(super.w);
         var1.writeInt32(super.h);
         var1.writeInt32(super.size);
      }
   }

   public static class TL_photoSizeEmpty extends TLRPC.PhotoSize {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.type = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(super.type);
      }
   }

   public static class TL_photoStrippedSize extends TLRPC.PhotoSize {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.type = var1.readString(var2);
         super.bytes = var1.readByteArray(var2);
         super.h = 50;
         super.w = 50;
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(super.type);
         var1.writeByteArray(super.bytes);
      }
   }

   public static class TL_photo_layer55 extends TLRPC.TL_photo {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt64(var2);
         super.access_hash = var1.readInt64(var2);
         super.date = var1.readInt32(var2);
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.PhotoSize var5 = TLRPC.PhotoSize.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               super.sizes.add(var5);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(super.id);
         var1.writeInt64(super.access_hash);
         var1.writeInt32(super.date);
         var1.writeInt32(481674261);
         int var2 = super.sizes.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.PhotoSize)super.sizes.get(var3)).serializeToStream(var1);
         }

      }
   }

   public static class TL_photo_layer82 extends TLRPC.TL_photo {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         int var4 = 0;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.has_stickers = var5;
         super.id = var1.readInt64(var2);
         super.access_hash = var1.readInt64(var2);
         super.date = var1.readInt32(var2);
         var3 = var1.readInt32(var2);
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.PhotoSize var6 = TLRPC.PhotoSize.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               super.sizes.add(var6);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.has_stickers) {
            var2 = super.flags | 1;
         } else {
            var2 = super.flags & -2;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt64(super.id);
         var1.writeInt64(super.access_hash);
         var1.writeInt32(super.date);
         var1.writeInt32(481674261);
         int var3 = super.sizes.size();
         var1.writeInt32(var3);

         for(var2 = 0; var2 < var3; ++var2) {
            ((TLRPC.PhotoSize)super.sizes.get(var2)).serializeToStream(var1);
         }

      }
   }

   public static class TL_photo_layer97 extends TLRPC.TL_photo {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         int var4 = 0;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.has_stickers = var5;
         super.id = var1.readInt64(var2);
         super.access_hash = var1.readInt64(var2);
         super.file_reference = var1.readByteArray(var2);
         super.date = var1.readInt32(var2);
         var3 = var1.readInt32(var2);
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.PhotoSize var6 = TLRPC.PhotoSize.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               super.sizes.add(var6);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.has_stickers) {
            var2 = super.flags | 1;
         } else {
            var2 = super.flags & -2;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt64(super.id);
         var1.writeInt64(super.access_hash);
         var1.writeByteArray(super.file_reference);
         var1.writeInt32(super.date);
         var1.writeInt32(481674261);
         int var3 = super.sizes.size();
         var1.writeInt32(var3);

         for(var2 = 0; var2 < var3; ++var2) {
            ((TLRPC.PhotoSize)super.sizes.get(var2)).serializeToStream(var1);
         }

      }
   }

   public static class TL_photo_old extends TLRPC.TL_photo {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt64(var2);
         super.access_hash = var1.readInt64(var2);
         super.user_id = var1.readInt32(var2);
         super.date = var1.readInt32(var2);
         super.caption = var1.readString(var2);
         super.geo = TLRPC.GeoPoint.TLdeserialize(var1, var1.readInt32(var2), var2);
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.PhotoSize var5 = TLRPC.PhotoSize.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               super.sizes.add(var5);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(super.id);
         var1.writeInt64(super.access_hash);
         var1.writeInt32(super.user_id);
         var1.writeInt32(super.date);
         var1.writeString(super.caption);
         super.geo.serializeToStream(var1);
         var1.writeInt32(481674261);
         int var2 = super.sizes.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.PhotoSize)super.sizes.get(var3)).serializeToStream(var1);
         }

      }
   }

   public static class TL_photo_old2 extends TLRPC.TL_photo {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt64(var2);
         super.access_hash = var1.readInt64(var2);
         super.user_id = var1.readInt32(var2);
         super.date = var1.readInt32(var2);
         super.geo = TLRPC.GeoPoint.TLdeserialize(var1, var1.readInt32(var2), var2);
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.PhotoSize var5 = TLRPC.PhotoSize.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               super.sizes.add(var5);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(super.id);
         var1.writeInt64(super.access_hash);
         var1.writeInt32(super.user_id);
         var1.writeInt32(super.date);
         super.geo.serializeToStream(var1);
         var1.writeInt32(481674261);
         int var2 = super.sizes.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.PhotoSize)super.sizes.get(var3)).serializeToStream(var1);
         }

      }
   }

   public static class TL_photos_deletePhotos extends TLObject {
      public static int constructor;
      public ArrayList id = new ArrayList();

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         TLRPC.Vector var4 = new TLRPC.Vector();
         int var5 = var1.readInt32(var3);

         for(var2 = 0; var2 < var5; ++var2) {
            var4.objects.add(var1.readInt64(var3));
         }

         return var4;
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = this.id.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.InputPhoto)this.id.get(var3)).serializeToStream(var1);
         }

      }
   }

   public static class TL_photos_getUserPhotos extends TLObject {
      public static int constructor;
      public int limit;
      public long max_id;
      public int offset;
      public TLRPC.InputUser user_id;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.photos_Photos.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.user_id.serializeToStream(var1);
         var1.writeInt32(this.offset);
         var1.writeInt64(this.max_id);
         var1.writeInt32(this.limit);
      }
   }

   public static class TL_photos_photo extends TLObject {
      public static int constructor;
      public TLRPC.Photo photo;
      public ArrayList users = new ArrayList();

      public static TLRPC.TL_photos_photo TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_photos_photo", var1));
            }
         } else {
            TLRPC.TL_photos_photo var3 = new TLRPC.TL_photos_photo();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.photo = TLRPC.Photo.TLdeserialize(var1, var1.readInt32(var2), var2);
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.User var5 = TLRPC.User.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               this.users.add(var5);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.photo.serializeToStream(var1);
         var1.writeInt32(481674261);
         int var2 = this.users.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.User)this.users.get(var3)).serializeToStream(var1);
         }

      }
   }

   public static class TL_photos_photos extends TLRPC.photos_Photos {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         int var3 = var1.readInt32(var2);
         byte var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            int var5 = var1.readInt32(var2);

            for(var3 = 0; var3 < var5; ++var3) {
               TLRPC.Photo var6 = TLRPC.Photo.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               super.photos.add(var6);
            }

            var3 = var1.readInt32(var2);
            if (var3 != 481674261) {
               if (var2) {
                  throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
               }
            } else {
               var5 = var1.readInt32(var2);

               for(var3 = var4; var3 < var5; ++var3) {
                  TLRPC.User var7 = TLRPC.User.TLdeserialize(var1, var1.readInt32(var2), var2);
                  if (var7 == null) {
                     return;
                  }

                  super.users.add(var7);
               }

            }
         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = super.photos.size();
         var1.writeInt32(var2);
         byte var3 = 0;

         int var4;
         for(var4 = 0; var4 < var2; ++var4) {
            ((TLRPC.Photo)super.photos.get(var4)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var2 = super.users.size();
         var1.writeInt32(var2);

         for(var4 = var3; var4 < var2; ++var4) {
            ((TLRPC.User)super.users.get(var4)).serializeToStream(var1);
         }

      }
   }

   public static class TL_photos_photosSlice extends TLRPC.photos_Photos {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.count = var1.readInt32(var2);
         int var3 = var1.readInt32(var2);
         byte var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            int var5 = var1.readInt32(var2);

            for(var3 = 0; var3 < var5; ++var3) {
               TLRPC.Photo var6 = TLRPC.Photo.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               super.photos.add(var6);
            }

            var3 = var1.readInt32(var2);
            if (var3 != 481674261) {
               if (var2) {
                  throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
               }
            } else {
               var5 = var1.readInt32(var2);

               for(var3 = var4; var3 < var5; ++var3) {
                  TLRPC.User var7 = TLRPC.User.TLdeserialize(var1, var1.readInt32(var2), var2);
                  if (var7 == null) {
                     return;
                  }

                  super.users.add(var7);
               }

            }
         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.count);
         var1.writeInt32(481674261);
         int var2 = super.photos.size();
         var1.writeInt32(var2);
         byte var3 = 0;

         int var4;
         for(var4 = 0; var4 < var2; ++var4) {
            ((TLRPC.Photo)super.photos.get(var4)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var2 = super.users.size();
         var1.writeInt32(var2);

         for(var4 = var3; var4 < var2; ++var4) {
            ((TLRPC.User)super.users.get(var4)).serializeToStream(var1);
         }

      }
   }

   public static class TL_photos_updateProfilePhoto extends TLObject {
      public static int constructor;
      public TLRPC.InputPhoto id;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.UserProfilePhoto.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.id.serializeToStream(var1);
      }
   }

   public static class TL_photos_uploadProfilePhoto extends TLObject {
      public static int constructor;
      public TLRPC.InputFile file;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_photos_photo.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.file.serializeToStream(var1);
      }
   }

   public static class TL_poll extends TLObject {
      public static int constructor;
      public ArrayList answers = new ArrayList();
      public boolean closed;
      public int flags;
      public long id;
      public String question;

      public static TLRPC.TL_poll TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_poll", var1));
            }
         } else {
            TLRPC.TL_poll var3 = new TLRPC.TL_poll();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.id = var1.readInt64(var2);
         this.flags = var1.readInt32(var2);
         int var3 = this.flags;
         int var4 = 0;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.closed = var5;
         this.question = var1.readString(var2);
         var3 = var1.readInt32(var2);
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.TL_pollAnswer var6 = TLRPC.TL_pollAnswer.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               this.answers.add(var6);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(this.id);
         int var2;
         if (this.closed) {
            var2 = this.flags | 1;
         } else {
            var2 = this.flags & -2;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         var1.writeString(this.question);
         var1.writeInt32(481674261);
         int var3 = this.answers.size();
         var1.writeInt32(var3);

         for(var2 = 0; var2 < var3; ++var2) {
            ((TLRPC.TL_pollAnswer)this.answers.get(var2)).serializeToStream(var1);
         }

      }
   }

   public static class TL_pollAnswer extends TLObject {
      public static int constructor;
      public byte[] option;
      public String text;

      public static TLRPC.TL_pollAnswer TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_pollAnswer", var1));
            }
         } else {
            TLRPC.TL_pollAnswer var3 = new TLRPC.TL_pollAnswer();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.text = var1.readString(var2);
         this.option = var1.readByteArray(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.text);
         var1.writeByteArray(this.option);
      }
   }

   public static class TL_pollAnswerVoters extends TLObject {
      public static int constructor;
      public boolean chosen;
      public int flags;
      public byte[] option;
      public int voters;

      public static TLRPC.TL_pollAnswerVoters TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_pollAnswerVoters", var1));
            }
         } else {
            TLRPC.TL_pollAnswerVoters var3 = new TLRPC.TL_pollAnswerVoters();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.flags = var1.readInt32(var2);
         int var3 = this.flags;
         boolean var4 = true;
         if ((var3 & 1) == 0) {
            var4 = false;
         }

         this.chosen = var4;
         this.option = var1.readByteArray(var2);
         this.voters = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.chosen) {
            var2 = this.flags | 1;
         } else {
            var2 = this.flags & -2;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         var1.writeByteArray(this.option);
         var1.writeInt32(this.voters);
      }
   }

   public static class TL_pollResults extends TLObject {
      public static int constructor;
      public int flags;
      public boolean min;
      public ArrayList results = new ArrayList();
      public int total_voters;

      public static TLRPC.TL_pollResults TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_pollResults", var1));
            }
         } else {
            TLRPC.TL_pollResults var3 = new TLRPC.TL_pollResults();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.flags = var1.readInt32(var2);
         int var3 = this.flags;
         int var4 = 0;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.min = var5;
         if ((this.flags & 2) != 0) {
            var3 = var1.readInt32(var2);
            if (var3 != 481674261) {
               if (!var2) {
                  return;
               }

               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }

            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.TL_pollAnswerVoters var6 = TLRPC.TL_pollAnswerVoters.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               this.results.add(var6);
            }
         }

         if ((this.flags & 4) != 0) {
            this.total_voters = var1.readInt32(var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.min) {
            var2 = this.flags | 1;
         } else {
            var2 = this.flags & -2;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         if ((this.flags & 2) != 0) {
            var1.writeInt32(481674261);
            int var3 = this.results.size();
            var1.writeInt32(var3);

            for(var2 = 0; var2 < var3; ++var2) {
               ((TLRPC.TL_pollAnswerVoters)this.results.get(var2)).serializeToStream(var1);
            }
         }

         if ((this.flags & 4) != 0) {
            var1.writeInt32(this.total_voters);
         }

      }
   }

   public static class TL_popularContact extends TLObject {
      public static int constructor;
      public long client_id;
      public int importers;

      public static TLRPC.TL_popularContact TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_popularContact", var1));
            }
         } else {
            TLRPC.TL_popularContact var3 = new TLRPC.TL_popularContact();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.client_id = var1.readInt64(var2);
         this.importers = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(this.client_id);
         var1.writeInt32(this.importers);
      }
   }

   public static class TL_postAddress extends TLObject {
      public static int constructor;
      public String city;
      public String country_iso2;
      public String post_code;
      public String state;
      public String street_line1;
      public String street_line2;

      public static TLRPC.TL_postAddress TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_postAddress", var1));
            }
         } else {
            TLRPC.TL_postAddress var3 = new TLRPC.TL_postAddress();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.street_line1 = var1.readString(var2);
         this.street_line2 = var1.readString(var2);
         this.city = var1.readString(var2);
         this.state = var1.readString(var2);
         this.country_iso2 = var1.readString(var2);
         this.post_code = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.street_line1);
         var1.writeString(this.street_line2);
         var1.writeString(this.city);
         var1.writeString(this.state);
         var1.writeString(this.country_iso2);
         var1.writeString(this.post_code);
      }
   }

   public static class TL_privacyKeyChatInvite extends TLRPC.PrivacyKey {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_privacyKeyForwards extends TLRPC.PrivacyKey {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_privacyKeyPhoneCall extends TLRPC.PrivacyKey {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_privacyKeyPhoneNumber extends TLRPC.PrivacyKey {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_privacyKeyPhoneP2P extends TLRPC.PrivacyKey {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_privacyKeyProfilePhoto extends TLRPC.PrivacyKey {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_privacyKeyStatusTimestamp extends TLRPC.PrivacyKey {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_privacyValueAllowAll extends TLRPC.PrivacyRule {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_privacyValueAllowChatParticipants extends TLRPC.PrivacyRule {
      public static int constructor;
      public ArrayList chats = new ArrayList();

      public void readParams(AbstractSerializedData var1, boolean var2) {
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               this.chats.add(var1.readInt32(var2));
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = this.chats.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            var1.writeInt32((Integer)this.chats.get(var3));
         }

      }
   }

   public static class TL_privacyValueAllowContacts extends TLRPC.PrivacyRule {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_privacyValueAllowUsers extends TLRPC.PrivacyRule {
      public static int constructor;
      public ArrayList users = new ArrayList();

      public void readParams(AbstractSerializedData var1, boolean var2) {
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               this.users.add(var1.readInt32(var2));
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = this.users.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            var1.writeInt32((Integer)this.users.get(var3));
         }

      }
   }

   public static class TL_privacyValueDisallowAll extends TLRPC.PrivacyRule {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_privacyValueDisallowChatParticipants extends TLRPC.PrivacyRule {
      public static int constructor;
      public ArrayList chats = new ArrayList();

      public void readParams(AbstractSerializedData var1, boolean var2) {
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               this.chats.add(var1.readInt32(var2));
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = this.chats.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            var1.writeInt32((Integer)this.chats.get(var3));
         }

      }
   }

   public static class TL_privacyValueDisallowContacts extends TLRPC.PrivacyRule {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_privacyValueDisallowUsers extends TLRPC.PrivacyRule {
      public static int constructor;
      public ArrayList users = new ArrayList();

      public void readParams(AbstractSerializedData var1, boolean var2) {
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               this.users.add(var1.readInt32(var2));
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = this.users.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            var1.writeInt32((Integer)this.users.get(var3));
         }

      }
   }

   public static class TL_receivedNotifyMessage extends TLObject {
      public static int constructor;
      public int flags;
      public int id;

      public static TLRPC.TL_receivedNotifyMessage TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_receivedNotifyMessage", var1));
            }
         } else {
            TLRPC.TL_receivedNotifyMessage var3 = new TLRPC.TL_receivedNotifyMessage();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.id = var1.readInt32(var2);
         this.flags = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.id);
         var1.writeInt32(this.flags);
      }
   }

   public static class TL_recentMeUrlChat extends TLRPC.RecentMeUrl {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.url = var1.readString(var2);
         super.chat_id = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(super.url);
         var1.writeInt32(super.chat_id);
      }
   }

   public static class TL_recentMeUrlChatInvite extends TLRPC.RecentMeUrl {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.url = var1.readString(var2);
         super.chat_invite = TLRPC.ChatInvite.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(super.url);
         super.chat_invite.serializeToStream(var1);
      }
   }

   public static class TL_recentMeUrlStickerSet extends TLRPC.RecentMeUrl {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.url = var1.readString(var2);
         super.set = TLRPC.StickerSetCovered.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(super.url);
         super.set.serializeToStream(var1);
      }
   }

   public static class TL_recentMeUrlUnknown extends TLRPC.RecentMeUrl {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.url = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(super.url);
      }
   }

   public static class TL_recentMeUrlUser extends TLRPC.RecentMeUrl {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.url = var1.readString(var2);
         super.user_id = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(super.url);
         var1.writeInt32(super.user_id);
      }
   }

   public static class TL_replyInlineMarkup extends TLRPC.ReplyMarkup {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.TL_keyboardButtonRow var5 = TLRPC.TL_keyboardButtonRow.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               super.rows.add(var5);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = super.rows.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.TL_keyboardButtonRow)super.rows.get(var3)).serializeToStream(var1);
         }

      }
   }

   public static class TL_replyKeyboardForceReply extends TLRPC.ReplyMarkup {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         boolean var4 = true;
         if ((var3 & 2) != 0) {
            var2 = true;
         } else {
            var2 = false;
         }

         super.single_use = var2;
         if ((super.flags & 4) != 0) {
            var2 = var4;
         } else {
            var2 = false;
         }

         super.selective = var2;
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.single_use) {
            var2 = super.flags | 2;
         } else {
            var2 = super.flags & -3;
         }

         super.flags = var2;
         if (super.selective) {
            var2 = super.flags | 4;
         } else {
            var2 = super.flags & -5;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
      }
   }

   public static class TL_replyKeyboardHide extends TLRPC.ReplyMarkup {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         if ((super.flags & 4) != 0) {
            var2 = true;
         } else {
            var2 = false;
         }

         super.selective = var2;
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.selective) {
            var2 = super.flags | 4;
         } else {
            var2 = super.flags & -5;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
      }
   }

   public static class TL_replyKeyboardMarkup extends TLRPC.ReplyMarkup {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         int var4 = 0;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.resize = var5;
         if ((super.flags & 2) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.single_use = var5;
         if ((super.flags & 4) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.selective = var5;
         var3 = var1.readInt32(var2);
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.TL_keyboardButtonRow var6 = TLRPC.TL_keyboardButtonRow.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               super.rows.add(var6);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.resize) {
            var2 = super.flags | 1;
         } else {
            var2 = super.flags & -2;
         }

         super.flags = var2;
         if (super.single_use) {
            var2 = super.flags | 2;
         } else {
            var2 = super.flags & -3;
         }

         super.flags = var2;
         if (super.selective) {
            var2 = super.flags | 4;
         } else {
            var2 = super.flags & -5;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt32(481674261);
         int var3 = super.rows.size();
         var1.writeInt32(var3);

         for(var2 = 0; var2 < var3; ++var2) {
            ((TLRPC.TL_keyboardButtonRow)super.rows.get(var2)).serializeToStream(var1);
         }

      }
   }

   public static class TL_secureCredentialsEncrypted extends TLObject {
      public static int constructor;
      public byte[] data;
      public byte[] hash;
      public byte[] secret;

      public static TLRPC.TL_secureCredentialsEncrypted TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_secureCredentialsEncrypted", var1));
            }
         } else {
            TLRPC.TL_secureCredentialsEncrypted var3 = new TLRPC.TL_secureCredentialsEncrypted();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.data = var1.readByteArray(var2);
         this.hash = var1.readByteArray(var2);
         this.secret = var1.readByteArray(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeByteArray(this.data);
         var1.writeByteArray(this.hash);
         var1.writeByteArray(this.secret);
      }
   }

   public static class TL_secureData extends TLObject {
      public static int constructor;
      public byte[] data;
      public byte[] data_hash;
      public byte[] secret;

      public static TLRPC.TL_secureData TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_secureData", var1));
            }
         } else {
            TLRPC.TL_secureData var3 = new TLRPC.TL_secureData();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.data = var1.readByteArray(var2);
         this.data_hash = var1.readByteArray(var2);
         this.secret = var1.readByteArray(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeByteArray(this.data);
         var1.writeByteArray(this.data_hash);
         var1.writeByteArray(this.secret);
      }
   }

   public static class TL_secureFile extends TLRPC.SecureFile {
      public static int constructor;
      public long access_hash;
      public int date;
      public int dc_id;
      public byte[] file_hash;
      public long id;
      public byte[] secret;
      public int size;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.id = var1.readInt64(var2);
         this.access_hash = var1.readInt64(var2);
         this.size = var1.readInt32(var2);
         this.dc_id = var1.readInt32(var2);
         this.date = var1.readInt32(var2);
         this.file_hash = var1.readByteArray(var2);
         this.secret = var1.readByteArray(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(this.id);
         var1.writeInt64(this.access_hash);
         var1.writeInt32(this.size);
         var1.writeInt32(this.dc_id);
         var1.writeInt32(this.date);
         var1.writeByteArray(this.file_hash);
         var1.writeByteArray(this.secret);
      }
   }

   public static class TL_secureFileEmpty extends TLRPC.SecureFile {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_securePasswordKdfAlgoPBKDF2HMACSHA512iter100000 extends TLRPC.SecurePasswordKdfAlgo {
      public static int constructor;
      public byte[] salt;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.salt = var1.readByteArray(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeByteArray(this.salt);
      }
   }

   public static class TL_securePasswordKdfAlgoSHA512 extends TLRPC.SecurePasswordKdfAlgo {
      public static int constructor;
      public byte[] salt;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.salt = var1.readByteArray(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeByteArray(this.salt);
      }
   }

   public static class TL_securePasswordKdfAlgoUnknown extends TLRPC.SecurePasswordKdfAlgo {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_securePlainEmail extends TLRPC.SecurePlainData {
      public static int constructor;
      public String email;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.email = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.email);
      }
   }

   public static class TL_securePlainPhone extends TLRPC.SecurePlainData {
      public static int constructor;
      public String phone;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.phone = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.phone);
      }
   }

   public static class TL_secureRequiredType extends TLRPC.SecureRequiredType {
      public static int constructor;
      public int flags;
      public boolean native_names;
      public boolean selfie_required;
      public boolean translation_required;
      public TLRPC.SecureValueType type;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.flags = var1.readInt32(var2);
         int var3 = this.flags;
         boolean var4 = true;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.native_names = var5;
         if ((this.flags & 2) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.selfie_required = var5;
         if ((this.flags & 4) != 0) {
            var5 = var4;
         } else {
            var5 = false;
         }

         this.translation_required = var5;
         this.type = TLRPC.SecureValueType.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.native_names) {
            var2 = this.flags | 1;
         } else {
            var2 = this.flags & -2;
         }

         this.flags = var2;
         if (this.selfie_required) {
            var2 = this.flags | 2;
         } else {
            var2 = this.flags & -3;
         }

         this.flags = var2;
         if (this.translation_required) {
            var2 = this.flags | 4;
         } else {
            var2 = this.flags & -5;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         this.type.serializeToStream(var1);
      }
   }

   public static class TL_secureRequiredTypeOneOf extends TLRPC.SecureRequiredType {
      public static int constructor;
      public ArrayList types = new ArrayList();

      public void readParams(AbstractSerializedData var1, boolean var2) {
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.SecureRequiredType var5 = TLRPC.SecureRequiredType.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               this.types.add(var5);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = this.types.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.SecureRequiredType)this.types.get(var3)).serializeToStream(var1);
         }

      }
   }

   public static class TL_secureSecretSettings extends TLObject {
      public static int constructor;
      public TLRPC.SecurePasswordKdfAlgo secure_algo;
      public byte[] secure_secret;
      public long secure_secret_id;

      public static TLRPC.TL_secureSecretSettings TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_secureSecretSettings", var1));
            }
         } else {
            TLRPC.TL_secureSecretSettings var3 = new TLRPC.TL_secureSecretSettings();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.secure_algo = TLRPC.SecurePasswordKdfAlgo.TLdeserialize(var1, var1.readInt32(var2), var2);
         this.secure_secret = var1.readByteArray(var2);
         this.secure_secret_id = var1.readInt64(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.secure_algo.serializeToStream(var1);
         var1.writeByteArray(this.secure_secret);
         var1.writeInt64(this.secure_secret_id);
      }
   }

   public static class TL_secureValue extends TLObject {
      public static int constructor;
      public TLRPC.TL_secureData data;
      public ArrayList files = new ArrayList();
      public int flags;
      public TLRPC.SecureFile front_side;
      public byte[] hash;
      public TLRPC.SecurePlainData plain_data;
      public TLRPC.SecureFile reverse_side;
      public TLRPC.SecureFile selfie;
      public ArrayList translation = new ArrayList();
      public TLRPC.SecureValueType type;

      public static TLRPC.TL_secureValue TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_secureValue", var1));
            }
         } else {
            TLRPC.TL_secureValue var3 = new TLRPC.TL_secureValue();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.flags = var1.readInt32(var2);
         this.type = TLRPC.SecureValueType.TLdeserialize(var1, var1.readInt32(var2), var2);
         if ((this.flags & 1) != 0) {
            this.data = TLRPC.TL_secureData.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         if ((this.flags & 2) != 0) {
            this.front_side = TLRPC.SecureFile.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         if ((this.flags & 4) != 0) {
            this.reverse_side = TLRPC.SecureFile.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         if ((this.flags & 8) != 0) {
            this.selfie = TLRPC.SecureFile.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         int var3 = this.flags;
         byte var4 = 0;
         int var5;
         TLRPC.SecureFile var6;
         if ((var3 & 64) != 0) {
            var3 = var1.readInt32(var2);
            if (var3 != 481674261) {
               if (!var2) {
                  return;
               }

               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }

            var5 = var1.readInt32(var2);

            for(var3 = 0; var3 < var5; ++var3) {
               var6 = TLRPC.SecureFile.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               this.translation.add(var6);
            }
         }

         if ((this.flags & 16) != 0) {
            var3 = var1.readInt32(var2);
            if (var3 != 481674261) {
               if (!var2) {
                  return;
               }

               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }

            var5 = var1.readInt32(var2);

            for(var3 = var4; var3 < var5; ++var3) {
               var6 = TLRPC.SecureFile.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               this.files.add(var6);
            }
         }

         if ((this.flags & 32) != 0) {
            this.plain_data = TLRPC.SecurePlainData.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         this.hash = var1.readByteArray(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.flags);
         this.type.serializeToStream(var1);
         if ((this.flags & 1) != 0) {
            this.data.serializeToStream(var1);
         }

         if ((this.flags & 2) != 0) {
            this.front_side.serializeToStream(var1);
         }

         if ((this.flags & 4) != 0) {
            this.reverse_side.serializeToStream(var1);
         }

         if ((this.flags & 8) != 0) {
            this.selfie.serializeToStream(var1);
         }

         int var2 = this.flags;
         byte var3 = 0;
         int var4;
         if ((var2 & 64) != 0) {
            var1.writeInt32(481674261);
            var4 = this.translation.size();
            var1.writeInt32(var4);

            for(var2 = 0; var2 < var4; ++var2) {
               ((TLRPC.SecureFile)this.translation.get(var2)).serializeToStream(var1);
            }
         }

         if ((this.flags & 16) != 0) {
            var1.writeInt32(481674261);
            var4 = this.files.size();
            var1.writeInt32(var4);

            for(var2 = var3; var2 < var4; ++var2) {
               ((TLRPC.SecureFile)this.files.get(var2)).serializeToStream(var1);
            }
         }

         if ((this.flags & 32) != 0) {
            this.plain_data.serializeToStream(var1);
         }

         var1.writeByteArray(this.hash);
      }
   }

   public static class TL_secureValueError extends TLRPC.SecureValueError {
      public static int constructor;
      public byte[] hash;
      public String text;
      public TLRPC.SecureValueType type;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.type = TLRPC.SecureValueType.TLdeserialize(var1, var1.readInt32(var2), var2);
         this.hash = var1.readByteArray(var2);
         this.text = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.type.serializeToStream(var1);
         var1.writeByteArray(this.hash);
         var1.writeString(this.text);
      }
   }

   public static class TL_secureValueErrorData extends TLRPC.SecureValueError {
      public static int constructor;
      public byte[] data_hash;
      public String field;
      public String text;
      public TLRPC.SecureValueType type;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.type = TLRPC.SecureValueType.TLdeserialize(var1, var1.readInt32(var2), var2);
         this.data_hash = var1.readByteArray(var2);
         this.field = var1.readString(var2);
         this.text = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.type.serializeToStream(var1);
         var1.writeByteArray(this.data_hash);
         var1.writeString(this.field);
         var1.writeString(this.text);
      }
   }

   public static class TL_secureValueErrorFile extends TLRPC.SecureValueError {
      public static int constructor;
      public byte[] file_hash;
      public String text;
      public TLRPC.SecureValueType type;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.type = TLRPC.SecureValueType.TLdeserialize(var1, var1.readInt32(var2), var2);
         this.file_hash = var1.readByteArray(var2);
         this.text = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.type.serializeToStream(var1);
         var1.writeByteArray(this.file_hash);
         var1.writeString(this.text);
      }
   }

   public static class TL_secureValueErrorFiles extends TLRPC.SecureValueError {
      public static int constructor;
      public ArrayList file_hash = new ArrayList();
      public String text;
      public TLRPC.SecureValueType type;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.type = TLRPC.SecureValueType.TLdeserialize(var1, var1.readInt32(var2), var2);
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               this.file_hash.add(var1.readByteArray(var2));
            }

            this.text = var1.readString(var2);
         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.type.serializeToStream(var1);
         var1.writeInt32(481674261);
         int var2 = this.file_hash.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            var1.writeByteArray((byte[])this.file_hash.get(var3));
         }

         var1.writeString(this.text);
      }
   }

   public static class TL_secureValueErrorFrontSide extends TLRPC.SecureValueError {
      public static int constructor;
      public byte[] file_hash;
      public String text;
      public TLRPC.SecureValueType type;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.type = TLRPC.SecureValueType.TLdeserialize(var1, var1.readInt32(var2), var2);
         this.file_hash = var1.readByteArray(var2);
         this.text = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.type.serializeToStream(var1);
         var1.writeByteArray(this.file_hash);
         var1.writeString(this.text);
      }
   }

   public static class TL_secureValueErrorReverseSide extends TLRPC.SecureValueError {
      public static int constructor;
      public byte[] file_hash;
      public String text;
      public TLRPC.SecureValueType type;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.type = TLRPC.SecureValueType.TLdeserialize(var1, var1.readInt32(var2), var2);
         this.file_hash = var1.readByteArray(var2);
         this.text = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.type.serializeToStream(var1);
         var1.writeByteArray(this.file_hash);
         var1.writeString(this.text);
      }
   }

   public static class TL_secureValueErrorSelfie extends TLRPC.SecureValueError {
      public static int constructor;
      public byte[] file_hash;
      public String text;
      public TLRPC.SecureValueType type;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.type = TLRPC.SecureValueType.TLdeserialize(var1, var1.readInt32(var2), var2);
         this.file_hash = var1.readByteArray(var2);
         this.text = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.type.serializeToStream(var1);
         var1.writeByteArray(this.file_hash);
         var1.writeString(this.text);
      }
   }

   public static class TL_secureValueErrorTranslationFile extends TLRPC.SecureValueError {
      public static int constructor;
      public byte[] file_hash;
      public String text;
      public TLRPC.SecureValueType type;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.type = TLRPC.SecureValueType.TLdeserialize(var1, var1.readInt32(var2), var2);
         this.file_hash = var1.readByteArray(var2);
         this.text = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.type.serializeToStream(var1);
         var1.writeByteArray(this.file_hash);
         var1.writeString(this.text);
      }
   }

   public static class TL_secureValueErrorTranslationFiles extends TLRPC.SecureValueError {
      public static int constructor;
      public ArrayList file_hash = new ArrayList();
      public String text;
      public TLRPC.SecureValueType type;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.type = TLRPC.SecureValueType.TLdeserialize(var1, var1.readInt32(var2), var2);
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               this.file_hash.add(var1.readByteArray(var2));
            }

            this.text = var1.readString(var2);
         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.type.serializeToStream(var1);
         var1.writeInt32(481674261);
         int var2 = this.file_hash.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            var1.writeByteArray((byte[])this.file_hash.get(var3));
         }

         var1.writeString(this.text);
      }
   }

   public static class TL_secureValueHash extends TLObject {
      public static int constructor;
      public byte[] hash;
      public TLRPC.SecureValueType type;

      public static TLRPC.TL_secureValueHash TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_secureValueHash", var1));
            }
         } else {
            TLRPC.TL_secureValueHash var3 = new TLRPC.TL_secureValueHash();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.type = TLRPC.SecureValueType.TLdeserialize(var1, var1.readInt32(var2), var2);
         this.hash = var1.readByteArray(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.type.serializeToStream(var1);
         var1.writeByteArray(this.hash);
      }
   }

   public static class TL_secureValueTypeAddress extends TLRPC.SecureValueType {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_secureValueTypeBankStatement extends TLRPC.SecureValueType {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_secureValueTypeDriverLicense extends TLRPC.SecureValueType {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_secureValueTypeEmail extends TLRPC.SecureValueType {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_secureValueTypeIdentityCard extends TLRPC.SecureValueType {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_secureValueTypeInternalPassport extends TLRPC.SecureValueType {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_secureValueTypePassport extends TLRPC.SecureValueType {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_secureValueTypePassportRegistration extends TLRPC.SecureValueType {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_secureValueTypePersonalDetails extends TLRPC.SecureValueType {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_secureValueTypePhone extends TLRPC.SecureValueType {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_secureValueTypeRentalAgreement extends TLRPC.SecureValueType {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_secureValueTypeTemporaryRegistration extends TLRPC.SecureValueType {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_secureValueTypeUtilityBill extends TLRPC.SecureValueType {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_sendMessageCancelAction extends TLRPC.SendMessageAction {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_sendMessageChooseContactAction extends TLRPC.SendMessageAction {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_sendMessageGamePlayAction extends TLRPC.SendMessageAction {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_sendMessageGeoLocationAction extends TLRPC.SendMessageAction {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_sendMessageRecordAudioAction extends TLRPC.SendMessageAction {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_sendMessageRecordRoundAction extends TLRPC.SendMessageAction {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_sendMessageRecordVideoAction extends TLRPC.SendMessageAction {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_sendMessageTypingAction extends TLRPC.SendMessageAction {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_sendMessageUploadAudioAction extends TLRPC.SendMessageAction {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.progress = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.progress);
      }
   }

   public static class TL_sendMessageUploadAudioAction_old extends TLRPC.TL_sendMessageUploadAudioAction {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_sendMessageUploadDocumentAction extends TLRPC.SendMessageAction {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.progress = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.progress);
      }
   }

   public static class TL_sendMessageUploadDocumentAction_old extends TLRPC.TL_sendMessageUploadDocumentAction {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_sendMessageUploadPhotoAction extends TLRPC.SendMessageAction {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.progress = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.progress);
      }
   }

   public static class TL_sendMessageUploadPhotoAction_old extends TLRPC.TL_sendMessageUploadPhotoAction {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_sendMessageUploadRoundAction extends TLRPC.SendMessageAction {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.progress = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.progress);
      }
   }

   public static class TL_sendMessageUploadVideoAction extends TLRPC.SendMessageAction {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.progress = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.progress);
      }
   }

   public static class TL_sendMessageUploadVideoAction_old extends TLRPC.TL_sendMessageUploadVideoAction {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_shippingOption extends TLObject {
      public static int constructor;
      public String id;
      public ArrayList prices = new ArrayList();
      public String title;

      public static TLRPC.TL_shippingOption TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_shippingOption", var1));
            }
         } else {
            TLRPC.TL_shippingOption var3 = new TLRPC.TL_shippingOption();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.id = var1.readString(var2);
         this.title = var1.readString(var2);
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.TL_labeledPrice var5 = TLRPC.TL_labeledPrice.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               this.prices.add(var5);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.id);
         var1.writeString(this.title);
         var1.writeInt32(481674261);
         int var2 = this.prices.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.TL_labeledPrice)this.prices.get(var3)).serializeToStream(var1);
         }

      }
   }

   public static class TL_statsURL extends TLObject {
      public static int constructor;
      public String url;

      public static TLRPC.TL_statsURL TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_statsURL", var1));
            }
         } else {
            TLRPC.TL_statsURL var3 = new TLRPC.TL_statsURL();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.url = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.url);
      }
   }

   public static class TL_stickerPack extends TLObject {
      public static int constructor;
      public ArrayList documents = new ArrayList();
      public String emoticon;

      public static TLRPC.TL_stickerPack TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_stickerPack", var1));
            }
         } else {
            TLRPC.TL_stickerPack var3 = new TLRPC.TL_stickerPack();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.emoticon = var1.readString(var2);
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               this.documents.add(var1.readInt64(var2));
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.emoticon);
         var1.writeInt32(481674261);
         int var2 = this.documents.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            var1.writeInt64((Long)this.documents.get(var3));
         }

      }
   }

   public static class TL_stickerSet extends TLRPC.StickerSet {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         boolean var4 = false;
         boolean var5;
         if ((var3 & 2) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.archived = var5;
         if ((super.flags & 4) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.official = var5;
         var5 = var4;
         if ((super.flags & 8) != 0) {
            var5 = true;
         }

         super.masks = var5;
         if ((super.flags & 1) != 0) {
            super.installed_date = var1.readInt32(var2);
         }

         super.id = var1.readInt64(var2);
         super.access_hash = var1.readInt64(var2);
         super.title = var1.readString(var2);
         super.short_name = var1.readString(var2);
         if ((super.flags & 16) != 0) {
            super.thumb = TLRPC.PhotoSize.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         if ((super.flags & 16) != 0) {
            super.thumb_dc_id = var1.readInt32(var2);
         }

         super.count = var1.readInt32(var2);
         super.hash = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.archived) {
            var2 = super.flags | 2;
         } else {
            var2 = super.flags & -3;
         }

         super.flags = var2;
         if (super.official) {
            var2 = super.flags | 4;
         } else {
            var2 = super.flags & -5;
         }

         super.flags = var2;
         if (super.masks) {
            var2 = super.flags | 8;
         } else {
            var2 = super.flags & -9;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         if ((super.flags & 1) != 0) {
            var1.writeInt32(super.installed_date);
         }

         var1.writeInt64(super.id);
         var1.writeInt64(super.access_hash);
         var1.writeString(super.title);
         var1.writeString(super.short_name);
         if ((super.flags & 16) != 0) {
            super.thumb.serializeToStream(var1);
         }

         if ((super.flags & 16) != 0) {
            var1.writeInt32(super.thumb_dc_id);
         }

         var1.writeInt32(super.count);
         var1.writeInt32(super.hash);
      }
   }

   public static class TL_stickerSetCovered extends TLRPC.StickerSetCovered {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.set = TLRPC.StickerSet.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.cover = TLRPC.Document.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         super.set.serializeToStream(var1);
         super.cover.serializeToStream(var1);
      }
   }

   public static class TL_stickerSetMultiCovered extends TLRPC.StickerSetCovered {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.set = TLRPC.StickerSet.TLdeserialize(var1, var1.readInt32(var2), var2);
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.Document var5 = TLRPC.Document.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               super.covers.add(var5);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         super.set.serializeToStream(var1);
         var1.writeInt32(481674261);
         int var2 = super.covers.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.Document)super.covers.get(var3)).serializeToStream(var1);
         }

      }
   }

   public static class TL_stickerSet_layer75 extends TLRPC.TL_stickerSet {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         boolean var4 = true;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.installed = var5;
         if ((super.flags & 2) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.archived = var5;
         if ((super.flags & 4) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.official = var5;
         if ((super.flags & 8) != 0) {
            var5 = var4;
         } else {
            var5 = false;
         }

         super.masks = var5;
         super.id = var1.readInt64(var2);
         super.access_hash = var1.readInt64(var2);
         super.title = var1.readString(var2);
         super.short_name = var1.readString(var2);
         super.count = var1.readInt32(var2);
         super.hash = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.installed) {
            var2 = super.flags | 1;
         } else {
            var2 = super.flags & -2;
         }

         super.flags = var2;
         if (super.archived) {
            var2 = super.flags | 2;
         } else {
            var2 = super.flags & -3;
         }

         super.flags = var2;
         if (super.official) {
            var2 = super.flags | 4;
         } else {
            var2 = super.flags & -5;
         }

         super.flags = var2;
         if (super.masks) {
            var2 = super.flags | 8;
         } else {
            var2 = super.flags & -9;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt64(super.id);
         var1.writeInt64(super.access_hash);
         var1.writeString(super.title);
         var1.writeString(super.short_name);
         var1.writeInt32(super.count);
         var1.writeInt32(super.hash);
      }
   }

   public static class TL_stickerSet_layer96 extends TLRPC.TL_stickerSet {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         boolean var4 = false;
         boolean var5;
         if ((var3 & 2) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.archived = var5;
         if ((super.flags & 4) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.official = var5;
         var5 = var4;
         if ((super.flags & 8) != 0) {
            var5 = true;
         }

         super.masks = var5;
         if ((super.flags & 1) != 0) {
            super.installed_date = var1.readInt32(var2);
         }

         super.id = var1.readInt64(var2);
         super.access_hash = var1.readInt64(var2);
         super.title = var1.readString(var2);
         super.short_name = var1.readString(var2);
         super.count = var1.readInt32(var2);
         super.hash = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.archived) {
            var2 = super.flags | 2;
         } else {
            var2 = super.flags & -3;
         }

         super.flags = var2;
         if (super.official) {
            var2 = super.flags | 4;
         } else {
            var2 = super.flags & -5;
         }

         super.flags = var2;
         if (super.masks) {
            var2 = super.flags | 8;
         } else {
            var2 = super.flags & -9;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         if ((super.flags & 1) != 0) {
            var1.writeInt32(super.installed_date);
         }

         var1.writeInt64(super.id);
         var1.writeInt64(super.access_hash);
         var1.writeString(super.title);
         var1.writeString(super.short_name);
         var1.writeInt32(super.count);
         var1.writeInt32(super.hash);
      }
   }

   public static class TL_stickerSet_layer97 extends TLRPC.TL_stickerSet {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         boolean var4 = false;
         boolean var5;
         if ((var3 & 2) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.archived = var5;
         if ((super.flags & 4) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.official = var5;
         var5 = var4;
         if ((super.flags & 8) != 0) {
            var5 = true;
         }

         super.masks = var5;
         if ((super.flags & 1) != 0) {
            super.installed_date = var1.readInt32(var2);
         }

         super.id = var1.readInt64(var2);
         super.access_hash = var1.readInt64(var2);
         super.title = var1.readString(var2);
         super.short_name = var1.readString(var2);
         if ((super.flags & 16) != 0) {
            super.thumb = TLRPC.PhotoSize.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         super.count = var1.readInt32(var2);
         super.hash = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.archived) {
            var2 = super.flags | 2;
         } else {
            var2 = super.flags & -3;
         }

         super.flags = var2;
         if (super.official) {
            var2 = super.flags | 4;
         } else {
            var2 = super.flags & -5;
         }

         super.flags = var2;
         if (super.masks) {
            var2 = super.flags | 8;
         } else {
            var2 = super.flags & -9;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         if ((super.flags & 1) != 0) {
            var1.writeInt32(super.installed_date);
         }

         var1.writeInt64(super.id);
         var1.writeInt64(super.access_hash);
         var1.writeString(super.title);
         var1.writeString(super.short_name);
         if ((super.flags & 16) != 0) {
            super.thumb.serializeToStream(var1);
         }

         var1.writeInt32(super.count);
         var1.writeInt32(super.hash);
      }
   }

   public static class TL_stickerSet_old extends TLRPC.TL_stickerSet {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt64(var2);
         super.access_hash = var1.readInt64(var2);
         super.title = var1.readString(var2);
         super.short_name = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(super.id);
         var1.writeInt64(super.access_hash);
         var1.writeString(super.title);
         var1.writeString(super.short_name);
      }
   }

   public static class TL_storage_fileGif extends TLRPC.storage_FileType {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_storage_fileJpeg extends TLRPC.storage_FileType {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_storage_fileMov extends TLRPC.storage_FileType {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_storage_fileMp3 extends TLRPC.storage_FileType {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_storage_fileMp4 extends TLRPC.storage_FileType {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_storage_filePartial extends TLRPC.storage_FileType {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_storage_filePdf extends TLRPC.storage_FileType {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_storage_filePng extends TLRPC.storage_FileType {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_storage_fileUnknown extends TLRPC.storage_FileType {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_storage_fileWebp extends TLRPC.storage_FileType {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_textAnchor extends TLRPC.RichText {
      public static int constructor;
      public String name;
      public TLRPC.RichText text;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.text = TLRPC.RichText.TLdeserialize(var1, var1.readInt32(var2), var2);
         this.name = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.text.serializeToStream(var1);
         var1.writeString(this.name);
      }
   }

   public static class TL_textBold extends TLRPC.RichText {
      public static int constructor;
      public TLRPC.RichText text;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.text = TLRPC.RichText.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.text.serializeToStream(var1);
      }
   }

   public static class TL_textConcat extends TLRPC.RichText {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.RichText var5 = TLRPC.RichText.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               super.texts.add(var5);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = super.texts.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.RichText)super.texts.get(var3)).serializeToStream(var1);
         }

      }
   }

   public static class TL_textEmail extends TLRPC.RichText {
      public static int constructor;
      public TLRPC.RichText text;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.text = TLRPC.RichText.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.email = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.text.serializeToStream(var1);
         var1.writeString(super.email);
      }
   }

   public static class TL_textEmpty extends TLRPC.RichText {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_textFixed extends TLRPC.RichText {
      public static int constructor;
      public TLRPC.RichText text;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.text = TLRPC.RichText.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.text.serializeToStream(var1);
      }
   }

   public static class TL_textImage extends TLRPC.RichText {
      public static int constructor;
      public long document_id;
      public int h;
      public int w;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.document_id = var1.readInt64(var2);
         this.w = var1.readInt32(var2);
         this.h = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(this.document_id);
         var1.writeInt32(this.w);
         var1.writeInt32(this.h);
      }
   }

   public static class TL_textItalic extends TLRPC.RichText {
      public static int constructor;
      public TLRPC.RichText text;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.text = TLRPC.RichText.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.text.serializeToStream(var1);
      }
   }

   public static class TL_textMarked extends TLRPC.RichText {
      public static int constructor;
      public TLRPC.RichText text;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.text = TLRPC.RichText.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.text.serializeToStream(var1);
      }
   }

   public static class TL_textPhone extends TLRPC.RichText {
      public static int constructor;
      public String phone;
      public TLRPC.RichText text;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.text = TLRPC.RichText.TLdeserialize(var1, var1.readInt32(var2), var2);
         this.phone = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.text.serializeToStream(var1);
         var1.writeString(this.phone);
      }
   }

   public static class TL_textPlain extends TLRPC.RichText {
      public static int constructor;
      public String text;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.text = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.text);
      }
   }

   public static class TL_textStrike extends TLRPC.RichText {
      public static int constructor;
      public TLRPC.RichText text;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.text = TLRPC.RichText.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.text.serializeToStream(var1);
      }
   }

   public static class TL_textSubscript extends TLRPC.RichText {
      public static int constructor;
      public TLRPC.RichText text;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.text = TLRPC.RichText.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.text.serializeToStream(var1);
      }
   }

   public static class TL_textSuperscript extends TLRPC.RichText {
      public static int constructor;
      public TLRPC.RichText text;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.text = TLRPC.RichText.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.text.serializeToStream(var1);
      }
   }

   public static class TL_textUnderline extends TLRPC.RichText {
      public static int constructor;
      public TLRPC.RichText text;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.text = TLRPC.RichText.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.text.serializeToStream(var1);
      }
   }

   public static class TL_textUrl extends TLRPC.RichText {
      public static int constructor;
      public TLRPC.RichText text;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.text = TLRPC.RichText.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.url = var1.readString(var2);
         super.webpage_id = var1.readInt64(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.text.serializeToStream(var1);
         var1.writeString(super.url);
         var1.writeInt64(super.webpage_id);
      }
   }

   public static class TL_topPeer extends TLObject {
      public static int constructor;
      public TLRPC.Peer peer;
      public double rating;

      public static TLRPC.TL_topPeer TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_topPeer", var1));
            }
         } else {
            TLRPC.TL_topPeer var3 = new TLRPC.TL_topPeer();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.peer = TLRPC.Peer.TLdeserialize(var1, var1.readInt32(var2), var2);
         this.rating = var1.readDouble(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.peer.serializeToStream(var1);
         var1.writeDouble(this.rating);
      }
   }

   public static class TL_topPeerCategoryBotsInline extends TLRPC.TopPeerCategory {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_topPeerCategoryBotsPM extends TLRPC.TopPeerCategory {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_topPeerCategoryChannels extends TLRPC.TopPeerCategory {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_topPeerCategoryCorrespondents extends TLRPC.TopPeerCategory {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_topPeerCategoryForwardChats extends TLRPC.TopPeerCategory {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_topPeerCategoryForwardUsers extends TLRPC.TopPeerCategory {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_topPeerCategoryGroups extends TLRPC.TopPeerCategory {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_topPeerCategoryPeers extends TLObject {
      public static int constructor;
      public TLRPC.TopPeerCategory category;
      public int count;
      public ArrayList peers = new ArrayList();

      public static TLRPC.TL_topPeerCategoryPeers TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_topPeerCategoryPeers", var1));
            }
         } else {
            TLRPC.TL_topPeerCategoryPeers var3 = new TLRPC.TL_topPeerCategoryPeers();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.category = TLRPC.TopPeerCategory.TLdeserialize(var1, var1.readInt32(var2), var2);
         this.count = var1.readInt32(var2);
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.TL_topPeer var5 = TLRPC.TL_topPeer.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               this.peers.add(var5);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.category.serializeToStream(var1);
         var1.writeInt32(this.count);
         var1.writeInt32(481674261);
         int var2 = this.peers.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.TL_topPeer)this.peers.get(var3)).serializeToStream(var1);
         }

      }
   }

   public static class TL_topPeerCategoryPhoneCalls extends TLRPC.TopPeerCategory {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_updateChannel extends TLRPC.Update {
      public static int constructor;
      public int channel_id;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.channel_id = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.channel_id);
      }
   }

   public static class TL_updateChannelAvailableMessages extends TLRPC.Update {
      public static int constructor;
      public int available_min_id;
      public int channel_id;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.channel_id = var1.readInt32(var2);
         this.available_min_id = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.channel_id);
         var1.writeInt32(this.available_min_id);
      }
   }

   public static class TL_updateChannelMessageViews extends TLRPC.Update {
      public static int constructor;
      public int channel_id;
      public int id;
      public int views;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.channel_id = var1.readInt32(var2);
         this.id = var1.readInt32(var2);
         this.views = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.channel_id);
         var1.writeInt32(this.id);
         var1.writeInt32(this.views);
      }
   }

   public static class TL_updateChannelPinnedMessage extends TLRPC.Update {
      public static int constructor;
      public int channel_id;
      public int id;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.channel_id = var1.readInt32(var2);
         this.id = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.channel_id);
         var1.writeInt32(this.id);
      }
   }

   public static class TL_updateChannelReadMessagesContents extends TLRPC.Update {
      public static int constructor;
      public int channel_id;
      public ArrayList messages = new ArrayList();

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.channel_id = var1.readInt32(var2);
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               this.messages.add(var1.readInt32(var2));
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.channel_id);
         var1.writeInt32(481674261);
         int var2 = this.messages.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            var1.writeInt32((Integer)this.messages.get(var3));
         }

      }
   }

   public static class TL_updateChannelTooLong extends TLRPC.Update {
      public static int constructor;
      public int channel_id;
      public int flags;
      public int pts;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.flags = var1.readInt32(var2);
         this.channel_id = var1.readInt32(var2);
         if ((this.flags & 1) != 0) {
            this.pts = var1.readInt32(var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.flags);
         var1.writeInt32(this.channel_id);
         if ((this.flags & 1) != 0) {
            var1.writeInt32(this.pts);
         }

      }
   }

   public static class TL_updateChannelWebPage extends TLRPC.Update {
      public static int constructor;
      public int channel_id;
      public int pts;
      public int pts_count;
      public TLRPC.WebPage webpage;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.channel_id = var1.readInt32(var2);
         this.webpage = TLRPC.WebPage.TLdeserialize(var1, var1.readInt32(var2), var2);
         this.pts = var1.readInt32(var2);
         this.pts_count = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.channel_id);
         this.webpage.serializeToStream(var1);
         var1.writeInt32(this.pts);
         var1.writeInt32(this.pts_count);
      }
   }

   public static class TL_updateChatDefaultBannedRights extends TLRPC.Update {
      public static int constructor;
      public TLRPC.TL_chatBannedRights default_banned_rights;
      public TLRPC.Peer peer;
      public int version;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.peer = TLRPC.Peer.TLdeserialize(var1, var1.readInt32(var2), var2);
         this.default_banned_rights = TLRPC.TL_chatBannedRights.TLdeserialize(var1, var1.readInt32(var2), var2);
         this.version = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.peer.serializeToStream(var1);
         this.default_banned_rights.serializeToStream(var1);
         var1.writeInt32(this.version);
      }
   }

   public static class TL_updateChatParticipantAdd extends TLRPC.Update {
      public static int constructor;
      public int chat_id;
      public int date;
      public int inviter_id;
      public int user_id;
      public int version;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.chat_id = var1.readInt32(var2);
         this.user_id = var1.readInt32(var2);
         this.inviter_id = var1.readInt32(var2);
         this.date = var1.readInt32(var2);
         this.version = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.chat_id);
         var1.writeInt32(this.user_id);
         var1.writeInt32(this.inviter_id);
         var1.writeInt32(this.date);
         var1.writeInt32(this.version);
      }
   }

   public static class TL_updateChatParticipantAdmin extends TLRPC.Update {
      public static int constructor;
      public int chat_id;
      public boolean is_admin;
      public int user_id;
      public int version;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.chat_id = var1.readInt32(var2);
         this.user_id = var1.readInt32(var2);
         this.is_admin = var1.readBool(var2);
         this.version = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.chat_id);
         var1.writeInt32(this.user_id);
         var1.writeBool(this.is_admin);
         var1.writeInt32(this.version);
      }
   }

   public static class TL_updateChatParticipantDelete extends TLRPC.Update {
      public static int constructor;
      public int chat_id;
      public int user_id;
      public int version;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.chat_id = var1.readInt32(var2);
         this.user_id = var1.readInt32(var2);
         this.version = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.chat_id);
         var1.writeInt32(this.user_id);
         var1.writeInt32(this.version);
      }
   }

   public static class TL_updateChatParticipants extends TLRPC.Update {
      public static int constructor;
      public TLRPC.ChatParticipants participants;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.participants = TLRPC.ChatParticipants.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.participants.serializeToStream(var1);
      }
   }

   public static class TL_updateChatPinnedMessage extends TLRPC.Update {
      public static int constructor;
      public int chat_id;
      public int id;
      public int version;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.chat_id = var1.readInt32(var2);
         this.id = var1.readInt32(var2);
         this.version = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.chat_id);
         var1.writeInt32(this.id);
         var1.writeInt32(this.version);
      }
   }

   public static class TL_updateChatUserTyping extends TLRPC.Update {
      public static int constructor;
      public TLRPC.SendMessageAction action;
      public int chat_id;
      public int user_id;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.chat_id = var1.readInt32(var2);
         this.user_id = var1.readInt32(var2);
         this.action = TLRPC.SendMessageAction.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.chat_id);
         var1.writeInt32(this.user_id);
         this.action.serializeToStream(var1);
      }
   }

   public static class TL_updateConfig extends TLRPC.Update {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_updateContactLink extends TLRPC.Update {
      public static int constructor;
      public TLRPC.ContactLink foreign_link;
      public TLRPC.ContactLink my_link;
      public int user_id;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.user_id = var1.readInt32(var2);
         this.my_link = TLRPC.ContactLink.TLdeserialize(var1, var1.readInt32(var2), var2);
         this.foreign_link = TLRPC.ContactLink.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.user_id);
         this.my_link.serializeToStream(var1);
         this.foreign_link.serializeToStream(var1);
      }
   }

   public static class TL_updateContactsReset extends TLRPC.Update {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_updateDcOptions extends TLRPC.Update {
      public static int constructor;
      public ArrayList dc_options = new ArrayList();

      public void readParams(AbstractSerializedData var1, boolean var2) {
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.TL_dcOption var5 = TLRPC.TL_dcOption.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               this.dc_options.add(var5);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = this.dc_options.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.TL_dcOption)this.dc_options.get(var3)).serializeToStream(var1);
         }

      }
   }

   public static class TL_updateDeleteChannelMessages extends TLRPC.Update {
      public static int constructor;
      public int channel_id;
      public ArrayList messages = new ArrayList();
      public int pts;
      public int pts_count;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.channel_id = var1.readInt32(var2);
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               this.messages.add(var1.readInt32(var2));
            }

            this.pts = var1.readInt32(var2);
            this.pts_count = var1.readInt32(var2);
         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.channel_id);
         var1.writeInt32(481674261);
         int var2 = this.messages.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            var1.writeInt32((Integer)this.messages.get(var3));
         }

         var1.writeInt32(this.pts);
         var1.writeInt32(this.pts_count);
      }
   }

   public static class TL_updateDeleteMessages extends TLRPC.Update {
      public static int constructor;
      public ArrayList messages = new ArrayList();
      public int pts;
      public int pts_count;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               this.messages.add(var1.readInt32(var2));
            }

            this.pts = var1.readInt32(var2);
            this.pts_count = var1.readInt32(var2);
         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = this.messages.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            var1.writeInt32((Integer)this.messages.get(var3));
         }

         var1.writeInt32(this.pts);
         var1.writeInt32(this.pts_count);
      }
   }

   public static class TL_updateDialogPinned extends TLRPC.Update {
      public static int constructor;
      public int flags;
      public int folder_id;
      public TLRPC.DialogPeer peer;
      public boolean pinned;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.flags = var1.readInt32(var2);
         int var3 = this.flags;
         boolean var4 = true;
         if ((var3 & 1) == 0) {
            var4 = false;
         }

         this.pinned = var4;
         if ((this.flags & 2) != 0) {
            this.folder_id = var1.readInt32(var2);
         }

         this.peer = TLRPC.DialogPeer.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.pinned) {
            var2 = this.flags | 1;
         } else {
            var2 = this.flags & -2;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         if ((this.flags & 2) != 0) {
            var1.writeInt32(this.folder_id);
         }

         this.peer.serializeToStream(var1);
      }
   }

   public static class TL_updateDialogUnreadMark extends TLRPC.Update {
      public static int constructor;
      public int flags;
      public TLRPC.DialogPeer peer;
      public boolean unread;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.flags = var1.readInt32(var2);
         int var3 = this.flags;
         boolean var4 = true;
         if ((var3 & 1) == 0) {
            var4 = false;
         }

         this.unread = var4;
         this.peer = TLRPC.DialogPeer.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.unread) {
            var2 = this.flags | 1;
         } else {
            var2 = this.flags & -2;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         this.peer.serializeToStream(var1);
      }
   }

   public static class TL_updateDraftMessage extends TLRPC.Update {
      public static int constructor;
      public TLRPC.DraftMessage draft;
      public TLRPC.Peer peer;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.peer = TLRPC.Peer.TLdeserialize(var1, var1.readInt32(var2), var2);
         this.draft = TLRPC.DraftMessage.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.peer.serializeToStream(var1);
         this.draft.serializeToStream(var1);
      }
   }

   public static class TL_updateEditChannelMessage extends TLRPC.Update {
      public static int constructor;
      public TLRPC.Message message;
      public int pts;
      public int pts_count;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.message = TLRPC.Message.TLdeserialize(var1, var1.readInt32(var2), var2);
         this.pts = var1.readInt32(var2);
         this.pts_count = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.message.serializeToStream(var1);
         var1.writeInt32(this.pts);
         var1.writeInt32(this.pts_count);
      }
   }

   public static class TL_updateEditMessage extends TLRPC.Update {
      public static int constructor;
      public TLRPC.Message message;
      public int pts;
      public int pts_count;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.message = TLRPC.Message.TLdeserialize(var1, var1.readInt32(var2), var2);
         this.pts = var1.readInt32(var2);
         this.pts_count = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.message.serializeToStream(var1);
         var1.writeInt32(this.pts);
         var1.writeInt32(this.pts_count);
      }
   }

   public static class TL_updateEncryptedChatTyping extends TLRPC.Update {
      public static int constructor;
      public int chat_id;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.chat_id = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.chat_id);
      }
   }

   public static class TL_updateEncryptedMessagesRead extends TLRPC.Update {
      public static int constructor;
      public int chat_id;
      public int date;
      public int max_date;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.chat_id = var1.readInt32(var2);
         this.max_date = var1.readInt32(var2);
         this.date = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.chat_id);
         var1.writeInt32(this.max_date);
         var1.writeInt32(this.date);
      }
   }

   public static class TL_updateEncryption extends TLRPC.Update {
      public static int constructor;
      public TLRPC.EncryptedChat chat;
      public int date;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.chat = TLRPC.EncryptedChat.TLdeserialize(var1, var1.readInt32(var2), var2);
         this.date = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.chat.serializeToStream(var1);
         var1.writeInt32(this.date);
      }
   }

   public static class TL_updateFavedStickers extends TLRPC.Update {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_updateFolderPeers extends TLRPC.Update {
      public static int constructor;
      public ArrayList folder_peers = new ArrayList();
      public int pts;
      public int pts_count;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.TL_folderPeer var5 = TLRPC.TL_folderPeer.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               this.folder_peers.add(var5);
            }

            this.pts = var1.readInt32(var2);
            this.pts_count = var1.readInt32(var2);
         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = this.folder_peers.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.TL_folderPeer)this.folder_peers.get(var3)).serializeToStream(var1);
         }

         var1.writeInt32(this.pts);
         var1.writeInt32(this.pts_count);
      }
   }

   public static class TL_updateGroupCall extends TLRPC.Update {
      public static int constructor;
      public TLRPC.GroupCall call;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.call = TLRPC.GroupCall.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.call.serializeToStream(var1);
      }
   }

   public static class TL_updateGroupCallParticipant extends TLRPC.Update {
      public static int constructor;
      public TLRPC.TL_inputGroupCall call;
      public TLRPC.GroupCallParticipant participant;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.call = TLRPC.TL_inputGroupCall.TLdeserialize(var1, var1.readInt32(var2), var2);
         this.participant = TLRPC.GroupCallParticipant.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.call.serializeToStream(var1);
         this.participant.serializeToStream(var1);
      }
   }

   public static class TL_updateLangPack extends TLRPC.Update {
      public static int constructor;
      public TLRPC.TL_langPackDifference difference;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.difference = TLRPC.TL_langPackDifference.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.difference.serializeToStream(var1);
      }
   }

   public static class TL_updateLangPackTooLong extends TLRPC.Update {
      public static int constructor;
      public String lang_code;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.lang_code = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.lang_code);
      }
   }

   public static class TL_updateMessageID extends TLRPC.Update {
      public static int constructor;
      public int id;
      public long random_id;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.id = var1.readInt32(var2);
         this.random_id = var1.readInt64(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.id);
         var1.writeInt64(this.random_id);
      }
   }

   public static class TL_updateMessagePoll extends TLRPC.Update {
      public static int constructor;
      public int flags;
      public TLRPC.TL_poll poll;
      public long poll_id;
      public TLRPC.TL_pollResults results;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.flags = var1.readInt32(var2);
         this.poll_id = var1.readInt64(var2);
         if ((this.flags & 1) != 0) {
            this.poll = TLRPC.TL_poll.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         this.results = TLRPC.TL_pollResults.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.flags);
         var1.writeInt64(this.poll_id);
         if ((this.flags & 1) != 0) {
            this.poll.serializeToStream(var1);
         }

         this.results.serializeToStream(var1);
      }
   }

   public static class TL_updateNewChannelMessage extends TLRPC.Update {
      public static int constructor;
      public TLRPC.Message message;
      public int pts;
      public int pts_count;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.message = TLRPC.Message.TLdeserialize(var1, var1.readInt32(var2), var2);
         this.pts = var1.readInt32(var2);
         this.pts_count = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.message.serializeToStream(var1);
         var1.writeInt32(this.pts);
         var1.writeInt32(this.pts_count);
      }
   }

   public static class TL_updateNewEncryptedMessage extends TLRPC.Update {
      public static int constructor;
      public TLRPC.EncryptedMessage message;
      public int qts;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.message = TLRPC.EncryptedMessage.TLdeserialize(var1, var1.readInt32(var2), var2);
         this.qts = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.message.serializeToStream(var1);
         var1.writeInt32(this.qts);
      }
   }

   public static class TL_updateNewMessage extends TLRPC.Update {
      public static int constructor;
      public TLRPC.Message message;
      public int pts;
      public int pts_count;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.message = TLRPC.Message.TLdeserialize(var1, var1.readInt32(var2), var2);
         this.pts = var1.readInt32(var2);
         this.pts_count = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.message.serializeToStream(var1);
         var1.writeInt32(this.pts);
         var1.writeInt32(this.pts_count);
      }
   }

   public static class TL_updateNewStickerSet extends TLRPC.Update {
      public static int constructor;
      public TLRPC.TL_messages_stickerSet stickerset;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.stickerset = TLRPC.TL_messages_stickerSet.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.stickerset.serializeToStream(var1);
      }
   }

   public static class TL_updateNotifySettings extends TLRPC.Update {
      public static int constructor;
      public TLRPC.PeerNotifySettings notify_settings;
      public TLRPC.NotifyPeer peer;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.peer = TLRPC.NotifyPeer.TLdeserialize(var1, var1.readInt32(var2), var2);
         this.notify_settings = TLRPC.PeerNotifySettings.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.peer.serializeToStream(var1);
         this.notify_settings.serializeToStream(var1);
      }
   }

   public static class TL_updatePhoneCall extends TLRPC.Update {
      public static int constructor;
      public TLRPC.PhoneCall phone_call;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.phone_call = TLRPC.PhoneCall.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.phone_call.serializeToStream(var1);
      }
   }

   public static class TL_updatePinnedDialogs extends TLRPC.Update {
      public static int constructor;
      public int flags;
      public int folder_id;
      public ArrayList order = new ArrayList();

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.flags = var1.readInt32(var2);
         if ((this.flags & 2) != 0) {
            this.folder_id = var1.readInt32(var2);
         }

         if ((this.flags & 1) != 0) {
            int var3 = var1.readInt32(var2);
            int var4 = 0;
            if (var3 != 481674261) {
               if (!var2) {
                  return;
               }

               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }

            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.DialogPeer var5 = TLRPC.DialogPeer.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               this.order.add(var5);
            }
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.flags);
         if ((this.flags & 2) != 0) {
            var1.writeInt32(this.folder_id);
         }

         if ((this.flags & 1) != 0) {
            var1.writeInt32(481674261);
            int var2 = this.order.size();
            var1.writeInt32(var2);

            for(int var3 = 0; var3 < var2; ++var3) {
               ((TLRPC.DialogPeer)this.order.get(var3)).serializeToStream(var1);
            }
         }

      }
   }

   public static class TL_updatePrivacy extends TLRPC.Update {
      public static int constructor;
      public TLRPC.PrivacyKey key;
      public ArrayList rules = new ArrayList();

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.key = TLRPC.PrivacyKey.TLdeserialize(var1, var1.readInt32(var2), var2);
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.PrivacyRule var5 = TLRPC.PrivacyRule.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               this.rules.add(var5);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.key.serializeToStream(var1);
         var1.writeInt32(481674261);
         int var2 = this.rules.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.PrivacyRule)this.rules.get(var3)).serializeToStream(var1);
         }

      }
   }

   public static class TL_updateReadChannelInbox extends TLRPC.Update {
      public static int constructor;
      public int channel_id;
      public int flags;
      public int folder_id;
      public int max_id;
      public int pts;
      public int still_unread_count;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.flags = var1.readInt32(var2);
         if ((this.flags & 1) != 0) {
            this.folder_id = var1.readInt32(var2);
         }

         this.channel_id = var1.readInt32(var2);
         this.max_id = var1.readInt32(var2);
         this.still_unread_count = var1.readInt32(var2);
         this.pts = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.flags);
         if ((this.flags & 1) != 0) {
            var1.writeInt32(this.folder_id);
         }

         var1.writeInt32(this.channel_id);
         var1.writeInt32(this.max_id);
         var1.writeInt32(this.still_unread_count);
         var1.writeInt32(this.pts);
      }
   }

   public static class TL_updateReadChannelOutbox extends TLRPC.Update {
      public static int constructor;
      public int channel_id;
      public int max_id;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.channel_id = var1.readInt32(var2);
         this.max_id = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.channel_id);
         var1.writeInt32(this.max_id);
      }
   }

   public static class TL_updateReadFeaturedStickers extends TLRPC.Update {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_updateReadHistoryInbox extends TLRPC.Update {
      public static int constructor;
      public int flags;
      public int folder_id;
      public int max_id;
      public TLRPC.Peer peer;
      public int pts;
      public int pts_count;
      public int still_unread_count;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.flags = var1.readInt32(var2);
         if ((this.flags & 1) != 0) {
            this.folder_id = var1.readInt32(var2);
         }

         this.peer = TLRPC.Peer.TLdeserialize(var1, var1.readInt32(var2), var2);
         this.max_id = var1.readInt32(var2);
         this.still_unread_count = var1.readInt32(var2);
         this.pts = var1.readInt32(var2);
         this.pts_count = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.flags);
         if ((this.flags & 1) != 0) {
            var1.writeInt32(this.folder_id);
         }

         this.peer.serializeToStream(var1);
         var1.writeInt32(this.max_id);
         var1.writeInt32(this.still_unread_count);
         var1.writeInt32(this.pts);
         var1.writeInt32(this.pts_count);
      }
   }

   public static class TL_updateReadHistoryOutbox extends TLRPC.Update {
      public static int constructor;
      public int max_id;
      public TLRPC.Peer peer;
      public int pts;
      public int pts_count;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.peer = TLRPC.Peer.TLdeserialize(var1, var1.readInt32(var2), var2);
         this.max_id = var1.readInt32(var2);
         this.pts = var1.readInt32(var2);
         this.pts_count = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.peer.serializeToStream(var1);
         var1.writeInt32(this.max_id);
         var1.writeInt32(this.pts);
         var1.writeInt32(this.pts_count);
      }
   }

   public static class TL_updateReadMessagesContents extends TLRPC.Update {
      public static int constructor;
      public ArrayList messages = new ArrayList();
      public int pts;
      public int pts_count;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               this.messages.add(var1.readInt32(var2));
            }

            this.pts = var1.readInt32(var2);
            this.pts_count = var1.readInt32(var2);
         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = this.messages.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            var1.writeInt32((Integer)this.messages.get(var3));
         }

         var1.writeInt32(this.pts);
         var1.writeInt32(this.pts_count);
      }
   }

   public static class TL_updateRecentStickers extends TLRPC.Update {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_updateSavedGifs extends TLRPC.Update {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_updateServiceNotification extends TLRPC.Update {
      public static int constructor;
      public ArrayList entities = new ArrayList();
      public int flags;
      public int inbox_date;
      public TLRPC.MessageMedia media;
      public String message;
      public boolean popup;
      public String type;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.flags = var1.readInt32(var2);
         int var3 = this.flags;
         int var4 = 0;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.popup = var5;
         if ((this.flags & 2) != 0) {
            this.inbox_date = var1.readInt32(var2);
         }

         this.type = var1.readString(var2);
         this.message = var1.readString(var2);
         this.media = TLRPC.MessageMedia.TLdeserialize(var1, var1.readInt32(var2), var2);
         var3 = var1.readInt32(var2);
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.MessageEntity var6 = TLRPC.MessageEntity.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               this.entities.add(var6);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.popup) {
            var2 = this.flags | 1;
         } else {
            var2 = this.flags & -2;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         if ((this.flags & 2) != 0) {
            var1.writeInt32(this.inbox_date);
         }

         var1.writeString(this.type);
         var1.writeString(this.message);
         this.media.serializeToStream(var1);
         var1.writeInt32(481674261);
         int var3 = this.entities.size();
         var1.writeInt32(var3);

         for(var2 = 0; var2 < var3; ++var2) {
            ((TLRPC.MessageEntity)this.entities.get(var2)).serializeToStream(var1);
         }

      }
   }

   public static class TL_updateShort extends TLRPC.Updates {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.update = TLRPC.Update.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.date = var1.readInt32(var2);
      }
   }

   public static class TL_updateShortChatMessage extends TLRPC.Updates {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         int var4 = 0;
         boolean var5;
         if ((var3 & 2) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.out = var5;
         if ((super.flags & 16) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.mentioned = var5;
         if ((super.flags & 32) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.media_unread = var5;
         if ((super.flags & 8192) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.silent = var5;
         super.id = var1.readInt32(var2);
         super.from_id = var1.readInt32(var2);
         super.chat_id = var1.readInt32(var2);
         super.message = var1.readString(var2);
         super.pts = var1.readInt32(var2);
         super.pts_count = var1.readInt32(var2);
         super.date = var1.readInt32(var2);
         if ((super.flags & 4) != 0) {
            super.fwd_from = TLRPC.MessageFwdHeader.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         if ((super.flags & 2048) != 0) {
            super.via_bot_id = var1.readInt32(var2);
         }

         if ((super.flags & 8) != 0) {
            super.reply_to_msg_id = var1.readInt32(var2);
         }

         if ((super.flags & 128) != 0) {
            var3 = var1.readInt32(var2);
            if (var3 != 481674261) {
               if (!var2) {
                  return;
               }

               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }

            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.MessageEntity var6 = TLRPC.MessageEntity.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               super.entities.add(var6);
            }
         }

      }
   }

   public static class TL_updateShortMessage extends TLRPC.Updates {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         int var4 = 0;
         boolean var5;
         if ((var3 & 2) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.out = var5;
         if ((super.flags & 16) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.mentioned = var5;
         if ((super.flags & 32) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.media_unread = var5;
         if ((super.flags & 8192) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.silent = var5;
         super.id = var1.readInt32(var2);
         super.user_id = var1.readInt32(var2);
         super.message = var1.readString(var2);
         super.pts = var1.readInt32(var2);
         super.pts_count = var1.readInt32(var2);
         super.date = var1.readInt32(var2);
         if ((super.flags & 4) != 0) {
            super.fwd_from = TLRPC.MessageFwdHeader.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         if ((super.flags & 2048) != 0) {
            super.via_bot_id = var1.readInt32(var2);
         }

         if ((super.flags & 8) != 0) {
            super.reply_to_msg_id = var1.readInt32(var2);
         }

         if ((super.flags & 128) != 0) {
            var3 = var1.readInt32(var2);
            if (var3 != 481674261) {
               if (!var2) {
                  return;
               }

               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }

            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.MessageEntity var6 = TLRPC.MessageEntity.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               super.entities.add(var6);
            }
         }

      }
   }

   public static class TL_updateShortSentMessage extends TLRPC.Updates {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         int var4 = 0;
         boolean var5;
         if ((var3 & 2) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.out = var5;
         super.id = var1.readInt32(var2);
         super.pts = var1.readInt32(var2);
         super.pts_count = var1.readInt32(var2);
         super.date = var1.readInt32(var2);
         if ((super.flags & 512) != 0) {
            super.media = TLRPC.MessageMedia.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         if ((super.flags & 128) != 0) {
            var3 = var1.readInt32(var2);
            if (var3 != 481674261) {
               if (!var2) {
                  return;
               }

               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }

            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.MessageEntity var6 = TLRPC.MessageEntity.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               super.entities.add(var6);
            }
         }

      }
   }

   public static class TL_updateStickerSets extends TLRPC.Update {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_updateStickerSetsOrder extends TLRPC.Update {
      public static int constructor;
      public int flags;
      public boolean masks;
      public ArrayList order = new ArrayList();

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.flags = var1.readInt32(var2);
         int var3 = this.flags;
         int var4 = 0;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.masks = var5;
         var3 = var1.readInt32(var2);
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               this.order.add(var1.readInt64(var2));
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.masks) {
            var2 = this.flags | 1;
         } else {
            var2 = this.flags & -2;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         var1.writeInt32(481674261);
         int var3 = this.order.size();
         var1.writeInt32(var3);

         for(var2 = 0; var2 < var3; ++var2) {
            var1.writeInt64((Long)this.order.get(var2));
         }

      }
   }

   public static class TL_updateUserBlocked extends TLRPC.Update {
      public static int constructor;
      public boolean blocked;
      public int user_id;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.user_id = var1.readInt32(var2);
         this.blocked = var1.readBool(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.user_id);
         var1.writeBool(this.blocked);
      }
   }

   public static class TL_updateUserName extends TLRPC.Update {
      public static int constructor;
      public String first_name;
      public String last_name;
      public int user_id;
      public String username;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.user_id = var1.readInt32(var2);
         this.first_name = var1.readString(var2);
         this.last_name = var1.readString(var2);
         this.username = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.user_id);
         var1.writeString(this.first_name);
         var1.writeString(this.last_name);
         var1.writeString(this.username);
      }
   }

   public static class TL_updateUserPhone extends TLRPC.Update {
      public static int constructor;
      public String phone;
      public int user_id;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.user_id = var1.readInt32(var2);
         this.phone = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.user_id);
         var1.writeString(this.phone);
      }
   }

   public static class TL_updateUserPhoto extends TLRPC.Update {
      public static int constructor;
      public int date;
      public TLRPC.UserProfilePhoto photo;
      public boolean previous;
      public int user_id;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.user_id = var1.readInt32(var2);
         this.date = var1.readInt32(var2);
         this.photo = TLRPC.UserProfilePhoto.TLdeserialize(var1, var1.readInt32(var2), var2);
         this.previous = var1.readBool(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.user_id);
         var1.writeInt32(this.date);
         this.photo.serializeToStream(var1);
         var1.writeBool(this.previous);
      }
   }

   public static class TL_updateUserPinnedMessage extends TLRPC.Update {
      public static int constructor;
      public int id;
      public int user_id;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.user_id = var1.readInt32(var2);
         this.id = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.user_id);
         var1.writeInt32(this.id);
      }
   }

   public static class TL_updateUserStatus extends TLRPC.Update {
      public static int constructor;
      public TLRPC.UserStatus status;
      public int user_id;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.user_id = var1.readInt32(var2);
         this.status = TLRPC.UserStatus.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.user_id);
         this.status.serializeToStream(var1);
      }
   }

   public static class TL_updateUserTyping extends TLRPC.Update {
      public static int constructor;
      public TLRPC.SendMessageAction action;
      public int user_id;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.user_id = var1.readInt32(var2);
         this.action = TLRPC.SendMessageAction.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.user_id);
         this.action.serializeToStream(var1);
      }
   }

   public static class TL_updateWebPage extends TLRPC.Update {
      public static int constructor;
      public int pts;
      public int pts_count;
      public TLRPC.WebPage webpage;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.webpage = TLRPC.WebPage.TLdeserialize(var1, var1.readInt32(var2), var2);
         this.pts = var1.readInt32(var2);
         this.pts_count = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.webpage.serializeToStream(var1);
         var1.writeInt32(this.pts);
         var1.writeInt32(this.pts_count);
      }
   }

   public static class TL_updates extends TLRPC.Updates {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         int var3 = var1.readInt32(var2);
         byte var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            int var5 = var1.readInt32(var2);

            for(var3 = 0; var3 < var5; ++var3) {
               TLRPC.Update var6 = TLRPC.Update.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               super.updates.add(var6);
            }

            var3 = var1.readInt32(var2);
            if (var3 != 481674261) {
               if (var2) {
                  throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
               }
            } else {
               var5 = var1.readInt32(var2);

               for(var3 = 0; var3 < var5; ++var3) {
                  TLRPC.User var7 = TLRPC.User.TLdeserialize(var1, var1.readInt32(var2), var2);
                  if (var7 == null) {
                     return;
                  }

                  super.users.add(var7);
               }

               var3 = var1.readInt32(var2);
               if (var3 != 481674261) {
                  if (var2) {
                     throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
                  }
               } else {
                  var5 = var1.readInt32(var2);

                  for(var3 = var4; var3 < var5; ++var3) {
                     TLRPC.Chat var8 = TLRPC.Chat.TLdeserialize(var1, var1.readInt32(var2), var2);
                     if (var8 == null) {
                        return;
                     }

                     super.chats.add(var8);
                  }

                  super.date = var1.readInt32(var2);
                  super.seq = var1.readInt32(var2);
               }
            }
         }
      }
   }

   public static class TL_updatesCombined extends TLRPC.Updates {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         int var3 = var1.readInt32(var2);
         byte var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            int var5 = var1.readInt32(var2);

            for(var3 = 0; var3 < var5; ++var3) {
               TLRPC.Update var6 = TLRPC.Update.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               super.updates.add(var6);
            }

            var3 = var1.readInt32(var2);
            if (var3 != 481674261) {
               if (var2) {
                  throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
               }
            } else {
               var5 = var1.readInt32(var2);

               for(var3 = 0; var3 < var5; ++var3) {
                  TLRPC.User var7 = TLRPC.User.TLdeserialize(var1, var1.readInt32(var2), var2);
                  if (var7 == null) {
                     return;
                  }

                  super.users.add(var7);
               }

               var3 = var1.readInt32(var2);
               if (var3 != 481674261) {
                  if (var2) {
                     throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
                  }
               } else {
                  var5 = var1.readInt32(var2);

                  for(var3 = var4; var3 < var5; ++var3) {
                     TLRPC.Chat var8 = TLRPC.Chat.TLdeserialize(var1, var1.readInt32(var2), var2);
                     if (var8 == null) {
                        return;
                     }

                     super.chats.add(var8);
                  }

                  super.date = var1.readInt32(var2);
                  super.seq_start = var1.readInt32(var2);
                  super.seq = var1.readInt32(var2);
               }
            }
         }
      }
   }

   public static class TL_updatesTooLong extends TLRPC.Updates {
      public static int constructor;
   }

   public static class TL_updates_channelDifference extends TLRPC.updates_ChannelDifference {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         byte var4 = 0;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.isFinal = var5;
         super.pts = var1.readInt32(var2);
         if ((super.flags & 2) != 0) {
            super.timeout = var1.readInt32(var2);
         }

         var3 = var1.readInt32(var2);
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            int var6 = var1.readInt32(var2);

            for(var3 = 0; var3 < var6; ++var3) {
               TLRPC.Message var7 = TLRPC.Message.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var7 == null) {
                  return;
               }

               super.new_messages.add(var7);
            }

            var3 = var1.readInt32(var2);
            if (var3 != 481674261) {
               if (var2) {
                  throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
               }
            } else {
               var6 = var1.readInt32(var2);

               for(var3 = 0; var3 < var6; ++var3) {
                  TLRPC.Update var8 = TLRPC.Update.TLdeserialize(var1, var1.readInt32(var2), var2);
                  if (var8 == null) {
                     return;
                  }

                  super.other_updates.add(var8);
               }

               var3 = var1.readInt32(var2);
               if (var3 != 481674261) {
                  if (var2) {
                     throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
                  }
               } else {
                  var6 = var1.readInt32(var2);

                  for(var3 = 0; var3 < var6; ++var3) {
                     TLRPC.Chat var9 = TLRPC.Chat.TLdeserialize(var1, var1.readInt32(var2), var2);
                     if (var9 == null) {
                        return;
                     }

                     super.chats.add(var9);
                  }

                  var3 = var1.readInt32(var2);
                  if (var3 != 481674261) {
                     if (var2) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
                     }
                  } else {
                     var6 = var1.readInt32(var2);

                     for(var3 = var4; var3 < var6; ++var3) {
                        TLRPC.User var10 = TLRPC.User.TLdeserialize(var1, var1.readInt32(var2), var2);
                        if (var10 == null) {
                           return;
                        }

                        super.users.add(var10);
                     }

                  }
               }
            }
         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.isFinal) {
            var2 = super.flags | 1;
         } else {
            var2 = super.flags & -2;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt32(super.pts);
         if ((super.flags & 2) != 0) {
            var1.writeInt32(super.timeout);
         }

         var1.writeInt32(481674261);
         int var3 = super.new_messages.size();
         var1.writeInt32(var3);
         byte var4 = 0;

         for(var2 = 0; var2 < var3; ++var2) {
            ((TLRPC.Message)super.new_messages.get(var2)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var3 = super.other_updates.size();
         var1.writeInt32(var3);

         for(var2 = 0; var2 < var3; ++var2) {
            ((TLRPC.Update)super.other_updates.get(var2)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var3 = super.chats.size();
         var1.writeInt32(var3);

         for(var2 = 0; var2 < var3; ++var2) {
            ((TLRPC.Chat)super.chats.get(var2)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var3 = super.users.size();
         var1.writeInt32(var3);

         for(var2 = var4; var2 < var3; ++var2) {
            ((TLRPC.User)super.users.get(var2)).serializeToStream(var1);
         }

      }
   }

   public static class TL_updates_channelDifferenceEmpty extends TLRPC.updates_ChannelDifference {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         boolean var4 = true;
         if ((var3 & 1) == 0) {
            var4 = false;
         }

         super.isFinal = var4;
         super.pts = var1.readInt32(var2);
         if ((super.flags & 2) != 0) {
            super.timeout = var1.readInt32(var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.isFinal) {
            var2 = super.flags | 1;
         } else {
            var2 = super.flags & -2;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt32(super.pts);
         if ((super.flags & 2) != 0) {
            var1.writeInt32(super.timeout);
         }

      }
   }

   public static class TL_updates_channelDifferenceTooLong extends TLRPC.updates_ChannelDifference {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         byte var4 = 0;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.isFinal = var5;
         if ((super.flags & 2) != 0) {
            super.timeout = var1.readInt32(var2);
         }

         super.dialog = TLRPC.Dialog.TLdeserialize(var1, var1.readInt32(var2), var2);
         var3 = var1.readInt32(var2);
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            int var6 = var1.readInt32(var2);

            for(var3 = 0; var3 < var6; ++var3) {
               TLRPC.Message var7 = TLRPC.Message.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var7 == null) {
                  return;
               }

               super.messages.add(var7);
            }

            var3 = var1.readInt32(var2);
            if (var3 != 481674261) {
               if (var2) {
                  throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
               }
            } else {
               var6 = var1.readInt32(var2);

               for(var3 = 0; var3 < var6; ++var3) {
                  TLRPC.Chat var8 = TLRPC.Chat.TLdeserialize(var1, var1.readInt32(var2), var2);
                  if (var8 == null) {
                     return;
                  }

                  super.chats.add(var8);
               }

               var3 = var1.readInt32(var2);
               if (var3 != 481674261) {
                  if (var2) {
                     throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
                  }
               } else {
                  var6 = var1.readInt32(var2);

                  for(var3 = var4; var3 < var6; ++var3) {
                     TLRPC.User var9 = TLRPC.User.TLdeserialize(var1, var1.readInt32(var2), var2);
                     if (var9 == null) {
                        return;
                     }

                     super.users.add(var9);
                  }

               }
            }
         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.isFinal) {
            var2 = super.flags | 1;
         } else {
            var2 = super.flags & -2;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         if ((super.flags & 2) != 0) {
            var1.writeInt32(super.timeout);
         }

         super.dialog.serializeToStream(var1);
         var1.writeInt32(481674261);
         int var3 = super.messages.size();
         var1.writeInt32(var3);
         byte var4 = 0;

         for(var2 = 0; var2 < var3; ++var2) {
            ((TLRPC.Message)super.messages.get(var2)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var3 = super.chats.size();
         var1.writeInt32(var3);

         for(var2 = 0; var2 < var3; ++var2) {
            ((TLRPC.Chat)super.chats.get(var2)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var3 = super.users.size();
         var1.writeInt32(var3);

         for(var2 = var4; var2 < var3; ++var2) {
            ((TLRPC.User)super.users.get(var2)).serializeToStream(var1);
         }

      }
   }

   public static class TL_updates_difference extends TLRPC.updates_Difference {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         int var3 = var1.readInt32(var2);
         byte var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            int var5 = var1.readInt32(var2);

            for(var3 = 0; var3 < var5; ++var3) {
               TLRPC.Message var6 = TLRPC.Message.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               super.new_messages.add(var6);
            }

            var3 = var1.readInt32(var2);
            if (var3 != 481674261) {
               if (var2) {
                  throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
               }
            } else {
               var5 = var1.readInt32(var2);

               for(var3 = 0; var3 < var5; ++var3) {
                  TLRPC.EncryptedMessage var7 = TLRPC.EncryptedMessage.TLdeserialize(var1, var1.readInt32(var2), var2);
                  if (var7 == null) {
                     return;
                  }

                  super.new_encrypted_messages.add(var7);
               }

               var3 = var1.readInt32(var2);
               if (var3 != 481674261) {
                  if (var2) {
                     throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
                  }
               } else {
                  var5 = var1.readInt32(var2);

                  for(var3 = 0; var3 < var5; ++var3) {
                     TLRPC.Update var8 = TLRPC.Update.TLdeserialize(var1, var1.readInt32(var2), var2);
                     if (var8 == null) {
                        return;
                     }

                     super.other_updates.add(var8);
                  }

                  var3 = var1.readInt32(var2);
                  if (var3 != 481674261) {
                     if (var2) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
                     }
                  } else {
                     var5 = var1.readInt32(var2);

                     for(var3 = 0; var3 < var5; ++var3) {
                        TLRPC.Chat var9 = TLRPC.Chat.TLdeserialize(var1, var1.readInt32(var2), var2);
                        if (var9 == null) {
                           return;
                        }

                        super.chats.add(var9);
                     }

                     var3 = var1.readInt32(var2);
                     if (var3 != 481674261) {
                        if (var2) {
                           throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
                        }
                     } else {
                        var5 = var1.readInt32(var2);

                        for(var3 = var4; var3 < var5; ++var3) {
                           TLRPC.User var10 = TLRPC.User.TLdeserialize(var1, var1.readInt32(var2), var2);
                           if (var10 == null) {
                              return;
                           }

                           super.users.add(var10);
                        }

                        super.state = TLRPC.TL_updates_state.TLdeserialize(var1, var1.readInt32(var2), var2);
                     }
                  }
               }
            }
         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = super.new_messages.size();
         var1.writeInt32(var2);
         byte var3 = 0;

         int var4;
         for(var4 = 0; var4 < var2; ++var4) {
            ((TLRPC.Message)super.new_messages.get(var4)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var2 = super.new_encrypted_messages.size();
         var1.writeInt32(var2);

         for(var4 = 0; var4 < var2; ++var4) {
            ((TLRPC.EncryptedMessage)super.new_encrypted_messages.get(var4)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var2 = super.other_updates.size();
         var1.writeInt32(var2);

         for(var4 = 0; var4 < var2; ++var4) {
            ((TLRPC.Update)super.other_updates.get(var4)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var2 = super.chats.size();
         var1.writeInt32(var2);

         for(var4 = 0; var4 < var2; ++var4) {
            ((TLRPC.Chat)super.chats.get(var4)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var2 = super.users.size();
         var1.writeInt32(var2);

         for(var4 = var3; var4 < var2; ++var4) {
            ((TLRPC.User)super.users.get(var4)).serializeToStream(var1);
         }

         super.state.serializeToStream(var1);
      }
   }

   public static class TL_updates_differenceEmpty extends TLRPC.updates_Difference {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.date = var1.readInt32(var2);
         super.seq = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.date);
         var1.writeInt32(super.seq);
      }
   }

   public static class TL_updates_differenceSlice extends TLRPC.updates_Difference {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         int var3 = var1.readInt32(var2);
         byte var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            int var5 = var1.readInt32(var2);

            for(var3 = 0; var3 < var5; ++var3) {
               TLRPC.Message var6 = TLRPC.Message.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var6 == null) {
                  return;
               }

               super.new_messages.add(var6);
            }

            var3 = var1.readInt32(var2);
            if (var3 != 481674261) {
               if (var2) {
                  throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
               }
            } else {
               var5 = var1.readInt32(var2);

               for(var3 = 0; var3 < var5; ++var3) {
                  TLRPC.EncryptedMessage var7 = TLRPC.EncryptedMessage.TLdeserialize(var1, var1.readInt32(var2), var2);
                  if (var7 == null) {
                     return;
                  }

                  super.new_encrypted_messages.add(var7);
               }

               var3 = var1.readInt32(var2);
               if (var3 != 481674261) {
                  if (var2) {
                     throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
                  }
               } else {
                  var5 = var1.readInt32(var2);

                  for(var3 = 0; var3 < var5; ++var3) {
                     TLRPC.Update var8 = TLRPC.Update.TLdeserialize(var1, var1.readInt32(var2), var2);
                     if (var8 == null) {
                        return;
                     }

                     super.other_updates.add(var8);
                  }

                  var3 = var1.readInt32(var2);
                  if (var3 != 481674261) {
                     if (var2) {
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
                     }
                  } else {
                     var5 = var1.readInt32(var2);

                     for(var3 = 0; var3 < var5; ++var3) {
                        TLRPC.Chat var9 = TLRPC.Chat.TLdeserialize(var1, var1.readInt32(var2), var2);
                        if (var9 == null) {
                           return;
                        }

                        super.chats.add(var9);
                     }

                     var3 = var1.readInt32(var2);
                     if (var3 != 481674261) {
                        if (var2) {
                           throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
                        }
                     } else {
                        var5 = var1.readInt32(var2);

                        for(var3 = var4; var3 < var5; ++var3) {
                           TLRPC.User var10 = TLRPC.User.TLdeserialize(var1, var1.readInt32(var2), var2);
                           if (var10 == null) {
                              return;
                           }

                           super.users.add(var10);
                        }

                        super.intermediate_state = TLRPC.TL_updates_state.TLdeserialize(var1, var1.readInt32(var2), var2);
                     }
                  }
               }
            }
         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = super.new_messages.size();
         var1.writeInt32(var2);
         byte var3 = 0;

         int var4;
         for(var4 = 0; var4 < var2; ++var4) {
            ((TLRPC.Message)super.new_messages.get(var4)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var2 = super.new_encrypted_messages.size();
         var1.writeInt32(var2);

         for(var4 = 0; var4 < var2; ++var4) {
            ((TLRPC.EncryptedMessage)super.new_encrypted_messages.get(var4)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var2 = super.other_updates.size();
         var1.writeInt32(var2);

         for(var4 = 0; var4 < var2; ++var4) {
            ((TLRPC.Update)super.other_updates.get(var4)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var2 = super.chats.size();
         var1.writeInt32(var2);

         for(var4 = 0; var4 < var2; ++var4) {
            ((TLRPC.Chat)super.chats.get(var4)).serializeToStream(var1);
         }

         var1.writeInt32(481674261);
         var2 = super.users.size();
         var1.writeInt32(var2);

         for(var4 = var3; var4 < var2; ++var4) {
            ((TLRPC.User)super.users.get(var4)).serializeToStream(var1);
         }

         super.intermediate_state.serializeToStream(var1);
      }
   }

   public static class TL_updates_differenceTooLong extends TLRPC.updates_Difference {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.pts = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.pts);
      }
   }

   public static class TL_updates_getChannelDifference extends TLObject {
      public static int constructor;
      public TLRPC.InputChannel channel;
      public TLRPC.ChannelMessagesFilter filter;
      public int flags;
      public boolean force;
      public int limit;
      public int pts;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.updates_ChannelDifference.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.force) {
            var2 = this.flags | 1;
         } else {
            var2 = this.flags & -2;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         this.channel.serializeToStream(var1);
         this.filter.serializeToStream(var1);
         var1.writeInt32(this.pts);
         var1.writeInt32(this.limit);
      }
   }

   public static class TL_updates_getDifference extends TLObject {
      public static int constructor;
      public int date;
      public int flags;
      public int pts;
      public int pts_total_limit;
      public int qts;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.updates_Difference.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.flags);
         var1.writeInt32(this.pts);
         if ((this.flags & 1) != 0) {
            var1.writeInt32(this.pts_total_limit);
         }

         var1.writeInt32(this.date);
         var1.writeInt32(this.qts);
      }
   }

   public static class TL_updates_getState extends TLObject {
      public static int constructor;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_updates_state.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_updates_state extends TLObject {
      public static int constructor;
      public int date;
      public int pts;
      public int qts;
      public int seq;
      public int unread_count;

      public static TLRPC.TL_updates_state TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_updates_state", var1));
            }
         } else {
            TLRPC.TL_updates_state var3 = new TLRPC.TL_updates_state();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.pts = var1.readInt32(var2);
         this.qts = var1.readInt32(var2);
         this.date = var1.readInt32(var2);
         this.seq = var1.readInt32(var2);
         this.unread_count = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.pts);
         var1.writeInt32(this.qts);
         var1.writeInt32(this.date);
         var1.writeInt32(this.seq);
         var1.writeInt32(this.unread_count);
      }
   }

   public static class TL_upload_cdnFile extends TLRPC.upload_CdnFile {
      public static int constructor;

      public void freeResources() {
         if (!super.disableFree) {
            NativeByteBuffer var1 = super.bytes;
            if (var1 != null) {
               var1.reuse();
               super.bytes = null;
            }

         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.bytes = var1.readByteBuffer(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeByteBuffer(super.bytes);
      }
   }

   public static class TL_upload_cdnFileReuploadNeeded extends TLRPC.upload_CdnFile {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.request_token = var1.readByteArray(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeByteArray(super.request_token);
      }
   }

   public static class TL_upload_file extends TLRPC.upload_File {
      public static int constructor;

      public void freeResources() {
         if (!super.disableFree) {
            NativeByteBuffer var1 = super.bytes;
            if (var1 != null) {
               var1.reuse();
               super.bytes = null;
            }

         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.type = TLRPC.storage_FileType.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.mtime = var1.readInt32(var2);
         super.bytes = var1.readByteBuffer(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         super.type.serializeToStream(var1);
         var1.writeInt32(super.mtime);
         var1.writeByteBuffer(super.bytes);
      }
   }

   public static class TL_upload_fileCdnRedirect extends TLRPC.upload_File {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.dc_id = var1.readInt32(var2);
         super.file_token = var1.readByteArray(var2);
         super.encryption_key = var1.readByteArray(var2);
         super.encryption_iv = var1.readByteArray(var2);
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.TL_fileHash var5 = TLRPC.TL_fileHash.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               super.file_hashes.add(var5);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.dc_id);
         var1.writeByteArray(super.file_token);
         var1.writeByteArray(super.encryption_key);
         var1.writeByteArray(super.encryption_iv);
         var1.writeInt32(481674261);
         int var2 = super.file_hashes.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.TL_fileHash)super.file_hashes.get(var3)).serializeToStream(var1);
         }

      }
   }

   public static class TL_upload_getCdnFile extends TLObject {
      public static int constructor;
      public byte[] file_token;
      public int limit;
      public int offset;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.upload_CdnFile.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeByteArray(this.file_token);
         var1.writeInt32(this.offset);
         var1.writeInt32(this.limit);
      }
   }

   public static class TL_upload_getCdnFileHashes extends TLObject {
      public static int constructor;
      public byte[] file_token;
      public int offset;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         TLRPC.Vector var4 = new TLRPC.Vector();
         int var5 = var1.readInt32(var3);

         for(var2 = 0; var2 < var5; ++var2) {
            TLRPC.TL_fileHash var6 = TLRPC.TL_fileHash.TLdeserialize(var1, var1.readInt32(var3), var3);
            if (var6 == null) {
               return var4;
            }

            var4.objects.add(var6);
         }

         return var4;
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeByteArray(this.file_token);
         var1.writeInt32(this.offset);
      }
   }

   public static class TL_upload_getFile extends TLObject {
      public static int constructor;
      public int limit;
      public TLRPC.InputFileLocation location;
      public int offset;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.upload_File.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.location.serializeToStream(var1);
         var1.writeInt32(this.offset);
         var1.writeInt32(this.limit);
      }
   }

   public static class TL_upload_getFileHashes extends TLObject {
      public static int constructor;
      public TLRPC.InputFileLocation location;
      public int offset;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         TLRPC.Vector var4 = new TLRPC.Vector();
         int var5 = var1.readInt32(var3);

         for(var2 = 0; var2 < var5; ++var2) {
            TLRPC.TL_fileHash var6 = TLRPC.TL_fileHash.TLdeserialize(var1, var1.readInt32(var3), var3);
            if (var6 == null) {
               return var4;
            }

            var4.objects.add(var6);
         }

         return var4;
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.location.serializeToStream(var1);
         var1.writeInt32(this.offset);
      }
   }

   public static class TL_upload_getWebFile extends TLObject {
      public static int constructor;
      public int limit;
      public TLRPC.InputWebFileLocation location;
      public int offset;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.TL_upload_webFile.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.location.serializeToStream(var1);
         var1.writeInt32(this.offset);
         var1.writeInt32(this.limit);
      }
   }

   public static class TL_upload_reuploadCdnFile extends TLObject {
      public static int constructor;
      public byte[] file_token;
      public byte[] request_token;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         TLRPC.Vector var4 = new TLRPC.Vector();
         int var5 = var1.readInt32(var3);

         for(var2 = 0; var2 < var5; ++var2) {
            TLRPC.TL_fileHash var6 = TLRPC.TL_fileHash.TLdeserialize(var1, var1.readInt32(var3), var3);
            if (var6 == null) {
               return var4;
            }

            var4.objects.add(var6);
         }

         return var4;
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeByteArray(this.file_token);
         var1.writeByteArray(this.request_token);
      }
   }

   public static class TL_upload_saveBigFilePart extends TLObject {
      public static int constructor;
      public NativeByteBuffer bytes;
      public long file_id;
      public int file_part;
      public int file_total_parts;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void freeResources() {
         if (!super.disableFree) {
            NativeByteBuffer var1 = this.bytes;
            if (var1 != null) {
               var1.reuse();
               this.bytes = null;
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(this.file_id);
         var1.writeInt32(this.file_part);
         var1.writeInt32(this.file_total_parts);
         var1.writeByteBuffer(this.bytes);
      }
   }

   public static class TL_upload_saveFilePart extends TLObject {
      public static int constructor;
      public NativeByteBuffer bytes;
      public long file_id;
      public int file_part;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.Bool.TLdeserialize(var1, var2, var3);
      }

      public void freeResources() {
         if (!super.disableFree) {
            NativeByteBuffer var1 = this.bytes;
            if (var1 != null) {
               var1.reuse();
               this.bytes = null;
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(this.file_id);
         var1.writeInt32(this.file_part);
         var1.writeByteBuffer(this.bytes);
      }
   }

   public static class TL_upload_webFile extends TLObject {
      public static int constructor;
      public NativeByteBuffer bytes;
      public TLRPC.storage_FileType file_type;
      public String mime_type;
      public int mtime;
      public int size;

      public static TLRPC.TL_upload_webFile TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_upload_webFile", var1));
            }
         } else {
            TLRPC.TL_upload_webFile var3 = new TLRPC.TL_upload_webFile();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void freeResources() {
         if (!super.disableFree) {
            NativeByteBuffer var1 = this.bytes;
            if (var1 != null) {
               var1.reuse();
               this.bytes = null;
            }

         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.size = var1.readInt32(var2);
         this.mime_type = var1.readString(var2);
         this.file_type = TLRPC.storage_FileType.TLdeserialize(var1, var1.readInt32(var2), var2);
         this.mtime = var1.readInt32(var2);
         this.bytes = var1.readByteBuffer(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(this.size);
         var1.writeString(this.mime_type);
         this.file_type.serializeToStream(var1);
         var1.writeInt32(this.mtime);
         var1.writeByteBuffer(this.bytes);
      }
   }

   public static class TL_urlAuthResultAccepted extends TLRPC.UrlAuthResult {
      public static int constructor;
      public String url;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.url = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(this.url);
      }
   }

   public static class TL_urlAuthResultDefault extends TLRPC.UrlAuthResult {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_urlAuthResultRequest extends TLRPC.UrlAuthResult {
      public static int constructor;
      public TLRPC.User bot;
      public String domain;
      public int flags;
      public boolean request_write_access;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.flags = var1.readInt32(var2);
         int var3 = this.flags;
         boolean var4 = true;
         if ((var3 & 1) == 0) {
            var4 = false;
         }

         this.request_write_access = var4;
         this.bot = TLRPC.User.TLdeserialize(var1, var1.readInt32(var2), var2);
         this.domain = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.request_write_access) {
            var2 = this.flags | 1;
         } else {
            var2 = this.flags & -2;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         this.bot.serializeToStream(var1);
         var1.writeString(this.domain);
      }
   }

   public static class TL_user extends TLRPC.User {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         boolean var4 = false;
         boolean var5;
         if ((var3 & 1024) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.self = var5;
         if ((super.flags & 2048) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.contact = var5;
         if ((super.flags & 4096) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.mutual_contact = var5;
         if ((super.flags & 8192) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.deleted = var5;
         if ((super.flags & 16384) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.bot = var5;
         if ((super.flags & '耀') != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.bot_chat_history = var5;
         if ((super.flags & 65536) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.bot_nochats = var5;
         if ((super.flags & 131072) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.verified = var5;
         if ((super.flags & 262144) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.restricted = var5;
         if ((super.flags & 1048576) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.min = var5;
         if ((super.flags & 2097152) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.bot_inline_geo = var5;
         if ((super.flags & 8388608) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.support = var5;
         var5 = var4;
         if ((super.flags & 16777216) != 0) {
            var5 = true;
         }

         super.scam = var5;
         super.id = var1.readInt32(var2);
         if ((super.flags & 1) != 0) {
            super.access_hash = var1.readInt64(var2);
         }

         if ((super.flags & 2) != 0) {
            super.first_name = var1.readString(var2);
         }

         if ((super.flags & 4) != 0) {
            super.last_name = var1.readString(var2);
         }

         if ((super.flags & 8) != 0) {
            super.username = var1.readString(var2);
         }

         if ((super.flags & 16) != 0) {
            super.phone = var1.readString(var2);
         }

         if ((super.flags & 32) != 0) {
            super.photo = TLRPC.UserProfilePhoto.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         if ((super.flags & 64) != 0) {
            super.status = TLRPC.UserStatus.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         if ((super.flags & 16384) != 0) {
            super.bot_info_version = var1.readInt32(var2);
         }

         if ((super.flags & 262144) != 0) {
            super.restriction_reason = var1.readString(var2);
         }

         if ((super.flags & 524288) != 0) {
            super.bot_inline_placeholder = var1.readString(var2);
         }

         if ((super.flags & 4194304) != 0) {
            super.lang_code = var1.readString(var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.self) {
            var2 = super.flags | 1024;
         } else {
            var2 = super.flags & -1025;
         }

         super.flags = var2;
         if (super.contact) {
            var2 = super.flags | 2048;
         } else {
            var2 = super.flags & -2049;
         }

         super.flags = var2;
         if (super.mutual_contact) {
            var2 = super.flags | 4096;
         } else {
            var2 = super.flags & -4097;
         }

         super.flags = var2;
         if (super.deleted) {
            var2 = super.flags | 8192;
         } else {
            var2 = super.flags & -8193;
         }

         super.flags = var2;
         if (super.bot) {
            var2 = super.flags | 16384;
         } else {
            var2 = super.flags & -16385;
         }

         super.flags = var2;
         if (super.bot_chat_history) {
            var2 = super.flags | '耀';
         } else {
            var2 = super.flags & -32769;
         }

         super.flags = var2;
         if (super.bot_nochats) {
            var2 = super.flags | 65536;
         } else {
            var2 = super.flags & -65537;
         }

         super.flags = var2;
         if (super.verified) {
            var2 = super.flags | 131072;
         } else {
            var2 = super.flags & -131073;
         }

         super.flags = var2;
         if (super.restricted) {
            var2 = super.flags | 262144;
         } else {
            var2 = super.flags & -262145;
         }

         super.flags = var2;
         if (super.min) {
            var2 = super.flags | 1048576;
         } else {
            var2 = super.flags & -1048577;
         }

         super.flags = var2;
         if (super.bot_inline_geo) {
            var2 = super.flags | 2097152;
         } else {
            var2 = super.flags & -2097153;
         }

         super.flags = var2;
         if (super.support) {
            var2 = super.flags | 8388608;
         } else {
            var2 = super.flags & -8388609;
         }

         super.flags = var2;
         if (super.scam) {
            var2 = super.flags | 16777216;
         } else {
            var2 = super.flags & -16777217;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt32(super.id);
         if ((super.flags & 1) != 0) {
            var1.writeInt64(super.access_hash);
         }

         if ((super.flags & 2) != 0) {
            var1.writeString(super.first_name);
         }

         if ((super.flags & 4) != 0) {
            var1.writeString(super.last_name);
         }

         if ((super.flags & 8) != 0) {
            var1.writeString(super.username);
         }

         if ((super.flags & 16) != 0) {
            var1.writeString(super.phone);
         }

         if ((super.flags & 32) != 0) {
            super.photo.serializeToStream(var1);
         }

         if ((super.flags & 64) != 0) {
            super.status.serializeToStream(var1);
         }

         if ((super.flags & 16384) != 0) {
            var1.writeInt32(super.bot_info_version);
         }

         if ((super.flags & 262144) != 0) {
            var1.writeString(super.restriction_reason);
         }

         if ((super.flags & 524288) != 0) {
            var1.writeString(super.bot_inline_placeholder);
         }

         if ((super.flags & 4194304) != 0) {
            var1.writeString(super.lang_code);
         }

      }
   }

   public static class TL_userContact_old extends TLRPC.TL_userContact_old2 {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt32(var2);
         super.first_name = var1.readString(var2);
         super.last_name = var1.readString(var2);
         super.access_hash = var1.readInt64(var2);
         super.phone = var1.readString(var2);
         super.photo = TLRPC.UserProfilePhoto.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.status = TLRPC.UserStatus.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.id);
         var1.writeString(super.first_name);
         var1.writeString(super.last_name);
         var1.writeInt64(super.access_hash);
         var1.writeString(super.phone);
         super.photo.serializeToStream(var1);
         super.status.serializeToStream(var1);
      }
   }

   public static class TL_userContact_old2 extends TLRPC.User {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt32(var2);
         super.first_name = var1.readString(var2);
         super.last_name = var1.readString(var2);
         super.username = var1.readString(var2);
         super.access_hash = var1.readInt64(var2);
         super.phone = var1.readString(var2);
         super.photo = TLRPC.UserProfilePhoto.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.status = TLRPC.UserStatus.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.id);
         var1.writeString(super.first_name);
         var1.writeString(super.last_name);
         var1.writeString(super.username);
         var1.writeInt64(super.access_hash);
         var1.writeString(super.phone);
         super.photo.serializeToStream(var1);
         super.status.serializeToStream(var1);
      }
   }

   public static class TL_userDeleted_old extends TLRPC.TL_userDeleted_old2 {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt32(var2);
         super.first_name = var1.readString(var2);
         super.last_name = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.id);
         var1.writeString(super.first_name);
         var1.writeString(super.last_name);
      }
   }

   public static class TL_userDeleted_old2 extends TLRPC.User {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt32(var2);
         super.first_name = var1.readString(var2);
         super.last_name = var1.readString(var2);
         super.username = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.id);
         var1.writeString(super.first_name);
         var1.writeString(super.last_name);
         var1.writeString(super.username);
      }
   }

   public static class TL_userEmpty extends TLRPC.User {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.id);
      }
   }

   public static class TL_userForeign_old extends TLRPC.TL_userForeign_old2 {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt32(var2);
         super.first_name = var1.readString(var2);
         super.last_name = var1.readString(var2);
         super.access_hash = var1.readInt64(var2);
         super.photo = TLRPC.UserProfilePhoto.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.status = TLRPC.UserStatus.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.id);
         var1.writeString(super.first_name);
         var1.writeString(super.last_name);
         var1.writeInt64(super.access_hash);
         super.photo.serializeToStream(var1);
         super.status.serializeToStream(var1);
      }
   }

   public static class TL_userForeign_old2 extends TLRPC.User {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt32(var2);
         super.first_name = var1.readString(var2);
         super.last_name = var1.readString(var2);
         super.username = var1.readString(var2);
         super.access_hash = var1.readInt64(var2);
         super.photo = TLRPC.UserProfilePhoto.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.status = TLRPC.UserStatus.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.id);
         var1.writeString(super.first_name);
         var1.writeString(super.last_name);
         var1.writeString(super.username);
         var1.writeInt64(super.access_hash);
         super.photo.serializeToStream(var1);
         super.status.serializeToStream(var1);
      }
   }

   public static class TL_userFull extends TLRPC.UserFull {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         boolean var4 = true;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.blocked = var5;
         if ((super.flags & 16) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.phone_calls_available = var5;
         if ((super.flags & 32) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.phone_calls_private = var5;
         if ((super.flags & 128) != 0) {
            var5 = var4;
         } else {
            var5 = false;
         }

         super.can_pin_message = var5;
         super.user = TLRPC.User.TLdeserialize(var1, var1.readInt32(var2), var2);
         if ((super.flags & 2) != 0) {
            super.about = var1.readString(var2);
         }

         super.link = TLRPC.TL_contacts_link.TLdeserialize(var1, var1.readInt32(var2), var2);
         if ((super.flags & 4) != 0) {
            super.profile_photo = TLRPC.Photo.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         super.notify_settings = TLRPC.PeerNotifySettings.TLdeserialize(var1, var1.readInt32(var2), var2);
         if ((super.flags & 8) != 0) {
            super.bot_info = TLRPC.BotInfo.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         if ((super.flags & 64) != 0) {
            super.pinned_msg_id = var1.readInt32(var2);
         }

         super.common_chats_count = var1.readInt32(var2);
         if ((super.flags & 2048) != 0) {
            super.folder_id = var1.readInt32(var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.blocked) {
            var2 = super.flags | 1;
         } else {
            var2 = super.flags & -2;
         }

         super.flags = var2;
         if (super.phone_calls_available) {
            var2 = super.flags | 16;
         } else {
            var2 = super.flags & -17;
         }

         super.flags = var2;
         if (super.phone_calls_private) {
            var2 = super.flags | 32;
         } else {
            var2 = super.flags & -33;
         }

         super.flags = var2;
         if (super.can_pin_message) {
            var2 = super.flags | 128;
         } else {
            var2 = super.flags & -129;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         super.user.serializeToStream(var1);
         if ((super.flags & 2) != 0) {
            var1.writeString(super.about);
         }

         super.link.serializeToStream(var1);
         if ((super.flags & 4) != 0) {
            super.profile_photo.serializeToStream(var1);
         }

         super.notify_settings.serializeToStream(var1);
         if ((super.flags & 8) != 0) {
            super.bot_info.serializeToStream(var1);
         }

         if ((super.flags & 64) != 0) {
            var1.writeInt32(super.pinned_msg_id);
         }

         var1.writeInt32(super.common_chats_count);
         if ((super.flags & 2048) != 0) {
            var1.writeInt32(super.folder_id);
         }

      }
   }

   public static class TL_userFull_layer98 extends TLRPC.TL_userFull {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         boolean var4 = true;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.blocked = var5;
         if ((super.flags & 16) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.phone_calls_available = var5;
         if ((super.flags & 32) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.phone_calls_private = var5;
         if ((super.flags & 128) != 0) {
            var5 = var4;
         } else {
            var5 = false;
         }

         super.can_pin_message = var5;
         super.user = TLRPC.User.TLdeserialize(var1, var1.readInt32(var2), var2);
         if ((super.flags & 2) != 0) {
            super.about = var1.readString(var2);
         }

         super.link = TLRPC.TL_contacts_link.TLdeserialize(var1, var1.readInt32(var2), var2);
         if ((super.flags & 4) != 0) {
            super.profile_photo = TLRPC.Photo.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         super.notify_settings = TLRPC.PeerNotifySettings.TLdeserialize(var1, var1.readInt32(var2), var2);
         if ((super.flags & 8) != 0) {
            super.bot_info = TLRPC.BotInfo.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         if ((super.flags & 64) != 0) {
            super.pinned_msg_id = var1.readInt32(var2);
         }

         super.common_chats_count = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.blocked) {
            var2 = super.flags | 1;
         } else {
            var2 = super.flags & -2;
         }

         super.flags = var2;
         if (super.phone_calls_available) {
            var2 = super.flags | 16;
         } else {
            var2 = super.flags & -17;
         }

         super.flags = var2;
         if (super.phone_calls_private) {
            var2 = super.flags | 32;
         } else {
            var2 = super.flags & -33;
         }

         super.flags = var2;
         if (super.can_pin_message) {
            var2 = super.flags | 128;
         } else {
            var2 = super.flags & -129;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         super.user.serializeToStream(var1);
         if ((super.flags & 2) != 0) {
            var1.writeString(super.about);
         }

         super.link.serializeToStream(var1);
         if ((super.flags & 4) != 0) {
            super.profile_photo.serializeToStream(var1);
         }

         super.notify_settings.serializeToStream(var1);
         if ((super.flags & 8) != 0) {
            super.bot_info.serializeToStream(var1);
         }

         if ((super.flags & 64) != 0) {
            var1.writeInt32(super.pinned_msg_id);
         }

         var1.writeInt32(super.common_chats_count);
      }
   }

   public static class TL_userProfilePhoto extends TLRPC.UserProfilePhoto {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.photo_id = var1.readInt64(var2);
         super.photo_small = TLRPC.FileLocation.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.photo_big = TLRPC.FileLocation.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.dc_id = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(super.photo_id);
         super.photo_small.serializeToStream(var1);
         super.photo_big.serializeToStream(var1);
         var1.writeInt32(super.dc_id);
      }
   }

   public static class TL_userProfilePhotoEmpty extends TLRPC.UserProfilePhoto {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_userProfilePhoto_layer97 extends TLRPC.TL_userProfilePhoto {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.photo_id = var1.readInt64(var2);
         super.photo_small = TLRPC.FileLocation.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.photo_big = TLRPC.FileLocation.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(super.photo_id);
         super.photo_small.serializeToStream(var1);
         super.photo_big.serializeToStream(var1);
      }
   }

   public static class TL_userProfilePhoto_old extends TLRPC.TL_userProfilePhoto {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.photo_small = TLRPC.FileLocation.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.photo_big = TLRPC.FileLocation.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         super.photo_small.serializeToStream(var1);
         super.photo_big.serializeToStream(var1);
      }
   }

   public static class TL_userRequest_old extends TLRPC.TL_userRequest_old2 {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt32(var2);
         super.first_name = var1.readString(var2);
         super.last_name = var1.readString(var2);
         super.access_hash = var1.readInt64(var2);
         super.phone = var1.readString(var2);
         super.photo = TLRPC.UserProfilePhoto.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.status = TLRPC.UserStatus.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.id);
         var1.writeString(super.first_name);
         var1.writeString(super.last_name);
         var1.writeInt64(super.access_hash);
         var1.writeString(super.phone);
         super.photo.serializeToStream(var1);
         super.status.serializeToStream(var1);
      }
   }

   public static class TL_userRequest_old2 extends TLRPC.User {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt32(var2);
         super.first_name = var1.readString(var2);
         super.last_name = var1.readString(var2);
         super.username = var1.readString(var2);
         super.access_hash = var1.readInt64(var2);
         super.phone = var1.readString(var2);
         super.photo = TLRPC.UserProfilePhoto.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.status = TLRPC.UserStatus.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.id);
         var1.writeString(super.first_name);
         var1.writeString(super.last_name);
         var1.writeString(super.username);
         var1.writeInt64(super.access_hash);
         var1.writeString(super.phone);
         super.photo.serializeToStream(var1);
         super.status.serializeToStream(var1);
      }
   }

   public static class TL_userSelf_old extends TLRPC.TL_userSelf_old3 {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt32(var2);
         super.first_name = var1.readString(var2);
         super.last_name = var1.readString(var2);
         super.phone = var1.readString(var2);
         super.photo = TLRPC.UserProfilePhoto.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.status = TLRPC.UserStatus.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.inactive = var1.readBool(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.id);
         var1.writeString(super.first_name);
         var1.writeString(super.last_name);
         var1.writeString(super.phone);
         super.photo.serializeToStream(var1);
         super.status.serializeToStream(var1);
         var1.writeBool(super.inactive);
      }
   }

   public static class TL_userSelf_old2 extends TLRPC.TL_userSelf_old3 {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt32(var2);
         super.first_name = var1.readString(var2);
         super.last_name = var1.readString(var2);
         super.username = var1.readString(var2);
         super.phone = var1.readString(var2);
         super.photo = TLRPC.UserProfilePhoto.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.status = TLRPC.UserStatus.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.inactive = var1.readBool(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.id);
         var1.writeString(super.first_name);
         var1.writeString(super.last_name);
         var1.writeString(super.username);
         var1.writeString(super.phone);
         super.photo.serializeToStream(var1);
         super.status.serializeToStream(var1);
         var1.writeBool(super.inactive);
      }
   }

   public static class TL_userSelf_old3 extends TLRPC.User {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt32(var2);
         super.first_name = var1.readString(var2);
         super.last_name = var1.readString(var2);
         super.username = var1.readString(var2);
         super.phone = var1.readString(var2);
         super.photo = TLRPC.UserProfilePhoto.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.status = TLRPC.UserStatus.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.id);
         var1.writeString(super.first_name);
         var1.writeString(super.last_name);
         var1.writeString(super.username);
         var1.writeString(super.phone);
         super.photo.serializeToStream(var1);
         super.status.serializeToStream(var1);
      }
   }

   public static class TL_userStatusEmpty extends TLRPC.UserStatus {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_userStatusLastMonth extends TLRPC.UserStatus {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_userStatusLastWeek extends TLRPC.UserStatus {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_userStatusOffline extends TLRPC.UserStatus {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.expires = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.expires);
      }
   }

   public static class TL_userStatusOnline extends TLRPC.UserStatus {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.expires = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.expires);
      }
   }

   public static class TL_userStatusRecently extends TLRPC.UserStatus {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_user_layer65 extends TLRPC.TL_user {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         boolean var4 = false;
         boolean var5;
         if ((var3 & 1024) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.self = var5;
         if ((super.flags & 2048) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.contact = var5;
         if ((super.flags & 4096) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.mutual_contact = var5;
         if ((super.flags & 8192) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.deleted = var5;
         if ((super.flags & 16384) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.bot = var5;
         if ((super.flags & '耀') != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.bot_chat_history = var5;
         if ((super.flags & 65536) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.bot_nochats = var5;
         if ((super.flags & 131072) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.verified = var5;
         if ((super.flags & 262144) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.restricted = var5;
         if ((super.flags & 1048576) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.min = var5;
         var5 = var4;
         if ((super.flags & 2097152) != 0) {
            var5 = true;
         }

         super.bot_inline_geo = var5;
         super.id = var1.readInt32(var2);
         if ((super.flags & 1) != 0) {
            super.access_hash = var1.readInt64(var2);
         }

         if ((super.flags & 2) != 0) {
            super.first_name = var1.readString(var2);
         }

         if ((super.flags & 4) != 0) {
            super.last_name = var1.readString(var2);
         }

         if ((super.flags & 8) != 0) {
            super.username = var1.readString(var2);
         }

         if ((super.flags & 16) != 0) {
            super.phone = var1.readString(var2);
         }

         if ((super.flags & 32) != 0) {
            super.photo = TLRPC.UserProfilePhoto.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         if ((super.flags & 64) != 0) {
            super.status = TLRPC.UserStatus.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         if ((super.flags & 16384) != 0) {
            super.bot_info_version = var1.readInt32(var2);
         }

         if ((super.flags & 262144) != 0) {
            super.restriction_reason = var1.readString(var2);
         }

         if ((super.flags & 524288) != 0) {
            super.bot_inline_placeholder = var1.readString(var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.self) {
            var2 = super.flags | 1024;
         } else {
            var2 = super.flags & -1025;
         }

         super.flags = var2;
         if (super.contact) {
            var2 = super.flags | 2048;
         } else {
            var2 = super.flags & -2049;
         }

         super.flags = var2;
         if (super.mutual_contact) {
            var2 = super.flags | 4096;
         } else {
            var2 = super.flags & -4097;
         }

         super.flags = var2;
         if (super.deleted) {
            var2 = super.flags | 8192;
         } else {
            var2 = super.flags & -8193;
         }

         super.flags = var2;
         if (super.bot) {
            var2 = super.flags | 16384;
         } else {
            var2 = super.flags & -16385;
         }

         super.flags = var2;
         if (super.bot_chat_history) {
            var2 = super.flags | '耀';
         } else {
            var2 = super.flags & -32769;
         }

         super.flags = var2;
         if (super.bot_nochats) {
            var2 = super.flags | 65536;
         } else {
            var2 = super.flags & -65537;
         }

         super.flags = var2;
         if (super.verified) {
            var2 = super.flags | 131072;
         } else {
            var2 = super.flags & -131073;
         }

         super.flags = var2;
         if (super.restricted) {
            var2 = super.flags | 262144;
         } else {
            var2 = super.flags & -262145;
         }

         super.flags = var2;
         if (super.min) {
            var2 = super.flags | 1048576;
         } else {
            var2 = super.flags & -1048577;
         }

         super.flags = var2;
         if (super.bot_inline_geo) {
            var2 = super.flags | 2097152;
         } else {
            var2 = super.flags & -2097153;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt32(super.id);
         if ((super.flags & 1) != 0) {
            var1.writeInt64(super.access_hash);
         }

         if ((super.flags & 2) != 0) {
            var1.writeString(super.first_name);
         }

         if ((super.flags & 4) != 0) {
            var1.writeString(super.last_name);
         }

         if ((super.flags & 8) != 0) {
            var1.writeString(super.username);
         }

         if ((super.flags & 16) != 0) {
            var1.writeString(super.phone);
         }

         if ((super.flags & 32) != 0) {
            super.photo.serializeToStream(var1);
         }

         if ((super.flags & 64) != 0) {
            super.status.serializeToStream(var1);
         }

         if ((super.flags & 16384) != 0) {
            var1.writeInt32(super.bot_info_version);
         }

         if ((super.flags & 262144) != 0) {
            var1.writeString(super.restriction_reason);
         }

         if ((super.flags & 524288) != 0) {
            var1.writeString(super.bot_inline_placeholder);
         }

      }
   }

   public static class TL_user_old extends TLRPC.TL_user {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         boolean var4 = false;
         boolean var5;
         if ((var3 & 1024) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.self = var5;
         if ((super.flags & 2048) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.contact = var5;
         if ((super.flags & 4096) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.mutual_contact = var5;
         if ((super.flags & 8192) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.deleted = var5;
         if ((super.flags & 16384) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.bot = var5;
         if ((super.flags & '耀') != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.bot_chat_history = var5;
         if ((super.flags & 65536) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.bot_nochats = var5;
         if ((super.flags & 131072) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.verified = var5;
         var5 = var4;
         if ((super.flags & 262144) != 0) {
            var5 = true;
         }

         super.explicit_content = var5;
         super.id = var1.readInt32(var2);
         if ((super.flags & 1) != 0) {
            super.access_hash = var1.readInt64(var2);
         }

         if ((super.flags & 2) != 0) {
            super.first_name = var1.readString(var2);
         }

         if ((super.flags & 4) != 0) {
            super.last_name = var1.readString(var2);
         }

         if ((super.flags & 8) != 0) {
            super.username = var1.readString(var2);
         }

         if ((super.flags & 16) != 0) {
            super.phone = var1.readString(var2);
         }

         if ((super.flags & 32) != 0) {
            super.photo = TLRPC.UserProfilePhoto.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         if ((super.flags & 64) != 0) {
            super.status = TLRPC.UserStatus.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         if ((super.flags & 16384) != 0) {
            super.bot_info_version = var1.readInt32(var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (super.self) {
            var2 = super.flags | 1024;
         } else {
            var2 = super.flags & -1025;
         }

         super.flags = var2;
         if (super.contact) {
            var2 = super.flags | 2048;
         } else {
            var2 = super.flags & -2049;
         }

         super.flags = var2;
         if (super.mutual_contact) {
            var2 = super.flags | 4096;
         } else {
            var2 = super.flags & -4097;
         }

         super.flags = var2;
         if (super.deleted) {
            var2 = super.flags | 8192;
         } else {
            var2 = super.flags & -8193;
         }

         super.flags = var2;
         if (super.bot) {
            var2 = super.flags | 16384;
         } else {
            var2 = super.flags & -16385;
         }

         super.flags = var2;
         if (super.bot_chat_history) {
            var2 = super.flags | '耀';
         } else {
            var2 = super.flags & -32769;
         }

         super.flags = var2;
         if (super.bot_nochats) {
            var2 = super.flags | 65536;
         } else {
            var2 = super.flags & -65537;
         }

         super.flags = var2;
         if (super.verified) {
            var2 = super.flags | 131072;
         } else {
            var2 = super.flags & -131073;
         }

         super.flags = var2;
         if (super.explicit_content) {
            var2 = super.flags | 262144;
         } else {
            var2 = super.flags & -262145;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt32(super.id);
         if ((super.flags & 1) != 0) {
            var1.writeInt64(super.access_hash);
         }

         if ((super.flags & 2) != 0) {
            var1.writeString(super.first_name);
         }

         if ((super.flags & 4) != 0) {
            var1.writeString(super.last_name);
         }

         if ((super.flags & 8) != 0) {
            var1.writeString(super.username);
         }

         if ((super.flags & 16) != 0) {
            var1.writeString(super.phone);
         }

         if ((super.flags & 32) != 0) {
            super.photo.serializeToStream(var1);
         }

         if ((super.flags & 64) != 0) {
            super.status.serializeToStream(var1);
         }

         if ((super.flags & 16384) != 0) {
            var1.writeInt32(super.bot_info_version);
         }

      }
   }

   public static class TL_users_getFullUser extends TLObject {
      public static int constructor;
      public TLRPC.InputUser id;

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         return TLRPC.UserFull.TLdeserialize(var1, var2, var3);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         this.id.serializeToStream(var1);
      }
   }

   public static class TL_users_getUsers extends TLObject {
      public static int constructor;
      public ArrayList id = new ArrayList();

      public TLObject deserializeResponse(AbstractSerializedData var1, int var2, boolean var3) {
         TLRPC.Vector var4 = new TLRPC.Vector();
         int var5 = var1.readInt32(var3);

         for(var2 = 0; var2 < var5; ++var2) {
            TLRPC.User var6 = TLRPC.User.TLdeserialize(var1, var1.readInt32(var3), var3);
            if (var6 == null) {
               return var4;
            }

            var4.objects.add(var6);
         }

         return var4;
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(481674261);
         int var2 = this.id.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.InputUser)this.id.get(var3)).serializeToStream(var1);
         }

      }
   }

   public static class TL_videoEmpty_layer45 extends TLRPC.Video {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt64(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(super.id);
      }
   }

   public static class TL_videoEncrypted extends TLRPC.TL_video_layer45 {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt64(var2);
         super.access_hash = var1.readInt64(var2);
         super.user_id = var1.readInt32(var2);
         super.date = var1.readInt32(var2);
         super.caption = var1.readString(var2);
         super.duration = var1.readInt32(var2);
         super.size = var1.readInt32(var2);
         super.thumb = TLRPC.PhotoSize.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.dc_id = var1.readInt32(var2);
         super.w = var1.readInt32(var2);
         super.h = var1.readInt32(var2);
         super.key = var1.readByteArray(var2);
         super.iv = var1.readByteArray(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(super.id);
         var1.writeInt64(super.access_hash);
         var1.writeInt32(super.user_id);
         var1.writeInt32(super.date);
         var1.writeString(super.caption);
         var1.writeInt32(super.duration);
         var1.writeInt32(super.size);
         super.thumb.serializeToStream(var1);
         var1.writeInt32(super.dc_id);
         var1.writeInt32(super.w);
         var1.writeInt32(super.h);
         var1.writeByteArray(super.key);
         var1.writeByteArray(super.iv);
      }
   }

   public static class TL_video_layer45 extends TLRPC.Video {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt64(var2);
         super.access_hash = var1.readInt64(var2);
         super.date = var1.readInt32(var2);
         super.duration = var1.readInt32(var2);
         super.mime_type = var1.readString(var2);
         super.size = var1.readInt32(var2);
         super.thumb = TLRPC.PhotoSize.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.dc_id = var1.readInt32(var2);
         super.w = var1.readInt32(var2);
         super.h = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(super.id);
         var1.writeInt64(super.access_hash);
         var1.writeInt32(super.date);
         var1.writeInt32(super.duration);
         var1.writeString(super.mime_type);
         var1.writeInt32(super.size);
         super.thumb.serializeToStream(var1);
         var1.writeInt32(super.dc_id);
         var1.writeInt32(super.w);
         var1.writeInt32(super.h);
      }
   }

   public static class TL_video_old extends TLRPC.TL_video_layer45 {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt64(var2);
         super.access_hash = var1.readInt64(var2);
         super.user_id = var1.readInt32(var2);
         super.date = var1.readInt32(var2);
         super.caption = var1.readString(var2);
         super.duration = var1.readInt32(var2);
         super.size = var1.readInt32(var2);
         super.thumb = TLRPC.PhotoSize.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.dc_id = var1.readInt32(var2);
         super.w = var1.readInt32(var2);
         super.h = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(super.id);
         var1.writeInt64(super.access_hash);
         var1.writeInt32(super.user_id);
         var1.writeInt32(super.date);
         var1.writeString(super.caption);
         var1.writeInt32(super.duration);
         var1.writeInt32(super.size);
         super.thumb.serializeToStream(var1);
         var1.writeInt32(super.dc_id);
         var1.writeInt32(super.w);
         var1.writeInt32(super.h);
      }
   }

   public static class TL_video_old2 extends TLRPC.TL_video_layer45 {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt64(var2);
         super.access_hash = var1.readInt64(var2);
         super.user_id = var1.readInt32(var2);
         super.date = var1.readInt32(var2);
         super.caption = var1.readString(var2);
         super.duration = var1.readInt32(var2);
         super.mime_type = var1.readString(var2);
         super.size = var1.readInt32(var2);
         super.thumb = TLRPC.PhotoSize.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.dc_id = var1.readInt32(var2);
         super.w = var1.readInt32(var2);
         super.h = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(super.id);
         var1.writeInt64(super.access_hash);
         var1.writeInt32(super.user_id);
         var1.writeInt32(super.date);
         var1.writeString(super.caption);
         var1.writeInt32(super.duration);
         var1.writeString(super.mime_type);
         var1.writeInt32(super.size);
         super.thumb.serializeToStream(var1);
         var1.writeInt32(super.dc_id);
         var1.writeInt32(super.w);
         var1.writeInt32(super.h);
      }
   }

   public static class TL_video_old3 extends TLRPC.TL_video_layer45 {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt64(var2);
         super.access_hash = var1.readInt64(var2);
         super.user_id = var1.readInt32(var2);
         super.date = var1.readInt32(var2);
         super.duration = var1.readInt32(var2);
         super.size = var1.readInt32(var2);
         super.thumb = TLRPC.PhotoSize.TLdeserialize(var1, var1.readInt32(var2), var2);
         super.dc_id = var1.readInt32(var2);
         super.w = var1.readInt32(var2);
         super.h = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(super.id);
         var1.writeInt64(super.access_hash);
         var1.writeInt32(super.user_id);
         var1.writeInt32(super.date);
         var1.writeInt32(super.duration);
         var1.writeInt32(super.size);
         super.thumb.serializeToStream(var1);
         var1.writeInt32(super.dc_id);
         var1.writeInt32(super.w);
         var1.writeInt32(super.h);
      }
   }

   public static class TL_wallPaper extends TLRPC.WallPaper {
      public static int constructor;
      public long access_hash;
      public boolean creator;
      public boolean dark;
      public TLRPC.Document document;
      public int flags;
      public long id;
      public boolean isDefault;
      public boolean pattern;
      public TLRPC.TL_wallPaperSettings settings;
      public String slug;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.id = var1.readInt64(var2);
         this.flags = var1.readInt32(var2);
         int var3 = this.flags;
         boolean var4 = true;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.creator = var5;
         if ((this.flags & 2) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.isDefault = var5;
         if ((this.flags & 8) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.pattern = var5;
         if ((this.flags & 16) != 0) {
            var5 = var4;
         } else {
            var5 = false;
         }

         this.dark = var5;
         this.access_hash = var1.readInt64(var2);
         this.slug = var1.readString(var2);
         this.document = TLRPC.Document.TLdeserialize(var1, var1.readInt32(var2), var2);
         if ((this.flags & 4) != 0) {
            this.settings = TLRPC.TL_wallPaperSettings.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(this.id);
         int var2;
         if (this.creator) {
            var2 = this.flags | 1;
         } else {
            var2 = this.flags & -2;
         }

         this.flags = var2;
         if (this.isDefault) {
            var2 = this.flags | 2;
         } else {
            var2 = this.flags & -3;
         }

         this.flags = var2;
         if (this.pattern) {
            var2 = this.flags | 8;
         } else {
            var2 = this.flags & -9;
         }

         this.flags = var2;
         if (this.dark) {
            var2 = this.flags | 16;
         } else {
            var2 = this.flags & -17;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         var1.writeInt64(this.access_hash);
         var1.writeString(this.slug);
         this.document.serializeToStream(var1);
         if ((this.flags & 4) != 0) {
            this.settings.serializeToStream(var1);
         }

      }
   }

   public static class TL_wallPaperSettings extends TLObject {
      public static int constructor;
      public int background_color;
      public boolean blur;
      public int flags;
      public int intensity;
      public boolean motion;

      public static TLRPC.TL_wallPaperSettings TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_wallPaperSettings", var1));
            }
         } else {
            TLRPC.TL_wallPaperSettings var3 = new TLRPC.TL_wallPaperSettings();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.flags = var1.readInt32(var2);
         int var3 = this.flags;
         boolean var4 = false;
         boolean var5;
         if ((var3 & 2) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         this.blur = var5;
         var5 = var4;
         if ((this.flags & 4) != 0) {
            var5 = true;
         }

         this.motion = var5;
         if ((this.flags & 1) != 0) {
            this.background_color = var1.readInt32(var2);
         }

         if ((this.flags & 8) != 0) {
            this.intensity = var1.readInt32(var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         int var2;
         if (this.blur) {
            var2 = this.flags | 2;
         } else {
            var2 = this.flags & -3;
         }

         this.flags = var2;
         if (this.motion) {
            var2 = this.flags | 4;
         } else {
            var2 = this.flags & -5;
         }

         this.flags = var2;
         var1.writeInt32(this.flags);
         if ((this.flags & 1) != 0) {
            var1.writeInt32(this.background_color);
         }

         if ((this.flags & 8) != 0) {
            var1.writeInt32(this.intensity);
         }

      }
   }

   public static class TL_wallPaper_layer94 extends TLRPC.TL_wallPaper {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt64(var2);
         super.flags = var1.readInt32(var2);
         int var3 = super.flags;
         boolean var4 = true;
         boolean var5;
         if ((var3 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         super.creator = var5;
         if ((super.flags & 2) != 0) {
            var5 = var4;
         } else {
            var5 = false;
         }

         super.isDefault = var5;
         super.access_hash = var1.readInt64(var2);
         super.slug = var1.readString(var2);
         super.document = TLRPC.Document.TLdeserialize(var1, var1.readInt32(var2), var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(super.id);
         int var2;
         if (super.creator) {
            var2 = super.flags | 1;
         } else {
            var2 = super.flags & -2;
         }

         super.flags = var2;
         if (super.isDefault) {
            var2 = super.flags | 2;
         } else {
            var2 = super.flags & -3;
         }

         super.flags = var2;
         var1.writeInt32(super.flags);
         var1.writeInt64(super.access_hash);
         var1.writeString(super.slug);
         super.document.serializeToStream(var1);
      }
   }

   public static class TL_webAuthorization extends TLObject {
      public static int constructor;
      public int bot_id;
      public String browser;
      public int date_active;
      public int date_created;
      public String domain;
      public long hash;
      public String ip;
      public String platform;
      public String region;

      public static TLRPC.TL_webAuthorization TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         if (constructor != var1) {
            if (!var2) {
               return null;
            } else {
               throw new RuntimeException(String.format("can't parse magic %x in TL_webAuthorization", var1));
            }
         } else {
            TLRPC.TL_webAuthorization var3 = new TLRPC.TL_webAuthorization();
            var3.readParams(var0, var2);
            return var3;
         }
      }

      public void readParams(AbstractSerializedData var1, boolean var2) {
         this.hash = var1.readInt64(var2);
         this.bot_id = var1.readInt32(var2);
         this.domain = var1.readString(var2);
         this.browser = var1.readString(var2);
         this.platform = var1.readString(var2);
         this.date_created = var1.readInt32(var2);
         this.date_active = var1.readInt32(var2);
         this.ip = var1.readString(var2);
         this.region = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(this.hash);
         var1.writeInt32(this.bot_id);
         var1.writeString(this.domain);
         var1.writeString(this.browser);
         var1.writeString(this.platform);
         var1.writeInt32(this.date_created);
         var1.writeInt32(this.date_active);
         var1.writeString(this.ip);
         var1.writeString(this.region);
      }
   }

   public static class TL_webDocument extends TLRPC.WebDocument {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.url = var1.readString(var2);
         super.access_hash = var1.readInt64(var2);
         super.size = var1.readInt32(var2);
         super.mime_type = var1.readString(var2);
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.DocumentAttribute var5 = TLRPC.DocumentAttribute.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               super.attributes.add(var5);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(super.url);
         var1.writeInt64(super.access_hash);
         var1.writeInt32(super.size);
         var1.writeString(super.mime_type);
         var1.writeInt32(481674261);
         int var2 = super.attributes.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.DocumentAttribute)super.attributes.get(var3)).serializeToStream(var1);
         }

      }
   }

   public static class TL_webDocumentNoProxy extends TLRPC.WebDocument {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.url = var1.readString(var2);
         super.size = var1.readInt32(var2);
         super.mime_type = var1.readString(var2);
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.DocumentAttribute var5 = TLRPC.DocumentAttribute.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               super.attributes.add(var5);
            }

         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(super.url);
         var1.writeInt32(super.size);
         var1.writeString(super.mime_type);
         var1.writeInt32(481674261);
         int var2 = super.attributes.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.DocumentAttribute)super.attributes.get(var3)).serializeToStream(var1);
         }

      }
   }

   public static class TL_webDocument_layer81 extends TLRPC.TL_webDocument {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.url = var1.readString(var2);
         super.access_hash = var1.readInt64(var2);
         super.size = var1.readInt32(var2);
         super.mime_type = var1.readString(var2);
         int var3 = var1.readInt32(var2);
         int var4 = 0;
         if (var3 != 481674261) {
            if (var2) {
               throw new RuntimeException(String.format("wrong Vector magic, got %x", var3));
            }
         } else {
            for(var3 = var1.readInt32(var2); var4 < var3; ++var4) {
               TLRPC.DocumentAttribute var5 = TLRPC.DocumentAttribute.TLdeserialize(var1, var1.readInt32(var2), var2);
               if (var5 == null) {
                  return;
               }

               super.attributes.add(var5);
            }

            var1.readInt32(var2);
         }
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(super.url);
         var1.writeInt64(super.access_hash);
         var1.writeInt32(super.size);
         var1.writeString(super.mime_type);
         var1.writeInt32(481674261);
         int var2 = super.attributes.size();
         var1.writeInt32(var2);

         for(int var3 = 0; var3 < var2; ++var3) {
            ((TLRPC.DocumentAttribute)super.attributes.get(var3)).serializeToStream(var1);
         }

         var1.writeInt32(0);
      }
   }

   public static class TL_webPage extends TLRPC.WebPage {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         super.id = var1.readInt64(var2);
         super.url = var1.readString(var2);
         super.display_url = var1.readString(var2);
         super.hash = var1.readInt32(var2);
         if ((super.flags & 1) != 0) {
            super.type = var1.readString(var2);
         }

         if ((super.flags & 2) != 0) {
            super.site_name = var1.readString(var2);
         }

         if ((super.flags & 4) != 0) {
            super.title = var1.readString(var2);
         }

         if ((super.flags & 8) != 0) {
            super.description = var1.readString(var2);
         }

         if ((super.flags & 16) != 0) {
            super.photo = TLRPC.Photo.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         if ((super.flags & 32) != 0) {
            super.embed_url = var1.readString(var2);
         }

         if ((super.flags & 32) != 0) {
            super.embed_type = var1.readString(var2);
         }

         if ((super.flags & 64) != 0) {
            super.embed_width = var1.readInt32(var2);
         }

         if ((super.flags & 64) != 0) {
            super.embed_height = var1.readInt32(var2);
         }

         if ((super.flags & 128) != 0) {
            super.duration = var1.readInt32(var2);
         }

         if ((super.flags & 256) != 0) {
            super.author = var1.readString(var2);
         }

         if ((super.flags & 512) != 0) {
            super.document = TLRPC.Document.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         if ((super.flags & 1024) != 0) {
            super.cached_page = TLRPC.Page.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.flags);
         var1.writeInt64(super.id);
         var1.writeString(super.url);
         var1.writeString(super.display_url);
         var1.writeInt32(super.hash);
         if ((super.flags & 1) != 0) {
            var1.writeString(super.type);
         }

         if ((super.flags & 2) != 0) {
            var1.writeString(super.site_name);
         }

         if ((super.flags & 4) != 0) {
            var1.writeString(super.title);
         }

         if ((super.flags & 8) != 0) {
            var1.writeString(super.description);
         }

         if ((super.flags & 16) != 0) {
            super.photo.serializeToStream(var1);
         }

         if ((super.flags & 32) != 0) {
            var1.writeString(super.embed_url);
         }

         if ((super.flags & 32) != 0) {
            var1.writeString(super.embed_type);
         }

         if ((super.flags & 64) != 0) {
            var1.writeInt32(super.embed_width);
         }

         if ((super.flags & 64) != 0) {
            var1.writeInt32(super.embed_height);
         }

         if ((super.flags & 128) != 0) {
            var1.writeInt32(super.duration);
         }

         if ((super.flags & 256) != 0) {
            var1.writeString(super.author);
         }

         if ((super.flags & 512) != 0) {
            super.document.serializeToStream(var1);
         }

         if ((super.flags & 1024) != 0) {
            super.cached_page.serializeToStream(var1);
         }

      }
   }

   public static class TL_webPageEmpty extends TLRPC.WebPage {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt64(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(super.id);
      }
   }

   public static class TL_webPageNotModified extends TLRPC.WebPage {
      public static int constructor;

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
      }
   }

   public static class TL_webPagePending extends TLRPC.WebPage {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.id = var1.readInt64(var2);
         super.date = var1.readInt32(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt64(super.id);
         var1.writeInt32(super.date);
      }
   }

   public static class TL_webPageUrlPending extends TLRPC.WebPage {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.url = var1.readString(var2);
      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeString(super.url);
      }
   }

   public static class TL_webPage_layer58 extends TLRPC.TL_webPage {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         super.id = var1.readInt64(var2);
         super.url = var1.readString(var2);
         super.display_url = var1.readString(var2);
         if ((super.flags & 1) != 0) {
            super.type = var1.readString(var2);
         }

         if ((super.flags & 2) != 0) {
            super.site_name = var1.readString(var2);
         }

         if ((super.flags & 4) != 0) {
            super.title = var1.readString(var2);
         }

         if ((super.flags & 8) != 0) {
            super.description = var1.readString(var2);
         }

         if ((super.flags & 16) != 0) {
            super.photo = TLRPC.Photo.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         if ((super.flags & 32) != 0) {
            super.embed_url = var1.readString(var2);
         }

         if ((super.flags & 32) != 0) {
            super.embed_type = var1.readString(var2);
         }

         if ((super.flags & 64) != 0) {
            super.embed_width = var1.readInt32(var2);
         }

         if ((super.flags & 64) != 0) {
            super.embed_height = var1.readInt32(var2);
         }

         if ((super.flags & 128) != 0) {
            super.duration = var1.readInt32(var2);
         }

         if ((super.flags & 256) != 0) {
            super.author = var1.readString(var2);
         }

         if ((super.flags & 512) != 0) {
            super.document = TLRPC.Document.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.flags);
         var1.writeInt64(super.id);
         var1.writeString(super.url);
         var1.writeString(super.display_url);
         if ((super.flags & 1) != 0) {
            var1.writeString(super.type);
         }

         if ((super.flags & 2) != 0) {
            var1.writeString(super.site_name);
         }

         if ((super.flags & 4) != 0) {
            var1.writeString(super.title);
         }

         if ((super.flags & 8) != 0) {
            var1.writeString(super.description);
         }

         if ((super.flags & 16) != 0) {
            super.photo.serializeToStream(var1);
         }

         if ((super.flags & 32) != 0) {
            var1.writeString(super.embed_url);
         }

         if ((super.flags & 32) != 0) {
            var1.writeString(super.embed_type);
         }

         if ((super.flags & 64) != 0) {
            var1.writeInt32(super.embed_width);
         }

         if ((super.flags & 64) != 0) {
            var1.writeInt32(super.embed_height);
         }

         if ((super.flags & 128) != 0) {
            var1.writeInt32(super.duration);
         }

         if ((super.flags & 256) != 0) {
            var1.writeString(super.author);
         }

         if ((super.flags & 512) != 0) {
            super.document.serializeToStream(var1);
         }

      }
   }

   public static class TL_webPage_old extends TLRPC.TL_webPage {
      public static int constructor;

      public void readParams(AbstractSerializedData var1, boolean var2) {
         super.flags = var1.readInt32(var2);
         super.id = var1.readInt64(var2);
         super.url = var1.readString(var2);
         super.display_url = var1.readString(var2);
         if ((super.flags & 1) != 0) {
            super.type = var1.readString(var2);
         }

         if ((super.flags & 2) != 0) {
            super.site_name = var1.readString(var2);
         }

         if ((super.flags & 4) != 0) {
            super.title = var1.readString(var2);
         }

         if ((super.flags & 8) != 0) {
            super.description = var1.readString(var2);
         }

         if ((super.flags & 16) != 0) {
            super.photo = TLRPC.Photo.TLdeserialize(var1, var1.readInt32(var2), var2);
         }

         if ((super.flags & 32) != 0) {
            super.embed_url = var1.readString(var2);
         }

         if ((super.flags & 32) != 0) {
            super.embed_type = var1.readString(var2);
         }

         if ((super.flags & 64) != 0) {
            super.embed_width = var1.readInt32(var2);
         }

         if ((super.flags & 64) != 0) {
            super.embed_height = var1.readInt32(var2);
         }

         if ((super.flags & 128) != 0) {
            super.duration = var1.readInt32(var2);
         }

         if ((super.flags & 256) != 0) {
            super.author = var1.readString(var2);
         }

      }

      public void serializeToStream(AbstractSerializedData var1) {
         var1.writeInt32(constructor);
         var1.writeInt32(super.flags);
         var1.writeInt64(super.id);
         var1.writeString(super.url);
         var1.writeString(super.display_url);
         if ((super.flags & 1) != 0) {
            var1.writeString(super.type);
         }

         if ((super.flags & 2) != 0) {
            var1.writeString(super.site_name);
         }

         if ((super.flags & 4) != 0) {
            var1.writeString(super.title);
         }

         if ((super.flags & 8) != 0) {
            var1.writeString(super.description);
         }

         if ((super.flags & 16) != 0) {
            super.photo.serializeToStream(var1);
         }

         if ((super.flags & 32) != 0) {
            var1.writeString(super.embed_url);
         }

         if ((super.flags & 32) != 0) {
            var1.writeString(super.embed_type);
         }

         if ((super.flags & 64) != 0) {
            var1.writeInt32(super.embed_width);
         }

         if ((super.flags & 64) != 0) {
            var1.writeInt32(super.embed_height);
         }

         if ((super.flags & 128) != 0) {
            var1.writeInt32(super.duration);
         }

         if ((super.flags & 256) != 0) {
            var1.writeString(super.author);
         }

      }
   }

   public abstract static class TopPeerCategory extends TLObject {
      public static TLRPC.TopPeerCategory TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         switch(var1) {
         case -1472172887:
            var3 = new TLRPC.TL_topPeerCategoryForwardUsers();
            break;
         case -1419371685:
            var3 = new TLRPC.TL_topPeerCategoryBotsPM();
            break;
         case -1122524854:
            var3 = new TLRPC.TL_topPeerCategoryGroups();
            break;
         case -68239120:
            var3 = new TLRPC.TL_topPeerCategoryForwardChats();
            break;
         case 104314861:
            var3 = new TLRPC.TL_topPeerCategoryCorrespondents();
            break;
         case 344356834:
            var3 = new TLRPC.TL_topPeerCategoryBotsInline();
            break;
         case 371037736:
            var3 = new TLRPC.TL_topPeerCategoryChannels();
            break;
         case 511092620:
            var3 = new TLRPC.TL_topPeerCategoryPhoneCalls();
            break;
         default:
            var3 = null;
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in TopPeerCategory", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.TopPeerCategory)var3;
         }
      }
   }

   public abstract static class Update extends TLObject {
      public static TLRPC.Update TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         switch(var1) {
         case -2131957734:
            var3 = new TLRPC.TL_updateUserBlocked();
            break;
         case -2046916883:
            var3 = new TLRPC.TL_updateGroupCall();
            break;
         case -1987495099:
            var3 = new TLRPC.TL_updateChannelReadMessagesContents();
            break;
         case -1906403213:
            var3 = new TLRPC.TL_updateDcOptions();
            break;
         case -1821035490:
            var3 = new TLRPC.TL_updateSavedGifs();
            break;
         case -1791935732:
            var3 = new TLRPC.TL_updateUserPhoto();
            break;
         case -1738988427:
            var3 = new TLRPC.TL_updateChannelPinnedMessage();
            break;
         case -1734268085:
            var3 = new TLRPC.TL_updateChannelMessageViews();
            break;
         case -1706939360:
            var3 = new TLRPC.TL_updateRecentStickers();
            break;
         case -1704596961:
            var3 = new TLRPC.TL_updateChatUserTyping();
            break;
         case -1667805217:
            var3 = new TLRPC.TL_updateReadHistoryInbox();
            break;
         case -1657903163:
            var3 = new TLRPC.TL_updateContactLink();
            break;
         case -1576161051:
            var3 = new TLRPC.TL_updateDeleteMessages();
            break;
         case -1574314746:
            var3 = new TLRPC.TL_updateConfig();
            break;
         case -1489818765:
            var3 = new TLRPC.TL_updateUserName();
            break;
         case -1425052898:
            var3 = new TLRPC.TL_updatePhoneCall();
            break;
         case -1398708869:
            var3 = new TLRPC.TL_updateMessagePoll();
            break;
         case -1264392051:
            var3 = new TLRPC.TL_updateEncryption();
            break;
         case -1232070311:
            var3 = new TLRPC.TL_updateChatParticipantAdmin();
            break;
         case -1227598250:
            var3 = new TLRPC.TL_updateChannel();
            break;
         case -1094555409:
            var3 = new TLRPC.TL_updateNotifySettings();
            break;
         case -1015733815:
            var3 = new TLRPC.TL_updateDeleteChannelMessages();
            break;
         case -519195831:
            var3 = new TLRPC.TL_updateChatPinnedMessage();
            break;
         case -513517117:
            var3 = new TLRPC.TL_updateDialogUnreadMark();
            break;
         case -469536605:
            var3 = new TLRPC.TL_updateEditMessage();
            break;
         case -451831443:
            var3 = new TLRPC.TL_updateFavedStickers();
            break;
         case -364179876:
            var3 = new TLRPC.TL_updateChatParticipantAdd();
            break;
         case -352032773:
            var3 = new TLRPC.TL_updateChannelTooLong();
            break;
         case -337352679:
            var3 = new TLRPC.TL_updateServiceNotification();
            break;
         case -299124375:
            var3 = new TLRPC.TL_updateDraftMessage();
            break;
         case -298113238:
            var3 = new TLRPC.TL_updatePrivacy();
            break;
         case -99664734:
            var3 = new TLRPC.TL_updatePinnedDialogs();
            break;
         case 92188360:
            var3 = new TLRPC.TL_updateGroupCallParticipant();
            break;
         case 125178264:
            var3 = new TLRPC.TL_updateChatParticipants();
            break;
         case 196268545:
            var3 = new TLRPC.TL_updateStickerSetsOrder();
            break;
         case 314130811:
            var3 = new TLRPC.TL_updateUserPhone();
            break;
         case 314359194:
            var3 = new TLRPC.TL_updateNewEncryptedMessage();
            break;
         case 386986326:
            var3 = new TLRPC.TL_updateEncryptedChatTyping();
            break;
         case 422972864:
            var3 = new TLRPC.TL_updateFolderPeers();
            break;
         case 457133559:
            var3 = new TLRPC.TL_updateEditChannelMessage();
            break;
         case 469489699:
            var3 = new TLRPC.TL_updateUserStatus();
            break;
         case 522914557:
            var3 = new TLRPC.TL_updateNewMessage();
            break;
         case 634833351:
            var3 = new TLRPC.TL_updateReadChannelOutbox();
            break;
         case 791617983:
            var3 = new TLRPC.TL_updateReadHistoryOutbox();
            break;
         case 856380452:
            var3 = new TLRPC.TL_updateReadChannelInbox();
            break;
         case 956179895:
            var3 = new TLRPC.TL_updateEncryptedMessagesRead();
            break;
         case 1081547008:
            var3 = new TLRPC.TL_updateChannelWebPage();
            break;
         case 1135492588:
            var3 = new TLRPC.TL_updateStickerSets();
            break;
         case 1180041828:
            var3 = new TLRPC.TL_updateLangPackTooLong();
            break;
         case 1279515160:
            var3 = new TLRPC.TL_updateUserPinnedMessage();
            break;
         case 1318109142:
            var3 = new TLRPC.TL_updateMessageID();
            break;
         case 1421875280:
            var3 = new TLRPC.TL_updateChatDefaultBannedRights();
            break;
         case 1442983757:
            var3 = new TLRPC.TL_updateLangPack();
            break;
         case 1461528386:
            var3 = new TLRPC.TL_updateReadFeaturedStickers();
            break;
         case 1548249383:
            var3 = new TLRPC.TL_updateUserTyping();
            break;
         case 1656358105:
            var3 = new TLRPC.TL_updateNewChannelMessage();
            break;
         case 1753886890:
            var3 = new TLRPC.TL_updateNewStickerSet();
            break;
         case 1757493555:
            var3 = new TLRPC.TL_updateReadMessagesContents();
            break;
         case 1851755554:
            var3 = new TLRPC.TL_updateChatParticipantDelete();
            break;
         case 1852826908:
            var3 = new TLRPC.TL_updateDialogPinned();
            break;
         case 1887741886:
            var3 = new TLRPC.TL_updateContactsReset();
            break;
         case 1893427255:
            var3 = new TLRPC.TL_updateChannelAvailableMessages();
            break;
         case 2139689491:
            var3 = new TLRPC.TL_updateWebPage();
            break;
         default:
            var3 = null;
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in Update", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.Update)var3;
         }
      }
   }

   public abstract static class Updates extends TLObject {
      public int chat_id;
      public ArrayList chats = new ArrayList();
      public int date;
      public ArrayList entities = new ArrayList();
      public int flags;
      public int from_id;
      public TLRPC.MessageFwdHeader fwd_from;
      public int id;
      public TLRPC.MessageMedia media;
      public boolean media_unread;
      public boolean mentioned;
      public String message;
      public boolean out;
      public int pts;
      public int pts_count;
      public int reply_to_msg_id;
      public int seq;
      public int seq_start;
      public boolean silent;
      public TLRPC.Update update;
      public ArrayList updates = new ArrayList();
      public int user_id;
      public ArrayList users = new ArrayList();
      public int via_bot_id;

      public static TLRPC.Updates TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         switch(var1) {
         case -1857044719:
            var3 = new TLRPC.TL_updateShortMessage();
            break;
         case -484987010:
            var3 = new TLRPC.TL_updatesTooLong();
            break;
         case 301019932:
            var3 = new TLRPC.TL_updateShortSentMessage();
            break;
         case 377562760:
            var3 = new TLRPC.TL_updateShortChatMessage();
            break;
         case 1918567619:
            var3 = new TLRPC.TL_updatesCombined();
            break;
         case 1957577280:
            var3 = new TLRPC.TL_updates();
            break;
         case 2027216577:
            var3 = new TLRPC.TL_updateShort();
            break;
         default:
            var3 = null;
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in Updates", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.Updates)var3;
         }
      }
   }

   public abstract static class UrlAuthResult extends TLObject {
      public static TLRPC.UrlAuthResult TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != -1886646706) {
            if (var1 != -1831650802) {
               if (var1 != -1445536993) {
                  var3 = null;
               } else {
                  var3 = new TLRPC.TL_urlAuthResultDefault();
               }
            } else {
               var3 = new TLRPC.TL_urlAuthResultRequest();
            }
         } else {
            var3 = new TLRPC.TL_urlAuthResultAccepted();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in UrlAuthResult", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.UrlAuthResult)var3;
         }
      }
   }

   public abstract static class User extends TLObject {
      public long access_hash;
      public boolean bot;
      public boolean bot_chat_history;
      public int bot_info_version;
      public boolean bot_inline_geo;
      public String bot_inline_placeholder;
      public boolean bot_nochats;
      public boolean contact;
      public boolean deleted;
      public boolean explicit_content;
      public String first_name;
      public int flags;
      public int id;
      public boolean inactive;
      public String lang_code;
      public String last_name;
      public boolean min;
      public boolean mutual_contact;
      public String phone;
      public TLRPC.UserProfilePhoto photo;
      public boolean restricted;
      public String restriction_reason;
      public boolean scam;
      public boolean self;
      public TLRPC.UserStatus status;
      public boolean support;
      public String username;
      public boolean verified;

      public static TLRPC.User TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         switch(var1) {
         case -1298475060:
            var3 = new TLRPC.TL_userDeleted_old();
            break;
         case -894214632:
            var3 = new TLRPC.TL_userContact_old2();
            break;
         case -787638374:
            var3 = new TLRPC.TL_user_layer65();
            break;
         case -704549510:
            var3 = new TLRPC.TL_userDeleted_old2();
            break;
         case -640891665:
            var3 = new TLRPC.TL_userRequest_old2();
            break;
         case -218397927:
            var3 = new TLRPC.TL_userContact_old();
            break;
         case 123533224:
            var3 = new TLRPC.TL_userForeign_old2();
            break;
         case 476112392:
            var3 = new TLRPC.TL_userSelf_old3();
            break;
         case 537022650:
            var3 = new TLRPC.TL_userEmpty();
            break;
         case 585404530:
            var3 = new TLRPC.TL_user_old();
            break;
         case 585682608:
            var3 = new TLRPC.TL_userRequest_old();
            break;
         case 773059779:
            var3 = new TLRPC.TL_user();
            break;
         case 1377093789:
            var3 = new TLRPC.TL_userForeign_old();
            break;
         case 1879553105:
            var3 = new TLRPC.TL_userSelf_old2();
            break;
         case 1912944108:
            var3 = new TLRPC.TL_userSelf_old();
            break;
         default:
            var3 = null;
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in User", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.User)var3;
         }
      }
   }

   public abstract static class UserFull extends TLObject {
      public String about;
      public boolean blocked;
      public TLRPC.BotInfo bot_info;
      public boolean can_pin_message;
      public int common_chats_count;
      public int flags;
      public int folder_id;
      public TLRPC.TL_contacts_link link;
      public TLRPC.PeerNotifySettings notify_settings;
      public boolean phone_calls_available;
      public boolean phone_calls_private;
      public int pinned_msg_id;
      public TLRPC.Photo profile_photo;
      public TLRPC.User user;

      public static TLRPC.UserFull TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != -1901811583) {
            if (var1 != 1951750604) {
               var3 = null;
            } else {
               var3 = new TLRPC.TL_userFull();
            }
         } else {
            var3 = new TLRPC.TL_userFull_layer98();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in UserFull", var1));
         } else {
            if (var3 != null) {
               ((TLRPC.TL_userFull)var3).readParams(var0, var2);
            }

            return (TLRPC.UserFull)var3;
         }
      }
   }

   public abstract static class UserProfilePhoto extends TLObject {
      public int dc_id;
      public TLRPC.FileLocation photo_big;
      public long photo_id;
      public TLRPC.FileLocation photo_small;

      public static TLRPC.UserProfilePhoto TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         switch(var1) {
         case -1727196013:
            var3 = new TLRPC.TL_userProfilePhoto_old();
            break;
         case -715532088:
            var3 = new TLRPC.TL_userProfilePhoto_layer97();
            break;
         case -321430132:
            var3 = new TLRPC.TL_userProfilePhoto();
            break;
         case 1326562017:
            var3 = new TLRPC.TL_userProfilePhotoEmpty();
            break;
         default:
            var3 = null;
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in UserProfilePhoto", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.UserProfilePhoto)var3;
         }
      }
   }

   public abstract static class UserStatus extends TLObject {
      public int expires;

      public static TLRPC.UserStatus TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         switch(var1) {
         case -496024847:
            var3 = new TLRPC.TL_userStatusRecently();
            break;
         case -306628279:
            var3 = new TLRPC.TL_userStatusOnline();
            break;
         case 9203775:
            var3 = new TLRPC.TL_userStatusOffline();
            break;
         case 129960444:
            var3 = new TLRPC.TL_userStatusLastWeek();
            break;
         case 164646985:
            var3 = new TLRPC.TL_userStatusEmpty();
            break;
         case 2011940674:
            var3 = new TLRPC.TL_userStatusLastMonth();
            break;
         default:
            var3 = null;
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in UserStatus", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.UserStatus)var3;
         }
      }
   }

   public static class Vector extends TLObject {
      public static int constructor;
      public ArrayList objects = new ArrayList();
   }

   public abstract static class Video extends TLObject {
      public long access_hash;
      public String caption;
      public int date;
      public int dc_id;
      public int duration;
      public int h;
      public long id;
      public byte[] iv;
      public byte[] key;
      public String mime_type;
      public int size;
      public TLRPC.PhotoSize thumb;
      public int user_id;
      public int w;

      public static TLRPC.Video TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         switch(var1) {
         case -1056548696:
            var3 = new TLRPC.TL_videoEmpty_layer45();
            break;
         case -291550643:
            var3 = new TLRPC.TL_video_old3();
            break;
         case -148338733:
            var3 = new TLRPC.TL_video_layer45();
            break;
         case 948937617:
            var3 = new TLRPC.TL_video_old2();
            break;
         case 1431655763:
            var3 = new TLRPC.TL_videoEncrypted();
            break;
         case 1510253727:
            var3 = new TLRPC.TL_video_old();
            break;
         default:
            var3 = null;
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in Video", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.Video)var3;
         }
      }
   }

   public abstract static class WallPaper extends TLObject {
      public static TLRPC.WallPaper TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != -1539849235) {
            if (var1 != -263220756) {
               var3 = null;
            } else {
               var3 = new TLRPC.TL_wallPaper_layer94();
            }
         } else {
            var3 = new TLRPC.TL_wallPaper();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in WallPaper", var1));
         } else {
            if (var3 != null) {
               ((TLRPC.TL_wallPaper)var3).readParams(var0, var2);
            }

            return (TLRPC.WallPaper)var3;
         }
      }
   }

   public abstract static class WebDocument extends TLObject {
      public long access_hash;
      public ArrayList attributes = new ArrayList();
      public String mime_type;
      public int size;
      public String url;

      public static TLRPC.WebDocument TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != -971322408) {
            if (var1 != -104284986) {
               if (var1 != 475467473) {
                  var3 = null;
               } else {
                  var3 = new TLRPC.TL_webDocument();
               }
            } else {
               var3 = new TLRPC.TL_webDocumentNoProxy();
            }
         } else {
            var3 = new TLRPC.TL_webDocument_layer81();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in WebDocument", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.WebDocument)var3;
         }
      }
   }

   public abstract static class WebPage extends TLObject {
      public String author;
      public TLRPC.Page cached_page;
      public int date;
      public String description;
      public String display_url;
      public TLRPC.Document document;
      public int duration;
      public int embed_height;
      public String embed_type;
      public String embed_url;
      public int embed_width;
      public int flags;
      public int hash;
      public long id;
      public TLRPC.Photo photo;
      public String site_name;
      public String title;
      public String type;
      public String url;

      public static TLRPC.WebPage TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         switch(var1) {
         case -2054908813:
            var3 = new TLRPC.TL_webPageNotModified();
            break;
         case -1558273867:
            var3 = new TLRPC.TL_webPage_old();
            break;
         case -981018084:
            var3 = new TLRPC.TL_webPagePending();
            break;
         case -897446185:
            var3 = new TLRPC.TL_webPage_layer58();
            break;
         case -736472729:
            var3 = new TLRPC.TL_webPageUrlPending();
            break;
         case -350980120:
            var3 = new TLRPC.TL_webPageEmpty();
            break;
         case 1594340540:
            var3 = new TLRPC.TL_webPage();
            break;
         default:
            var3 = null;
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in WebPage", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.WebPage)var3;
         }
      }
   }

   public abstract static class account_WallPapers extends TLObject {
      public static TLRPC.account_WallPapers TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != 471437699) {
            if (var1 != 1881892265) {
               var3 = null;
            } else {
               var3 = new TLRPC.TL_account_wallPapers();
            }
         } else {
            var3 = new TLRPC.TL_account_wallPapersNotModified();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in account_WallPapers", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.account_WallPapers)var3;
         }
      }
   }

   public abstract static class auth_CodeType extends TLObject {
      public static TLRPC.auth_CodeType TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != 577556219) {
            if (var1 != 1923290508) {
               if (var1 != 1948046307) {
                  var3 = null;
               } else {
                  var3 = new TLRPC.TL_auth_codeTypeCall();
               }
            } else {
               var3 = new TLRPC.TL_auth_codeTypeSms();
            }
         } else {
            var3 = new TLRPC.TL_auth_codeTypeFlashCall();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in auth_CodeType", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.auth_CodeType)var3;
         }
      }
   }

   public abstract static class auth_SentCodeType extends TLObject {
      public int length;
      public String pattern;

      public static TLRPC.auth_SentCodeType TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         switch(var1) {
         case -1425815847:
            var3 = new TLRPC.TL_auth_sentCodeTypeFlashCall();
            break;
         case -1073693790:
            var3 = new TLRPC.TL_auth_sentCodeTypeSms();
            break;
         case 1035688326:
            var3 = new TLRPC.TL_auth_sentCodeTypeApp();
            break;
         case 1398007207:
            var3 = new TLRPC.TL_auth_sentCodeTypeCall();
            break;
         default:
            var3 = null;
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in auth_SentCodeType", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.auth_SentCodeType)var3;
         }
      }
   }

   public abstract static class channels_ChannelParticipants extends TLObject {
      public int count;
      public ArrayList participants = new ArrayList();
      public ArrayList users = new ArrayList();

      public static TLRPC.channels_ChannelParticipants TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != -266911767) {
            if (var1 != -177282392) {
               var3 = null;
            } else {
               var3 = new TLRPC.TL_channels_channelParticipants();
            }
         } else {
            var3 = new TLRPC.TL_channels_channelParticipantsNotModified();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in channels_ChannelParticipants", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.channels_ChannelParticipants)var3;
         }
      }
   }

   public abstract static class contacts_Blocked extends TLObject {
      public ArrayList blocked = new ArrayList();
      public int count;
      public ArrayList users = new ArrayList();

      public static TLRPC.contacts_Blocked TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != -1878523231) {
            if (var1 != 471043349) {
               var3 = null;
            } else {
               var3 = new TLRPC.TL_contacts_blocked();
            }
         } else {
            var3 = new TLRPC.TL_contacts_blockedSlice();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in contacts_Blocked", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.contacts_Blocked)var3;
         }
      }
   }

   public abstract static class contacts_Contacts extends TLObject {
      public ArrayList contacts = new ArrayList();
      public int saved_count;
      public ArrayList users = new ArrayList();

      public static TLRPC.contacts_Contacts TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != -1219778094) {
            if (var1 != -353862078) {
               var3 = null;
            } else {
               var3 = new TLRPC.TL_contacts_contacts();
            }
         } else {
            var3 = new TLRPC.TL_contacts_contactsNotModified();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in contacts_Contacts", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.contacts_Contacts)var3;
         }
      }
   }

   public abstract static class contacts_TopPeers extends TLObject {
      public static TLRPC.contacts_TopPeers TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != -1255369827) {
            if (var1 != -567906571) {
               if (var1 != 1891070632) {
                  var3 = null;
               } else {
                  var3 = new TLRPC.TL_contacts_topPeers();
               }
            } else {
               var3 = new TLRPC.TL_contacts_topPeersNotModified();
            }
         } else {
            var3 = new TLRPC.TL_contacts_topPeersDisabled();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in contacts_TopPeers", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.contacts_TopPeers)var3;
         }
      }
   }

   public abstract static class help_AppUpdate extends TLObject {
      public static TLRPC.help_AppUpdate TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != -1000708810) {
            if (var1 != 497489295) {
               var3 = null;
            } else {
               var3 = new TLRPC.TL_help_appUpdate();
            }
         } else {
            var3 = new TLRPC.TL_help_noAppUpdate();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in help_AppUpdate", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.help_AppUpdate)var3;
         }
      }
   }

   public abstract static class help_DeepLinkInfo extends TLObject {
      public static TLRPC.help_DeepLinkInfo TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != 1722786150) {
            if (var1 != 1783556146) {
               var3 = null;
            } else {
               var3 = new TLRPC.TL_help_deepLinkInfo();
            }
         } else {
            var3 = new TLRPC.TL_help_deepLinkInfoEmpty();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in help_DeepLinkInfo", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.help_DeepLinkInfo)var3;
         }
      }
   }

   public abstract static class help_PassportConfig extends TLObject {
      public static TLRPC.help_PassportConfig TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != -1600596305) {
            if (var1 != -1078332329) {
               var3 = null;
            } else {
               var3 = new TLRPC.TL_help_passportConfigNotModified();
            }
         } else {
            var3 = new TLRPC.TL_help_passportConfig();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in help_PassportConfig", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.help_PassportConfig)var3;
         }
      }
   }

   public abstract static class help_ProxyData extends TLObject {
      public static TLRPC.help_ProxyData TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != -526508104) {
            if (var1 != 737668643) {
               var3 = null;
            } else {
               var3 = new TLRPC.TL_help_proxyDataPromo();
            }
         } else {
            var3 = new TLRPC.TL_help_proxyDataEmpty();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in help_ProxyData", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.help_ProxyData)var3;
         }
      }
   }

   public abstract static class help_TermsOfServiceUpdate extends TLObject {
      public static TLRPC.help_TermsOfServiceUpdate TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != -483352705) {
            if (var1 != 686618977) {
               var3 = null;
            } else {
               var3 = new TLRPC.TL_help_termsOfServiceUpdate();
            }
         } else {
            var3 = new TLRPC.TL_help_termsOfServiceUpdateEmpty();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in help_TermsOfServiceUpdate", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.help_TermsOfServiceUpdate)var3;
         }
      }
   }

   public abstract static class help_UserInfo extends TLObject {
      public static TLRPC.help_UserInfo TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != -206688531) {
            if (var1 != 32192344) {
               var3 = null;
            } else {
               var3 = new TLRPC.TL_help_userInfo();
            }
         } else {
            var3 = new TLRPC.TL_help_userInfoEmpty();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in help_UserInfo", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.help_UserInfo)var3;
         }
      }
   }

   public abstract static class messages_AllStickers extends TLObject {
      public ArrayList documents = new ArrayList();
      public String hash;
      public ArrayList packs = new ArrayList();
      public ArrayList sets = new ArrayList();

      public static TLRPC.messages_AllStickers TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != -395967805) {
            if (var1 != -302170017) {
               var3 = null;
            } else {
               var3 = new TLRPC.TL_messages_allStickers();
            }
         } else {
            var3 = new TLRPC.TL_messages_allStickersNotModified();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in messages_AllStickers", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.messages_AllStickers)var3;
         }
      }
   }

   public abstract static class messages_BotResults extends TLObject {
      public int cache_time;
      public int flags;
      public boolean gallery;
      public String next_offset;
      public long query_id;
      public ArrayList results = new ArrayList();
      public TLRPC.TL_inlineBotSwitchPM switch_pm;
      public ArrayList users = new ArrayList();

      public static TLRPC.messages_BotResults TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != -1803769784) {
            if (var1 != -858565059) {
               var3 = null;
            } else {
               var3 = new TLRPC.TL_messages_botResults_layer71();
            }
         } else {
            var3 = new TLRPC.TL_messages_botResults();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in messages_BotResults", var1));
         } else {
            if (var3 != null) {
               ((TLRPC.TL_messages_botResults)var3).readParams(var0, var2);
            }

            return (TLRPC.messages_BotResults)var3;
         }
      }
   }

   public abstract static class messages_Chats extends TLObject {
      public ArrayList chats = new ArrayList();
      public int count;

      public static TLRPC.messages_Chats TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != -1663561404) {
            if (var1 != 1694474197) {
               var3 = null;
            } else {
               var3 = new TLRPC.TL_messages_chats();
            }
         } else {
            var3 = new TLRPC.TL_messages_chatsSlice();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in messages_Chats", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.messages_Chats)var3;
         }
      }
   }

   public abstract static class messages_DhConfig extends TLObject {
      public int g;
      public byte[] p;
      public byte[] random;
      public int version;

      public static TLRPC.messages_DhConfig TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != -1058912715) {
            if (var1 != 740433629) {
               var3 = null;
            } else {
               var3 = new TLRPC.TL_messages_dhConfig();
            }
         } else {
            var3 = new TLRPC.TL_messages_dhConfigNotModified();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in messages_DhConfig", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.messages_DhConfig)var3;
         }
      }
   }

   public abstract static class messages_Dialogs extends TLObject {
      public ArrayList chats = new ArrayList();
      public int count;
      public ArrayList dialogs = new ArrayList();
      public ArrayList messages = new ArrayList();
      public ArrayList users = new ArrayList();

      public static TLRPC.messages_Dialogs TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != -253500010) {
            if (var1 != 364538944) {
               if (var1 != 1910543603) {
                  var3 = null;
               } else {
                  var3 = new TLRPC.TL_messages_dialogsSlice();
               }
            } else {
               var3 = new TLRPC.TL_messages_dialogs();
            }
         } else {
            var3 = new TLRPC.TL_messages_dialogsNotModified();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in messages_Dialogs", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.messages_Dialogs)var3;
         }
      }
   }

   public abstract static class messages_FavedStickers extends TLObject {
      public int hash;
      public ArrayList packs = new ArrayList();
      public ArrayList stickers = new ArrayList();

      public static TLRPC.messages_FavedStickers TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != -1634752813) {
            if (var1 != -209768682) {
               var3 = null;
            } else {
               var3 = new TLRPC.TL_messages_favedStickers();
            }
         } else {
            var3 = new TLRPC.TL_messages_favedStickersNotModified();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in messages_FavedStickers", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.messages_FavedStickers)var3;
         }
      }
   }

   public abstract static class messages_FeaturedStickers extends TLObject {
      public int hash;
      public ArrayList sets = new ArrayList();
      public ArrayList unread = new ArrayList();

      public static TLRPC.messages_FeaturedStickers TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != -123893531) {
            if (var1 != 82699215) {
               var3 = null;
            } else {
               var3 = new TLRPC.TL_messages_featuredStickersNotModified();
            }
         } else {
            var3 = new TLRPC.TL_messages_featuredStickers();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in messages_FeaturedStickers", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.messages_FeaturedStickers)var3;
         }
      }
   }

   public abstract static class messages_FoundStickerSets extends TLObject {
      public static TLRPC.messages_FoundStickerSets TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != 223655517) {
            if (var1 != 1359533640) {
               var3 = null;
            } else {
               var3 = new TLRPC.TL_messages_foundStickerSets();
            }
         } else {
            var3 = new TLRPC.TL_messages_foundStickerSetsNotModified();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in messages_FoundStickerSets", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.messages_FoundStickerSets)var3;
         }
      }
   }

   public abstract static class messages_Messages extends TLObject {
      public ArrayList chats = new ArrayList();
      public int count;
      public int flags;
      public boolean inexact;
      public ArrayList messages = new ArrayList();
      public int next_rate;
      public int pts;
      public ArrayList users = new ArrayList();

      public static TLRPC.messages_Messages TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != -1938715001) {
            if (var1 != -1725551049) {
               if (var1 != -923939298) {
                  var3 = null;
               } else {
                  var3 = new TLRPC.TL_messages_messagesSlice();
               }
            } else {
               var3 = new TLRPC.TL_messages_channelMessages();
            }
         } else {
            var3 = new TLRPC.TL_messages_messages();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in messages_Messages", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.messages_Messages)var3;
         }
      }
   }

   public abstract static class messages_RecentStickers extends TLObject {
      public static TLRPC.messages_RecentStickers TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != 186120336) {
            if (var1 != 586395571) {
               var3 = null;
            } else {
               var3 = new TLRPC.TL_messages_recentStickers();
            }
         } else {
            var3 = new TLRPC.TL_messages_recentStickersNotModified();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in messages_RecentStickers", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.messages_RecentStickers)var3;
         }
      }
   }

   public abstract static class messages_SavedGifs extends TLObject {
      public ArrayList gifs = new ArrayList();
      public int hash;

      public static TLRPC.messages_SavedGifs TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != -402498398) {
            if (var1 != 772213157) {
               var3 = null;
            } else {
               var3 = new TLRPC.TL_messages_savedGifs();
            }
         } else {
            var3 = new TLRPC.TL_messages_savedGifsNotModified();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in messages_SavedGifs", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.messages_SavedGifs)var3;
         }
      }
   }

   public abstract static class messages_SentEncryptedMessage extends TLObject {
      public int date;
      public TLRPC.EncryptedFile file;

      public static TLRPC.messages_SentEncryptedMessage TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != -1802240206) {
            if (var1 != 1443858741) {
               var3 = null;
            } else {
               var3 = new TLRPC.TL_messages_sentEncryptedMessage();
            }
         } else {
            var3 = new TLRPC.TL_messages_sentEncryptedFile();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in messages_SentEncryptedMessage", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.messages_SentEncryptedMessage)var3;
         }
      }
   }

   public abstract static class messages_StickerSetInstallResult extends TLObject {
      public ArrayList sets = new ArrayList();

      public static TLRPC.messages_StickerSetInstallResult TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != 904138920) {
            if (var1 != 946083368) {
               var3 = null;
            } else {
               var3 = new TLRPC.TL_messages_stickerSetInstallResultSuccess();
            }
         } else {
            var3 = new TLRPC.TL_messages_stickerSetInstallResultArchive();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in messages_StickerSetInstallResult", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.messages_StickerSetInstallResult)var3;
         }
      }
   }

   public abstract static class messages_Stickers extends TLObject {
      public static TLRPC.messages_Stickers TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != -463889475) {
            if (var1 != -244016606) {
               var3 = null;
            } else {
               var3 = new TLRPC.TL_messages_stickersNotModified();
            }
         } else {
            var3 = new TLRPC.TL_messages_stickers();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in messages_Stickers", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.messages_Stickers)var3;
         }
      }
   }

   public abstract static class payments_PaymentResult extends TLObject {
      public TLRPC.Updates updates;
      public String url;

      public static TLRPC.payments_PaymentResult TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != 1314881805) {
            if (var1 != 1800845601) {
               var3 = null;
            } else {
               var3 = new TLRPC.TL_payments_paymentVerficationNeeded();
            }
         } else {
            var3 = new TLRPC.TL_payments_paymentResult();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in payments_PaymentResult", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.payments_PaymentResult)var3;
         }
      }
   }

   public abstract static class photos_Photos extends TLObject {
      public int count;
      public ArrayList photos = new ArrayList();
      public ArrayList users = new ArrayList();

      public static TLRPC.photos_Photos TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != -1916114267) {
            if (var1 != 352657236) {
               var3 = null;
            } else {
               var3 = new TLRPC.TL_photos_photosSlice();
            }
         } else {
            var3 = new TLRPC.TL_photos_photos();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in photos_Photos", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.photos_Photos)var3;
         }
      }
   }

   public abstract static class storage_FileType extends TLObject {
      public static TLRPC.storage_FileType TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         switch(var1) {
         case -1432995067:
            var3 = new TLRPC.TL_storage_fileUnknown();
            break;
         case -1373745011:
            var3 = new TLRPC.TL_storage_filePdf();
            break;
         case -1278304028:
            var3 = new TLRPC.TL_storage_fileMp4();
            break;
         case -891180321:
            var3 = new TLRPC.TL_storage_fileGif();
            break;
         case 8322574:
            var3 = new TLRPC.TL_storage_fileJpeg();
            break;
         case 172975040:
            var3 = new TLRPC.TL_storage_filePng();
            break;
         case 276907596:
            var3 = new TLRPC.TL_storage_fileWebp();
            break;
         case 1086091090:
            var3 = new TLRPC.TL_storage_filePartial();
            break;
         case 1258941372:
            var3 = new TLRPC.TL_storage_fileMov();
            break;
         case 1384777335:
            var3 = new TLRPC.TL_storage_fileMp3();
            break;
         default:
            var3 = null;
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in storage_FileType", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.storage_FileType)var3;
         }
      }
   }

   public abstract static class updates_ChannelDifference extends TLObject {
      public ArrayList chats = new ArrayList();
      public TLRPC.Dialog dialog;
      public int flags;
      public boolean isFinal;
      public ArrayList messages = new ArrayList();
      public ArrayList new_messages = new ArrayList();
      public ArrayList other_updates = new ArrayList();
      public int pts;
      public int timeout;
      public ArrayList users = new ArrayList();

      public static TLRPC.updates_ChannelDifference TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != -1531132162) {
            if (var1 != 543450958) {
               if (var1 != 1041346555) {
                  var3 = null;
               } else {
                  var3 = new TLRPC.TL_updates_channelDifferenceEmpty();
               }
            } else {
               var3 = new TLRPC.TL_updates_channelDifference();
            }
         } else {
            var3 = new TLRPC.TL_updates_channelDifferenceTooLong();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in updates_ChannelDifference", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.updates_ChannelDifference)var3;
         }
      }
   }

   public abstract static class updates_Difference extends TLObject {
      public ArrayList chats = new ArrayList();
      public int date;
      public TLRPC.TL_updates_state intermediate_state;
      public ArrayList new_encrypted_messages = new ArrayList();
      public ArrayList new_messages = new ArrayList();
      public ArrayList other_updates = new ArrayList();
      public int pts;
      public int seq;
      public TLRPC.TL_updates_state state;
      public ArrayList users = new ArrayList();

      public static TLRPC.updates_Difference TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         switch(var1) {
         case -1459938943:
            var3 = new TLRPC.TL_updates_differenceSlice();
            break;
         case 16030880:
            var3 = new TLRPC.TL_updates_difference();
            break;
         case 1258196845:
            var3 = new TLRPC.TL_updates_differenceTooLong();
            break;
         case 1567990072:
            var3 = new TLRPC.TL_updates_differenceEmpty();
            break;
         default:
            var3 = null;
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in updates_Difference", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.updates_Difference)var3;
         }
      }
   }

   public abstract static class upload_CdnFile extends TLObject {
      public NativeByteBuffer bytes;
      public byte[] request_token;

      public static TLRPC.upload_CdnFile TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != -1449145777) {
            if (var1 != -290921362) {
               var3 = null;
            } else {
               var3 = new TLRPC.TL_upload_cdnFileReuploadNeeded();
            }
         } else {
            var3 = new TLRPC.TL_upload_cdnFile();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in upload_CdnFile", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.upload_CdnFile)var3;
         }
      }
   }

   public abstract static class upload_File extends TLObject {
      public NativeByteBuffer bytes;
      public int dc_id;
      public byte[] encryption_iv;
      public byte[] encryption_key;
      public ArrayList file_hashes = new ArrayList();
      public byte[] file_token;
      public int mtime;
      public TLRPC.storage_FileType type;

      public static TLRPC.upload_File TLdeserialize(AbstractSerializedData var0, int var1, boolean var2) {
         Object var3;
         if (var1 != -242427324) {
            if (var1 != 157948117) {
               var3 = null;
            } else {
               var3 = new TLRPC.TL_upload_file();
            }
         } else {
            var3 = new TLRPC.TL_upload_fileCdnRedirect();
         }

         if (var3 == null && var2) {
            throw new RuntimeException(String.format("can't parse magic %x in upload_File", var1));
         } else {
            if (var3 != null) {
               ((TLObject)var3).readParams(var0, var2);
            }

            return (TLRPC.upload_File)var3;
         }
      }
   }
}
