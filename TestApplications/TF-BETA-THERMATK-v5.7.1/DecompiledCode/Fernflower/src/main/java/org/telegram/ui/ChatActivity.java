package org.telegram.ui;

import android.animation.Animator;
import android.animation.AnimatorListenerAdapter;
import android.animation.AnimatorSet;
import android.animation.ObjectAnimator;
import android.annotation.TargetApi;
import android.app.Activity;
import android.app.DatePickerDialog;
import android.app.Dialog;
import android.content.ClipData;
import android.content.ClipboardManager;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.DialogInterface.OnClickListener;
import android.content.SharedPreferences.Editor;
import android.content.res.Configuration;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Outline;
import android.graphics.Paint;
import android.graphics.Path;
import android.graphics.Point;
import android.graphics.PorterDuffColorFilter;
import android.graphics.PorterDuffXfermode;
import android.graphics.Rect;
import android.graphics.RectF;
import android.graphics.Typeface;
import android.graphics.Path.Direction;
import android.graphics.PorterDuff.Mode;
import android.graphics.drawable.Drawable;
import android.media.ThumbnailUtils;
import android.net.Uri;
import android.os.Bundle;
import android.os.SystemClock;
import android.os.Build.VERSION;
import android.text.Layout;
import android.text.Spannable;
import android.text.SpannableString;
import android.text.SpannableStringBuilder;
import android.text.TextPaint;
import android.text.TextUtils;
import android.text.TextUtils.TruncateAt;
import android.text.style.CharacterStyle;
import android.text.style.ClickableSpan;
import android.text.style.ForegroundColorSpan;
import android.text.style.URLSpan;
import android.util.AttributeSet;
import android.util.LongSparseArray;
import android.util.Property;
import android.util.SparseArray;
import android.util.SparseBooleanArray;
import android.util.SparseIntArray;
import android.view.KeyEvent;
import android.view.Menu;
import android.view.MotionEvent;
import android.view.TextureView;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewOutlineProvider;
import android.view.View.MeasureSpec;
import android.view.ViewTreeObserver.OnPreDrawListener;
import android.view.accessibility.AccessibilityNodeInfo;
import android.view.accessibility.AccessibilityNodeInfo.CollectionInfo;
import android.view.animation.DecelerateInterpolator;
import android.view.animation.LayoutAnimationController;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ScrollView;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.FrameLayout.LayoutParams;
import android.widget.ImageView.ScaleType;
import androidx.core.content.FileProvider;
import androidx.core.view.inputmethod.InputContentInfoCompat;
import androidx.recyclerview.widget.GridLayoutManager;
import androidx.recyclerview.widget.GridLayoutManagerFixed;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.LinearSmoothScrollerMiddle;
import androidx.recyclerview.widget.RecyclerView;
import com.google.android.exoplayer2.ui.AspectRatioFrameLayout;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.net.URLDecoder;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;
import java.util.concurrent.CountDownLatch;
import java.util.regex.Matcher;
import org.telegram.PhoneFormat.PhoneFormat;
import org.telegram.messenger.AndroidUtilities;
import org.telegram.messenger.ApplicationLoader;
import org.telegram.messenger.BuildVars;
import org.telegram.messenger.ChatObject;
import org.telegram.messenger.ContactsController;
import org.telegram.messenger.DataQuery;
import org.telegram.messenger.DownloadController;
import org.telegram.messenger.Emoji;
import org.telegram.messenger.FileLoader;
import org.telegram.messenger.FileLog;
import org.telegram.messenger.ImageLocation;
import org.telegram.messenger.ImageReceiver;
import org.telegram.messenger.LocaleController;
import org.telegram.messenger.MediaController;
import org.telegram.messenger.MessageObject;
import org.telegram.messenger.MessagesController;
import org.telegram.messenger.MessagesStorage;
import org.telegram.messenger.NotificationCenter;
import org.telegram.messenger.NotificationsController;
import org.telegram.messenger.SecretChatHelper;
import org.telegram.messenger.SendMessagesHelper;
import org.telegram.messenger.SharedConfig;
import org.telegram.messenger.UserConfig;
import org.telegram.messenger.UserObject;
import org.telegram.messenger.Utilities;
import org.telegram.messenger.VideoEditedInfo;
import org.telegram.messenger.browser.Browser;
import org.telegram.messenger.support.SparseLongArray;
import org.telegram.tgnet.ConnectionsManager;
import org.telegram.tgnet.TLObject;
import org.telegram.tgnet.TLRPC;
import org.telegram.ui.ActionBar.ActionBar;
import org.telegram.ui.ActionBar.ActionBarLayout;
import org.telegram.ui.ActionBar.ActionBarMenu;
import org.telegram.ui.ActionBar.ActionBarMenuItem;
import org.telegram.ui.ActionBar.ActionBarMenuSubItem;
import org.telegram.ui.ActionBar.ActionBarPopupWindow;
import org.telegram.ui.ActionBar.AlertDialog;
import org.telegram.ui.ActionBar.BackDrawable;
import org.telegram.ui.ActionBar.BaseFragment;
import org.telegram.ui.ActionBar.BottomSheet;
import org.telegram.ui.ActionBar.SimpleTextView;
import org.telegram.ui.ActionBar.Theme;
import org.telegram.ui.ActionBar.ThemeDescription;
import org.telegram.ui.Adapters.MentionsAdapter;
import org.telegram.ui.Adapters.StickersAdapter;
import org.telegram.ui.Cells.BotHelpCell;
import org.telegram.ui.Cells.BotSwitchCell;
import org.telegram.ui.Cells.ChatActionCell;
import org.telegram.ui.Cells.ChatLoadingCell;
import org.telegram.ui.Cells.ChatMessageCell;
import org.telegram.ui.Cells.ChatUnreadCell;
import org.telegram.ui.Cells.CheckBoxCell;
import org.telegram.ui.Cells.ContextLinkCell;
import org.telegram.ui.Cells.MentionCell;
import org.telegram.ui.Cells.StickerCell;
import org.telegram.ui.Components.AlertsCreator;
import org.telegram.ui.Components.AnimatedFileDrawable;
import org.telegram.ui.Components.AnimationProperties;
import org.telegram.ui.Components.BackupImageView;
import org.telegram.ui.Components.ChatActivityEnterView;
import org.telegram.ui.Components.ChatAttachAlert;
import org.telegram.ui.Components.ChatAvatarContainer;
import org.telegram.ui.Components.ChatBigEmptyView;
import org.telegram.ui.Components.CombinedDrawable;
import org.telegram.ui.Components.CorrectlyMeasuringTextView;
import org.telegram.ui.Components.EditTextCaption;
import org.telegram.ui.Components.EmbedBottomSheet;
import org.telegram.ui.Components.EmojiView;
import org.telegram.ui.Components.ExtendedGridLayoutManager;
import org.telegram.ui.Components.FragmentContextView;
import org.telegram.ui.Components.HintView;
import org.telegram.ui.Components.InstantCameraView;
import org.telegram.ui.Components.LayoutHelper;
import org.telegram.ui.Components.NumberTextView;
import org.telegram.ui.Components.PipRoundVideoView;
import org.telegram.ui.Components.RadialProgressView;
import org.telegram.ui.Components.RecyclerListView;
import org.telegram.ui.Components.ShareAlert;
import org.telegram.ui.Components.Size;
import org.telegram.ui.Components.SizeNotifierFrameLayout;
import org.telegram.ui.Components.StickersAlert;
import org.telegram.ui.Components.TypefaceSpan;
import org.telegram.ui.Components.URLSpanBotCommand;
import org.telegram.ui.Components.URLSpanMono;
import org.telegram.ui.Components.URLSpanNoUnderline;
import org.telegram.ui.Components.URLSpanReplacement;
import org.telegram.ui.Components.URLSpanUserMention;
import org.telegram.ui.Components.UndoView;
import org.telegram.ui.Components.voip.VoIPHelper;

public class ChatActivity extends BaseFragment implements NotificationCenter.NotificationCenterDelegate, DialogsActivity.DialogsActivityDelegate, LocationActivity.LocationActivityDelegate {
   private static final int add_shortcut = 24;
   private static final int attach_audio = 3;
   private static final int attach_contact = 5;
   private static final int attach_document = 4;
   private static final int attach_gallery = 1;
   private static final int attach_location = 6;
   private static final int attach_photo = 0;
   private static final int attach_poll = 9;
   private static final int attach_video = 2;
   private static final int bot_help = 30;
   private static final int bot_settings = 31;
   private static final int call = 32;
   private static final int chat_enc_timer = 13;
   private static final int chat_menu_attach = 14;
   private static final int clear_history = 15;
   private static final int copy = 10;
   private static final int delete = 12;
   private static final int delete_chat = 16;
   private static final int edit = 23;
   private static final int forward = 11;
   private static final int id_chat_compose_panel = 1000;
   private static final int mute = 18;
   private static final int report = 21;
   private static final int search = 40;
   private static final int share_contact = 17;
   private static final int star = 22;
   private static final int text_bold = 50;
   private static final int text_italic = 51;
   private static final int text_link = 53;
   private static final int text_mono = 52;
   private static final int text_regular = 54;
   private ArrayList actionModeViews = new ArrayList();
   private ActionBarMenuSubItem addContactItem;
   private TextView addToContactsButton;
   private TextView alertNameTextView;
   private TextView alertTextView;
   private FrameLayout alertView;
   private AnimatorSet alertViewAnimator;
   private boolean allowContextBotPanel;
   private boolean allowContextBotPanelSecond = true;
   private boolean allowStickersPanel;
   private ArrayList animatingMessageObjects = new ArrayList();
   private Paint aspectPaint;
   private Path aspectPath;
   private AspectRatioFrameLayout aspectRatioFrameLayout;
   private ActionBarMenuItem attachItem;
   private ChatAvatarContainer avatarContainer;
   private ChatBigEmptyView bigEmptyView;
   private MessageObject botButtons;
   private PhotoViewer.PhotoViewerProvider botContextProvider = new PhotoViewer.EmptyPhotoViewerProvider() {
      public PhotoViewer.PlaceProviderObject getPlaceForPhoto(MessageObject var1, TLRPC.FileLocation var2, int var3, boolean var4) {
         if (var3 >= 0 && var3 < ChatActivity.this.botContextResults.size()) {
            int var5 = ChatActivity.this.mentionListView.getChildCount();
            Object var6 = ChatActivity.this.botContextResults.get(var3);
            byte var7 = 0;

            for(var3 = 0; var3 < var5; ++var3) {
               ImageReceiver var9;
               View var10;
               label29: {
                  var10 = ChatActivity.this.mentionListView.getChildAt(var3);
                  if (var10 instanceof ContextLinkCell) {
                     ContextLinkCell var8 = (ContextLinkCell)var10;
                     if (var8.getResult() == var6) {
                        var9 = var8.getPhotoImage();
                        break label29;
                     }
                  }

                  var9 = null;
               }

               if (var9 != null) {
                  int[] var12 = new int[2];
                  var10.getLocationInWindow(var12);
                  PhotoViewer.PlaceProviderObject var11 = new PhotoViewer.PlaceProviderObject();
                  var11.viewX = var12[0];
                  var5 = var12[1];
                  if (VERSION.SDK_INT >= 21) {
                     var3 = var7;
                  } else {
                     var3 = AndroidUtilities.statusBarHeight;
                  }

                  var11.viewY = var5 - var3;
                  var11.parentView = ChatActivity.this.mentionListView;
                  var11.imageReceiver = var9;
                  var11.thumb = var9.getBitmapSafe();
                  var11.radius = var9.getRoundRadius();
                  return var11;
               }
            }
         }

         return null;
      }

      public void sendButtonPressed(int var1, VideoEditedInfo var2) {
         if (var1 >= 0 && var1 < ChatActivity.this.botContextResults.size()) {
            ChatActivity var3 = ChatActivity.this;
            var3.sendBotInlineResult((TLRPC.BotInlineResult)var3.botContextResults.get(var1));
         }

      }
   };
   private ArrayList botContextResults;
   private SparseArray botInfo = new SparseArray();
   private MessageObject botReplyButtons;
   private String botUser;
   private int botsCount;
   private FrameLayout bottomMessagesActionContainer;
   private FrameLayout bottomOverlay;
   private AnimatorSet bottomOverlayAnimation;
   private FrameLayout bottomOverlayChat;
   private TextView bottomOverlayChatText;
   private ChatActivity.UnreadCounterTextView bottomOverlayChatText2;
   private RadialProgressView bottomOverlayProgress;
   private TextView bottomOverlayText;
   private boolean[] cacheEndReached = new boolean[2];
   private int canEditMessagesCount;
   private int cantDeleteMessagesCount;
   private int cantForwardMessagesCount;
   protected ChatActivityEnterView chatActivityEnterView;
   private ChatActivity.ChatActivityAdapter chatAdapter;
   private ChatAttachAlert chatAttachAlert;
   private long chatEnterTime;
   protected TLRPC.ChatFull chatInfo;
   private GridLayoutManagerFixed chatLayoutManager;
   private long chatLeaveTime;
   private RecyclerListView chatListView;
   private int chatListViewClipTop;
   private ArrayList chatMessageCellsCache = new ArrayList();
   private boolean checkTextureViewPosition;
   private boolean clearingHistory;
   private Dialog closeChatDialog;
   private ImageView closePinned;
   private ImageView closeReportSpam;
   private SizeNotifierFrameLayout contentView;
   private int createUnreadMessageAfterId;
   private boolean createUnreadMessageAfterIdLoading;
   protected TLRPC.Chat currentChat;
   protected TLRPC.EncryptedChat currentEncryptedChat;
   private boolean currentFloatingDateOnScreen;
   private boolean currentFloatingTopIsNotMessage;
   private String currentPicturePath;
   protected TLRPC.User currentUser;
   private long dialog_id;
   private ChatMessageCell drawLaterRoundProgressCell;
   private AnimatorSet editButtonAnimation;
   private int editTextEnd;
   private ActionBarMenuItem editTextItem;
   private int editTextStart;
   private MessageObject editingMessageObject;
   private int editingMessageObjectReqId;
   private View emojiButtonRed;
   private TextView emptyView;
   private FrameLayout emptyViewContainer;
   private boolean[] endReached = new boolean[2];
   private boolean first = true;
   private boolean firstLoading = true;
   boolean firstOpen = true;
   private boolean firstUnreadSent = false;
   private int first_unread_id;
   private boolean fixPaddingsInLayout;
   private AnimatorSet floatingDateAnimation;
   private ChatActionCell floatingDateView;
   private boolean forceScrollToTop;
   private TextView forwardButton;
   private AnimatorSet forwardButtonAnimation;
   private boolean[] forwardEndReached = new boolean[]{(boolean)1, (boolean)1};
   private HintView forwardHintView;
   private MessageObject forwardingMessage;
   private MessageObject.GroupedMessages forwardingMessageGroup;
   private ArrayList forwardingMessages;
   private ArrayList foundUrls;
   private TLRPC.WebPage foundWebPage;
   private FragmentContextView fragmentContextView;
   private TextView gifHintTextView;
   private boolean globalIgnoreLayout;
   private LongSparseArray groupedMessagesMap = new LongSparseArray();
   private boolean hasAllMentionsLocal;
   private boolean hasBotsCommands;
   private boolean hasUnfavedSelected;
   private ActionBarMenuItem headerItem;
   private Runnable hideAlertViewRunnable;
   private int hideDateDelay = 500;
   private int highlightMessageId = Integer.MAX_VALUE;
   private boolean ignoreAttachOnPause;
   private long inlineReturn;
   private InstantCameraView instantCameraView;
   private boolean isBroadcast;
   private int lastLoadIndex;
   private int last_message_id = 0;
   private int linkSearchRequestId;
   private boolean loading;
   private boolean loadingForward;
   private boolean loadingFromOldPosition;
   private int loadingPinnedMessage;
   private int loadsCount;
   private boolean locationAlertShown;
   private int[] maxDate = new int[]{Integer.MIN_VALUE, Integer.MIN_VALUE};
   private int[] maxMessageId = new int[]{Integer.MAX_VALUE, Integer.MAX_VALUE};
   private TextView mediaBanTooltip;
   private FrameLayout mentionContainer;
   private ExtendedGridLayoutManager mentionGridLayoutManager;
   private LinearLayoutManager mentionLayoutManager;
   private AnimatorSet mentionListAnimation;
   private RecyclerListView mentionListView;
   private boolean mentionListViewIgnoreLayout;
   private boolean mentionListViewIsScrolling;
   private int mentionListViewLastViewPosition;
   private int mentionListViewLastViewTop;
   private int mentionListViewScrollOffsetY;
   private FrameLayout mentiondownButton;
   private ObjectAnimator mentiondownButtonAnimation;
   private TextView mentiondownButtonCounter;
   private ImageView mentiondownButtonImage;
   private MentionsAdapter mentionsAdapter;
   private RecyclerListView.OnItemClickListener mentionsOnItemClickListener;
   private long mergeDialogId;
   protected ArrayList messages = new ArrayList();
   private HashMap messagesByDays = new HashMap();
   private SparseArray[] messagesDict = new SparseArray[]{new SparseArray(), new SparseArray()};
   private int[] minDate = new int[2];
   private int[] minMessageId = new int[]{Integer.MIN_VALUE, Integer.MIN_VALUE};
   private ActionBarMenuSubItem muteItem;
   private MessageObject needAnimateToMessage;
   private boolean needSelectFromMessageId;
   private int newMentionsCount;
   private int newUnreadMessageCount;
   private HintView noSoundHintView;
   RecyclerListView.OnItemClickListenerExtended onItemClickListener = new RecyclerListView.OnItemClickListenerExtended() {
      public void onItemClick(View var1, int var2, float var3, float var4) {
         ChatActivity.this.wasManualScroll = true;
         if (ChatActivity.access$1200(ChatActivity.this).isActionModeShowed()) {
            boolean var5 = false;
            if (var1 instanceof ChatMessageCell) {
               var5 = ((ChatMessageCell)var1).isInsideBackground(var3, var4) ^ true;
            }

            ChatActivity.this.processRowSelect(var1, var5, var3, var4);
         } else {
            ChatActivity.this.createMenu(var1, true, false, var3, var4);
         }
      }
   };
   RecyclerListView.OnItemLongClickListenerExtended onItemLongClickListener = new RecyclerListView.OnItemLongClickListenerExtended() {
      public boolean onItemClick(View var1, int var2, float var3, float var4) {
         ChatActivity.this.wasManualScroll = true;
         if (!ChatActivity.access$900(ChatActivity.this).isActionModeShowed()) {
            ChatActivity.this.createMenu(var1, false, true, var3, var4);
         } else {
            boolean var5 = false;
            if (var1 instanceof ChatMessageCell) {
               var5 = ((ChatMessageCell)var1).isInsideBackground(var3, var4) ^ true;
            }

            ChatActivity.this.processRowSelect(var1, var5, var3, var4);
         }

         return true;
      }

      public void onLongClickRelease() {
      }

      public void onMove(float var1, float var2) {
      }
   };
   private boolean openAnimationEnded;
   private boolean openSearchKeyboard;
   private View overlayView;
   private FrameLayout pagedownButton;
   private AnimatorSet pagedownButtonAnimation;
   private TextView pagedownButtonCounter;
   private ImageView pagedownButtonImage;
   private boolean pagedownButtonShowedByScroll;
   private boolean paused = true;
   private boolean pausedOnLastMessage;
   private String pendingLinkSearchString;
   private Runnable pendingWebPageTimeoutRunnable;
   private PhotoViewer.PhotoViewerProvider photoViewerProvider = new PhotoViewer.EmptyPhotoViewerProvider() {
      public PhotoViewer.PlaceProviderObject getPlaceForPhoto(MessageObject var1, TLRPC.FileLocation var2, int var3, boolean var4) {
         int var5 = ChatActivity.this.chatListView.getChildCount();
         byte var6 = 0;
         var3 = 0;

         while(true) {
            Object var7 = null;
            if (var3 >= var5) {
               return null;
            }

            View var8 = ChatActivity.this.chatListView.getChildAt(var3);
            ImageReceiver var9;
            MessageObject var11;
            int var12;
            if (var8 instanceof ChatMessageCell) {
               var9 = (ImageReceiver)var7;
               if (var1 != null) {
                  ChatMessageCell var16 = (ChatMessageCell)var8;
                  var11 = var16.getMessageObject();
                  var9 = (ImageReceiver)var7;
                  if (var11 != null) {
                     var9 = (ImageReceiver)var7;
                     if (var11.getId() == var1.getId()) {
                        var9 = var16.getPhotoImage();
                     }
                  }
               }
            } else {
               var9 = (ImageReceiver)var7;
               if (var8 instanceof ChatActionCell) {
                  ChatActionCell var10 = (ChatActionCell)var8;
                  var11 = var10.getMessageObject();
                  var9 = (ImageReceiver)var7;
                  if (var11 != null) {
                     if (var1 != null) {
                        var9 = (ImageReceiver)var7;
                        if (var11.getId() == var1.getId()) {
                           var9 = var10.getPhotoImage();
                        }
                     } else {
                        var9 = (ImageReceiver)var7;
                        if (var2 != null) {
                           var9 = (ImageReceiver)var7;
                           if (var11.photoThumbs != null) {
                              var12 = 0;

                              while(true) {
                                 var9 = (ImageReceiver)var7;
                                 if (var12 >= var11.photoThumbs.size()) {
                                    break;
                                 }

                                 TLRPC.FileLocation var17 = ((TLRPC.PhotoSize)var11.photoThumbs.get(var12)).location;
                                 if (var17.volume_id == var2.volume_id && var17.local_id == var2.local_id) {
                                    var9 = var10.getPhotoImage();
                                    break;
                                 }

                                 ++var12;
                              }
                           }
                        }
                     }
                  }
               }
            }

            if (var9 != null) {
               int[] var14 = new int[2];
               var8.getLocationInWindow(var14);
               PhotoViewer.PlaceProviderObject var13 = new PhotoViewer.PlaceProviderObject();
               var13.viewX = var14[0];
               var12 = var14[1];
               if (VERSION.SDK_INT >= 21) {
                  var3 = var6;
               } else {
                  var3 = AndroidUtilities.statusBarHeight;
               }

               var13.viewY = var12 - var3;
               var13.parentView = ChatActivity.this.chatListView;
               var13.imageReceiver = var9;
               if (var4) {
                  var13.thumb = var9.getBitmapSafe();
               }

               var13.radius = var9.getRoundRadius();
               if (var8 instanceof ChatActionCell) {
                  TLRPC.Chat var15 = ChatActivity.this.currentChat;
                  if (var15 != null) {
                     var13.dialogId = -var15.id;
                  }
               }

               if (ChatActivity.this.pinnedMessageView != null && ChatActivity.this.pinnedMessageView.getTag() == null || ChatActivity.this.reportSpamView != null && ChatActivity.this.reportSpamView.getTag() == null) {
                  var13.clipTopAddition = AndroidUtilities.dp(48.0F);
               }

               var13.clipTopAddition += ChatActivity.this.chatListViewClipTop;
               return var13;
            }

            ++var3;
         }
      }
   };
   private int pinnedImageCacheType;
   private TLRPC.PhotoSize pinnedImageLocation;
   private TLObject pinnedImageLocationObject;
   private int pinnedImageSize;
   private TLRPC.PhotoSize pinnedImageThumbLocation;
   private View pinnedLineView;
   private BackupImageView pinnedMessageImageView;
   private SimpleTextView pinnedMessageNameTextView;
   private MessageObject pinnedMessageObject;
   private SimpleTextView pinnedMessageTextView;
   private FrameLayout pinnedMessageView;
   private AnimatorSet pinnedMessageViewAnimator;
   private LongSparseArray polls = new LongSparseArray();
   ArrayList pollsToCheck = new ArrayList(10);
   private int prevSetUnreadCount = Integer.MIN_VALUE;
   private RadialProgressView progressBar;
   private FrameLayout progressView;
   private View progressView2;
   private TextView replyButton;
   private AnimatorSet replyButtonAnimation;
   private ImageView replyCloseImageView;
   private ImageView replyIconImageView;
   private int replyImageCacheType;
   private TLRPC.PhotoSize replyImageLocation;
   private TLObject replyImageLocationObject;
   private int replyImageSize;
   private TLRPC.PhotoSize replyImageThumbLocation;
   private BackupImageView replyImageView;
   private View replyLineView;
   private SimpleTextView replyNameTextView;
   private SimpleTextView replyObjectTextView;
   private MessageObject replyingMessageObject;
   private TextView reportSpamButton;
   private FrameLayout reportSpamContainer;
   private LinearLayout reportSpamView;
   private AnimatorSet reportSpamViewAnimator;
   private int returnToLoadIndex;
   private int returnToMessageId;
   private AnimatorSet runningAnimation;
   private AnimatorSet scrimAnimatorSet;
   private Paint scrimPaint;
   private ActionBarPopupWindow scrimPopupWindow;
   private View scrimView;
   private MessageObject scrollToMessage;
   private int scrollToMessagePosition = -10000;
   private int scrollToOffsetOnRecreate = 0;
   private int scrollToPositionOnRecreate = -1;
   private boolean scrollToTopOnResume;
   private boolean scrollToTopUnReadOnResume;
   private boolean scrollToVideo;
   private boolean scrollingChatListView;
   private boolean scrollingFloatingDate;
   private ImageView searchCalendarButton;
   private FrameLayout searchContainer;
   private SimpleTextView searchCountText;
   private ImageView searchDownButton;
   private ActionBarMenuItem searchItem;
   private ImageView searchUpButton;
   private ImageView searchUserButton;
   private boolean searchingForUser;
   private TLRPC.User searchingUserMessages;
   private SparseArray[] selectedMessagesCanCopyIds = new SparseArray[]{new SparseArray(), new SparseArray()};
   private SparseArray[] selectedMessagesCanStarIds = new SparseArray[]{new SparseArray(), new SparseArray()};
   private NumberTextView selectedMessagesCountTextView;
   private SparseArray[] selectedMessagesIds = new SparseArray[]{new SparseArray(), new SparseArray()};
   private MessageObject selectedObject;
   private MessageObject.GroupedMessages selectedObjectGroup;
   private int startLoadFromMessageId;
   private int startLoadFromMessageOffset = Integer.MAX_VALUE;
   private String startVideoEdit;
   private StickersAdapter stickersAdapter;
   private RecyclerListView stickersListView;
   private RecyclerListView.OnItemClickListener stickersOnItemClickListener;
   private FrameLayout stickersPanel;
   private ImageView stickersPanelArrow;
   private View timeItem2;
   private int topViewWasVisible;
   private UndoView undoView;
   private MessageObject unreadMessageObject;
   private Runnable unselectRunnable;
   private boolean userBlocked = false;
   protected TLRPC.UserFull userInfo;
   private FrameLayout videoPlayerContainer;
   private TextureView videoTextureView;
   private AnimatorSet voiceHintAnimation;
   private Runnable voiceHintHideRunnable;
   private TextView voiceHintTextView;
   private Runnable waitingForCharaterEnterRunnable;
   private ArrayList waitingForLoad = new ArrayList();
   private boolean waitingForReplyMessageLoad;
   private boolean wasManualScroll;
   private boolean wasPaused;

   public ChatActivity(Bundle var1) {
      super(var1);
   }

   // $FF: synthetic method
   static boolean access$10000(ChatActivity var0) {
      return var0.inPreviewMode;
   }

   // $FF: synthetic method
   static ActionBar access$11000(ChatActivity var0) {
      return var0.actionBar;
   }

   // $FF: synthetic method
   static ActionBar access$11100(ChatActivity var0) {
      return var0.actionBar;
   }

   // $FF: synthetic method
   static ActionBar access$11200(ChatActivity var0) {
      return var0.actionBar;
   }

   // $FF: synthetic method
   static boolean access$11300(ChatActivity var0) {
      return var0.inPreviewMode;
   }

   // $FF: synthetic method
   static boolean access$11400(ChatActivity var0) {
      return var0.inPreviewMode;
   }

   // $FF: synthetic method
   static boolean access$11500(ChatActivity var0) {
      return var0.inPreviewMode;
   }

   // $FF: synthetic method
   static ActionBar access$11600(ChatActivity var0) {
      return var0.actionBar;
   }

   // $FF: synthetic method
   static ActionBar access$11700(ChatActivity var0) {
      return var0.actionBar;
   }

   // $FF: synthetic method
   static ActionBar access$1200(ChatActivity var0) {
      return var0.actionBar;
   }

   // $FF: synthetic method
   static boolean access$12100(ChatActivity var0) {
      return var0.inPreviewMode;
   }

   // $FF: synthetic method
   static ActionBar access$12200(ChatActivity var0) {
      return var0.actionBar;
   }

   // $FF: synthetic method
   static boolean access$12300(ChatActivity var0) {
      return var0.inPreviewMode;
   }

   // $FF: synthetic method
   static ActionBar access$12400(ChatActivity var0) {
      return var0.actionBar;
   }

   // $FF: synthetic method
   static ActionBar access$1300(ChatActivity var0) {
      return var0.actionBar;
   }

   // $FF: synthetic method
   static ActionBar access$13500(ChatActivity var0) {
      return var0.actionBar;
   }

   // $FF: synthetic method
   static ActionBar access$13900(ChatActivity var0) {
      return var0.actionBar;
   }

   // $FF: synthetic method
   static View access$14000(ChatActivity var0) {
      return var0.fragmentView;
   }

   // $FF: synthetic method
   static boolean access$14100(ChatActivity var0) {
      return var0.inPreviewMode;
   }

   // $FF: synthetic method
   static View access$14200(ChatActivity var0) {
      return var0.fragmentView;
   }

   // $FF: synthetic method
   static ActionBar access$15600(ChatActivity var0) {
      return var0.actionBar;
   }

   // $FF: synthetic method
   static ActionBar access$15700(ChatActivity var0) {
      return var0.actionBar;
   }

   // $FF: synthetic method
   static int access$15900(ChatActivity var0) {
      return var0.currentAccount;
   }

   // $FF: synthetic method
   static int access$16000(ChatActivity var0) {
      return var0.currentAccount;
   }

   // $FF: synthetic method
   static int access$16100(ChatActivity var0) {
      return var0.currentAccount;
   }

   // $FF: synthetic method
   static int access$16210(ChatActivity var0) {
      int var1 = var0.newMentionsCount--;
      return var1;
   }

   // $FF: synthetic method
   static int access$16300(ChatActivity var0) {
      return var0.currentAccount;
   }

   // $FF: synthetic method
   static int access$18200(ChatActivity var0) {
      return var0.classGuid;
   }

   // $FF: synthetic method
   static int access$18300(ChatActivity var0) {
      return var0.currentAccount;
   }

   // $FF: synthetic method
   static ActionBar access$18400(ChatActivity var0) {
      return var0.actionBar;
   }

   // $FF: synthetic method
   static ActionBar access$18500(ChatActivity var0) {
      return var0.actionBar;
   }

   // $FF: synthetic method
   static int access$18800(ChatActivity var0) {
      return var0.currentAccount;
   }

   // $FF: synthetic method
   static View access$19400(ChatActivity var0) {
      return var0.fragmentView;
   }

   // $FF: synthetic method
   static View access$19500(ChatActivity var0) {
      return var0.fragmentView;
   }

   // $FF: synthetic method
   static int access$20600(ChatActivity var0) {
      return var0.currentAccount;
   }

   // $FF: synthetic method
   static int access$21200(ChatActivity var0) {
      return var0.currentAccount;
   }

   // $FF: synthetic method
   static int access$21300(ChatActivity var0) {
      return var0.currentAccount;
   }

   // $FF: synthetic method
   static int access$21400(ChatActivity var0) {
      return var0.currentAccount;
   }

   // $FF: synthetic method
   static int access$23100(ChatActivity var0) {
      return var0.currentAccount;
   }

   // $FF: synthetic method
   static int access$23400(ChatActivity var0) {
      return var0.classGuid;
   }

   // $FF: synthetic method
   static View access$23500(ChatActivity var0) {
      return var0.fragmentView;
   }

   // $FF: synthetic method
   static int access$23600(ChatActivity var0) {
      return var0.classGuid;
   }

   // $FF: synthetic method
   static View access$23700(ChatActivity var0) {
      return var0.fragmentView;
   }

   // $FF: synthetic method
   static ActionBar access$24000(ChatActivity var0) {
      return var0.actionBar;
   }

   // $FF: synthetic method
   static int access$24100(ChatActivity var0) {
      return var0.currentAccount;
   }

   // $FF: synthetic method
   static int access$24300(ChatActivity var0) {
      return var0.currentAccount;
   }

   // $FF: synthetic method
   static ActionBar access$24500(ChatActivity var0) {
      return var0.actionBar;
   }

   // $FF: synthetic method
   static int access$24600(ChatActivity var0) {
      return var0.currentAccount;
   }

   // $FF: synthetic method
   static int access$24700(ChatActivity var0) {
      return var0.currentAccount;
   }

   // $FF: synthetic method
   static int access$24800(ChatActivity var0) {
      return var0.currentAccount;
   }

   // $FF: synthetic method
   static ActionBar access$24900(ChatActivity var0) {
      return var0.actionBar;
   }

   // $FF: synthetic method
   static ActionBar access$25000(ChatActivity var0) {
      return var0.actionBar;
   }

   // $FF: synthetic method
   static int access$25100(ChatActivity var0) {
      return var0.currentAccount;
   }

   // $FF: synthetic method
   static int access$25200(ChatActivity var0) {
      return var0.currentAccount;
   }

   // $FF: synthetic method
   static View access$25400(ChatActivity var0) {
      return var0.fragmentView;
   }

   // $FF: synthetic method
   static int access$25700(ChatActivity var0) {
      return var0.currentAccount;
   }

   // $FF: synthetic method
   static int access$2600(ChatActivity var0) {
      return var0.currentAccount;
   }

   // $FF: synthetic method
   static int access$26000(ChatActivity var0) {
      return var0.currentAccount;
   }

   // $FF: synthetic method
   static int access$26100(ChatActivity var0) {
      return var0.currentAccount;
   }

   // $FF: synthetic method
   static int access$26200(ChatActivity var0) {
      return var0.currentAccount;
   }

   // $FF: synthetic method
   static ActionBar access$26800(ChatActivity var0) {
      return var0.actionBar;
   }

   // $FF: synthetic method
   static int access$27100(ChatActivity var0) {
      return var0.currentAccount;
   }

   // $FF: synthetic method
   static int access$27200(ChatActivity var0) {
      return var0.currentAccount;
   }

   // $FF: synthetic method
   static int access$27300(ChatActivity var0) {
      return var0.currentAccount;
   }

   // $FF: synthetic method
   static boolean access$27400(ChatActivity var0) {
      return var0.inPreviewMode;
   }

   // $FF: synthetic method
   static boolean access$27500(ChatActivity var0) {
      return var0.inPreviewMode;
   }

   // $FF: synthetic method
   static int access$27600(ChatActivity var0) {
      return var0.currentAccount;
   }

   // $FF: synthetic method
   static boolean access$27700(ChatActivity var0) {
      return var0.inPreviewMode;
   }

   // $FF: synthetic method
   static int access$27900(ChatActivity var0) {
      return var0.currentAccount;
   }

   // $FF: synthetic method
   static int access$2800(ChatActivity var0) {
      return var0.currentAccount;
   }

   // $FF: synthetic method
   static AnimatorSet access$28000(ChatActivity var0) {
      return var0.runningAnimation;
   }

   // $FF: synthetic method
   static AnimatorSet access$28002(ChatActivity var0, AnimatorSet var1) {
      var0.runningAnimation = var1;
      return var1;
   }

   // $FF: synthetic method
   static int access$3300(ChatActivity var0) {
      return var0.currentAccount;
   }

   // $FF: synthetic method
   static int access$3400(ChatActivity var0) {
      return var0.currentAccount;
   }

   // $FF: synthetic method
   static int access$3600(ChatActivity var0) {
      return var0.currentAccount;
   }

   // $FF: synthetic method
   static int access$3900(ChatActivity var0) {
      return var0.currentAccount;
   }

   // $FF: synthetic method
   static int access$4000(ChatActivity var0) {
      return var0.currentAccount;
   }

   // $FF: synthetic method
   static int access$4100(ChatActivity var0) {
      return var0.currentAccount;
   }

   // $FF: synthetic method
   static int access$4200(ChatActivity var0) {
      return var0.currentAccount;
   }

   // $FF: synthetic method
   static int access$4600(ChatActivity var0) {
      return var0.currentAccount;
   }

   // $FF: synthetic method
   static int access$4700(ChatActivity var0) {
      return var0.currentAccount;
   }

   // $FF: synthetic method
   static int access$4800(ChatActivity var0) {
      return var0.currentAccount;
   }

   // $FF: synthetic method
   static int access$5000(ChatActivity var0) {
      return var0.currentAccount;
   }

   // $FF: synthetic method
   static int access$5100(ChatActivity var0) {
      return var0.currentAccount;
   }

   // $FF: synthetic method
   static int access$5200(ChatActivity var0) {
      return var0.currentAccount;
   }

   // $FF: synthetic method
   static int access$5300(ChatActivity var0) {
      return var0.currentAccount;
   }

   // $FF: synthetic method
   static int access$5400(ChatActivity var0) {
      return var0.currentAccount;
   }

   // $FF: synthetic method
   static int access$7100(ChatActivity var0) {
      return var0.classGuid;
   }

   // $FF: synthetic method
   static int access$7200(ChatActivity var0) {
      return var0.currentAccount;
   }

   // $FF: synthetic method
   static View access$7300(ChatActivity var0) {
      return var0.fragmentView;
   }

   // $FF: synthetic method
   static View access$7400(ChatActivity var0) {
      return var0.fragmentView;
   }

   // $FF: synthetic method
   static ActionBar access$8300(ChatActivity var0) {
      return var0.actionBar;
   }

   // $FF: synthetic method
   static ActionBarLayout access$8400(ChatActivity var0) {
      return var0.parentLayout;
   }

   // $FF: synthetic method
   static ActionBar access$8500(ChatActivity var0) {
      return var0.actionBar;
   }

   // $FF: synthetic method
   static ActionBar access$8600(ChatActivity var0) {
      return var0.actionBar;
   }

   // $FF: synthetic method
   static boolean access$8700(ChatActivity var0) {
      return var0.inPreviewMode;
   }

   // $FF: synthetic method
   static ActionBarLayout access$8800(ChatActivity var0) {
      return var0.parentLayout;
   }

   // $FF: synthetic method
   static ActionBar access$8900(ChatActivity var0) {
      return var0.actionBar;
   }

   // $FF: synthetic method
   static ActionBar access$900(ChatActivity var0) {
      return var0.actionBar;
   }

   // $FF: synthetic method
   static ActionBar access$9100(ChatActivity var0) {
      return var0.actionBar;
   }

   // $FF: synthetic method
   static ActionBar access$9200(ChatActivity var0) {
      return var0.actionBar;
   }

   // $FF: synthetic method
   static ActionBar access$9300(ChatActivity var0) {
      return var0.actionBar;
   }

   // $FF: synthetic method
   static boolean access$9500(ChatActivity var0) {
      return var0.inPreviewMode;
   }

   // $FF: synthetic method
   static ActionBar access$9600(ChatActivity var0) {
      return var0.actionBar;
   }

   // $FF: synthetic method
   static boolean access$9700(ChatActivity var0) {
      return var0.inPreviewMode;
   }

   // $FF: synthetic method
   static boolean access$9800(ChatActivity var0) {
      return var0.inPreviewMode;
   }

   private void addToPolls(MessageObject var1, MessageObject var2) {
      long var3 = var1.getPollId();
      if (var3 != 0L) {
         ArrayList var5 = (ArrayList)this.polls.get(var3);
         ArrayList var6 = var5;
         if (var5 == null) {
            var6 = new ArrayList();
            this.polls.put(var3, var6);
         }

         var6.add(var1);
         if (var2 != null) {
            var6.remove(var2);
         }
      }

   }

   private void addToSelectedMessages(MessageObject var1, boolean var2) {
      this.addToSelectedMessages(var1, var2, true);
   }

   private void addToSelectedMessages(MessageObject var1, boolean var2, boolean var3) {
      int var4 = this.cantForwardMessagesCount;
      byte var5;
      if (var1 != null) {
         if (var1.getDialogId() == this.dialog_id) {
            var5 = 0;
         } else {
            var5 = 1;
         }

         if (var2 && var1.getGroupId() != 0L) {
            MessageObject.GroupedMessages var25 = (MessageObject.GroupedMessages)this.groupedMessagesMap.get(var1.getGroupId());
            if (var25 != null) {
               var4 = 0;
               boolean var28 = false;

               int var29;
               MessageObject var36;
               for(var29 = 0; var4 < var25.messages.size(); ++var4) {
                  var36 = (MessageObject)var25.messages.get(var4);
                  if (this.selectedMessagesIds[var5].indexOfKey(var36.getId()) < 0) {
                     var29 = var4;
                     var28 = true;
                  }
               }

               for(var4 = 0; var4 < var25.messages.size(); ++var4) {
                  var36 = (MessageObject)var25.messages.get(var4);
                  if (var28) {
                     if (this.selectedMessagesIds[var5].indexOfKey(var36.getId()) < 0) {
                        if (var4 == var29) {
                           var2 = true;
                        } else {
                           var2 = false;
                        }

                        this.addToSelectedMessages(var36, false, var2);
                     }
                  } else {
                     if (var4 == var25.messages.size() - 1) {
                        var2 = true;
                     } else {
                        var2 = false;
                     }

                     this.addToSelectedMessages(var36, false, var2);
                  }
               }
            }

            return;
         }

         if (this.selectedMessagesIds[var5].indexOfKey(var1.getId()) >= 0) {
            this.selectedMessagesIds[var5].remove(var1.getId());
            if (var1.type == 0 || var1.caption != null) {
               this.selectedMessagesCanCopyIds[var5].remove(var1.getId());
            }

            if (var1.isSticker()) {
               this.selectedMessagesCanStarIds[var5].remove(var1.getId());
            }

            if (var1.canEditMessage(this.currentChat)) {
               --this.canEditMessagesCount;
            }

            if (!var1.canDeleteMessage(this.currentChat)) {
               --this.cantDeleteMessagesCount;
            }

            if (!var1.canForwardMessage()) {
               --this.cantForwardMessagesCount;
            }
         } else {
            if (this.selectedMessagesIds[0].size() + this.selectedMessagesIds[1].size() >= 100) {
               return;
            }

            this.selectedMessagesIds[var5].put(var1.getId(), var1);
            if (var1.type == 0 || var1.caption != null) {
               this.selectedMessagesCanCopyIds[var5].put(var1.getId(), var1);
            }

            if (var1.isSticker()) {
               this.selectedMessagesCanStarIds[var5].put(var1.getId(), var1);
            }

            if (var1.canEditMessage(this.currentChat)) {
               ++this.canEditMessagesCount;
            }

            if (!var1.canDeleteMessage(this.currentChat)) {
               ++this.cantDeleteMessagesCount;
            }

            if (!var1.canForwardMessage()) {
               ++this.cantForwardMessagesCount;
            }
         }
      }

      AnimatorSet var23 = this.forwardButtonAnimation;
      if (var23 != null) {
         var23.cancel();
         this.forwardButtonAnimation = null;
      }

      if (var3 && super.actionBar.isActionModeShowed()) {
         int var6 = this.selectedMessagesIds[0].size() + this.selectedMessagesIds[1].size();
         if (var6 == 0) {
            this.hideActionMode();
            this.updatePinnedMessageView(true);
         } else {
            ActionBarMenuItem var9 = super.actionBar.createActionMode().getItem(10);
            ActionBarMenuItem var8 = super.actionBar.createActionMode().getItem(22);
            final ActionBarMenuItem var24 = super.actionBar.createActionMode().getItem(23);
            ActionBarMenuItem var10 = super.actionBar.createActionMode().getItem(11);
            float var13;
            if ((var4 != 0 || this.cantForwardMessagesCount == 0) && (var4 == 0 || this.cantForwardMessagesCount != 0)) {
               if (var10 != null) {
                  if (this.cantForwardMessagesCount == 0) {
                     var2 = true;
                  } else {
                     var2 = false;
                  }

                  var10.setEnabled(var2);
                  if (this.cantForwardMessagesCount == 0) {
                     var13 = 1.0F;
                  } else {
                     var13 = 0.5F;
                  }

                  var10.setAlpha(var13);
               }

               TextView var39 = this.forwardButton;
               if (var39 != null) {
                  if (this.cantForwardMessagesCount == 0) {
                     var2 = true;
                  } else {
                     var2 = false;
                  }

                  var39.setEnabled(var2);
                  var39 = this.forwardButton;
                  if (this.cantForwardMessagesCount == 0) {
                     var13 = 1.0F;
                  } else {
                     var13 = 0.5F;
                  }

                  var39.setAlpha(var13);
               }
            } else {
               this.forwardButtonAnimation = new AnimatorSet();
               ArrayList var11 = new ArrayList();
               if (var10 != null) {
                  if (this.cantForwardMessagesCount == 0) {
                     var2 = true;
                  } else {
                     var2 = false;
                  }

                  var10.setEnabled(var2);
                  Property var12 = View.ALPHA;
                  if (this.cantForwardMessagesCount == 0) {
                     var13 = 1.0F;
                  } else {
                     var13 = 0.5F;
                  }

                  var11.add(ObjectAnimator.ofFloat(var10, var12, new float[]{var13}));
               }

               TextView var37 = this.forwardButton;
               if (var37 != null) {
                  if (this.cantForwardMessagesCount == 0) {
                     var2 = true;
                  } else {
                     var2 = false;
                  }

                  var37.setEnabled(var2);
                  TextView var40 = this.forwardButton;
                  Property var38 = View.ALPHA;
                  if (this.cantForwardMessagesCount == 0) {
                     var13 = 1.0F;
                  } else {
                     var13 = 0.5F;
                  }

                  var11.add(ObjectAnimator.ofFloat(var40, var38, new float[]{var13}));
               }

               this.forwardButtonAnimation.playTogether(var11);
               this.forwardButtonAnimation.setDuration(100L);
               this.forwardButtonAnimation.addListener(new AnimatorListenerAdapter() {
                  public void onAnimationEnd(Animator var1) {
                     ChatActivity.this.forwardButtonAnimation = null;
                  }
               });
               this.forwardButtonAnimation.start();
            }

            int var14 = var9.getVisibility();
            int var15 = var8.getVisibility();
            final byte var26;
            if (this.selectedMessagesCanCopyIds[0].size() + this.selectedMessagesCanCopyIds[1].size() != 0) {
               var26 = 0;
            } else {
               var26 = 8;
            }

            var9.setVisibility(var26);
            if (DataQuery.getInstance(super.currentAccount).canAddStickerToFavorites() && this.selectedMessagesCanStarIds[0].size() + this.selectedMessagesCanStarIds[1].size() == var6) {
               var26 = 0;
            } else {
               var26 = 8;
            }

            var8.setVisibility(var26);
            int var16 = var9.getVisibility();
            int var17 = var8.getVisibility();
            var9 = super.actionBar.createActionMode().getItem(12);
            if (this.cantDeleteMessagesCount == 0) {
               var26 = 0;
            } else {
               var26 = 8;
            }

            var9.setVisibility(var26);
            this.hasUnfavedSelected = false;

            for(var4 = 0; var4 < 2; ++var4) {
               for(int var27 = 0; var27 < this.selectedMessagesCanStarIds[var4].size(); ++var27) {
                  MessageObject var35 = (MessageObject)this.selectedMessagesCanStarIds[var4].valueAt(var27);
                  if (!DataQuery.getInstance(super.currentAccount).isStickerInFavorites(var35.getDocument())) {
                     this.hasUnfavedSelected = true;
                     break;
                  }
               }

               if (this.hasUnfavedSelected) {
                  break;
               }
            }

            if (this.hasUnfavedSelected) {
               var4 = 2131165626;
            } else {
               var4 = 2131165677;
            }

            var8.setIcon(var4);
            final byte var7;
            if (this.canEditMessagesCount == 1 && var6 == 1) {
               var7 = 0;
            } else {
               var7 = 8;
            }

            AnimatorSet var34;
            if (this.replyButton != null) {
               boolean var32;
               label422: {
                  TLRPC.EncryptedChat var30 = this.currentEncryptedChat;
                  if ((var30 == null || AndroidUtilities.getPeerLayerVersion(var30.layer) >= 46) && !this.isBroadcast) {
                     FrameLayout var31 = this.bottomOverlayChat;
                     if (var31 == null || var31.getVisibility() != 0) {
                        TLRPC.Chat var33 = this.currentChat;
                        if (var33 == null || !ChatObject.isNotInChat(var33) && (!ChatObject.isChannel(this.currentChat) || ChatObject.canPost(this.currentChat) || this.currentChat.megagroup) && ChatObject.canSendMessages(this.currentChat)) {
                           var32 = true;
                           break label422;
                        }
                     }
                  }

                  var32 = false;
               }

               if (!var32 || var6 == 0 || this.selectedMessagesIds[0].size() != 0 && this.selectedMessagesIds[1].size() != 0) {
                  var26 = 8;
               } else if (var6 == 1) {
                  var26 = 0;
               } else {
                  var6 = 0;
                  var5 = 0;
                  long var18 = 0L;

                  while(true) {
                     var26 = var5;
                     if (var6 >= 2) {
                        break;
                     }

                     int var20 = this.selectedMessagesIds[var6].size();
                     var4 = 0;

                     while(true) {
                        if (var4 >= var20) {
                           var26 = var5;
                           break;
                        }

                        long var21 = ((MessageObject)this.selectedMessagesIds[var6].valueAt(var4)).getGroupId();
                        if (var21 == 0L || var18 != 0L && var18 != var21) {
                           var26 = 8;
                           break;
                        }

                        ++var4;
                        var18 = var21;
                     }

                     if (var26 == 8) {
                        break;
                     }

                     ++var6;
                     var5 = var26;
                  }
               }

               if (this.replyButton.getVisibility() != var26) {
                  var34 = this.replyButtonAnimation;
                  if (var34 != null) {
                     var34.cancel();
                  }

                  this.replyButtonAnimation = new AnimatorSet();
                  if (var26 == 0) {
                     this.replyButton.setVisibility(var26);
                     this.replyButtonAnimation.playTogether(new Animator[]{ObjectAnimator.ofFloat(this.replyButton, View.ALPHA, new float[]{1.0F}), ObjectAnimator.ofFloat(this.replyButton, View.SCALE_Y, new float[]{1.0F})});
                  } else {
                     this.replyButtonAnimation.playTogether(new Animator[]{ObjectAnimator.ofFloat(this.replyButton, View.ALPHA, new float[]{0.0F}), ObjectAnimator.ofFloat(this.replyButton, View.SCALE_Y, new float[]{0.0F})});
                  }

                  this.replyButtonAnimation.setDuration(100L);
                  this.replyButtonAnimation.addListener(new AnimatorListenerAdapter() {
                     public void onAnimationCancel(Animator var1) {
                        if (ChatActivity.this.replyButtonAnimation != null && ChatActivity.this.replyButtonAnimation.equals(var1)) {
                           ChatActivity.this.replyButtonAnimation = null;
                        }

                     }

                     public void onAnimationEnd(Animator var1) {
                        if (ChatActivity.this.replyButtonAnimation != null && ChatActivity.this.replyButtonAnimation.equals(var1) && var26 == 8) {
                           ChatActivity.this.replyButton.setVisibility(8);
                        }

                     }
                  });
                  this.replyButtonAnimation.start();
               }
            }

            if (var24 != null) {
               if (var14 == var16 && var15 == var17) {
                  if (var24.getVisibility() != var7) {
                     var34 = this.editButtonAnimation;
                     if (var34 != null) {
                        var34.cancel();
                     }

                     this.editButtonAnimation = new AnimatorSet();
                     var24.setPivotX((float)AndroidUtilities.dp(54.0F));
                     var24.setPivotX((float)AndroidUtilities.dp(54.0F));
                     if (var7 == 0) {
                        var24.setVisibility(var7);
                        this.editButtonAnimation.playTogether(new Animator[]{ObjectAnimator.ofFloat(var24, View.ALPHA, new float[]{1.0F}), ObjectAnimator.ofFloat(var24, View.SCALE_X, new float[]{1.0F})});
                     } else {
                        this.editButtonAnimation.playTogether(new Animator[]{ObjectAnimator.ofFloat(var24, View.ALPHA, new float[]{0.0F}), ObjectAnimator.ofFloat(var24, View.SCALE_X, new float[]{0.0F})});
                     }

                     this.editButtonAnimation.setDuration(100L);
                     this.editButtonAnimation.addListener(new AnimatorListenerAdapter() {
                        public void onAnimationCancel(Animator var1) {
                           if (ChatActivity.this.editButtonAnimation != null && ChatActivity.this.editButtonAnimation.equals(var1)) {
                              ChatActivity.this.editButtonAnimation = null;
                           }

                        }

                        public void onAnimationEnd(Animator var1) {
                           if (ChatActivity.this.editButtonAnimation != null && ChatActivity.this.editButtonAnimation.equals(var1) && var7 == 8) {
                              var24.setVisibility(8);
                           }

                        }
                     });
                     this.editButtonAnimation.start();
                  }
               } else {
                  if (var7 == 0) {
                     var24.setAlpha(1.0F);
                     var24.setScaleX(1.0F);
                  } else {
                     var24.setAlpha(0.0F);
                     var24.setScaleX(0.0F);
                  }

                  var24.setVisibility(var7);
               }
            }
         }
      }

   }

   private void alertUserOpenError(MessageObject var1) {
      if (this.getParentActivity() != null) {
         AlertDialog.Builder var2 = new AlertDialog.Builder(this.getParentActivity());
         var2.setTitle(LocaleController.getString("AppName", 2131558635));
         var2.setPositiveButton(LocaleController.getString("OK", 2131560097), (OnClickListener)null);
         if (var1.type == 3) {
            var2.setMessage(LocaleController.getString("NoPlayerInstalled", 2131559938));
         } else {
            var2.setMessage(LocaleController.formatString("NoHandleAppInstalled", 2131559926, var1.getDocument().mime_type));
         }

         this.showDialog(var2.create());
      }
   }

   private void applyDraftMaybe(boolean var1) {
      if (this.chatActivityEnterView != null) {
         TLRPC.DraftMessage var2 = DataQuery.getInstance(super.currentAccount).getDraft(this.dialog_id);
         TLRPC.Message var3;
         if (var2 != null && var2.reply_to_msg_id != 0) {
            var3 = DataQuery.getInstance(super.currentAccount).getDraftMessage(this.dialog_id);
         } else {
            var3 = null;
         }

         int var8;
         if (this.chatActivityEnterView.getFieldText() == null) {
            if (var2 != null) {
               this.chatActivityEnterView.setWebPage((TLRPC.WebPage)null, var2.no_webpage ^ true);
               Object var7;
               if (var2.entities.isEmpty()) {
                  var7 = var2.message;
               } else {
                  SpannableStringBuilder var4 = SpannableStringBuilder.valueOf(var2.message);
                  DataQuery.sortEntities(var2.entities);
                  int var5 = 0;
                  int var6 = 0;

                  while(true) {
                     var7 = var4;
                     if (var5 >= var2.entities.size()) {
                        break;
                     }

                     TLRPC.MessageEntity var10 = (TLRPC.MessageEntity)var2.entities.get(var5);
                     var1 = var10 instanceof TLRPC.TL_inputMessageEntityMentionName;
                     if (!var1 && !(var10 instanceof TLRPC.TL_messageEntityMentionName)) {
                        if (var10 instanceof TLRPC.TL_messageEntityCode) {
                           var4.insert(var10.offset + var10.length + var6, "`");
                           var4.insert(var10.offset + var6, "`");
                           var8 = var6 + 2;
                        } else if (var10 instanceof TLRPC.TL_messageEntityPre) {
                           var4.insert(var10.offset + var10.length + var6, "```");
                           var4.insert(var10.offset + var6, "```");
                           var8 = var6 + 6;
                        } else {
                           TypefaceSpan var12;
                           if (var10 instanceof TLRPC.TL_messageEntityBold) {
                              var12 = new TypefaceSpan(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                              var8 = var10.offset;
                              var4.setSpan(var12, var8 + var6, var8 + var10.length + var6, 33);
                              var8 = var6;
                           } else if (var10 instanceof TLRPC.TL_messageEntityItalic) {
                              var12 = new TypefaceSpan(AndroidUtilities.getTypeface("fonts/ritalic.ttf"));
                              var8 = var10.offset;
                              var4.setSpan(var12, var8 + var6, var8 + var10.length + var6, 33);
                              var8 = var6;
                           } else {
                              var8 = var6;
                              if (var10 instanceof TLRPC.TL_messageEntityTextUrl) {
                                 URLSpanReplacement var13 = new URLSpanReplacement(var10.url);
                                 var8 = var10.offset;
                                 var4.setSpan(var13, var8 + var6, var8 + var10.length + var6, 33);
                                 var8 = var6;
                              }
                           }
                        }
                     } else {
                        if (var1) {
                           var8 = ((TLRPC.TL_inputMessageEntityMentionName)var10).user_id.user_id;
                        } else {
                           var8 = ((TLRPC.TL_messageEntityMentionName)var10).user_id;
                        }

                        if (var10.offset + var6 + var10.length < var4.length() && var4.charAt(var10.offset + var6 + var10.length) == ' ') {
                           ++var10.length;
                        }

                        StringBuilder var9 = new StringBuilder();
                        var9.append("");
                        var9.append(var8);
                        URLSpanUserMention var11 = new URLSpanUserMention(var9.toString(), 1);
                        var8 = var10.offset;
                        var4.setSpan(var11, var8 + var6, var8 + var6 + var10.length, 33);
                        var8 = var6;
                     }

                     ++var5;
                     var6 = var8;
                  }
               }

               this.chatActivityEnterView.setFieldText((CharSequence)var7);
               if (this.getArguments().getBoolean("hasUrl", false)) {
                  this.chatActivityEnterView.setSelection(var2.message.indexOf(10) + 1);
                  AndroidUtilities.runOnUIThread(new _$$Lambda$ChatActivity$ZJ9XtdLbm_762OgSj36cLqEdhaw(this), 700L);
               }
            }
         } else if (var1 && var2 == null) {
            this.chatActivityEnterView.setFieldText("");
            this.hideFieldPanel(true);
         }

         if (this.replyingMessageObject == null && var3 != null) {
            var8 = super.currentAccount;
            this.replyingMessageObject = new MessageObject(var8, var3, MessagesController.getInstance(var8).getUsers(), false);
            this.showFieldPanelForReply(this.replyingMessageObject);
         }

      }
   }

   private void checkActionBarMenu() {
      ChatAvatarContainer var6;
      label52: {
         TLRPC.EncryptedChat var1 = this.currentEncryptedChat;
         View var5;
         if (var1 == null || var1 instanceof TLRPC.TL_encryptedChat) {
            TLRPC.Chat var3 = this.currentChat;
            if (var3 == null || !ChatObject.isNotInChat(var3)) {
               TLRPC.User var4 = this.currentUser;
               if (var4 == null || !UserObject.isDeleted(var4)) {
                  var5 = this.timeItem2;
                  if (var5 != null) {
                     var5.setVisibility(0);
                  }

                  var6 = this.avatarContainer;
                  if (var6 != null) {
                     var6.showTimeItem();
                  }
                  break label52;
               }
            }
         }

         var5 = this.timeItem2;
         if (var5 != null) {
            var5.setVisibility(8);
         }

         var6 = this.avatarContainer;
         if (var6 != null) {
            var6.hideTimeItem();
         }
      }

      var6 = this.avatarContainer;
      if (var6 != null) {
         TLRPC.EncryptedChat var2 = this.currentEncryptedChat;
         if (var2 != null) {
            var6.setTime(var2.ttl);
         }
      }

      this.checkAndUpdateAvatar();
   }

   private void checkAndUpdateAvatar() {
      if (this.currentUser != null) {
         TLRPC.User var1 = MessagesController.getInstance(super.currentAccount).getUser(this.currentUser.id);
         if (var1 == null) {
            return;
         }

         this.currentUser = var1;
      } else if (this.currentChat != null) {
         TLRPC.Chat var2 = MessagesController.getInstance(super.currentAccount).getChat(this.currentChat.id);
         if (var2 == null) {
            return;
         }

         this.currentChat = var2;
      }

      ChatAvatarContainer var3 = this.avatarContainer;
      if (var3 != null) {
         var3.checkAndUpdateAvatar();
      }

   }

   private void checkAutoDownloadMessage(MessageObject var1) {
      if (!var1.mediaExists) {
         TLRPC.Message var2 = var1.messageOwner;
         int var3 = DownloadController.getInstance(super.currentAccount).canDownloadMedia(var2);
         if (var3 != 0) {
            TLRPC.Document var4 = var1.getDocument();
            TLRPC.PhotoSize var6;
            if (var4 == null) {
               var6 = FileLoader.getClosestPhotoSizeWithSize(var1.photoThumbs, AndroidUtilities.getPhotoSize());
            } else {
               var6 = null;
            }

            if (var4 != null || var6 != null) {
               byte var5 = 2;
               if (var3 == 2 || var3 == 1 && var1.isVideo()) {
                  if (var4 != null && this.currentEncryptedChat == null && !var1.shouldEncryptPhotoOrVideo() && var1.canStreamVideo()) {
                     FileLoader.getInstance(super.currentAccount).loadFile(var4, var1, 0, 10);
                  }
               } else if (var4 != null) {
                  FileLoader var7 = FileLoader.getInstance(super.currentAccount);
                  if (!MessageObject.isVideoDocument(var4) || !var1.shouldEncryptPhotoOrVideo()) {
                     var5 = 0;
                  }

                  var7.loadFile(var4, var1, 0, var5);
               } else {
                  FileLoader var9 = FileLoader.getInstance(super.currentAccount);
                  ImageLocation var8 = ImageLocation.getForObject(var6, var1.photoThumbsObject);
                  if (var1.shouldEncryptPhotoOrVideo()) {
                     var5 = 2;
                  } else {
                     var5 = 0;
                  }

                  var9.loadFile(var8, var1, (String)null, 0, var5);
               }

            }
         }
      }
   }

   private void checkAutoDownloadMessages(boolean var1) {
      RecyclerListView var2 = this.chatListView;
      if (var2 != null) {
         int var3 = var2.getChildCount();
         int var4 = 0;
         int var5 = -1;

         int var6;
         int var8;
         int var9;
         for(var6 = -1; var4 < var3; var6 = var8) {
            View var7 = this.chatListView.getChildAt(var4);
            if (!(var7 instanceof ChatMessageCell)) {
               var8 = var6;
            } else {
               RecyclerView.ViewHolder var13 = this.chatListView.findContainingViewHolder(var7);
               var9 = var5;
               if (var13 != null) {
                  var8 = var13.getAdapterPosition();
                  var9 = var5;
                  var6 = var8;
                  if (var5 == -1) {
                     var9 = var8;
                     var6 = var8;
                  }
               }

               ChatMessageCell var10 = (ChatMessageCell)var7;
               MessageObject var11 = var10.getMessageObject();
               var5 = var9;
               var8 = var6;
               if (var11 != null) {
                  var5 = var9;
                  var8 = var6;
                  if (!var11.mediaExists) {
                     if (!var11.isSent()) {
                        var5 = var9;
                        var8 = var6;
                     } else {
                        TLRPC.Document var14 = var11.getDocument();
                        if (var14 == null) {
                           var5 = var9;
                           var8 = var6;
                        } else {
                           var5 = var9;
                           var8 = var6;
                           if (!MessageObject.isStickerDocument(var14)) {
                              var5 = var9;
                              var8 = var6;
                              if (!MessageObject.isGifDocument(var14)) {
                                 var5 = var9;
                                 var8 = var6;
                                 if (!MessageObject.isRoundVideoDocument(var14)) {
                                    int var12 = DownloadController.getInstance(super.currentAccount).canDownloadMedia(var11.messageOwner);
                                    var5 = var9;
                                    var8 = var6;
                                    if (var12 != 0) {
                                       byte var15 = 2;
                                       if (var12 == 2) {
                                          var5 = var9;
                                          var8 = var6;
                                          if (this.currentEncryptedChat == null) {
                                             var5 = var9;
                                             var8 = var6;
                                             if (!var11.shouldEncryptPhotoOrVideo()) {
                                                var5 = var9;
                                                var8 = var6;
                                                if (var11.canStreamVideo()) {
                                                   FileLoader.getInstance(super.currentAccount).loadFile(var14, var11, 0, 10);
                                                   var5 = var9;
                                                   var8 = var6;
                                                }
                                             }
                                          }
                                       } else {
                                          FileLoader var16 = FileLoader.getInstance(super.currentAccount);
                                          if (!MessageObject.isVideoDocument(var14) || !var11.shouldEncryptPhotoOrVideo()) {
                                             var15 = 0;
                                          }

                                          var16.loadFile(var14, var11, 0, var15);
                                          var10.updateButtonState(false, true, false);
                                          var8 = var6;
                                          var5 = var9;
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }

            ++var4;
         }

         if (var5 != -1) {
            if (var1) {
               var5 = var6 + 10;
               var9 = var5;
               if (var5 >= this.chatAdapter.messagesEndRow) {
                  var9 = this.chatAdapter.messagesEndRow;
               }

               for(var5 = this.messages.size(); var6 < var9; ++var6) {
                  var4 = var6 - this.chatAdapter.messagesStartRow;
                  if (var4 >= 0 && var4 < var5) {
                     this.checkAutoDownloadMessage((MessageObject)this.messages.get(var4));
                  }
               }
            } else {
               var9 = var5 - 20;
               var6 = var9;
               if (var9 <= this.chatAdapter.messagesStartRow) {
                  var6 = this.chatAdapter.messagesStartRow;
               }

               var9 = var5 - 1;

               for(var5 = this.messages.size(); var9 >= var6; --var9) {
                  var4 = var9 - this.chatAdapter.messagesStartRow;
                  if (var4 >= 0 && var4 < var5) {
                     this.checkAutoDownloadMessage((MessageObject)this.messages.get(var4));
                  }
               }
            }
         }

         this.showNoSoundHint();
      }
   }

   private void checkBotCommands() {
      boolean var1 = false;
      int var2 = 0;
      URLSpanBotCommand.enabled = false;
      TLRPC.User var3 = this.currentUser;
      if (var3 != null && var3.bot) {
         URLSpanBotCommand.enabled = true;
      } else {
         TLRPC.ChatFull var5 = this.chatInfo;
         if (var5 instanceof TLRPC.TL_chatFull) {
            while(var2 < this.chatInfo.participants.participants.size()) {
               TLRPC.ChatParticipant var7 = (TLRPC.ChatParticipant)this.chatInfo.participants.participants.get(var2);
               var3 = MessagesController.getInstance(super.currentAccount).getUser(var7.user_id);
               if (var3 != null && var3.bot) {
                  URLSpanBotCommand.enabled = true;
                  break;
               }

               ++var2;
            }
         } else if (var5 instanceof TLRPC.TL_channelFull) {
            boolean var4 = var1;
            if (!var5.bot_info.isEmpty()) {
               TLRPC.Chat var6 = this.currentChat;
               var4 = var1;
               if (var6 != null) {
                  var4 = var1;
                  if (var6.megagroup) {
                     var4 = true;
                  }
               }
            }

            URLSpanBotCommand.enabled = var4;
         }
      }

   }

   private void checkBotKeyboard() {
      if (this.chatActivityEnterView != null) {
         MessageObject var1 = this.botButtons;
         if (var1 != null && !this.userBlocked) {
            if (var1.messageOwner.reply_markup instanceof TLRPC.TL_replyKeyboardForceReply) {
               SharedPreferences var3 = MessagesController.getMainSettings(super.currentAccount);
               StringBuilder var2 = new StringBuilder();
               var2.append("answered_");
               var2.append(this.dialog_id);
               if (var3.getInt(var2.toString(), 0) != this.botButtons.getId() && (this.replyingMessageObject == null || this.chatActivityEnterView.getFieldText() == null)) {
                  var1 = this.botButtons;
                  this.botReplyButtons = var1;
                  this.chatActivityEnterView.setButtons(var1);
                  this.showFieldPanelForReply(this.botButtons);
               }
            } else {
               var1 = this.replyingMessageObject;
               if (var1 != null && this.botReplyButtons == var1) {
                  this.botReplyButtons = null;
                  this.hideFieldPanel(true);
               }

               this.chatActivityEnterView.setButtons(this.botButtons);
            }
         }
      }

   }

   private void checkContextBotPanel() {
      if (this.allowStickersPanel) {
         MentionsAdapter var1 = this.mentionsAdapter;
         if (var1 != null && var1.isBotContext()) {
            AnimatorSet var2;
            if (!this.allowContextBotPanel && !this.allowContextBotPanelSecond) {
               if (this.mentionContainer.getVisibility() == 0 && this.mentionContainer.getTag() == null) {
                  var2 = this.mentionListAnimation;
                  if (var2 != null) {
                     var2.cancel();
                  }

                  this.mentionContainer.setTag(1);
                  this.mentionListAnimation = new AnimatorSet();
                  this.mentionListAnimation.playTogether(new Animator[]{ObjectAnimator.ofFloat(this.mentionContainer, View.ALPHA, new float[]{0.0F})});
                  this.mentionListAnimation.addListener(new AnimatorListenerAdapter() {
                     public void onAnimationCancel(Animator var1) {
                        if (ChatActivity.this.mentionListAnimation != null && ChatActivity.this.mentionListAnimation.equals(var1)) {
                           ChatActivity.this.mentionListAnimation = null;
                        }

                     }

                     public void onAnimationEnd(Animator var1) {
                        if (ChatActivity.this.mentionListAnimation != null && ChatActivity.this.mentionListAnimation.equals(var1)) {
                           ChatActivity.this.mentionContainer.setVisibility(4);
                           ChatActivity.this.mentionListAnimation = null;
                           ChatActivity.this.updateMessageListAccessibilityVisibility();
                        }

                     }
                  });
                  this.mentionListAnimation.setDuration(200L);
                  this.mentionListAnimation.start();
               }
            } else if (this.mentionContainer.getVisibility() == 4 || this.mentionContainer.getTag() != null) {
               var2 = this.mentionListAnimation;
               if (var2 != null) {
                  var2.cancel();
               }

               this.mentionContainer.setTag((Object)null);
               this.mentionContainer.setVisibility(0);
               this.updateMessageListAccessibilityVisibility();
               this.mentionListAnimation = new AnimatorSet();
               this.mentionListAnimation.playTogether(new Animator[]{ObjectAnimator.ofFloat(this.mentionContainer, View.ALPHA, new float[]{0.0F, 1.0F})});
               this.mentionListAnimation.addListener(new AnimatorListenerAdapter() {
                  public void onAnimationCancel(Animator var1) {
                     if (ChatActivity.this.mentionListAnimation != null && ChatActivity.this.mentionListAnimation.equals(var1)) {
                        ChatActivity.this.mentionListAnimation = null;
                     }

                  }

                  public void onAnimationEnd(Animator var1) {
                     if (ChatActivity.this.mentionListAnimation != null && ChatActivity.this.mentionListAnimation.equals(var1)) {
                        ChatActivity.this.mentionListAnimation = null;
                     }

                  }
               });
               this.mentionListAnimation.setDuration(200L);
               this.mentionListAnimation.start();
            }
         }
      }

   }

   private void checkEditTimer() {
      ChatActivityEnterView var1 = this.chatActivityEnterView;
      if (var1 != null) {
         MessageObject var2 = var1.getEditingMessageObject();
         if (var2 != null) {
            TLRPC.User var4 = this.currentUser;
            if (var4 == null || !var4.self) {
               int var3;
               if (var2.canEditMessageAnytime(this.currentChat)) {
                  var3 = 360;
               } else {
                  var3 = MessagesController.getInstance(super.currentAccount).maxEditTime + 300 - Math.abs(ConnectionsManager.getInstance(super.currentAccount).getCurrentTime() - var2.messageOwner.date);
               }

               if (var3 > 0) {
                  if (var3 <= 300) {
                     this.replyObjectTextView.setText(LocaleController.formatString("TimeToEdit", 2131560897, String.format("%d:%02d", var3 / 60, var3 % 60)));
                  }

                  AndroidUtilities.runOnUIThread(new _$$Lambda$ChatActivity$BhRjZmtnKKyPZ5cOcgFDHcn6z6c(this), 1000L);
               } else {
                  this.chatActivityEnterView.onEditTimeExpired();
                  this.replyObjectTextView.setText(LocaleController.formatString("TimeToEditExpired", 2131560898));
               }

            }
         }
      }
   }

   private void checkListViewPaddings() {
      if (!this.wasManualScroll) {
         MessageObject var1 = this.unreadMessageObject;
         if (var1 != null) {
            if (this.messages.indexOf(var1) >= 0) {
               this.fixPaddingsInLayout = true;
               View var2 = super.fragmentView;
               if (var2 != null) {
                  var2.requestLayout();
                  return;
               }
            }

            return;
         }
      }

      AndroidUtilities.runOnUIThread(new _$$Lambda$ChatActivity$qjQM5B3y6VBtwKZMKbvAeLv3zzQ(this));
   }

   private void checkListViewPaddingsInternal() {
      GridLayoutManagerFixed var1 = this.chatLayoutManager;
      if (var1 != null) {
         Exception var10000;
         label143: {
            int var2;
            int var3;
            boolean var10001;
            label137: {
               label136: {
                  try {
                     var2 = var1.findFirstVisibleItemPosition();
                     if (this.wasManualScroll || this.unreadMessageObject == null) {
                        break label136;
                     }

                     var3 = this.messages.indexOf(this.unreadMessageObject);
                  } catch (Exception var18) {
                     var10000 = var18;
                     var10001 = false;
                     break label143;
                  }

                  if (var3 >= 0) {
                     try {
                        var3 += this.chatAdapter.messagesStartRow;
                     } catch (Exception var17) {
                        var10000 = var17;
                        var10001 = false;
                        break label143;
                     }

                     var2 = -1;
                     break label137;
                  }
               }

               var3 = -1;
            }

            int var4;
            label123: {
               if (var2 != -1) {
                  View var19;
                  try {
                     var19 = this.chatLayoutManager.findViewByPosition(var2);
                  } catch (Exception var16) {
                     var10000 = var16;
                     var10001 = false;
                     break label143;
                  }

                  if (var19 != null) {
                     try {
                        var4 = this.chatListView.getMeasuredHeight() - var19.getBottom() - this.chatListView.getPaddingBottom();
                        break label123;
                     } catch (Exception var15) {
                        var10000 = var15;
                        var10001 = false;
                        break label143;
                     }
                  }
               }

               var4 = 0;
            }

            label145: {
               LayoutParams var20;
               label112: {
                  label111: {
                     try {
                        if (this.chatListView.getPaddingTop() == AndroidUtilities.dp(52.0F)) {
                           break label112;
                        }

                        if (this.pinnedMessageView != null && this.pinnedMessageView.getTag() == null) {
                           break label111;
                        }
                     } catch (Exception var14) {
                        var10000 = var14;
                        var10001 = false;
                        break label143;
                     }

                     try {
                        if (this.reportSpamView == null || this.reportSpamView.getTag() != null) {
                           break label112;
                        }
                     } catch (Exception var13) {
                        var10000 = var13;
                        var10001 = false;
                        break label143;
                     }
                  }

                  try {
                     this.chatListView.setPadding(0, AndroidUtilities.dp(52.0F), 0, AndroidUtilities.dp(3.0F));
                     var20 = (LayoutParams)this.floatingDateView.getLayoutParams();
                     var20.topMargin = AndroidUtilities.dp(52.0F);
                     this.floatingDateView.setLayoutParams(var20);
                     this.chatListView.setTopGlowOffset(AndroidUtilities.dp(48.0F));
                     break label145;
                  } catch (Exception var10) {
                     var10000 = var10;
                     var10001 = false;
                     break label143;
                  }
               }

               label95: {
                  label94: {
                     try {
                        if (this.chatListView.getPaddingTop() == AndroidUtilities.dp(4.0F) || this.pinnedMessageView != null && this.pinnedMessageView.getTag() == null) {
                           break label94;
                        }
                     } catch (Exception var12) {
                        var10000 = var12;
                        var10001 = false;
                        break label143;
                     }

                     try {
                        if (this.reportSpamView == null || this.reportSpamView.getTag() != null) {
                           break label95;
                        }
                     } catch (Exception var11) {
                        var10000 = var11;
                        var10001 = false;
                        break label143;
                     }
                  }

                  var2 = -1;
                  break label145;
               }

               try {
                  this.chatListView.setPadding(0, AndroidUtilities.dp(4.0F), 0, AndroidUtilities.dp(3.0F));
                  var20 = (LayoutParams)this.floatingDateView.getLayoutParams();
                  var20.topMargin = AndroidUtilities.dp(4.0F);
                  this.floatingDateView.setLayoutParams(var20);
                  this.chatListView.setTopGlowOffset(0);
               } catch (Exception var9) {
                  var10000 = var9;
                  var10001 = false;
                  break label143;
               }
            }

            if (var2 != -1) {
               try {
                  this.chatLayoutManager.scrollToPositionWithOffset(var2, var4);
                  return;
               } catch (Exception var7) {
                  var10000 = var7;
                  var10001 = false;
               }
            } else {
               if (var3 == -1) {
                  return;
               }

               try {
                  int var5 = this.chatListView.getMeasuredHeight();
                  var4 = this.chatListView.getPaddingBottom();
                  var2 = this.chatListView.getPaddingTop();
                  int var6 = AndroidUtilities.dp(29.0F);
                  this.chatLayoutManager.scrollToPositionWithOffset(var3, var5 - var4 - var2 - var6);
                  return;
               } catch (Exception var8) {
                  var10000 = var8;
                  var10001 = false;
               }
            }
         }

         Exception var21 = var10000;
         FileLog.e((Throwable)var21);
      }
   }

   private void checkRaiseSensors() {
      ChatActivityEnterView var1 = this.chatActivityEnterView;
      if (var1 != null && var1.isStickersExpanded()) {
         MediaController.getInstance().setAllowStartRecord(false);
      } else {
         TLRPC.Chat var2 = this.currentChat;
         if (var2 != null && !ChatObject.canSendMedia(var2)) {
            MediaController.getInstance().setAllowStartRecord(false);
         } else {
            if (!ApplicationLoader.mainInterfacePaused) {
               FrameLayout var3 = this.bottomOverlayChat;
               if (var3 == null || var3.getVisibility() != 0) {
                  var3 = this.bottomOverlay;
                  if (var3 == null || var3.getVisibility() != 0) {
                     var3 = this.searchContainer;
                     if (var3 == null || var3.getVisibility() != 0) {
                        MediaController.getInstance().setAllowStartRecord(true);
                        return;
                     }
                  }
               }
            }

            MediaController.getInstance().setAllowStartRecord(false);
         }
      }

   }

   private void checkScrollForLoad(boolean var1) {
      GridLayoutManagerFixed var2 = this.chatLayoutManager;
      if (var2 != null && !this.paused) {
         int var3 = var2.findFirstVisibleItemPosition();
         int var4;
         if (var3 == -1) {
            var4 = 0;
         } else {
            var4 = Math.abs(this.chatLayoutManager.findLastVisibleItemPosition() - var3) + 1;
         }

         int var5 = this.chatAdapter.getItemCount();
         byte var6;
         if (var1) {
            var6 = 25;
         } else {
            var6 = 5;
         }

         long var7;
         MessagesController var13;
         int var14;
         if (var5 - var3 - var4 <= var6 && !this.loading) {
            boolean[] var12 = this.endReached;
            int var9;
            int var10;
            boolean var11;
            if (!var12[0]) {
               this.loading = true;
               this.waitingForLoad.add(this.lastLoadIndex);
               if (this.messagesByDays.size() != 0) {
                  var13 = MessagesController.getInstance(super.currentAccount);
                  var7 = this.dialog_id;
                  var5 = this.maxMessageId[0];
                  var1 = this.cacheEndReached[0];
                  var9 = this.minDate[0];
                  var10 = super.classGuid;
                  var11 = ChatObject.isChannel(this.currentChat);
                  var14 = this.lastLoadIndex++;
                  var13.loadMessages(var7, 50, var5, 0, var1 ^ true, var9, var10, 0, 0, var11, var14);
               } else {
                  var13 = MessagesController.getInstance(super.currentAccount);
                  var7 = this.dialog_id;
                  var11 = this.cacheEndReached[0];
                  var5 = this.minDate[0];
                  var14 = super.classGuid;
                  var1 = ChatObject.isChannel(this.currentChat);
                  var10 = this.lastLoadIndex++;
                  var13.loadMessages(var7, 50, 0, 0, var11 ^ true, var5, var14, 0, 0, var1, var10);
               }
            } else if (this.mergeDialogId != 0L && !var12[1]) {
               this.loading = true;
               this.waitingForLoad.add(this.lastLoadIndex);
               var13 = MessagesController.getInstance(super.currentAccount);
               var7 = this.mergeDialogId;
               var10 = this.maxMessageId[1];
               var1 = this.cacheEndReached[1];
               var9 = this.minDate[1];
               var5 = super.classGuid;
               var11 = ChatObject.isChannel(this.currentChat);
               var14 = this.lastLoadIndex++;
               var13.loadMessages(var7, 50, var10, 0, var1 ^ true, var9, var5, 0, 0, var11, var14);
            }
         }

         if (var4 > 0 && !this.loadingForward && var3 <= 10) {
            if (this.mergeDialogId != 0L && !this.forwardEndReached[1]) {
               this.waitingForLoad.add(this.lastLoadIndex);
               var13 = MessagesController.getInstance(super.currentAccount);
               var7 = this.mergeDialogId;
               var5 = this.minMessageId[1];
               var14 = this.maxDate[1];
               var4 = super.classGuid;
               var1 = ChatObject.isChannel(this.currentChat);
               var3 = this.lastLoadIndex++;
               var13.loadMessages(var7, 50, var5, 0, true, var14, var4, 1, 0, var1, var3);
               this.loadingForward = true;
            } else if (!this.forwardEndReached[0]) {
               this.waitingForLoad.add(this.lastLoadIndex);
               var13 = MessagesController.getInstance(super.currentAccount);
               var7 = this.dialog_id;
               var4 = this.minMessageId[0];
               var14 = this.maxDate[0];
               var3 = super.classGuid;
               var1 = ChatObject.isChannel(this.currentChat);
               var5 = this.lastLoadIndex++;
               var13.loadMessages(var7, 50, var4, 0, true, var14, var3, 1, 0, var1, var5);
               this.loadingForward = true;
            }
         }
      }

   }

   private void checkSecretMessageForLocation(MessageObject var1) {
      if (var1.type == 4 && !this.locationAlertShown && !SharedConfig.isSecretMapPreviewSet()) {
         this.locationAlertShown = true;
         AlertsCreator.showSecretLocationAlert(this.getParentActivity(), super.currentAccount, new _$$Lambda$ChatActivity$rniBJnXJmm7mozZMYIVZclwqFuA(this), true);
      }

   }

   private void clearChatData() {
      this.messages.clear();
      this.messagesByDays.clear();
      this.waitingForLoad.clear();
      this.groupedMessagesMap.clear();
      FrameLayout var1 = this.progressView;
      byte var2;
      if (this.chatAdapter.botInfoRow == -1) {
         var2 = 0;
      } else {
         var2 = 4;
      }

      var1.setVisibility(var2);
      this.chatListView.setEmptyView((View)null);

      for(int var3 = 0; var3 < 2; ++var3) {
         this.messagesDict[var3].clear();
         if (this.currentEncryptedChat == null) {
            this.maxMessageId[var3] = Integer.MAX_VALUE;
            this.minMessageId[var3] = Integer.MIN_VALUE;
         } else {
            this.maxMessageId[var3] = Integer.MIN_VALUE;
            this.minMessageId[var3] = Integer.MAX_VALUE;
         }

         this.maxDate[var3] = Integer.MIN_VALUE;
         this.minDate[var3] = 0;
         this.endReached[var3] = false;
         this.cacheEndReached[var3] = false;
         this.forwardEndReached[var3] = true;
      }

      this.first = true;
      this.firstLoading = true;
      this.loading = true;
      this.loadingForward = false;
      this.waitingForReplyMessageLoad = false;
      this.startLoadFromMessageId = 0;
      this.last_message_id = 0;
      this.unreadMessageObject = null;
      this.createUnreadMessageAfterId = 0;
      this.createUnreadMessageAfterIdLoading = false;
      this.needSelectFromMessageId = false;
      this.chatAdapter.notifyDataSetChanged();
   }

   private void clearHistory(boolean var1) {
      this.messages.clear();
      this.waitingForLoad.clear();
      this.messagesByDays.clear();
      this.groupedMessagesMap.clear();

      int var2;
      for(var2 = 1; var2 >= 0; --var2) {
         this.messagesDict[var2].clear();
         if (this.currentEncryptedChat == null) {
            this.maxMessageId[var2] = Integer.MAX_VALUE;
            this.minMessageId[var2] = Integer.MIN_VALUE;
         } else {
            this.maxMessageId[var2] = Integer.MIN_VALUE;
            this.minMessageId[var2] = Integer.MAX_VALUE;
         }

         this.maxDate[var2] = Integer.MIN_VALUE;
         this.minDate[var2] = 0;
         this.selectedMessagesIds[var2].clear();
         this.selectedMessagesCanCopyIds[var2].clear();
         this.selectedMessagesCanStarIds[var2].clear();
      }

      this.hideActionMode();
      this.updatePinnedMessageView(true);
      if (this.botButtons != null) {
         this.botButtons = null;
         ChatActivityEnterView var3 = this.chatActivityEnterView;
         if (var3 != null) {
            var3.setButtons((MessageObject)null, false);
         }
      }

      byte var9 = 4;
      FrameLayout var10;
      if (var1) {
         ChatActivity.ChatActivityAdapter var4 = this.chatAdapter;
         if (var4 != null) {
            var10 = this.progressView;
            if (var4.botInfoRow == -1) {
               var9 = 0;
            }

            var10.setVisibility(var9);
            this.chatListView.setEmptyView((View)null);
         }

         for(var2 = 0; var2 < 2; ++var2) {
            this.endReached[var2] = false;
            this.cacheEndReached[var2] = false;
            this.forwardEndReached[var2] = true;
         }

         this.first = true;
         this.firstLoading = true;
         this.loading = true;
         this.startLoadFromMessageId = 0;
         this.needSelectFromMessageId = false;
         this.waitingForLoad.add(this.lastLoadIndex);
         MessagesController var11 = MessagesController.getInstance(super.currentAccount);
         long var5 = this.dialog_id;
         if (AndroidUtilities.isTablet()) {
            var9 = 30;
         } else {
            var9 = 20;
         }

         int var7 = super.classGuid;
         var1 = ChatObject.isChannel(this.currentChat);
         int var8 = this.lastLoadIndex++;
         var11.loadMessages(var5, var9, 0, 0, true, 0, var7, 2, 0, var1, var8);
      } else {
         var10 = this.progressView;
         if (var10 != null) {
            var10.setVisibility(4);
            this.chatListView.setEmptyView(this.emptyViewContainer);
         }
      }

      ChatActivity.ChatActivityAdapter var12 = this.chatAdapter;
      if (var12 != null) {
         var12.notifyDataSetChanged();
      }

      if (this.currentEncryptedChat == null) {
         TLRPC.User var13 = this.currentUser;
         if (var13 != null && var13.bot && this.botUser == null) {
            this.botUser = "";
            this.updateBottomOverlay();
         }
      }

   }

   private void createChatAttachView() {
      if (this.getParentActivity() != null) {
         if (this.chatAttachAlert == null) {
            this.chatAttachAlert = new ChatAttachAlert(this.getParentActivity(), this);
            this.chatAttachAlert.setDelegate(new ChatAttachAlert.ChatAttachViewDelegate() {
               public boolean allowGroupPhotos() {
                  return ChatActivity.this.allowGroupPhotos();
               }

               public void didPressedButton(int var1) {
                  if (ChatActivity.this.getParentActivity() != null && ChatActivity.this.chatAttachAlert != null) {
                     if (ChatActivity.this.chatAttachAlert != null) {
                        ChatActivity var2 = ChatActivity.this;
                        var2.editingMessageObject = var2.chatAttachAlert.getEditingMessageObject();
                     } else {
                        ChatActivity.this.editingMessageObject = null;
                     }

                     if (var1 != 8 && var1 != 7 && (var1 != 4 || ChatActivity.this.chatAttachAlert.getSelectedPhotos().isEmpty())) {
                        if (ChatActivity.this.chatAttachAlert != null) {
                           ChatActivity.this.chatAttachAlert.dismissWithButtonClick(var1);
                        }

                        ChatActivity.this.processSelectedAttach(var1);
                        return;
                     }

                     if (var1 != 8) {
                        ChatActivity.this.chatAttachAlert.dismiss();
                     }

                     HashMap var3 = ChatActivity.this.chatAttachAlert.getSelectedPhotos();
                     ArrayList var4 = ChatActivity.this.chatAttachAlert.getSelectedPhotosOrder();
                     if (!var3.isEmpty()) {
                        ArrayList var5 = new ArrayList();

                        for(int var6 = 0; var6 < var4.size(); ++var6) {
                           MediaController.PhotoEntry var7 = (MediaController.PhotoEntry)var3.get(var4.get(var6));
                           SendMessagesHelper.SendingMediaInfo var8 = new SendMessagesHelper.SendingMediaInfo();
                           String var12 = var7.imagePath;
                           if (var12 != null) {
                              var8.path = var12;
                           } else {
                              var12 = var7.path;
                              if (var12 != null) {
                                 var8.path = var12;
                              }
                           }

                           var8.isVideo = var7.isVideo;
                           CharSequence var13 = var7.caption;
                           if (var13 != null) {
                              var12 = var13.toString();
                           } else {
                              var12 = null;
                           }

                           var8.caption = var12;
                           var8.entities = var7.entities;
                           ArrayList var14;
                           if (!var7.stickers.isEmpty()) {
                              var14 = new ArrayList(var7.stickers);
                           } else {
                              var14 = null;
                           }

                           var8.masks = var14;
                           var8.ttl = var7.ttl;
                           var8.videoEditedInfo = var7.editedInfo;
                           var8.canDeleteAfter = var7.canDeleteAfter;
                           var5.add(var8);
                           var7.reset();
                        }

                        ChatActivity.this.fillEditingMediaWithCaption(((SendMessagesHelper.SendingMediaInfo)var5.get(0)).caption, ((SendMessagesHelper.SendingMediaInfo)var5.get(0)).entities);
                        long var9 = ChatActivity.this.dialog_id;
                        MessageObject var15 = ChatActivity.this.replyingMessageObject;
                        boolean var11;
                        if (var1 == 4) {
                           var11 = true;
                        } else {
                           var11 = false;
                        }

                        SendMessagesHelper.prepareSendingMedia(var5, var9, var15, (InputContentInfoCompat)null, var11, SharedConfig.groupPhotosEnabled, ChatActivity.this.editingMessageObject);
                        ChatActivity.this.hideFieldPanel(false);
                        DataQuery.getInstance(ChatActivity.access$20600(ChatActivity.this)).cleanDraft(ChatActivity.this.dialog_id, true);
                     }
                  }

               }

               public void didSelectBot(TLRPC.User var1) {
                  if (ChatActivity.this.chatActivityEnterView != null && !TextUtils.isEmpty(var1.username)) {
                     ChatActivityEnterView var2 = ChatActivity.this.chatActivityEnterView;
                     StringBuilder var3 = new StringBuilder();
                     var3.append("@");
                     var3.append(var1.username);
                     var3.append(" ");
                     var2.setFieldText(var3.toString());
                     ChatActivity.this.chatActivityEnterView.openKeyboard();
                  }

               }

               public View getRevealView() {
                  return ChatActivity.this.chatActivityEnterView.getAttachButton();
               }

               public void onCameraOpened() {
                  ChatActivity.this.chatActivityEnterView.closeKeyboard();
               }
            });
         }

      }
   }

   private void createDeleteMessagesAlert(MessageObject var1, MessageObject.GroupedMessages var2) {
      this.createDeleteMessagesAlert(var1, var2, 1);
   }

   private void createDeleteMessagesAlert(MessageObject var1, MessageObject.GroupedMessages var2, int var3) {
      AlertsCreator.createDeleteMessagesAlert(this, this.currentUser, this.currentChat, this.currentEncryptedChat, this.chatInfo, this.mergeDialogId, var1, this.selectedMessagesIds, var2, var3, new _$$Lambda$ChatActivity$Mp1WuH9ZS6bsX0nFDxDD37tKOe8(this));
   }

   private void createMenu(View var1, boolean var2, boolean var3, float var4, float var5) {
      this.createMenu(var1, var2, var3, var4, var5, true);
   }

   private void createMenu(View var1, boolean var2, boolean var3, float var4, float var5, boolean var6) {
      if (!super.actionBar.isActionModeShowed()) {
         MessageObject var7;
         if (var1 instanceof ChatMessageCell) {
            var7 = ((ChatMessageCell)var1).getMessageObject();
         } else if (var1 instanceof ChatActionCell) {
            var7 = ((ChatActionCell)var1).getMessageObject();
         } else {
            var7 = null;
         }

         if (var7 != null) {
            int var8 = this.getMessageType(var7);
            if (var2) {
               TLRPC.Message var9 = var7.messageOwner;
               if (var9.action instanceof TLRPC.TL_messageActionPinMessage) {
                  this.scrollToMessageId(var9.reply_to_msg_id, var9.id, true, 0, false);
                  return;
               }
            }

            this.selectedObject = null;
            this.selectedObjectGroup = null;
            this.forwardingMessage = null;
            this.forwardingMessageGroup = null;

            int var10;
            for(var10 = 1; var10 >= 0; --var10) {
               this.selectedMessagesCanCopyIds[var10].clear();
               this.selectedMessagesCanStarIds[var10].clear();
               this.selectedMessagesIds[var10].clear();
            }

            this.hideActionMode();
            this.updatePinnedMessageView(true);
            MessageObject.GroupedMessages var30;
            if (var6) {
               var30 = this.getValidGroupedMessage(var7);
            } else {
               var30 = null;
            }

            TLRPC.UserFull var11;
            label647: {
               if (this.currentChat != null) {
                  if (var7.getDialogId() != this.mergeDialogId && ChatObject.canPinMessages(this.currentChat)) {
                     var6 = true;
                     break label647;
                  }
               } else if (this.currentEncryptedChat == null) {
                  var11 = this.userInfo;
                  if (var11 != null) {
                     var6 = var11.can_pin_message;
                     break label647;
                  }
               }

               var6 = false;
            }

            boolean var36;
            label695: {
               if (var6 && var7.getId() > 0) {
                  TLRPC.MessageAction var39 = var7.messageOwner.action;
                  if (var39 == null || var39 instanceof TLRPC.TL_messageActionEmpty) {
                     var36 = true;
                     break label695;
                  }
               }

               var36 = false;
            }

            boolean var12;
            label628: {
               label627: {
                  if (var7.getDialogId() != this.mergeDialogId && var36) {
                     TLRPC.ChatFull var42 = this.chatInfo;
                     if (var42 != null && var42.pinned_msg_id == var7.getId()) {
                        break label627;
                     }

                     var11 = this.userInfo;
                     if (var11 != null && var11.pinned_msg_id == var7.getId()) {
                        break label627;
                     }
                  }

                  var12 = false;
                  break label628;
               }

               var12 = true;
            }

            boolean var13;
            if (var30 == null && var7.canEditMessage(this.currentChat) && !this.chatActivityEnterView.hasAudioToSend() && var7.getDialogId() != this.mergeDialogId) {
               var13 = true;
            } else {
               var13 = false;
            }

            boolean var14;
            FrameLayout var44;
            label710: {
               TLRPC.EncryptedChat var43 = this.currentEncryptedChat;
               if ((var43 == null || AndroidUtilities.getPeerLayerVersion(var43.layer) >= 46) && (var8 != 1 || var7.getDialogId() != this.mergeDialogId && !var7.needDrawBluredPreview()) && !(var7.messageOwner.action instanceof TLRPC.TL_messageActionSecureValuesSent) && (this.currentEncryptedChat != null || var7.getId() >= 0)) {
                  var44 = this.bottomOverlayChat;
                  if ((var44 == null || var44.getVisibility() != 0) && !this.isBroadcast) {
                     TLRPC.Chat var46 = this.currentChat;
                     if (var46 == null || !ChatObject.isNotInChat(var46) && (!ChatObject.isChannel(this.currentChat) || ChatObject.canPost(this.currentChat) || this.currentChat.megagroup) && ChatObject.canSendMessages(this.currentChat)) {
                        var14 = true;
                        break label710;
                     }
                  }
               }

               var14 = false;
            }

            ChatActivityEnterView var24;
            ArrayList var47;
            if (!var2 && var8 >= 2 && var8 != 20) {
               var24 = this.chatActivityEnterView;
               if (var24 == null || !var24.isRecordingAudioVideo() && !this.chatActivityEnterView.isRecordLocked()) {
                  ActionBarMenuItem var25 = super.actionBar.createActionMode().getItem(12);
                  if (var25 != null) {
                     var25.setVisibility(0);
                  }

                  this.bottomMessagesActionContainer.setVisibility(0);
                  var10 = this.chatActivityEnterView.getMeasuredHeight() - AndroidUtilities.dp(51.0F);
                  FrameLayout var26;
                  RecyclerListView var56;
                  if (this.chatActivityEnterView.getVisibility() == 0) {
                     ArrayList var54 = new ArrayList();
                     var54.add(this.chatActivityEnterView);
                     var26 = this.mentionContainer;
                     if (var26 != null && var26.getVisibility() == 0) {
                        var54.add(this.mentionContainer);
                     }

                     var26 = this.stickersPanel;
                     if (var26 != null && var26.getVisibility() == 0) {
                        var54.add(this.stickersPanel);
                     }

                     ActionBar var27 = super.actionBar;
                     var44 = this.bottomMessagesActionContainer;
                     View[] var55 = (View[])var54.toArray(new View[0]);
                     var56 = this.chatListView;
                     var27.showActionMode(var44, (View)null, var55, new boolean[]{(boolean)0, (boolean)1, (boolean)1}, var56, var10);
                     if (this.getParentActivity() != null) {
                        ((LaunchActivity)this.getParentActivity()).hideVisibleActionMode();
                     }

                     this.chatActivityEnterView.getEditField().setAllowDrawCursor(false);
                  } else if (this.bottomOverlayChat.getVisibility() == 0) {
                     ActionBar var57 = super.actionBar;
                     var44 = this.bottomMessagesActionContainer;
                     var26 = this.bottomOverlayChat;
                     var56 = this.chatListView;
                     var57.showActionMode(var44, (View)null, new View[]{var26}, new boolean[]{true}, var56, var10);
                  } else if (this.searchContainer.getVisibility() == 0) {
                     ActionBar var58 = super.actionBar;
                     FrameLayout var59 = this.bottomMessagesActionContainer;
                     var26 = this.searchContainer;
                     RecyclerListView var51 = this.chatListView;
                     var58.showActionMode(var59, (View)null, new View[]{var26}, new boolean[]{true}, var51, var10);
                  } else {
                     super.actionBar.showActionMode(this.bottomMessagesActionContainer, (View)null, (View[])null, (boolean[])null, this.chatListView, var10);
                  }

                  ActionBarPopupWindow var28 = this.scrimPopupWindow;
                  if (var28 != null) {
                     var28.dismiss();
                  }

                  this.chatLayoutManager.setCanScrollVertically(true);
                  this.updatePinnedMessageView(true);
                  AnimatorSet var61 = new AnimatorSet();
                  var47 = new ArrayList();

                  for(var10 = 0; var10 < this.actionModeViews.size(); ++var10) {
                     var1 = (View)this.actionModeViews.get(var10);
                     var1.setPivotY((float)(ActionBar.getCurrentActionBarHeight() / 2));
                     AndroidUtilities.clearDrawableAnimation(var1);
                     var47.add(ObjectAnimator.ofFloat(var1, View.SCALE_Y, new float[]{0.1F, 1.0F}));
                  }

                  var61.playTogether(var47);
                  var61.setDuration(250L);
                  var61.start();
                  this.addToSelectedMessages(var7, var3);
                  this.selectedMessagesCountTextView.setNumber(this.selectedMessagesIds[0].size() + this.selectedMessagesIds[1].size(), false);
                  this.updateVisibleRows();
               }
            } else if (this.getParentActivity() != null) {
               var47 = new ArrayList();
               ArrayList var15 = new ArrayList();
               ArrayList var16 = new ArrayList();
               int var18;
               if (var8 >= 0 || var8 == -1 && var2 && (var7.isSending() || var7.isEditing()) && this.currentEncryptedChat == null) {
                  this.selectedObject = var7;
                  this.selectedObjectGroup = var30;
                  if (var8 == -1) {
                     var7 = this.selectedObject;
                     if (var7.type == 0 || var7.caption != null) {
                        var15.add(LocaleController.getString("Copy", 2131559163));
                        var16.add(3);
                        var47.add(2131165622);
                     }

                     var15.add(LocaleController.getString("CancelSending", 2131558901));
                     var16.add(24);
                     var47.add(2131165623);
                  } else if (var8 == 0) {
                     var15.add(LocaleController.getString("Retry", 2131560614));
                     var16.add(0);
                     var47.add(2131165661);
                     var15.add(LocaleController.getString("Delete", 2131559227));
                     var16.add(1);
                     var47.add(2131165623);
                  } else {
                     MessageObject var35;
                     TLRPC.User var37;
                     if (var8 == 1) {
                        if (this.currentChat != null && !this.isBroadcast) {
                           if (var14) {
                              var15.add(LocaleController.getString("Reply", 2131560565));
                              var16.add(8);
                              var47.add(2131165659);
                           }

                           if (var12) {
                              var15.add(LocaleController.getString("UnpinMessage", 2131560942));
                              var16.add(14);
                              var47.add(2131165679);
                           } else if (var36) {
                              var15.add(LocaleController.getString("PinMessage", 2131560441));
                              var16.add(13);
                              var47.add(2131165657);
                           }

                           if (var13) {
                              var15.add(LocaleController.getString("Edit", 2131559301));
                              var16.add(12);
                              var47.add(2131165625);
                           }

                           var35 = this.selectedObject;
                           if (var35.contentType == 0 && !var35.isMediaEmptyWebpage() && this.selectedObject.getId() > 0 && !this.selectedObject.isOut()) {
                              label683: {
                                 if (this.currentChat == null) {
                                    var37 = this.currentUser;
                                    if (var37 == null || !var37.bot) {
                                       break label683;
                                    }
                                 }

                                 var15.add(LocaleController.getString("ReportChat", 2131560568));
                                 var16.add(23);
                                 var47.add(2131165660);
                              }
                           }

                           if (var7.canDeleteMessage(this.currentChat)) {
                              var15.add(LocaleController.getString("Delete", 2131559227));
                              var16.add(1);
                              var47.add(2131165623);
                           }
                        } else {
                           if (this.selectedObject.getId() > 0 && var14) {
                              var15.add(LocaleController.getString("Reply", 2131560565));
                              var16.add(8);
                              var47.add(2131165659);
                           }

                           if (var7.canDeleteMessage(this.currentChat)) {
                              var15.add(LocaleController.getString("Delete", 2131559227));
                              var16.add(1);
                              var47.add(2131165623);
                           }
                        }
                     } else if (var8 == 20) {
                        var15.add(LocaleController.getString("Retry", 2131560614));
                        var16.add(0);
                        var47.add(2131165661);
                        var15.add(LocaleController.getString("Copy", 2131559163));
                        var16.add(3);
                        var47.add(2131165622);
                        var15.add(LocaleController.getString("Delete", 2131559227));
                        var16.add(1);
                        var47.add(2131165623);
                     } else if (this.currentEncryptedChat == null) {
                        if (this.selectedObject.messageOwner.action instanceof TLRPC.TL_messageActionPhoneCall) {
                           TLRPC.TL_messageActionPhoneCall var17 = (TLRPC.TL_messageActionPhoneCall)var7.messageOwner.action;
                           TLRPC.PhoneCallDiscardReason var38 = var17.reason;
                           String var40;
                           if ((var38 instanceof TLRPC.TL_phoneCallDiscardReasonMissed || var38 instanceof TLRPC.TL_phoneCallDiscardReasonBusy) && !var7.isOutOwner()) {
                              var18 = 2131558871;
                              var40 = "CallBack";
                           } else {
                              var18 = 2131558870;
                              var40 = "CallAgain";
                           }

                           var15.add(LocaleController.getString(var40, var18));
                           var16.add(18);
                           var47.add(2131165616);
                           if (VoIPHelper.canRateCall(var17)) {
                              var15.add(LocaleController.getString("CallMessageReportProblem", 2131558878));
                              var16.add(19);
                              var47.add(2131165626);
                           }
                        }

                        if (var14) {
                           var15.add(LocaleController.getString("Reply", 2131560565));
                           var16.add(8);
                           var47.add(2131165659);
                        }

                        var35 = this.selectedObject;
                        if (var35.type == 0 || var35.caption != null) {
                           var15.add(LocaleController.getString("Copy", 2131559163));
                           var16.add(3);
                           var47.add(2131165622);
                        }

                        if (ChatObject.isChannel(this.currentChat) && this.currentChat.megagroup) {
                           var15.add(LocaleController.getString("CopyLink", 2131559164));
                           var16.add(22);
                           var47.add(2131165640);
                        }

                        if (var8 == 2) {
                           if (this.selectedObject.type == 17 && !var7.isPollClosed()) {
                              if (var7.isVoted()) {
                                 var15.add(LocaleController.getString("Unvote", 2131560948));
                                 var16.add(25);
                                 var47.add(2131165680);
                              }

                              if (!var7.isForwarded()) {
                                 label713: {
                                    if (!var7.isOut() || ChatObject.isChannel(this.currentChat) && !this.currentChat.megagroup) {
                                       if (!ChatObject.isChannel(this.currentChat)) {
                                          break label713;
                                       }

                                       TLRPC.Chat var49 = this.currentChat;
                                       if (var49.megagroup) {
                                          break label713;
                                       }

                                       if (!var49.creator) {
                                          TLRPC.TL_chatAdminRights var50 = var49.admin_rights;
                                          if (var50 == null || !var50.edit_messages) {
                                             break label713;
                                          }
                                       }
                                    }

                                    var15.add(LocaleController.getString("StopPoll", 2131560828));
                                    var16.add(26);
                                    var47.add(2131165658);
                                 }
                              }
                           }
                        } else if (var8 == 3) {
                           TLRPC.MessageMedia var45 = this.selectedObject.messageOwner.media;
                           if (var45 instanceof TLRPC.TL_messageMediaWebPage && MessageObject.isNewGifDocument(var45.webpage.document)) {
                              var15.add(LocaleController.getString("SaveToGIFs", 2131560629));
                              var16.add(11);
                              var47.add(2131165629);
                           }
                        } else if (var8 == 4) {
                           if (this.selectedObject.isVideo()) {
                              if (!this.selectedObject.needDrawBluredPreview()) {
                                 var15.add(LocaleController.getString("SaveToGallery", 2131560630));
                                 var16.add(4);
                                 var47.add(2131165628);
                                 var15.add(LocaleController.getString("ShareFile", 2131560748));
                                 var16.add(6);
                                 var47.add(2131165671);
                              }
                           } else if (this.selectedObject.isMusic()) {
                              var15.add(LocaleController.getString("SaveToMusic", 2131560632));
                              var16.add(10);
                              var47.add(2131165624);
                              var15.add(LocaleController.getString("ShareFile", 2131560748));
                              var16.add(6);
                              var47.add(2131165671);
                           } else if (this.selectedObject.getDocument() != null) {
                              if (MessageObject.isNewGifDocument(this.selectedObject.getDocument())) {
                                 var15.add(LocaleController.getString("SaveToGIFs", 2131560629));
                                 var16.add(11);
                                 var47.add(2131165629);
                              }

                              var15.add(LocaleController.getString("SaveToDownloads", 2131560628));
                              var16.add(10);
                              var47.add(2131165624);
                              var15.add(LocaleController.getString("ShareFile", 2131560748));
                              var16.add(6);
                              var47.add(2131165671);
                           } else if (!this.selectedObject.needDrawBluredPreview()) {
                              var15.add(LocaleController.getString("SaveToGallery", 2131560630));
                              var16.add(4);
                              var47.add(2131165628);
                           }
                        } else if (var8 == 5) {
                           var15.add(LocaleController.getString("ApplyLocalizationFile", 2131558638));
                           var16.add(5);
                           var47.add(2131165638);
                           var15.add(LocaleController.getString("SaveToDownloads", 2131560628));
                           var16.add(10);
                           var47.add(2131165624);
                           var15.add(LocaleController.getString("ShareFile", 2131560748));
                           var16.add(6);
                           var47.add(2131165671);
                        } else if (var8 == 10) {
                           var15.add(LocaleController.getString("ApplyThemeFile", 2131558640));
                           var16.add(5);
                           var47.add(2131165674);
                           var15.add(LocaleController.getString("SaveToDownloads", 2131560628));
                           var16.add(10);
                           var47.add(2131165624);
                           var15.add(LocaleController.getString("ShareFile", 2131560748));
                           var16.add(6);
                           var47.add(2131165671);
                        } else if (var8 == 6) {
                           var15.add(LocaleController.getString("SaveToGallery", 2131560630));
                           var16.add(7);
                           var47.add(2131165628);
                           var15.add(LocaleController.getString("SaveToDownloads", 2131560628));
                           var16.add(10);
                           var47.add(2131165624);
                           var15.add(LocaleController.getString("ShareFile", 2131560748));
                           var16.add(6);
                           var47.add(2131165671);
                        } else if (var8 == 7) {
                           if (this.selectedObject.isMask()) {
                              var15.add(LocaleController.getString("AddToMasks", 2131558592));
                              var16.add(9);
                              var47.add(2131165673);
                           } else {
                              var15.add(LocaleController.getString("AddToStickers", 2131558593));
                              var16.add(9);
                              var47.add(2131165673);
                              if (!DataQuery.getInstance(super.currentAccount).isStickerInFavorites(this.selectedObject.getDocument())) {
                                 if (DataQuery.getInstance(super.currentAccount).canAddStickerToFavorites()) {
                                    var15.add(LocaleController.getString("AddToFavorites", 2131558591));
                                    var16.add(20);
                                    var47.add(2131165626);
                                 }
                              } else {
                                 var15.add(LocaleController.getString("DeleteFromFavorites", 2131559245));
                                 var16.add(21);
                                 var47.add(2131165677);
                              }
                           }
                        } else if (var8 == 8) {
                           var37 = MessagesController.getInstance(super.currentAccount).getUser(this.selectedObject.messageOwner.media.user_id);
                           if (var37 != null && var37.id != UserConfig.getInstance(super.currentAccount).getClientUserId() && ContactsController.getInstance(super.currentAccount).contactsDict.get(var37.id) == null) {
                              var15.add(LocaleController.getString("AddContactTitle", 2131558569));
                              var16.add(15);
                              var47.add(2131165612);
                           }

                           if (!TextUtils.isEmpty(this.selectedObject.messageOwner.media.phone_number)) {
                              var15.add(LocaleController.getString("Copy", 2131559163));
                              var16.add(16);
                              var47.add(2131165622);
                              var15.add(LocaleController.getString("Call", 2131558869));
                              var16.add(17);
                              var47.add(2131165616);
                           }
                        } else if (var8 == 9) {
                           if (!DataQuery.getInstance(super.currentAccount).isStickerInFavorites(this.selectedObject.getDocument())) {
                              var15.add(LocaleController.getString("AddToFavorites", 2131558591));
                              var16.add(20);
                              var47.add(2131165626);
                           } else {
                              var15.add(LocaleController.getString("DeleteFromFavorites", 2131559245));
                              var16.add(21);
                              var47.add(2131165677);
                           }
                        }

                        if (!this.selectedObject.needDrawBluredPreview() && !this.selectedObject.isLiveLocation() && this.selectedObject.type != 16) {
                           var15.add(LocaleController.getString("Forward", 2131559504));
                           var16.add(2);
                           var47.add(2131165627);
                        }

                        if (var12) {
                           var15.add(LocaleController.getString("UnpinMessage", 2131560942));
                           var16.add(14);
                           var47.add(2131165679);
                        } else if (var36) {
                           var15.add(LocaleController.getString("PinMessage", 2131560441));
                           var16.add(13);
                           var47.add(2131165657);
                        }

                        if (var13) {
                           var15.add(LocaleController.getString("Edit", 2131559301));
                           var16.add(12);
                           var47.add(2131165625);
                        }

                        var35 = this.selectedObject;
                        if (var35.contentType == 0 && var35.getId() > 0 && !this.selectedObject.isOut()) {
                           label690: {
                              if (this.currentChat == null) {
                                 var37 = this.currentUser;
                                 if (var37 == null || !var37.bot) {
                                    break label690;
                                 }
                              }

                              var15.add(LocaleController.getString("ReportChat", 2131560568));
                              var16.add(23);
                              var47.add(2131165660);
                           }
                        }

                        if (var7.canDeleteMessage(this.currentChat)) {
                           var15.add(LocaleController.getString("Delete", 2131559227));
                           var16.add(1);
                           var47.add(2131165623);
                        }
                     } else {
                        if (var14) {
                           var15.add(LocaleController.getString("Reply", 2131560565));
                           var16.add(8);
                           var47.add(2131165659);
                        }

                        var7 = this.selectedObject;
                        if (var7.type == 0 || var7.caption != null) {
                           var15.add(LocaleController.getString("Copy", 2131559163));
                           var16.add(3);
                           var47.add(2131165622);
                        }

                        if (var8 == 4) {
                           if (this.selectedObject.isVideo()) {
                              var15.add(LocaleController.getString("SaveToGallery", 2131560630));
                              var16.add(4);
                              var47.add(2131165628);
                              var15.add(LocaleController.getString("ShareFile", 2131560748));
                              var16.add(6);
                              var47.add(2131165671);
                           } else if (this.selectedObject.isMusic()) {
                              var15.add(LocaleController.getString("SaveToMusic", 2131560632));
                              var16.add(10);
                              var47.add(2131165624);
                              var15.add(LocaleController.getString("ShareFile", 2131560748));
                              var16.add(6);
                              var47.add(2131165671);
                           } else if (!this.selectedObject.isVideo() && this.selectedObject.getDocument() != null) {
                              var15.add(LocaleController.getString("SaveToDownloads", 2131560628));
                              var16.add(10);
                              var47.add(2131165624);
                              var15.add(LocaleController.getString("ShareFile", 2131560748));
                              var16.add(6);
                              var47.add(2131165671);
                           } else {
                              var15.add(LocaleController.getString("SaveToGallery", 2131560630));
                              var16.add(4);
                              var47.add(2131165628);
                           }
                        } else if (var8 == 5) {
                           var15.add(LocaleController.getString("ApplyLocalizationFile", 2131558638));
                           var16.add(5);
                           var47.add(2131165638);
                        } else if (var8 == 10) {
                           var15.add(LocaleController.getString("ApplyThemeFile", 2131558640));
                           var16.add(5);
                           var47.add(2131165674);
                        } else if (var8 == 7) {
                           var15.add(LocaleController.getString("AddToStickers", 2131558593));
                           var16.add(9);
                           var47.add(2131165673);
                        } else if (var8 == 8) {
                           TLRPC.User var29 = MessagesController.getInstance(super.currentAccount).getUser(this.selectedObject.messageOwner.media.user_id);
                           if (var29 != null && var29.id != UserConfig.getInstance(super.currentAccount).getClientUserId() && ContactsController.getInstance(super.currentAccount).contactsDict.get(var29.id) == null) {
                              var15.add(LocaleController.getString("AddContactTitle", 2131558569));
                              var16.add(15);
                              var47.add(2131165612);
                           }

                           if (!TextUtils.isEmpty(this.selectedObject.messageOwner.media.phone_number)) {
                              var15.add(LocaleController.getString("Copy", 2131559163));
                              var16.add(16);
                              var47.add(2131165622);
                              var15.add(LocaleController.getString("Call", 2131558869));
                              var16.add(17);
                              var47.add(2131165616);
                           }
                        }

                        var15.add(LocaleController.getString("Delete", 2131559227));
                        var16.add(1);
                        var47.add(2131165623);
                     }
                  }
               }

               if (!var16.isEmpty()) {
                  ActionBarPopupWindow var31 = this.scrimPopupWindow;
                  if (var31 != null) {
                     var31.dismiss();
                     this.scrimPopupWindow = null;
                  } else {
                     Rect var32 = new Rect();
                     ActionBarPopupWindow.ActionBarPopupWindowLayout var53 = new ActionBarPopupWindow.ActionBarPopupWindowLayout(this.getParentActivity());
                     var53.setOnTouchListener(new _$$Lambda$ChatActivity$CEhm1bQtDKMk2cXFBAUuQQ2gPRM(this, var1, var32));
                     var53.setDispatchKeyEventListener(new _$$Lambda$ChatActivity$_KW4AK5fE610BLV8sUy5JH_4l2w(this));
                     Rect var62 = new Rect();
                     Drawable var33 = this.getParentActivity().getResources().getDrawable(2131165776).mutate();
                     var33.setColorFilter(new PorterDuffColorFilter(Theme.getColor("dialogBackground"), Mode.MULTIPLY));
                     var33.getPadding(var62);
                     var53.setBackgroundDrawable(var33);
                     final LinearLayout var19 = new LinearLayout(this.getParentActivity());
                     ScrollView var34;
                     if (VERSION.SDK_INT >= 21) {
                        var34 = new ScrollView(this.getParentActivity(), (AttributeSet)null, 0, 2131624301) {
                           protected void onMeasure(int var1, int var2) {
                              super.onMeasure(var1, var2);
                              this.setMeasuredDimension(var19.getMeasuredWidth(), this.getMeasuredHeight());
                           }
                        };
                     } else {
                        var34 = new ScrollView(this.getParentActivity());
                     }

                     var34.setClipToPadding(false);
                     var53.addView(var34, LayoutHelper.createFrame(-2, -2.0F));
                     var19.setMinimumWidth(AndroidUtilities.dp(200.0F));
                     var19.setOrientation(1);
                     int var48 = var15.size();

                     for(var10 = 0; var10 < var48; ++var10) {
                        ActionBarMenuSubItem var20 = new ActionBarMenuSubItem(this.getParentActivity());
                        var20.setTextAndIcon((CharSequence)var15.get(var10), (Integer)var47.get(var10));
                        var19.addView(var20);
                        var20.setOnClickListener(new _$$Lambda$ChatActivity$6kUU2Td1F8LPLCyB8TheH4pRhp8(this, var10, var16));
                     }

                     var34.addView(var19, LayoutHelper.createScroll(-2, -2, 51));
                     this.scrimPopupWindow = new ActionBarPopupWindow(var53, -2, -2) {
                        public void dismiss() {
                           super.dismiss();
                           if (ChatActivity.this.scrimPopupWindow == this) {
                              ChatActivity.this.scrimPopupWindow = null;
                              if (ChatActivity.this.scrimAnimatorSet != null) {
                                 ChatActivity.this.scrimAnimatorSet.cancel();
                                 ChatActivity.this.scrimAnimatorSet = null;
                              }

                              if (ChatActivity.this.scrimView instanceof ChatMessageCell) {
                                 ((ChatMessageCell)ChatActivity.this.scrimView).setInvalidatesParent(false);
                              }

                              ChatActivity.this.chatLayoutManager.setCanScrollVertically(true);
                              ChatActivity.this.scrimAnimatorSet = new AnimatorSet();
                              ArrayList var1 = new ArrayList();
                              var1.add(ObjectAnimator.ofInt(ChatActivity.this.scrimPaint, AnimationProperties.PAINT_ALPHA, new int[]{0}));
                              if (ChatActivity.this.pagedownButton.getTag() != null) {
                                 var1.add(ObjectAnimator.ofFloat(ChatActivity.this.pagedownButton, View.ALPHA, new float[]{1.0F}));
                              }

                              if (ChatActivity.this.mentiondownButton.getTag() != null) {
                                 var1.add(ObjectAnimator.ofFloat(ChatActivity.this.mentiondownButton, View.ALPHA, new float[]{1.0F}));
                              }

                              ChatActivity.this.scrimAnimatorSet.playTogether(var1);
                              ChatActivity.this.scrimAnimatorSet.setDuration(220L);
                              ChatActivity.this.scrimAnimatorSet.addListener(new AnimatorListenerAdapter() {
                                 public void onAnimationEnd(Animator var1) {
                                    ChatActivity.this.scrimView = null;
                                    ChatActivity.this.contentView.invalidate();
                                    ChatActivity.this.chatListView.invalidate();
                                 }
                              });
                              ChatActivity.this.scrimAnimatorSet.start();
                              ChatActivityEnterView var2 = ChatActivity.this.chatActivityEnterView;
                              if (var2 != null) {
                                 var2.getEditField().setAllowDrawCursor(true);
                              }

                              if (VERSION.SDK_INT >= 19) {
                                 ChatActivity.this.getParentActivity().getWindow().getDecorView().setImportantForAccessibility(0);
                              }

                           }
                        }
                     };
                     this.scrimPopupWindow.setDismissAnimationDuration(220);
                     this.scrimPopupWindow.setOutsideTouchable(true);
                     this.scrimPopupWindow.setClippingEnabled(true);
                     this.scrimPopupWindow.setAnimationStyle(2131624111);
                     this.scrimPopupWindow.setFocusable(true);
                     var53.measure(MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(1000.0F), Integer.MIN_VALUE), MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(1000.0F), Integer.MIN_VALUE));
                     this.scrimPopupWindow.setInputMethodMode(2);
                     this.scrimPopupWindow.setSoftInputMode(0);
                     this.scrimPopupWindow.getContentView().setFocusableInTouchMode(true);
                     var48 = var1.getLeft() + (int)var4 - var53.getMeasuredWidth() + var62.left - AndroidUtilities.dp(28.0F);
                     if (var48 < AndroidUtilities.dp(6.0F)) {
                        var10 = AndroidUtilities.dp(6.0F);
                     } else {
                        var10 = var48;
                        if (var48 > this.chatListView.getMeasuredWidth() - AndroidUtilities.dp(6.0F) - var53.getMeasuredWidth()) {
                           var10 = this.chatListView.getMeasuredWidth() - AndroidUtilities.dp(6.0F) - var53.getMeasuredWidth();
                        }
                     }

                     int var52 = var10;
                     if (AndroidUtilities.isTablet()) {
                        int[] var41 = new int[2];
                        super.fragmentView.getLocationInWindow(var41);
                        var52 = var10 + var41[0];
                     }

                     var48 = this.contentView.getHeight();
                     var18 = var53.getMeasuredHeight();
                     int var60 = this.contentView.getKeyboardHeight();
                     var10 = var48;
                     if (var60 > AndroidUtilities.dp(20.0F)) {
                        var10 = var48 + var60;
                     }

                     if (var18 < var10) {
                        var60 = (int)(this.chatListView.getY() + (float)var1.getTop() + var5);
                        var48 = var60;
                        if (var18 - var62.top - var62.bottom > AndroidUtilities.dp(240.0F)) {
                           var48 = var60 + (AndroidUtilities.dp(240.0F) - var18);
                        }

                        if ((float)var48 < this.chatListView.getY() + (float)AndroidUtilities.dp(24.0F)) {
                           var10 = (int)(this.chatListView.getY() + (float)AndroidUtilities.dp(24.0F));
                        } else {
                           var60 = var10 - var18;
                           var10 = var48;
                           if (var48 > var60 - AndroidUtilities.dp(8.0F)) {
                              var10 = var60 - AndroidUtilities.dp(8.0F);
                           }
                        }
                     } else {
                        var10 = AndroidUtilities.statusBarHeight;
                     }

                     this.scrimPopupWindow.showAtLocation(this.chatListView, 51, var52, var10);
                     this.chatListView.stopScroll();
                     this.chatLayoutManager.setCanScrollVertically(false);
                     this.scrimView = var1;
                     var1 = this.scrimView;
                     if (var1 instanceof ChatMessageCell) {
                        ((ChatMessageCell)var1).setInvalidatesParent(true);
                     }

                     this.contentView.invalidate();
                     this.chatListView.invalidate();
                     AnimatorSet var21 = this.scrimAnimatorSet;
                     if (var21 != null) {
                        var21.cancel();
                     }

                     this.scrimAnimatorSet = new AnimatorSet();
                     ArrayList var22 = new ArrayList();
                     var22.add(ObjectAnimator.ofInt(this.scrimPaint, AnimationProperties.PAINT_ALPHA, new int[]{0, 50}));
                     if (this.pagedownButton.getTag() != null) {
                        var22.add(ObjectAnimator.ofFloat(this.pagedownButton, View.ALPHA, new float[]{0.0F}));
                     }

                     if (this.mentiondownButton.getTag() != null) {
                        var22.add(ObjectAnimator.ofFloat(this.mentiondownButton, View.ALPHA, new float[]{0.0F}));
                     }

                     this.scrimAnimatorSet.playTogether(var22);
                     this.scrimAnimatorSet.setDuration(150L);
                     this.scrimAnimatorSet.start();
                     HintView var23 = this.forwardHintView;
                     if (var23 != null) {
                        var23.hide();
                     }

                     var23 = this.noSoundHintView;
                     if (var23 != null) {
                        var23.hide();
                     }

                     var24 = this.chatActivityEnterView;
                     if (var24 != null) {
                        var24.getEditField().setAllowDrawCursor(false);
                     }

                     if (VERSION.SDK_INT >= 19) {
                        this.getParentActivity().getWindow().getDecorView().setImportantForAccessibility(4);
                     }

                  }
               }
            }
         }
      }
   }

   private TextureView createTextureView(boolean var1) {
      if (super.parentLayout == null) {
         return null;
      } else {
         if (this.videoPlayerContainer == null) {
            if (VERSION.SDK_INT >= 21) {
               this.videoPlayerContainer = new FrameLayout(this.getParentActivity()) {
                  public void setTranslationY(float var1) {
                     super.setTranslationY(var1);
                     ChatActivity.this.contentView.invalidate();
                  }
               };
               this.videoPlayerContainer.setOutlineProvider(new ViewOutlineProvider() {
                  @TargetApi(21)
                  public void getOutline(View var1, Outline var2) {
                     if (var1.getTag(2131230860) != null) {
                        var2.setRoundRect(0, 0, var1.getMeasuredWidth(), var1.getMeasuredHeight(), (float)AndroidUtilities.dp(4.0F));
                     } else {
                        int var3 = AndroidUtilities.roundMessageSize;
                        var2.setOval(0, 0, var3, var3);
                     }

                  }
               });
               this.videoPlayerContainer.setClipToOutline(true);
            } else {
               this.videoPlayerContainer = new FrameLayout(this.getParentActivity()) {
                  RectF rect = new RectF();

                  protected void dispatchDraw(Canvas var1) {
                     super.dispatchDraw(var1);
                     if (this.getTag() == null) {
                        var1.drawPath(ChatActivity.this.aspectPath, ChatActivity.this.aspectPaint);
                     }

                  }

                  protected void onSizeChanged(int var1, int var2, int var3, int var4) {
                     super.onSizeChanged(var1, var2, var3, var4);
                     ChatActivity.this.aspectPath.reset();
                     if (this.getTag(2131230860) != null) {
                        this.rect.set(0.0F, 0.0F, (float)var1, (float)var2);
                        ChatActivity.this.aspectPath.addRoundRect(this.rect, (float)AndroidUtilities.dp(4.0F), (float)AndroidUtilities.dp(4.0F), Direction.CW);
                     } else {
                        Path var5 = ChatActivity.this.aspectPath;
                        float var6 = (float)(var1 / 2);
                        var5.addCircle(var6, (float)(var2 / 2), var6, Direction.CW);
                     }

                     ChatActivity.this.aspectPath.toggleInverseFillType();
                  }

                  public void setTranslationY(float var1) {
                     super.setTranslationY(var1);
                     ChatActivity.this.contentView.invalidate();
                  }

                  public void setVisibility(int var1) {
                     super.setVisibility(var1);
                     if (var1 == 0) {
                        this.setLayerType(2, (Paint)null);
                     }

                  }
               };
               this.aspectPath = new Path();
               this.aspectPaint = new Paint(1);
               this.aspectPaint.setColor(-16777216);
               this.aspectPaint.setXfermode(new PorterDuffXfermode(Mode.CLEAR));
            }

            this.videoPlayerContainer.setWillNotDraw(false);
            this.aspectRatioFrameLayout = new AspectRatioFrameLayout(this.getParentActivity());
            this.aspectRatioFrameLayout.setBackgroundColor(0);
            if (var1) {
               this.videoPlayerContainer.addView(this.aspectRatioFrameLayout, LayoutHelper.createFrame(-1, -1, 17));
            }

            this.videoTextureView = new TextureView(this.getParentActivity());
            this.videoTextureView.setOpaque(false);
            this.aspectRatioFrameLayout.addView(this.videoTextureView, LayoutHelper.createFrame(-1, -1.0F));
         }

         ViewGroup var2 = (ViewGroup)this.videoPlayerContainer.getParent();
         ViewGroup var3 = var2;
         if (var2 != null) {
            var3 = var2;
            if (var2 != this.contentView) {
               var2.removeView(this.videoPlayerContainer);
               var3 = null;
            }
         }

         if (var3 == null) {
            SizeNotifierFrameLayout var5 = this.contentView;
            FrameLayout var6 = this.videoPlayerContainer;
            int var4 = AndroidUtilities.roundMessageSize;
            var5.addView(var6, 1, new LayoutParams(var4, var4));
         }

         this.videoPlayerContainer.setTag((Object)null);
         this.aspectRatioFrameLayout.setDrawingReady(false);
         return this.videoTextureView;
      }
   }

   private ArrayList createVoiceMessagesPlaylist(MessageObject var1, boolean var2) {
      ArrayList var3 = new ArrayList();
      var3.add(var1);
      int var4 = var1.getId();
      var1.getDialogId();
      if (var4 != 0) {
         for(int var5 = this.messages.size() - 1; var5 >= 0; --var5) {
            MessageObject var6 = (MessageObject)this.messages.get(var5);
            if ((var6.getDialogId() != this.mergeDialogId || var1.getDialogId() == this.mergeDialogId) && (this.currentEncryptedChat == null && var6.getId() > var4 || this.currentEncryptedChat != null && var6.getId() < var4) && (var6.isVoice() || var6.isRoundVideo()) && (!var2 || var6.isContentUnread() && !var6.isOut())) {
               var3.add(var6);
            }
         }
      }

      return var3;
   }

   private void destroyTextureView() {
      FrameLayout var1 = this.videoPlayerContainer;
      if (var1 != null && var1.getParent() != null) {
         this.contentView.removeView(this.videoPlayerContainer);
         this.aspectRatioFrameLayout.setDrawingReady(false);
         this.videoPlayerContainer.setTag((Object)null);
         if (VERSION.SDK_INT < 21) {
            this.videoPlayerContainer.setLayerType(0, (Paint)null);
         }
      }

   }

   private void fillEditingMediaWithCaption(CharSequence var1, ArrayList var2) {
      if (this.editingMessageObject != null) {
         if (!TextUtils.isEmpty(var1)) {
            MessageObject var3 = this.editingMessageObject;
            var3.editingMessage = var1;
            var3.editingMessageEntities = var2;
         } else {
            ChatActivityEnterView var4 = this.chatActivityEnterView;
            if (var4 != null) {
               this.editingMessageObject.editingMessage = var4.getFieldText();
               MessageObject var5 = this.editingMessageObject;
               if (var5.editingMessage == null && !TextUtils.isEmpty(var5.messageOwner.message)) {
                  this.editingMessageObject.editingMessage = "";
               }
            }
         }

      }
   }

   private void fixLayout() {
      ChatAvatarContainer var1 = this.avatarContainer;
      if (var1 != null) {
         var1.getViewTreeObserver().addOnPreDrawListener(new OnPreDrawListener() {
            public boolean onPreDraw() {
               if (ChatActivity.this.avatarContainer != null) {
                  ChatActivity.this.avatarContainer.getViewTreeObserver().removeOnPreDrawListener(this);
               }

               return ChatActivity.this.fixLayoutInternal();
            }
         });
      }

   }

   private boolean fixLayoutInternal() {
      if (!AndroidUtilities.isTablet() && ApplicationLoader.applicationContext.getResources().getConfiguration().orientation == 2) {
         this.selectedMessagesCountTextView.setTextSize(18);
      } else {
         this.selectedMessagesCountTextView.setTextSize(20);
      }

      int var1 = this.chatListView.getChildCount();
      HashMap var2 = null;
      int var3 = 0;

      while(true) {
         boolean var4 = true;
         if (var3 >= var1) {
            if (!AndroidUtilities.isTablet()) {
               return true;
            } else {
               FragmentContextView var16;
               if (AndroidUtilities.isSmallTablet() && ApplicationLoader.applicationContext.getResources().getConfiguration().orientation == 1) {
                  super.actionBar.setBackButtonDrawable(new BackDrawable(false));
                  var16 = this.fragmentContextView;
                  if (var16 != null && var16.getParent() == null) {
                     ((ViewGroup)super.fragmentView).addView(this.fragmentContextView, LayoutHelper.createFrame(-1, 39.0F, 51, 0.0F, -36.0F, 0.0F, 0.0F));
                  }
               } else {
                  ActionBar var15 = super.actionBar;
                  ActionBarLayout var13 = super.parentLayout;
                  boolean var9 = var4;
                  if (var13 != null) {
                     var9 = var4;
                     if (!var13.fragmentsStack.isEmpty()) {
                        var9 = var4;
                        if (super.parentLayout.fragmentsStack.get(0) != this) {
                           if (super.parentLayout.fragmentsStack.size() == 1) {
                              var9 = var4;
                           } else {
                              var9 = false;
                           }
                        }
                     }
                  }

                  var15.setBackButtonDrawable(new BackDrawable(var9));
                  var16 = this.fragmentContextView;
                  if (var16 != null && var16.getParent() != null) {
                     super.fragmentView.setPadding(0, 0, 0, 0);
                     ((ViewGroup)super.fragmentView).removeView(this.fragmentContextView);
                  }
               }

               return false;
            }
         }

         View var5 = this.chatListView.getChildAt(var3);
         HashMap var6 = var2;
         if (var5 instanceof ChatMessageCell) {
            MessageObject.GroupedMessages var7 = ((ChatMessageCell)var5).getCurrentMessagesGroup();
            var6 = var2;
            if (var7 != null) {
               var6 = var2;
               if (var7.hasSibling) {
                  HashMap var14 = var2;
                  if (var2 == null) {
                     var14 = new HashMap();
                  }

                  var6 = var14;
                  if (!var14.containsKey(var7.groupId)) {
                     var14.put(var7.groupId, var7);
                     ArrayList var10 = var7.messages;
                     MessageObject var11 = (MessageObject)var10.get(var10.size() - 1);
                     int var8 = this.messages.indexOf(var11);
                     var6 = var14;
                     if (var8 >= 0) {
                        ChatActivity.ChatActivityAdapter var12 = this.chatAdapter;
                        var12.notifyItemRangeChanged(var8 + var12.messagesStartRow, var7.messages.size());
                        var6 = var14;
                     }
                  }
               }
            }
         }

         ++var3;
         var2 = var6;
      }
   }

   private void forwardMessages(ArrayList var1, boolean var2) {
      if (var1 != null && !var1.isEmpty()) {
         if (!var2) {
            AlertsCreator.showSendMediaAlert(SendMessagesHelper.getInstance(super.currentAccount).sendMessage(var1, this.dialog_id), this);
         } else {
            Iterator var4 = var1.iterator();

            while(var4.hasNext()) {
               MessageObject var3 = (MessageObject)var4.next();
               SendMessagesHelper.getInstance(super.currentAccount).processForwardFromMyName(var3, this.dialog_id);
            }
         }
      }

   }

   private String getMessageContent(MessageObject var1, int var2, boolean var3) {
      String var4 = "";
      String var5 = var4;
      if (var3) {
         int var6 = var1.messageOwner.from_id;
         var5 = var4;
         if (var2 != var6) {
            StringBuilder var11;
            if (var6 > 0) {
               TLRPC.User var7 = MessagesController.getInstance(super.currentAccount).getUser(var1.messageOwner.from_id);
               var5 = var4;
               if (var7 != null) {
                  var11 = new StringBuilder();
                  var11.append(ContactsController.formatName(var7.first_name, var7.last_name));
                  var11.append(":\n");
                  var5 = var11.toString();
               }
            } else {
               var5 = var4;
               if (var6 < 0) {
                  TLRPC.Chat var12 = MessagesController.getInstance(super.currentAccount).getChat(-var1.messageOwner.from_id);
                  var5 = var4;
                  if (var12 != null) {
                     var11 = new StringBuilder();
                     var11.append(var12.title);
                     var11.append(":\n");
                     var5 = var11.toString();
                  }
               }
            }
         }
      }

      String var8;
      StringBuilder var10;
      if (var1.type == 0 && var1.messageOwner.message != null) {
         var10 = new StringBuilder();
         var10.append(var5);
         var10.append(var1.messageOwner.message);
         var8 = var10.toString();
      } else {
         TLRPC.Message var9 = var1.messageOwner;
         if (var9.media != null && var9.message != null) {
            var10 = new StringBuilder();
            var10.append(var5);
            var10.append(var1.messageOwner.message);
            var8 = var10.toString();
         } else {
            var10 = new StringBuilder();
            var10.append(var5);
            var10.append(var1.messageText);
            var8 = var10.toString();
         }
      }

      return var8;
   }

   private int getMessageType(MessageObject var1) {
      if (var1 == null) {
         return -1;
      } else {
         TLRPC.EncryptedChat var2 = this.currentEncryptedChat;
         boolean var3 = false;
         boolean var4 = false;
         int var5;
         TLRPC.InputStickerSet var6;
         String var7;
         boolean var8;
         if (var2 == null) {
            if (this.isBroadcast && var1.getId() <= 0 && var1.isSendError()) {
               var8 = true;
            } else {
               var8 = false;
            }

            if (var1.isEditing()) {
               return -1;
            } else if ((this.isBroadcast || var1.getId() > 0 || !var1.isOut()) && !var8) {
               var5 = var1.type;
               if (var5 == 6) {
                  return -1;
               } else if (var5 != 10 && var5 != 11) {
                  if (var1.isVoice()) {
                     return 2;
                  } else if (var1.isSticker()) {
                     var6 = var1.getInputStickerSet();
                     if (var6 instanceof TLRPC.TL_inputStickerSetID) {
                        if (!DataQuery.getInstance(super.currentAccount).isStickerPackInstalled(var6.id)) {
                           return 7;
                        }
                     } else if (var6 instanceof TLRPC.TL_inputStickerSetShortName && !DataQuery.getInstance(super.currentAccount).isStickerPackInstalled(var6.short_name)) {
                        return 7;
                     }

                     return 9;
                  } else {
                     if (var1.isRoundVideo() || !(var1.messageOwner.media instanceof TLRPC.TL_messageMediaPhoto) && var1.getDocument() == null && !var1.isMusic() && !var1.isVideo()) {
                        if (var1.type == 12) {
                           return 8;
                        }

                        if (var1.isMediaEmpty()) {
                           return 3;
                        }
                     } else {
                        var8 = var4;
                        if (!TextUtils.isEmpty(var1.messageOwner.attachPath)) {
                           var8 = var4;
                           if ((new File(var1.messageOwner.attachPath)).exists()) {
                              var8 = true;
                           }
                        }

                        var4 = var8;
                        if (!var8) {
                           var4 = var8;
                           if (FileLoader.getPathToMessage(var1.messageOwner).exists()) {
                              var4 = true;
                           }
                        }

                        if (var4) {
                           if (var1.getDocument() != null) {
                              var7 = var1.getDocument().mime_type;
                              if (var7 != null) {
                                 if (var1.getDocumentName().toLowerCase().endsWith("attheme")) {
                                    return 10;
                                 }

                                 if (var7.endsWith("/xml")) {
                                    return 5;
                                 }

                                 if (var7.endsWith("/png") || var7.endsWith("/jpg") || var7.endsWith("/jpeg")) {
                                    return 6;
                                 }
                              }
                           }

                           return 4;
                        }
                     }

                     return 2;
                  }
               } else {
                  return var1.getId() == 0 ? -1 : 1;
               }
            } else if (var1.isSendError()) {
               return !var1.isMediaEmpty() ? 0 : 20;
            } else {
               return -1;
            }
         } else if (var1.isSending()) {
            return -1;
         } else if (var1.type == 6) {
            return -1;
         } else if (var1.isSendError()) {
            return !var1.isMediaEmpty() ? 0 : 20;
         } else {
            var5 = var1.type;
            if (var5 != 10 && var5 != 11) {
               if (var1.isVoice()) {
                  return 2;
               } else {
                  if (var1.isSticker()) {
                     var6 = var1.getInputStickerSet();
                     if (var6 instanceof TLRPC.TL_inputStickerSetShortName && !DataQuery.getInstance(super.currentAccount).isStickerPackInstalled(var6.short_name)) {
                        return 7;
                     }
                  } else if (var1.isRoundVideo() || !(var1.messageOwner.media instanceof TLRPC.TL_messageMediaPhoto) && var1.getDocument() == null && !var1.isMusic() && !var1.isVideo()) {
                     if (var1.type == 12) {
                        return 8;
                     }

                     if (var1.isMediaEmpty()) {
                        return 3;
                     }
                  } else {
                     var8 = var3;
                     if (!TextUtils.isEmpty(var1.messageOwner.attachPath)) {
                        var8 = var3;
                        if ((new File(var1.messageOwner.attachPath)).exists()) {
                           var8 = true;
                        }
                     }

                     var4 = var8;
                     if (!var8) {
                        var4 = var8;
                        if (FileLoader.getPathToMessage(var1.messageOwner).exists()) {
                           var4 = true;
                        }
                     }

                     if (var4) {
                        if (var1.getDocument() != null) {
                           var7 = var1.getDocument().mime_type;
                           if (var7 != null && var7.endsWith("text/xml")) {
                              return 5;
                           }
                        }

                        if (var1.messageOwner.ttl <= 0) {
                           return 4;
                        }
                     }
                  }

                  return 2;
               }
            } else {
               return var1.getId() != 0 && !var1.isSending() ? 1 : -1;
            }
         }
      }
   }

   private int getScrollOffsetForMessage(MessageObject var1) {
      MessageObject.GroupedMessages var2 = this.getValidGroupedMessage(var1);
      int var7;
      int var17;
      if (var2 != null) {
         MessageObject.GroupedMessagePosition var3 = (MessageObject.GroupedMessagePosition)var2.positions.get(var1);
         Point var4 = AndroidUtilities.displaySize;
         float var5 = (float)Math.max(var4.x, var4.y) * 0.5F;
         float[] var15 = var3.siblingHeights;
         float var6;
         if (var15 != null) {
            var6 = var15[0];
         } else {
            var6 = var3.ph;
         }

         SparseBooleanArray var16 = new SparseBooleanArray();
         var7 = 0;
         float var8 = 0.0F;

         float var9;
         float var12;
         for(var9 = 0.0F; var7 < var2.posArray.size(); var9 = var12) {
            MessageObject.GroupedMessagePosition var10 = (MessageObject.GroupedMessagePosition)var2.posArray.get(var7);
            float var11 = var8;
            var12 = var9;
            if (var16.indexOfKey(var10.minY) < 0) {
               var11 = var8;
               var12 = var9;
               if (var10.siblingHeights == null) {
                  var16.put(var10.minY, true);
                  byte var13 = var10.minY;
                  byte var14 = var3.minY;
                  if (var13 < var14) {
                     var12 = var9 - var10.ph;
                  } else {
                     var12 = var9;
                     if (var13 > var14) {
                        var12 = var9 + var10.ph;
                     }
                  }

                  var11 = var8 + var10.ph;
               }
            }

            ++var7;
            var8 = var11;
         }

         if (Math.abs(var8 - var6) < 0.02F) {
            var17 = (int)((float)this.chatListView.getMeasuredHeight() - var8 * var5) / 2 - this.chatListView.getPaddingTop();
            var7 = AndroidUtilities.dp(7.0F);
         } else {
            var17 = (int)((float)this.chatListView.getMeasuredHeight() - (var6 + var9) * var5) / 2 - this.chatListView.getPaddingTop();
            var7 = AndroidUtilities.dp(7.0F);
         }

         var7 = var17 - var7;
      } else {
         var7 = Integer.MAX_VALUE;
      }

      var17 = var7;
      if (var7 == Integer.MAX_VALUE) {
         var17 = (this.chatListView.getMeasuredHeight() - var1.getApproximateHeight()) / 2;
      }

      return Math.max(0, var17);
   }

   private MessageObject.GroupedMessages getValidGroupedMessage(MessageObject var1) {
      long var2 = var1.getGroupId();
      Object var4 = null;
      MessageObject.GroupedMessages var5 = (MessageObject.GroupedMessages)var4;
      if (var2 != 0L) {
         MessageObject.GroupedMessages var6 = (MessageObject.GroupedMessages)this.groupedMessagesMap.get(var1.getGroupId());
         if (var6 != null) {
            var5 = (MessageObject.GroupedMessages)var4;
            if (var6.messages.size() <= 1) {
               return var5;
            }

            if (var6.positions.get(var1) == null) {
               var5 = (MessageObject.GroupedMessages)var4;
               return var5;
            }
         }

         var5 = var6;
      }

      return var5;
   }

   private void hideActionMode() {
      if (super.actionBar.isActionModeShowed()) {
         ActionBar var1 = super.actionBar;
         if (var1 != null) {
            var1.hideActionMode();
         }

         this.cantDeleteMessagesCount = 0;
         this.canEditMessagesCount = 0;
         this.cantForwardMessagesCount = 0;
         ChatActivityEnterView var2 = this.chatActivityEnterView;
         if (var2 != null) {
            EditTextCaption var3 = var2.getEditField();
            var3.requestFocus();
            var3.setAllowDrawCursor(true);
         }

      }
   }

   private void hideFloatingDateView(boolean var1) {
      if (this.floatingDateView.getTag() != null && !this.currentFloatingDateOnScreen && (!this.scrollingFloatingDate || this.currentFloatingTopIsNotMessage)) {
         this.floatingDateView.setTag((Object)null);
         if (var1) {
            this.floatingDateAnimation = new AnimatorSet();
            this.floatingDateAnimation.setDuration(150L);
            this.floatingDateAnimation.playTogether(new Animator[]{ObjectAnimator.ofFloat(this.floatingDateView, View.ALPHA, new float[]{0.0F})});
            this.floatingDateAnimation.addListener(new AnimatorListenerAdapter() {
               public void onAnimationEnd(Animator var1) {
                  if (var1.equals(ChatActivity.this.floatingDateAnimation)) {
                     ChatActivity.this.floatingDateAnimation = null;
                  }

               }
            });
            this.floatingDateAnimation.setStartDelay((long)this.hideDateDelay);
            this.floatingDateAnimation.start();
         } else {
            AnimatorSet var2 = this.floatingDateAnimation;
            if (var2 != null) {
               var2.cancel();
               this.floatingDateAnimation = null;
            }

            this.floatingDateView.setAlpha(0.0F);
         }

         this.hideDateDelay = 500;
      }

   }

   private void hidePinnedMessageView(boolean var1) {
      if (this.pinnedMessageView.getTag() == null) {
         this.pinnedMessageView.setTag(1);
         AnimatorSet var2 = this.pinnedMessageViewAnimator;
         if (var2 != null) {
            var2.cancel();
            this.pinnedMessageViewAnimator = null;
         }

         if (var1) {
            this.pinnedMessageViewAnimator = new AnimatorSet();
            this.pinnedMessageViewAnimator.playTogether(new Animator[]{ObjectAnimator.ofFloat(this.pinnedMessageView, View.TRANSLATION_Y, new float[]{(float)(-AndroidUtilities.dp(50.0F))})});
            this.pinnedMessageViewAnimator.setDuration(200L);
            this.pinnedMessageViewAnimator.addListener(new AnimatorListenerAdapter() {
               public void onAnimationCancel(Animator var1) {
                  if (ChatActivity.this.pinnedMessageViewAnimator != null && ChatActivity.this.pinnedMessageViewAnimator.equals(var1)) {
                     ChatActivity.this.pinnedMessageViewAnimator = null;
                  }

               }

               public void onAnimationEnd(Animator var1) {
                  if (ChatActivity.this.pinnedMessageViewAnimator != null && ChatActivity.this.pinnedMessageViewAnimator.equals(var1)) {
                     ChatActivity.this.pinnedMessageView.setVisibility(8);
                     ChatActivity.this.pinnedMessageViewAnimator = null;
                  }

               }
            });
            this.pinnedMessageViewAnimator.start();
         } else {
            this.pinnedMessageView.setTranslationY((float)(-AndroidUtilities.dp(50.0F)));
            this.pinnedMessageView.setVisibility(8);
         }
      }

   }

   private void hideVoiceHint() {
      this.voiceHintAnimation = new AnimatorSet();
      this.voiceHintAnimation.playTogether(new Animator[]{ObjectAnimator.ofFloat(this.voiceHintTextView, View.ALPHA, new float[]{0.0F})});
      this.voiceHintAnimation.addListener(new AnimatorListenerAdapter() {
         public void onAnimationCancel(Animator var1) {
            if (var1.equals(ChatActivity.this.voiceHintAnimation)) {
               ChatActivity.this.voiceHintHideRunnable = null;
               ChatActivity.this.voiceHintHideRunnable = null;
            }

         }

         public void onAnimationEnd(Animator var1) {
            if (var1.equals(ChatActivity.this.voiceHintAnimation)) {
               ChatActivity.this.voiceHintAnimation = null;
               ChatActivity.this.voiceHintHideRunnable = null;
               if (ChatActivity.this.voiceHintTextView != null) {
                  ChatActivity.this.voiceHintTextView.setVisibility(8);
               }
            }

         }
      });
      this.voiceHintAnimation.setDuration(300L);
      this.voiceHintAnimation.start();
   }

   private void initStickers() {
      if (this.chatActivityEnterView != null && this.getParentActivity() != null && this.stickersAdapter == null) {
         TLRPC.EncryptedChat var1 = this.currentEncryptedChat;
         if (var1 == null || AndroidUtilities.getPeerLayerVersion(var1.layer) >= 23) {
            this.stickersListView.setPadding(AndroidUtilities.dp(18.0F), 0, AndroidUtilities.dp(18.0F), 0);
            RecyclerListView var3 = this.stickersListView;
            StickersAdapter var2 = new StickersAdapter(this.getParentActivity(), new _$$Lambda$ChatActivity$7VE3MzWCKlHZpFIQk1J_LXU_uCw(this));
            this.stickersAdapter = var2;
            var3.setAdapter(var2);
            RecyclerListView var5 = this.stickersListView;
            _$$Lambda$ChatActivity$JFKm62r6AhP3PumFHedSQFi2J48 var4 = new _$$Lambda$ChatActivity$JFKm62r6AhP3PumFHedSQFi2J48(this);
            this.stickersOnItemClickListener = var4;
            var5.setOnItemClickListener((RecyclerListView.OnItemClickListener)var4);
         }
      }

   }

   private void inlineUpdate1() {
      int var1 = this.prevSetUnreadCount;
      int var2 = this.newUnreadMessageCount;
      if (var1 != var2) {
         this.prevSetUnreadCount = var2;
         this.pagedownButtonCounter.setText(String.format("%d", var2));
      }

      if (this.newUnreadMessageCount <= 0) {
         if (this.pagedownButtonCounter.getVisibility() != 4) {
            this.pagedownButtonCounter.setVisibility(4);
         }
      } else if (this.pagedownButtonCounter.getVisibility() != 0) {
         this.pagedownButtonCounter.setVisibility(0);
      }

   }

   private void inlineUpdate2() {
      int var1 = this.prevSetUnreadCount;
      int var2 = this.newUnreadMessageCount;
      if (var1 != var2) {
         this.prevSetUnreadCount = var2;
         this.pagedownButtonCounter.setText(String.format("%d", var2));
      }

      if (this.pagedownButtonCounter.getVisibility() != 4) {
         this.pagedownButtonCounter.setVisibility(4);
      }

   }

   private void jumpToDate(int var1) {
      if (!this.messages.isEmpty()) {
         MessageObject var2 = (MessageObject)this.messages.get(0);
         ArrayList var3 = this.messages;
         MessageObject var11 = (MessageObject)var3.get(var3.size() - 1);
         int var4;
         if (var2.messageOwner.date >= var1 && var11.messageOwner.date <= var1) {
            for(var4 = this.messages.size() - 1; var4 >= 0; --var4) {
               var2 = (MessageObject)this.messages.get(var4);
               if (var2.messageOwner.date >= var1 && var2.getId() != 0) {
                  var4 = var2.getId();
                  byte var9;
                  if (var2.getDialogId() == this.mergeDialogId) {
                     var9 = 1;
                  } else {
                     var9 = 0;
                  }

                  this.scrollToMessageId(var4, 0, false, var9, false);
                  break;
               }
            }
         } else if ((int)this.dialog_id != 0) {
            this.clearChatData();
            this.waitingForLoad.add(this.lastLoadIndex);
            MessagesController var10 = MessagesController.getInstance(super.currentAccount);
            long var5 = this.dialog_id;
            var4 = super.classGuid;
            boolean var7 = ChatObject.isChannel(this.currentChat);
            int var8 = this.lastLoadIndex++;
            var10.loadMessages(var5, 30, 0, var1, true, 0, var4, 4, 0, var7, var8);
            this.floatingDateView.setAlpha(0.0F);
            this.floatingDateView.setTag((Object)null);
         }

      }
   }

   // $FF: synthetic method
   public static void lambda$BhRjZmtnKKyPZ5cOcgFDHcn6z6c(ChatActivity var0) {
      var0.checkEditTimer();
   }

   // $FF: synthetic method
   public static void lambda$NFR4cP3nNe6c_Xs7PotAXGjVKSQ/* $FF was: lambda$NFR4cP3nNe6c-Xs7PotAXGjVKSQ*/(ChatActivity var0) {
      var0.inlineUpdate2();
   }

   // $FF: synthetic method
   static boolean lambda$createView$21(View var0, MotionEvent var1) {
      return true;
   }

   // $FF: synthetic method
   static boolean lambda$createView$25(View var0, MotionEvent var1) {
      return true;
   }

   // $FF: synthetic method
   static boolean lambda$createView$4(View var0, MotionEvent var1) {
      return true;
   }

   // $FF: synthetic method
   static boolean lambda$createView$5(View var0, MotionEvent var1) {
      return true;
   }

   // $FF: synthetic method
   static void lambda$null$30(DialogInterface var0, int var1) {
   }

   // $FF: synthetic method
   static void lambda$null$31(DatePicker var0, DialogInterface var1) {
      int var2 = var0.getChildCount();

      for(int var3 = 0; var3 < var2; ++var3) {
         View var5 = var0.getChildAt(var3);
         android.view.ViewGroup.LayoutParams var4 = var5.getLayoutParams();
         var4.width = -1;
         var5.setLayoutParams(var4);
      }

   }

   // $FF: synthetic method
   static void lambda$null$71(TLObject var0) {
      if (var0 != null) {
         TLRPC.TL_exportedMessageLink var2 = (TLRPC.TL_exportedMessageLink)var0;

         try {
            ((ClipboardManager)ApplicationLoader.applicationContext.getSystemService("clipboard")).setPrimaryClip(ClipData.newPlainText("label", var2.link));
            if (var2.link.contains("/c/")) {
               Toast.makeText(ApplicationLoader.applicationContext, LocaleController.getString("LinkCopiedPrivate", 2131559752), 0).show();
            } else {
               Toast.makeText(ApplicationLoader.applicationContext, LocaleController.getString("LinkCopied", 2131559751), 0).show();
            }
         } catch (Exception var1) {
            FileLog.e((Throwable)var1);
         }
      }

   }

   // $FF: synthetic method
   static void lambda$null$76(AlertDialog[] var0) {
      try {
         var0[0].dismiss();
      } catch (Throwable var2) {
      }

      var0[0] = null;
   }

   // $FF: synthetic method
   public static void lambda$pe75AXzEVBCivaaObrUmNMqELz0(ChatActivity var0) {
      var0.hideVoiceHint();
   }

   // $FF: synthetic method
   static void lambda$processSelectedOption$68(boolean[] var0, View var1) {
      CheckBoxCell var2 = (CheckBoxCell)var1;
      var0[0] ^= true;
      var2.setChecked(var0[0], true);
   }

   // $FF: synthetic method
   static void lambda$processSelectedOption$72(TLObject var0, TLRPC.TL_error var1) {
      AndroidUtilities.runOnUIThread(new _$$Lambda$ChatActivity$cWCA5x0DAJ_SJsezlQnjVOHPVuQ(var0));
   }

   // $FF: synthetic method
   static void lambda$processSelectedOption$73(AlertDialog[] var0) {
      try {
         var0[0].dismiss();
      } catch (Throwable var2) {
      }

      var0[0] = null;
   }

   // $FF: synthetic method
   public static void lambda$qjQM5B3y6VBtwKZMKbvAeLv3zzQ(ChatActivity var0) {
      var0.checkListViewPaddingsInternal();
   }

   // $FF: synthetic method
   public static void lambda$r8G5ryI3TCtj8E_vwPu9tBJgvUE/* $FF was: lambda$r8G5ryI3TCtj8E-vwPu9tBJgvUE*/(ChatActivity var0) {
      var0.inlineUpdate1();
   }

   // $FF: synthetic method
   static void lambda$showRequestUrlAlert$85(CheckBoxCell[] var0, View var1) {
      if (var1.isEnabled()) {
         Integer var2 = (Integer)var1.getTag();
         var0[var2].setChecked(var0[var2].isChecked() ^ true, true);
         if (var2 == 0 && var0[1] != null) {
            if (var0[var2].isChecked()) {
               var0[1].setEnabled(true);
            } else {
               var0[1].setChecked(false, true);
               var0[1].setEnabled(false);
            }
         }

      }
   }

   private void mentionListViewUpdateLayout() {
      if (this.mentionListView.getChildCount() <= 0) {
         this.mentionListViewScrollOffsetY = 0;
         this.mentionListViewLastViewPosition = -1;
      } else {
         RecyclerListView var1 = this.mentionListView;
         View var2 = var1.getChildAt(var1.getChildCount() - 1);
         RecyclerListView.Holder var4 = (RecyclerListView.Holder)this.mentionListView.findContainingViewHolder(var2);
         int var3;
         if (this.mentionLayoutManager.getReverseLayout()) {
            if (var4 != null) {
               this.mentionListViewLastViewPosition = var4.getAdapterPosition();
               this.mentionListViewLastViewTop = var2.getBottom();
            } else {
               this.mentionListViewLastViewPosition = -1;
            }

            var2 = this.mentionListView.getChildAt(0);
            var4 = (RecyclerListView.Holder)this.mentionListView.findContainingViewHolder(var2);
            if (var2.getBottom() < this.mentionListView.getMeasuredHeight() && var4 != null && var4.getAdapterPosition() == 0) {
               var3 = var2.getBottom();
            } else {
               var3 = this.mentionListView.getMeasuredHeight();
            }

            if (this.mentionListViewScrollOffsetY != var3) {
               var1 = this.mentionListView;
               this.mentionListViewScrollOffsetY = var3;
               var1.setBottomGlowOffset(var3);
               this.mentionListView.setTopGlowOffset(0);
               this.mentionListView.invalidate();
               this.mentionContainer.invalidate();
            }
         } else {
            if (var4 != null) {
               this.mentionListViewLastViewPosition = var4.getAdapterPosition();
               this.mentionListViewLastViewTop = var2.getTop();
            } else {
               this.mentionListViewLastViewPosition = -1;
            }

            var2 = this.mentionListView.getChildAt(0);
            var4 = (RecyclerListView.Holder)this.mentionListView.findContainingViewHolder(var2);
            if (var2.getTop() > 0 && var4 != null && var4.getAdapterPosition() == 0) {
               var3 = var2.getTop();
            } else {
               var3 = 0;
            }

            if (this.mentionListViewScrollOffsetY != var3) {
               var1 = this.mentionListView;
               this.mentionListViewScrollOffsetY = var3;
               var1.setTopGlowOffset(var3);
               this.mentionListView.setBottomGlowOffset(0);
               this.mentionListView.invalidate();
               this.mentionContainer.invalidate();
            }
         }

      }
   }

   private void migrateToNewChat(MessageObject var1) {
      ActionBarLayout var2 = super.parentLayout;
      if (var2 != null) {
         int var3 = var1.messageOwner.action.channel_id;
         BaseFragment var9;
         if (var2.fragmentsStack.size() > 0) {
            ArrayList var8 = super.parentLayout.fragmentsStack;
            var9 = (BaseFragment)var8.get(var8.size() - 1);
         } else {
            var9 = null;
         }

         int var4 = super.parentLayout.fragmentsStack.indexOf(this);
         ActionBarLayout var5 = super.parentLayout;
         if (var4 > 0 && !(var9 instanceof ChatActivity) && !(var9 instanceof ProfileActivity) && this.currentChat.creator) {
            for(int var6 = var5.fragmentsStack.size(); var4 < var6 - 1; ++var4) {
               BaseFragment var7 = (BaseFragment)var5.fragmentsStack.get(var4);
               Bundle var10;
               if (var7 instanceof ChatActivity) {
                  var10 = new Bundle();
                  var10.putInt("chat_id", var3);
                  var5.addFragmentToStack(new ChatActivity(var10), var4);
                  var7.removeSelfFromStack();
               } else if (var7 instanceof ProfileActivity) {
                  var10 = new Bundle();
                  var10.putInt("chat_id", var3);
                  var5.addFragmentToStack(new ProfileActivity(var10), var4);
                  var7.removeSelfFromStack();
               } else if (var7 instanceof ChatEditActivity) {
                  var10 = new Bundle();
                  var10.putInt("chat_id", var3);
                  var5.addFragmentToStack(new ChatEditActivity(var10), var4);
                  var7.removeSelfFromStack();
               } else if (var7 instanceof ChatUsersActivity) {
                  if (!((ChatUsersActivity)var7).hasSelectType()) {
                     var10 = var7.getArguments();
                     var10.putInt("chat_id", var3);
                     var5.addFragmentToStack(new ChatUsersActivity(var10), var4);
                  }

                  var7.removeSelfFromStack();
               }
            }
         } else {
            AndroidUtilities.runOnUIThread(new _$$Lambda$ChatActivity$_Jr_ok0MSGPrIGitTcXqooeLzyo(this, var9, var1, var5));
         }

         AndroidUtilities.runOnUIThread(new _$$Lambda$ChatActivity$WCzw_OEKcApLglsMwvn0_jTRDc8(this, var3), 1000L);
      }
   }

   private void moveScrollToLastMessage() {
      if (this.chatListView != null && !this.messages.isEmpty()) {
         this.chatLayoutManager.scrollToPositionWithOffset(0, 0);
      }

   }

   private void openAttachMenu() {
      if (this.getParentActivity() != null) {
         this.createChatAttachView();
         this.chatAttachAlert.loadGalleryPhotos();
         int var1 = VERSION.SDK_INT;
         if (var1 == 21 || var1 == 22) {
            this.chatActivityEnterView.closeKeyboard();
         }

         this.chatAttachAlert.init();
         this.showDialog(this.chatAttachAlert);
      }
   }

   private void openForward() {
      Bundle var1 = new Bundle();
      var1.putBoolean("onlySelect", true);
      var1.putInt("dialogsType", 3);
      DialogsActivity var2 = new DialogsActivity(var1);
      var2.setDelegate(this);
      this.presentFragment(var2);
   }

   private void openSearchWithText(String var1) {
      if (!super.actionBar.isSearchFieldVisible()) {
         this.avatarContainer.setVisibility(8);
         this.headerItem.setVisibility(8);
         this.attachItem.setVisibility(8);
         this.editTextItem.setVisibility(8);
         this.searchItem.setVisibility(0);
         this.updateSearchButtons(0, 0, -1);
         this.updateBottomOverlay();
      }

      boolean var2;
      if (var1 == null) {
         var2 = true;
      } else {
         var2 = false;
      }

      this.openSearchKeyboard = var2;
      this.searchItem.openSearch(this.openSearchKeyboard);
      if (var1 != null) {
         this.searchItem.setSearchFieldText(var1, false);
         DataQuery.getInstance(super.currentAccount).searchMessagesInChat(var1, this.dialog_id, this.mergeDialogId, super.classGuid, 0, this.searchingUserMessages);
      }

      this.updatePinnedMessageView(true);
   }

   private void processRowSelect(View var1, boolean var2, float var3, float var4) {
      MessageObject var6;
      if (var1 instanceof ChatMessageCell) {
         var6 = ((ChatMessageCell)var1).getMessageObject();
      } else if (var1 instanceof ChatActionCell) {
         var6 = ((ChatActionCell)var1).getMessageObject();
      } else {
         var6 = null;
      }

      int var5 = this.getMessageType(var6);
      if (var5 >= 2 && var5 != 20) {
         this.addToSelectedMessages(var6, var2);
         this.updateActionModeTitle();
         this.updateVisibleRows();
      }

   }

   private void processSelectedAttach(int var1) {
      byte var2 = 0;
      byte var3 = 0;
      byte var4 = 1;
      Exception var10000;
      boolean var10001;
      Exception var23;
      if (var1 == 0) {
         if (VERSION.SDK_INT >= 23 && this.getParentActivity().checkSelfPermission("android.permission.CAMERA") != 0) {
            this.getParentActivity().requestPermissions(new String[]{"android.permission.CAMERA"}, 19);
            return;
         }

         label204: {
            Intent var5;
            File var6;
            try {
               var5 = new Intent("android.media.action.IMAGE_CAPTURE");
               var6 = AndroidUtilities.generatePicturePath();
            } catch (Exception var20) {
               var10000 = var20;
               var10001 = false;
               break label204;
            }

            if (var6 != null) {
               label212: {
                  try {
                     if (VERSION.SDK_INT >= 24) {
                        var5.putExtra("output", FileProvider.getUriForFile(this.getParentActivity(), "org.telegram.messenger.provider", var6));
                        var5.addFlags(2);
                        var5.addFlags(1);
                        break label212;
                     }
                  } catch (Exception var19) {
                     var10000 = var19;
                     var10001 = false;
                     break label204;
                  }

                  try {
                     var5.putExtra("output", Uri.fromFile(var6));
                  } catch (Exception var18) {
                     var10000 = var18;
                     var10001 = false;
                     break label204;
                  }
               }

               try {
                  this.currentPicturePath = var6.getAbsolutePath();
               } catch (Exception var17) {
                  var10000 = var17;
                  var10001 = false;
                  break label204;
               }
            }

            try {
               this.startActivityForResult(var5, 0);
               return;
            } catch (Exception var16) {
               var10000 = var16;
               var10001 = false;
            }
         }

         var23 = var10000;
         FileLog.e((Throwable)var23);
      } else {
         byte var21;
         if (var1 == 1) {
            if (VERSION.SDK_INT >= 23 && this.getParentActivity().checkSelfPermission("android.permission.READ_EXTERNAL_STORAGE") != 0) {
               try {
                  this.getParentActivity().requestPermissions(new String[]{"android.permission.READ_EXTERNAL_STORAGE"}, 4);
               } catch (Throwable var8) {
               }

               return;
            }

            boolean var7;
            label151: {
               label206: {
                  if (ChatObject.isChannel(this.currentChat)) {
                     TLRPC.TL_chatBannedRights var24 = this.currentChat.banned_rights;
                     if (var24 != null && var24.send_gifs) {
                        break label206;
                     }
                  }

                  TLRPC.EncryptedChat var25 = this.currentEncryptedChat;
                  if (var25 == null || AndroidUtilities.getPeerLayerVersion(var25.layer) >= 46) {
                     var7 = true;
                     break label151;
                  }
               }

               var7 = false;
            }

            PhotoAlbumPickerActivity var27 = new PhotoAlbumPickerActivity(0, var7, true, this);
            var21 = var3;
            if (this.editingMessageObject != null) {
               var21 = 1;
            }

            var27.setMaxSelectedPhotos(var21);
            var27.setDelegate(new PhotoAlbumPickerActivity.PhotoAlbumPickerActivityDelegate() {
               public void didSelectPhotos(ArrayList var1) {
                  if (!var1.isEmpty()) {
                     ChatActivity.this.fillEditingMediaWithCaption(((SendMessagesHelper.SendingMediaInfo)var1.get(0)).caption, ((SendMessagesHelper.SendingMediaInfo)var1.get(0)).entities);
                     SendMessagesHelper.prepareSendingMedia(var1, ChatActivity.this.dialog_id, ChatActivity.this.replyingMessageObject, (InputContentInfoCompat)null, false, SharedConfig.groupPhotosEnabled, ChatActivity.this.editingMessageObject);
                     ChatActivity.this.hideFieldPanel(false);
                     DataQuery.getInstance(ChatActivity.access$21200(ChatActivity.this)).cleanDraft(ChatActivity.this.dialog_id, true);
                  }
               }

               public void startPhotoSelectActivity() {
                  try {
                     Intent var1 = new Intent();
                     var1.setType("video/*");
                     var1.setAction("android.intent.action.GET_CONTENT");
                     var1.putExtra("android.intent.extra.sizeLimit", 1610612736L);
                     Intent var2 = new Intent("android.intent.action.PICK");
                     var2.setType("image/*");
                     var2 = Intent.createChooser(var2, (CharSequence)null);
                     var2.putExtra("android.intent.extra.INITIAL_INTENTS", new Intent[]{var1});
                     ChatActivity.this.startActivityForResult(var2, 1);
                  } catch (Exception var3) {
                     FileLog.e((Throwable)var3);
                  }

               }
            });
            this.presentFragment(var27);
         } else if (var1 == 2) {
            if (VERSION.SDK_INT >= 23 && this.getParentActivity().checkSelfPermission("android.permission.CAMERA") != 0) {
               try {
                  this.getParentActivity().requestPermissions(new String[]{"android.permission.CAMERA"}, 20);
               } catch (Throwable var9) {
               }

               return;
            }

            label208: {
               Intent var26;
               File var28;
               try {
                  var26 = new Intent("android.media.action.VIDEO_CAPTURE");
                  var28 = AndroidUtilities.generateVideoPath();
               } catch (Exception var15) {
                  var10000 = var15;
                  var10001 = false;
                  break label208;
               }

               if (var28 != null) {
                  label166: {
                     try {
                        if (VERSION.SDK_INT >= 24) {
                           var26.putExtra("output", FileProvider.getUriForFile(this.getParentActivity(), "org.telegram.messenger.provider", var28));
                           var26.addFlags(2);
                           var26.addFlags(1);
                           break label166;
                        }
                     } catch (Exception var14) {
                        var10000 = var14;
                        var10001 = false;
                        break label208;
                     }

                     try {
                        if (VERSION.SDK_INT >= 18) {
                           var26.putExtra("output", Uri.fromFile(var28));
                        }
                     } catch (Exception var13) {
                        var10000 = var13;
                        var10001 = false;
                        break label208;
                     }
                  }

                  try {
                     var26.putExtra("android.intent.extra.sizeLimit", 1610612736L);
                     this.currentPicturePath = var28.getAbsolutePath();
                  } catch (Exception var12) {
                     var10000 = var12;
                     var10001 = false;
                     break label208;
                  }
               }

               try {
                  this.startActivityForResult(var26, 2);
                  return;
               } catch (Exception var11) {
                  var10000 = var11;
                  var10001 = false;
               }
            }

            var23 = var10000;
            FileLog.e((Throwable)var23);
         } else if (var1 == 6) {
            if (!AndroidUtilities.isGoogleMapsInstalled(this)) {
               return;
            }

            var21 = var2;
            if (this.currentEncryptedChat == null) {
               var21 = 1;
            }

            LocationActivity var29 = new LocationActivity(var21);
            var29.setDialogId(this.dialog_id);
            var29.setDelegate(this);
            this.presentFragment(var29);
         } else if (var1 == 4) {
            if (VERSION.SDK_INT >= 23 && this.getParentActivity().checkSelfPermission("android.permission.READ_EXTERNAL_STORAGE") != 0) {
               try {
                  this.getParentActivity().requestPermissions(new String[]{"android.permission.READ_EXTERNAL_STORAGE"}, 4);
               } catch (Throwable var10) {
               }

               return;
            }

            DocumentSelectActivity var30 = new DocumentSelectActivity(true);
            byte var22;
            if (this.editingMessageObject != null) {
               var22 = var4;
            } else {
               var22 = -1;
            }

            var30.setMaxSelectedFiles(var22);
            var30.setDelegate(new DocumentSelectActivity.DocumentSelectActivityDelegate() {
               public void didSelectFiles(DocumentSelectActivity var1, ArrayList var2) {
                  var1.finishFragment();
                  ChatActivity.this.fillEditingMediaWithCaption((CharSequence)null, (ArrayList)null);
                  SendMessagesHelper.prepareSendingDocuments(var2, var2, (ArrayList)null, (String)null, (String)null, ChatActivity.this.dialog_id, ChatActivity.this.replyingMessageObject, (InputContentInfoCompat)null, ChatActivity.this.editingMessageObject);
                  ChatActivity.this.hideFieldPanel(false);
                  DataQuery.getInstance(ChatActivity.access$21300(ChatActivity.this)).cleanDraft(ChatActivity.this.dialog_id, true);
               }

               // $FF: synthetic method
               public void lambda$startMusicSelectActivity$0$ChatActivity$48(BaseFragment var1, ArrayList var2) {
                  var1.removeSelfFromStack();
                  ChatActivity.this.fillEditingMediaWithCaption((CharSequence)null, (ArrayList)null);
                  SendMessagesHelper.prepareSendingAudioDocuments(var2, ChatActivity.this.dialog_id, ChatActivity.this.replyingMessageObject, ChatActivity.this.editingMessageObject);
                  ChatActivity.this.hideFieldPanel(false);
                  DataQuery.getInstance(ChatActivity.access$21400(ChatActivity.this)).cleanDraft(ChatActivity.this.dialog_id, true);
               }

               public void startDocumentSelectActivity() {
                  try {
                     Intent var1 = new Intent("android.intent.action.GET_CONTENT");
                     if (VERSION.SDK_INT >= 18) {
                        var1.putExtra("android.intent.extra.ALLOW_MULTIPLE", true);
                     }

                     var1.setType("*/*");
                     ChatActivity.this.startActivityForResult(var1, 21);
                  } catch (Exception var2) {
                     FileLog.e((Throwable)var2);
                  }

               }

               public void startMusicSelectActivity(BaseFragment var1) {
                  AudioSelectActivity var2 = new AudioSelectActivity();
                  var2.setDelegate(new _$$Lambda$ChatActivity$48$2D5YNE6pSSIdPM1jM7dSsnPKESA(this, var1));
                  ChatActivity.this.presentFragment(var2);
               }
            });
            this.presentFragment(var30);
         } else if (var1 == 3) {
            if (VERSION.SDK_INT >= 23 && this.getParentActivity().checkSelfPermission("android.permission.READ_EXTERNAL_STORAGE") != 0) {
               this.getParentActivity().requestPermissions(new String[]{"android.permission.READ_EXTERNAL_STORAGE"}, 4);
               return;
            }

            AudioSelectActivity var31 = new AudioSelectActivity();
            var31.setDelegate(new _$$Lambda$ChatActivity$bmi0DWwdmf6ud9aJqSdrchMhdS8(this));
            this.presentFragment(var31);
         } else if (var1 == 5) {
            if (VERSION.SDK_INT >= 23 && this.getParentActivity().checkSelfPermission("android.permission.READ_CONTACTS") != 0) {
               this.getParentActivity().requestPermissions(new String[]{"android.permission.READ_CONTACTS"}, 5);
               return;
            }

            PhonebookSelectActivity var32 = new PhonebookSelectActivity();
            var32.setDelegate(new _$$Lambda$ChatActivity$NigUKwurkV8y3w_c45IqajRbqSw(this));
            this.presentFragment(var32);
         } else if (var1 == 9) {
            TLRPC.Chat var33 = this.currentChat;
            if (var33 != null && ChatObject.canSendPolls(var33)) {
               PollCreateActivity var34 = new PollCreateActivity();
               var34.setDelegate(new _$$Lambda$ChatActivity$6WXJc4YH8LQTBuHben4e3iABxOY(this));
               this.presentFragment(var34);
            }
         }
      }

   }

   private void processSelectedOption(int var1) {
      if (this.selectedObject != null && this.getParentActivity() != null) {
         String var2 = "";
         byte var3 = 3;
         boolean var4 = true;
         byte var5 = 0;
         byte var6 = 0;
         MessageObject var7;
         AlertDialog.Builder var8;
         DataQuery var20;
         Bundle var24;
         AlertDialog.Builder var26;
         String var27;
         TLRPC.Chat var29;
         File var32;
         String var34;
         label281:
         switch(var1) {
         case 0:
            if (this.selectedObjectGroup == null) {
               if (SendMessagesHelper.getInstance(super.currentAccount).retrySendMessage(this.selectedObject, false)) {
                  this.updateVisibleRows();
                  this.moveScrollToLastMessage();
               }
            } else {
               var1 = 0;

               for(; var1 < this.selectedObjectGroup.messages.size(); ++var1) {
                  if (!SendMessagesHelper.getInstance(super.currentAccount).retrySendMessage((MessageObject)this.selectedObjectGroup.messages.get(var1), false)) {
                     var4 = false;
                  }
               }

               if (var4) {
                  this.moveScrollToLastMessage();
               }
            }
            break;
         case 1:
            if (this.getParentActivity() == null) {
               this.selectedObject = null;
               this.selectedObjectGroup = null;
               return;
            }

            this.createDeleteMessagesAlert(this.selectedObject, this.selectedObjectGroup);
            break;
         case 2:
            this.forwardingMessage = this.selectedObject;
            this.forwardingMessageGroup = this.selectedObjectGroup;
            var24 = new Bundle();
            var24.putBoolean("onlySelect", true);
            var24.putInt("dialogsType", 3);
            DialogsActivity var42 = new DialogsActivity(var24);
            var42.setDelegate(this);
            this.presentFragment(var42);
            break;
         case 3:
            AndroidUtilities.addToClipboard(this.getMessageContent(this.selectedObject, 0, false));
            break;
         case 4:
            if (VERSION.SDK_INT >= 23 && this.getParentActivity().checkSelfPermission("android.permission.WRITE_EXTERNAL_STORAGE") != 0) {
               this.getParentActivity().requestPermissions(new String[]{"android.permission.WRITE_EXTERNAL_STORAGE"}, 4);
               this.selectedObject = null;
               this.selectedObjectGroup = null;
               return;
            }

            if (this.selectedObjectGroup != null) {
               var1 = var5;

               while(true) {
                  if (var1 >= this.selectedObjectGroup.messages.size()) {
                     break label281;
                  }

                  this.saveMessageToGallery((MessageObject)this.selectedObjectGroup.messages.get(var1));
                  ++var1;
               }
            }

            this.saveMessageToGallery(this.selectedObject);
            break;
         case 5:
            File var38;
            label279: {
               if (!TextUtils.isEmpty(this.selectedObject.messageOwner.attachPath)) {
                  var38 = new File(this.selectedObject.messageOwner.attachPath);
                  if (var38.exists()) {
                     break label279;
                  }
               }

               var38 = null;
            }

            File var35 = var38;
            if (var38 == null) {
               var32 = FileLoader.getPathToMessage(this.selectedObject.messageOwner);
               var35 = var38;
               if (var32.exists()) {
                  var35 = var32;
               }
            }

            if (var35 != null) {
               if (var35.getName().toLowerCase().endsWith("attheme")) {
                  GridLayoutManagerFixed var39 = this.chatLayoutManager;
                  if (var39 != null) {
                     var1 = var39.findFirstVisibleItemPosition();
                     if (var1 != 0) {
                        this.scrollToPositionOnRecreate = var1;
                        RecyclerListView.Holder var40 = (RecyclerListView.Holder)this.chatListView.findViewHolderForAdapterPosition(this.scrollToPositionOnRecreate);
                        if (var40 != null) {
                           this.scrollToOffsetOnRecreate = this.chatListView.getMeasuredHeight() - var40.itemView.getBottom() - this.chatListView.getPaddingBottom();
                        } else {
                           this.scrollToPositionOnRecreate = -1;
                        }
                     } else {
                        this.scrollToPositionOnRecreate = -1;
                     }
                  }

                  Theme.ThemeInfo var41 = Theme.applyThemeFile(var35, this.selectedObject.getDocumentName(), true);
                  if (var41 != null) {
                     this.presentFragment(new ThemePreviewActivity(var35, var41));
                  } else {
                     this.scrollToPositionOnRecreate = -1;
                     if (this.getParentActivity() == null) {
                        this.selectedObject = null;
                        this.selectedObjectGroup = null;
                        return;
                     }

                     var26 = new AlertDialog.Builder(this.getParentActivity());
                     var26.setTitle(LocaleController.getString("AppName", 2131558635));
                     var26.setMessage(LocaleController.getString("IncorrectTheme", 2131559664));
                     var26.setPositiveButton(LocaleController.getString("OK", 2131560097), (OnClickListener)null);
                     this.showDialog(var26.create());
                  }
               } else if (LocaleController.getInstance().applyLanguageFile(var35, super.currentAccount)) {
                  this.presentFragment(new LanguageSelectActivity());
               } else {
                  if (this.getParentActivity() == null) {
                     this.selectedObject = null;
                     this.selectedObjectGroup = null;
                     return;
                  }

                  var26 = new AlertDialog.Builder(this.getParentActivity());
                  var26.setTitle(LocaleController.getString("AppName", 2131558635));
                  var26.setMessage(LocaleController.getString("IncorrectLocalization", 2131559663));
                  var26.setPositiveButton(LocaleController.getString("OK", 2131560097), (OnClickListener)null);
                  this.showDialog(var26.create());
               }
            }
            break;
         case 6:
            var27 = this.selectedObject.messageOwner.attachPath;
            var34 = var27;
            if (var27 != null) {
               var34 = var27;
               if (var27.length() > 0) {
                  var34 = var27;
                  if (!(new File(var27)).exists()) {
                     var34 = null;
                  }
               }
            }

            label273: {
               if (var34 != null) {
                  var27 = var34;
                  if (var34.length() != 0) {
                     break label273;
                  }
               }

               var27 = FileLoader.getPathToMessage(this.selectedObject.messageOwner).toString();
            }

            Intent var37 = new Intent("android.intent.action.SEND");
            var37.setType(this.selectedObject.getDocument().mime_type);
            var32 = new File(var27);
            if (VERSION.SDK_INT >= 24) {
               try {
                  var37.putExtra("android.intent.extra.STREAM", FileProvider.getUriForFile(this.getParentActivity(), "org.telegram.messenger.provider", var32));
                  var37.setFlags(1);
               } catch (Exception var12) {
                  var37.putExtra("android.intent.extra.STREAM", Uri.fromFile(var32));
               }
            } else {
               var37.putExtra("android.intent.extra.STREAM", Uri.fromFile(var32));
            }

            try {
               this.getParentActivity().startActivityForResult(Intent.createChooser(var37, LocaleController.getString("ShareFile", 2131560748)), 500);
            } catch (Throwable var11) {
            }
            break;
         case 7:
            var27 = this.selectedObject.messageOwner.attachPath;
            var34 = var27;
            if (var27 != null) {
               var34 = var27;
               if (var27.length() > 0) {
                  var34 = var27;
                  if (!(new File(var27)).exists()) {
                     var34 = null;
                  }
               }
            }

            label267: {
               if (var34 != null) {
                  var27 = var34;
                  if (var34.length() != 0) {
                     break label267;
                  }
               }

               var27 = FileLoader.getPathToMessage(this.selectedObject.messageOwner).toString();
            }

            if (VERSION.SDK_INT >= 23 && this.getParentActivity().checkSelfPermission("android.permission.WRITE_EXTERNAL_STORAGE") != 0) {
               this.getParentActivity().requestPermissions(new String[]{"android.permission.WRITE_EXTERNAL_STORAGE"}, 4);
               this.selectedObject = null;
               this.selectedObjectGroup = null;
               return;
            }

            MediaController.saveFile(var27, this.getParentActivity(), 0, (String)null, (String)null);
            break;
         case 8:
            this.showFieldPanelForReply(this.selectedObject);
            break;
         case 9:
            Activity var30;
            TLRPC.InputStickerSet var31;
            ChatActivityEnterView var36;
            label261: {
               var30 = this.getParentActivity();
               var31 = this.selectedObject.getInputStickerSet();
               if (this.bottomOverlayChat.getVisibility() != 0) {
                  var29 = this.currentChat;
                  if (var29 == null || ChatObject.canSendStickers(var29)) {
                     var36 = this.chatActivityEnterView;
                     break label261;
                  }
               }

               var36 = null;
            }

            this.showDialog(new StickersAlert(var30, this, var31, (TLRPC.TL_messages_stickerSet)null, var36));
            break;
         case 10:
            if (VERSION.SDK_INT >= 23 && this.getParentActivity().checkSelfPermission("android.permission.WRITE_EXTERNAL_STORAGE") != 0) {
               this.getParentActivity().requestPermissions(new String[]{"android.permission.WRITE_EXTERNAL_STORAGE"}, 4);
               this.selectedObject = null;
               this.selectedObjectGroup = null;
               return;
            }

            var34 = FileLoader.getDocumentFileName(this.selectedObject.getDocument());
            var27 = var34;
            if (TextUtils.isEmpty(var34)) {
               var27 = this.selectedObject.getFileName();
            }

            String var25 = this.selectedObject.messageOwner.attachPath;
            var34 = var25;
            if (var25 != null) {
               var34 = var25;
               if (var25.length() > 0) {
                  var34 = var25;
                  if (!(new File(var25)).exists()) {
                     var34 = null;
                  }
               }
            }

            label249: {
               if (var34 != null) {
                  var25 = var34;
                  if (var34.length() != 0) {
                     break label249;
                  }
               }

               var25 = FileLoader.getPathToMessage(this.selectedObject.messageOwner).toString();
            }

            Activity var10 = this.getParentActivity();
            byte var15;
            if (this.selectedObject.isMusic()) {
               var15 = var3;
            } else {
               var15 = 2;
            }

            var34 = var2;
            if (this.selectedObject.getDocument() != null) {
               var34 = this.selectedObject.getDocument().mime_type;
            }

            MediaController.saveFile(var25, var10, var15, var27, var34);
            break;
         case 11:
            TLRPC.Document var33 = this.selectedObject.getDocument();
            MessagesController.getInstance(super.currentAccount).saveGif(this.selectedObject, var33);
            this.showGifHint();
            this.chatActivityEnterView.addRecentGif(var33);
            break;
         case 12:
            this.startEditingMessageObject(this.selectedObject);
            this.selectedObject = null;
            this.selectedObjectGroup = null;
            break;
         case 13:
            int var17 = this.selectedObject.getId();
            var8 = new AlertDialog.Builder(this.getParentActivity());
            var8.setTitle(LocaleController.getString("PinMessageAlertTitle", 2131560445));
            boolean[] var28;
            if (this.currentUser != null) {
               var8.setMessage(LocaleController.getString("PinMessageAlertChat", 2131560444));
               var28 = new boolean[]{false};
            } else {
               label308: {
                  if (!ChatObject.isChannel(this.currentChat) || !this.currentChat.megagroup) {
                     var29 = this.currentChat;
                     if (var29 == null || ChatObject.isChannel(var29)) {
                        var8.setMessage(LocaleController.getString("PinMessageAlertChannel", 2131560443));
                        var28 = new boolean[]{false};
                        break label308;
                     }
                  }

                  var8.setMessage(LocaleController.getString("PinMessageAlert", 2131560442));
                  var28 = new boolean[]{true};
                  FrameLayout var14 = new FrameLayout(this.getParentActivity());
                  CheckBoxCell var9 = new CheckBoxCell(this.getParentActivity(), 1);
                  var9.setBackgroundDrawable(Theme.getSelectorDrawable(false));
                  var9.setText(LocaleController.getString("PinNotify", 2131560446), "", true, false);
                  if (LocaleController.isRTL) {
                     var1 = AndroidUtilities.dp(8.0F);
                  } else {
                     var1 = 0;
                  }

                  int var16;
                  if (LocaleController.isRTL) {
                     var16 = 0;
                  } else {
                     var16 = AndroidUtilities.dp(8.0F);
                  }

                  var9.setPadding(var1, 0, var16, 0);
                  var14.addView(var9, LayoutHelper.createFrame(-1, 48.0F, 51, 8.0F, 0.0F, 8.0F, 0.0F));
                  var9.setOnClickListener(new _$$Lambda$ChatActivity$2_dMuEnyKRHzIQ_s63bwz1PvMDI(var28));
                  var8.setView(var14);
               }
            }

            var8.setPositiveButton(LocaleController.getString("OK", 2131560097), new _$$Lambda$ChatActivity$LW75pIpHHJP0gvpPWzQnAnCQJXM(this, var17, var28));
            var8.setNegativeButton(LocaleController.getString("Cancel", 2131558891), (OnClickListener)null);
            this.showDialog(var8.create());
            break;
         case 14:
            var26 = new AlertDialog.Builder(this.getParentActivity());
            var26.setTitle(LocaleController.getString("UnpinMessageAlertTitle", 2131560944));
            var26.setMessage(LocaleController.getString("UnpinMessageAlert", 2131560943));
            var26.setPositiveButton(LocaleController.getString("OK", 2131560097), new _$$Lambda$ChatActivity$aXplLEy4nNbY_nnfg_F29323SEg(this));
            var26.setNegativeButton(LocaleController.getString("Cancel", 2131558891), (OnClickListener)null);
            this.showDialog(var26.create());
            break;
         case 15:
            var24 = new Bundle();
            var24.putInt("user_id", this.selectedObject.messageOwner.media.user_id);
            var24.putString("phone", this.selectedObject.messageOwner.media.phone_number);
            var24.putBoolean("addContact", true);
            this.presentFragment(new ContactAddActivity(var24));
            break;
         case 16:
            AndroidUtilities.addToClipboard(this.selectedObject.messageOwner.media.phone_number);
            break;
         case 17:
            try {
               StringBuilder var22 = new StringBuilder();
               var22.append("tel:");
               var22.append(this.selectedObject.messageOwner.media.phone_number);
               Intent var23 = new Intent("android.intent.action.DIAL", Uri.parse(var22.toString()));
               var23.addFlags(268435456);
               this.getParentActivity().startActivityForResult(var23, 500);
            } catch (Exception var13) {
               FileLog.e((Throwable)var13);
            }
            break;
         case 18:
            TLRPC.User var21 = this.currentUser;
            if (var21 != null) {
               VoIPHelper.startCall(var21, this.getParentActivity(), MessagesController.getInstance(super.currentAccount).getUserFull(this.currentUser.id));
            }
            break;
         case 19:
            VoIPHelper.showRateAlert(this.getParentActivity(), (TLRPC.TL_messageActionPhoneCall)this.selectedObject.messageOwner.action);
            break;
         case 20:
            var20 = DataQuery.getInstance(super.currentAccount);
            var7 = this.selectedObject;
            var20.addRecentSticker(2, var7, var7.getDocument(), (int)(System.currentTimeMillis() / 1000L), false);
            break;
         case 21:
            var20 = DataQuery.getInstance(super.currentAccount);
            var7 = this.selectedObject;
            var20.addRecentSticker(2, var7, var7.getDocument(), (int)(System.currentTimeMillis() / 1000L), true);
            break;
         case 22:
            TLRPC.TL_channels_exportMessageLink var19 = new TLRPC.TL_channels_exportMessageLink();
            var19.id = this.selectedObject.getId();
            var19.channel = MessagesController.getInputChannel(this.currentChat);
            ConnectionsManager.getInstance(super.currentAccount).sendRequest(var19, _$$Lambda$ChatActivity$1VidRY4qKSsVbsBnftG46vcEx_4.INSTANCE);
            break;
         case 23:
            AlertsCreator.createReportAlert(this.getParentActivity(), this.dialog_id, this.selectedObject.getId(), this);
            break;
         case 24:
            if (!this.selectedObject.isEditing() && (!this.selectedObject.isSending() || this.selectedObjectGroup != null)) {
               if (!this.selectedObject.isSending() || this.selectedObjectGroup == null) {
                  break;
               }

               var1 = var6;

               while(true) {
                  if (var1 >= this.selectedObjectGroup.messages.size()) {
                     break label281;
                  }

                  SendMessagesHelper.getInstance(super.currentAccount).cancelSendingMessage(new ArrayList(this.selectedObjectGroup.messages));
                  ++var1;
               }
            }

            SendMessagesHelper.getInstance(super.currentAccount).cancelSendingMessage(this.selectedObject);
            break;
         case 25:
            AlertDialog[] var18 = new AlertDialog[]{new AlertDialog(this.getParentActivity(), 3)};
            var1 = SendMessagesHelper.getInstance(super.currentAccount).sendVote(this.selectedObject, (TLRPC.TL_pollAnswer)null, new _$$Lambda$ChatActivity$U5tUhQH3wNylNCt20uIdE_5vUKg(var18));
            if (var1 != 0) {
               AndroidUtilities.runOnUIThread(new _$$Lambda$ChatActivity$w4cBn7eVI_jA_9l5l0qJf_RFppg(this, var18, var1), 500L);
            }
            break;
         case 26:
            var7 = this.selectedObject;
            var8 = new AlertDialog.Builder(this.getParentActivity());
            var8.setTitle(LocaleController.getString("StopPollAlertTitle", 2131560830));
            var8.setMessage(LocaleController.getString("StopPollAlertText", 2131560829));
            var8.setPositiveButton(LocaleController.getString("Stop", 2131560820), new _$$Lambda$ChatActivity$Tr_7Iy8c3EReHr8wdqnTYAGvNzs(this, var7));
            var8.setNegativeButton(LocaleController.getString("Cancel", 2131558891), (OnClickListener)null);
            this.showDialog(var8.create());
         }

         this.selectedObject = null;
         this.selectedObjectGroup = null;
      }

   }

   private void removeMessageObject(MessageObject var1) {
      int var2 = this.messages.indexOf(var1);
      if (var2 != -1) {
         this.messages.remove(var2);
         ChatActivity.ChatActivityAdapter var3 = this.chatAdapter;
         if (var3 != null) {
            var3.notifyItemRemoved(var3.messagesStartRow + var2);
         }

      }
   }

   private void removeSelectedMessageHighlight() {
      Runnable var1 = this.unselectRunnable;
      if (var1 != null) {
         AndroidUtilities.cancelRunOnUIThread(var1);
         this.unselectRunnable = null;
      }

      this.highlightMessageId = Integer.MAX_VALUE;
   }

   private void removeUnreadPlane(boolean var1) {
      if (this.unreadMessageObject != null) {
         if (var1) {
            boolean[] var2 = this.forwardEndReached;
            var2[1] = true;
            var2[0] = true;
            this.first_unread_id = 0;
            this.last_message_id = 0;
         }

         this.createUnreadMessageAfterId = 0;
         this.createUnreadMessageAfterIdLoading = false;
         this.removeMessageObject(this.unreadMessageObject);
         this.unreadMessageObject = null;
      }

   }

   private void saveMessageToGallery(MessageObject var1) {
      String var2 = var1.messageOwner.attachPath;
      String var3 = var2;
      if (!TextUtils.isEmpty(var2)) {
         var3 = var2;
         if (!(new File(var2)).exists()) {
            var3 = null;
         }
      }

      var2 = var3;
      if (TextUtils.isEmpty(var3)) {
         var2 = FileLoader.getPathToMessage(var1.messageOwner).toString();
      }

      MediaController.saveFile(var2, this.getParentActivity(), var1.isVideo(), (String)null, (String)null);
   }

   private void scrollToLastMessage(boolean var1) {
      if (this.forwardEndReached[0] && this.first_unread_id == 0 && this.startLoadFromMessageId == 0) {
         if (var1 && this.chatLayoutManager.findFirstCompletelyVisibleItemPosition() == 0) {
            this.showPagedownButton(false, true);
            this.removeSelectedMessageHighlight();
            this.updateVisibleRows();
         } else {
            this.chatLayoutManager.scrollToPositionWithOffset(0, 0);
         }
      } else {
         this.clearChatData();
         this.waitingForLoad.add(this.lastLoadIndex);
         MessagesController var2 = MessagesController.getInstance(super.currentAccount);
         long var3 = this.dialog_id;
         int var5 = super.classGuid;
         var1 = ChatObject.isChannel(this.currentChat);
         int var6 = this.lastLoadIndex++;
         var2.loadMessages(var3, 30, 0, 0, true, 0, var5, 0, 0, var1, var6);
      }

   }

   private void searchLinks(CharSequence var1, boolean var2) {
      if (this.currentEncryptedChat == null || MessagesController.getInstance(super.currentAccount).secretWebpagePreview != 0 && AndroidUtilities.getPeerLayerVersion(this.currentEncryptedChat.layer) >= 46) {
         if (var2) {
            TLRPC.WebPage var3 = this.foundWebPage;
            if (var3 != null) {
               String var9 = var3.url;
               if (var9 != null) {
                  boolean var5;
                  int var8;
                  char var12;
                  label67: {
                     int var4 = TextUtils.indexOf(var1, var9);
                     var5 = true;
                     boolean var6 = true;
                     if (var4 == -1) {
                        var9 = this.foundWebPage.display_url;
                        if (var9 != null) {
                           int var7 = TextUtils.indexOf(var1, var9);
                           if (var7 == -1 || this.foundWebPage.display_url.length() + var7 != var1.length()) {
                              var6 = false;
                           }

                           var8 = var7;
                           var5 = var6;
                           if (var7 != -1) {
                              var8 = var7;
                              var5 = var6;
                              if (!var6) {
                                 char var11 = var1.charAt(this.foundWebPage.display_url.length() + var7);
                                 var8 = var7;
                                 var5 = var6;
                                 var12 = var11;
                                 break label67;
                              }
                           }
                        } else {
                           var5 = false;
                           var8 = var4;
                        }
                     } else {
                        if (this.foundWebPage.url.length() + var4 == var1.length()) {
                           var6 = var5;
                        } else {
                           var6 = false;
                        }

                        var8 = var4;
                        var5 = var6;
                        if (!var6) {
                           var12 = var1.charAt(this.foundWebPage.url.length() + var4);
                           var5 = var6;
                           var8 = var4;
                           break label67;
                        }
                     }

                     var12 = 0;
                  }

                  if (var8 != -1 && (var5 || var12 == ' ' || var12 == ',' || var12 == '.' || var12 == '!' || var12 == '/')) {
                     return;
                  }
               }

               this.pendingLinkSearchString = null;
               this.foundUrls = null;
               this.showFieldPanelForWebPage(false, this.foundWebPage, false);
            }
         }

         MessagesController var10 = MessagesController.getInstance(super.currentAccount);
         Utilities.searchQueue.postRunnable(new _$$Lambda$ChatActivity$A6saBtiVC7KZVlD_BKI_DC5XR4I(this, var1, var10, var2));
      }
   }

   private void sendBotInlineResult(TLRPC.BotInlineResult var1) {
      int var2 = this.mentionsAdapter.getContextBotId();
      HashMap var3 = new HashMap();
      var3.put("id", var1.id);
      StringBuilder var4 = new StringBuilder();
      var4.append("");
      var4.append(var1.query_id);
      var3.put("query_id", var4.toString());
      var4 = new StringBuilder();
      var4.append("");
      var4.append(var2);
      var3.put("bot", var4.toString());
      var3.put("bot_name", this.mentionsAdapter.getContextBotName());
      SendMessagesHelper.prepareSendingBotContextResult(var1, var3, this.dialog_id, this.replyingMessageObject);
      this.chatActivityEnterView.setFieldText("");
      this.hideFieldPanel(false);
      DataQuery.getInstance(super.currentAccount).increaseInlineRaiting(var2);
   }

   private boolean sendSecretMessageRead(MessageObject var1) {
      if (var1 != null && !var1.isOut() && var1.isSecretMedia()) {
         TLRPC.Message var2 = var1.messageOwner;
         if (var2.destroyTime == 0 && var2.ttl > 0) {
            MessagesController var9;
            if (this.currentEncryptedChat != null) {
               var9 = MessagesController.getInstance(super.currentAccount);
               long var3 = this.dialog_id;
               TLRPC.Message var5 = var1.messageOwner;
               var9.markMessageAsRead(var3, var5.random_id, var5.ttl);
            } else {
               var9 = MessagesController.getInstance(super.currentAccount);
               int var6 = var1.getId();
               int var7;
               if (ChatObject.isChannel(this.currentChat)) {
                  var7 = this.currentChat.id;
               } else {
                  var7 = 0;
               }

               var9.markMessageAsRead(var6, var7, (TLRPC.InputChannel)null, var1.messageOwner.ttl, 0L);
            }

            TLRPC.Message var8 = var1.messageOwner;
            var8.destroyTime = var8.ttl + ConnectionsManager.getInstance(super.currentAccount).getCurrentTime();
            return true;
         }
      }

      return false;
   }

   private void sendUriAsDocument(Uri var1) {
      if (var1 != null) {
         String var2 = var1.toString();
         Uri var3 = var1;
         if (var2.contains("com.google.android.apps.photos.contentprovider")) {
            label36: {
               Exception var10000;
               label41: {
                  boolean var10001;
                  int var4;
                  try {
                     var2 = var2.split("/1/")[1];
                     var4 = var2.indexOf("/ACTUAL");
                  } catch (Exception var6) {
                     var10000 = var6;
                     var10001 = false;
                     break label41;
                  }

                  var3 = var1;
                  if (var4 == -1) {
                     break label36;
                  }

                  try {
                     var3 = Uri.parse(URLDecoder.decode(var2.substring(0, var4), "UTF-8"));
                     break label36;
                  } catch (Exception var5) {
                     var10000 = var5;
                     var10001 = false;
                  }
               }

               Exception var8 = var10000;
               FileLog.e((Throwable)var8);
               var3 = var1;
            }
         }

         String var7 = AndroidUtilities.getPath(var3);
         String var9;
         if (var7 == null) {
            var7 = var3.toString();
            var9 = MediaController.copyFileToCache(var3, "file");
            var2 = var7;
         } else {
            var2 = var7;
            var9 = var7;
         }

         if (var9 == null) {
            this.showAttachmentError();
         } else {
            this.fillEditingMediaWithCaption((CharSequence)null, (ArrayList)null);
            SendMessagesHelper.prepareSendingDocument(var9, var2, (Uri)null, (String)null, (String)null, this.dialog_id, this.replyingMessageObject, (InputContentInfoCompat)null, this.editingMessageObject);
            this.hideFieldPanel(false);
         }
      }
   }

   private void setCellSelectionBackground(MessageObject var1, ChatMessageCell var2, int var3, boolean var4) {
      MessageObject.GroupedMessages var5 = this.getValidGroupedMessage(var1);
      boolean var6 = false;
      MessageObject.GroupedMessages var9 = var5;
      if (var5 != null) {
         int var7 = 0;

         boolean var10;
         while(true) {
            if (var7 >= var5.messages.size()) {
               var10 = false;
               break;
            }

            if (this.selectedMessagesIds[var3].indexOfKey(((MessageObject)var5.messages.get(var7)).getId()) < 0) {
               var10 = true;
               break;
            }

            ++var7;
         }

         var9 = var5;
         if (!var10) {
            var9 = null;
         }
      }

      boolean var8;
      if (var9 == null) {
         var8 = true;
      } else {
         var8 = false;
      }

      var2.setDrawSelectionBackground(var8);
      var8 = var6;
      if (var9 == null) {
         var8 = true;
      }

      var2.setChecked(true, var8, var4);
   }

   private void setItemAnimationsEnabled(boolean var1) {
   }

   private void showAttachmentError() {
      if (this.getParentActivity() != null) {
         Toast.makeText(this.getParentActivity(), LocaleController.getString("UnsupportedAttachment", 2131560946), 0).show();
      }
   }

   private void showBottomOverlayProgress(final boolean var1, boolean var2) {
      if ((!var1 || this.bottomOverlayProgress.getTag() == null) && (var1 || this.bottomOverlayProgress.getTag() != null)) {
         AnimatorSet var3 = this.bottomOverlayAnimation;
         Integer var4 = null;
         if (var3 != null) {
            var3.cancel();
            this.bottomOverlayAnimation = null;
         }

         RadialProgressView var10 = this.bottomOverlayProgress;
         if (var1) {
            var4 = 1;
         }

         var10.setTag(var4);
         byte var5 = 4;
         float var6 = 0.0F;
         float var7 = 0.1F;
         if (var2) {
            this.bottomOverlayAnimation = new AnimatorSet();
            if (var1) {
               this.bottomOverlayProgress.setVisibility(0);
               this.bottomOverlayAnimation.playTogether(new Animator[]{ObjectAnimator.ofFloat(this.bottomOverlayChatText, View.SCALE_X, new float[]{0.1F}), ObjectAnimator.ofFloat(this.bottomOverlayChatText, View.SCALE_Y, new float[]{0.1F}), ObjectAnimator.ofFloat(this.bottomOverlayChatText, View.ALPHA, new float[]{0.0F}), ObjectAnimator.ofFloat(this.bottomOverlayChatText2, View.SCALE_X, new float[]{0.1F}), ObjectAnimator.ofFloat(this.bottomOverlayChatText2, View.SCALE_Y, new float[]{0.1F}), ObjectAnimator.ofFloat(this.bottomOverlayChatText2, View.ALPHA, new float[]{0.0F}), ObjectAnimator.ofFloat(this.bottomOverlayProgress, View.SCALE_X, new float[]{1.0F}), ObjectAnimator.ofFloat(this.bottomOverlayProgress, View.SCALE_Y, new float[]{1.0F}), ObjectAnimator.ofFloat(this.bottomOverlayProgress, View.ALPHA, new float[]{1.0F})});
            } else {
               this.bottomOverlayChatText.setVisibility(0);
               this.bottomOverlayAnimation.playTogether(new Animator[]{ObjectAnimator.ofFloat(this.bottomOverlayProgress, View.SCALE_X, new float[]{0.1F}), ObjectAnimator.ofFloat(this.bottomOverlayProgress, View.SCALE_Y, new float[]{0.1F}), ObjectAnimator.ofFloat(this.bottomOverlayProgress, View.ALPHA, new float[]{0.0F}), ObjectAnimator.ofFloat(this.bottomOverlayChatText, View.SCALE_X, new float[]{1.0F}), ObjectAnimator.ofFloat(this.bottomOverlayChatText, View.SCALE_Y, new float[]{1.0F}), ObjectAnimator.ofFloat(this.bottomOverlayChatText, View.ALPHA, new float[]{1.0F}), ObjectAnimator.ofFloat(this.bottomOverlayChatText2, View.SCALE_X, new float[]{1.0F}), ObjectAnimator.ofFloat(this.bottomOverlayChatText2, View.SCALE_Y, new float[]{1.0F}), ObjectAnimator.ofFloat(this.bottomOverlayChatText2, View.ALPHA, new float[]{1.0F})});
            }

            this.bottomOverlayAnimation.addListener(new AnimatorListenerAdapter() {
               public void onAnimationCancel(Animator var1x) {
                  if (ChatActivity.this.bottomOverlayAnimation != null && ChatActivity.this.bottomOverlayAnimation.equals(var1x)) {
                     ChatActivity.this.bottomOverlayAnimation = null;
                  }

               }

               public void onAnimationEnd(Animator var1x) {
                  if (ChatActivity.this.bottomOverlayAnimation != null && ChatActivity.this.bottomOverlayAnimation.equals(var1x)) {
                     if (!var1) {
                        ChatActivity.this.bottomOverlayProgress.setVisibility(4);
                     } else {
                        ChatActivity.this.bottomOverlayChatText.setVisibility(4);
                     }
                  }

               }
            });
            this.bottomOverlayAnimation.setDuration(150L);
            this.bottomOverlayAnimation.start();
         } else {
            RadialProgressView var11 = this.bottomOverlayProgress;
            byte var8;
            if (var1) {
               var8 = 0;
            } else {
               var8 = 4;
            }

            var11.setVisibility(var8);
            var11 = this.bottomOverlayProgress;
            float var9;
            if (var1) {
               var9 = 1.0F;
            } else {
               var9 = 0.1F;
            }

            var11.setScaleX(var9);
            var11 = this.bottomOverlayProgress;
            if (var1) {
               var9 = 1.0F;
            } else {
               var9 = 0.1F;
            }

            var11.setScaleY(var9);
            this.bottomOverlayProgress.setAlpha(1.0F);
            TextView var12 = this.bottomOverlayChatText;
            if (var1) {
               var8 = var5;
            } else {
               var8 = 0;
            }

            var12.setVisibility(var8);
            var12 = this.bottomOverlayChatText;
            if (var1) {
               var9 = 0.1F;
            } else {
               var9 = 1.0F;
            }

            var12.setScaleX(var9);
            var12 = this.bottomOverlayChatText;
            if (var1) {
               var9 = 0.1F;
            } else {
               var9 = 1.0F;
            }

            var12.setScaleY(var9);
            var12 = this.bottomOverlayChatText;
            if (var1) {
               var9 = 0.0F;
            } else {
               var9 = 1.0F;
            }

            var12.setAlpha(var9);
            ChatActivity.UnreadCounterTextView var13 = this.bottomOverlayChatText2;
            if (var1) {
               var9 = 0.1F;
            } else {
               var9 = 1.0F;
            }

            var13.setScaleX(var9);
            var13 = this.bottomOverlayChatText2;
            if (var1) {
               var9 = var7;
            } else {
               var9 = 1.0F;
            }

            var13.setScaleY(var9);
            var13 = this.bottomOverlayChatText2;
            if (var1) {
               var9 = var6;
            } else {
               var9 = 1.0F;
            }

            var13.setAlpha(var9);
         }

      }
   }

   private void showFloatingDateView(boolean var1) {
      if (this.floatingDateView.getTag() == null) {
         AnimatorSet var2 = this.floatingDateAnimation;
         if (var2 != null) {
            var2.cancel();
         }

         this.floatingDateView.setTag(1);
         this.floatingDateAnimation = new AnimatorSet();
         this.floatingDateAnimation.setDuration(150L);
         this.floatingDateAnimation.playTogether(new Animator[]{ObjectAnimator.ofFloat(this.floatingDateView, View.ALPHA, new float[]{1.0F})});
         this.floatingDateAnimation.addListener(new AnimatorListenerAdapter() {
            public void onAnimationEnd(Animator var1) {
               if (var1.equals(ChatActivity.this.floatingDateAnimation)) {
                  ChatActivity.this.floatingDateAnimation = null;
               }

            }
         });
         this.floatingDateAnimation.start();
      }

      if (!var1) {
         this.updateMessagesVisiblePart(false);
         this.hideDateDelay = 1000;
      }

   }

   private void showForwardHint(ChatMessageCell var1) {
      if (!this.scrollingChatListView && this.chatListView != null && this.getParentActivity() != null) {
         View var2 = super.fragmentView;
         if (var2 != null) {
            if (this.forwardHintView == null) {
               SizeNotifierFrameLayout var4 = (SizeNotifierFrameLayout)var2;
               int var3 = var4.indexOfChild(this.chatActivityEnterView);
               if (var3 == -1) {
                  return;
               }

               this.forwardHintView = new HintView(this.getParentActivity(), 1);
               var4.addView(this.forwardHintView, var3 + 1, LayoutHelper.createFrame(-2, -2.0F, 51, 19.0F, 0.0F, 19.0F, 0.0F));
               this.forwardHintView.setAlpha(0.0F);
               this.forwardHintView.setVisibility(4);
            }

            this.forwardHintView.showForMessageCell(var1, true);
         }
      }

   }

   private void showGifHint() {
      SharedPreferences var1 = MessagesController.getGlobalMainSettings();
      if (!var1.getBoolean("gifhint", false)) {
         var1.edit().putBoolean("gifhint", true).commit();
         if (this.getParentActivity() != null) {
            View var4 = super.fragmentView;
            if (var4 != null && this.gifHintTextView == null) {
               if (!this.allowContextBotPanelSecond) {
                  ChatActivityEnterView var6 = this.chatActivityEnterView;
                  if (var6 != null) {
                     var6.setOpenGifsTabFirst();
                  }

                  return;
               }

               SizeNotifierFrameLayout var2 = (SizeNotifierFrameLayout)var4;
               int var3 = var2.indexOfChild(this.chatActivityEnterView);
               if (var3 == -1) {
                  return;
               }

               this.chatActivityEnterView.setOpenGifsTabFirst();
               this.emojiButtonRed = new View(this.getParentActivity());
               this.emojiButtonRed.setBackgroundResource(2131165797);
               var4 = this.emojiButtonRed;
               ++var3;
               var2.addView(var4, var3, LayoutHelper.createFrame(10, 10.0F, 83, 30.0F, 0.0F, 0.0F, 27.0F));
               this.gifHintTextView = new TextView(this.getParentActivity());
               this.gifHintTextView.setBackgroundDrawable(Theme.createRoundRectDrawable(AndroidUtilities.dp(3.0F), Theme.getColor("chat_gifSaveHintBackground")));
               this.gifHintTextView.setTextColor(Theme.getColor("chat_gifSaveHintText"));
               this.gifHintTextView.setTextSize(1, 14.0F);
               this.gifHintTextView.setPadding(AndroidUtilities.dp(8.0F), AndroidUtilities.dp(7.0F), AndroidUtilities.dp(8.0F), AndroidUtilities.dp(7.0F));
               this.gifHintTextView.setText(LocaleController.getString("TapHereGifs", 2131560858));
               this.gifHintTextView.setGravity(16);
               var2.addView(this.gifHintTextView, var3, LayoutHelper.createFrame(-2, -2.0F, 83, 5.0F, 0.0F, 5.0F, 3.0F));
               AnimatorSet var5 = new AnimatorSet();
               var5.playTogether(new Animator[]{ObjectAnimator.ofFloat(this.gifHintTextView, View.ALPHA, new float[]{0.0F, 1.0F}), ObjectAnimator.ofFloat(this.emojiButtonRed, View.ALPHA, new float[]{0.0F, 1.0F})});
               var5.addListener(new AnimatorListenerAdapter() {
                  // $FF: synthetic method
                  public void lambda$onAnimationEnd$0$ChatActivity$42() {
                     if (ChatActivity.this.gifHintTextView != null) {
                        AnimatorSet var1 = new AnimatorSet();
                        var1.playTogether(new Animator[]{ObjectAnimator.ofFloat(ChatActivity.this.gifHintTextView, View.ALPHA, new float[]{0.0F})});
                        var1.addListener(new ChatActivity$42$1(this));
                        var1.setDuration(300L);
                        var1.start();
                     }
                  }

                  public void onAnimationEnd(Animator var1) {
                     AndroidUtilities.runOnUIThread(new _$$Lambda$ChatActivity$42$q_FtZ4mUBdWh5WQN98Sbu_ePbjs(this), 2000L);
                  }
               });
               var5.setDuration(300L);
               var5.start();
            }
         }

      }
   }

   private void showMediaBannedHint() {
      if (this.getParentActivity() != null && this.currentChat != null && super.fragmentView != null) {
         TextView var1 = this.mediaBanTooltip;
         if (var1 == null || var1.getVisibility() != 0) {
            SizeNotifierFrameLayout var3 = (SizeNotifierFrameLayout)super.fragmentView;
            int var2 = var3.indexOfChild(this.chatActivityEnterView);
            if (var2 == -1) {
               return;
            }

            if (this.mediaBanTooltip == null) {
               this.mediaBanTooltip = new CorrectlyMeasuringTextView(this.getParentActivity());
               this.mediaBanTooltip.setBackgroundDrawable(Theme.createRoundRectDrawable(AndroidUtilities.dp(3.0F), Theme.getColor("chat_gifSaveHintBackground")));
               this.mediaBanTooltip.setTextColor(Theme.getColor("chat_gifSaveHintText"));
               this.mediaBanTooltip.setPadding(AndroidUtilities.dp(8.0F), AndroidUtilities.dp(7.0F), AndroidUtilities.dp(8.0F), AndroidUtilities.dp(7.0F));
               this.mediaBanTooltip.setGravity(16);
               this.mediaBanTooltip.setTextSize(1, 14.0F);
               this.mediaBanTooltip.setVisibility(8);
               var3.addView(this.mediaBanTooltip, var2 + 1, LayoutHelper.createFrame(-2, -2.0F, 85, 30.0F, 0.0F, 5.0F, 3.0F));
            }

            if (ChatObject.isActionBannedByDefault(this.currentChat, 7)) {
               this.mediaBanTooltip.setText(LocaleController.getString("GlobalAttachMediaRestricted", 2131559592));
            } else {
               TLRPC.TL_chatBannedRights var4 = this.currentChat.banned_rights;
               if (var4 == null) {
                  return;
               }

               if (AndroidUtilities.isBannedForever(var4)) {
                  this.mediaBanTooltip.setText(LocaleController.getString("AttachMediaRestrictedForever", 2131558725));
               } else {
                  this.mediaBanTooltip.setText(LocaleController.formatString("AttachMediaRestricted", 2131558724, LocaleController.formatDateForBan((long)this.currentChat.banned_rights.until_date)));
               }
            }

            this.mediaBanTooltip.setVisibility(0);
            AnimatorSet var5 = new AnimatorSet();
            var5.playTogether(new Animator[]{ObjectAnimator.ofFloat(this.mediaBanTooltip, View.ALPHA, new float[]{0.0F, 1.0F})});
            var5.addListener(new AnimatorListenerAdapter() {
               // $FF: synthetic method
               public void lambda$onAnimationEnd$0$ChatActivity$41() {
                  if (ChatActivity.this.mediaBanTooltip != null) {
                     AnimatorSet var1 = new AnimatorSet();
                     var1.playTogether(new Animator[]{ObjectAnimator.ofFloat(ChatActivity.this.mediaBanTooltip, View.ALPHA, new float[]{0.0F})});
                     var1.addListener(new ChatActivity$41$1(this));
                     var1.setDuration(300L);
                     var1.start();
                  }
               }

               public void onAnimationEnd(Animator var1) {
                  AndroidUtilities.runOnUIThread(new _$$Lambda$ChatActivity$41$8fiwN1aRW9i7tMSud_cpL2PkIsM(this), 5000L);
               }
            });
            var5.setDuration(300L);
            var5.start();
         }
      }

   }

   private void showMentionDownButton(boolean var1, boolean var2) {
      FrameLayout var3 = this.mentiondownButton;
      if (var3 != null) {
         ObjectAnimator var4;
         if (var1) {
            if (var3.getTag() == null) {
               var4 = this.mentiondownButtonAnimation;
               if (var4 != null) {
                  var4.cancel();
                  this.mentiondownButtonAnimation = null;
               }

               if (var2) {
                  this.mentiondownButton.setVisibility(0);
                  this.mentiondownButton.setTag(1);
                  if (this.pagedownButton.getVisibility() == 0) {
                     this.mentiondownButton.setTranslationY((float)(-AndroidUtilities.dp(72.0F)));
                     this.mentiondownButtonAnimation = ObjectAnimator.ofFloat(this.mentiondownButton, View.ALPHA, new float[]{0.0F, 1.0F}).setDuration(200L);
                  } else {
                     if (this.mentiondownButton.getTranslationY() == 0.0F) {
                        this.mentiondownButton.setTranslationY((float)AndroidUtilities.dp(100.0F));
                     }

                     this.mentiondownButtonAnimation = ObjectAnimator.ofFloat(this.mentiondownButton, View.TRANSLATION_Y, new float[]{0.0F}).setDuration(200L);
                  }

                  this.mentiondownButtonAnimation.start();
               } else {
                  this.mentiondownButton.setVisibility(0);
               }
            }
         } else {
            this.returnToMessageId = 0;
            if (var3.getTag() != null) {
               this.mentiondownButton.setTag((Object)null);
               var4 = this.mentiondownButtonAnimation;
               if (var4 != null) {
                  var4.cancel();
                  this.mentiondownButtonAnimation = null;
               }

               if (var2) {
                  if (this.pagedownButton.getVisibility() == 0) {
                     this.mentiondownButtonAnimation = ObjectAnimator.ofFloat(this.mentiondownButton, View.ALPHA, new float[]{1.0F, 0.0F}).setDuration(200L);
                  } else {
                     this.mentiondownButtonAnimation = ObjectAnimator.ofFloat(this.mentiondownButton, View.TRANSLATION_Y, new float[]{(float)AndroidUtilities.dp(100.0F)}).setDuration(200L);
                  }

                  this.mentiondownButtonAnimation.addListener(new AnimatorListenerAdapter() {
                     public void onAnimationEnd(Animator var1) {
                        ChatActivity.this.mentiondownButtonCounter.setVisibility(4);
                        ChatActivity.this.mentiondownButton.setVisibility(4);
                     }
                  });
                  this.mentiondownButtonAnimation.start();
               } else {
                  this.mentiondownButton.setVisibility(4);
               }
            }
         }

      }
   }

   private void showNoSoundHint() {
      if (!this.scrollingChatListView && !SharedConfig.noSoundHintShowed && this.chatListView != null && this.getParentActivity() != null && super.fragmentView != null) {
         HintView var1 = this.noSoundHintView;
         if (var1 == null || var1.getTag() == null) {
            var1 = this.noSoundHintView;
            int var2 = 0;
            int var3;
            if (var1 == null) {
               SizeNotifierFrameLayout var5 = (SizeNotifierFrameLayout)super.fragmentView;
               var3 = var5.indexOfChild(this.chatActivityEnterView);
               if (var3 == -1) {
                  return;
               }

               this.noSoundHintView = new HintView(this.getParentActivity(), 0);
               var5.addView(this.noSoundHintView, var3 + 1, LayoutHelper.createFrame(-2, -2.0F, 51, 19.0F, 0.0F, 19.0F, 0.0F));
               this.noSoundHintView.setAlpha(0.0F);
               this.noSoundHintView.setVisibility(4);
            }

            for(var3 = this.chatListView.getChildCount(); var2 < var3; ++var2) {
               View var6 = this.chatListView.getChildAt(var2);
               if (var6 instanceof ChatMessageCell) {
                  ChatMessageCell var7 = (ChatMessageCell)var6;
                  MessageObject var4 = var7.getMessageObject();
                  if (var4 != null && var4.isVideo()) {
                     AnimatedFileDrawable var8 = var7.getPhotoImage().getAnimation();
                     if (var8 != null && var8.getCurrentProgressMs() >= 3000 && this.noSoundHintView.showForMessageCell(var7, true)) {
                        SharedConfig.setNoSoundHintShowed(true);
                        break;
                     }
                  }
               }
            }
         }
      }

   }

   private void showPagedownButton(boolean var1, boolean var2) {
      FrameLayout var3 = this.pagedownButton;
      if (var3 != null) {
         AnimatorSet var4;
         if (var1) {
            this.pagedownButtonShowedByScroll = false;
            if (var3.getTag() == null) {
               var4 = this.pagedownButtonAnimation;
               if (var4 != null) {
                  var4.cancel();
                  this.pagedownButtonAnimation = null;
               }

               if (var2) {
                  if (this.pagedownButton.getTranslationY() == 0.0F) {
                     this.pagedownButton.setTranslationY((float)AndroidUtilities.dp(100.0F));
                  }

                  this.pagedownButton.setVisibility(0);
                  this.pagedownButton.setTag(1);
                  this.pagedownButtonAnimation = new AnimatorSet();
                  if (this.mentiondownButton.getVisibility() == 0) {
                     this.pagedownButtonAnimation.playTogether(new Animator[]{ObjectAnimator.ofFloat(this.pagedownButton, View.TRANSLATION_Y, new float[]{0.0F}), ObjectAnimator.ofFloat(this.mentiondownButton, View.TRANSLATION_Y, new float[]{(float)(-AndroidUtilities.dp(72.0F))})});
                  } else {
                     this.pagedownButtonAnimation.playTogether(new Animator[]{ObjectAnimator.ofFloat(this.pagedownButton, View.TRANSLATION_Y, new float[]{0.0F})});
                  }

                  this.pagedownButtonAnimation.setDuration(200L);
                  this.pagedownButtonAnimation.start();
               } else {
                  this.pagedownButton.setVisibility(0);
               }
            }
         } else {
            this.returnToMessageId = 0;
            this.newUnreadMessageCount = 0;
            if (var3.getTag() != null) {
               this.pagedownButton.setTag((Object)null);
               var4 = this.pagedownButtonAnimation;
               if (var4 != null) {
                  var4.cancel();
                  this.pagedownButtonAnimation = null;
               }

               if (var2) {
                  this.pagedownButtonAnimation = new AnimatorSet();
                  if (this.mentiondownButton.getVisibility() == 0) {
                     this.pagedownButtonAnimation.playTogether(new Animator[]{ObjectAnimator.ofFloat(this.pagedownButton, View.TRANSLATION_Y, new float[]{(float)AndroidUtilities.dp(100.0F)}), ObjectAnimator.ofFloat(this.mentiondownButton, View.TRANSLATION_Y, new float[]{0.0F})});
                  } else {
                     this.pagedownButtonAnimation.playTogether(new Animator[]{ObjectAnimator.ofFloat(this.pagedownButton, View.TRANSLATION_Y, new float[]{(float)AndroidUtilities.dp(100.0F)})});
                  }

                  this.pagedownButtonAnimation.setDuration(200L);
                  this.pagedownButtonAnimation.addListener(new AnimatorListenerAdapter() {
                     public void onAnimationEnd(Animator var1) {
                        ChatActivity.this.pagedownButtonCounter.setVisibility(4);
                        ChatActivity.this.pagedownButton.setVisibility(4);
                     }
                  });
                  this.pagedownButtonAnimation.start();
               } else {
                  this.pagedownButton.setVisibility(4);
               }
            }
         }

      }
   }

   private void showVoiceHint(boolean var1, boolean var2) {
      if (this.getParentActivity() != null && super.fragmentView != null && (!var1 || this.voiceHintTextView != null)) {
         int var4;
         if (this.voiceHintTextView == null) {
            SizeNotifierFrameLayout var3 = (SizeNotifierFrameLayout)super.fragmentView;
            var4 = var3.indexOfChild(this.chatActivityEnterView);
            if (var4 == -1) {
               return;
            }

            this.voiceHintTextView = new TextView(this.getParentActivity());
            this.voiceHintTextView.setBackgroundDrawable(Theme.createRoundRectDrawable(AndroidUtilities.dp(3.0F), Theme.getColor("chat_gifSaveHintBackground")));
            this.voiceHintTextView.setTextColor(Theme.getColor("chat_gifSaveHintText"));
            this.voiceHintTextView.setTextSize(1, 14.0F);
            this.voiceHintTextView.setPadding(AndroidUtilities.dp(8.0F), AndroidUtilities.dp(7.0F), AndroidUtilities.dp(8.0F), AndroidUtilities.dp(7.0F));
            this.voiceHintTextView.setGravity(16);
            this.voiceHintTextView.setAlpha(0.0F);
            var3.addView(this.voiceHintTextView, var4 + 1, LayoutHelper.createFrame(-2, -2.0F, 85, 5.0F, 0.0F, 5.0F, 3.0F));
         }

         if (var1) {
            AnimatorSet var9 = this.voiceHintAnimation;
            if (var9 != null) {
               var9.cancel();
               this.voiceHintAnimation = null;
            }

            AndroidUtilities.cancelRunOnUIThread(this.voiceHintHideRunnable);
            this.voiceHintHideRunnable = null;
            if (this.voiceHintTextView.getVisibility() == 0) {
               this.hideVoiceHint();
            }

            return;
         }

         TextView var5 = this.voiceHintTextView;
         String var6;
         if (var2) {
            var4 = 2131559642;
            var6 = "HoldToVideo";
         } else {
            var4 = 2131559641;
            var6 = "HoldToAudio";
         }

         var5.setText(LocaleController.getString(var6, var4));
         Runnable var7 = this.voiceHintHideRunnable;
         if (var7 != null) {
            AnimatorSet var10 = this.voiceHintAnimation;
            if (var10 == null) {
               AndroidUtilities.cancelRunOnUIThread(var7);
               _$$Lambda$ChatActivity$pe75AXzEVBCivaaObrUmNMqELz0 var8 = new _$$Lambda$ChatActivity$pe75AXzEVBCivaaObrUmNMqELz0(this);
               this.voiceHintHideRunnable = var8;
               AndroidUtilities.runOnUIThread(var8, 2000L);
               return;
            }

            var10.cancel();
            this.voiceHintAnimation = null;
         } else if (this.voiceHintAnimation != null) {
            return;
         }

         this.voiceHintTextView.setVisibility(0);
         this.voiceHintAnimation = new AnimatorSet();
         this.voiceHintAnimation.playTogether(new Animator[]{ObjectAnimator.ofFloat(this.voiceHintTextView, View.ALPHA, new float[]{1.0F})});
         this.voiceHintAnimation.addListener(new AnimatorListenerAdapter() {
            // $FF: synthetic method
            public void lambda$onAnimationEnd$0$ChatActivity$40() {
               ChatActivity.this.hideVoiceHint();
            }

            public void onAnimationCancel(Animator var1) {
               if (var1.equals(ChatActivity.this.voiceHintAnimation)) {
                  ChatActivity.this.voiceHintAnimation = null;
               }

            }

            public void onAnimationEnd(Animator var1) {
               if (var1.equals(ChatActivity.this.voiceHintAnimation)) {
                  ChatActivity.this.voiceHintAnimation = null;
                  ChatActivity var3 = ChatActivity.this;
                  _$$Lambda$ChatActivity$40$x1QrRetqBzyWICWSMBETTX_n11w var2 = new _$$Lambda$ChatActivity$40$x1QrRetqBzyWICWSMBETTX_n11w(this);
                  var3.voiceHintHideRunnable = var2;
                  AndroidUtilities.runOnUIThread(var2, 2000L);
               }

            }
         });
         this.voiceHintAnimation.setDuration(300L);
         this.voiceHintAnimation.start();
      }

   }

   private void startEditingMessageObject(MessageObject var1) {
      if (var1 != null && this.getParentActivity() != null) {
         if (this.searchItem != null && super.actionBar.isSearchFieldVisible()) {
            super.actionBar.closeSearchField();
            this.chatActivityEnterView.setFieldFocused();
         }

         this.mentionsAdapter.setNeedBotContext(false);
         this.chatActivityEnterView.setVisibility(0);
         this.showFieldPanelForEdit(true, var1);
         this.updateBottomOverlay();
         this.checkEditTimer();
         this.chatActivityEnterView.setAllowStickersAndGifs(false, false);
         this.updatePinnedMessageView(true);
         this.updateVisibleRows();
         TLRPC.TL_messages_getMessageEditData var2 = new TLRPC.TL_messages_getMessageEditData();
         var2.peer = MessagesController.getInstance(super.currentAccount).getInputPeer((int)this.dialog_id);
         var2.id = var1.getId();
         this.editingMessageObjectReqId = ConnectionsManager.getInstance(super.currentAccount).sendRequest(var2, new _$$Lambda$ChatActivity$MGypkmy8t7OJpHH0z_YM20VQ6qU(this));
      }

   }

   private void startMessageUnselect() {
      Runnable var1 = this.unselectRunnable;
      if (var1 != null) {
         AndroidUtilities.cancelRunOnUIThread(var1);
      }

      this.unselectRunnable = new _$$Lambda$ChatActivity$6ly2o5QUXgQxoffscWywpCCYJVI(this);
      AndroidUtilities.runOnUIThread(this.unselectRunnable, 1000L);
   }

   private void toggleMute(boolean var1) {
      Editor var2;
      StringBuilder var3;
      TLRPC.Dialog var4;
      if (!MessagesController.getInstance(super.currentAccount).isDialogMuted(this.dialog_id)) {
         if (var1) {
            var2 = MessagesController.getNotificationsSettings(super.currentAccount).edit();
            var3 = new StringBuilder();
            var3.append("notify2_");
            var3.append(this.dialog_id);
            var2.putInt(var3.toString(), 2);
            MessagesStorage.getInstance(super.currentAccount).setDialogFlags(this.dialog_id, 1L);
            var2.commit();
            var4 = (TLRPC.Dialog)MessagesController.getInstance(super.currentAccount).dialogs_dict.get(this.dialog_id);
            if (var4 != null) {
               var4.notify_settings = new TLRPC.TL_peerNotifySettings();
               var4.notify_settings.mute_until = Integer.MAX_VALUE;
            }

            NotificationsController.getInstance(super.currentAccount).updateServerNotificationsSettings(this.dialog_id);
            NotificationsController.getInstance(super.currentAccount).removeNotificationsForDialog(this.dialog_id);
         } else {
            this.showDialog(AlertsCreator.createMuteAlert(this.getParentActivity(), this.dialog_id));
         }
      } else {
         var2 = MessagesController.getNotificationsSettings(super.currentAccount).edit();
         var3 = new StringBuilder();
         var3.append("notify2_");
         var3.append(this.dialog_id);
         var2.putInt(var3.toString(), 0);
         MessagesStorage.getInstance(super.currentAccount).setDialogFlags(this.dialog_id, 0L);
         var2.commit();
         var4 = (TLRPC.Dialog)MessagesController.getInstance(super.currentAccount).dialogs_dict.get(this.dialog_id);
         if (var4 != null) {
            var4.notify_settings = new TLRPC.TL_peerNotifySettings();
         }

         NotificationsController.getInstance(super.currentAccount).updateServerNotificationsSettings(this.dialog_id);
      }

   }

   private void updateActionModeTitle() {
      if (super.actionBar.isActionModeShowed()) {
         if (this.selectedMessagesIds[0].size() != 0 || this.selectedMessagesIds[1].size() != 0) {
            this.selectedMessagesCountTextView.setNumber(this.selectedMessagesIds[0].size() + this.selectedMessagesIds[1].size(), true);
         }

      }
   }

   private void updateBotButtons() {
      if (this.headerItem != null) {
         TLRPC.User var1 = this.currentUser;
         if (var1 != null && this.currentEncryptedChat == null && var1.bot) {
            int var2 = this.botInfo.size();
            boolean var3 = false;
            boolean var10;
            if (var2 == 0) {
               var10 = false;
            } else {
               int var4 = 0;
               var3 = false;

               for(var10 = false; var4 < this.botInfo.size(); ++var4) {
                  TLRPC.BotInfo var9 = (TLRPC.BotInfo)this.botInfo.valueAt(var4);
                  int var5 = 0;
                  boolean var6 = var10;

                  boolean var7;
                  while(true) {
                     var10 = var6;
                     var7 = var3;
                     if (var5 >= var9.commands.size()) {
                        break;
                     }

                     TLRPC.TL_botCommand var8 = (TLRPC.TL_botCommand)var9.commands.get(var5);
                     if (var8.command.toLowerCase().equals("help")) {
                        var7 = true;
                        var10 = var6;
                     } else {
                        var10 = var6;
                        var7 = var3;
                        if (var8.command.toLowerCase().equals("settings")) {
                           var10 = true;
                           var7 = var3;
                        }
                     }

                     if (var10 && var7) {
                        break;
                     }

                     ++var5;
                     var6 = var10;
                     var3 = var7;
                  }

                  var3 = var7;
               }
            }

            if (var3) {
               this.headerItem.showSubItem(30);
            } else {
               this.headerItem.hideSubItem(30);
            }

            if (var10) {
               this.headerItem.showSubItem(31);
            } else {
               this.headerItem.hideSubItem(31);
            }
         }
      }

   }

   private void updateBottomOverlay() {
      if (this.bottomOverlayChatText != null) {
         TLRPC.Chat var1 = this.currentChat;
         if (var1 != null) {
            label143: {
               if (ChatObject.isChannel(var1)) {
                  var1 = this.currentChat;
                  if (!(var1 instanceof TLRPC.TL_channelForbidden)) {
                     if (ChatObject.isNotInChat(var1)) {
                        if (MessagesController.getInstance(super.currentAccount).isJoiningChannel(this.currentChat.id)) {
                           this.showBottomOverlayProgress(true, false);
                        } else {
                           this.bottomOverlayChatText.setText(LocaleController.getString("ChannelJoin", 2131558954));
                           this.showBottomOverlayProgress(false, false);
                        }
                     } else {
                        if (!MessagesController.getInstance(super.currentAccount).isDialogMuted(this.dialog_id)) {
                           this.bottomOverlayChatText.setText(LocaleController.getString("ChannelMute", 2131558980));
                        } else {
                           this.bottomOverlayChatText.setText(LocaleController.getString("ChannelUnmute", 2131559007));
                        }

                        boolean var2;
                        if (this.bottomOverlayProgress.getTag() != null) {
                           var2 = true;
                        } else {
                           var2 = false;
                        }

                        this.showBottomOverlayProgress(false, var2);
                     }

                     label137: {
                        if (!ChatObject.isNotInChat(this.currentChat)) {
                           var1 = this.currentChat;
                           if (!var1.megagroup) {
                              if (var1.has_link) {
                                 break label137;
                              }

                              TLRPC.ChatFull var3 = this.chatInfo;
                              if (var3 != null && var3.linked_chat_id != 0) {
                                 break label137;
                              }
                           }
                        }

                        this.bottomOverlayChatText2.setVisibility(8);
                        break label143;
                     }

                     this.bottomOverlayChatText2.setText(LocaleController.getString("ChannelDiscuss", 2131558949));
                     this.bottomOverlayChatText2.setVisibility(0);
                     this.bottomOverlayChatText2.updateCounter();
                     break label143;
                  }
               }

               this.bottomOverlayChatText.setText(LocaleController.getString("DeleteThisGroup", 2131559262));
            }
         } else {
            this.showBottomOverlayProgress(false, false);
            if (this.userBlocked) {
               if (this.currentUser.bot) {
                  this.bottomOverlayChatText.setText(LocaleController.getString("BotUnblock", 2131558861));
               } else {
                  this.bottomOverlayChatText.setText(LocaleController.getString("Unblock", 2131560932));
               }

               if (this.botButtons != null) {
                  this.botButtons = null;
                  if (this.chatActivityEnterView != null) {
                     MessageObject var4 = this.replyingMessageObject;
                     if (var4 != null && this.botReplyButtons == var4) {
                        this.botReplyButtons = null;
                        this.hideFieldPanel(false);
                     }

                     this.chatActivityEnterView.setButtons(this.botButtons, false);
                  }
               }
            } else if (this.botUser != null && this.currentUser.bot) {
               this.bottomOverlayChatText.setText(LocaleController.getString("BotStart", 2131558857));
               this.chatActivityEnterView.hidePopup(false);
               if (this.getParentActivity() != null) {
                  AndroidUtilities.hideKeyboard(this.getParentActivity().getCurrentFocus());
               }
            } else {
               this.bottomOverlayChatText.setText(LocaleController.getString("DeleteThisChat", 2131559261));
            }
         }

         if (super.inPreviewMode) {
            this.searchContainer.setVisibility(4);
            this.bottomOverlayChat.setVisibility(4);
            this.chatActivityEnterView.setFieldFocused(false);
            this.chatActivityEnterView.setVisibility(4);
         } else {
            ActionBarMenuItem var5 = this.searchItem;
            if (var5 != null && var5.getVisibility() == 0) {
               this.searchContainer.setVisibility(0);
               this.bottomOverlayChat.setVisibility(4);
               this.chatActivityEnterView.setFieldFocused(false);
               this.chatActivityEnterView.setVisibility(4);
               if (this.chatActivityEnterView.isTopViewVisible()) {
                  this.topViewWasVisible = 1;
                  this.chatActivityEnterView.hideTopView(false);
               } else {
                  this.topViewWasVisible = 2;
               }
            } else {
               this.searchContainer.setVisibility(4);
               if (this.muteItem != null) {
                  var1 = this.currentChat;
                  if (var1 != null && ChatObject.isNotInChat(var1)) {
                     this.muteItem.setVisibility(8);
                  } else {
                     this.muteItem.setVisibility(0);
                  }
               }

               label159: {
                  var1 = this.currentChat;
                  if (var1 == null || !ChatObject.isNotInChat(var1) && ChatObject.canWriteToChat(this.currentChat)) {
                     TLRPC.User var6 = this.currentUser;
                     if (var6 == null || !UserObject.isDeleted(var6) && !this.userBlocked) {
                        if (this.botUser != null && this.currentUser.bot) {
                           this.bottomOverlayChat.setVisibility(0);
                           this.chatActivityEnterView.setVisibility(4);
                        } else {
                           this.chatActivityEnterView.setVisibility(0);
                           this.bottomOverlayChat.setVisibility(4);
                        }
                        break label159;
                     }
                  }

                  if (this.chatActivityEnterView.isEditingMessage()) {
                     this.chatActivityEnterView.setVisibility(0);
                     this.bottomOverlayChat.setVisibility(4);
                     this.chatActivityEnterView.setFieldFocused();
                     AndroidUtilities.runOnUIThread(new _$$Lambda$ChatActivity$tu3m9cGe9e2Smhr7BU5CtV3WWds(this), 100L);
                  } else {
                     this.bottomOverlayChat.setVisibility(0);
                     this.chatActivityEnterView.setFieldFocused(false);
                     this.chatActivityEnterView.setVisibility(4);
                     this.chatActivityEnterView.closeKeyboard();
                     StickersAdapter var7 = this.stickersAdapter;
                     if (var7 != null) {
                        var7.hide();
                     }
                  }

                  this.attachItem.setVisibility(8);
                  this.editTextItem.setVisibility(8);
                  this.headerItem.setVisibility(0);
               }

               if (this.topViewWasVisible == 1) {
                  this.chatActivityEnterView.showTopView(false, false);
                  this.topViewWasVisible = 0;
               }
            }
         }

         this.checkRaiseSensors();
      }
   }

   private void updateContactStatus() {
      ActionBarMenuSubItem var1 = this.addContactItem;
      if (var1 != null) {
         if (this.currentUser == null) {
            var1.setVisibility(8);
         } else {
            TLRPC.User var2 = MessagesController.getInstance(super.currentAccount).getUser(this.currentUser.id);
            if (var2 != null) {
               this.currentUser = var2;
            }

            TLRPC.EncryptedChat var3 = this.currentEncryptedChat;
            if ((var3 == null || var3 instanceof TLRPC.TL_encryptedChat) && !MessagesController.isSupportUser(this.currentUser) && !UserObject.isDeleted(this.currentUser) && !ContactsController.getInstance(super.currentAccount).isLoadingContacts() && (TextUtils.isEmpty(this.currentUser.phone) || ContactsController.getInstance(super.currentAccount).contactsDict.get(this.currentUser.id) == null || ContactsController.getInstance(super.currentAccount).contactsDict.size() == 0 && ContactsController.getInstance(super.currentAccount).isLoadingContacts())) {
               this.addContactItem.setVisibility(0);
               if (!TextUtils.isEmpty(this.currentUser.phone)) {
                  this.addContactItem.setText(LocaleController.getString("AddToContacts", 2131558589));
                  this.reportSpamButton.setPadding(AndroidUtilities.dp(4.0F), 0, AndroidUtilities.dp(50.0F), 0);
                  this.addToContactsButton.setVisibility(0);
                  this.reportSpamContainer.setLayoutParams(LayoutHelper.createLinear(-1, -1, 0.5F, 51, 0, 0, 0, AndroidUtilities.dp(1.0F)));
               } else {
                  this.addContactItem.setText(LocaleController.getString("ShareMyContactInfo", 2131560751));
                  this.addToContactsButton.setVisibility(8);
                  this.reportSpamButton.setPadding(AndroidUtilities.dp(50.0F), 0, AndroidUtilities.dp(50.0F), 0);
                  this.reportSpamContainer.setLayoutParams(LayoutHelper.createLinear(-1, -1, 1.0F, 51, 0, 0, 0, AndroidUtilities.dp(1.0F)));
               }
            } else {
               this.addContactItem.setVisibility(8);
            }
         }

         this.checkListViewPaddings();
      }
   }

   private void updateInformationForScreenshotDetector() {
      if (this.currentUser != null) {
         MessageObject var9;
         if (this.currentEncryptedChat != null) {
            ArrayList var1 = new ArrayList();
            RecyclerListView var2 = this.chatListView;
            if (var2 != null) {
               int var3 = var2.getChildCount();

               for(int var4 = 0; var4 < var3; ++var4) {
                  View var5 = this.chatListView.getChildAt(var4);
                  var9 = null;
                  if (var5 instanceof ChatMessageCell) {
                     var9 = ((ChatMessageCell)var5).getMessageObject();
                  }

                  if (var9 != null && var9.getId() < 0) {
                     long var6 = var9.messageOwner.random_id;
                     if (var6 != 0L) {
                        var1.add(var6);
                     }
                  }
               }
            }

            MediaController.getInstance().setLastVisibleMessageIds(super.currentAccount, this.chatEnterTime, this.chatLeaveTime, this.currentUser, this.currentEncryptedChat, var1, 0);
         } else {
            SecretMediaViewer var8 = SecretMediaViewer.getInstance();
            var9 = var8.getCurrentMessageObject();
            if (var9 != null && !var9.isOut()) {
               MediaController.getInstance().setLastVisibleMessageIds(super.currentAccount, var8.getOpenTime(), var8.getCloseTime(), this.currentUser, (TLRPC.EncryptedChat)null, (ArrayList)null, var9.getId());
            }
         }

      }
   }

   private void updateMessageListAccessibilityVisibility() {
      if (this.currentEncryptedChat == null) {
         if (VERSION.SDK_INT >= 19) {
            RecyclerListView var1;
            byte var3;
            label22: {
               var1 = this.chatListView;
               if (this.mentionContainer.getVisibility() != 0) {
                  ActionBarPopupWindow var2 = this.scrimPopupWindow;
                  if (var2 == null || !var2.isShowing()) {
                     var3 = 0;
                     break label22;
                  }
               }

               var3 = 4;
            }

            var1.setImportantForAccessibility(var3);
         }

      }
   }

   private void updateMessagesVisiblePart(boolean var1) {
      RecyclerListView var2 = this.chatListView;
      if (var2 != null) {
         int var3 = var2.getChildCount();
         int var4 = this.chatListView.getMeasuredHeight();
         TLRPC.EncryptedChat var29 = this.currentEncryptedChat;
         this.pollsToCheck.clear();
         int var5 = Integer.MAX_VALUE;
         int var6 = 0;
         boolean var7 = false;
         View var30 = null;
         View var8 = null;
         View var9 = null;
         int var10 = Integer.MAX_VALUE;
         int var11 = Integer.MIN_VALUE;
         int var12 = Integer.MIN_VALUE;

         int var13;
         boolean var15;
         int var18;
         int var20;
         float var24;
         int var26;
         int var35;
         for(var13 = Integer.MAX_VALUE; var6 < var3; var13 = var26) {
            View var14 = this.chatListView.getChildAt(var6);
            var15 = var14 instanceof ChatMessageCell;
            int var17;
            boolean var19;
            MessageObject var21;
            if (var15) {
               ChatMessageCell var16 = (ChatMessageCell)var14;
               var17 = var16.getTop();
               var16.getBottom();
               if (var17 >= 0) {
                  var18 = 0;
               } else {
                  var18 = -var17;
               }

               int var42 = var16.getMeasuredHeight();
               var20 = var42;
               if (var42 > var4) {
                  var20 = var18 + var4;
               }

               var16.setVisiblePart(var18, var20 - var18);
               var21 = var16.getMessageObject();
               if (this.videoPlayerContainer != null) {
                  boolean var41;
                  if (!var21.isVideo() && !var21.isRoundVideo()) {
                     var41 = false;
                  } else {
                     var41 = true;
                  }

                  if (var41 && MediaController.getInstance().isPlayingMessage(var21)) {
                     ImageReceiver var22 = var16.getPhotoImage();
                     if (var41 && var22.getImageY2() + var17 < 0) {
                        var7 = false;
                     } else {
                        this.videoPlayerContainer.setTranslationX((float)var22.getImageX() + var16.getX());
                        FrameLayout var39 = this.videoPlayerContainer;
                        float var23 = (float)(super.fragmentView.getPaddingTop() + var17 + var22.getImageY() - this.chatListViewClipTop);
                        var24 = this.chatListView.getTranslationY();
                        if (super.inPreviewMode) {
                           var35 = AndroidUtilities.statusBarHeight;
                        } else {
                           var35 = 0;
                        }

                        var39.setTranslationY(var23 + var24 + (float)var35);
                        super.fragmentView.invalidate();
                        this.videoPlayerContainer.invalidate();
                        var7 = true;
                     }
                  }
               }

               var19 = var7;
            } else if (var14 instanceof ChatActionCell) {
               var21 = ((ChatActionCell)var14).getMessageObject();
               var19 = var7;
            } else {
               var21 = null;
               var19 = var7;
            }

            int var25 = var11;
            var17 = var12;
            var26 = var13;
            if (var21 != null) {
               var20 = var11;
               var18 = var12;
               var35 = var13;
               if (!var21.isOut()) {
                  var20 = var11;
                  var18 = var12;
                  var35 = var13;
                  if (var21.isUnread()) {
                     var20 = var21.getId();
                     var18 = var12;
                     if (var20 > 0) {
                        var18 = Math.max(var12, var21.getId());
                     }

                     var35 = var13;
                     if (var20 < 0) {
                        var35 = Math.min(var13, var21.getId());
                     }

                     var20 = Math.max(var11, var21.messageOwner.date);
                  }
               }

               var25 = var20;
               var17 = var18;
               var26 = var35;
               if (var21.type == 17) {
                  this.pollsToCheck.add(var21);
                  var26 = var35;
                  var17 = var18;
                  var25 = var20;
               }
            }

            label283: {
               View var40;
               if (var14.getBottom() <= this.chatListView.getPaddingTop() + AndroidUtilities.dp(1.0F) + this.chatListViewClipTop) {
                  var40 = var9;
               } else {
                  var12 = var14.getBottom();
                  View var43 = var30;
                  var13 = var10;
                  if (var12 < var10) {
                     if (var15 || var14 instanceof ChatActionCell) {
                        var30 = var14;
                     }

                     var13 = var12;
                     var9 = var14;
                     var43 = var30;
                  }

                  var30 = var43;
                  var10 = var13;
                  var40 = var9;
                  if (var14 instanceof ChatActionCell) {
                     var30 = var43;
                     var10 = var13;
                     var40 = var9;
                     if (var21.isDateObject) {
                        if (var14.getAlpha() != 1.0F) {
                           var14.setAlpha(1.0F);
                        }

                        var30 = var43;
                        var10 = var13;
                        var40 = var9;
                        if (var12 < var5) {
                           var8 = var14;
                           var5 = var12;
                           var30 = var43;
                           break label283;
                        }
                     }
                  }
               }

               var9 = var40;
               var13 = var10;
            }

            ++var6;
            var7 = var19;
            var10 = var13;
            var11 = var25;
            var12 = var17;
         }

         MessagesController.getInstance(super.currentAccount).addToPollsQueue(this.dialog_id, this.pollsToCheck);
         if (this.videoPlayerContainer != null) {
            if (!var7) {
               MessageObject var44 = MediaController.getInstance().getPlayingMessageObject();
               if (var44 != null) {
                  if (this.checkTextureViewPosition && var44.isVideo()) {
                     MediaController.getInstance().cleanupPlayer(true, true);
                  } else {
                     this.videoPlayerContainer.setTranslationY((float)(-AndroidUtilities.roundMessageSize - 100));
                     super.fragmentView.invalidate();
                     if ((var44.isRoundVideo() || var44.isVideo()) && var44.eventId == 0L && this.checkTextureViewPosition) {
                        MediaController.getInstance().setCurrentVideoVisible(false);
                     }
                  }
               }
            } else {
               MediaController.getInstance().setCurrentVideoVisible(true);
            }
         }

         MessageObject var31;
         if (var30 != null) {
            if (var30 instanceof ChatMessageCell) {
               var31 = ((ChatMessageCell)var30).getMessageObject();
            } else {
               var31 = ((ChatActionCell)var30).getMessageObject();
            }

            this.floatingDateView.setCustomDate(var31.messageOwner.date);
         }

         this.currentFloatingDateOnScreen = false;
         if (!(var9 instanceof ChatMessageCell) && !(var9 instanceof ChatActionCell)) {
            var15 = true;
         } else {
            var15 = false;
         }

         this.currentFloatingTopIsNotMessage = var15;
         if (var8 != null) {
            if (var8.getTop() - this.chatListViewClipTop <= this.chatListView.getPaddingTop() && !this.currentFloatingTopIsNotMessage) {
               if (var8.getAlpha() != 0.0F) {
                  var8.setAlpha(0.0F);
               }

               AnimatorSet var32 = this.floatingDateAnimation;
               if (var32 != null) {
                  var32.cancel();
                  this.floatingDateAnimation = null;
               }

               if (this.floatingDateView.getTag() == null) {
                  this.floatingDateView.setTag(1);
               }

               if (this.floatingDateView.getAlpha() != 1.0F) {
                  this.floatingDateView.setAlpha(1.0F);
               }

               this.currentFloatingDateOnScreen = true;
            } else {
               if (var8.getAlpha() != 1.0F) {
                  var8.setAlpha(1.0F);
               }

               this.hideFloatingDateView(this.currentFloatingTopIsNotMessage ^ true);
            }

            var24 = (float)(var8.getBottom() - this.chatListView.getPaddingTop() - this.chatListViewClipTop);
            if (var24 > (float)this.floatingDateView.getMeasuredHeight() && var24 < (float)(this.floatingDateView.getMeasuredHeight() * 2)) {
               ChatActionCell var33 = this.floatingDateView;
               var33.setTranslationY((float)(-var33.getMeasuredHeight() * 2) + var24);
            } else {
               this.floatingDateView.setTranslationY(0.0F);
            }
         } else {
            this.hideFloatingDateView(true);
            this.floatingDateView.setTranslationY(0.0F);
         }

         if (!this.firstLoading && !this.paused && !super.inPreviewMode) {
            long var27;
            if (var12 == Integer.MIN_VALUE && var13 == Integer.MAX_VALUE) {
               if (!this.firstUnreadSent && this.chatLayoutManager.findFirstVisibleItemPosition() == 0) {
                  this.newUnreadMessageCount = 0;
                  if (var1) {
                     AndroidUtilities.runOnUIThread(new _$$Lambda$ChatActivity$NFR4cP3nNe6c_Xs7PotAXGjVKSQ(this));
                  } else {
                     this.inlineUpdate2();
                  }

                  MessagesController var38 = MessagesController.getInstance(super.currentAccount);
                  var27 = this.dialog_id;
                  int[] var36 = this.minMessageId;
                  var38.markDialogAsRead(var27, var36[0], var36[0], this.maxDate[0], false, 0, true);
                  this.firstUnreadSent = true;
               }
            } else {
               var18 = 0;

               for(var35 = 0; var18 < this.messages.size(); ++var18) {
                  var31 = (MessageObject)this.messages.get(var18);
                  var20 = var31.getId();
                  var10 = var35;
                  if (var12 != Integer.MIN_VALUE) {
                     var10 = var35;
                     if (var20 > 0) {
                        var10 = var35;
                        if (var20 <= var12) {
                           var10 = var35;
                           if (var31.isUnread()) {
                              var31.setIsRead();
                              var10 = var35 + 1;
                           }
                        }
                     }
                  }

                  var35 = var10;
                  if (var13 != Integer.MAX_VALUE) {
                     var35 = var10;
                     if (var20 < 0) {
                        var35 = var10;
                        if (var20 >= var13) {
                           var35 = var10;
                           if (var31.isUnread()) {
                              var31.setIsRead();
                              var35 = var10 + 1;
                           }
                        }
                     }
                  }
               }

               if ((!this.forwardEndReached[0] || var12 != this.minMessageId[0]) && var13 != this.minMessageId[0]) {
                  this.newUnreadMessageCount -= var35;
                  if (this.newUnreadMessageCount < 0) {
                     this.newUnreadMessageCount = 0;
                  }
               } else {
                  this.newUnreadMessageCount = 0;
               }

               if (var1) {
                  AndroidUtilities.runOnUIThread(new _$$Lambda$ChatActivity$r8G5ryI3TCtj8E_vwPu9tBJgvUE(this));
               } else {
                  this.inlineUpdate1();
               }

               MessagesController var34 = MessagesController.getInstance(super.currentAccount);
               var27 = this.dialog_id;
               int[] var37 = this.minMessageId;
               if (var12 != var37[0] && var13 != var37[0]) {
                  var1 = false;
               } else {
                  var1 = true;
               }

               var34.markDialogAsRead(var27, var12, var13, var11, false, var35, var1);
               this.firstUnreadSent = true;
            }
         }

      }
   }

   private void updatePinnedMessageView(boolean var1) {
      if (this.pinnedMessageView != null) {
         TLRPC.ChatFull var2 = this.chatInfo;
         MessageObject var3;
         int var4;
         MessageObject var12;
         if (var2 != null) {
            var3 = this.pinnedMessageObject;
            if (var3 != null && var2.pinned_msg_id != var3.getId()) {
               this.pinnedMessageObject = null;
            }

            var4 = this.chatInfo.pinned_msg_id;
            if (var4 != 0 && this.pinnedMessageObject == null) {
               this.pinnedMessageObject = (MessageObject)this.messagesDict[0].get(var4);
            }

            var4 = this.chatInfo.pinned_msg_id;
         } else {
            TLRPC.UserFull var15 = this.userInfo;
            if (var15 != null) {
               var12 = this.pinnedMessageObject;
               if (var12 != null && var15.pinned_msg_id != var12.getId()) {
                  this.pinnedMessageObject = null;
               }

               var4 = this.userInfo.pinned_msg_id;
               if (var4 != 0 && this.pinnedMessageObject == null) {
                  this.pinnedMessageObject = (MessageObject)this.messagesDict[0].get(var4);
               }

               var4 = this.userInfo.pinned_msg_id;
            } else {
               var4 = 0;
            }
         }

         label166: {
            SharedPreferences var16 = MessagesController.getNotificationsSettings(super.currentAccount);
            if ((this.chatInfo != null || this.userInfo != null) && var4 != 0) {
               StringBuilder var13 = new StringBuilder();
               var13.append("pin_");
               var13.append(this.dialog_id);
               if (var4 != var16.getInt(var13.toString(), 0)) {
                  ActionBar var17 = super.actionBar;
                  if (var17 == null || !var17.isActionModeShowed() && !super.actionBar.isSearchFieldVisible()) {
                     int var9;
                     if (this.pinnedMessageObject != null) {
                        if (this.pinnedMessageView.getTag() != null) {
                           this.pinnedMessageView.setTag((Object)null);
                           AnimatorSet var18 = this.pinnedMessageViewAnimator;
                           if (var18 != null) {
                              var18.cancel();
                              this.pinnedMessageViewAnimator = null;
                           }

                           if (var1) {
                              this.pinnedMessageView.setVisibility(0);
                              this.pinnedMessageViewAnimator = new AnimatorSet();
                              this.pinnedMessageViewAnimator.playTogether(new Animator[]{ObjectAnimator.ofFloat(this.pinnedMessageView, View.TRANSLATION_Y, new float[]{0.0F})});
                              this.pinnedMessageViewAnimator.setDuration(200L);
                              this.pinnedMessageViewAnimator.addListener(new AnimatorListenerAdapter() {
                                 public void onAnimationCancel(Animator var1) {
                                    if (ChatActivity.this.pinnedMessageViewAnimator != null && ChatActivity.this.pinnedMessageViewAnimator.equals(var1)) {
                                       ChatActivity.this.pinnedMessageViewAnimator = null;
                                    }

                                 }

                                 public void onAnimationEnd(Animator var1) {
                                    if (ChatActivity.this.pinnedMessageViewAnimator != null && ChatActivity.this.pinnedMessageViewAnimator.equals(var1)) {
                                       ChatActivity.this.pinnedMessageViewAnimator = null;
                                    }

                                 }
                              });
                              this.pinnedMessageViewAnimator.start();
                           } else {
                              this.pinnedMessageView.setTranslationY(0.0F);
                              this.pinnedMessageView.setVisibility(0);
                           }
                        }

                        LayoutParams var5 = (LayoutParams)this.pinnedMessageNameTextView.getLayoutParams();
                        LayoutParams var6 = (LayoutParams)this.pinnedMessageTextView.getLayoutParams();
                        TLRPC.PhotoSize var14 = FileLoader.getClosestPhotoSizeWithSize(this.pinnedMessageObject.photoThumbs2, AndroidUtilities.dp(320.0F));
                        TLRPC.PhotoSize var20 = FileLoader.getClosestPhotoSizeWithSize(this.pinnedMessageObject.photoThumbs2, AndroidUtilities.dp(40.0F));
                        MessageObject var7 = this.pinnedMessageObject;
                        TLObject var8 = var7.photoThumbsObject2;
                        byte var22;
                        if (var14 == null) {
                           if (var7.mediaExists) {
                              var20 = FileLoader.getClosestPhotoSizeWithSize(var7.photoThumbs, AndroidUtilities.getPhotoSize());
                              if (var20 != null) {
                                 var9 = var20.size;
                              } else {
                                 var9 = 0;
                              }

                              var22 = 0;
                           } else {
                              var20 = FileLoader.getClosestPhotoSizeWithSize(var7.photoThumbs, AndroidUtilities.dp(320.0F));
                              var9 = 0;
                              var22 = 1;
                           }

                           TLRPC.PhotoSize var26 = FileLoader.getClosestPhotoSizeWithSize(this.pinnedMessageObject.photoThumbs, AndroidUtilities.dp(40.0F));
                           TLObject var24 = this.pinnedMessageObject.photoThumbsObject;
                           var14 = var20;
                           var20 = var26;
                           var8 = var24;
                        } else {
                           var22 = 1;
                           var9 = 0;
                        }

                        TLRPC.PhotoSize var25 = var20;
                        if (var14 == var20) {
                           var25 = null;
                        }

                        label133: {
                           if (var14 != null && !(var14 instanceof TLRPC.TL_photoSizeEmpty) && !(var14.location instanceof TLRPC.TL_fileLocationUnavailable)) {
                              var3 = this.pinnedMessageObject;
                              if (var3.type != 13) {
                                 if (var3.isRoundVideo()) {
                                    this.pinnedMessageImageView.setRoundRadius(AndroidUtilities.dp(16.0F));
                                 } else {
                                    this.pinnedMessageImageView.setRoundRadius(0);
                                 }

                                 this.pinnedImageSize = var9;
                                 this.pinnedImageCacheType = var22;
                                 this.pinnedImageLocation = var14;
                                 this.pinnedImageThumbLocation = var25;
                                 this.pinnedImageLocationObject = var8;
                                 this.pinnedMessageImageView.setImage(ImageLocation.getForObject(this.pinnedImageLocation, var8), "50_50", ImageLocation.getForObject(var25, var8), "50_50_b", (String)null, var9, var22, this.pinnedMessageObject);
                                 this.pinnedMessageImageView.setVisibility(0);
                                 var4 = AndroidUtilities.dp(55.0F);
                                 var6.leftMargin = var4;
                                 var5.leftMargin = var4;
                                 break label133;
                              }
                           }

                           this.pinnedMessageImageView.setImageBitmap((Bitmap)null);
                           this.pinnedImageLocation = null;
                           this.pinnedImageLocationObject = null;
                           this.pinnedMessageImageView.setVisibility(4);
                           var4 = AndroidUtilities.dp(18.0F);
                           var6.leftMargin = var4;
                           var5.leftMargin = var4;
                        }

                        this.pinnedMessageNameTextView.setLayoutParams(var5);
                        this.pinnedMessageTextView.setLayoutParams(var6);
                        if (this.pinnedMessageObject.type == 17) {
                           this.pinnedMessageNameTextView.setText(LocaleController.getString("PinnedPoll", 2131560453));
                        } else {
                           this.pinnedMessageNameTextView.setText(LocaleController.getString("PinnedMessage", 2131560451));
                        }

                        var12 = this.pinnedMessageObject;
                        var4 = var12.type;
                        if (var4 == 14) {
                           this.pinnedMessageTextView.setText(String.format("%s - %s", var12.getMusicAuthor(), this.pinnedMessageObject.getMusicTitle()));
                        } else {
                           String var19;
                           String var23;
                           if (var4 == 17) {
                              var19 = ((TLRPC.TL_messageMediaPoll)var12.messageOwner.media).poll.question;
                              var23 = var19;
                              if (var19.length() > 150) {
                                 var23 = var19.substring(0, 150);
                              }

                              var23 = var23.replace('\n', ' ');
                              this.pinnedMessageTextView.setText(var23);
                           } else {
                              TLRPC.MessageMedia var27 = var12.messageOwner.media;
                              SimpleTextView var21;
                              if (var27 instanceof TLRPC.TL_messageMediaGame) {
                                 var21 = this.pinnedMessageTextView;
                                 var21.setText(Emoji.replaceEmoji(var27.game.title, var21.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14.0F), false));
                              } else if (!TextUtils.isEmpty(var12.caption)) {
                                 var19 = this.pinnedMessageObject.caption.toString();
                                 var23 = var19;
                                 if (var19.length() > 150) {
                                    var23 = var19.substring(0, 150);
                                 }

                                 var19 = var23.replace('\n', ' ');
                                 SimpleTextView var28 = this.pinnedMessageTextView;
                                 var28.setText(Emoji.replaceEmoji(var19, var28.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14.0F), false));
                              } else {
                                 CharSequence var29 = this.pinnedMessageObject.messageText;
                                 if (var29 != null) {
                                    var19 = var29.toString();
                                    var23 = var19;
                                    if (var19.length() > 150) {
                                       var23 = var19.substring(0, 150);
                                    }

                                    var23 = var23.replace('\n', ' ');
                                    var21 = this.pinnedMessageTextView;
                                    var21.setText(Emoji.replaceEmoji(var23, var21.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14.0F), false));
                                 }
                              }
                           }
                        }
                     } else {
                        this.pinnedImageLocation = null;
                        this.pinnedImageLocationObject = null;
                        this.hidePinnedMessageView(var1);
                        if (this.loadingPinnedMessage != var4) {
                           this.loadingPinnedMessage = var4;
                           DataQuery var30 = DataQuery.getInstance(super.currentAccount);
                           long var10 = this.dialog_id;
                           if (ChatObject.isChannel(this.currentChat)) {
                              var9 = this.currentChat.id;
                           } else {
                              var9 = 0;
                           }

                           var30.loadPinnedMessage(var10, var9, var4, true);
                        }
                     }
                     break label166;
                  }
               }
            }

            this.hidePinnedMessageView(var1);
         }

         this.checkListViewPaddings();
      }
   }

   private void updateSearchButtons(int var1, int var2, int var3) {
      ImageView var4 = this.searchUpButton;
      if (var4 != null) {
         boolean var5;
         if ((var1 & 1) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         var4.setEnabled(var5);
         var4 = this.searchDownButton;
         if ((var1 & 2) != 0) {
            var5 = true;
         } else {
            var5 = false;
         }

         var4.setEnabled(var5);
         var4 = this.searchUpButton;
         var5 = var4.isEnabled();
         float var6 = 1.0F;
         float var7;
         if (var5) {
            var7 = 1.0F;
         } else {
            var7 = 0.5F;
         }

         var4.setAlpha(var7);
         var4 = this.searchDownButton;
         if (var4.isEnabled()) {
            var7 = var6;
         } else {
            var7 = 0.5F;
         }

         var4.setAlpha(var7);
         if (var3 < 0) {
            this.searchCountText.setText("");
         } else if (var3 == 0) {
            this.searchCountText.setText(LocaleController.getString("NoResult", 2131559943));
         } else {
            this.searchCountText.setText(LocaleController.formatString("Of", 2131560099, var2 + 1, var3));
         }
      }

   }

   private void updateSecretStatus() {
      if (this.bottomOverlay != null) {
         TLRPC.Chat var1 = this.currentChat;
         boolean var2 = true;
         boolean var3 = true;
         if (var1 != null && !ChatObject.canSendMessages(var1) && (!ChatObject.isChannel(this.currentChat) || this.currentChat.megagroup)) {
            TLRPC.TL_chatBannedRights var8 = this.currentChat.default_banned_rights;
            if (var8 != null && var8.send_messages) {
               this.bottomOverlayText.setText(LocaleController.getString("GlobalSendMessageRestricted", 2131559595));
            } else if (AndroidUtilities.isBannedForever(this.currentChat.banned_rights)) {
               this.bottomOverlayText.setText(LocaleController.getString("SendMessageRestrictedForever", 2131560702));
            } else {
               this.bottomOverlayText.setText(LocaleController.formatString("SendMessageRestricted", 2131560701, LocaleController.formatDateForBan((long)this.currentChat.banned_rights.until_date)));
            }

            this.bottomOverlay.setVisibility(0);
            AnimatorSet var9 = this.mentionListAnimation;
            if (var9 != null) {
               var9.cancel();
               this.mentionListAnimation = null;
            }

            this.mentionContainer.setVisibility(8);
            this.mentionContainer.setTag((Object)null);
            this.updateMessageListAccessibilityVisibility();
            StickersAdapter var10 = this.stickersAdapter;
            var3 = var2;
            if (var10 != null) {
               var10.hide();
               var3 = var2;
            }
         } else {
            TLRPC.EncryptedChat var5 = this.currentEncryptedChat;
            if (var5 == null || this.bigEmptyView == null) {
               this.bottomOverlay.setVisibility(4);
               if (this.stickersAdapter != null) {
                  ChatActivityEnterView var7 = this.chatActivityEnterView;
                  if (var7 != null && var7.hasText()) {
                     this.stickersAdapter.loadStikersForEmoji(this.chatActivityEnterView.getFieldText(), false);
                  }
               }

               return;
            }

            if (var5 instanceof TLRPC.TL_encryptedChatRequested) {
               this.bottomOverlayText.setText(LocaleController.getString("EncryptionProcessing", 2131559363));
               this.bottomOverlay.setVisibility(0);
            } else if (var5 instanceof TLRPC.TL_encryptedChatWaiting) {
               TextView var4 = this.bottomOverlayText;
               StringBuilder var6 = new StringBuilder();
               var6.append("<b>");
               var6.append(this.currentUser.first_name);
               var6.append("</b>");
               var4.setText(AndroidUtilities.replaceTags(LocaleController.formatString("AwaitingEncryption", 2131558808, var6.toString())));
               this.bottomOverlay.setVisibility(0);
            } else if (var5 instanceof TLRPC.TL_encryptedChatDiscarded) {
               this.bottomOverlayText.setText(LocaleController.getString("EncryptionRejected", 2131559364));
               this.bottomOverlay.setVisibility(0);
               this.chatActivityEnterView.setFieldText("");
               DataQuery.getInstance(super.currentAccount).cleanDraft(this.dialog_id, false);
            } else {
               if (var5 instanceof TLRPC.TL_encryptedChat) {
                  this.bottomOverlay.setVisibility(4);
               }

               var3 = false;
            }

            this.checkRaiseSensors();
            this.checkActionBarMenu();
         }

         if (super.inPreviewMode) {
            this.bottomOverlay.setVisibility(4);
         }

         if (var3) {
            this.chatActivityEnterView.hidePopup(false);
            if (this.getParentActivity() != null) {
               AndroidUtilities.hideKeyboard(this.getParentActivity().getCurrentFocus());
            }
         }

      }
   }

   private void updateSpamView() {
      if (this.reportSpamView == null) {
         if (BuildVars.LOGS_ENABLED) {
            FileLog.d("no spam view found");
         }

      } else {
         boolean var3;
         label61: {
            SharedPreferences var1 = MessagesController.getNotificationsSettings(super.currentAccount);
            TLRPC.EncryptedChat var2 = this.currentEncryptedChat;
            StringBuilder var5;
            if (var2 != null) {
               if (var2.admin_id != UserConfig.getInstance(super.currentAccount).getClientUserId() && !ContactsController.getInstance(super.currentAccount).isLoadingContacts() && ContactsController.getInstance(super.currentAccount).contactsDict.get(this.currentUser.id) == null) {
                  var3 = true;
               } else {
                  var3 = false;
               }

               if (!var3) {
                  break label61;
               }

               var5 = new StringBuilder();
               var5.append("spam3_");
               var5.append(this.dialog_id);
               if (var1.getInt(var5.toString(), 0) != 1) {
                  break label61;
               }
            } else {
               var5 = new StringBuilder();
               var5.append("spam3_");
               var5.append(this.dialog_id);
               if (var1.getInt(var5.toString(), 0) == 2) {
                  var3 = true;
                  break label61;
               }
            }

            var3 = false;
         }

         AnimatorSet var4;
         if (!var3) {
            if (this.reportSpamView.getTag() == null) {
               if (BuildVars.LOGS_ENABLED) {
                  FileLog.d("hide spam button");
               }

               this.reportSpamView.setTag(1);
               var4 = this.reportSpamViewAnimator;
               if (var4 != null) {
                  var4.cancel();
               }

               this.reportSpamViewAnimator = new AnimatorSet();
               this.reportSpamViewAnimator.playTogether(new Animator[]{ObjectAnimator.ofFloat(this.reportSpamView, View.TRANSLATION_Y, new float[]{(float)(-AndroidUtilities.dp(50.0F))})});
               this.reportSpamViewAnimator.setDuration(200L);
               this.reportSpamViewAnimator.addListener(new AnimatorListenerAdapter() {
                  public void onAnimationCancel(Animator var1) {
                     if (ChatActivity.this.reportSpamViewAnimator != null && ChatActivity.this.reportSpamViewAnimator.equals(var1)) {
                        ChatActivity.this.reportSpamViewAnimator = null;
                     }

                  }

                  public void onAnimationEnd(Animator var1) {
                     if (ChatActivity.this.reportSpamViewAnimator != null && ChatActivity.this.reportSpamViewAnimator.equals(var1)) {
                        ChatActivity.this.reportSpamView.setVisibility(8);
                        ChatActivity.this.reportSpamViewAnimator = null;
                     }

                  }
               });
               this.reportSpamViewAnimator.start();
            }
         } else if (this.reportSpamView.getTag() != null) {
            if (BuildVars.LOGS_ENABLED) {
               FileLog.d("show spam button");
            }

            this.reportSpamView.setTag((Object)null);
            this.reportSpamView.setVisibility(0);
            var4 = this.reportSpamViewAnimator;
            if (var4 != null) {
               var4.cancel();
            }

            this.reportSpamViewAnimator = new AnimatorSet();
            this.reportSpamViewAnimator.playTogether(new Animator[]{ObjectAnimator.ofFloat(this.reportSpamView, View.TRANSLATION_Y, new float[]{0.0F})});
            this.reportSpamViewAnimator.setDuration(200L);
            this.reportSpamViewAnimator.addListener(new AnimatorListenerAdapter() {
               public void onAnimationCancel(Animator var1) {
                  if (ChatActivity.this.reportSpamViewAnimator != null && ChatActivity.this.reportSpamViewAnimator.equals(var1)) {
                     ChatActivity.this.reportSpamViewAnimator = null;
                  }

               }

               public void onAnimationEnd(Animator var1) {
                  if (ChatActivity.this.reportSpamViewAnimator != null && ChatActivity.this.reportSpamViewAnimator.equals(var1)) {
                     ChatActivity.this.reportSpamViewAnimator = null;
                  }

               }
            });
            this.reportSpamViewAnimator.start();
         }

         this.checkListViewPaddings();
      }
   }

   private void updateTitle() {
      ChatAvatarContainer var1 = this.avatarContainer;
      if (var1 != null) {
         TLRPC.Chat var2 = this.currentChat;
         if (var2 != null) {
            var1.setTitle(var2.title, var2.scam);
         } else {
            TLRPC.User var5 = this.currentUser;
            if (var5 != null) {
               if (var5.self) {
                  var1.setTitle(LocaleController.getString("SavedMessages", 2131560633));
               } else if (MessagesController.isSupportUser(var5) || ContactsController.getInstance(super.currentAccount).contactsDict.get(this.currentUser.id) != null || ContactsController.getInstance(super.currentAccount).contactsDict.size() == 0 && ContactsController.getInstance(super.currentAccount).isLoadingContacts()) {
                  this.avatarContainer.setTitle(UserObject.getUserName(this.currentUser), this.currentUser.scam);
               } else if (!TextUtils.isEmpty(this.currentUser.phone)) {
                  ChatAvatarContainer var3 = this.avatarContainer;
                  PhoneFormat var4 = PhoneFormat.getInstance();
                  StringBuilder var6 = new StringBuilder();
                  var6.append("+");
                  var6.append(this.currentUser.phone);
                  var3.setTitle(var4.format(var6.toString()));
               } else {
                  this.avatarContainer.setTitle(UserObject.getUserName(this.currentUser), this.currentUser.scam);
               }
            }
         }

         this.setParentActivityTitle(this.avatarContainer.getTitleTextView().getText());
      }
   }

   private void updateTitleIcons() {
      if (this.avatarContainer != null) {
         boolean var1 = MessagesController.getInstance(super.currentAccount).isDialogMuted(this.dialog_id);
         Drawable var2 = null;
         Drawable var3;
         if (var1) {
            var3 = Theme.chat_muteIconDrawable;
         } else {
            var3 = null;
         }

         ChatAvatarContainer var4 = this.avatarContainer;
         if (this.currentEncryptedChat != null) {
            var2 = Theme.chat_lockIconDrawable;
         }

         var4.setTitleIcons(var2, var3);
         ActionBarMenuSubItem var5 = this.muteItem;
         if (var5 != null) {
            if (var3 != null) {
               var5.setTextAndIcon(LocaleController.getString("UnmuteNotifications", 2131560939), 2131165678);
            } else {
               var5.setTextAndIcon(LocaleController.getString("MuteNotifications", 2131559887), 2131165648);
            }
         }

      }
   }

   private void updateVisibleRows() {
      RecyclerListView var1 = this.chatListView;
      if (var1 != null) {
         int var2;
         int var3;
         label107: {
            if (!this.wasManualScroll && this.unreadMessageObject != null && var1.getMeasuredHeight() != 0) {
               var2 = this.messages.indexOf(this.unreadMessageObject);
               if (var2 >= 0) {
                  var3 = var2 + this.chatAdapter.messagesStartRow;
                  break label107;
               }
            }

            var3 = -1;
         }

         int var4 = this.chatListView.getChildCount();
         ChatActivityEnterView var12 = this.chatActivityEnterView;
         MessageObject var13;
         if (var12 != null) {
            var13 = var12.getEditingMessageObject();
         } else {
            var13 = null;
         }

         int var5;
         for(var5 = 0; var5 < var4; ++var5) {
            View var6 = this.chatListView.getChildAt(var5);
            if (!(var6 instanceof ChatMessageCell)) {
               if (var6 instanceof ChatActionCell) {
                  ChatActionCell var17 = (ChatActionCell)var6;
                  var17.setMessageObject(var17.getMessageObject());
               }
            } else {
               ChatMessageCell var16 = (ChatMessageCell)var6;
               MessageObject var7 = var16.getMessageObject();
               boolean var8 = super.actionBar.isActionModeShowed();
               boolean var9 = true;
               boolean var10;
               boolean var15;
               if (var8) {
                  var16.setCheckBoxVisible(true, true);
                  byte var14;
                  if (var7.getDialogId() == this.dialog_id) {
                     var14 = 0;
                  } else {
                     var14 = 1;
                  }

                  if (var7 != var13 && this.selectedMessagesIds[var14].indexOfKey(var7.getId()) < 0) {
                     var16.setDrawSelectionBackground(false);
                     var16.setChecked(false, false, true);
                     var15 = false;
                  } else {
                     this.setCellSelectionBackground(var7, var16, var14, true);
                     var15 = true;
                  }

                  var10 = true;
               } else {
                  var16.setDrawSelectionBackground(false);
                  var16.setCheckBoxVisible(false, true);
                  var16.setChecked(false, false, true);
                  var10 = false;
                  var15 = false;
               }

               var16.setMessageObject(var16.getMessageObject(), var16.getCurrentMessagesGroup(), var16.isPinnedBottom(), var16.isPinnedTop());
               if (var16 != this.scrimView) {
                  if (var10 && var15) {
                     var8 = true;
                  } else {
                     var8 = false;
                  }

                  var16.setCheckPressed(var10 ^ true, var8);
               }

               if (this.highlightMessageId != Integer.MAX_VALUE && var7 != null && var7.getId() == this.highlightMessageId) {
                  var8 = true;
               } else {
                  var8 = false;
               }

               var16.setHighlighted(var8);
               if (this.highlightMessageId != Integer.MAX_VALUE) {
                  this.startMessageUnselect();
               }

               FrameLayout var11 = this.searchContainer;
               if (var11 != null && var11.getVisibility() == 0) {
                  DataQuery var19 = DataQuery.getInstance(super.currentAccount);
                  var2 = var7.getId();
                  if (var7.getDialogId() == this.mergeDialogId) {
                     var8 = var9;
                  } else {
                     var8 = false;
                  }

                  if (var19.isMessageFound(var2, var8) && DataQuery.getInstance(super.currentAccount).getLastSearchQuery() != null) {
                     var16.setHighlightedText(DataQuery.getInstance(super.currentAccount).getLastSearchQuery());
                     continue;
                  }
               }

               var16.setHighlightedText((String)null);
            }
         }

         this.chatListView.invalidate();
         if (var3 != -1) {
            var5 = this.chatListView.getMeasuredHeight();
            var2 = this.chatListView.getPaddingBottom();
            var4 = this.chatListView.getPaddingTop();
            int var18 = AndroidUtilities.dp(29.0F);
            this.chatLayoutManager.scrollToPositionWithOffset(var3, var5 - var2 - var4 - var18);
         }

      }
   }

   public boolean allowGroupPhotos() {
      boolean var2;
      if (!this.isEditingMessageMedia()) {
         TLRPC.EncryptedChat var1 = this.currentEncryptedChat;
         if (var1 == null || AndroidUtilities.getPeerLayerVersion(var1.layer) >= 73) {
            var2 = true;
            return var2;
         }
      }

      var2 = false;
      return var2;
   }

   public boolean checkRecordLocked() {
      ChatActivityEnterView var1 = this.chatActivityEnterView;
      if (var1 != null && var1.isRecordLocked()) {
         AlertDialog.Builder var2 = new AlertDialog.Builder(this.getParentActivity());
         if (this.chatActivityEnterView.isInVideoMode()) {
            var2.setTitle(LocaleController.getString("DiscardVideoMessageTitle", 2131559275));
            var2.setMessage(LocaleController.getString("DiscardVideoMessageDescription", 2131559274));
         } else {
            var2.setTitle(LocaleController.getString("DiscardVoiceMessageTitle", 2131559278));
            var2.setMessage(LocaleController.getString("DiscardVoiceMessageDescription", 2131559277));
         }

         var2.setPositiveButton(LocaleController.getString("DiscardVoiceMessageAction", 2131559276), new _$$Lambda$ChatActivity$d4PnyMqJwfFc9tc5ei7XntK9KQI(this));
         var2.setNegativeButton(LocaleController.getString("Continue", 2131559153), (OnClickListener)null);
         this.showDialog(var2.create());
         return true;
      } else {
         return false;
      }
   }

   public View createView(Context var1) {
      int var2;
      if (this.chatMessageCellsCache.isEmpty()) {
         for(var2 = 0; var2 < 8; ++var2) {
            this.chatMessageCellsCache.add(new ChatMessageCell(var1));
         }
      }

      for(var2 = 1; var2 >= 0; --var2) {
         this.selectedMessagesIds[var2].clear();
         this.selectedMessagesCanCopyIds[var2].clear();
         this.selectedMessagesCanStarIds[var2].clear();
      }

      this.cantDeleteMessagesCount = 0;
      this.canEditMessagesCount = 0;
      this.cantForwardMessagesCount = 0;
      this.videoPlayerContainer = null;
      super.hasOwnBackground = true;
      ChatAttachAlert var3 = this.chatAttachAlert;
      if (var3 != null) {
         try {
            if (var3.isShowing()) {
               this.chatAttachAlert.dismiss();
            }
         } catch (Exception var11) {
         }

         this.chatAttachAlert.onDestroy();
         this.chatAttachAlert = null;
      }

      StickersAdapter var14 = this.stickersAdapter;
      if (var14 != null) {
         var14.onDestroy();
         this.stickersAdapter = null;
      }

      Theme.createChatResources(var1, false);
      super.actionBar.setAddToContainer(false);
      if (super.inPreviewMode) {
         super.actionBar.setBackButtonDrawable((Drawable)null);
      } else {
         super.actionBar.setBackButtonDrawable(new BackDrawable(false));
      }

      super.actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick() {
         // $FF: synthetic method
         public void lambda$null$0$ChatActivity$5(int var1, boolean var2, boolean var3) {
            if (var1 == 15) {
               ChatActivity var4 = ChatActivity.this;
               TLRPC.ChatFull var5 = var4.chatInfo;
               if (var5 != null && var5.pinned_msg_id != 0) {
                  Editor var10 = MessagesController.getNotificationsSettings(ChatActivity.access$4600(var4)).edit();
                  StringBuilder var7 = new StringBuilder();
                  var7.append("pin_");
                  var7.append(ChatActivity.this.dialog_id);
                  var10.putInt(var7.toString(), ChatActivity.this.chatInfo.pinned_msg_id).commit();
                  ChatActivity.this.updatePinnedMessageView(true);
               } else {
                  var4 = ChatActivity.this;
                  TLRPC.UserFull var8 = var4.userInfo;
                  if (var8 != null && var8.pinned_msg_id != 0) {
                     Editor var6 = MessagesController.getNotificationsSettings(ChatActivity.access$4700(var4)).edit();
                     StringBuilder var9 = new StringBuilder();
                     var9.append("pin_");
                     var9.append(ChatActivity.this.dialog_id);
                     var6.putInt(var9.toString(), ChatActivity.this.userInfo.pinned_msg_id).commit();
                     ChatActivity.this.updatePinnedMessageView(true);
                  }
               }

               MessagesController.getInstance(ChatActivity.access$4800(ChatActivity.this)).deleteDialog(ChatActivity.this.dialog_id, 1, var2);
               ChatActivity.this.clearingHistory = false;
               ChatActivity.this.clearHistory(false);
               ChatActivity.this.chatAdapter.notifyDataSetChanged();
            } else {
               if (var3) {
                  if (ChatObject.isNotInChat(ChatActivity.this.currentChat)) {
                     MessagesController.getInstance(ChatActivity.access$5000(ChatActivity.this)).deleteDialog(ChatActivity.this.dialog_id, 0, var2);
                  } else {
                     MessagesController.getInstance(ChatActivity.access$5300(ChatActivity.this)).deleteUserFromChat((int)(-ChatActivity.this.dialog_id), MessagesController.getInstance(ChatActivity.access$5200(ChatActivity.this)).getUser(UserConfig.getInstance(ChatActivity.access$5100(ChatActivity.this)).getClientUserId()), (TLRPC.ChatFull)null);
                  }
               } else {
                  MessagesController.getInstance(ChatActivity.access$5400(ChatActivity.this)).deleteDialog(ChatActivity.this.dialog_id, 0, var2);
               }

               ChatActivity.this.finishFragment();
            }

         }

         // $FF: synthetic method
         public void lambda$null$1$ChatActivity$5() {
            ChatActivity.this.clearingHistory = false;
            ChatActivity.this.chatAdapter.notifyDataSetChanged();
         }

         // $FF: synthetic method
         public void lambda$onItemClick$2$ChatActivity$5(int var1, boolean var2, boolean var3) {
            if (var1 == 15 && ChatObject.isChannel(ChatActivity.this.currentChat)) {
               TLRPC.Chat var4 = ChatActivity.this.currentChat;
               if (!var4.megagroup || !TextUtils.isEmpty(var4.username)) {
                  MessagesController.getInstance(ChatActivity.access$3900(ChatActivity.this)).deleteDialog(ChatActivity.this.dialog_id, 2, var3);
                  return;
               }
            }

            long var5;
            if (var1 != 15) {
               NotificationCenter.getInstance(ChatActivity.access$4000(ChatActivity.this)).removeObserver(ChatActivity.this, NotificationCenter.closeChats);
               NotificationCenter.getInstance(ChatActivity.access$4100(ChatActivity.this)).postNotificationName(NotificationCenter.closeChats);
               ChatActivity.this.finishFragment();
               NotificationCenter var9 = NotificationCenter.getInstance(ChatActivity.access$4200(ChatActivity.this));
               var1 = NotificationCenter.needDeleteDialog;
               var5 = ChatActivity.this.dialog_id;
               ChatActivity var7 = ChatActivity.this;
               var9.postNotificationName(var1, var5, var7.currentUser, var7.currentChat, var3);
            } else {
               ChatActivity.this.clearingHistory = true;
               UndoView var10 = ChatActivity.this.undoView;
               var5 = ChatActivity.this.dialog_id;
               byte var8;
               if (var1 == 15) {
                  var8 = 0;
               } else {
                  var8 = 1;
               }

               var10.showWithAction(var5, var8, new _$$Lambda$ChatActivity$5$qBxVbKXf7YNtkWnFp3eBsEDqFRg(this, var1, var3, var2), new _$$Lambda$ChatActivity$5$AS0ZnQYYPqiDRbtboYCGSMcwiNo(this));
               ChatActivity.this.chatAdapter.notifyDataSetChanged();
            }

         }

         public void onItemClick(int var1) {
            if (var1 == -1) {
               if (ChatActivity.access$1300(ChatActivity.this).isActionModeShowed()) {
                  for(var1 = 1; var1 >= 0; --var1) {
                     ChatActivity.this.selectedMessagesIds[var1].clear();
                     ChatActivity.this.selectedMessagesCanCopyIds[var1].clear();
                     ChatActivity.this.selectedMessagesCanStarIds[var1].clear();
                  }

                  ChatActivity.this.hideActionMode();
                  ChatActivity.this.updatePinnedMessageView(true);
                  ChatActivity.this.updateVisibleRows();
               } else {
                  ChatActivity.this.finishFragment();
               }
            } else {
               int var3;
               boolean var9;
               String var18;
               if (var1 == 10) {
                  var18 = "";
                  var3 = 1;

                  for(var1 = 0; var3 >= 0; --var3) {
                     ArrayList var16 = new ArrayList();

                     int var5;
                     for(var5 = 0; var5 < ChatActivity.this.selectedMessagesCanCopyIds[var3].size(); ++var5) {
                        var16.add(ChatActivity.this.selectedMessagesCanCopyIds[var3].keyAt(var5));
                     }

                     if (ChatActivity.this.currentEncryptedChat == null) {
                        Collections.sort(var16);
                     } else {
                        Collections.sort(var16, Collections.reverseOrder());
                     }

                     for(var5 = 0; var5 < var16.size(); ++var5) {
                        Integer var22 = (Integer)var16.get(var5);
                        MessageObject var21 = (MessageObject)ChatActivity.this.selectedMessagesCanCopyIds[var3].get(var22);
                        String var23 = var18;
                        if (var18.length() != 0) {
                           StringBuilder var25 = new StringBuilder();
                           var25.append(var18);
                           var25.append("\n\n");
                           var23 = var25.toString();
                        }

                        ChatActivity var8;
                        StringBuilder var24;
                        label244: {
                           var24 = new StringBuilder();
                           var24.append(var23);
                           var8 = ChatActivity.this;
                           if (var16.size() != 1) {
                              TLRPC.User var26 = ChatActivity.this.currentUser;
                              if (var26 == null || !var26.self) {
                                 var9 = true;
                                 break label244;
                              }
                           }

                           var9 = false;
                        }

                        var24.append(var8.getMessageContent(var21, var1, var9));
                        var18 = var24.toString();
                        var1 = var21.messageOwner.from_id;
                     }
                  }

                  if (var18.length() != 0) {
                     AndroidUtilities.addToClipboard(var18);
                  }

                  for(var1 = 1; var1 >= 0; --var1) {
                     ChatActivity.this.selectedMessagesIds[var1].clear();
                     ChatActivity.this.selectedMessagesCanCopyIds[var1].clear();
                     ChatActivity.this.selectedMessagesCanStarIds[var1].clear();
                  }

                  ChatActivity.this.hideActionMode();
                  ChatActivity.this.updatePinnedMessageView(true);
                  ChatActivity.this.updateVisibleRows();
               } else {
                  MessageObject var2 = null;
                  if (var1 == 12) {
                     if (ChatActivity.this.getParentActivity() == null) {
                        return;
                     }

                     ChatActivity.this.createDeleteMessagesAlert((MessageObject)null, (MessageObject.GroupedMessages)null);
                  } else if (var1 == 11) {
                     ChatActivity.this.openForward();
                  } else {
                     ChatActivity var15;
                     if (var1 == 13) {
                        if (ChatActivity.this.getParentActivity() == null) {
                           return;
                        }

                        var15 = ChatActivity.this;
                        var15.showDialog(AlertsCreator.createTTLAlert(var15.getParentActivity(), ChatActivity.this.currentEncryptedChat).create());
                     } else if (var1 != 15 && var1 != 16) {
                        if (var1 == 17) {
                           var15 = ChatActivity.this;
                           if (var15.currentUser == null || var15.getParentActivity() == null) {
                              return;
                           }

                           var18 = ChatActivity.this.currentUser.phone;
                           if (var18 != null && var18.length() != 0) {
                              Bundle var20 = new Bundle();
                              var20.putInt("user_id", ChatActivity.this.currentUser.id);
                              var20.putBoolean("addContact", true);
                              ChatActivity.this.presentFragment(new ContactAddActivity(var20));
                           } else {
                              var15 = ChatActivity.this;
                              var15.shareMyContact(var15.replyingMessageObject);
                           }
                        } else if (var1 == 18) {
                           ChatActivity.this.toggleMute(false);
                        } else if (var1 == 24) {
                           try {
                              DataQuery.getInstance(ChatActivity.access$2600(ChatActivity.this)).installShortcut((long)ChatActivity.this.currentUser.id);
                           } catch (Exception var12) {
                              FileLog.e((Throwable)var12);
                           }
                        } else if (var1 == 21) {
                           AlertsCreator.createReportAlert(ChatActivity.this.getParentActivity(), ChatActivity.this.dialog_id, 0, ChatActivity.this);
                        } else if (var1 == 22) {
                           for(var1 = 0; var1 < 2; ++var1) {
                              for(var3 = 0; var3 < ChatActivity.this.selectedMessagesCanStarIds[var1].size(); ++var3) {
                                 var2 = (MessageObject)ChatActivity.this.selectedMessagesCanStarIds[var1].valueAt(var3);
                                 DataQuery.getInstance(ChatActivity.access$2800(ChatActivity.this)).addRecentSticker(2, var2, var2.getDocument(), (int)(System.currentTimeMillis() / 1000L), ChatActivity.this.hasUnfavedSelected ^ true);
                              }
                           }

                           for(var1 = 1; var1 >= 0; --var1) {
                              ChatActivity.this.selectedMessagesIds[var1].clear();
                              ChatActivity.this.selectedMessagesCanCopyIds[var1].clear();
                              ChatActivity.this.selectedMessagesCanStarIds[var1].clear();
                           }

                           ChatActivity.this.hideActionMode();
                           ChatActivity.this.updatePinnedMessageView(true);
                           ChatActivity.this.updateVisibleRows();
                        } else if (var1 == 23) {
                           MessageObject var19;
                           for(var1 = 1; var1 >= 0; var2 = var19) {
                              var19 = var2;
                              if (var2 == null) {
                                 var19 = var2;
                                 if (ChatActivity.this.selectedMessagesIds[var1].size() == 1) {
                                    ArrayList var14 = new ArrayList();

                                    for(var3 = 0; var3 < ChatActivity.this.selectedMessagesIds[var1].size(); ++var3) {
                                       var14.add(ChatActivity.this.selectedMessagesIds[var1].keyAt(var3));
                                    }

                                    var19 = (MessageObject)ChatActivity.this.messagesDict[var1].get((Integer)var14.get(0));
                                 }
                              }

                              ChatActivity.this.selectedMessagesIds[var1].clear();
                              ChatActivity.this.selectedMessagesCanCopyIds[var1].clear();
                              ChatActivity.this.selectedMessagesCanStarIds[var1].clear();
                              --var1;
                           }

                           ChatActivity.this.startEditingMessageObject(var2);
                           ChatActivity.this.hideActionMode();
                           ChatActivity.this.updatePinnedMessageView(true);
                           ChatActivity.this.updateVisibleRows();
                        } else if (var1 == 14) {
                           if (ChatActivity.this.chatAttachAlert != null) {
                              ChatActivity.this.chatAttachAlert.setEditingMessageObject((MessageObject)null);
                           }

                           ChatActivity.this.openAttachMenu();
                        } else if (var1 == 30) {
                           SendMessagesHelper.getInstance(ChatActivity.access$3300(ChatActivity.this)).sendMessage("/help", ChatActivity.this.dialog_id, (MessageObject)null, (TLRPC.WebPage)null, false, (ArrayList)null, (TLRPC.ReplyMarkup)null, (HashMap)null);
                        } else if (var1 == 31) {
                           SendMessagesHelper.getInstance(ChatActivity.access$3400(ChatActivity.this)).sendMessage("/settings", ChatActivity.this.dialog_id, (MessageObject)null, (TLRPC.WebPage)null, false, (ArrayList)null, (TLRPC.ReplyMarkup)null, (HashMap)null);
                        } else if (var1 == 40) {
                           ChatActivity.this.openSearchWithText((String)null);
                        } else if (var1 == 32) {
                           var15 = ChatActivity.this;
                           if (var15.currentUser != null && var15.getParentActivity() != null) {
                              var15 = ChatActivity.this;
                              VoIPHelper.startCall(var15.currentUser, var15.getParentActivity(), MessagesController.getInstance(ChatActivity.access$3600(ChatActivity.this)).getUserFull(ChatActivity.this.currentUser.id));
                           }
                        } else {
                           ChatActivityEnterView var17;
                           if (var1 == 50) {
                              var17 = ChatActivity.this.chatActivityEnterView;
                              if (var17 != null) {
                                 var17.getEditField().setSelectionOverride(ChatActivity.this.editTextStart, ChatActivity.this.editTextEnd);
                                 ChatActivity.this.chatActivityEnterView.getEditField().makeSelectedBold();
                              }
                           } else if (var1 == 51) {
                              var17 = ChatActivity.this.chatActivityEnterView;
                              if (var17 != null) {
                                 var17.getEditField().setSelectionOverride(ChatActivity.this.editTextStart, ChatActivity.this.editTextEnd);
                                 ChatActivity.this.chatActivityEnterView.getEditField().makeSelectedItalic();
                              }
                           } else if (var1 == 52) {
                              var17 = ChatActivity.this.chatActivityEnterView;
                              if (var17 != null) {
                                 var17.getEditField().setSelectionOverride(ChatActivity.this.editTextStart, ChatActivity.this.editTextEnd);
                                 ChatActivity.this.chatActivityEnterView.getEditField().makeSelectedMono();
                              }
                           } else if (var1 == 53) {
                              var17 = ChatActivity.this.chatActivityEnterView;
                              if (var17 != null) {
                                 var17.getEditField().setSelectionOverride(ChatActivity.this.editTextStart, ChatActivity.this.editTextEnd);
                                 ChatActivity.this.chatActivityEnterView.getEditField().makeSelectedUrl();
                              }
                           } else if (var1 == 54) {
                              var17 = ChatActivity.this.chatActivityEnterView;
                              if (var17 != null) {
                                 var17.getEditField().setSelectionOverride(ChatActivity.this.editTextStart, ChatActivity.this.editTextEnd);
                                 ChatActivity.this.chatActivityEnterView.getEditField().makeSelectedRegular();
                              }
                           }
                        }
                     } else {
                        if (ChatActivity.this.getParentActivity() == null) {
                           return;
                        }

                        if ((int)ChatActivity.this.dialog_id < 0 && (int)(ChatActivity.this.dialog_id >> 32) != 1) {
                           var9 = true;
                        } else {
                           var9 = false;
                        }

                        ChatActivity var7 = ChatActivity.this;
                        boolean var10;
                        if (var1 == 15) {
                           var10 = true;
                        } else {
                           var10 = false;
                        }

                        ChatActivity var6 = ChatActivity.this;
                        TLRPC.Chat var13 = var6.currentChat;
                        TLRPC.User var4 = var6.currentUser;
                        boolean var11;
                        if (var6.currentEncryptedChat != null) {
                           var11 = true;
                        } else {
                           var11 = false;
                        }

                        AlertsCreator.createClearOrDeleteDialogAlert(var7, var10, var13, var4, var11, new _$$Lambda$ChatActivity$5$b9Ik29mFvRs1ApO4Eb84R_wHrMg(this, var1, var9));
                     }
                  }
               }
            }

         }
      });
      boolean var4;
      if (this.currentEncryptedChat != null) {
         var4 = true;
      } else {
         var4 = false;
      }

      this.avatarContainer = new ChatAvatarContainer(var1, this, var4);
      if (super.inPreviewMode) {
         this.avatarContainer.setOccupyStatusBar(false);
      }

      ActionBar var5 = super.actionBar;
      ChatAvatarContainer var15 = this.avatarContainer;
      float var6;
      if (!super.inPreviewMode) {
         var6 = 56.0F;
      } else {
         var6 = 0.0F;
      }

      var5.addView(var15, 0, LayoutHelper.createFrame(-2, -1.0F, 51, var6, 0.0F, 40.0F, 0.0F));
      TLRPC.Chat var16 = this.currentChat;
      if (var16 != null && !ChatObject.isChannel(var16)) {
         label404: {
            var2 = this.currentChat.participants_count;
            TLRPC.ChatFull var17 = this.chatInfo;
            if (var17 != null) {
               var2 = var17.participants.participants.size();
            }

            if (var2 != 0) {
               var16 = this.currentChat;
               if (!var16.deactivated && !var16.left && !(var16 instanceof TLRPC.TL_chatForbidden)) {
                  var17 = this.chatInfo;
                  if (var17 == null || !(var17.participants instanceof TLRPC.TL_chatParticipantsForbidden)) {
                     break label404;
                  }
               }
            }

            this.avatarContainer.setEnabled(false);
         }
      }

      ActionBarMenu var19 = super.actionBar.createMenu();
      if (this.currentEncryptedChat == null && !this.isBroadcast) {
         this.searchItem = var19.addItem(0, 2131165419).setIsSearchField(true).setActionBarMenuItemSearchListener(new ActionBarMenuItem.ActionBarMenuItemSearchListener() {
            boolean searchWas;

            public boolean forceShowClear() {
               return ChatActivity.this.searchingForUser;
            }

            // $FF: synthetic method
            public void lambda$onSearchExpand$0$ChatActivity$6() {
               this.searchWas = false;
               ChatActivity.this.searchItem.getSearchField().requestFocus();
               AndroidUtilities.showKeyboard(ChatActivity.this.searchItem.getSearchField());
            }

            public void onCaptionCleared() {
               if (ChatActivity.this.searchingUserMessages != null) {
                  ChatActivity.this.searchUserButton.callOnClick();
               } else {
                  if (ChatActivity.this.searchingForUser) {
                     ChatActivity.this.mentionsAdapter.searchUsernameOrHashtag((String)null, 0, (ArrayList)null, false);
                     ChatActivity.this.searchingForUser = false;
                     ChatActivity.this.searchItem.setSearchFieldText("", true);
                  }

                  ChatActivity.this.searchItem.setSearchFieldHint(LocaleController.getString("Search", 2131560640));
                  ChatActivity.this.searchCalendarButton.setVisibility(0);
                  ChatActivity.this.searchUserButton.setVisibility(0);
                  ChatActivity.this.searchingUserMessages = null;
               }

            }

            public void onSearchCollapse() {
               ChatActivity.this.searchCalendarButton.setVisibility(0);
               if (ChatActivity.this.searchUserButton != null) {
                  ChatActivity.this.searchUserButton.setVisibility(0);
               }

               if (ChatActivity.this.searchingForUser) {
                  ChatActivity.this.mentionsAdapter.searchUsernameOrHashtag((String)null, 0, (ArrayList)null, false);
                  ChatActivity.this.searchingForUser = false;
               }

               ChatActivity.this.mentionLayoutManager.setReverseLayout(false);
               ChatActivity.this.mentionsAdapter.setSearchingMentions(false);
               ChatActivity.this.searchingUserMessages = null;
               ChatActivity.this.searchItem.setSearchFieldHint(LocaleController.getString("Search", 2131560640));
               ChatActivity.this.searchItem.setSearchFieldCaption((CharSequence)null);
               ChatActivity.this.avatarContainer.setVisibility(0);
               if (ChatActivity.this.editTextItem.getTag() != null) {
                  if (ChatActivity.this.headerItem != null) {
                     ChatActivity.this.headerItem.setVisibility(8);
                     ChatActivity.this.editTextItem.setVisibility(0);
                     ChatActivity.this.attachItem.setVisibility(8);
                  }
               } else if (ChatActivity.this.chatActivityEnterView.hasText()) {
                  if (ChatActivity.this.headerItem != null) {
                     ChatActivity.this.headerItem.setVisibility(8);
                     ChatActivity.this.editTextItem.setVisibility(8);
                     ChatActivity.this.attachItem.setVisibility(0);
                  }
               } else if (ChatActivity.this.headerItem != null) {
                  ChatActivity.this.headerItem.setVisibility(0);
                  ChatActivity.this.editTextItem.setVisibility(8);
                  ChatActivity.this.attachItem.setVisibility(8);
               }

               ChatActivity.this.searchItem.setVisibility(8);
               ChatActivity.this.removeSelectedMessageHighlight();
               ChatActivity.this.updateBottomOverlay();
               ChatActivity.this.updatePinnedMessageView(true);
               ChatActivity.this.updateVisibleRows();
            }

            public void onSearchExpand() {
               if (ChatActivity.this.openSearchKeyboard) {
                  AndroidUtilities.runOnUIThread(new _$$Lambda$ChatActivity$6$VwW_X3TtST6j3twN7e_r2fP0YGk(this), 300L);
               }
            }

            public void onSearchPressed(EditText var1) {
               this.searchWas = true;
               ChatActivity.this.updateSearchButtons(0, 0, -1);
               DataQuery.getInstance(ChatActivity.access$7200(ChatActivity.this)).searchMessagesInChat(var1.getText().toString(), ChatActivity.this.dialog_id, ChatActivity.this.mergeDialogId, ChatActivity.access$7100(ChatActivity.this), 0, ChatActivity.this.searchingUserMessages);
            }

            public void onTextChanged(EditText var1) {
               if (ChatActivity.this.searchingForUser) {
                  MentionsAdapter var2 = ChatActivity.this.mentionsAdapter;
                  StringBuilder var3 = new StringBuilder();
                  var3.append("@");
                  var3.append(var1.getText().toString());
                  var2.searchUsernameOrHashtag(var3.toString(), 0, ChatActivity.this.messages, true);
               } else if (!ChatActivity.this.searchingForUser && ChatActivity.this.searchingUserMessages == null && ChatActivity.this.searchUserButton != null && TextUtils.equals(var1.getText(), LocaleController.getString("SearchFrom", 2131560647))) {
                  ChatActivity.this.searchUserButton.callOnClick();
               }

            }
         });
         this.searchItem.setSearchFieldHint(LocaleController.getString("Search", 2131560640));
         this.searchItem.setVisibility(8);
      }

      this.headerItem = var19.addItem(0, 2131165416);
      this.headerItem.setContentDescription(LocaleController.getString("AccDescrMoreOptions", 2131558443));
      if (this.currentUser != null) {
         this.headerItem.addSubItem(32, 2131165616, LocaleController.getString("Call", 2131558869));
         TLRPC.UserFull var20 = MessagesController.getInstance(super.currentAccount).getUserFull(this.currentUser.id);
         if (var20 != null && var20.phone_calls_available) {
            this.headerItem.showSubItem(32);
         } else {
            this.headerItem.hideSubItem(32);
         }
      }

      this.editTextItem = var19.addItem(0, 2131165416);
      this.editTextItem.setTag((Object)null);
      this.editTextItem.setVisibility(8);
      SpannableStringBuilder var21 = new SpannableStringBuilder(LocaleController.getString("Bold", 2131558847));
      var21.setSpan(new TypefaceSpan(AndroidUtilities.getTypeface("fonts/rmedium.ttf")), 0, var21.length(), 33);
      this.editTextItem.addSubItem(50, var21);
      var21 = new SpannableStringBuilder(LocaleController.getString("Italic", 2131559701));
      var21.setSpan(new TypefaceSpan(AndroidUtilities.getTypeface("fonts/ritalic.ttf")), 0, var21.length(), 33);
      this.editTextItem.addSubItem(51, var21);
      var21 = new SpannableStringBuilder(LocaleController.getString("Mono", 2131559876));
      var21.setSpan(new TypefaceSpan(Typeface.MONOSPACE), 0, var21.length(), 33);
      this.editTextItem.addSubItem(52, var21);
      this.editTextItem.addSubItem(53, LocaleController.getString("CreateLink", 2131559169));
      this.editTextItem.addSubItem(54, LocaleController.getString("Regular", 2131560552));
      if (this.searchItem != null) {
         this.headerItem.addSubItem(40, 2131165669, LocaleController.getString("Search", 2131560640));
      }

      TLRPC.Chat var24 = this.currentChat;
      if (var24 != null && !var24.creator) {
         this.headerItem.addSubItem(21, 2131165660, LocaleController.getString("ReportChat", 2131560568));
      }

      if (this.currentUser != null) {
         this.addContactItem = this.headerItem.addSubItem(17, 2131165612, "");
      }

      if (this.currentEncryptedChat != null) {
         this.timeItem2 = this.headerItem.addSubItem(13, 2131165675, LocaleController.getString("SetTimer", 2131560737));
      }

      label355: {
         if (ChatObject.isChannel(this.currentChat)) {
            var24 = this.currentChat;
            if (var24 == null || !var24.megagroup || !TextUtils.isEmpty(var24.username)) {
               break label355;
            }
         }

         this.headerItem.addSubItem(15, 2131165619, LocaleController.getString("ClearHistory", 2131559107));
      }

      TLRPC.User var26 = this.currentUser;
      if (var26 == null || !var26.self) {
         this.muteItem = this.headerItem.addSubItem(18, 2131165648, (CharSequence)null);
      }

      label341: {
         if (ChatObject.isChannel(this.currentChat)) {
            var24 = this.currentChat;
            if (!var24.creator) {
               if (!ChatObject.isNotInChat(var24)) {
                  if (this.currentChat.megagroup) {
                     this.headerItem.addSubItem(16, 2131165639, LocaleController.getString("DeleteAndExit", 2131559234));
                  } else {
                     this.headerItem.addSubItem(16, 2131165639, LocaleController.getString("LeaveChannelMenu", 2131559745));
                  }
               }
               break label341;
            }
         }

         if (!ChatObject.isChannel(this.currentChat)) {
            if (this.currentChat != null && !this.isBroadcast) {
               this.headerItem.addSubItem(16, 2131165639, LocaleController.getString("DeleteAndExit", 2131559234));
            } else {
               this.headerItem.addSubItem(16, 2131165623, LocaleController.getString("DeleteChatUser", 2131559240));
            }
         }
      }

      var26 = this.currentUser;
      if (var26 != null && var26.self) {
         this.headerItem.addSubItem(24, 2131165633, LocaleController.getString("AddShortcut", 2131558583));
      }

      var26 = this.currentUser;
      if (var26 != null && this.currentEncryptedChat == null && var26.bot) {
         this.headerItem.addSubItem(31, 2131165596, LocaleController.getString("BotSettings", 2131558855));
         this.headerItem.addSubItem(30, 2131165582, LocaleController.getString("BotHelp", 2131558850));
         this.updateBotButtons();
      }

      this.updateTitle();
      this.avatarContainer.updateOnlineCount();
      this.avatarContainer.updateSubtitle();
      this.updateTitleIcons();
      this.attachItem = var19.addItem(14, 2131165416).setOverrideMenuClick(true).setAllowCloseAnimation(false);
      this.attachItem.setVisibility(8);
      this.actionModeViews.clear();
      if (super.inPreviewMode) {
         this.headerItem.setAlpha(0.0F);
         this.attachItem.setAlpha(0.0F);
      }

      var19 = super.actionBar.createActionMode();
      this.selectedMessagesCountTextView = new NumberTextView(var19.getContext());
      this.selectedMessagesCountTextView.setTextSize(18);
      this.selectedMessagesCountTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
      this.selectedMessagesCountTextView.setTextColor(Theme.getColor("actionBarActionModeDefaultIcon"));
      var19.addView(this.selectedMessagesCountTextView, LayoutHelper.createLinear(0, -1, 1.0F, 65, 0, 0, 0));
      this.selectedMessagesCountTextView.setOnTouchListener(_$$Lambda$ChatActivity$NimgLxaIUxUA1P59a4CSYNRrn9s.INSTANCE);
      if (this.currentEncryptedChat == null) {
         this.actionModeViews.add(var19.addItemWithWidth(23, 2131165625, AndroidUtilities.dp(54.0F), LocaleController.getString("Edit", 2131559301)));
         this.actionModeViews.add(var19.addItemWithWidth(22, 2131165626, AndroidUtilities.dp(54.0F), LocaleController.getString("AddToFavorites", 2131558591)));
         this.actionModeViews.add(var19.addItemWithWidth(10, 2131165622, AndroidUtilities.dp(54.0F), LocaleController.getString("Copy", 2131559163)));
         this.actionModeViews.add(var19.addItemWithWidth(11, 2131165627, AndroidUtilities.dp(54.0F), LocaleController.getString("Forward", 2131559504)));
         this.actionModeViews.add(var19.addItemWithWidth(12, 2131165623, AndroidUtilities.dp(54.0F), LocaleController.getString("Delete", 2131559227)));
      } else {
         this.actionModeViews.add(var19.addItemWithWidth(23, 2131165625, AndroidUtilities.dp(54.0F), LocaleController.getString("Edit", 2131559301)));
         this.actionModeViews.add(var19.addItemWithWidth(22, 2131165626, AndroidUtilities.dp(54.0F), LocaleController.getString("AddToFavorites", 2131558591)));
         this.actionModeViews.add(var19.addItemWithWidth(10, 2131165622, AndroidUtilities.dp(54.0F), LocaleController.getString("Copy", 2131559163)));
         this.actionModeViews.add(var19.addItemWithWidth(12, 2131165623, AndroidUtilities.dp(54.0F), LocaleController.getString("Delete", 2131559227)));
      }

      ActionBarMenuItem var30 = var19.getItem(23);
      byte var18;
      if (this.canEditMessagesCount == 1 && this.selectedMessagesIds[0].size() + this.selectedMessagesIds[1].size() == 1) {
         var18 = 0;
      } else {
         var18 = 8;
      }

      var30.setVisibility(var18);
      var30 = var19.getItem(10);
      if (this.selectedMessagesCanCopyIds[0].size() + this.selectedMessagesCanCopyIds[1].size() != 0) {
         var18 = 0;
      } else {
         var18 = 8;
      }

      var30.setVisibility(var18);
      var30 = var19.getItem(22);
      if (this.selectedMessagesCanStarIds[0].size() + this.selectedMessagesCanStarIds[1].size() != 0) {
         var18 = 0;
      } else {
         var18 = 8;
      }

      var30.setVisibility(var18);
      ActionBarMenuItem var22 = var19.getItem(12);
      if (this.cantDeleteMessagesCount == 0) {
         var18 = 0;
      } else {
         var18 = 8;
      }

      var22.setVisibility(var18);
      this.checkActionBarMenu();
      this.scrimPaint = new Paint() {
         public void setAlpha(int var1) {
            super.setAlpha(var1);
            if (ChatActivity.access$7300(ChatActivity.this) != null) {
               ChatActivity.access$7400(ChatActivity.this).invalidate();
            }

         }
      };
      super.fragmentView = new SizeNotifierFrameLayout(var1) {
         ArrayList drawCaptionAfter = new ArrayList();
         ArrayList drawNamesAfter = new ArrayList();
         ArrayList drawTimeAfter = new ArrayList();
         int inputFieldHeight = 0;

         private void drawChildElement(Canvas var1, float var2, ChatMessageCell var3, int var4) {
            var1.save();
            var1.clipRect((float)ChatActivity.this.chatListView.getLeft(), var2, (float)ChatActivity.this.chatListView.getRight(), ChatActivity.this.chatListView.getY() + (float)ChatActivity.this.chatListView.getMeasuredHeight());
            var1.translate((float)(ChatActivity.this.chatListView.getLeft() + var3.getLeft()), ChatActivity.this.chatListView.getY() + (float)var3.getTop());
            if (var4 == 0) {
               var3.drawTime(var1);
            } else {
               boolean var5 = true;
               if (var4 == 1) {
                  var3.drawNamesLayout(var1);
               } else {
                  if ((var3.getCurrentPosition().flags & 1) != 0) {
                     var5 = false;
                  }

                  var3.drawCaptionLayout(var1, var5);
               }
            }

            var1.restore();
         }

         protected void dispatchDraw(Canvas var1) {
            super.dispatchDraw(var1);
            if (ChatActivity.this.scrimView != null) {
               var1.drawRect(0.0F, 0.0F, (float)this.getMeasuredWidth(), (float)this.getMeasuredHeight(), ChatActivity.this.scrimPaint);
               ChatActivity.this.chatListView.getY();
               ChatActivity.this.chatListView.getMeasuredHeight();
               int var2 = ChatActivity.this.chatListView.getTop() + ChatActivity.this.chatListView.getPaddingTop() - AndroidUtilities.dp(4.0F) + (ChatActivity.this.chatActivityEnterView.getMeasuredHeight() - AndroidUtilities.dp(51.0F));
               MessageObject.GroupedMessages var3;
               if (ChatActivity.this.scrimView instanceof ChatMessageCell) {
                  var3 = ((ChatMessageCell)ChatActivity.this.scrimView).getCurrentMessagesGroup();
               } else {
                  var3 = null;
               }

               int var4 = ChatActivity.this.chatListView.getChildCount();
               byte var5 = 0;

               int var6;
               int var12;
               for(var6 = 0; var6 < var4; ++var6) {
                  View var7 = ChatActivity.this.chatListView.getChildAt(var6);
                  ChatMessageCell var8;
                  MessageObject.GroupedMessages var9;
                  MessageObject.GroupedMessagePosition var10;
                  if (var7 instanceof ChatMessageCell) {
                     var8 = (ChatMessageCell)var7;
                     var9 = var8.getCurrentMessagesGroup();
                     var10 = var8.getCurrentPosition();
                  } else {
                     var8 = null;
                     var9 = null;
                     var10 = null;
                  }

                  if (var7 == ChatActivity.this.scrimView || var3 != null && var3 == var9) {
                     int var11;
                     label159: {
                        label158: {
                           if (var10 != null) {
                              var11 = var10.pw;
                              var12 = var10.spanSize;
                              if (var11 != var12 && var12 == 1000 && var10.siblingHeights == null && var9.hasSibling) {
                                 var12 = var8.getBackgroundDrawableLeft();
                                 break label158;
                              }

                              if (var10.siblingHeights != null) {
                                 var11 = var7.getBottom() - AndroidUtilities.dp((float)(var8.isPinnedBottom() + 1));
                                 var12 = 0;
                                 break label159;
                              }
                           }

                           var12 = 0;
                        }

                        var11 = 0;
                     }

                     float var13;
                     float var14;
                     float var15;
                     float var16;
                     if (var12 != 0) {
                        var13 = (float)(ChatActivity.this.chatListView.getLeft() + var12) + var7.getTranslationX();
                        var14 = (float)(ChatActivity.this.chatListView.getTop() + var7.getTop());
                        var15 = Math.max((float)ChatActivity.this.chatListView.getLeft(), var13);
                        var16 = Math.max((float)var2, var14);
                        var14 = Math.min((float)ChatActivity.this.chatListView.getRight(), var13 + (float)var7.getMeasuredWidth());
                        var13 = Math.min(ChatActivity.this.chatListView.getY() + (float)ChatActivity.this.chatListView.getMeasuredHeight(), ChatActivity.this.chatListView.getY() + (float)var7.getTop() + (float)var7.getMeasuredHeight());
                     } else if (var11 != 0) {
                        var13 = (float)ChatActivity.this.chatListView.getLeft() + var7.getTranslationX();
                        var14 = (float)(ChatActivity.this.chatListView.getTop() + var7.getTop());
                        var15 = Math.max((float)ChatActivity.this.chatListView.getLeft(), var13);
                        var16 = Math.max((float)var2, var14);
                        var14 = Math.min((float)ChatActivity.this.chatListView.getRight(), var13 + (float)var7.getMeasuredWidth());
                        var13 = Math.min(ChatActivity.this.chatListView.getY() + (float)ChatActivity.this.chatListView.getMeasuredHeight(), ChatActivity.this.chatListView.getY() + (float)var11);
                     } else {
                        var15 = Math.max((float)ChatActivity.this.chatListView.getLeft(), (float)ChatActivity.this.chatListView.getLeft() + var7.getX());
                        var16 = Math.max((float)var2, (float)ChatActivity.this.chatListView.getTop() + var7.getY());
                        var14 = Math.min((float)ChatActivity.this.chatListView.getRight(), (float)ChatActivity.this.chatListView.getLeft() + var7.getX() + (float)var7.getMeasuredWidth());
                        var13 = Math.min(ChatActivity.this.chatListView.getY() + (float)ChatActivity.this.chatListView.getMeasuredHeight(), ChatActivity.this.chatListView.getY() + var7.getY() + (float)var7.getMeasuredHeight());
                     }

                     if (var16 < var13) {
                        var1.save();
                        var1.clipRect(var15, var16, var14, var13);
                        var1.translate((float)(ChatActivity.this.chatListView.getLeft() + var7.getLeft()), ChatActivity.this.chatListView.getY() + (float)var7.getTop());
                        var7.draw(var1);
                        var1.restore();
                     }

                     if (var10 != null) {
                        if (var10.last || var10.minX == 0 && var10.minY == 0) {
                           if (var10.last) {
                              this.drawTimeAfter.add(var8);
                           }

                           if (var10.minX == 0 && var10.minY == 0 && var8.hasNameLayout()) {
                              this.drawNamesAfter.add(var8);
                           }
                        }

                        if (var8.hasCaptionLayout() && (var10.flags & 8) != 0) {
                           this.drawCaptionAfter.add(var8);
                        }
                     }
                  }
               }

               var6 = this.drawTimeAfter.size();
               if (var6 > 0) {
                  for(var12 = 0; var12 < var6; ++var12) {
                     this.drawChildElement(var1, (float)var2, (ChatMessageCell)this.drawTimeAfter.get(var12), 0);
                  }

                  this.drawTimeAfter.clear();
               }

               var6 = this.drawNamesAfter.size();
               if (var6 > 0) {
                  for(var12 = 0; var12 < var6; ++var12) {
                     this.drawChildElement(var1, (float)var2, (ChatMessageCell)this.drawNamesAfter.get(var12), 1);
                  }

                  this.drawNamesAfter.clear();
               }

               var6 = this.drawCaptionAfter.size();
               if (var6 > 0) {
                  for(var12 = var5; var12 < var6; ++var12) {
                     ChatMessageCell var17 = (ChatMessageCell)this.drawCaptionAfter.get(var12);
                     if (var17.getCurrentPosition() != null) {
                        this.drawChildElement(var1, (float)var2, var17, 2);
                     }
                  }

                  this.drawCaptionAfter.clear();
               }

               if (ChatActivity.this.pagedownButton != null && ChatActivity.this.pagedownButton.getTag() != null) {
                  super.drawChild(var1, ChatActivity.this.pagedownButton, SystemClock.uptimeMillis());
               }

               if (ChatActivity.this.mentiondownButton != null && ChatActivity.this.mentiondownButton.getTag() != null) {
                  super.drawChild(var1, ChatActivity.this.mentiondownButton, SystemClock.uptimeMillis());
               }

               if (ChatActivity.this.floatingDateView != null && ChatActivity.this.floatingDateView.getTag() != null) {
                  super.drawChild(var1, ChatActivity.this.floatingDateView, SystemClock.uptimeMillis());
               }
            }

         }

         public boolean dispatchTouchEvent(MotionEvent var1) {
            if (ChatActivity.this.scrimView == null) {
               ChatActivityEnterView var2 = ChatActivity.this.chatActivityEnterView;
               if (var2 == null || !var2.isStickersExpanded() || var1.getY() >= ChatActivity.this.chatActivityEnterView.getY()) {
                  return super.dispatchTouchEvent(var1);
               }
            }

            return false;
         }

         protected boolean drawChild(Canvas var1, View var2, long var3) {
            View var5 = ChatActivity.this.scrimView;
            byte var6 = 0;
            byte var7 = 0;
            if (var5 == null || var2 != ChatActivity.this.pagedownButton && var2 != ChatActivity.this.mentiondownButton && var2 != ChatActivity.this.floatingDateView) {
               boolean var8;
               boolean var9;
               boolean var10;
               MessageObject var14;
               label85: {
                  label98: {
                     var14 = MediaController.getInstance().getPlayingMessageObject();
                     if (var14 != null && var14.eventId == 0L) {
                        var8 = var14.isRoundVideo();
                        if (var8) {
                           break label98;
                        }

                        var9 = var8;
                        if (var14.isVideo()) {
                           break label98;
                        }
                     } else {
                        var9 = false;
                     }

                     var10 = false;
                     break label85;
                  }

                  var10 = true;
                  var9 = var8;
               }

               int var16;
               if (var2 == ChatActivity.this.videoPlayerContainer) {
                  if (var14 != null && var14.type == 5) {
                     if (Theme.chat_roundVideoShadow != null && ChatActivity.this.aspectRatioFrameLayout.isDrawingReady()) {
                        int var11 = (int)var2.getX() - AndroidUtilities.dp(3.0F);
                        var16 = (int)var2.getY() - AndroidUtilities.dp(2.0F);
                        Theme.chat_roundVideoShadow.setAlpha(255);
                        Theme.chat_roundVideoShadow.setBounds(var11, var16, AndroidUtilities.roundMessageSize + var11 + AndroidUtilities.dp(6.0F), AndroidUtilities.roundMessageSize + var16 + AndroidUtilities.dp(6.0F));
                        Theme.chat_roundVideoShadow.draw(var1);
                     }

                     var9 = super.drawChild(var1, var2, var3);
                  } else if (var2.getTag() == null) {
                     float var12 = var2.getTranslationY();
                     var2.setTranslationY((float)(-AndroidUtilities.dp(1000.0F)));
                     var9 = super.drawChild(var1, var2, var3);
                     var2.setTranslationY(var12);
                  } else {
                     var9 = false;
                  }
               } else {
                  var8 = super.drawChild(var1, var2, var3);
                  if (var10 && var2 == ChatActivity.this.chatListView && var14.type != 5 && ChatActivity.this.videoPlayerContainer != null && ChatActivity.this.videoPlayerContainer.getTag() != null) {
                     super.drawChild(var1, ChatActivity.this.videoPlayerContainer, var3);
                     if (ChatActivity.this.drawLaterRoundProgressCell != null) {
                        var1.save();
                        var1.translate(ChatActivity.this.drawLaterRoundProgressCell.getX(), (float)ChatActivity.this.drawLaterRoundProgressCell.getTop() + ChatActivity.this.chatListView.getY());
                        if (var9) {
                           ChatActivity.this.drawLaterRoundProgressCell.drawRoundProgress(var1);
                           ChatActivity.this.drawLaterRoundProgressCell.drawOverlays(var1);
                        } else {
                           ChatActivity.this.drawLaterRoundProgressCell.drawOverlays(var1);
                           if (ChatActivity.this.drawLaterRoundProgressCell.needDrawTime()) {
                              ChatActivity.this.drawLaterRoundProgressCell.drawTime(var1);
                           }
                        }

                        var1.restore();
                     }
                  }

                  var9 = var8;
               }

               if (var2 == ChatActivity.access$8300(ChatActivity.this) && ChatActivity.access$8400(ChatActivity.this) != null) {
                  ActionBarLayout var13 = ChatActivity.access$8800(ChatActivity.this);
                  var16 = var6;
                  if (ChatActivity.access$8500(ChatActivity.this).getVisibility() == 0) {
                     int var15 = ChatActivity.access$8600(ChatActivity.this).getMeasuredHeight();
                     var16 = var7;
                     if (ChatActivity.access$8700(ChatActivity.this)) {
                        var16 = var7;
                        if (VERSION.SDK_INT >= 21) {
                           var16 = AndroidUtilities.statusBarHeight;
                        }
                     }

                     var16 += var15;
                  }

                  var13.drawHeaderShadow(var1, var16);
               }

               return var9;
            } else {
               return false;
            }
         }

         protected boolean isActionBarVisible() {
            boolean var1;
            if (ChatActivity.access$8900(ChatActivity.this).getVisibility() == 0) {
               var1 = true;
            } else {
               var1 = false;
            }

            return var1;
         }

         // $FF: synthetic method
         public void lambda$onMeasure$0$ChatActivity$8(int var1) {
            ChatActivity.this.chatLayoutManager.scrollToPositionWithOffset(var1, ChatActivity.this.scrollToOffsetOnRecreate);
         }

         protected void onAttachedToWindow() {
            super.onAttachedToWindow();
            MessageObject var1 = MediaController.getInstance().getPlayingMessageObject();
            if (var1 != null && (var1.isRoundVideo() || var1.isVideo()) && var1.eventId == 0L && var1.getDialogId() == ChatActivity.this.dialog_id) {
               MediaController.getInstance().setTextureView(ChatActivity.this.createTextureView(false), ChatActivity.this.aspectRatioFrameLayout, ChatActivity.this.videoPlayerContainer, true);
            }

         }

         protected void onLayout(boolean var1, int var2, int var3, int var4, int var5) {
            int var6 = this.getChildCount();
            int var7;
            if (this.getKeyboardHeight() <= AndroidUtilities.dp(20.0F) && !AndroidUtilities.isInMultiwindow) {
               var7 = ChatActivity.this.chatActivityEnterView.getEmojiPadding();
            } else {
               var7 = 0;
            }

            this.setBottomClip(var7);

            for(int var8 = 0; var8 < var6; ++var8) {
               View var9 = this.getChildAt(var8);
               if (var9 != null && var9.getVisibility() != 8) {
                  LayoutParams var10 = (LayoutParams)var9.getLayoutParams();
                  int var11 = var9.getMeasuredWidth();
                  int var12 = var9.getMeasuredHeight();
                  int var13 = var10.gravity;
                  int var14 = var13;
                  if (var13 == -1) {
                     var14 = 51;
                  }

                  int var15;
                  int var16;
                  label146: {
                     var15 = var14 & 112;
                     var14 = var14 & 7 & 7;
                     if (var14 != 1) {
                        if (var14 != 5) {
                           var16 = var10.leftMargin;
                           break label146;
                        }

                        var14 = var4 - var11;
                        var13 = var10.rightMargin;
                     } else {
                        var14 = (var4 - var2 - var11) / 2 + var10.leftMargin;
                        var13 = var10.rightMargin;
                     }

                     var16 = var14 - var13;
                  }

                  label140: {
                     if (var15 != 16) {
                        if (var15 == 48) {
                           var13 = var10.topMargin + this.getPaddingTop();
                           var14 = var13;
                           if (var9 != ChatActivity.access$11000(ChatActivity.this)) {
                              var14 = var13;
                              if (ChatActivity.access$11100(ChatActivity.this).getVisibility() == 0) {
                                 var13 += ChatActivity.access$11200(ChatActivity.this).getMeasuredHeight();
                                 var14 = var13;
                                 if (ChatActivity.access$11300(ChatActivity.this)) {
                                    var14 = var13;
                                    if (VERSION.SDK_INT >= 21) {
                                       var14 = var13 + AndroidUtilities.statusBarHeight;
                                    }
                                 }
                              }
                           }
                           break label140;
                        }

                        if (var15 != 80) {
                           var14 = var10.topMargin;
                           break label140;
                        }

                        var13 = var5 - var7 - var3 - var12;
                        var14 = var10.bottomMargin;
                     } else {
                        var13 = (var5 - var7 - var3 - var12) / 2 + var10.topMargin;
                        var14 = var10.bottomMargin;
                     }

                     var14 = var13 - var14;
                  }

                  label132: {
                     label168: {
                        if (var9 == ChatActivity.this.mentionContainer) {
                           var15 = ChatActivity.this.chatActivityEnterView.getMeasuredHeight();
                           var13 = AndroidUtilities.dp(2.0F);
                        } else {
                           if (var9 == ChatActivity.this.pagedownButton) {
                              var13 = var14;
                              if (ChatActivity.access$11400(ChatActivity.this)) {
                                 break label132;
                              }

                              var13 = ChatActivity.this.chatActivityEnterView.getMeasuredHeight();
                              break label168;
                           }

                           if (var9 == ChatActivity.this.mentiondownButton) {
                              var13 = var14;
                              if (ChatActivity.access$11500(ChatActivity.this)) {
                                 break label132;
                              }

                              var13 = ChatActivity.this.chatActivityEnterView.getMeasuredHeight();
                              break label168;
                           }

                           if (var9 == ChatActivity.this.emptyViewContainer) {
                              var15 = this.inputFieldHeight / 2;
                              if (ChatActivity.access$11600(ChatActivity.this).getVisibility() == 0) {
                                 var13 = ChatActivity.access$11700(ChatActivity.this).getMeasuredHeight() / 2;
                              } else {
                                 var13 = 0;
                              }
                           } else {
                              if (ChatActivity.this.chatActivityEnterView.isPopupView(var9)) {
                                 if (AndroidUtilities.isInMultiwindow) {
                                    var13 = ChatActivity.this.chatActivityEnterView.getTop() - var9.getMeasuredHeight() + AndroidUtilities.dp(1.0F);
                                 } else {
                                    var13 = ChatActivity.this.chatActivityEnterView.getBottom();
                                 }
                                 break label132;
                              }

                              if (var9 == ChatActivity.this.gifHintTextView || var9 == ChatActivity.this.voiceHintTextView || var9 == ChatActivity.this.mediaBanTooltip) {
                                 var13 = this.inputFieldHeight;
                                 break label168;
                              }

                              if (var9 != ChatActivity.this.chatListView) {
                                 if (var9 == ChatActivity.this.progressView) {
                                    var13 = var14;
                                    if (!ChatActivity.this.chatActivityEnterView.isTopViewVisible()) {
                                       break label132;
                                    }

                                    var13 = AndroidUtilities.dp(48.0F);
                                 } else {
                                    if (var9 != ChatActivity.access$12200(ChatActivity.this)) {
                                       if (var9 == ChatActivity.this.videoPlayerContainer) {
                                          var13 = ChatActivity.access$12400(ChatActivity.this).getMeasuredHeight();
                                       } else {
                                          if (var9 != ChatActivity.this.instantCameraView) {
                                             var13 = var14;
                                             if (var9 != ChatActivity.this.overlayView) {
                                                break label132;
                                             }
                                          }

                                          var13 = 0;
                                       }
                                       break label132;
                                    }

                                    var13 = var14;
                                    if (ChatActivity.access$12300(ChatActivity.this)) {
                                       var13 = var14;
                                       if (VERSION.SDK_INT >= 21) {
                                          var13 = var14 + AndroidUtilities.statusBarHeight;
                                       }
                                    }

                                    var15 = this.getPaddingTop();
                                    var14 = var13;
                                    var13 = var15;
                                 }
                                 break label168;
                              }

                              var13 = var14;
                              if (ChatActivity.access$12100(ChatActivity.this)) {
                                 break label132;
                              }

                              var15 = this.inputFieldHeight;
                              var13 = AndroidUtilities.dp(51.0F);
                           }
                        }

                        var13 = var15 - var13;
                     }

                     var13 = var14 - var13;
                  }

                  var9.layout(var16, var13, var11 + var16, var12 + var13);
               }
            }

            ChatActivity.this.updateMessagesVisiblePart(true);
            ChatActivity.this.updateTextureViewPosition(false);
            if (!ChatActivity.this.scrollingChatListView) {
               ChatActivity.this.checkAutoDownloadMessages(false);
            }

            this.notifyHeightChanged();
         }

         protected void onMeasure(int var1, int var2) {
            int var3 = MeasureSpec.getSize(var1);
            int var4 = MeasureSpec.getSize(var2);
            this.setMeasuredDimension(var3, var4);
            int var5 = var4 - this.getPaddingTop();
            this.measureChildWithMargins(ChatActivity.access$9100(ChatActivity.this), var1, 0, var2, 0);
            int var6 = ChatActivity.access$9200(ChatActivity.this).getMeasuredHeight();
            int var7 = var5;
            if (ChatActivity.access$9300(ChatActivity.this).getVisibility() == 0) {
               var7 = var5 - var6;
            }

            int var8;
            if (this.getKeyboardHeight() <= AndroidUtilities.dp(20.0F)) {
               var5 = var4;
               var8 = var7;
               if (!AndroidUtilities.isInMultiwindow) {
                  var8 = var7 - ChatActivity.this.chatActivityEnterView.getEmojiPadding();
                  var5 = var4 - ChatActivity.this.chatActivityEnterView.getEmojiPadding();
               }
            } else {
               ChatActivity.this.globalIgnoreLayout = true;
               ChatActivity.this.chatActivityEnterView.hideEmojiView();
               ChatActivity.this.globalIgnoreLayout = false;
               var8 = var7;
               var5 = var4;
            }

            int var9 = this.getChildCount();
            this.measureChildWithMargins(ChatActivity.this.chatActivityEnterView, var1, 0, var2, 0);
            if (ChatActivity.access$9500(ChatActivity.this)) {
               this.inputFieldHeight = 0;
               var7 = 0;
            } else {
               this.inputFieldHeight = ChatActivity.this.chatActivityEnterView.getMeasuredHeight();
               var7 = AndroidUtilities.dp(49.0F);
            }

            for(var4 = 0; var4 < var9; ++var4) {
               View var10 = this.getChildAt(var4);
               if (var10 != null && var10.getVisibility() != 8) {
                  ChatActivity var11 = ChatActivity.this;
                  if (var10 != var11.chatActivityEnterView && var10 != ChatActivity.access$9600(var11)) {
                     int var12;
                     int var13;
                     int var18;
                     if (var10 == ChatActivity.this.chatListView) {
                        if (ChatActivity.this.chatActivityEnterView.getAlpha() != 1.0F) {
                           ChatActivity.this.chatListView.setTranslationY((float)(this.inputFieldHeight - AndroidUtilities.dp(51.0F)));
                        }

                        var11 = ChatActivity.this;
                        if (ChatActivity.access$9700(var11)) {
                           var12 = 0;
                        } else {
                           var12 = this.inputFieldHeight - AndroidUtilities.dp(51.0F);
                        }

                        var11.chatListViewClipTop = var12;
                        var13 = MeasureSpec.makeMeasureSpec(var3, 1073741824);
                        var18 = AndroidUtilities.dp(10.0F);
                        if (ChatActivity.access$9800(ChatActivity.this) && VERSION.SDK_INT >= 21) {
                           var12 = AndroidUtilities.statusBarHeight;
                        } else {
                           var12 = 0;
                        }

                        var10.measure(var13, MeasureSpec.makeMeasureSpec(Math.max(var18, var8 - var7 - var12), 1073741824));
                     } else {
                        byte var14;
                        if (var10 == ChatActivity.this.progressView) {
                           var13 = MeasureSpec.makeMeasureSpec(var3, 1073741824);
                           int var15 = AndroidUtilities.dp(10.0F);
                           int var16 = this.inputFieldHeight;
                           if (ChatActivity.access$10000(ChatActivity.this) && VERSION.SDK_INT >= 21) {
                              var12 = AndroidUtilities.statusBarHeight;
                           } else {
                              var12 = 0;
                           }

                           if (ChatActivity.this.chatActivityEnterView.isTopViewVisible()) {
                              var14 = 48;
                           } else {
                              var14 = 0;
                           }

                           var10.measure(var13, MeasureSpec.makeMeasureSpec(Math.max(var15, var8 - var16 - var12 + AndroidUtilities.dp((float)(var14 + 2))), 1073741824));
                        } else if (var10 != ChatActivity.this.instantCameraView && var10 != ChatActivity.this.overlayView) {
                           if (var10 == ChatActivity.this.emptyViewContainer) {
                              var10.measure(MeasureSpec.makeMeasureSpec(var3, 1073741824), MeasureSpec.makeMeasureSpec(var8, 1073741824));
                           } else if (ChatActivity.this.chatActivityEnterView.isPopupView(var10)) {
                              if (AndroidUtilities.isInMultiwindow) {
                                 if (AndroidUtilities.isTablet()) {
                                    var10.measure(MeasureSpec.makeMeasureSpec(var3, 1073741824), MeasureSpec.makeMeasureSpec(Math.min(AndroidUtilities.dp(320.0F), var8 - this.inputFieldHeight + var6 - AndroidUtilities.statusBarHeight + this.getPaddingTop()), 1073741824));
                                 } else {
                                    var10.measure(MeasureSpec.makeMeasureSpec(var3, 1073741824), MeasureSpec.makeMeasureSpec(var8 - this.inputFieldHeight + var6 - AndroidUtilities.statusBarHeight + this.getPaddingTop(), 1073741824));
                                 }
                              } else {
                                 var12 = var10.getLayoutParams().height;
                                 var10.measure(MeasureSpec.makeMeasureSpec(var3, 1073741824), MeasureSpec.makeMeasureSpec(var10.getLayoutParams().height, 1073741824));
                              }
                           } else if (var10 == ChatActivity.this.mentionContainer) {
                              LayoutParams var17 = (LayoutParams)ChatActivity.this.mentionContainer.getLayoutParams();
                              if (ChatActivity.this.mentionsAdapter.isBannedInline()) {
                                 var10.measure(MeasureSpec.makeMeasureSpec(var3, 1073741824), MeasureSpec.makeMeasureSpec(var8, Integer.MIN_VALUE));
                              } else {
                                 ChatActivity.this.mentionListViewIgnoreLayout = true;
                                 if (ChatActivity.this.mentionsAdapter.isBotContext() && ChatActivity.this.mentionsAdapter.isMediaLayout()) {
                                    var18 = ChatActivity.this.mentionGridLayoutManager.getRowsCount(var3) * 102;
                                    var12 = var18;
                                    if (ChatActivity.this.mentionsAdapter.isBotContext()) {
                                       var12 = var18;
                                       if (ChatActivity.this.mentionsAdapter.getBotContextSwitch() != null) {
                                          var12 = var18 + 34;
                                       }
                                    }

                                    var13 = ChatActivity.this.chatActivityEnterView.getMeasuredHeight();
                                    if (var12 != 0) {
                                       var18 = AndroidUtilities.dp(2.0F);
                                    } else {
                                       var18 = 0;
                                    }

                                    var18 += var8 - var13;
                                    var12 = Math.max(0, var18 - AndroidUtilities.dp(Math.min((float)var12, 122.399994F)));
                                    if (ChatActivity.this.mentionLayoutManager.getReverseLayout()) {
                                       ChatActivity.this.mentionListView.setPadding(0, 0, 0, var12);
                                    } else {
                                       ChatActivity.this.mentionListView.setPadding(0, var12, 0, 0);
                                    }

                                    var12 = var18;
                                 } else {
                                    var12 = ChatActivity.this.mentionsAdapter.getItemCount();
                                    if (ChatActivity.this.mentionsAdapter.isBotContext()) {
                                       if (ChatActivity.this.mentionsAdapter.getBotContextSwitch() != null) {
                                          --var12;
                                          var14 = 36;
                                       } else {
                                          var14 = 0;
                                       }

                                       var12 = var14 + var12 * 68;
                                    } else {
                                       var12 = var12 * 36 + 0;
                                    }

                                    var13 = ChatActivity.this.chatActivityEnterView.getMeasuredHeight();
                                    if (var12 != 0) {
                                       var18 = AndroidUtilities.dp(2.0F);
                                    } else {
                                       var18 = 0;
                                    }

                                    var18 += var8 - var13;
                                    var12 = Math.max(0, var18 - AndroidUtilities.dp(Math.min((float)var12, 122.399994F)));
                                    if (ChatActivity.this.mentionLayoutManager.getReverseLayout()) {
                                       ChatActivity.this.mentionListView.setPadding(0, 0, 0, var12);
                                       var12 = var18;
                                    } else {
                                       ChatActivity.this.mentionListView.setPadding(0, var12, 0, 0);
                                       var12 = var18;
                                    }
                                 }

                                 var17.height = var12;
                                 var17.topMargin = 0;
                                 ChatActivity.this.mentionListViewIgnoreLayout = false;
                                 var10.measure(MeasureSpec.makeMeasureSpec(var3, 1073741824), MeasureSpec.makeMeasureSpec(var17.height, 1073741824));
                              }
                           } else {
                              this.measureChildWithMargins(var10, var1, 0, var2, 0);
                           }
                        } else {
                           var10.measure(MeasureSpec.makeMeasureSpec(var3, 1073741824), MeasureSpec.makeMeasureSpec(var5 - this.inputFieldHeight + AndroidUtilities.dp(3.0F), 1073741824));
                        }
                     }
                  }
               }
            }

            if (ChatActivity.this.fixPaddingsInLayout) {
               ChatActivity.this.globalIgnoreLayout = true;
               ChatActivity.this.checkListViewPaddingsInternal();
               ChatActivity.this.fixPaddingsInLayout = false;
               ChatActivity.this.chatListView.measure(MeasureSpec.makeMeasureSpec(ChatActivity.this.chatListView.getMeasuredWidth(), 1073741824), MeasureSpec.makeMeasureSpec(ChatActivity.this.chatListView.getMeasuredHeight(), 1073741824));
               ChatActivity.this.globalIgnoreLayout = false;
            }

            if (ChatActivity.this.scrollToPositionOnRecreate != -1) {
               AndroidUtilities.runOnUIThread(new _$$Lambda$ChatActivity$8$_XCV7vWC5uHsxQLMfJWVnGoel04(this, ChatActivity.this.scrollToPositionOnRecreate));
               ChatActivity.this.globalIgnoreLayout = true;
               ChatActivity.this.scrollToPositionOnRecreate = -1;
               ChatActivity.this.globalIgnoreLayout = false;
            }

         }

         public void requestLayout() {
            if (!ChatActivity.this.globalIgnoreLayout) {
               super.requestLayout();
            }
         }
      };
      this.contentView = (SizeNotifierFrameLayout)super.fragmentView;
      this.contentView.setBackgroundImage(Theme.getCachedWallpaper(), Theme.isWallpaperMotion());
      this.emptyViewContainer = new FrameLayout(var1);
      FrameLayout var23 = this.emptyViewContainer;
      byte var7 = 4;
      var23.setVisibility(4);
      this.contentView.addView(this.emptyViewContainer, LayoutHelper.createFrame(-1, -2, 17));
      this.emptyViewContainer.setOnTouchListener(_$$Lambda$ChatActivity$hcAWiiBslensQzGGfNwnu6FWkPI.INSTANCE);
      if (this.currentEncryptedChat == null) {
         label412: {
            TLRPC.User var25 = this.currentUser;
            if (var25 == null || !var25.self) {
               var16 = this.currentChat;
               if (var16 == null || !var16.creator) {
                  label308: {
                     this.emptyView = new TextView(var1);
                     var25 = this.currentUser;
                     if (var25 != null) {
                        var2 = var25.id;
                        if (var2 != 777000 && var2 != 429000 && var2 != 4244000 && MessagesController.isSupportUser(var25)) {
                           this.emptyView.setText(LocaleController.getString("GotAQuestion", 2131559596));
                           break label308;
                        }
                     }

                     this.emptyView.setText(LocaleController.getString("NoMessages", 2131559932));
                  }

                  this.emptyView.setTextSize(1, 14.0F);
                  this.emptyView.setGravity(17);
                  this.emptyView.setTextColor(Theme.getColor("chat_serviceText"));
                  this.emptyView.setBackgroundResource(2131165871);
                  this.emptyView.getBackground().setColorFilter(Theme.colorFilter);
                  this.emptyView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                  this.emptyView.setPadding(AndroidUtilities.dp(10.0F), AndroidUtilities.dp(2.0F), AndroidUtilities.dp(10.0F), AndroidUtilities.dp(3.0F));
                  this.emptyViewContainer.addView(this.emptyView, new LayoutParams(-2, -2, 17));
                  break label412;
               }
            }

            if (this.currentChat != null) {
               var18 = 1;
            } else {
               var18 = 2;
            }

            this.bigEmptyView = new ChatBigEmptyView(var1, var18);
            this.emptyViewContainer.addView(this.bigEmptyView, new LayoutParams(-2, -2, 17));
            if (this.currentChat != null) {
               this.bigEmptyView.setStatusText(AndroidUtilities.replaceTags(LocaleController.getString("GroupEmptyTitle1", 2131559607)));
            }
         }
      } else {
         this.bigEmptyView = new ChatBigEmptyView(var1, 0);
         if (this.currentEncryptedChat.admin_id == UserConfig.getInstance(super.currentAccount).getClientUserId()) {
            this.bigEmptyView.setStatusText(LocaleController.formatString("EncryptedPlaceholderTitleOutgoing", 2131559359, UserObject.getFirstName(this.currentUser)));
         } else {
            this.bigEmptyView.setStatusText(LocaleController.formatString("EncryptedPlaceholderTitleIncoming", 2131559358, UserObject.getFirstName(this.currentUser)));
         }

         this.emptyViewContainer.addView(this.bigEmptyView, new LayoutParams(-2, -2, 17));
      }

      CharSequence var28;
      label300: {
         ChatActivityEnterView var27 = this.chatActivityEnterView;
         if (var27 != null) {
            var27.onDestroy();
            if (!this.chatActivityEnterView.isEditingMessage()) {
               var28 = this.chatActivityEnterView.getFieldText();
               break label300;
            }
         }

         var28 = null;
      }

      MentionsAdapter var34 = this.mentionsAdapter;
      if (var34 != null) {
         var34.onDestroy();
      }

      this.chatListView = new RecyclerListView(var1) {
         ArrayList drawCaptionAfter = new ArrayList();
         ArrayList drawNamesAfter = new ArrayList();
         ArrayList drawTimeAfter = new ArrayList();
         private float endedTrackingX;
         private long lastReplyButtonAnimationTime;
         private long lastTrackingAnimationTime;
         private int lastWidth;
         private boolean maybeStartTracking;
         private float replyButtonProgress;
         private boolean slideAnimationInProgress;
         private ChatMessageCell slidingView;
         private boolean startedTracking;
         private int startedTrackingPointerId;
         private int startedTrackingX;
         private int startedTrackingY;
         private float trackAnimationProgress;
         private boolean wasTrackingVibrate;

         private void drawReplyButton(Canvas var1) {
            ChatMessageCell var2 = this.slidingView;
            if (var2 != null) {
               float var3 = var2.getTranslationX();
               long var4 = System.currentTimeMillis();
               long var6 = Math.min(17L, var4 - this.lastReplyButtonAnimationTime);
               this.lastReplyButtonAnimationTime = var4;
               boolean var8;
               if (var3 <= (float)(-AndroidUtilities.dp(50.0F))) {
                  var8 = true;
               } else {
                  var8 = false;
               }

               if (var8) {
                  var3 = this.replyButtonProgress;
                  if (var3 < 1.0F) {
                     this.replyButtonProgress = var3 + (float)var6 / 180.0F;
                     if (this.replyButtonProgress > 1.0F) {
                        this.replyButtonProgress = 1.0F;
                     } else {
                        this.invalidate();
                     }
                  }
               } else {
                  var3 = this.replyButtonProgress;
                  if (var3 > 0.0F) {
                     this.replyButtonProgress = var3 - (float)var6 / 180.0F;
                     if (this.replyButtonProgress < 0.0F) {
                        this.replyButtonProgress = 0.0F;
                     } else {
                        this.invalidate();
                     }
                  }
               }

               float var9;
               if (var8) {
                  var3 = this.replyButtonProgress;
                  if (var3 <= 0.8F) {
                     var3 = var3 / 0.8F * 1.2F;
                  } else {
                     var3 = 1.2F - (var3 - 0.8F) / 0.2F * 0.2F;
                  }

                  var9 = Math.min(255.0F, this.replyButtonProgress / 0.8F * 255.0F);
               } else {
                  var3 = this.replyButtonProgress;
                  var9 = Math.min(255.0F, var3 * 255.0F);
               }

               int var11 = (int)var9;
               Theme.chat_shareDrawable.setAlpha(var11);
               Theme.chat_replyIconDrawable.setAlpha(var11);
               float var10 = (float)this.getMeasuredWidth() + this.slidingView.getTranslationX() / 2.0F;
               var9 = (float)(this.slidingView.getTop() + this.slidingView.getMeasuredHeight() / 2);
               if (Theme.isCustomTheme() && !Theme.hasThemeKey("chat_shareBackground")) {
                  Theme.chat_shareDrawable.setColorFilter(Theme.colorFilter2);
               } else {
                  Theme.chat_shareDrawable.setColorFilter(Theme.getShareColorFilter(Theme.getColor("chat_shareBackground"), false));
               }

               Theme.chat_shareDrawable.setBounds((int)(var10 - (float)AndroidUtilities.dp(14.0F) * var3), (int)(var9 - (float)AndroidUtilities.dp(14.0F) * var3), (int)((float)AndroidUtilities.dp(14.0F) * var3 + var10), (int)((float)AndroidUtilities.dp(14.0F) * var3 + var9));
               Theme.chat_shareDrawable.draw(var1);
               Theme.chat_replyIconDrawable.setBounds((int)(var10 - (float)AndroidUtilities.dp(7.0F) * var3), (int)(var9 - (float)AndroidUtilities.dp(6.0F) * var3), (int)(var10 + (float)AndroidUtilities.dp(7.0F) * var3), (int)(var9 + (float)AndroidUtilities.dp(5.0F) * var3));
               Theme.chat_replyIconDrawable.draw(var1);
               Theme.chat_shareDrawable.setAlpha(255);
               Theme.chat_replyIconDrawable.setAlpha(255);
            }
         }

         private void processTouchEvent(MotionEvent var1) {
            ChatActivity.this.wasManualScroll = true;
            if (var1.getAction() == 0 && !this.startedTracking && !this.maybeStartTracking) {
               View var10 = this.getPressedChildView();
               if (var10 instanceof ChatMessageCell) {
                  this.slidingView = (ChatMessageCell)var10;
                  MessageObject var11 = this.slidingView.getMessageObject();
                  TLRPC.EncryptedChat var3 = ChatActivity.this.currentEncryptedChat;
                  if ((var3 == null || AndroidUtilities.getPeerLayerVersion(var3.layer) >= 46) && (ChatActivity.this.getMessageType(var11) != 1 || var11.getDialogId() != ChatActivity.this.mergeDialogId && !var11.needDrawBluredPreview()) && (ChatActivity.this.currentEncryptedChat != null || var11.getId() >= 0) && (ChatActivity.this.bottomOverlayChat == null || ChatActivity.this.bottomOverlayChat.getVisibility() != 0) && !ChatActivity.this.isBroadcast) {
                     TLRPC.Chat var12 = ChatActivity.this.currentChat;
                     if (var12 == null || !ChatObject.isNotInChat(var12) && (!ChatObject.isChannel(ChatActivity.this.currentChat) || ChatObject.canPost(ChatActivity.this.currentChat) || ChatActivity.this.currentChat.megagroup) && ChatObject.canSendMessages(ChatActivity.this.currentChat)) {
                        this.startedTrackingPointerId = var1.getPointerId(0);
                        this.maybeStartTracking = true;
                        this.startedTrackingX = (int)var1.getX();
                        this.startedTrackingY = (int)var1.getY();
                        return;
                     }
                  }

                  this.slidingView = null;
                  return;
               }
            } else if (this.slidingView != null && var1.getAction() == 2 && var1.getPointerId(0) == this.startedTrackingPointerId) {
               int var4 = Math.max(AndroidUtilities.dp(-80.0F), Math.min(0, (int)(var1.getX() - (float)this.startedTrackingX)));
               int var5 = Math.abs((int)var1.getY() - this.startedTrackingY);
               if (this.getScrollState() == 0 && this.maybeStartTracking && !this.startedTracking && (float)var4 <= -AndroidUtilities.getPixelsInCM(0.4F, true) && Math.abs(var4) / 3 > var5) {
                  MotionEvent var2 = MotionEvent.obtain(0L, 0L, 3, 0.0F, 0.0F, 0);
                  this.slidingView.onTouchEvent(var2);
                  super.onInterceptTouchEvent(var2);
                  var2.recycle();
                  ChatActivity.this.chatLayoutManager.setCanScrollVertically(false);
                  this.maybeStartTracking = false;
                  this.startedTracking = true;
                  this.startedTrackingX = (int)var1.getX();
                  if (this.getParent() != null) {
                     this.getParent().requestDisallowInterceptTouchEvent(true);
                  }
               } else if (this.startedTracking) {
                  if (Math.abs(var4) >= AndroidUtilities.dp(50.0F)) {
                     if (!this.wasTrackingVibrate) {
                        try {
                           this.performHapticFeedback(3, 2);
                        } catch (Exception var7) {
                        }

                        this.wasTrackingVibrate = true;
                     }
                  } else {
                     this.wasTrackingVibrate = false;
                  }

                  ChatMessageCell var8 = this.slidingView;
                  float var6 = (float)var4;
                  var8.setTranslationX(var6);
                  MessageObject var9 = this.slidingView.getMessageObject();
                  if (var9.isRoundVideo() || var9.isVideo()) {
                     ChatActivity.this.updateTextureViewPosition(false);
                  }

                  this.setGroupTranslationX(this.slidingView, var6);
                  this.invalidate();
               }
            } else if (this.slidingView != null && var1.getPointerId(0) == this.startedTrackingPointerId && (var1.getAction() == 3 || var1.getAction() == 1 || var1.getAction() == 6)) {
               if (Math.abs(this.slidingView.getTranslationX()) >= (float)AndroidUtilities.dp(50.0F)) {
                  ChatActivity.this.showFieldPanelForReply(this.slidingView.getMessageObject());
               }

               this.endedTrackingX = this.slidingView.getTranslationX();
               this.lastTrackingAnimationTime = System.currentTimeMillis();
               this.trackAnimationProgress = 0.0F;
               this.invalidate();
               this.maybeStartTracking = false;
               this.startedTracking = false;
               ChatActivity.this.chatLayoutManager.setCanScrollVertically(true);
            }

         }

         private void setGroupTranslationX(ChatMessageCell var1, float var2) {
            MessageObject.GroupedMessages var7 = var1.getCurrentMessagesGroup();
            if (var7 != null) {
               int var3 = this.getChildCount();

               for(int var4 = 0; var4 < var3; ++var4) {
                  View var5 = this.getChildAt(var4);
                  if (var5 != this && var5 instanceof ChatMessageCell) {
                     ChatMessageCell var6 = (ChatMessageCell)var5;
                     if (var6.getCurrentMessagesGroup() == var7) {
                        var6.setTranslationX(var2);
                        var6.invalidate();
                     }
                  }
               }

               this.invalidate();
            }
         }

         public AccessibilityNodeInfo createAccessibilityNodeInfo() {
            return ChatActivity.this.currentEncryptedChat != null ? null : super.createAccessibilityNodeInfo();
         }

         protected void dispatchDraw(Canvas var1) {
            ChatActivity.this.drawLaterRoundProgressCell = null;
            int var2 = this.getChildCount();

            for(int var3 = 0; var3 < var2; ++var3) {
               View var4 = this.getChildAt(var3);
               if (var4 instanceof ChatMessageCell) {
                  ChatMessageCell var5 = (ChatMessageCell)var4;
                  MessageObject.GroupedMessagePosition var7 = var5.getCurrentPosition();
                  if (var5.isDrawingSelectionBackground() && (var7 == null || (var7.flags & 2) != 0)) {
                     int var6 = Color.alpha(Theme.getColor("chat_selectedBackground"));
                     Theme.chat_replyLinePaint.setColor(Theme.getColor("chat_selectedBackground"));
                     Theme.chat_replyLinePaint.setAlpha((int)((float)var6 * var5.getHightlightAlpha()));
                     var1.drawRect(0.0F, (float)var5.getTop(), (float)this.getMeasuredWidth(), (float)var5.getBottom(), Theme.chat_replyLinePaint);
                  }
               }
            }

            super.dispatchDraw(var1);
         }

         public boolean drawChild(Canvas var1, View var2, long var3) {
            View var5 = ChatActivity.this.scrimView;
            byte var6 = 0;
            boolean var7;
            if (var2 == var5) {
               var7 = true;
            } else {
               var7 = false;
            }

            boolean var8 = var2 instanceof ChatMessageCell;
            MessageObject.GroupedMessages var10;
            int var11;
            int var12;
            boolean var13;
            int var14;
            int var15;
            ChatMessageCell var16;
            MessageObject.GroupedMessagePosition var24;
            ChatMessageCell var25;
            if (var8) {
               ChatMessageCell var9;
               label328: {
                  label327: {
                     var9 = (ChatMessageCell)var2;
                     var24 = var9.getCurrentPosition();
                     var10 = var9.getCurrentMessagesGroup();
                     if (var24 != null) {
                        var11 = var24.pw;
                        var12 = var24.spanSize;
                        if (var11 != var12 && var12 == 1000 && var24.siblingHeights == null && var10.hasSibling) {
                           var11 = var9.getBackgroundDrawableLeft();
                           break label327;
                        }

                        if (var24.siblingHeights != null) {
                           var12 = var2.getBottom() - AndroidUtilities.dp((float)(var9.isPinnedBottom() + 1));
                           var11 = 0;
                           break label328;
                        }
                     }

                     var11 = 0;
                  }

                  var12 = 0;
               }

               if (var9.needDelayRoundProgressDraw()) {
                  ChatActivity.this.drawLaterRoundProgressCell = var9;
               }

               var13 = var7;
               var25 = var9;
               var14 = var11;
               var15 = var12;
               if (!var7) {
                  var13 = var7;
                  var25 = var9;
                  var14 = var11;
                  var15 = var12;
                  if (ChatActivity.this.scrimView instanceof ChatMessageCell) {
                     var16 = (ChatMessageCell)ChatActivity.this.scrimView;
                     var13 = var7;
                     var25 = var9;
                     var14 = var11;
                     var15 = var12;
                     if (var16.getCurrentMessagesGroup() != null) {
                        var13 = var7;
                        var25 = var9;
                        var14 = var11;
                        var15 = var12;
                        if (var16.getCurrentMessagesGroup() == var10) {
                           var13 = true;
                           var25 = var9;
                           var14 = var11;
                           var15 = var12;
                        }
                     }
                  }
               }
            } else {
               var25 = null;
               var14 = 0;
               var15 = 0;
               var13 = var7;
            }

            if (var14 != 0) {
               var1.save();
            } else if (var15 != 0) {
               var1.save();
            }

            boolean var17;
            if (!var13) {
               var17 = super.drawChild(var1, var2, var3);
            } else {
               var17 = false;
            }

            if (var14 != 0 || var15 != 0) {
               var1.restore();
            }

            if (var25 != null) {
               var25.drawCheckBox(var1);
            }

            var11 = this.getChildCount();
            int var26 = 0;

            while(true) {
               if (var26 >= var11) {
                  var26 = 0;
                  break;
               }

               if (this.getChildAt(var26) == var2) {
                  break;
               }

               ++var26;
            }

            var12 = var11 - 1;
            boolean var18;
            if (var26 == var12) {
               var15 = this.drawTimeAfter.size();
               if (var15 > 0) {
                  for(var11 = 0; var11 < var15; ++var11) {
                     var25 = (ChatMessageCell)this.drawTimeAfter.get(var11);
                     var1.save();
                     var1.translate((float)var25.getLeft() + var25.getTranslationX(), (float)var25.getTop());
                     var25.drawTime(var1);
                     var1.restore();
                  }

                  this.drawTimeAfter.clear();
               }

               var15 = this.drawNamesAfter.size();
               if (var15 > 0) {
                  for(var11 = 0; var11 < var15; ++var11) {
                     var25 = (ChatMessageCell)this.drawNamesAfter.get(var11);
                     var1.save();
                     var1.translate((float)var25.getLeft() + var25.getTranslationX(), (float)var25.getTop());
                     var25.drawNamesLayout(var1);
                     var1.restore();
                  }

                  this.drawNamesAfter.clear();
               }

               var15 = this.drawCaptionAfter.size();
               if (var15 > 0) {
                  for(var11 = 0; var11 < var15; ++var11) {
                     var25 = (ChatMessageCell)this.drawCaptionAfter.get(var11);
                     if (var25.getCurrentPosition() != null) {
                        var1.save();
                        var1.translate((float)var25.getLeft() + var25.getTranslationX(), (float)var25.getTop());
                        if ((var25.getCurrentPosition().flags & 1) == 0) {
                           var18 = true;
                        } else {
                           var18 = false;
                        }

                        var25.drawCaptionLayout(var1, var18);
                        var1.restore();
                     }
                  }

                  this.drawCaptionAfter.clear();
               }
            }

            if (var8) {
               var16 = (ChatMessageCell)var2;
               var24 = var16.getCurrentPosition();
               if (var24 != null) {
                  if (var24.last || var24.minX == 0 && var24.minY == 0) {
                     if (var26 == var12) {
                        var1.save();
                        var1.translate((float)var16.getLeft() + var16.getTranslationX(), (float)var16.getTop());
                        if (var24.last) {
                           var16.drawTime(var1);
                        }

                        if (var24.minX == 0 && var24.minY == 0) {
                           var16.drawNamesLayout(var1);
                        }

                        var1.restore();
                     } else {
                        if (var24.last) {
                           this.drawTimeAfter.add(var16);
                        }

                        if (var24.minX == 0 && var24.minY == 0 && var16.hasNameLayout()) {
                           this.drawNamesAfter.add(var16);
                        }
                     }
                  }

                  if (var26 == var12) {
                     var1.save();
                     var1.translate((float)var16.getLeft() + var16.getTranslationX(), (float)var16.getTop());
                     if (var16.hasCaptionLayout()) {
                        var26 = var24.flags;
                        if ((var26 & 8) != 0) {
                           if ((var26 & 1) == 0) {
                              var18 = true;
                           } else {
                              var18 = false;
                           }

                           var16.drawCaptionLayout(var1, var18);
                        }
                     }

                     var1.restore();
                  } else if (var16.hasCaptionLayout() && (var24.flags & 8) != 0) {
                     this.drawCaptionAfter.add(var16);
                  }
               }

               MessageObject var28 = var16.getMessageObject();
               float var19;
               float var20;
               float var21;
               ImageReceiver var27;
               if (ChatActivity.this.videoPlayerContainer != null && (var28.isRoundVideo() || var28.isVideo()) && MediaController.getInstance().isPlayingMessage(var28)) {
                  var27 = var16.getPhotoImage();
                  var19 = (float)var27.getImageX() + var16.getX();
                  var20 = (float)(ChatActivity.access$14000(ChatActivity.this).getPaddingTop() + var16.getTop() + var27.getImageY() - ChatActivity.this.chatListViewClipTop);
                  var21 = ChatActivity.this.chatListView.getTranslationY();
                  if (ChatActivity.access$14100(ChatActivity.this)) {
                     var26 = AndroidUtilities.statusBarHeight;
                  } else {
                     var26 = 0;
                  }

                  var21 = var20 + var21 + (float)var26;
                  if (ChatActivity.this.videoPlayerContainer.getTranslationX() != var19 || ChatActivity.this.videoPlayerContainer.getTranslationY() != var21) {
                     ChatActivity.this.videoPlayerContainer.setTranslationX(var19);
                     ChatActivity.this.videoPlayerContainer.setTranslationY(var21);
                     ChatActivity.access$14200(ChatActivity.this).invalidate();
                     ChatActivity.this.videoPlayerContainer.invalidate();
                  }
               }

               var27 = var16.getAvatarImage();
               if (var27 != null) {
                  var10 = ChatActivity.this.getValidGroupedMessage(var28);
                  var12 = var2.getTop();
                  if (var16.isPinnedBottom()) {
                     RecyclerView.ViewHolder var22 = ChatActivity.this.chatListView.getChildViewHolder(var2);
                     if (var22 != null) {
                        var26 = var22.getAdapterPosition();
                        if (var10 != null && var24 != null) {
                           var11 = var10.posArray.indexOf(var24);
                           var14 = var10.posArray.size();
                           if ((var24.flags & 8) != 0) {
                              var11 += var26 - var14;
                           } else {
                              --var26;
                              var15 = var11 + 1;

                              while(true) {
                                 var11 = var26;
                                 if (var15 >= var14) {
                                    break;
                                 }

                                 if (((MessageObject.GroupedMessagePosition)var10.posArray.get(var15)).minY > var24.maxY) {
                                    var11 = var26;
                                    break;
                                 }

                                 --var26;
                                 ++var15;
                              }
                           }
                        } else {
                           var11 = var26 - 1;
                        }

                        if (ChatActivity.this.chatListView.findViewHolderForAdapterPosition(var11) != null) {
                           var27.setImageY(-AndroidUtilities.dp(1000.0F));
                           var27.draw(var1);
                           return var17;
                        }
                     }
                  }

                  var20 = var16.getTranslationX();
                  var15 = var2.getTop() + var16.getLayoutHeight();
                  var11 = ChatActivity.this.chatListView.getMeasuredHeight() - ChatActivity.this.chatListView.getPaddingBottom();
                  var26 = var15;
                  if (var15 > var11) {
                     var26 = var11;
                  }

                  var11 = var12;
                  var19 = var20;
                  if (var16.isPinnedTop()) {
                     RecyclerView.ViewHolder var23 = ChatActivity.this.chatListView.getChildViewHolder(var2);
                     var11 = var12;
                     var19 = var20;
                     if (var23 != null) {
                        var11 = var12;
                        var15 = var6;

                        while(true) {
                           if (var15 >= 20) {
                              var19 = var20;
                              break;
                           }

                           int var29 = var15 + 1;
                           var12 = var23.getAdapterPosition();
                           if (var10 != null && var24 != null) {
                              var15 = var10.posArray.indexOf(var24);
                              if (var15 < 0) {
                                 var19 = var20;
                                 break;
                              }

                              var10.posArray.size();
                              if ((var24.flags & 4) != 0) {
                                 var15 = var12 + var15 + 1;
                              } else {
                                 ++var12;
                                 var14 = var15 - 1;

                                 while(true) {
                                    var15 = var12;
                                    if (var14 < 0) {
                                       break;
                                    }

                                    if (((MessageObject.GroupedMessagePosition)var10.posArray.get(var14)).maxY < var24.minY) {
                                       var15 = var12;
                                       break;
                                    }

                                    ++var12;
                                    --var14;
                                 }
                              }
                           } else {
                              var15 = var12 + 1;
                           }

                           var23 = ChatActivity.this.chatListView.findViewHolderForAdapterPosition(var15);
                           var19 = var20;
                           if (var23 == null) {
                              break;
                           }

                           var12 = var23.itemView.getTop();
                           var21 = var20;
                           if (var26 - AndroidUtilities.dp(48.0F) < var23.itemView.getBottom()) {
                              var21 = Math.min(var23.itemView.getTranslationX(), var20);
                           }

                           View var30 = var23.itemView;
                           var11 = var12;
                           var19 = var21;
                           if (!(var30 instanceof ChatMessageCell)) {
                              break;
                           }

                           var15 = var29;
                           var11 = var12;
                           var20 = var21;
                           if (!((ChatMessageCell)var30).isPinnedTop()) {
                              var19 = var21;
                              var11 = var12;
                              break;
                           }
                        }
                     }
                  }

                  var12 = var26;
                  if (var26 - AndroidUtilities.dp(48.0F) < var11) {
                     var12 = var11 + AndroidUtilities.dp(48.0F);
                  }

                  if (var19 != 0.0F) {
                     var1.save();
                     var1.translate(var19, 0.0F);
                  }

                  var27.setImageY(var12 - AndroidUtilities.dp(44.0F));
                  var27.draw(var1);
                  if (var19 != 0.0F) {
                     var1.restore();
                  }
               }
            }

            return var17;
         }

         protected void onChildPressed(View var1, boolean var2) {
            super.onChildPressed(var1, var2);
            if (var1 instanceof ChatMessageCell) {
               MessageObject.GroupedMessages var3 = ((ChatMessageCell)var1).getCurrentMessagesGroup();
               if (var3 != null) {
                  int var4 = this.getChildCount();

                  for(int var5 = 0; var5 < var4; ++var5) {
                     View var6 = this.getChildAt(var5);
                     if (var6 != var1 && var6 instanceof ChatMessageCell) {
                        ChatMessageCell var7 = (ChatMessageCell)var6;
                        if (var7.getCurrentMessagesGroup() == var3) {
                           var7.setPressed(var2);
                        }
                     }
                  }
               }
            }

         }

         public void onDraw(Canvas var1) {
            super.onDraw(var1);
            ChatMessageCell var2 = this.slidingView;
            if (var2 != null) {
               float var3 = var2.getTranslationX();
               if (!this.maybeStartTracking && !this.startedTracking && this.endedTrackingX != 0.0F && var3 != 0.0F) {
                  long var4 = System.currentTimeMillis();
                  long var6 = this.lastTrackingAnimationTime;
                  this.trackAnimationProgress += (float)(var4 - var6) / 180.0F;
                  if (this.trackAnimationProgress > 1.0F) {
                     this.trackAnimationProgress = 1.0F;
                  }

                  this.lastTrackingAnimationTime = var4;
                  var3 = this.endedTrackingX * (1.0F - AndroidUtilities.decelerateInterpolator.getInterpolation(this.trackAnimationProgress));
                  if (var3 == 0.0F) {
                     this.endedTrackingX = 0.0F;
                  }

                  this.setGroupTranslationX(this.slidingView, var3);
                  this.slidingView.setTranslationX(var3);
                  MessageObject var8 = this.slidingView.getMessageObject();
                  if (var8.isRoundVideo() || var8.isVideo()) {
                     ChatActivity.this.updateTextureViewPosition(false);
                  }

                  this.invalidate();
               }

               this.drawReplyButton(var1);
            }

         }

         public void onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo var1) {
            if (ChatActivity.this.currentEncryptedChat == null) {
               super.onInitializeAccessibilityNodeInfo(var1);
               if (VERSION.SDK_INT >= 19) {
                  CollectionInfo var2 = var1.getCollectionInfo();
                  if (var2 != null) {
                     var1.setCollectionInfo(CollectionInfo.obtain(var2.getRowCount(), 1, false));
                  }
               }

            }
         }

         public boolean onInterceptTouchEvent(MotionEvent var1) {
            boolean var2 = super.onInterceptTouchEvent(var1);
            if (ChatActivity.access$13500(ChatActivity.this).isActionModeShowed()) {
               return var2;
            } else {
               this.processTouchEvent(var1);
               return var2;
            }
         }

         protected void onLayout(boolean var1, int var2, int var3, int var4, int var5) {
            super.onLayout(var1, var2, var3, var4, var5);
            int var6 = this.lastWidth;
            var4 -= var2;
            if (var6 != var4) {
               this.lastWidth = var4;
               if (ChatActivity.this.noSoundHintView != null) {
                  ChatActivity.this.noSoundHintView.hide();
               }

               if (ChatActivity.this.forwardHintView != null) {
                  ChatActivity.this.forwardHintView.hide();
               }
            }

            ChatActivity.this.forceScrollToTop = false;
            if (ChatActivity.this.chatAdapter.isBot) {
               var6 = this.getChildCount();

               for(var2 = 0; var2 < var6; ++var2) {
                  View var7 = this.getChildAt(var2);
                  if (var7 instanceof BotHelpCell) {
                     var2 = (var5 - var3) / 2 - var7.getMeasuredHeight() / 2;
                     if (var7.getTop() > var2) {
                        var7.layout(0, var2, var4, var7.getMeasuredHeight() + var2);
                     }
                     break;
                  }
               }
            }

         }

         public boolean onTouchEvent(MotionEvent var1) {
            boolean var2 = super.onTouchEvent(var1);
            if (ChatActivity.access$13900(ChatActivity.this).isActionModeShowed()) {
               return var2;
            } else {
               this.processTouchEvent(var1);
               if (!this.startedTracking && !var2) {
                  var2 = false;
               } else {
                  var2 = true;
               }

               return var2;
            }
         }

         public boolean requestChildRectangleOnScreen(View var1, Rect var2, boolean var3) {
            return ChatActivity.this.scrimPopupWindow != null ? false : super.requestChildRectangleOnScreen(var1, var2, var3);
         }

         public void requestDisallowInterceptTouchEvent(boolean var1) {
            super.requestDisallowInterceptTouchEvent(var1);
            ChatMessageCell var2 = this.slidingView;
            if (var2 != null) {
               this.endedTrackingX = var2.getTranslationX();
               this.lastTrackingAnimationTime = System.currentTimeMillis();
               this.trackAnimationProgress = 0.0F;
               this.invalidate();
               this.maybeStartTracking = false;
               this.startedTracking = false;
               ChatActivity.this.chatLayoutManager.setCanScrollVertically(true);
            }

         }
      };
      if (this.currentEncryptedChat != null && VERSION.SDK_INT >= 19) {
         this.chatListView.setImportantForAccessibility(4);
      }

      this.chatListView.setInstantClick(true);
      this.chatListView.setDisableHighlightState(true);
      this.chatListView.setTag(1);
      this.chatListView.setVerticalScrollBarEnabled(true);
      RecyclerListView var35 = this.chatListView;
      ChatActivity.ChatActivityAdapter var8 = new ChatActivity.ChatActivityAdapter(var1);
      this.chatAdapter = var8;
      var35.setAdapter(var8);
      this.chatListView.setClipToPadding(false);
      this.chatListView.setPadding(0, AndroidUtilities.dp(4.0F), 0, AndroidUtilities.dp(3.0F));
      this.chatListView.setItemAnimator((RecyclerView.ItemAnimator)null);
      this.chatListView.setLayoutAnimation((LayoutAnimationController)null);
      this.chatLayoutManager = new GridLayoutManagerFixed(var1, 1000, 1, true) {
         protected boolean hasSiblingChild(int var1) {
            if (var1 >= ChatActivity.this.chatAdapter.messagesStartRow && var1 < ChatActivity.this.chatAdapter.messagesEndRow) {
               var1 -= ChatActivity.this.chatAdapter.messagesStartRow;
               if (var1 >= 0 && var1 < ChatActivity.this.messages.size()) {
                  MessageObject var2 = (MessageObject)ChatActivity.this.messages.get(var1);
                  MessageObject.GroupedMessages var3 = ChatActivity.this.getValidGroupedMessage(var2);
                  if (var3 != null) {
                     MessageObject.GroupedMessagePosition var4 = (MessageObject.GroupedMessagePosition)var3.positions.get(var2);
                     if (var4.minX != var4.maxX) {
                        byte var8 = var4.minY;
                        if (var8 == var4.maxY && var8 != 0) {
                           int var5 = var3.posArray.size();

                           for(var1 = 0; var1 < var5; ++var1) {
                              MessageObject.GroupedMessagePosition var9 = (MessageObject.GroupedMessagePosition)var3.posArray.get(var1);
                              if (var9 != var4) {
                                 byte var6 = var9.minY;
                                 byte var7 = var4.minY;
                                 if (var6 <= var7 && var9.maxY >= var7) {
                                    return true;
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }

            return false;
         }

         public boolean shouldLayoutChildFromOpositeSide(View var1) {
            return var1 instanceof ChatMessageCell ? ((ChatMessageCell)var1).getMessageObject().isOutOwner() ^ true : false;
         }

         public void smoothScrollToPosition(RecyclerView var1, RecyclerView.State var2, int var3) {
            LinearSmoothScrollerMiddle var4 = new LinearSmoothScrollerMiddle(var1.getContext());
            var4.setTargetPosition(var3);
            this.startSmoothScroll(var4);
         }

         public boolean supportsPredictiveItemAnimations() {
            return false;
         }
      };
      this.chatLayoutManager.setSpanSizeLookup(new GridLayoutManager.SpanSizeLookup() {
         public int getSpanSize(int var1) {
            if (var1 >= ChatActivity.this.chatAdapter.messagesStartRow && var1 < ChatActivity.this.chatAdapter.messagesEndRow) {
               var1 -= ChatActivity.this.chatAdapter.messagesStartRow;
               if (var1 >= 0 && var1 < ChatActivity.this.messages.size()) {
                  MessageObject var2 = (MessageObject)ChatActivity.this.messages.get(var1);
                  MessageObject.GroupedMessages var3 = ChatActivity.this.getValidGroupedMessage(var2);
                  if (var3 != null) {
                     return ((MessageObject.GroupedMessagePosition)var3.positions.get(var2)).spanSize;
                  }
               }
            }

            return 1000;
         }
      });
      this.chatListView.setLayoutManager(this.chatLayoutManager);
      this.chatListView.addItemDecoration(new RecyclerView.ItemDecoration() {
         public void getItemOffsets(Rect var1, View var2, RecyclerView var3, RecyclerView.State var4) {
            byte var5 = 0;
            var1.bottom = 0;
            if (var2 instanceof ChatMessageCell) {
               ChatMessageCell var6 = (ChatMessageCell)var2;
               MessageObject.GroupedMessages var12 = var6.getCurrentMessagesGroup();
               if (var12 != null) {
                  MessageObject.GroupedMessagePosition var13 = var6.getCurrentPosition();
                  if (var13 != null && var13.siblingHeights != null) {
                     Point var14 = AndroidUtilities.displaySize;
                     float var7 = (float)Math.max(var14.x, var14.y) * 0.5F;
                     int var8 = var6.getCaptionHeight();
                     int var9 = 0;

                     while(true) {
                        float[] var15 = var13.siblingHeights;
                        if (var9 >= var15.length) {
                           int var10 = var8 + (var13.maxY - var13.minY) * Math.round(AndroidUtilities.density * 7.0F);
                           int var11 = var12.posArray.size();
                           var9 = var5;

                           while(true) {
                              var8 = var10;
                              if (var9 >= var11) {
                                 break;
                              }

                              MessageObject.GroupedMessagePosition var16 = (MessageObject.GroupedMessagePosition)var12.posArray.get(var9);
                              byte var17 = var16.minY;
                              byte var18 = var13.minY;
                              if (var17 == var18 && (var16.minX != var13.minX || var16.maxX != var13.maxX || var17 != var18 || var16.maxY != var13.maxY) && var16.minY == var13.minY) {
                                 var8 = var10 - ((int)Math.ceil((double)(var7 * var16.ph)) - AndroidUtilities.dp(4.0F));
                                 break;
                              }

                              ++var9;
                           }

                           var1.bottom = -var8;
                           break;
                        }

                        var8 += (int)Math.ceil((double)(var15[var9] * var7));
                        ++var9;
                     }
                  }
               }
            }

         }
      });
      this.contentView.addView(this.chatListView, LayoutHelper.createFrame(-1, -1.0F));
      this.chatListView.setOnItemLongClickListener(this.onItemLongClickListener);
      this.chatListView.setOnItemClickListener(this.onItemClickListener);
      this.chatListView.setOnScrollListener(new RecyclerView.OnScrollListener() {
         private boolean scrollUp;
         private final int scrollValue = AndroidUtilities.dp(100.0F);
         private float totalDy = 0.0F;

         public void onScrollStateChanged(RecyclerView var1, int var2) {
            if (var2 == 2) {
               ChatActivity.this.wasManualScroll = true;
               ChatActivity.this.scrollingChatListView = true;
            } else if (var2 == 1) {
               ChatActivity.this.wasManualScroll = true;
               ChatActivity.this.scrollingFloatingDate = true;
               ChatActivity.this.checkTextureViewPosition = true;
               ChatActivity.this.scrollingChatListView = true;
            } else if (var2 == 0) {
               ChatActivity.this.scrollingFloatingDate = false;
               ChatActivity.this.scrollingChatListView = false;
               ChatActivity.this.checkTextureViewPosition = false;
               ChatActivity.this.hideFloatingDateView(true);
               ChatActivity.this.checkAutoDownloadMessages(this.scrollUp);
            }

         }

         public void onScrolled(RecyclerView var1, int var2, int var3) {
            ChatActivity.this.chatListView.invalidate();
            boolean var4;
            if (var3 < 0) {
               var4 = true;
            } else {
               var4 = false;
            }

            this.scrollUp = var4;
            if (!ChatActivity.this.wasManualScroll && var3 != 0) {
               ChatActivity.this.wasManualScroll = true;
            }

            if (var3 != 0) {
               if (ChatActivity.this.noSoundHintView != null) {
                  ChatActivity.this.noSoundHintView.hide();
               }

               if (ChatActivity.this.forwardHintView != null) {
                  ChatActivity.this.forwardHintView.hide();
               }
            }

            if (var3 != 0 && ChatActivity.this.scrollingFloatingDate && !ChatActivity.this.currentFloatingTopIsNotMessage) {
               if (ChatActivity.this.highlightMessageId != Integer.MAX_VALUE) {
                  ChatActivity.this.removeSelectedMessageHighlight();
                  ChatActivity.this.updateVisibleRows();
               }

               ChatActivity.this.showFloatingDateView(true);
            }

            ChatActivity.this.checkScrollForLoad(true);
            var2 = ChatActivity.this.chatLayoutManager.findFirstVisibleItemPosition();
            if (var2 != -1) {
               ChatActivity.this.chatAdapter.getItemCount();
               if (var2 == 0 && ChatActivity.this.forwardEndReached[0]) {
                  ChatActivity.this.showPagedownButton(false, true);
               } else if (var3 > 0) {
                  if (ChatActivity.this.pagedownButton.getTag() == null) {
                     this.totalDy += (float)var3;
                     if (this.totalDy > (float)this.scrollValue) {
                        this.totalDy = 0.0F;
                        ChatActivity.this.showPagedownButton(true, true);
                        ChatActivity.this.pagedownButtonShowedByScroll = true;
                     }
                  }
               } else if (ChatActivity.this.pagedownButtonShowedByScroll && ChatActivity.this.pagedownButton.getTag() != null) {
                  this.totalDy += (float)var3;
                  if (this.totalDy < (float)(-this.scrollValue)) {
                     ChatActivity.this.showPagedownButton(false, true);
                     this.totalDy = 0.0F;
                  }
               }
            }

            ChatActivity.this.updateMessagesVisiblePart(true);
         }
      });
      this.progressView = new FrameLayout(var1);
      this.progressView.setVisibility(4);
      this.contentView.addView(this.progressView, LayoutHelper.createFrame(-1, -1, 51));
      this.progressView2 = new View(var1);
      this.progressView2.setBackgroundResource(2131165872);
      this.progressView2.getBackground().setColorFilter(Theme.colorFilter);
      this.progressView.addView(this.progressView2, LayoutHelper.createFrame(36, 36, 17));
      this.progressBar = new RadialProgressView(var1);
      this.progressBar.setSize(AndroidUtilities.dp(28.0F));
      this.progressBar.setProgressColor(Theme.getColor("chat_serviceText"));
      this.progressView.addView(this.progressBar, LayoutHelper.createFrame(32, 32, 17));
      this.floatingDateView = new ChatActionCell(var1) {
         public boolean onInterceptTouchEvent(MotionEvent var1) {
            return this.getAlpha() != 0.0F && !ChatActivity.access$15600(ChatActivity.this).isActionModeShowed() ? super.onInterceptTouchEvent(var1) : false;
         }

         public boolean onTouchEvent(MotionEvent var1) {
            return this.getAlpha() != 0.0F && !ChatActivity.access$15700(ChatActivity.this).isActionModeShowed() ? super.onTouchEvent(var1) : false;
         }
      };
      this.floatingDateView.setAlpha(0.0F);
      this.contentView.addView(this.floatingDateView, LayoutHelper.createFrame(-2, -2.0F, 49, 0.0F, 4.0F, 0.0F, 0.0F));
      this.floatingDateView.setOnClickListener(new _$$Lambda$ChatActivity$TRtVc5U1jd24GfIVVVdgV24kMHw(this));
      if (this.currentEncryptedChat == null) {
         this.pinnedMessageView = new FrameLayout(var1);
         this.pinnedMessageView.setTag(1);
         this.pinnedMessageView.setTranslationY((float)(-AndroidUtilities.dp(50.0F)));
         this.pinnedMessageView.setVisibility(8);
         this.pinnedMessageView.setBackgroundResource(2131165305);
         this.pinnedMessageView.getBackground().setColorFilter(new PorterDuffColorFilter(Theme.getColor("chat_topPanelBackground"), Mode.MULTIPLY));
         this.contentView.addView(this.pinnedMessageView, LayoutHelper.createFrame(-1, 50, 51));
         this.pinnedMessageView.setOnClickListener(new _$$Lambda$ChatActivity$eO37gXPlV8wUc5mdxL8y_mJBqno(this));
         this.pinnedLineView = new View(var1);
         this.pinnedLineView.setBackgroundColor(Theme.getColor("chat_topPanelLine"));
         this.pinnedMessageView.addView(this.pinnedLineView, LayoutHelper.createFrame(2, 32.0F, 51, 8.0F, 8.0F, 0.0F, 0.0F));
         this.pinnedMessageImageView = new BackupImageView(var1);
         this.pinnedMessageView.addView(this.pinnedMessageImageView, LayoutHelper.createFrame(32, 32.0F, 51, 17.0F, 8.0F, 0.0F, 0.0F));
         this.pinnedMessageNameTextView = new SimpleTextView(var1);
         this.pinnedMessageNameTextView.setTextSize(14);
         this.pinnedMessageNameTextView.setTextColor(Theme.getColor("chat_topPanelTitle"));
         this.pinnedMessageNameTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
         this.pinnedMessageView.addView(this.pinnedMessageNameTextView, LayoutHelper.createFrame(-1, (float)AndroidUtilities.dp(18.0F), 51, 18.0F, 7.3F, 40.0F, 0.0F));
         this.pinnedMessageTextView = new SimpleTextView(var1);
         this.pinnedMessageTextView.setTextSize(14);
         this.pinnedMessageTextView.setTextColor(Theme.getColor("chat_topPanelMessage"));
         this.pinnedMessageView.addView(this.pinnedMessageTextView, LayoutHelper.createFrame(-1, (float)AndroidUtilities.dp(18.0F), 51, 18.0F, 25.3F, 40.0F, 0.0F));
         this.closePinned = new ImageView(var1);
         this.closePinned.setImageResource(2131165604);
         this.closePinned.setColorFilter(new PorterDuffColorFilter(Theme.getColor("chat_topPanelClose"), Mode.MULTIPLY));
         this.closePinned.setScaleType(ScaleType.CENTER);
         this.closePinned.setContentDescription(LocaleController.getString("Close", 2131559117));
         this.pinnedMessageView.addView(this.closePinned, LayoutHelper.createFrame(36, 48, 53));
         this.closePinned.setOnClickListener(new _$$Lambda$ChatActivity$MC1nlfA7DBtHsUYoqPF_QO9JBh4(this));
      }

      this.reportSpamView = new LinearLayout(var1);
      this.reportSpamView.setTag(1);
      this.reportSpamView.setTranslationY((float)(-AndroidUtilities.dp(50.0F)));
      this.reportSpamView.setVisibility(8);
      this.reportSpamView.setBackgroundResource(2131165305);
      this.reportSpamView.getBackground().setColorFilter(new PorterDuffColorFilter(Theme.getColor("chat_topPanelBackground"), Mode.MULTIPLY));
      this.contentView.addView(this.reportSpamView, LayoutHelper.createFrame(-1, 50, 51));
      this.addToContactsButton = new TextView(var1);
      this.addToContactsButton.setTextColor(Theme.getColor("chat_addContact"));
      this.addToContactsButton.setVisibility(8);
      this.addToContactsButton.setTextSize(1, 14.0F);
      this.addToContactsButton.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
      this.addToContactsButton.setSingleLine(true);
      this.addToContactsButton.setMaxLines(1);
      this.addToContactsButton.setPadding(AndroidUtilities.dp(4.0F), 0, AndroidUtilities.dp(4.0F), 0);
      this.addToContactsButton.setGravity(17);
      this.addToContactsButton.setText(LocaleController.getString("AddContactChat", 2131558568));
      this.reportSpamView.addView(this.addToContactsButton, LayoutHelper.createLinear(-1, -1, 0.5F, 51, 0, 0, 0, AndroidUtilities.dp(1.0F)));
      this.addToContactsButton.setOnClickListener(new _$$Lambda$ChatActivity$Wxpp0NnBw1B_RABTqRtxQIyzsu4(this));
      this.reportSpamContainer = new FrameLayout(var1);
      this.reportSpamView.addView(this.reportSpamContainer, LayoutHelper.createLinear(-1, -1, 1.0F, 51, 0, 0, 0, AndroidUtilities.dp(1.0F)));
      this.reportSpamButton = new TextView(var1);
      this.reportSpamButton.setTextColor(Theme.getColor("chat_reportSpam"));
      this.reportSpamButton.setTextSize(1, 14.0F);
      this.reportSpamButton.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
      this.reportSpamButton.setSingleLine(true);
      this.reportSpamButton.setMaxLines(1);
      if (this.currentChat != null) {
         this.reportSpamButton.setText(LocaleController.getString("ReportSpamAndLeave", 2131560580));
      } else {
         this.reportSpamButton.setText(LocaleController.getString("ReportSpam", 2131560576));
      }

      this.reportSpamButton.setGravity(17);
      this.reportSpamButton.setPadding(AndroidUtilities.dp(50.0F), 0, AndroidUtilities.dp(50.0F), 0);
      this.reportSpamContainer.addView(this.reportSpamButton, LayoutHelper.createFrame(-1, -1, 51));
      this.reportSpamButton.setOnClickListener(new _$$Lambda$ChatActivity$df_WH8DglycOP9kTI3yHoOkfKQ4(this));
      this.closeReportSpam = new ImageView(var1);
      this.closeReportSpam.setImageResource(2131165604);
      this.closeReportSpam.setColorFilter(new PorterDuffColorFilter(Theme.getColor("chat_topPanelClose"), Mode.MULTIPLY));
      this.closeReportSpam.setScaleType(ScaleType.CENTER);
      this.reportSpamContainer.addView(this.closeReportSpam, LayoutHelper.createFrame(48, 48, 53));
      this.closeReportSpam.setOnClickListener(new _$$Lambda$ChatActivity$IBbC6tGGvSanxWVehZQ8A5DagBM(this));
      this.alertView = new FrameLayout(var1);
      this.alertView.setTag(1);
      this.alertView.setTranslationY((float)(-AndroidUtilities.dp(50.0F)));
      this.alertView.setVisibility(8);
      this.alertView.setBackgroundResource(2131165305);
      this.alertView.getBackground().setColorFilter(new PorterDuffColorFilter(Theme.getColor("chat_topPanelBackground"), Mode.MULTIPLY));
      this.contentView.addView(this.alertView, LayoutHelper.createFrame(-1, 50, 51));
      this.alertNameTextView = new TextView(var1);
      this.alertNameTextView.setTextSize(1, 14.0F);
      this.alertNameTextView.setTextColor(Theme.getColor("chat_topPanelTitle"));
      this.alertNameTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
      this.alertNameTextView.setSingleLine(true);
      this.alertNameTextView.setEllipsize(TruncateAt.END);
      this.alertNameTextView.setMaxLines(1);
      this.alertView.addView(this.alertNameTextView, LayoutHelper.createFrame(-2, -2.0F, 51, 8.0F, 5.0F, 8.0F, 0.0F));
      this.alertTextView = new TextView(var1);
      this.alertTextView.setTextSize(1, 14.0F);
      this.alertTextView.setTextColor(Theme.getColor("chat_topPanelMessage"));
      this.alertTextView.setSingleLine(true);
      this.alertTextView.setEllipsize(TruncateAt.END);
      this.alertTextView.setMaxLines(1);
      this.alertView.addView(this.alertTextView, LayoutHelper.createFrame(-2, -2.0F, 51, 8.0F, 23.0F, 8.0F, 0.0F));
      this.pagedownButton = new FrameLayout(var1);
      this.pagedownButton.setVisibility(4);
      this.contentView.addView(this.pagedownButton, LayoutHelper.createFrame(66, 59.0F, 85, 0.0F, 0.0F, -3.0F, 5.0F));
      this.pagedownButton.setOnClickListener(new _$$Lambda$ChatActivity$8zbREdQOEF7GEfjtwX3ytHFHUU8(this));
      this.mentiondownButton = new FrameLayout(var1);
      this.mentiondownButton.setVisibility(4);
      this.contentView.addView(this.mentiondownButton, LayoutHelper.createFrame(46, 59.0F, 85, 0.0F, 0.0F, 7.0F, 5.0F));
      this.mentiondownButton.setOnClickListener(new android.view.View.OnClickListener() {
         private void loadLastUnreadMention() {
            ChatActivity.this.wasManualScroll = true;
            if (ChatActivity.this.hasAllMentionsLocal) {
               MessagesStorage.getInstance(ChatActivity.access$15900(ChatActivity.this)).getUnreadMention(ChatActivity.this.dialog_id, new _$$Lambda$ChatActivity$15$YszPBmqpkUY2LK3hO1BNGpmmT7E(this));
            } else {
               MessagesStorage var1 = MessagesStorage.getInstance(ChatActivity.access$16000(ChatActivity.this));
               TLRPC.TL_messages_getUnreadMentions var2 = new TLRPC.TL_messages_getUnreadMentions();
               var2.peer = MessagesController.getInstance(ChatActivity.access$16100(ChatActivity.this)).getInputPeer((int)ChatActivity.this.dialog_id);
               var2.limit = 1;
               var2.add_offset = ChatActivity.this.newMentionsCount - 1;
               ConnectionsManager.getInstance(ChatActivity.access$16300(ChatActivity.this)).sendRequest(var2, new _$$Lambda$ChatActivity$15$TWyfKj_zNuWPP70_9PkaiO4T_9Q(this, var1));
            }

         }

         // $FF: synthetic method
         public void lambda$loadLastUnreadMention$0$ChatActivity$15(int var1) {
            if (var1 == 0) {
               ChatActivity.this.hasAllMentionsLocal = false;
               this.loadLastUnreadMention();
            } else {
               ChatActivity.this.scrollToMessageId(var1, 0, false, 0, false);
            }

         }

         // $FF: synthetic method
         public void lambda$loadLastUnreadMention$2$ChatActivity$15(MessagesStorage var1, TLObject var2, TLRPC.TL_error var3) {
            AndroidUtilities.runOnUIThread(new _$$Lambda$ChatActivity$15$6A8CAzbPtjUbeALHm7vOtlzkUV4(this, var2, var3, var1));
         }

         // $FF: synthetic method
         public void lambda$null$1$ChatActivity$15(TLObject var1, TLRPC.TL_error var2, MessagesStorage var3) {
            TLRPC.messages_Messages var9 = (TLRPC.messages_Messages)var1;
            if (var2 == null && !var9.messages.isEmpty()) {
               int var4 = ((TLRPC.Message)var9.messages.get(0)).id;
               long var5 = (long)var4;
               long var7 = var5;
               if (ChatObject.isChannel(ChatActivity.this.currentChat)) {
                  var7 = var5 | (long)ChatActivity.this.currentChat.id << 32;
               }

               MessageObject var10 = (MessageObject)ChatActivity.this.messagesDict[0].get(var4);
               var3.markMessageAsMention(var7);
               if (var10 != null) {
                  TLRPC.Message var11 = var10.messageOwner;
                  var11.media_unread = true;
                  var11.mentioned = true;
               }

               ChatActivity.this.scrollToMessageId(var4, 0, false, 0, false);
            } else {
               if (var9 != null) {
                  ChatActivity.this.newMentionsCount = var9.count;
               } else {
                  ChatActivity.this.newMentionsCount = 0;
               }

               var3.resetMentionsCount(ChatActivity.this.dialog_id, ChatActivity.this.newMentionsCount);
               if (ChatActivity.this.newMentionsCount == 0) {
                  ChatActivity.this.hasAllMentionsLocal = true;
                  ChatActivity.this.showMentionDownButton(false, true);
               } else {
                  ChatActivity.this.mentiondownButtonCounter.setText(String.format("%d", ChatActivity.this.newMentionsCount));
                  this.loadLastUnreadMention();
               }
            }

         }

         public void onClick(View var1) {
            this.loadLastUnreadMention();
         }
      });
      this.mentiondownButton.setOnLongClickListener(new _$$Lambda$ChatActivity$qWx1xNvyjcE0eUD8CIvcA7RTi9U(this));
      if (!this.isBroadcast) {
         label287: {
            this.mentionContainer = new FrameLayout(var1) {
               public void onDraw(Canvas var1) {
                  if (ChatActivity.this.mentionListView.getChildCount() > 0) {
                     int var2;
                     int var3;
                     if (ChatActivity.this.mentionLayoutManager.getReverseLayout()) {
                        var2 = ChatActivity.this.mentionListViewScrollOffsetY + AndroidUtilities.dp(2.0F);
                        var3 = Theme.chat_composeShadowDrawable.getIntrinsicHeight();
                        Theme.chat_composeShadowDrawable.setBounds(0, var3 + var2, this.getMeasuredWidth(), var2);
                        Theme.chat_composeShadowDrawable.draw(var1);
                        var1.drawRect(0.0F, 0.0F, (float)this.getMeasuredWidth(), (float)var2, Theme.chat_composeBackgroundPaint);
                     } else {
                        if (ChatActivity.this.mentionsAdapter.isBotContext() && ChatActivity.this.mentionsAdapter.isMediaLayout() && ChatActivity.this.mentionsAdapter.getBotContextSwitch() == null) {
                           var3 = ChatActivity.this.mentionListViewScrollOffsetY;
                           var2 = AndroidUtilities.dp(4.0F);
                        } else {
                           var3 = ChatActivity.this.mentionListViewScrollOffsetY;
                           var2 = AndroidUtilities.dp(2.0F);
                        }

                        var3 -= var2;
                        var2 = Theme.chat_composeShadowDrawable.getIntrinsicHeight() + var3;
                        Theme.chat_composeShadowDrawable.setBounds(0, var3, this.getMeasuredWidth(), var2);
                        Theme.chat_composeShadowDrawable.draw(var1);
                        var1.drawRect(0.0F, (float)var2, (float)this.getMeasuredWidth(), (float)this.getMeasuredHeight(), Theme.chat_composeBackgroundPaint);
                     }

                  }
               }

               public void requestLayout() {
                  if (!ChatActivity.this.mentionListViewIgnoreLayout) {
                     super.requestLayout();
                  }
               }
            };
            this.mentionContainer.setVisibility(8);
            this.updateMessageListAccessibilityVisibility();
            this.mentionContainer.setWillNotDraw(false);
            this.contentView.addView(this.mentionContainer, LayoutHelper.createFrame(-1, 110, 83));
            this.mentionListView = new RecyclerListView(var1) {
               private int lastHeight;
               private int lastWidth;

               public boolean onInterceptTouchEvent(MotionEvent var1) {
                  boolean var2 = ChatActivity.this.mentionLayoutManager.getReverseLayout();
                  boolean var3 = false;
                  if (var2) {
                     if (!ChatActivity.this.mentionListViewIsScrolling && ChatActivity.this.mentionListViewScrollOffsetY != 0 && var1.getY() > (float)ChatActivity.this.mentionListViewScrollOffsetY) {
                        return false;
                     }
                  } else if (!ChatActivity.this.mentionListViewIsScrolling && ChatActivity.this.mentionListViewScrollOffsetY != 0 && var1.getY() < (float)ChatActivity.this.mentionListViewScrollOffsetY) {
                     return false;
                  }

                  var2 = ContentPreviewViewer.getInstance().onInterceptTouchEvent(var1, ChatActivity.this.mentionListView, 0, (ContentPreviewViewer.ContentPreviewViewerDelegate)null);
                  if (super.onInterceptTouchEvent(var1) || var2) {
                     var3 = true;
                  }

                  return var3;
               }

               protected void onLayout(boolean var1, int var2, int var3, int var4, int var5) {
                  int var6 = var4 - var2;
                  int var7 = var5 - var3;
                  int var8;
                  int var9;
                  if (!ChatActivity.this.mentionLayoutManager.getReverseLayout() && ChatActivity.this.mentionListView != null && ChatActivity.this.mentionListViewLastViewPosition >= 0 && var6 == this.lastWidth && var7 - this.lastHeight != 0) {
                     var8 = ChatActivity.this.mentionListViewLastViewPosition;
                     var9 = ChatActivity.this.mentionListViewLastViewTop + var7 - this.lastHeight - this.getPaddingTop();
                  } else {
                     var8 = -1;
                     var9 = 0;
                  }

                  super.onLayout(var1, var2, var3, var4, var5);
                  if (var8 != -1) {
                     ChatActivity.this.mentionListViewIgnoreLayout = true;
                     if (ChatActivity.this.mentionsAdapter.isBotContext() && ChatActivity.this.mentionsAdapter.isMediaLayout()) {
                        ChatActivity.this.mentionGridLayoutManager.scrollToPositionWithOffset(var8, var9);
                     } else {
                        ChatActivity.this.mentionLayoutManager.scrollToPositionWithOffset(var8, var9);
                     }

                     super.onLayout(false, var2, var3, var4, var5);
                     ChatActivity.this.mentionListViewIgnoreLayout = false;
                  }

                  this.lastHeight = var7;
                  this.lastWidth = var6;
                  ChatActivity.this.mentionListViewUpdateLayout();
               }

               public boolean onTouchEvent(MotionEvent var1) {
                  if (ChatActivity.this.mentionLayoutManager.getReverseLayout()) {
                     if (!ChatActivity.this.mentionListViewIsScrolling && ChatActivity.this.mentionListViewScrollOffsetY != 0 && var1.getY() > (float)ChatActivity.this.mentionListViewScrollOffsetY) {
                        return false;
                     }
                  } else if (!ChatActivity.this.mentionListViewIsScrolling && ChatActivity.this.mentionListViewScrollOffsetY != 0 && var1.getY() < (float)ChatActivity.this.mentionListViewScrollOffsetY) {
                     return false;
                  }

                  return super.onTouchEvent(var1);
               }

               public void requestLayout() {
                  if (!ChatActivity.this.mentionListViewIgnoreLayout) {
                     super.requestLayout();
                  }
               }
            };
            this.mentionListView.setOnTouchListener(new _$$Lambda$ChatActivity$u9129r_c2oid4B9nFfEqrAorkw0(this));
            this.mentionListView.setTag(2);
            this.mentionLayoutManager = new LinearLayoutManager(var1) {
               public boolean supportsPredictiveItemAnimations() {
                  return false;
               }
            };
            this.mentionLayoutManager.setOrientation(1);
            this.mentionGridLayoutManager = new ExtendedGridLayoutManager(var1, 100) {
               private Size size = new Size();

               protected int getFlowItemCount() {
                  return ChatActivity.this.mentionsAdapter.getBotContextSwitch() != null ? this.getItemCount() - 1 : super.getFlowItemCount();
               }

               protected Size getSizeForItem(int var1) {
                  int var2 = var1;
                  if (ChatActivity.this.mentionsAdapter.getBotContextSwitch() != null) {
                     var2 = var1 + 1;
                  }

                  Size var3 = this.size;
                  var3.width = 0.0F;
                  var3.height = 0.0F;
                  Object var10 = ChatActivity.this.mentionsAdapter.getItem(var2);
                  if (var10 instanceof TLRPC.BotInlineResult) {
                     TLRPC.BotInlineResult var11 = (TLRPC.BotInlineResult)var10;
                     TLRPC.Document var4 = var11.document;
                     byte var9 = 0;
                     byte var5 = 0;
                     var1 = 0;
                     TLRPC.PhotoSize var12;
                     TLRPC.DocumentAttribute var13;
                     if (var4 != null) {
                        var12 = FileLoader.getClosestPhotoSizeWithSize(var4.thumbs, 90);
                        Size var6 = this.size;
                        float var7 = 100.0F;
                        float var8;
                        if (var12 != null) {
                           var8 = (float)var12.w;
                        } else {
                           var8 = 100.0F;
                        }

                        var6.width = var8;
                        var6 = this.size;
                        var8 = var7;
                        if (var12 != null) {
                           var8 = (float)var12.h;
                        }

                        for(var6.height = var8; var1 < var11.document.attributes.size(); ++var1) {
                           var13 = (TLRPC.DocumentAttribute)var11.document.attributes.get(var1);
                           if (var13 instanceof TLRPC.TL_documentAttributeImageSize || var13 instanceof TLRPC.TL_documentAttributeVideo) {
                              var3 = this.size;
                              var3.width = (float)var13.w;
                              var3.height = (float)var13.h;
                              break;
                           }
                        }
                     } else if (var11.content != null) {
                        for(var1 = var9; var1 < var11.content.attributes.size(); ++var1) {
                           var13 = (TLRPC.DocumentAttribute)var11.content.attributes.get(var1);
                           if (var13 instanceof TLRPC.TL_documentAttributeImageSize || var13 instanceof TLRPC.TL_documentAttributeVideo) {
                              var3 = this.size;
                              var3.width = (float)var13.w;
                              var3.height = (float)var13.h;
                              break;
                           }
                        }
                     } else if (var11.thumb != null) {
                        for(var1 = var5; var1 < var11.thumb.attributes.size(); ++var1) {
                           var13 = (TLRPC.DocumentAttribute)var11.thumb.attributes.get(var1);
                           if (var13 instanceof TLRPC.TL_documentAttributeImageSize || var13 instanceof TLRPC.TL_documentAttributeVideo) {
                              var3 = this.size;
                              var3.width = (float)var13.w;
                              var3.height = (float)var13.h;
                              break;
                           }
                        }
                     } else {
                        TLRPC.Photo var14 = var11.photo;
                        if (var14 != null) {
                           var12 = FileLoader.getClosestPhotoSizeWithSize(var14.sizes, AndroidUtilities.photoSize);
                           if (var12 != null) {
                              var3 = this.size;
                              var3.width = (float)var12.w;
                              var3.height = (float)var12.h;
                           }
                        }
                     }
                  }

                  return this.size;
               }
            };
            this.mentionGridLayoutManager.setSpanSizeLookup(new GridLayoutManager.SpanSizeLookup() {
               public int getSpanSize(int var1) {
                  if (ChatActivity.this.mentionsAdapter.getItem(var1) instanceof TLRPC.TL_inlineBotSwitchPM) {
                     return 100;
                  } else {
                     int var2 = var1;
                     if (ChatActivity.this.mentionsAdapter.getBotContextSwitch() != null) {
                        var2 = var1 - 1;
                     }

                     return ChatActivity.this.mentionGridLayoutManager.getSpanSizeForItem(var2);
                  }
               }
            });
            this.mentionListView.addItemDecoration(new RecyclerView.ItemDecoration() {
               public void getItemOffsets(Rect var1, View var2, RecyclerView var3, RecyclerView.State var4) {
                  byte var5 = 0;
                  var1.left = 0;
                  var1.right = 0;
                  var1.top = 0;
                  var1.bottom = 0;
                  if (var3.getLayoutManager() == ChatActivity.this.mentionGridLayoutManager) {
                     int var6 = var3.getChildAdapterPosition(var2);
                     if (ChatActivity.this.mentionsAdapter.getBotContextSwitch() != null) {
                        if (var6 == 0) {
                           return;
                        }

                        int var7 = var6 - 1;
                        var6 = var7;
                        if (!ChatActivity.this.mentionGridLayoutManager.isFirstRow(var7)) {
                           var1.top = AndroidUtilities.dp(2.0F);
                           var6 = var7;
                        }
                     } else {
                        var1.top = AndroidUtilities.dp(2.0F);
                     }

                     if (ChatActivity.this.mentionGridLayoutManager.isLastInRow(var6)) {
                        var6 = var5;
                     } else {
                        var6 = AndroidUtilities.dp(2.0F);
                     }

                     var1.right = var6;
                  }

               }
            });
            this.mentionListView.setItemAnimator((RecyclerView.ItemAnimator)null);
            this.mentionListView.setLayoutAnimation((LayoutAnimationController)null);
            this.mentionListView.setClipToPadding(false);
            this.mentionListView.setLayoutManager(this.mentionLayoutManager);
            this.mentionListView.setOverScrollMode(2);
            this.mentionContainer.addView(this.mentionListView, LayoutHelper.createFrame(-1, -1.0F));
            RecyclerListView var29 = this.mentionListView;
            var34 = new MentionsAdapter(var1, false, this.dialog_id, new MentionsAdapter.MentionsAdapterDelegate() {
               public void needChangePanelVisibility(boolean var1) {
                  if (ChatActivity.this.mentionsAdapter.isBotContext() && ChatActivity.this.mentionsAdapter.isMediaLayout()) {
                     ChatActivity.this.mentionListView.setLayoutManager(ChatActivity.this.mentionGridLayoutManager);
                  } else {
                     ChatActivity.this.mentionListView.setLayoutManager(ChatActivity.this.mentionLayoutManager);
                  }

                  boolean var2 = var1;
                  if (var1) {
                     var2 = var1;
                     if (ChatActivity.this.bottomOverlay.getVisibility() == 0) {
                        var2 = false;
                     }
                  }

                  if (var2) {
                     if (ChatActivity.this.mentionListAnimation != null) {
                        ChatActivity.this.mentionListAnimation.cancel();
                        ChatActivity.this.mentionListAnimation = null;
                     }

                     if (ChatActivity.this.mentionContainer.getVisibility() == 0) {
                        ChatActivity.this.mentionContainer.setAlpha(1.0F);
                        return;
                     }

                     var1 = ChatActivity.this.mentionsAdapter.isBotContext();
                     short var3 = 10000;
                     if (var1 && ChatActivity.this.mentionsAdapter.isMediaLayout()) {
                        ChatActivity.this.mentionGridLayoutManager.scrollToPositionWithOffset(0, 10000);
                     } else if (!ChatActivity.this.mentionLayoutManager.getReverseLayout()) {
                        LinearLayoutManager var4 = ChatActivity.this.mentionLayoutManager;
                        if (ChatActivity.this.mentionLayoutManager.getReverseLayout()) {
                           var3 = -10000;
                        }

                        var4.scrollToPositionWithOffset(0, var3);
                     }

                     if (!ChatActivity.this.allowStickersPanel || ChatActivity.this.mentionsAdapter.isBotContext() && !ChatActivity.this.allowContextBotPanel && !ChatActivity.this.allowContextBotPanelSecond) {
                        ChatActivity.this.mentionContainer.setAlpha(1.0F);
                        ChatActivity.this.mentionContainer.setVisibility(4);
                        ChatActivity.this.updateMessageListAccessibilityVisibility();
                     } else {
                        ChatActivity var6 = ChatActivity.this;
                        if (var6.currentEncryptedChat != null && var6.mentionsAdapter.isBotContext()) {
                           SharedPreferences var7 = MessagesController.getGlobalMainSettings();
                           if (!var7.getBoolean("secretbot", false)) {
                              AlertDialog.Builder var5 = new AlertDialog.Builder(ChatActivity.this.getParentActivity());
                              var5.setTitle(LocaleController.getString("AppName", 2131558635));
                              var5.setMessage(LocaleController.getString("SecretChatContextBotAlert", 2131560670));
                              var5.setPositiveButton(LocaleController.getString("OK", 2131560097), (OnClickListener)null);
                              ChatActivity.this.showDialog(var5.create());
                              var7.edit().putBoolean("secretbot", true).commit();
                           }
                        }

                        ChatActivity.this.mentionContainer.setVisibility(0);
                        ChatActivity.this.updateMessageListAccessibilityVisibility();
                        ChatActivity.this.mentionContainer.setTag((Object)null);
                        ChatActivity.this.mentionListAnimation = new AnimatorSet();
                        ChatActivity.this.mentionListAnimation.playTogether(new Animator[]{ObjectAnimator.ofFloat(ChatActivity.this.mentionContainer, View.ALPHA, new float[]{0.0F, 1.0F})});
                        ChatActivity.this.mentionListAnimation.addListener(new AnimatorListenerAdapter() {
                           public void onAnimationCancel(Animator var1) {
                              if (ChatActivity.this.mentionListAnimation != null && ChatActivity.this.mentionListAnimation.equals(var1)) {
                                 ChatActivity.this.mentionListAnimation = null;
                              }

                           }

                           public void onAnimationEnd(Animator var1) {
                              if (ChatActivity.this.mentionListAnimation != null && ChatActivity.this.mentionListAnimation.equals(var1)) {
                                 ChatActivity.this.mentionListAnimation = null;
                              }

                           }
                        });
                        ChatActivity.this.mentionListAnimation.setDuration(200L);
                        ChatActivity.this.mentionListAnimation.start();
                     }
                  } else {
                     if (ChatActivity.this.mentionListAnimation != null) {
                        ChatActivity.this.mentionListAnimation.cancel();
                        ChatActivity.this.mentionListAnimation = null;
                     }

                     if (ChatActivity.this.mentionContainer.getVisibility() == 8) {
                        return;
                     }

                     if (ChatActivity.this.allowStickersPanel) {
                        ChatActivity.this.mentionListAnimation = new AnimatorSet();
                        ChatActivity.this.mentionListAnimation.playTogether(new Animator[]{ObjectAnimator.ofFloat(ChatActivity.this.mentionContainer, View.ALPHA, new float[]{0.0F})});
                        ChatActivity.this.mentionListAnimation.addListener(new AnimatorListenerAdapter() {
                           public void onAnimationCancel(Animator var1) {
                              if (ChatActivity.this.mentionListAnimation != null && ChatActivity.this.mentionListAnimation.equals(var1)) {
                                 ChatActivity.this.mentionListAnimation = null;
                              }

                           }

                           public void onAnimationEnd(Animator var1) {
                              if (ChatActivity.this.mentionListAnimation != null && ChatActivity.this.mentionListAnimation.equals(var1)) {
                                 ChatActivity.this.mentionContainer.setVisibility(8);
                                 ChatActivity.this.mentionContainer.setTag((Object)null);
                                 ChatActivity.this.updateMessageListAccessibilityVisibility();
                                 ChatActivity.this.mentionListAnimation = null;
                              }

                           }
                        });
                        ChatActivity.this.mentionListAnimation.setDuration(200L);
                        ChatActivity.this.mentionListAnimation.start();
                     } else {
                        ChatActivity.this.mentionContainer.setTag((Object)null);
                        ChatActivity.this.mentionContainer.setVisibility(8);
                        ChatActivity.this.updateMessageListAccessibilityVisibility();
                     }
                  }

               }

               public void onContextClick(TLRPC.BotInlineResult var1) {
                  if (ChatActivity.this.getParentActivity() != null && var1.content != null) {
                     if (!var1.type.equals("video") && !var1.type.equals("web_player_video")) {
                        Browser.openUrl(ChatActivity.this.getParentActivity(), (String)var1.content.url);
                     } else {
                        int[] var2 = MessageObject.getInlineResultWidthAndHeight(var1);
                        Activity var3 = ChatActivity.this.getParentActivity();
                        String var4 = var1.title;
                        if (var4 == null) {
                           var4 = "";
                        }

                        String var5 = var1.description;
                        String var6 = var1.content.url;
                        EmbedBottomSheet.show(var3, var4, var5, var6, var6, var2[0], var2[1]);
                     }
                  }

               }

               public void onContextSearch(boolean var1) {
                  ChatActivity var2 = ChatActivity.this;
                  ChatActivityEnterView var3 = var2.chatActivityEnterView;
                  if (var3 != null) {
                     var3.setCaption(var2.mentionsAdapter.getBotCaption());
                     ChatActivity.this.chatActivityEnterView.showContextProgress(var1);
                  }

               }
            });
            this.mentionsAdapter = var34;
            var29.setAdapter(var34);
            if (ChatObject.isChannel(this.currentChat)) {
               var24 = this.currentChat;
               if (var24 == null || !var24.megagroup) {
                  break label287;
               }
            }

            this.mentionsAdapter.setBotInfo(this.botInfo);
         }

         this.mentionsAdapter.setParentFragment(this);
         this.mentionsAdapter.setChatInfo(this.chatInfo);
         var34 = this.mentionsAdapter;
         if (this.currentChat != null) {
            var4 = true;
         } else {
            var4 = false;
         }

         var34.setNeedUsernames(var4);
         MentionsAdapter var31 = this.mentionsAdapter;
         TLRPC.EncryptedChat var38 = this.currentEncryptedChat;
         if (var38 != null && AndroidUtilities.getPeerLayerVersion(var38.layer) < 46) {
            var4 = false;
         } else {
            var4 = true;
         }

         var31.setNeedBotContext(var4);
         var34 = this.mentionsAdapter;
         if (this.currentChat != null) {
            var2 = this.botsCount;
         } else {
            var2 = 1;
         }

         var34.setBotsCount(var2);
         var35 = this.mentionListView;
         _$$Lambda$ChatActivity$3T4cmfYIkHu65uxGq3sGjGr7WuI var32 = new _$$Lambda$ChatActivity$3T4cmfYIkHu65uxGq3sGjGr7WuI(this);
         this.mentionsOnItemClickListener = var32;
         var35.setOnItemClickListener((RecyclerListView.OnItemClickListener)var32);
         this.mentionListView.setOnItemLongClickListener((RecyclerListView.OnItemLongClickListener)(new _$$Lambda$ChatActivity$59jI_z9Qk5v3zW1I6TNTF1hJXy4(this)));
         this.mentionListView.setOnScrollListener(new RecyclerView.OnScrollListener() {
            public void onScrollStateChanged(RecyclerView var1, int var2) {
               ChatActivity var4 = ChatActivity.this;
               boolean var3 = true;
               if (var2 != 1) {
                  var3 = false;
               }

               var4.mentionListViewIsScrolling = var3;
            }

            public void onScrolled(RecyclerView var1, int var2, int var3) {
               if (ChatActivity.this.mentionsAdapter.isBotContext() && ChatActivity.this.mentionsAdapter.isMediaLayout()) {
                  var2 = ChatActivity.this.mentionGridLayoutManager.findLastVisibleItemPosition();
               } else {
                  var2 = ChatActivity.this.mentionLayoutManager.findLastVisibleItemPosition();
               }

               if (var2 == -1) {
                  var3 = 0;
               } else {
                  var3 = var2;
               }

               if (var3 > 0 && var2 > ChatActivity.this.mentionsAdapter.getItemCount() - 5) {
                  ChatActivity.this.mentionsAdapter.searchForContextBotForNextOffset();
               }

               ChatActivity.this.mentionListViewUpdateLayout();
            }
         });
      }

      this.pagedownButtonImage = new ImageView(var1);
      this.pagedownButtonImage.setImageResource(2131165725);
      this.pagedownButtonImage.setScaleType(ScaleType.CENTER);
      this.pagedownButtonImage.setColorFilter(new PorterDuffColorFilter(Theme.getColor("chat_goDownButtonIcon"), Mode.MULTIPLY));
      this.pagedownButtonImage.setPadding(0, AndroidUtilities.dp(2.0F), 0, 0);
      Drawable var39 = Theme.createCircleDrawable(AndroidUtilities.dp(42.0F), Theme.getColor("chat_goDownButton"));
      Drawable var33 = var1.getResources().getDrawable(2131165726).mutate();
      var33.setColorFilter(new PorterDuffColorFilter(Theme.getColor("chat_goDownButtonShadow"), Mode.MULTIPLY));
      CombinedDrawable var40 = new CombinedDrawable(var33, var39, 0, 0);
      var40.setIconSize(AndroidUtilities.dp(42.0F), AndroidUtilities.dp(42.0F));
      this.pagedownButtonImage.setBackgroundDrawable(var40);
      this.pagedownButton.addView(this.pagedownButtonImage, LayoutHelper.createFrame(46, 46, 81));
      this.pagedownButton.setContentDescription(LocaleController.getString("AccDescrPageDown", 2131558452));
      this.pagedownButtonCounter = new TextView(var1);
      this.pagedownButtonCounter.setVisibility(4);
      this.pagedownButtonCounter.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
      this.pagedownButtonCounter.setTextSize(1, 13.0F);
      this.pagedownButtonCounter.setTextColor(Theme.getColor("chat_goDownButtonCounter"));
      this.pagedownButtonCounter.setGravity(17);
      this.pagedownButtonCounter.setBackgroundDrawable(Theme.createRoundRectDrawable(AndroidUtilities.dp(11.5F), Theme.getColor("chat_goDownButtonCounterBackground")));
      this.pagedownButtonCounter.setMinWidth(AndroidUtilities.dp(23.0F));
      this.pagedownButtonCounter.setPadding(AndroidUtilities.dp(8.0F), 0, AndroidUtilities.dp(8.0F), AndroidUtilities.dp(1.0F));
      this.pagedownButton.addView(this.pagedownButtonCounter, LayoutHelper.createFrame(-2, 23, 49));
      this.mentiondownButtonImage = new ImageView(var1);
      this.mentiondownButtonImage.setImageResource(2131165564);
      this.mentiondownButtonImage.setScaleType(ScaleType.CENTER);
      this.mentiondownButtonImage.setColorFilter(new PorterDuffColorFilter(Theme.getColor("chat_goDownButtonIcon"), Mode.MULTIPLY));
      this.mentiondownButtonImage.setPadding(0, AndroidUtilities.dp(2.0F), 0, 0);
      var39 = Theme.createCircleDrawable(AndroidUtilities.dp(42.0F), Theme.getColor("chat_goDownButton"));
      var33 = var1.getResources().getDrawable(2131165726).mutate();
      var33.setColorFilter(new PorterDuffColorFilter(Theme.getColor("chat_goDownButtonShadow"), Mode.MULTIPLY));
      var40 = new CombinedDrawable(var33, var39, 0, 0);
      var40.setIconSize(AndroidUtilities.dp(42.0F), AndroidUtilities.dp(42.0F));
      this.mentiondownButtonImage.setBackgroundDrawable(var40);
      this.mentiondownButton.addView(this.mentiondownButtonImage, LayoutHelper.createFrame(46, 46, 83));
      this.mentiondownButtonCounter = new TextView(var1);
      this.mentiondownButtonCounter.setVisibility(4);
      this.mentiondownButtonCounter.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
      this.mentiondownButtonCounter.setTextSize(1, 13.0F);
      this.mentiondownButtonCounter.setTextColor(Theme.getColor("chat_goDownButtonCounter"));
      this.mentiondownButtonCounter.setGravity(17);
      this.mentiondownButtonCounter.setBackgroundDrawable(Theme.createRoundRectDrawable(AndroidUtilities.dp(11.5F), Theme.getColor("chat_goDownButtonCounterBackground")));
      this.mentiondownButtonCounter.setMinWidth(AndroidUtilities.dp(23.0F));
      this.mentiondownButtonCounter.setPadding(AndroidUtilities.dp(8.0F), 0, AndroidUtilities.dp(8.0F), AndroidUtilities.dp(1.0F));
      this.mentiondownButton.addView(this.mentiondownButtonCounter, LayoutHelper.createFrame(-2, 23, 49));
      this.mentiondownButton.setContentDescription(LocaleController.getString("AccDescrMentionDown", 2131558442));
      if (!AndroidUtilities.isTablet() || AndroidUtilities.isSmallTablet()) {
         FragmentContextView var36 = new FragmentContextView(var1, this, true);
         this.contentView.addView(var36, LayoutHelper.createFrame(-1, 39.0F, 51, 0.0F, -36.0F, 0.0F, 0.0F));
         SizeNotifierFrameLayout var9 = this.contentView;
         FragmentContextView var41 = new FragmentContextView(var1, this, false);
         this.fragmentContextView = var41;
         var9.addView(var41, LayoutHelper.createFrame(-1, 39.0F, 51, 0.0F, -36.0F, 0.0F, 0.0F));
         this.fragmentContextView.setAdditionalContextView(var36);
         var36.setAdditionalContextView(this.fragmentContextView);
      }

      this.contentView.addView(super.actionBar);
      this.overlayView = new View(var1);
      this.overlayView.setOnTouchListener(new _$$Lambda$ChatActivity$1a9ijLxqzo_X_eqGs1fRijFldGM(this));
      this.contentView.addView(this.overlayView, LayoutHelper.createFrame(-1, -1, 51));
      this.overlayView.setVisibility(8);
      this.instantCameraView = new InstantCameraView(var1, this);
      this.contentView.addView(this.instantCameraView, LayoutHelper.createFrame(-1, -1, 51));
      this.bottomMessagesActionContainer = new FrameLayout(var1) {
         public void onDraw(Canvas var1) {
            int var2 = Theme.chat_composeShadowDrawable.getIntrinsicHeight();
            Theme.chat_composeShadowDrawable.setBounds(0, 0, this.getMeasuredWidth(), var2);
            Theme.chat_composeShadowDrawable.draw(var1);
            var1.drawRect(0.0F, (float)var2, (float)this.getMeasuredWidth(), (float)this.getMeasuredHeight(), Theme.chat_composeBackgroundPaint);
         }
      };
      this.bottomMessagesActionContainer.setVisibility(4);
      this.bottomMessagesActionContainer.setWillNotDraw(false);
      this.bottomMessagesActionContainer.setPadding(0, AndroidUtilities.dp(2.0F), 0, 0);
      this.contentView.addView(this.bottomMessagesActionContainer, LayoutHelper.createFrame(-1, 51, 80));
      this.bottomMessagesActionContainer.setOnTouchListener(_$$Lambda$ChatActivity$z1jahyjaaFP53MoZguLvaL665PA.INSTANCE);
      this.chatActivityEnterView = new ChatActivityEnterView(this.getParentActivity(), this.contentView, this, true) {
         public boolean dispatchTouchEvent(MotionEvent var1) {
            return this.getAlpha() != 1.0F ? false : super.dispatchTouchEvent(var1);
         }

         public boolean onInterceptTouchEvent(MotionEvent var1) {
            return this.getAlpha() != 1.0F ? false : super.onInterceptTouchEvent(var1);
         }

         public boolean onTouchEvent(MotionEvent var1) {
            return this.getAlpha() != 1.0F ? false : super.onTouchEvent(var1);
         }
      };
      this.chatActivityEnterView.setDialogId(this.dialog_id, super.currentAccount);
      this.chatActivityEnterView.setId(1000);
      this.chatActivityEnterView.setBotsCount(this.botsCount, this.hasBotsCommands);
      this.chatActivityEnterView.setMinimumHeight(AndroidUtilities.dp(51.0F));
      ChatActivityEnterView var42 = this.chatActivityEnterView;
      TLRPC.EncryptedChat var37 = this.currentEncryptedChat;
      if (var37 != null && AndroidUtilities.getPeerLayerVersion(var37.layer) < 23) {
         var4 = false;
      } else {
         var4 = true;
      }

      var37 = this.currentEncryptedChat;
      boolean var10;
      if (var37 != null && AndroidUtilities.getPeerLayerVersion(var37.layer) < 46) {
         var10 = false;
      } else {
         var10 = true;
      }

      var42.setAllowStickersAndGifs(var4, var10);
      if (super.inPreviewMode) {
         this.chatActivityEnterView.setVisibility(4);
      }

      SizeNotifierFrameLayout var43 = this.contentView;
      var43.addView(this.chatActivityEnterView, var43.getChildCount() - 1, LayoutHelper.createFrame(-1, -2, 83));
      this.chatActivityEnterView.setDelegate(new ChatActivityEnterView.ChatActivityEnterViewDelegate() {
         public void didPressedAttachButton() {
            if (ChatActivity.this.chatAttachAlert != null) {
               ChatActivity.this.chatAttachAlert.setEditingMessageObject((MessageObject)null);
            }

            ChatActivity.this.openAttachMenu();
         }

         public void needChangeVideoPreviewState(int var1, float var2) {
            if (ChatActivity.this.instantCameraView != null) {
               ChatActivity.this.instantCameraView.changeVideoPreviewState(var1, var2);
            }

         }

         public void needSendTyping() {
            MessagesController.getInstance(ChatActivity.access$18300(ChatActivity.this)).sendTyping(ChatActivity.this.dialog_id, 0, ChatActivity.access$18200(ChatActivity.this));
         }

         public void needShowMediaBanHint() {
            ChatActivity.this.showMediaBannedHint();
         }

         public void needStartRecordAudio(int var1) {
            byte var2;
            if (var1 == 0) {
               var2 = 8;
            } else {
               var2 = 0;
            }

            if (ChatActivity.this.overlayView.getVisibility() != var2) {
               ChatActivity.this.overlayView.setVisibility(var2);
            }

         }

         public void needStartRecordVideo(int var1) {
            if (ChatActivity.this.instantCameraView != null) {
               if (var1 == 0) {
                  ChatActivity.this.instantCameraView.showCamera();
               } else if (var1 != 1 && var1 != 3 && var1 != 4) {
                  if (var1 == 2) {
                     ChatActivity.this.instantCameraView.cancel();
                  }
               } else {
                  ChatActivity.this.instantCameraView.send(var1);
               }
            }

         }

         public void onAttachButtonHidden() {
            if (!ChatActivity.access$18400(ChatActivity.this).isSearchFieldVisible()) {
               if (ChatActivity.this.headerItem != null) {
                  ChatActivity.this.headerItem.setVisibility(8);
                  ChatActivity.this.editTextItem.setVisibility(8);
                  ChatActivity.this.attachItem.setVisibility(0);
               }

            }
         }

         public void onAttachButtonShow() {
            if (!ChatActivity.access$18500(ChatActivity.this).isSearchFieldVisible()) {
               if (ChatActivity.this.headerItem != null) {
                  ChatActivity.this.headerItem.setVisibility(0);
                  ChatActivity.this.editTextItem.setVisibility(8);
                  ChatActivity.this.attachItem.setVisibility(8);
               }

            }
         }

         public void onMessageEditEnd(boolean var1) {
            if (!var1) {
               MentionsAdapter var2 = ChatActivity.this.mentionsAdapter;
               TLRPC.EncryptedChat var3 = ChatActivity.this.currentEncryptedChat;
               if (var3 != null && AndroidUtilities.getPeerLayerVersion(var3.layer) < 46) {
                  var1 = false;
               } else {
                  var1 = true;
               }

               var2.setNeedBotContext(var1);
               if (ChatActivity.this.editingMessageObject != null) {
                  ChatActivity.this.hideFieldPanel(false);
               }

               ChatActivity var6 = ChatActivity.this;
               ChatActivityEnterView var5 = var6.chatActivityEnterView;
               var3 = var6.currentEncryptedChat;
               if (var3 != null && AndroidUtilities.getPeerLayerVersion(var3.layer) < 23) {
                  var1 = false;
               } else {
                  var1 = true;
               }

               var3 = ChatActivity.this.currentEncryptedChat;
               boolean var4;
               if (var3 != null && AndroidUtilities.getPeerLayerVersion(var3.layer) < 46) {
                  var4 = false;
               } else {
                  var4 = true;
               }

               var5.setAllowStickersAndGifs(var1, var4);
               if (ChatActivity.this.editingMessageObjectReqId != 0) {
                  ConnectionsManager.getInstance(ChatActivity.access$18800(ChatActivity.this)).cancelRequest(ChatActivity.this.editingMessageObjectReqId, true);
                  ChatActivity.this.editingMessageObjectReqId = 0;
               }

               ChatActivity.this.updatePinnedMessageView(true);
               ChatActivity.this.updateBottomOverlay();
               ChatActivity.this.updateVisibleRows();
            }

         }

         public void onMessageSend(CharSequence var1) {
            ChatActivity.this.moveScrollToLastMessage();
            ChatActivity.this.hideFieldPanel(false);
            if (ChatActivity.this.mentionsAdapter != null) {
               ChatActivity.this.mentionsAdapter.addHashtagsFromMessage(var1);
            }

         }

         public void onPreAudioVideoRecord() {
            ChatActivity.this.showVoiceHint(true, false);
         }

         public void onStickersExpandedChange() {
            ChatActivity.this.checkRaiseSensors();
         }

         public void onStickersTab(boolean var1) {
            if (ChatActivity.this.emojiButtonRed != null) {
               ChatActivity.this.emojiButtonRed.setVisibility(8);
            }

            ChatActivity.this.allowContextBotPanelSecond = var1 ^ true;
            ChatActivity.this.checkContextBotPanel();
         }

         public void onSwitchRecordMode(boolean var1) {
            ChatActivity.this.showVoiceHint(false, var1);
         }

         public void onTextChanged(final CharSequence var1, boolean var2) {
            MediaController var3 = MediaController.getInstance();
            boolean var4;
            if (TextUtils.isEmpty(var1) && !ChatActivity.this.chatActivityEnterView.isEditingMessage()) {
               var4 = false;
            } else {
               var4 = true;
            }

            var3.setInputFieldHasText(var4);
            if (ChatActivity.this.stickersAdapter != null) {
               ChatActivityEnterView var9 = ChatActivity.this.chatActivityEnterView;
               if (var9 != null && var9.getVisibility() == 0 && (ChatActivity.this.bottomOverlay == null || ChatActivity.this.bottomOverlay.getVisibility() != 0)) {
                  StickersAdapter var10 = ChatActivity.this.stickersAdapter;
                  TLRPC.Chat var5 = ChatActivity.this.currentChat;
                  if ((var5 == null || ChatObject.canSendStickers(var5)) && !ChatActivity.this.chatActivityEnterView.isEditingMessage()) {
                     var4 = false;
                  } else {
                     var4 = true;
                  }

                  var10.loadStikersForEmoji(var1, var4);
               }
            }

            if (ChatActivity.this.mentionsAdapter != null) {
               ChatActivity.this.mentionsAdapter.searchUsernameOrHashtag(var1.toString(), ChatActivity.this.chatActivityEnterView.getCursorPosition(), ChatActivity.this.messages, false);
            }

            if (ChatActivity.this.waitingForCharaterEnterRunnable != null) {
               AndroidUtilities.cancelRunOnUIThread(ChatActivity.this.waitingForCharaterEnterRunnable);
               ChatActivity.this.waitingForCharaterEnterRunnable = null;
            }

            TLRPC.Chat var11 = ChatActivity.this.currentChat;
            if ((var11 == null || ChatObject.canSendEmbed(var11)) && ChatActivity.this.chatActivityEnterView.isMessageWebPageSearchEnabled() && (!ChatActivity.this.chatActivityEnterView.isEditingMessage() || !ChatActivity.this.chatActivityEnterView.isEditingCaption())) {
               if (var2) {
                  ChatActivity.this.searchLinks(var1, true);
               } else {
                  ChatActivity.this.waitingForCharaterEnterRunnable = new Runnable() {
                     public void run() {
                        if (this == ChatActivity.this.waitingForCharaterEnterRunnable) {
                           ChatActivity.this.searchLinks(var1, false);
                           ChatActivity.this.waitingForCharaterEnterRunnable = null;
                        }

                     }
                  };
                  Runnable var8 = ChatActivity.this.waitingForCharaterEnterRunnable;
                  long var6;
                  if (AndroidUtilities.WEB_URL == null) {
                     var6 = 3000L;
                  } else {
                     var6 = 1000L;
                  }

                  AndroidUtilities.runOnUIThread(var8, var6);
               }
            }

         }

         public void onTextSelectionChanged(int var1, int var2) {
            if (ChatActivity.this.editTextItem != null) {
               if (var2 - var1 > 0) {
                  if (ChatActivity.this.editTextItem.getTag() == null) {
                     ChatActivity.this.editTextItem.setTag(1);
                     ChatActivity.this.editTextItem.setVisibility(0);
                     ChatActivity.this.headerItem.setVisibility(8);
                     ChatActivity.this.attachItem.setVisibility(8);
                  }

                  ChatActivity.this.editTextStart = var1;
                  ChatActivity.this.editTextEnd = var2;
               } else if (ChatActivity.this.editTextItem.getTag() != null) {
                  ChatActivity.this.editTextItem.setTag((Object)null);
                  ChatActivity.this.editTextItem.setVisibility(8);
                  if (ChatActivity.this.chatActivityEnterView.hasText()) {
                     ChatActivity.this.headerItem.setVisibility(8);
                     ChatActivity.this.attachItem.setVisibility(0);
                  } else {
                     ChatActivity.this.headerItem.setVisibility(0);
                     ChatActivity.this.attachItem.setVisibility(8);
                  }
               }

            }
         }

         public void onTextSpansChanged(CharSequence var1) {
            ChatActivity.this.searchLinks(var1, true);
         }

         public void onWindowSizeChanged(int var1) {
            if (var1 < AndroidUtilities.dp(72.0F) + ActionBar.getCurrentActionBarHeight()) {
               ChatActivity.this.allowStickersPanel = false;
               if (ChatActivity.this.stickersPanel.getVisibility() == 0) {
                  ChatActivity.this.stickersPanel.setVisibility(4);
               }

               if (ChatActivity.this.mentionContainer != null && ChatActivity.this.mentionContainer.getVisibility() == 0) {
                  ChatActivity.this.mentionContainer.setVisibility(4);
                  ChatActivity.this.updateMessageListAccessibilityVisibility();
               }
            } else {
               ChatActivity.this.allowStickersPanel = true;
               if (ChatActivity.this.stickersPanel.getVisibility() == 4) {
                  ChatActivity.this.stickersPanel.setVisibility(0);
               }

               if (ChatActivity.this.mentionContainer != null && ChatActivity.this.mentionContainer.getVisibility() == 4 && (!ChatActivity.this.mentionsAdapter.isBotContext() || ChatActivity.this.allowContextBotPanel || ChatActivity.this.allowContextBotPanelSecond)) {
                  ChatActivity.this.mentionContainer.setVisibility(0);
                  ChatActivity.this.mentionContainer.setTag((Object)null);
                  ChatActivity.this.updateMessageListAccessibilityVisibility();
               }
            }

            ChatActivity var2 = ChatActivity.this;
            var2.allowContextBotPanel = var2.chatActivityEnterView.isPopupShowing() ^ true;
            ChatActivity.this.checkContextBotPanel();
         }
      });
      FrameLayout var44 = new FrameLayout(var1) {
         public boolean hasOverlappingRendering() {
            return false;
         }

         public void setTranslationY(float var1) {
            super.setTranslationY(var1);
            ChatActivityEnterView var2 = ChatActivity.this.chatActivityEnterView;
            if (var2 != null) {
               var2.invalidate();
            }

            if (this.getVisibility() != 8) {
               if (ChatActivity.this.chatListView != null) {
                  ChatActivity.this.chatListView.setTranslationY(var1);
               }

               if (ChatActivity.this.progressView != null) {
                  ChatActivity.this.progressView.setTranslationY(var1);
               }

               if (ChatActivity.this.mentionContainer != null) {
                  ChatActivity.this.mentionContainer.setTranslationY(var1);
               }

               if (ChatActivity.this.pagedownButton != null) {
                  ChatActivity.this.pagedownButton.setTranslationY(var1);
               }

               if (ChatActivity.this.mentiondownButton != null) {
                  FrameLayout var3 = ChatActivity.this.mentiondownButton;
                  if (ChatActivity.this.pagedownButton.getVisibility() == 0) {
                     var1 -= (float)AndroidUtilities.dp(72.0F);
                  }

                  var3.setTranslationY(var1);
               }

               ChatActivity.this.updateMessagesVisiblePart(false);
               if (ChatActivity.access$19400(ChatActivity.this) != null) {
                  ChatActivity.access$19500(ChatActivity.this).invalidate();
               }
            }

         }

         public void setVisibility(int var1) {
            super.setVisibility(var1);
            if (var1 == 8) {
               RecyclerListView var2 = ChatActivity.this.chatListView;
               float var3 = 0.0F;
               if (var2 != null) {
                  ChatActivity.this.chatListView.setTranslationY(0.0F);
               }

               if (ChatActivity.this.progressView != null) {
                  ChatActivity.this.progressView.setTranslationY(0.0F);
               }

               if (ChatActivity.this.mentionContainer != null) {
                  ChatActivity.this.mentionContainer.setTranslationY(0.0F);
               }

               FrameLayout var4;
               if (ChatActivity.this.pagedownButton != null) {
                  var4 = ChatActivity.this.pagedownButton;
                  if (ChatActivity.this.pagedownButton.getTag() == null) {
                     var3 = (float)AndroidUtilities.dp(100.0F);
                  }

                  var4.setTranslationY(var3);
               }

               if (ChatActivity.this.mentiondownButton != null) {
                  var4 = ChatActivity.this.mentiondownButton;
                  if (ChatActivity.this.mentiondownButton.getTag() == null) {
                     var1 = AndroidUtilities.dp(100.0F);
                  } else if (ChatActivity.this.pagedownButton.getVisibility() == 0) {
                     var1 = -AndroidUtilities.dp(72.0F);
                  } else {
                     var1 = 0;
                  }

                  var3 = (float)var1;
                  var4.setTranslationY(var3);
               }
            }

         }
      };
      this.replyLineView = new View(var1);
      this.replyLineView.setBackgroundColor(Theme.getColor("chat_replyPanelLine"));
      this.chatActivityEnterView.addTopView(var44, this.replyLineView, 48);
      var44.setOnClickListener(new _$$Lambda$ChatActivity$vOTVCsVfGrCvW6Ia7FqWB9zg2fc(this));
      this.replyIconImageView = new ImageView(var1);
      this.replyIconImageView.setColorFilter(new PorterDuffColorFilter(Theme.getColor("chat_replyPanelIcons"), Mode.MULTIPLY));
      this.replyIconImageView.setScaleType(ScaleType.CENTER);
      var44.addView(this.replyIconImageView, LayoutHelper.createFrame(52, 46, 51));
      this.replyCloseImageView = new ImageView(var1);
      this.replyCloseImageView.setColorFilter(new PorterDuffColorFilter(Theme.getColor("chat_replyPanelClose"), Mode.MULTIPLY));
      this.replyCloseImageView.setImageResource(2131165483);
      this.replyCloseImageView.setScaleType(ScaleType.CENTER);
      var44.addView(this.replyCloseImageView, LayoutHelper.createFrame(52, 46.0F, 53, 0.0F, 0.5F, 0.0F, 0.0F));
      this.replyCloseImageView.setOnClickListener(new _$$Lambda$ChatActivity$S608bx2oIMaZW_qZppW8aaTId_g(this));
      this.replyNameTextView = new SimpleTextView(var1);
      this.replyNameTextView.setTextSize(14);
      this.replyNameTextView.setTextColor(Theme.getColor("chat_replyPanelName"));
      this.replyNameTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
      var44.addView(this.replyNameTextView, LayoutHelper.createFrame(-1, 18.0F, 51, 52.0F, 6.0F, 52.0F, 0.0F));
      this.replyObjectTextView = new SimpleTextView(var1);
      this.replyObjectTextView.setTextSize(14);
      this.replyObjectTextView.setTextColor(Theme.getColor("chat_replyPanelMessage"));
      var44.addView(this.replyObjectTextView, LayoutHelper.createFrame(-1, 18.0F, 51, 52.0F, 24.0F, 52.0F, 0.0F));
      this.replyImageView = new BackupImageView(var1);
      var44.addView(this.replyImageView, LayoutHelper.createFrame(34, 34.0F, 51, 52.0F, 6.0F, 0.0F, 0.0F));
      this.stickersPanel = new FrameLayout(var1);
      this.stickersPanel.setVisibility(8);
      this.contentView.addView(this.stickersPanel, LayoutHelper.createFrame(-2, 81.5F, 83, 0.0F, 0.0F, 0.0F, 38.0F));
      final ContentPreviewViewer.ContentPreviewViewerDelegate var45 = new ContentPreviewViewer.ContentPreviewViewerDelegate() {
         // $FF: synthetic method
         public void gifAddedOrDeleted() {
            ContentPreviewViewer$ContentPreviewViewerDelegate$_CC.$default$gifAddedOrDeleted(this);
         }

         // $FF: synthetic method
         public boolean needOpen() {
            return ContentPreviewViewer$ContentPreviewViewerDelegate$_CC.$default$needOpen(this);
         }

         public boolean needSend() {
            return false;
         }

         public void openSet(TLRPC.InputStickerSet var1, boolean var2) {
            if (var1 != null && ChatActivity.this.getParentActivity() != null) {
               TLRPC.TL_inputStickerSetID var3 = new TLRPC.TL_inputStickerSetID();
               var3.access_hash = var1.access_hash;
               var3.id = var1.id;
               Activity var5 = ChatActivity.this.getParentActivity();
               ChatActivity var4 = ChatActivity.this;
               StickersAlert var6 = new StickersAlert(var5, var4, var3, (TLRPC.TL_messages_stickerSet)null, var4.chatActivityEnterView);
               var6.setClearsInputField(var2);
               ChatActivity.this.showDialog(var6);
            }

         }

         // $FF: synthetic method
         public void sendGif(Object var1) {
            ContentPreviewViewer$ContentPreviewViewerDelegate$_CC.$default$sendGif(this, var1);
         }

         public void sendSticker(TLRPC.Document var1, Object var2) {
         }
      };
      this.stickersListView = new RecyclerListView(var1) {
         public boolean onInterceptTouchEvent(MotionEvent var1) {
            ContentPreviewViewer var2 = ContentPreviewViewer.getInstance();
            RecyclerListView var3 = ChatActivity.this.stickersListView;
            ContentPreviewViewer.ContentPreviewViewerDelegate var4 = var45;
            boolean var5 = false;
            boolean var6 = var2.onInterceptTouchEvent(var1, var3, 0, var4);
            if (super.onInterceptTouchEvent(var1) || var6) {
               var5 = true;
            }

            return var5;
         }
      };
      this.stickersListView.setTag(3);
      this.stickersListView.setOnTouchListener(new _$$Lambda$ChatActivity$ihsVyPyraLc397NrumrLt_QVanE(this, var45));
      this.stickersListView.setDisallowInterceptTouchEvents(true);
      LinearLayoutManager var46 = new LinearLayoutManager(var1);
      var46.setOrientation(0);
      this.stickersListView.setLayoutManager(var46);
      this.stickersListView.setClipToPadding(false);
      this.stickersListView.setOverScrollMode(2);
      this.stickersPanel.addView(this.stickersListView, LayoutHelper.createFrame(-1, 78.0F));
      this.initStickers();
      this.stickersPanelArrow = new ImageView(var1);
      this.stickersPanelArrow.setImageResource(2131165860);
      this.stickersPanelArrow.setColorFilter(new PorterDuffColorFilter(Theme.getColor("chat_stickersHintPanel"), Mode.MULTIPLY));
      this.stickersPanel.addView(this.stickersPanelArrow, LayoutHelper.createFrame(-2, -2.0F, 83, 53.0F, 0.0F, 53.0F, 0.0F));
      this.searchContainer = new FrameLayout(var1) {
         public void onDraw(Canvas var1) {
            int var2 = Theme.chat_composeShadowDrawable.getIntrinsicHeight();
            Theme.chat_composeShadowDrawable.setBounds(0, 0, this.getMeasuredWidth(), var2);
            Theme.chat_composeShadowDrawable.draw(var1);
            var1.drawRect(0.0F, (float)var2, (float)this.getMeasuredWidth(), (float)this.getMeasuredHeight(), Theme.chat_composeBackgroundPaint);
         }
      };
      this.searchContainer.setOnTouchListener(_$$Lambda$ChatActivity$4HeR0jneWrxEOpNOz9G_tJXVOis.INSTANCE);
      this.searchContainer.setWillNotDraw(false);
      this.searchContainer.setVisibility(4);
      this.searchContainer.setFocusable(true);
      this.searchContainer.setFocusableInTouchMode(true);
      this.searchContainer.setClickable(true);
      this.searchContainer.setPadding(0, AndroidUtilities.dp(3.0F), 0, 0);
      this.searchUpButton = new ImageView(var1);
      this.searchUpButton.setScaleType(ScaleType.CENTER);
      this.searchUpButton.setImageResource(2131165631);
      this.searchUpButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor("chat_searchPanelIcons"), Mode.MULTIPLY));
      this.searchUpButton.setBackgroundDrawable(Theme.createSelectorDrawable(Theme.getColor("actionBarActionModeDefaultSelector"), 1));
      this.searchContainer.addView(this.searchUpButton, LayoutHelper.createFrame(48, 48.0F, 53, 0.0F, 0.0F, 48.0F, 0.0F));
      this.searchUpButton.setOnClickListener(new _$$Lambda$ChatActivity$i__pe90wAGWXAlcLG1K1KxSjwJM(this));
      this.searchUpButton.setContentDescription(LocaleController.getString("AccDescrSearchNext", 2131558468));
      this.searchDownButton = new ImageView(var1);
      this.searchDownButton.setScaleType(ScaleType.CENTER);
      this.searchDownButton.setImageResource(2131165630);
      this.searchDownButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor("chat_searchPanelIcons"), Mode.MULTIPLY));
      this.searchDownButton.setBackgroundDrawable(Theme.createSelectorDrawable(Theme.getColor("actionBarActionModeDefaultSelector"), 1));
      this.searchContainer.addView(this.searchDownButton, LayoutHelper.createFrame(48, 48.0F, 53, 0.0F, 0.0F, 0.0F, 0.0F));
      this.searchDownButton.setOnClickListener(new _$$Lambda$ChatActivity$zuLfb_3UyBmXz28_TR_XfUeBQL0(this));
      this.searchDownButton.setContentDescription(LocaleController.getString("AccDescrSearchPrev", 2131558469));
      var24 = this.currentChat;
      if (var24 != null && (!ChatObject.isChannel(var24) || this.currentChat.megagroup)) {
         this.searchUserButton = new ImageView(var1);
         this.searchUserButton.setScaleType(ScaleType.CENTER);
         this.searchUserButton.setImageResource(2131165681);
         this.searchUserButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor("chat_searchPanelIcons"), Mode.MULTIPLY));
         this.searchUserButton.setBackgroundDrawable(Theme.createSelectorDrawable(Theme.getColor("actionBarActionModeDefaultSelector"), 1));
         this.searchContainer.addView(this.searchUserButton, LayoutHelper.createFrame(48, 48.0F, 51, 48.0F, 0.0F, 0.0F, 0.0F));
         this.searchUserButton.setOnClickListener(new _$$Lambda$ChatActivity$CRYdccYggXGAOLHbGZiTyObk6GM(this));
         this.searchUserButton.setContentDescription(LocaleController.getString("AccDescrSearchByUser", 2131558467));
      }

      this.searchCalendarButton = new ImageView(var1);
      this.searchCalendarButton.setScaleType(ScaleType.CENTER);
      this.searchCalendarButton.setImageResource(2131165615);
      this.searchCalendarButton.setColorFilter(new PorterDuffColorFilter(Theme.getColor("chat_searchPanelIcons"), Mode.MULTIPLY));
      this.searchCalendarButton.setBackgroundDrawable(Theme.createSelectorDrawable(Theme.getColor("actionBarActionModeDefaultSelector"), 1));
      this.searchContainer.addView(this.searchCalendarButton, LayoutHelper.createFrame(48, 48, 51));
      this.searchCalendarButton.setOnClickListener(new _$$Lambda$ChatActivity$GtWzF3XwVjLwK5QO2beMs5bgGMY(this));
      this.searchCalendarButton.setContentDescription(LocaleController.getString("JumpToDate", 2131559707));
      this.searchCountText = new SimpleTextView(var1);
      this.searchCountText.setTextColor(Theme.getColor("chat_searchPanelText"));
      this.searchCountText.setTextSize(15);
      this.searchCountText.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
      this.searchCountText.setGravity(5);
      this.searchContainer.addView(this.searchCountText, LayoutHelper.createFrame(-2, -2.0F, 21, 0.0F, 0.0F, 108.0F, 0.0F));
      this.bottomOverlay = new FrameLayout(var1) {
         public void onDraw(Canvas var1) {
            int var2 = Theme.chat_composeShadowDrawable.getIntrinsicHeight();
            Theme.chat_composeShadowDrawable.setBounds(0, 0, this.getMeasuredWidth(), var2);
            Theme.chat_composeShadowDrawable.draw(var1);
            var1.drawRect(0.0F, (float)var2, (float)this.getMeasuredWidth(), (float)this.getMeasuredHeight(), Theme.chat_composeBackgroundPaint);
         }
      };
      this.bottomOverlay.setWillNotDraw(false);
      this.bottomOverlay.setVisibility(4);
      this.bottomOverlay.setFocusable(true);
      this.bottomOverlay.setFocusableInTouchMode(true);
      this.bottomOverlay.setClickable(true);
      this.bottomOverlay.setPadding(0, AndroidUtilities.dp(2.0F), 0, 0);
      this.contentView.addView(this.bottomOverlay, LayoutHelper.createFrame(-1, 51, 80));
      this.bottomOverlayText = new TextView(var1);
      this.bottomOverlayText.setTextSize(1, 14.0F);
      this.bottomOverlayText.setGravity(17);
      this.bottomOverlayText.setMaxLines(2);
      this.bottomOverlayText.setEllipsize(TruncateAt.END);
      this.bottomOverlayText.setLineSpacing((float)AndroidUtilities.dp(2.0F), 1.0F);
      this.bottomOverlayText.setTextColor(Theme.getColor("chat_secretChatStatusText"));
      this.bottomOverlay.addView(this.bottomOverlayText, LayoutHelper.createFrame(-2, -2.0F, 17, 14.0F, 0.0F, 14.0F, 0.0F));
      this.bottomOverlayChat = new FrameLayout(var1) {
         public void onDraw(Canvas var1) {
            int var2 = Theme.chat_composeShadowDrawable.getIntrinsicHeight();
            Theme.chat_composeShadowDrawable.setBounds(0, 0, this.getMeasuredWidth(), var2);
            Theme.chat_composeShadowDrawable.draw(var1);
            var1.drawRect(0.0F, (float)var2, (float)this.getMeasuredWidth(), (float)this.getMeasuredHeight(), Theme.chat_composeBackgroundPaint);
         }

         protected void onMeasure(int var1, int var2) {
            int var3 = MeasureSpec.getSize(var1);
            if (ChatActivity.this.bottomOverlayChatText.getVisibility() == 0 && ChatActivity.this.bottomOverlayChatText2.getVisibility() == 0) {
               LayoutParams var4 = (LayoutParams)ChatActivity.this.bottomOverlayChatText.getLayoutParams();
               var3 /= 2;
               var4.width = var3;
               var4 = (LayoutParams)ChatActivity.this.bottomOverlayChatText2.getLayoutParams();
               var4.width = var3;
               var4.leftMargin = var3;
            } else {
               ((LayoutParams)ChatActivity.this.bottomOverlayChatText.getLayoutParams()).width = var3;
            }

            super.onMeasure(var1, var2);
         }
      };
      this.bottomOverlayChat.setWillNotDraw(false);
      this.bottomOverlayChat.setPadding(0, AndroidUtilities.dp(3.0F), 0, 0);
      this.bottomOverlayChat.setVisibility(4);
      this.contentView.addView(this.bottomOverlayChat, LayoutHelper.createFrame(-1, 51, 80));
      this.bottomOverlayChatText = new TextView(var1);
      this.bottomOverlayChatText.setTextSize(1, 15.0F);
      this.bottomOverlayChatText.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
      this.bottomOverlayChatText.setTextColor(Theme.getColor("chat_fieldOverlayText"));
      this.bottomOverlayChatText.setGravity(17);
      this.bottomOverlayChat.addView(this.bottomOverlayChatText, LayoutHelper.createFrame(-1, -1.0F));
      this.bottomOverlayChatText.setOnClickListener(new _$$Lambda$ChatActivity$Xnch0OpMUH0ulmiGMAiifshDRCc(this));
      this.bottomOverlayChatText2 = new ChatActivity.UnreadCounterTextView(var1);
      this.bottomOverlayChatText2.setTextSize(1, 15.0F);
      this.bottomOverlayChatText2.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
      this.bottomOverlayChatText2.setTextColor(Theme.getColor("chat_fieldOverlayText"));
      this.bottomOverlayChatText2.setGravity(17);
      this.bottomOverlayChatText2.setVisibility(8);
      this.bottomOverlayChat.addView(this.bottomOverlayChatText2, LayoutHelper.createFrame(-1, -1.0F));
      this.bottomOverlayChatText2.setOnClickListener(new _$$Lambda$ChatActivity$fwEBU17y4SYZ67VjN_jy2DJ10TA(this));
      this.bottomOverlayProgress = new RadialProgressView(var1);
      this.bottomOverlayProgress.setSize(AndroidUtilities.dp(22.0F));
      this.bottomOverlayProgress.setProgressColor(Theme.getColor("chat_fieldOverlayText"));
      this.bottomOverlayProgress.setVisibility(4);
      this.bottomOverlayProgress.setScaleX(0.1F);
      this.bottomOverlayProgress.setScaleY(0.1F);
      this.bottomOverlayProgress.setAlpha(1.0F);
      this.bottomOverlayChat.addView(this.bottomOverlayProgress, LayoutHelper.createFrame(30, 30, 17));
      if (!this.isBroadcast) {
         this.replyButton = new TextView(var1);
         this.replyButton.setText(LocaleController.getString("Reply", 2131560565));
         this.replyButton.setGravity(16);
         this.replyButton.setTextSize(1, 15.0F);
         this.replyButton.setPadding(AndroidUtilities.dp(14.0F), 0, AndroidUtilities.dp(21.0F), 0);
         this.replyButton.setBackgroundDrawable(Theme.createSelectorDrawable(Theme.getColor("actionBarActionModeDefaultSelector"), 3));
         this.replyButton.setTextColor(Theme.getColor("actionBarActionModeDefaultIcon"));
         this.replyButton.setCompoundDrawablePadding(AndroidUtilities.dp(7.0F));
         this.replyButton.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
         var39 = var1.getResources().getDrawable(2131165491).mutate();
         var39.setColorFilter(new PorterDuffColorFilter(Theme.getColor("actionBarActionModeDefaultIcon"), Mode.MULTIPLY));
         this.replyButton.setCompoundDrawablesWithIntrinsicBounds(var39, (Drawable)null, (Drawable)null, (Drawable)null);
         this.replyButton.setOnClickListener(new _$$Lambda$ChatActivity$XI5_iuaszK3El6MRKLRW6i8D4x0(this));
         this.bottomMessagesActionContainer.addView(this.replyButton, LayoutHelper.createFrame(-2, -1, 51));
      }

      this.forwardButton = new TextView(var1);
      this.forwardButton.setText(LocaleController.getString("Forward", 2131559504));
      this.forwardButton.setGravity(16);
      this.forwardButton.setTextSize(1, 15.0F);
      this.forwardButton.setPadding(AndroidUtilities.dp(21.0F), 0, AndroidUtilities.dp(21.0F), 0);
      this.forwardButton.setCompoundDrawablePadding(AndroidUtilities.dp(6.0F));
      this.forwardButton.setBackgroundDrawable(Theme.createSelectorDrawable(Theme.getColor("actionBarActionModeDefaultSelector"), 3));
      this.forwardButton.setTextColor(Theme.getColor("actionBarActionModeDefaultIcon"));
      this.forwardButton.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
      var39 = var1.getResources().getDrawable(2131165485).mutate();
      var39.setColorFilter(new PorterDuffColorFilter(Theme.getColor("actionBarActionModeDefaultIcon"), Mode.MULTIPLY));
      this.forwardButton.setCompoundDrawablesWithIntrinsicBounds(var39, (Drawable)null, (Drawable)null, (Drawable)null);
      this.forwardButton.setOnClickListener(new _$$Lambda$ChatActivity$wlHsNE9I_Dn0FclPLAtTX2Iu9mg(this));
      this.bottomMessagesActionContainer.addView(this.forwardButton, LayoutHelper.createFrame(-2, -1, 53));
      this.contentView.addView(this.searchContainer, LayoutHelper.createFrame(-1, 51, 80));
      this.undoView = new UndoView(var1);
      this.contentView.addView(this.undoView, LayoutHelper.createFrame(-1, -2.0F, 83, 8.0F, 0.0F, 8.0F, 8.0F));
      this.chatAdapter.updateRows();
      if (this.loading && this.messages.isEmpty()) {
         FrameLayout var13 = this.progressView;
         var18 = var7;
         if (this.chatAdapter.botInfoRow == -1) {
            var18 = 0;
         }

         var13.setVisibility(var18);
         this.chatListView.setEmptyView((View)null);
      } else {
         this.progressView.setVisibility(4);
         this.chatListView.setEmptyView(this.emptyViewContainer);
      }

      this.checkBotKeyboard();
      this.updateContactStatus();
      this.updateBottomOverlay();
      this.updateSecretStatus();
      this.updateSpamView();
      this.updatePinnedMessageView(true);

      try {
         if (this.currentEncryptedChat != null && VERSION.SDK_INT >= 23 && (SharedConfig.passcodeHash.length() == 0 || SharedConfig.allowScreenCapture)) {
            MediaController.getInstance().setFlagSecure(this, true);
         }
      } catch (Throwable var12) {
         FileLog.e(var12);
      }

      if (var28 != null) {
         this.chatActivityEnterView.setFieldText(var28);
      }

      this.fixLayoutInternal();
      return super.fragmentView;
   }

   public void didReceivedNotification(int var1, int var2, Object... var3) {
      int var4;
      boolean var6;
      MessageObject var7;
      MessageObject var8;
      boolean var10;
      long var11;
      int var14;
      int var16;
      int var17;
      int var18;
      int var20;
      boolean var21;
      MessageObject var22;
      TLRPC.MessageAction var26;
      boolean var33;
      TLRPC.MessageAction var35;
      MessageObject var36;
      TLRPC.TL_message var37;
      ArrayList var39;
      byte var40;
      MessageObject.GroupedMessages var41;
      TLRPC.MessageAction var42;
      LongSparseArray var43;
      LongSparseArray var44;
      TLRPC.MessageAction var45;
      LongSparseArray var48;
      TextView var49;
      ArrayList var50;
      ChatActivity.ChatActivityAdapter var51;
      View var52;
      RecyclerListView var61;
      boolean var67;
      TLRPC.User var69;
      FrameLayout var70;
      MessageObject.GroupedMessages var92;
      int var94;
      LongSparseArray var95;
      MessageObject var96;
      byte var98;
      ArrayList var108;
      ArrayList var121;
      if (var1 == NotificationCenter.messagesDidLoad) {
         if ((Integer)var3[10] == super.classGuid) {
            this.setItemAnimationsEnabled(false);
            if (!this.openAnimationEnded) {
               NotificationCenter.getInstance(super.currentAccount).setAllowedNotificationsDutingAnimation(new int[]{NotificationCenter.chatInfoDidLoad, NotificationCenter.dialogsNeedReload, NotificationCenter.closeChats, NotificationCenter.botKeyboardDidLoad, NotificationCenter.userInfoDidLoad, NotificationCenter.needDeleteDialog});
            }

            var1 = (Integer)var3[11];
            var1 = this.waitingForLoad.indexOf(var1);
            var4 = UserConfig.getInstance(super.currentAccount).getClientUserId();
            if (var1 == -1) {
               return;
            }

            this.waitingForLoad.remove(var1);
            ArrayList var5 = (ArrayList)var3[2];
            var6 = this.waitingForReplyMessageLoad;
            boolean var9;
            if (!var6) {
               var10 = false;
            } else {
               if (!this.createUnreadMessageAfterIdLoading) {
                  var1 = 0;

                  label2454: {
                     while(true) {
                        if (var1 >= var5.size()) {
                           var33 = false;
                           break label2454;
                        }

                        var7 = (MessageObject)var5.get(var1);
                        if (var7.getId() == this.startLoadFromMessageId) {
                           break;
                        }

                        ++var1;
                        if (var1 < var5.size()) {
                           var8 = (MessageObject)var5.get(var1);
                           if (var7.getId() >= this.startLoadFromMessageId && var8.getId() < this.startLoadFromMessageId) {
                              this.startLoadFromMessageId = var7.getId();
                              break;
                           }
                        }
                     }

                     var33 = true;
                  }

                  if (!var33) {
                     this.startLoadFromMessageId = 0;
                     return;
                  }
               }

               var2 = this.startLoadFromMessageId;
               var9 = this.needSelectFromMessageId;
               var1 = this.createUnreadMessageAfterId;
               var10 = this.createUnreadMessageAfterIdLoading;
               this.clearChatData();
               this.createUnreadMessageAfterId = var1;
               this.startLoadFromMessageId = var2;
               this.needSelectFromMessageId = var9;
            }

            ++this.loadsCount;
            var11 = (Long)var3[0];
            byte var13;
            if (var11 == this.dialog_id) {
               var13 = 0;
            } else {
               var13 = 1;
            }

            var14 = (Integer)var3[1];
            boolean var15 = (Boolean)var3[3];
            var16 = (Integer)var3[4];
            (Integer)var3[7];
            var17 = (Integer)var3[8];
            var2 = (Integer)var3[12];
            var1 = (Integer)var3[13];
            if (var1 < 0) {
               var18 = var1 * -1;
               this.hasAllMentionsLocal = false;
            } else {
               var18 = var1;
               if (this.first) {
                  this.hasAllMentionsLocal = true;
                  var18 = var1;
               }
            }

            var9 = var6;
            if (var17 == 4) {
               this.startLoadFromMessageId = var2;
               var1 = var5.size() - 1;

               while(true) {
                  var9 = var6;
                  if (var1 <= 0) {
                     break;
                  }

                  var8 = (MessageObject)var5.get(var1);
                  if (var8.type < 0 && var8.getId() == this.startLoadFromMessageId) {
                     this.startLoadFromMessageId = ((MessageObject)var5.get(var1 - 1)).getId();
                     var9 = var6;
                     break;
                  }

                  --var1;
               }
            }

            if (var16 != 0) {
               this.last_message_id = (Integer)var3[5];
               if (var17 == 3) {
                  if (this.loadingFromOldPosition) {
                     var2 = (Integer)var3[6];
                     if (var2 != 0) {
                        this.createUnreadMessageAfterId = var16;
                     }

                     this.loadingFromOldPosition = false;
                  } else {
                     var2 = 0;
                  }

                  this.first_unread_id = 0;
               } else {
                  this.first_unread_id = var16;
                  var2 = (Integer)var3[6];
               }
            } else {
               if (this.startLoadFromMessageId != 0 && (var17 == 3 || var17 == 4)) {
                  this.last_message_id = (Integer)var3[5];
               }

               var2 = 0;
            }

            if (var17 != 0 && (this.startLoadFromMessageId != 0 || this.last_message_id != 0)) {
               this.forwardEndReached[var13] = false;
            }

            if ((var17 == 1 || var17 == 3) && var13 == 1) {
               boolean[] var34 = this.endReached;
               this.cacheEndReached[0] = true;
               var34[0] = true;
               this.forwardEndReached[0] = false;
               this.minMessageId[0] = 0;
            }

            if (this.loadsCount == 1 && var5.size() > 20) {
               ++this.loadsCount;
            }

            if (this.firstLoading) {
               if (!this.forwardEndReached[var13]) {
                  this.messages.clear();
                  this.messagesByDays.clear();
                  this.groupedMessagesMap.clear();

                  for(var1 = 0; var1 < 2; ++var1) {
                     this.messagesDict[var1].clear();
                     if (this.currentEncryptedChat == null) {
                        this.maxMessageId[var1] = Integer.MAX_VALUE;
                        this.minMessageId[var1] = Integer.MIN_VALUE;
                     } else {
                        this.maxMessageId[var1] = Integer.MIN_VALUE;
                        this.minMessageId[var1] = Integer.MAX_VALUE;
                     }

                     this.maxDate[var1] = Integer.MIN_VALUE;
                     this.minDate[var1] = 0;
                  }
               }

               this.firstLoading = false;
               AndroidUtilities.runOnUIThread(new _$$Lambda$ChatActivity$FcQ_NOVyq6WAJ_k9m5uIe8kLYek(this));
            }

            if (var17 == 1) {
               Collections.reverse(var5);
            }

            if (this.currentEncryptedChat == null) {
               DataQuery.getInstance(super.currentAccount).loadReplyMessagesForMessages(var5, this.dialog_id);
            }

            if ((var17 == 2 || var17 == 1) && var5.isEmpty() && !var15) {
               this.forwardEndReached[0] = true;
            }

            MediaController var19 = MediaController.getInstance();
            var20 = var5.size();
            var1 = 0;
            var67 = false;

            for(var35 = null; var1 < var20; var35 = var45) {
               var42 = ((MessageObject)var5.get(var20 - var1 - 1)).messageOwner.action;
               if (var1 == 0 && var42 instanceof TLRPC.TL_messageActionChatCreate) {
                  var21 = true;
                  var45 = var35;
               } else {
                  if (!var67) {
                     break;
                  }

                  var21 = var67;
                  var45 = var35;
                  if (var1 < 2) {
                     var21 = var67;
                     var45 = var35;
                     if (var42 instanceof TLRPC.TL_messageActionChatEditPhoto) {
                        var45 = var42;
                        var21 = var67;
                     }
                  }
               }

               ++var1;
               var67 = var21;
            }

            var20 = 0;
            var48 = null;
            var43 = null;
            var16 = 0;
            var1 = 0;

            for(var6 = var10; var20 < var5.size(); var16 = var14) {
               var22 = (MessageObject)var5.get(var20);
               var14 = var16 + var22.getApproximateHeight();
               TLRPC.User var23 = this.currentUser;
               if (var23 != null) {
                  if (var23.self) {
                     var22.messageOwner.out = true;
                  }

                  if (this.currentUser.bot && var22.isOut() || this.currentUser.id == var4) {
                     var22.setIsRead();
                  }
               }

               LongSparseArray var24;
               LongSparseArray var25;
               label2366: {
                  if (this.messagesDict[var13].indexOfKey(var22.getId()) < 0) {
                     this.addToPolls(var22, (MessageObject)null);
                     if (this.isSecretChat()) {
                        this.checkSecretMessageForLocation(var22);
                     }

                     if (var19.isPlayingMessage(var22)) {
                        var96 = var19.getPlayingMessageObject();
                        var22.audioProgress = var96.audioProgress;
                        var22.audioProgressSec = var96.audioProgressSec;
                        var22.audioPlayerDuration = var96.audioPlayerDuration;
                     }

                     if (var13 == 0 && ChatObject.isChannel(this.currentChat) && var22.getId() == 1) {
                        this.endReached[var13] = true;
                        this.cacheEndReached[var13] = true;
                     }

                     if (var22.getId() > 0) {
                        this.maxMessageId[var13] = Math.min(var22.getId(), this.maxMessageId[var13]);
                        this.minMessageId[var13] = Math.max(var22.getId(), this.minMessageId[var13]);
                     } else if (this.currentEncryptedChat != null) {
                        this.maxMessageId[var13] = Math.max(var22.getId(), this.maxMessageId[var13]);
                        this.minMessageId[var13] = Math.min(var22.getId(), this.minMessageId[var13]);
                     }

                     var16 = var22.messageOwner.date;
                     if (var16 != 0) {
                        int[] var97 = this.maxDate;
                        var97[var13] = Math.max(var97[var13], var16);
                        var97 = this.minDate;
                        if (var97[var13] == 0 || var22.messageOwner.date < var97[var13]) {
                           this.minDate[var13] = var22.messageOwner.date;
                        }
                     }

                     if (var22.getId() == this.last_message_id) {
                        this.forwardEndReached[var13] = true;
                     }

                     var26 = var22.messageOwner.action;
                     if (var22.type >= 0 && (var13 != 1 || !(var26 instanceof TLRPC.TL_messageActionChatMigrateTo))) {
                        TLRPC.Chat var102 = this.currentChat;
                        if ((var102 == null || !var102.creator || !(var26 instanceof TLRPC.TL_messageActionChatCreate) && (var35 == null || var26 != var35)) && !(var22.messageOwner.action instanceof TLRPC.TL_messageActionChannelMigrateFrom)) {
                           var36 = this.needAnimateToMessage;
                           var96 = var22;
                           if (var36 != null) {
                              var96 = var22;
                              if (var36.getId() == var22.getId()) {
                                 var96 = var22;
                                 if (var22.getId() < 0) {
                                    var96 = var22;
                                    if (var22.type == 5) {
                                       var96 = this.needAnimateToMessage;
                                       this.animatingMessageObjects.add(var96);
                                       this.needAnimateToMessage = null;
                                    }
                                 }
                              }
                           }

                           this.messagesDict[var13].put(var96.getId(), var96);
                           var108 = (ArrayList)this.messagesByDays.get(var96.dateKey);
                           if (var108 == null) {
                              var108 = new ArrayList();
                              this.messagesByDays.put(var96.dateKey, var108);
                              var37 = new TLRPC.TL_message();
                              var37.message = LocaleController.formatDateChat((long)var96.messageOwner.date);
                              var37.id = 0;
                              var37.date = var96.messageOwner.date;
                              var36 = new MessageObject(super.currentAccount, var37, false);
                              var36.type = 10;
                              var36.contentType = 1;
                              var36.isDateObject = true;
                              if (var17 == 1) {
                                 this.messages.add(0, var36);
                              } else {
                                 this.messages.add(var36);
                              }

                              ++var1;
                           }

                           if (var96.hasValidGroupId()) {
                              label2330: {
                                 var92 = (MessageObject.GroupedMessages)this.groupedMessagesMap.get(var96.getGroupIdForUse());
                                 if (var92 != null && this.messages.size() > 1) {
                                    if (var17 == 1) {
                                       var36 = (MessageObject)this.messages.get(0);
                                    } else {
                                       var39 = this.messages;
                                       var36 = (MessageObject)var39.get(var39.size() - 2);
                                    }

                                    if (var36.getGroupIdForUse() == var96.getGroupIdForUse()) {
                                       var11 = var36.localGroupId;
                                       if (var11 != 0L) {
                                          var96.localGroupId = var11;
                                          var41 = (MessageObject.GroupedMessages)this.groupedMessagesMap.get(var36.localGroupId);
                                          break label2330;
                                       }
                                    } else if (var36.getGroupIdForUse() != var96.getGroupIdForUse()) {
                                       var96.localGroupId = Utilities.random.nextLong();
                                       var41 = null;
                                       break label2330;
                                    }
                                 }

                                 var41 = var92;
                              }

                              MessageObject.GroupedMessages var103;
                              if (var41 == null) {
                                 var103 = new MessageObject.GroupedMessages();
                                 var103.groupId = var96.getGroupId();
                                 this.groupedMessagesMap.put(var103.groupId, var103);
                                 var95 = var48;
                              } else {
                                 label3486: {
                                    if (var43 != null) {
                                       var95 = var48;
                                       var103 = var41;
                                       if (var43.indexOfKey(var96.getGroupId()) >= 0) {
                                          break label3486;
                                       }
                                    }

                                    var95 = var48;
                                    if (var48 == null) {
                                       var95 = new LongSparseArray();
                                    }

                                    var95.put(var96.getGroupId(), var41);
                                    var103 = var41;
                                 }
                              }

                              var10 = var6;
                              var48 = var43;
                              if (var43 == null) {
                                 var48 = new LongSparseArray();
                              }

                              var48.put(var103.groupId, var103);
                              if (var17 == 1) {
                                 var103.messages.add(var96);
                                 var44 = var95;
                                 var95 = var48;
                              } else {
                                 var103.messages.add(0, var96);
                                 var44 = var95;
                                 var95 = var48;
                              }
                           } else {
                              var44 = var48;
                              var95 = var43;
                              var10 = var6;
                              if (var96.getGroupIdForUse() != 0L) {
                                 var96.messageOwner.grouped_id = 0L;
                                 var96.localSentGroupId = 0L;
                                 var10 = var6;
                                 var95 = var43;
                                 var44 = var48;
                              }
                           }

                           ++var1;
                           var108.add(var96);
                           if (var17 == 1) {
                              this.messages.add(0, var96);
                           } else {
                              var50 = this.messages;
                              var50.add(var50.size() - 1, var96);
                           }

                           label2313: {
                              if (this.currentEncryptedChat == null) {
                                 if (this.createUnreadMessageAfterId != 0 && var17 != 1) {
                                    var16 = var20 + 1;
                                    if (var16 < var5.size()) {
                                       var7 = (MessageObject)var5.get(var16);
                                       if (!var96.isOut()) {
                                          var8 = var7;
                                          if (var7.getId() < this.createUnreadMessageAfterId) {
                                             break label2313;
                                          }
                                       }
                                    }
                                 }
                              } else if (this.createUnreadMessageAfterId != 0 && var17 != 1) {
                                 var16 = var20 - 1;
                                 if (var16 >= 0) {
                                    var7 = (MessageObject)var5.get(var16);
                                    if (!var96.isOut()) {
                                       var8 = var7;
                                       if (var7.getId() < this.createUnreadMessageAfterId) {
                                          break label2313;
                                       }
                                    }
                                 }
                              }

                              var8 = null;
                           }

                           if (var17 == 2 && var96.getId() == this.first_unread_id) {
                              label2295: {
                                 if (var14 <= AndroidUtilities.displaySize.y / 2) {
                                    var16 = var1;
                                    if (this.forwardEndReached[0]) {
                                       break label2295;
                                    }
                                 }

                                 TLRPC.TL_message var46 = new TLRPC.TL_message();
                                 var46.message = "";
                                 var46.id = 0;
                                 var7 = new MessageObject(super.currentAccount, var46, false);
                                 var7.type = 6;
                                 var7.contentType = 2;
                                 var108 = this.messages;
                                 var108.add(var108.size() - 1, var7);
                                 this.unreadMessageObject = var7;
                                 this.scrollToMessage = this.unreadMessageObject;
                                 this.scrollToMessagePosition = -10000;
                                 var16 = var1 + 1;
                              }
                           } else {
                              label3591: {
                                 if (var17 != 3) {
                                    var16 = var1;
                                    if (var17 != 4) {
                                       break label3591;
                                    }
                                 }

                                 var16 = var1;
                                 if (var96.getId() == this.startLoadFromMessageId) {
                                    this.removeSelectedMessageHighlight();
                                    if (this.needSelectFromMessageId) {
                                       this.highlightMessageId = var96.getId();
                                    }

                                    this.scrollToMessage = var96;
                                    this.startLoadFromMessageId = 0;
                                    var16 = var1;
                                    if (this.scrollToMessagePosition == -10000) {
                                       this.scrollToMessagePosition = -9000;
                                       var16 = var1;
                                    }
                                 }
                              }
                           }

                           var24 = var44;
                           var25 = var95;
                           var1 = var16;
                           var42 = var35;
                           var6 = var10;
                           if (var17 == 2) {
                              break label2366;
                           }

                           var24 = var44;
                           var25 = var95;
                           var1 = var16;
                           var42 = var35;
                           var6 = var10;
                           if (this.unreadMessageObject != null) {
                              break label2366;
                           }

                           var24 = var44;
                           var25 = var95;
                           var1 = var16;
                           var42 = var35;
                           var6 = var10;
                           if (this.createUnreadMessageAfterId == 0) {
                              break label2366;
                           }

                           if (this.currentEncryptedChat != null || var96.isOut() || var96.getId() < this.createUnreadMessageAfterId) {
                              var24 = var44;
                              var25 = var95;
                              var1 = var16;
                              var42 = var35;
                              var6 = var10;
                              if (this.currentEncryptedChat == null) {
                                 break label2366;
                              }

                              var24 = var44;
                              var25 = var95;
                              var1 = var16;
                              var42 = var35;
                              var6 = var10;
                              if (var96.isOut()) {
                                 break label2366;
                              }

                              var24 = var44;
                              var25 = var95;
                              var1 = var16;
                              var42 = var35;
                              var6 = var10;
                              if (var96.getId() > this.createUnreadMessageAfterId) {
                                 break label2366;
                              }
                           }

                           if (var17 != 1 && var8 == null) {
                              var24 = var44;
                              var25 = var95;
                              var1 = var16;
                              var42 = var35;
                              var6 = var10;
                              if (var8 != null) {
                                 break label2366;
                              }

                              var24 = var44;
                              var25 = var95;
                              var1 = var16;
                              var42 = var35;
                              var6 = var10;
                              if (!var10) {
                                 break label2366;
                              }

                              var24 = var44;
                              var25 = var95;
                              var1 = var16;
                              var42 = var35;
                              var6 = var10;
                              if (var20 != var5.size() - 1) {
                                 break label2366;
                              }
                           }

                           TLRPC.TL_message var53 = new TLRPC.TL_message();
                           var53.message = "";
                           var53.id = 0;
                           var7 = new MessageObject(super.currentAccount, var53, false);
                           var7.type = 6;
                           var7.contentType = 2;
                           if (var17 == 1) {
                              this.messages.add(1, var7);
                           } else {
                              var50 = this.messages;
                              var50.add(var50.size() - 1, var7);
                           }

                           this.unreadMessageObject = var7;
                           if (var17 == 3) {
                              this.scrollToMessage = this.unreadMessageObject;
                              this.startLoadFromMessageId = 0;
                              this.scrollToMessagePosition = -9000;
                           }

                           var1 = var16 + 1;
                           var6 = var10;
                           var42 = var35;
                           var25 = var95;
                           var24 = var44;
                           break label2366;
                        }
                     }
                  }

                  var24 = var48;
                  var25 = var43;
                  var42 = var35;
               }

               ++var20;
               var35 = var42;
               var48 = var24;
               var43 = var25;
            }

            if (var6) {
               this.createUnreadMessageAfterId = 0;
            }

            if (var17 == 0 && var1 == 0) {
               --this.loadsCount;
            }

            if (this.forwardEndReached[var13] && var13 != 1) {
               this.first_unread_id = 0;
               this.last_message_id = 0;
               this.createUnreadMessageAfterId = 0;
            }

            View var75;
            View var114;
            if (var17 == 1) {
               byte var81;
               if (var5.size() != var14 && (!var15 || this.currentEncryptedChat != null || this.forwardEndReached[var13])) {
                  this.forwardEndReached[var13] = true;
                  if (var13 != 1) {
                     this.first_unread_id = 0;
                     this.last_message_id = 0;
                     this.createUnreadMessageAfterId = 0;
                     var51 = this.chatAdapter;
                     var51.notifyItemRemoved(var51.loadingDownRow);
                     var40 = 1;
                  } else {
                     var40 = 0;
                  }

                  this.startLoadFromMessageId = 0;
                  var81 = var40;
               } else {
                  var81 = 0;
               }

               if (var1 > 0) {
                  var16 = this.chatLayoutManager.findFirstVisibleItemPosition();
                  var2 = var16;
                  if (var16 == 0) {
                     var2 = var16 + 1;
                  }

                  var114 = this.chatLayoutManager.findViewByPosition(var2);
                  if (var114 == null) {
                     var52 = null;
                     var2 = -1;
                  } else {
                     label3488: {
                        var52 = var114;
                        var16 = var2;

                        while(var52 instanceof ChatMessageCell && ((ChatMessageCell)var52).getMessageObject().hasValidGroupId()) {
                           ++var16;
                           var75 = this.chatLayoutManager.findViewByPosition(var16);
                           var52 = var75;
                           if (var75 == null) {
                              var52 = var114;
                              break label3488;
                           }
                        }

                        var2 = var16;
                     }
                  }

                  if (var52 == null) {
                     var16 = 0;
                  } else {
                     var16 = this.chatListView.getMeasuredHeight() - var52.getBottom() - this.chatListView.getPaddingBottom();
                  }

                  this.chatAdapter.notifyItemRangeInserted(1, var1);
                  if (var2 != -1) {
                     this.chatLayoutManager.scrollToPositionWithOffset(var2 + var1 - var81, var16);
                  }
               }

               this.loadingForward = false;
            } else {
               if (var5.size() < var14 && var17 != 3 && var17 != 4) {
                  if (var15) {
                     if (this.currentEncryptedChat != null || this.isBroadcast) {
                        this.endReached[var13] = true;
                     }

                     if (var17 != 2) {
                        this.cacheEndReached[var13] = true;
                     }
                  } else if (var17 != 2 || var5.size() == 0 && this.messages.isEmpty()) {
                     this.endReached[var13] = true;
                  }
               }

               this.loading = false;
               if (this.chatListView == null) {
                  this.scrollToTopOnResume = true;
                  if (this.scrollToMessage != null) {
                     this.scrollToTopUnReadOnResume = true;
                  }
               } else {
                  if (!this.first && !this.scrollToTopOnResume && !this.forceScrollToTop) {
                     if (var1 != 0) {
                        if (!this.endReached[var13] || (var13 != 0 || this.mergeDialogId != 0L) && var13 != 1) {
                           var98 = 0;
                        } else {
                           var51 = this.chatAdapter;
                           var51.notifyItemRangeChanged(var51.loadingUpRow - 1, 2);
                           this.chatAdapter.updateRows();
                           var98 = 1;
                        }

                        var18 = this.chatLayoutManager.findFirstVisibleItemPosition();
                        var114 = this.chatLayoutManager.findViewByPosition(var18);
                        if (var114 != null) {
                           var52 = var114;
                           var2 = var18;

                           while(var52 instanceof ChatMessageCell && ((ChatMessageCell)var52).getMessageObject().hasValidGroupId()) {
                              ++var2;
                              var75 = this.chatLayoutManager.findViewByPosition(var2);
                              var52 = var75;
                              if (var75 == null) {
                                 var52 = var114;
                                 var2 = var18;
                                 break;
                              }
                           }
                        } else {
                           var52 = null;
                           var2 = -1;
                        }

                        if (var52 == null) {
                           var18 = 0;
                        } else {
                           var18 = this.chatListView.getMeasuredHeight() - var52.getBottom() - this.chatListView.getPaddingBottom();
                        }

                        if (var1 - var98 > 0) {
                           var94 = this.chatAdapter.messagesEndRow;
                           var51 = this.chatAdapter;
                           var51.notifyItemChanged(var51.loadingUpRow);
                           this.chatAdapter.notifyItemRangeInserted(var94, var1 - var98);
                        }

                        if (var2 != -1) {
                           this.chatLayoutManager.scrollToPositionWithOffset(var2, var18);
                        }
                     } else if (this.endReached[var13] && (var13 == 0 && this.mergeDialogId == 0L || var13 == 1)) {
                        var51 = this.chatAdapter;
                        var51.notifyItemRemoved(var51.loadingUpRow);
                     }
                  } else {
                     this.forceScrollToTop = false;
                     this.chatAdapter.notifyDataSetChanged();
                     var36 = this.scrollToMessage;
                     if (var36 == null) {
                        this.moveScrollToLastMessage();
                     } else {
                        label3540: {
                           var16 = this.startLoadFromMessageOffset;
                           if (var16 != Integer.MAX_VALUE) {
                              var16 = -var16 - this.chatListView.getPaddingBottom();
                              this.startLoadFromMessageOffset = Integer.MAX_VALUE;
                           } else {
                              label3492: {
                                 var16 = this.scrollToMessagePosition;
                                 if (var16 == -9000) {
                                    var16 = this.getScrollOffsetForMessage(var36);
                                 } else {
                                    if (var16 != -10000) {
                                       break label3492;
                                    }

                                    var16 = -AndroidUtilities.dp(11.0F);
                                 }

                                 var6 = false;
                                 break label3540;
                              }
                           }

                           var6 = true;
                        }

                        if (!this.messages.isEmpty()) {
                           label2196: {
                              label2195: {
                                 if (this.chatAdapter.loadingUpRow != -1 && !this.messages.isEmpty()) {
                                    var39 = this.messages;
                                    if (var39.get(var39.size() - 1) == this.scrollToMessage) {
                                       break label2195;
                                    }

                                    var39 = this.messages;
                                    if (var39.get(var39.size() - 2) == this.scrollToMessage) {
                                       break label2195;
                                    }
                                 }

                                 this.chatLayoutManager.scrollToPositionWithOffset(this.chatAdapter.messagesStartRow + this.messages.indexOf(this.scrollToMessage), var16, var6);
                                 break label2196;
                              }

                              this.chatLayoutManager.scrollToPositionWithOffset(this.chatAdapter.loadingUpRow, var16, var6);
                           }
                        }

                        this.chatListView.invalidate();
                        var16 = this.scrollToMessagePosition;
                        if (var16 == -10000 || var16 == -9000) {
                           this.showPagedownButton(true, true);
                           if (var2 != 0) {
                              var49 = this.pagedownButtonCounter;
                              if (var49 != null) {
                                 var49.setVisibility(0);
                                 if (this.prevSetUnreadCount != this.newUnreadMessageCount) {
                                    var49 = this.pagedownButtonCounter;
                                    this.newUnreadMessageCount = var2;
                                    var49.setText(String.format("%d", var2));
                                    this.prevSetUnreadCount = this.newUnreadMessageCount;
                                 }
                              }
                           }
                        }

                        this.scrollToMessagePosition = -10000;
                        this.scrollToMessage = null;
                     }

                     if (var18 != 0) {
                        this.showMentionDownButton(true, true);
                        var49 = this.mentiondownButtonCounter;
                        if (var49 != null) {
                           var49.setVisibility(0);
                           var49 = this.mentiondownButtonCounter;
                           this.newMentionsCount = var18;
                           var49.setText(String.format("%d", var18));
                        }
                     }
                  }

                  if (this.paused) {
                     this.scrollToTopOnResume = true;
                     if (this.scrollToMessage != null) {
                        this.scrollToTopUnReadOnResume = true;
                     }
                  }

                  if (this.first) {
                     var61 = this.chatListView;
                     if (var61 != null) {
                        var61.setEmptyView(this.emptyViewContainer);
                     }
                  }
               }
            }

            if (var43 != null) {
               for(var2 = 0; var2 < var43.size(); ++var2) {
                  var41 = (MessageObject.GroupedMessages)var43.valueAt(var2);
                  var41.calculate();
                  if (this.chatAdapter != null && var48 != null && var48.indexOfKey(var43.keyAt(var2)) >= 0) {
                     var121 = var41.messages;
                     var22 = (MessageObject)var121.get(var121.size() - 1);
                     var16 = this.messages.indexOf(var22);
                     if (var16 >= 0) {
                        ChatActivity.ChatActivityAdapter var126 = this.chatAdapter;
                        var126.notifyItemRangeChanged(var16 + var126.messagesStartRow, var41.messages.size());
                     }
                  }
               }
            }

            if (this.first && this.messages.size() > 0) {
               this.first = false;
            }

            if (this.messages.isEmpty() && this.currentEncryptedChat == null) {
               var69 = this.currentUser;
               if (var69 != null && var69.bot && this.botUser == null) {
                  this.botUser = "";
                  this.updateBottomOverlay();
               }
            }

            if (var1 == 0 && (this.mergeDialogId != 0L && var13 == 0 || this.currentEncryptedChat != null && !this.endReached[0])) {
               this.first = true;
               var61 = this.chatListView;
               if (var61 != null) {
                  var61.setEmptyView((View)null);
               }

               var70 = this.emptyViewContainer;
               if (var70 != null) {
                  var70.setVisibility(4);
               }
            } else {
               var70 = this.progressView;
               if (var70 != null) {
                  var70.setVisibility(4);
               }
            }

            if (var1 == 0 && this.mergeDialogId != 0L && var13 == 0) {
               NotificationCenter.getInstance(super.currentAccount).setAllowedNotificationsDutingAnimation(new int[]{NotificationCenter.chatInfoDidLoad, NotificationCenter.dialogsNeedReload, NotificationCenter.closeChats, NotificationCenter.messagesDidLoad, NotificationCenter.botKeyboardDidLoad, NotificationCenter.userInfoDidLoad, NotificationCenter.needDeleteDialog});
            }

            if (var9) {
               this.showFloatingDateView(false);
            }

            this.checkScrollForLoad(false);
            this.setItemAnimationsEnabled(true);
         }
      } else if (var1 == NotificationCenter.emojiDidLoad) {
         var61 = this.chatListView;
         if (var61 != null) {
            var61.invalidateViews();
         }

         SimpleTextView var73 = this.replyObjectTextView;
         if (var73 != null) {
            var73.invalidate();
         }

         var49 = this.alertTextView;
         if (var49 != null) {
            var49.invalidate();
         }

         var73 = this.pinnedMessageTextView;
         if (var73 != null) {
            var73.invalidate();
         }

         var61 = this.mentionListView;
         if (var61 != null) {
            var61.invalidateViews();
         }

         var61 = this.stickersListView;
         if (var61 != null) {
            var61.invalidateViews();
         }
      } else if (var1 == NotificationCenter.didUpdateConnectionState) {
         if (ConnectionsManager.getInstance(var2).getConnectionState() == 3) {
            this.checkAutoDownloadMessages(false);
         }
      } else {
         Integer var54;
         TLRPC.Chat var55;
         ChatAvatarContainer var82;
         if (var1 == NotificationCenter.chatOnlineCountDidLoad) {
            var54 = (Integer)var3[0];
            if (this.chatInfo == null) {
               return;
            }

            var55 = this.currentChat;
            if (var55 == null || var55.id != var54) {
               return;
            }

            this.chatInfo.online_count = (Integer)var3[1];
            var82 = this.avatarContainer;
            if (var82 != null) {
               var82.updateOnlineCount();
               this.avatarContainer.updateSubtitle();
            }
         } else {
            boolean var47;
            TLRPC.Chat var86;
            ChatActivityEnterView var93;
            if (var1 == NotificationCenter.updateInterfaces) {
               var16 = (Integer)var3[0];
               var2 = var16 & 1;
               if (var2 != 0 || (var16 & 16) != 0) {
                  if (this.currentChat != null) {
                     var86 = MessagesController.getInstance(super.currentAccount).getChat(this.currentChat.id);
                     if (var86 != null) {
                        this.currentChat = var86;
                     }
                  } else if (this.currentUser != null) {
                     var69 = MessagesController.getInstance(super.currentAccount).getUser(this.currentUser.id);
                     if (var69 != null) {
                        this.currentUser = var69;
                     }
                  }

                  this.updateTitle();
               }

               if ((var16 & 32) == 0 && (var16 & 4) == 0) {
                  var33 = false;
               } else {
                  if (this.currentChat != null) {
                     var82 = this.avatarContainer;
                     if (var82 != null) {
                        var82.updateOnlineCount();
                     }
                  }

                  var33 = true;
               }

               if ((var16 & 2) != 0 || (var16 & 8) != 0 || var2 != 0) {
                  this.checkAndUpdateAvatar();
                  this.updateVisibleRows();
               }

               if ((var16 & 64) != 0) {
                  var33 = true;
               }

               var47 = var33;
               if ((var16 & 8192) != 0) {
                  var47 = var33;
                  if (this.currentChat != null) {
                     var86 = MessagesController.getInstance(super.currentAccount).getChat(this.currentChat.id);
                     if (var86 == null) {
                        return;
                     }

                     this.currentChat = var86;
                     this.updateBottomOverlay();
                     var93 = this.chatActivityEnterView;
                     if (var93 != null) {
                        var93.setDialogId(this.dialog_id, super.currentAccount);
                     }

                     var47 = true;
                  }
               }

               if ((var16 & 256) != 0 && this.bottomOverlayChatText2 != null && this.chatInfo != null && ChatObject.isChannel(this.currentChat) && !this.currentChat.megagroup && -this.chatInfo.linked_chat_id != 0) {
                  this.bottomOverlayChatText2.updateCounter();
               }

               var82 = this.avatarContainer;
               if (var82 != null && var47) {
                  var82.updateSubtitle();
               }

               if ((var16 & 128) != 0) {
                  this.updateContactStatus();
               }
            } else {
               int var62;
               TLRPC.Chat var63;
               MessageObject.GroupedMessages var64;
               ArrayList var68;
               TLRPC.User var71;
               TLRPC.Message var72;
               AlertDialog.Builder var99;
               TLRPC.Message var106;
               int[] var120;
               String var140;
               if (var1 == NotificationCenter.didReceiveNewMessages) {
                  if ((Long)var3[0] == this.dialog_id) {
                     var17 = UserConfig.getInstance(super.currentAccount).getClientUserId();
                     ArrayList var76 = (ArrayList)var3[1];
                     if (this.currentEncryptedChat != null && var76.size() == 1) {
                        var36 = (MessageObject)var76.get(0);
                        if (this.currentEncryptedChat != null && var36.isOut()) {
                           var35 = var36.messageOwner.action;
                           if (var35 instanceof TLRPC.TL_messageEncryptedAction && var35.encryptedAction instanceof TLRPC.TL_decryptedMessageActionSetMessageTTL && this.getParentActivity() != null && AndroidUtilities.getPeerLayerVersion(this.currentEncryptedChat.layer) < 17) {
                              var1 = this.currentEncryptedChat.ttl;
                              if (var1 > 0 && var1 <= 60) {
                                 var99 = new AlertDialog.Builder(this.getParentActivity());
                                 var99.setTitle(LocaleController.getString("AppName", 2131558635));
                                 var99.setPositiveButton(LocaleController.getString("OK", 2131560097), (OnClickListener)null);
                                 String var57 = this.currentUser.first_name;
                                 var99.setMessage(LocaleController.formatString("CompatibilityChat", 2131559134, var57, var57));
                                 this.showDialog(var99.create());
                              }
                           }
                        }
                     }

                     var1 = 0;

                     for(var67 = false; var1 < var76.size(); var67 = var47) {
                        var36 = (MessageObject)var76.get(var1);
                        var47 = var67;
                        if (!var67) {
                           var47 = var67;
                           if (var36.isOut()) {
                              NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.closeSearchByActiveAction);
                              var47 = true;
                           }
                        }

                        if (this.currentChat != null) {
                           label3582: {
                              var45 = var36.messageOwner.action;
                              if (!(var45 instanceof TLRPC.TL_messageActionChatDeleteUser) || var45.user_id != var17) {
                                 var45 = var36.messageOwner.action;
                                 if (!(var45 instanceof TLRPC.TL_messageActionChatAddUser) || !var45.users.contains(var17)) {
                                    break label3582;
                                 }
                              }

                              var55 = MessagesController.getInstance(super.currentAccount).getChat(this.currentChat.id);
                              if (var55 != null) {
                                 this.currentChat = var55;
                                 this.checkActionBarMenu();
                                 this.updateBottomOverlay();
                                 ChatAvatarContainer var66 = this.avatarContainer;
                                 if (var66 != null) {
                                    var66.updateSubtitle();
                                 }
                              }
                           }
                        } else if (this.inlineReturn != 0L && var36.messageOwner.reply_markup != null) {
                           for(var16 = 0; var16 < var36.messageOwner.reply_markup.rows.size(); ++var16) {
                              TLRPC.TL_keyboardButtonRow var59 = (TLRPC.TL_keyboardButtonRow)var36.messageOwner.reply_markup.rows.get(var16);

                              for(var62 = 0; var62 < var59.buttons.size(); ++var62) {
                                 TLRPC.KeyboardButton var56 = (TLRPC.KeyboardButton)var59.buttons.get(var62);
                                 if (var56 instanceof TLRPC.TL_keyboardButtonSwitchInline) {
                                    this.processSwitchButton((TLRPC.TL_keyboardButtonSwitchInline)var56);
                                    break;
                                 }
                              }
                           }
                        }

                        var16 = var36.messageOwner.reply_to_msg_id;
                        if (var16 != 0 && var36.replyMessageObject == null) {
                           var36.replyMessageObject = (MessageObject)this.messagesDict[0].get(var16);
                           var45 = var36.messageOwner.action;
                           if (var45 instanceof TLRPC.TL_messageActionPinMessage) {
                              var36.generatePinMessageText((TLRPC.User)null, (TLRPC.Chat)null);
                           } else if (var45 instanceof TLRPC.TL_messageActionGameScore) {
                              var36.generateGameMessageText((TLRPC.User)null);
                           } else if (var45 instanceof TLRPC.TL_messageActionPaymentSent) {
                              var36.generatePaymentSentMessageText((TLRPC.User)null);
                           }

                           if (var36.isMegagroup()) {
                              var36 = var36.replyMessageObject;
                              if (var36 != null) {
                                 var106 = var36.messageOwner;
                                 if (var106 != null) {
                                    var106.flags |= Integer.MIN_VALUE;
                                 }
                              }
                           }
                        }

                        ++var1;
                     }

                     boolean var65;
                     if (!this.forwardEndReached[0]) {
                        if (this.currentEncryptedChat != null) {
                           var1 = Integer.MAX_VALUE;
                        } else {
                           var1 = Integer.MIN_VALUE;
                        }

                        var16 = var1;
                        var18 = 0;
                        var47 = false;
                        var14 = Integer.MIN_VALUE;
                        var33 = false;

                        while(true) {
                           if (var18 >= var76.size()) {
                              if (this.newUnreadMessageCount != 0) {
                                 var49 = this.pagedownButtonCounter;
                                 if (var49 != null) {
                                    var49.setVisibility(0);
                                    var16 = this.prevSetUnreadCount;
                                    var62 = this.newUnreadMessageCount;
                                    if (var16 != var62) {
                                       this.prevSetUnreadCount = var62;
                                       this.pagedownButtonCounter.setText(String.format("%d", var62));
                                    }
                                 }
                              }

                              if (this.newMentionsCount != 0) {
                                 var49 = this.mentiondownButtonCounter;
                                 if (var49 != null) {
                                    var49.setVisibility(0);
                                    this.mentiondownButtonCounter.setText(String.format("%d", this.newMentionsCount));
                                    this.showMentionDownButton(true, true);
                                 }
                              }

                              this.updateVisibleRows();
                              break;
                           }

                           var36 = (MessageObject)var76.get(var18);
                           var71 = this.currentUser;
                           if (var71 != null && (var71.bot && var36.isOut() || this.currentUser.id == var17)) {
                              var36.setIsRead();
                           }

                           var45 = var36.messageOwner.action;
                           ChatAvatarContainer var100 = this.avatarContainer;
                           if (var100 != null && this.currentEncryptedChat != null && var45 instanceof TLRPC.TL_messageEncryptedAction) {
                              TLRPC.DecryptedMessageAction var143 = var45.encryptedAction;
                              if (var143 instanceof TLRPC.TL_decryptedMessageActionSetMessageTTL) {
                                 var100.setTime(((TLRPC.TL_decryptedMessageActionSetMessageTTL)var143).ttl_seconds);
                              }
                           }

                           if (var45 instanceof TLRPC.TL_messageActionChatMigrateTo) {
                              this.migrateToNewChat(var36);
                              return;
                           }

                           var63 = this.currentChat;
                           var65 = var33;
                           if (var63 != null) {
                              var65 = var33;
                              if (var63.megagroup) {
                                 label3500: {
                                    if (!(var45 instanceof TLRPC.TL_messageActionChatAddUser)) {
                                       var65 = var33;
                                       if (!(var45 instanceof TLRPC.TL_messageActionChatDeleteUser)) {
                                          break label3500;
                                       }
                                    }

                                    var65 = true;
                                 }
                              }
                           }

                           if (var18 == 0 && var36.messageOwner.id < 0 && var36.type == 5) {
                              this.needAnimateToMessage = var36;
                           }

                           if (var36.isOut() && var36.isSending()) {
                              this.scrollToLastMessage(false);
                              return;
                           }

                           boolean var38 = var47;
                           var20 = var14;
                           var94 = var16;
                           if (var36.type >= 0) {
                              if (this.messagesDict[0].indexOfKey(var36.getId()) >= 0) {
                                 var38 = var47;
                                 var20 = var14;
                                 var94 = var16;
                              } else {
                                 label3502: {
                                    var63 = this.currentChat;
                                    if (var63 != null && var63.creator) {
                                       var38 = var47;
                                       var20 = var14;
                                       var94 = var16;
                                       if (var45 instanceof TLRPC.TL_messageActionChatCreate) {
                                          break label3502;
                                       }

                                       if (var45 instanceof TLRPC.TL_messageActionChatEditPhoto && this.messages.size() < 4) {
                                          var38 = var47;
                                          var20 = var14;
                                          var94 = var16;
                                          break label3502;
                                       }
                                    }

                                    if (var45 instanceof TLRPC.TL_messageActionChannelMigrateFrom) {
                                       var38 = var47;
                                       var20 = var14;
                                       var94 = var16;
                                    } else {
                                       label3503: {
                                          this.addToPolls(var36, (MessageObject)null);
                                          var36.checkLayout();
                                          var14 = Math.max(var14, var36.messageOwner.date);
                                          if (var36.getId() > 0) {
                                             var1 = Math.max(var36.getId(), var16);
                                             this.last_message_id = Math.max(this.last_message_id, var36.getId());
                                          } else {
                                             var1 = var16;
                                             if (this.currentEncryptedChat != null) {
                                                var1 = Math.min(var36.getId(), var16);
                                                this.last_message_id = Math.min(this.last_message_id, var36.getId());
                                             }
                                          }

                                          if (var36.messageOwner.mentioned && var36.isContentUnread()) {
                                             ++this.newMentionsCount;
                                          }

                                          ++this.newUnreadMessageCount;
                                          var16 = var36.type;
                                          if (var16 != 10) {
                                             var38 = var47;
                                             var20 = var14;
                                             var94 = var1;
                                             if (var16 != 11) {
                                                break label3503;
                                             }
                                          }

                                          var38 = true;
                                          var94 = var1;
                                          var20 = var14;
                                       }
                                    }
                                 }
                              }
                           }

                           ++var18;
                           var47 = var38;
                           var14 = var20;
                           var16 = var94;
                           var33 = var65;
                        }
                     } else {
                        if (BuildVars.LOGS_ENABLED) {
                           StringBuilder var107 = new StringBuilder();
                           var107.append("received new messages ");
                           var107.append(var76.size());
                           var107.append(" in dialog ");
                           var107.append(this.dialog_id);
                           FileLog.d(var107.toString());
                        }

                        var4 = 0;
                        HashMap var109 = null;
                        var48 = null;
                        var47 = false;
                        var65 = false;
                        boolean var88 = false;

                        for(var1 = var17; var4 < var76.size(); var65 = var67) {
                           var96 = (MessageObject)var76.get(var4);
                           if (this.isSecretChat()) {
                              this.checkSecretMessageForLocation(var96);
                           }

                           TLRPC.User var58 = this.currentUser;
                           if (var58 != null && (var58.bot && var96.isOut() || this.currentUser.id == var1)) {
                              var96.setIsRead();
                           }

                           var26 = var96.messageOwner.action;
                           ChatAvatarContainer var127 = this.avatarContainer;
                           if (var127 != null && this.currentEncryptedChat != null && var26 instanceof TLRPC.TL_messageEncryptedAction) {
                              TLRPC.DecryptedMessageAction var60 = var26.encryptedAction;
                              if (var60 instanceof TLRPC.TL_decryptedMessageActionSetMessageTTL) {
                                 var127.setTime(((TLRPC.TL_decryptedMessageActionSetMessageTTL)var60).ttl_seconds);
                              }
                           }

                           label2661: {
                              HashMap var84;
                              label2660: {
                                 boolean var83;
                                 label2659: {
                                    if (var96.type >= 0 && this.messagesDict[0].indexOfKey(var96.getId()) < 0) {
                                       var63 = this.currentChat;
                                       if ((var63 == null || !var63.creator || !(var26 instanceof TLRPC.TL_messageActionChatCreate) && (!(var26 instanceof TLRPC.TL_messageActionChatEditPhoto) || this.messages.size() >= 4)) && !(var26 instanceof TLRPC.TL_messageActionChannelMigrateFrom)) {
                                          this.addToPolls(var96, (MessageObject)null);
                                          if (var4 == 0 && var96.messageOwner.id < 0 && var96.type == 5) {
                                             this.animatingMessageObjects.add(var96);
                                          }

                                          if (var96.hasValidGroupId()) {
                                             var92 = (MessageObject.GroupedMessages)this.groupedMessagesMap.get(var96.getGroupId());
                                             var64 = var92;
                                             if (var92 == null) {
                                                var64 = new MessageObject.GroupedMessages();
                                                var64.groupId = var96.getGroupId();
                                                this.groupedMessagesMap.put(var64.groupId, var64);
                                             }

                                             var92 = var64;
                                             var43 = var48;
                                             if (var48 == null) {
                                                var43 = new LongSparseArray();
                                             }

                                             var43.put(var64.groupId, var64);
                                             var64.messages.add(var96);
                                             var48 = var43;
                                          } else {
                                             var92 = null;
                                          }

                                          label2643: {
                                             if (var92 != null) {
                                                if (var92.messages.size() > 1) {
                                                   var68 = var92.messages;
                                                   var7 = (MessageObject)var68.get(var68.size() - 2);
                                                } else {
                                                   var7 = null;
                                                }

                                                if (var7 != null) {
                                                   var16 = this.messages.indexOf(var7);
                                                   break label2643;
                                                }
                                             }

                                             var16 = -1;
                                          }

                                          if (var16 == -1) {
                                             if (var96.messageOwner.id >= 0 && !this.messages.isEmpty()) {
                                                label3387: {
                                                   var20 = this.messages.size();
                                                   var94 = 0;

                                                   label3388: {
                                                      while(true) {
                                                         if (var94 >= var20) {
                                                            var94 = var16;
                                                            break label3388;
                                                         }

                                                         var22 = (MessageObject)this.messages.get(var94);
                                                         if (var22.type >= 0) {
                                                            var72 = var22.messageOwner;
                                                            if (var72.date > 0) {
                                                               var14 = var72.id;
                                                               if (var14 > 0) {
                                                                  var17 = var96.messageOwner.id;
                                                                  if (var17 > 0 && var14 < var17) {
                                                                     break;
                                                                  }
                                                               }

                                                               if (var22.messageOwner.date < var96.messageOwner.date) {
                                                                  break;
                                                               }
                                                            }
                                                         }

                                                         ++var94;
                                                      }

                                                      label2617: {
                                                         if (var22.getGroupId() != 0L) {
                                                            var92 = (MessageObject.GroupedMessages)this.groupedMessagesMap.get(var22.getGroupId());
                                                            var64 = var92;
                                                            if (var92 == null) {
                                                               break label2617;
                                                            }

                                                            var64 = var92;
                                                            if (var92.messages.size() != 0) {
                                                               break label2617;
                                                            }
                                                         }

                                                         var64 = null;
                                                      }

                                                      if (var64 != null) {
                                                         var121 = this.messages;
                                                         var68 = var64.messages;
                                                         var94 = var121.indexOf(var68.get(var68.size() - 1));
                                                      }
                                                   }

                                                   if (var94 != -1) {
                                                      var16 = var94;
                                                      var1 = var1;
                                                      if (var94 <= this.messages.size()) {
                                                         break label3387;
                                                      }
                                                   }

                                                   var16 = this.messages.size();
                                                   var1 = var1;
                                                }
                                             } else {
                                                var16 = 0;
                                             }
                                          }

                                          var84 = var109;
                                          if (this.currentEncryptedChat != null) {
                                             TLRPC.MessageMedia var135 = var96.messageOwner.media;
                                             var84 = var109;
                                             if (var135 instanceof TLRPC.TL_messageMediaWebPage) {
                                                var84 = var109;
                                                if (var135.webpage instanceof TLRPC.TL_webPageUrlPending) {
                                                   var84 = var109;
                                                   if (var109 == null) {
                                                      var84 = new HashMap();
                                                   }

                                                   var121 = (ArrayList)var84.get(var96.messageOwner.media.webpage.url);
                                                   var39 = var121;
                                                   if (var121 == null) {
                                                      var39 = new ArrayList();
                                                      var84.put(var96.messageOwner.media.webpage.url, var39);
                                                   }

                                                   var39.add(var96);
                                                }
                                             }
                                          }

                                          var96.checkLayout();
                                          if (var26 instanceof TLRPC.TL_messageActionChatMigrateTo) {
                                             this.migrateToNewChat(var96);
                                             if (var48 != null) {
                                                for(var1 = 0; var1 < var48.size(); ++var1) {
                                                   ((MessageObject.GroupedMessages)var48.valueAt(var1)).calculate();
                                                }
                                             }

                                             return;
                                          }

                                          var86 = this.currentChat;
                                          if (var86 == null || !var86.megagroup || !(var26 instanceof TLRPC.TL_messageActionChatAddUser) && !(var26 instanceof TLRPC.TL_messageActionChatDeleteUser)) {
                                             var21 = var47;
                                          } else {
                                             var21 = true;
                                          }

                                          var120 = this.minDate;
                                          if (var120[0] == 0 || var96.messageOwner.date < var120[0]) {
                                             this.minDate[0] = var96.messageOwner.date;
                                          }

                                          if (var96.isOut()) {
                                             this.removeUnreadPlane(true);
                                             var88 = true;
                                          }

                                          if (var96.getId() > 0) {
                                             this.maxMessageId[0] = Math.min(var96.getId(), this.maxMessageId[0]);
                                             this.minMessageId[0] = Math.max(var96.getId(), this.minMessageId[0]);
                                          } else if (this.currentEncryptedChat != null) {
                                             this.maxMessageId[0] = Math.max(var96.getId(), this.maxMessageId[0]);
                                             this.minMessageId[0] = Math.min(var96.getId(), this.minMessageId[0]);
                                          }

                                          var120 = this.maxDate;
                                          var120[0] = Math.max(var120[0], var96.messageOwner.date);
                                          this.messagesDict[0].put(var96.getId(), var96);
                                          var121 = (ArrayList)this.messagesByDays.get(var96.dateKey);
                                          var2 = var16;
                                          if (var16 > this.messages.size()) {
                                             var2 = this.messages.size();
                                          }

                                          var39 = var121;
                                          ChatActivity.ChatActivityAdapter var117;
                                          if (var121 == null) {
                                             var121 = new ArrayList();
                                             this.messagesByDays.put(var96.dateKey, var121);
                                             var37 = new TLRPC.TL_message();
                                             var37.message = LocaleController.formatDateChat((long)var96.messageOwner.date);
                                             var37.id = 0;
                                             var37.date = var96.messageOwner.date;
                                             var36 = new MessageObject(super.currentAccount, var37, false);
                                             var36.type = 10;
                                             var36.contentType = 1;
                                             var36.isDateObject = true;
                                             this.messages.add(var2, var36);
                                             var117 = this.chatAdapter;
                                             var39 = var121;
                                             if (var117 != null) {
                                                var117.notifyItemInserted(var2);
                                                var39 = var121;
                                             }
                                          }

                                          label2582: {
                                             var20 = var2;
                                             if (!var96.isOut()) {
                                                var20 = var2;
                                                if (this.paused) {
                                                   var20 = var2;
                                                   if (var2 == 0) {
                                                      var16 = var2;
                                                      if (!this.scrollToTopUnReadOnResume) {
                                                         var22 = this.unreadMessageObject;
                                                         var16 = var2;
                                                         if (var22 != null) {
                                                            this.removeMessageObject(var22);
                                                            var16 = var2;
                                                            if (var2 > 0) {
                                                               var16 = var2 - 1;
                                                            }

                                                            this.unreadMessageObject = null;
                                                         }
                                                      }

                                                      var20 = var16;
                                                      if (this.unreadMessageObject == null) {
                                                         TLRPC.TL_message var138 = new TLRPC.TL_message();
                                                         var138.message = "";
                                                         var138.id = 0;
                                                         var22 = new MessageObject(super.currentAccount, var138, false);
                                                         var22.type = 6;
                                                         var22.contentType = 2;
                                                         this.messages.add(0, var22);
                                                         var117 = this.chatAdapter;
                                                         if (var117 != null) {
                                                            var117.notifyItemInserted(0);
                                                         }

                                                         this.unreadMessageObject = var22;
                                                         this.scrollToMessage = this.unreadMessageObject;
                                                         this.scrollToMessagePosition = -10000;
                                                         this.scrollToTopUnReadOnResume = true;
                                                         break label2582;
                                                      }
                                                   }
                                                }
                                             }

                                             var16 = var20;
                                          }

                                          var39.add(0, var96);
                                          this.messages.add(var16, var96);
                                          var51 = this.chatAdapter;
                                          if (var51 != null) {
                                             var51.notifyItemChanged(var16);
                                             this.chatAdapter.notifyItemInserted(var16);
                                          }

                                          if (!var96.isOut() && var96.messageOwner.mentioned && var96.isContentUnread()) {
                                             ++this.newMentionsCount;
                                          }

                                          ++this.newUnreadMessageCount;
                                          var14 = var96.type;
                                          if (var14 == 10) {
                                             break label2660;
                                          }

                                          var109 = var84;
                                          var95 = var48;
                                          var83 = var21;
                                          var67 = var88;
                                          var2 = var1;
                                          if (var14 == 11) {
                                             break label2660;
                                          }
                                          break label2659;
                                       }
                                    }

                                    var83 = var47;
                                    var2 = var1;
                                    var67 = var88;
                                    var95 = var48;
                                 }

                                 var1 = var2;
                                 var88 = var67;
                                 var47 = var83;
                                 var48 = var95;
                                 var67 = var65;
                                 break label2661;
                              }

                              var67 = true;
                              var109 = var84;
                              var47 = var21;
                           }

                           ++var4;
                        }

                        if (var109 != null) {
                           MessagesController.getInstance(super.currentAccount).reloadWebPages(this.dialog_id, var109);
                        }

                        if (var48 != null) {
                           for(var1 = 0; var1 < var48.size(); ++var1) {
                              var64 = (MessageObject.GroupedMessages)var48.valueAt(var1);
                              var94 = var64.posArray.size();
                              var64.calculate();
                              var16 = var64.posArray.size();
                              if (var16 - var94 > 0 && this.chatAdapter != null) {
                                 var39 = this.messages;
                                 var68 = var64.messages;
                                 var94 = var39.indexOf(var68.get(var68.size() - 1));
                                 if (var94 >= 0) {
                                    this.chatAdapter.notifyItemRangeChanged(var94, var16);
                                 }
                              }
                           }
                        }

                        var70 = this.progressView;
                        if (var70 != null) {
                           var70.setVisibility(4);
                        }

                        if (this.chatAdapter == null) {
                           this.scrollToTopOnResume = true;
                        }

                        if (this.chatListView != null && this.chatAdapter != null) {
                           var16 = this.chatLayoutManager.findFirstVisibleItemPosition();
                           var1 = var16;
                           if (var16 == -1) {
                              var1 = 0;
                           }

                           var52 = this.chatLayoutManager.findViewByPosition(var1);
                           if (var52 != null) {
                              var16 = var52.getBottom() - this.chatListView.getMeasuredHeight();
                           } else {
                              var16 = 0;
                           }

                           if ((var1 != 0 || var16 > AndroidUtilities.dp(5.0F)) && !var88) {
                              if (this.newUnreadMessageCount != 0) {
                                 var49 = this.pagedownButtonCounter;
                                 if (var49 != null) {
                                    var49.setVisibility(0);
                                    var1 = this.prevSetUnreadCount;
                                    var16 = this.newUnreadMessageCount;
                                    if (var1 != var16) {
                                       this.prevSetUnreadCount = var16;
                                       this.pagedownButtonCounter.setText(String.format("%d", var16));
                                    }
                                 }
                              }

                              this.showPagedownButton(true, true);
                           } else {
                              this.newUnreadMessageCount = 0;
                              if (!this.firstLoading) {
                                 if (this.paused) {
                                    this.scrollToTopOnResume = true;
                                 } else {
                                    this.forceScrollToTop = true;
                                    this.moveScrollToLastMessage();
                                 }
                              }
                           }

                           if (this.newMentionsCount != 0) {
                              var49 = this.mentiondownButtonCounter;
                              if (var49 != null) {
                                 var49.setVisibility(0);
                                 this.mentiondownButtonCounter.setText(String.format("%d", this.newMentionsCount));
                                 this.showMentionDownButton(true, true);
                              }
                           }
                        } else {
                           this.scrollToTopOnResume = true;
                        }

                        var33 = var47;
                        var47 = var65;
                     }

                     if (!this.messages.isEmpty()) {
                        var140 = this.botUser;
                        if (var140 != null && var140.length() == 0) {
                           this.botUser = null;
                           this.updateBottomOverlay();
                        }
                     }

                     if (var47) {
                        this.updateTitle();
                        this.checkAndUpdateAvatar();
                     }

                     if (var33) {
                        MessagesController.getInstance(super.currentAccount).loadFullChat(this.currentChat.id, 0, true);
                     }
                  }
               } else if (var1 == NotificationCenter.closeChats) {
                  if (var3 != null && var3.length > 0) {
                     if ((Long)var3[0] == this.dialog_id) {
                        this.finishFragment();
                     }
                  } else {
                     this.removeSelfFromStack();
                  }
               } else {
                  TextView var77;
                  if (var1 == NotificationCenter.messagesRead) {
                     SparseLongArray var142;
                     label2756: {
                        SparseLongArray var74 = (SparseLongArray)var3[0];
                        var142 = (SparseLongArray)var3[1];
                        if (var74 != null) {
                           if (this.bottomOverlayChatText2 != null && this.chatInfo != null && ChatObject.isChannel(this.currentChat) && !this.currentChat.megagroup && -this.chatInfo.linked_chat_id != 0) {
                              this.bottomOverlayChatText2.updateCounter();
                           }

                           var2 = var74.size();

                           for(var1 = 0; var1 < var2; ++var1) {
                              var16 = var74.keyAt(var1);
                              var11 = var74.get(var16);
                              if ((long)var16 == this.dialog_id) {
                                 var62 = this.messages.size();
                                 var2 = 0;

                                 for(var33 = false; var2 < var62; var33 = var67) {
                                    var8 = (MessageObject)this.messages.get(var2);
                                    var67 = var33;
                                    if (!var8.isOut()) {
                                       var67 = var33;
                                       if (var8.getId() > 0) {
                                          var67 = var33;
                                          if (var8.getId() <= (int)var11) {
                                             if (!var8.isUnread()) {
                                                break;
                                             }

                                             var8.setIsRead();
                                             --this.newUnreadMessageCount;
                                             var67 = true;
                                          }
                                       }
                                    }

                                    ++var2;
                                 }

                                 this.removeUnreadPlane(false);
                                 break label2756;
                              }
                           }
                        }

                        var33 = false;
                     }

                     if (var33) {
                        if (this.newUnreadMessageCount < 0) {
                           this.newUnreadMessageCount = 0;
                        }

                        var77 = this.pagedownButtonCounter;
                        if (var77 != null) {
                           var16 = this.prevSetUnreadCount;
                           var2 = this.newUnreadMessageCount;
                           if (var16 != var2) {
                              this.prevSetUnreadCount = var2;
                              var77.setText(String.format("%d", var2));
                           }

                           if (this.newUnreadMessageCount <= 0) {
                              if (this.pagedownButtonCounter.getVisibility() != 4) {
                                 this.pagedownButtonCounter.setVisibility(4);
                              }
                           } else if (this.pagedownButtonCounter.getVisibility() != 0) {
                              this.pagedownButtonCounter.setVisibility(0);
                           }
                        }
                     }

                     var47 = var33;
                     if (var142 != null) {
                        var18 = var142.size();
                        var16 = 0;

                        label2729:
                        while(true) {
                           var47 = var33;
                           if (var16 >= var18) {
                              break;
                           }

                           var2 = var142.keyAt(var16);
                           var62 = (int)var142.get(var2);
                           if ((long)var2 == this.dialog_id) {
                              var18 = this.messages.size();
                              var16 = 0;

                              while(true) {
                                 var47 = var33;
                                 if (var16 >= var18) {
                                    break label2729;
                                 }

                                 var36 = (MessageObject)this.messages.get(var16);
                                 var47 = var33;
                                 if (var36.isOut()) {
                                    var47 = var33;
                                    if (var36.getId() > 0) {
                                       var47 = var33;
                                       if (var36.getId() <= var62) {
                                          if (!var36.isUnread()) {
                                             var47 = var33;
                                             break label2729;
                                          }

                                          var36.setIsRead();
                                          var47 = true;
                                       }
                                    }
                                 }

                                 ++var16;
                                 var33 = var47;
                              }
                           }

                           ++var16;
                        }
                     }

                     if (var47) {
                        this.updateVisibleRows();
                     }
                  } else {
                     TLRPC.ChatFull var78;
                     TLRPC.UserFull var80;
                     MessagesController var149;
                     if (var1 == NotificationCenter.historyCleared) {
                        if ((Long)var3[0] != this.dialog_id) {
                           return;
                        }

                        var16 = (Integer)var3[1];
                        var1 = 0;

                        for(var47 = false; var1 < this.messages.size(); ++var1) {
                           var36 = (MessageObject)this.messages.get(var1);
                           var62 = var36.getId();
                           if (var62 > 0 && var62 <= var16) {
                              var78 = this.chatInfo;
                              if (var78 != null && var78.pinned_msg_id == var62) {
                                 this.pinnedMessageObject = null;
                                 var78.pinned_msg_id = 0;
                                 MessagesStorage.getInstance(super.currentAccount).updateChatPinnedMessage(this.chatInfo.id, 0);
                                 this.updatePinnedMessageView(true);
                              } else {
                                 var80 = this.userInfo;
                                 if (var80 != null && var80.pinned_msg_id == var62) {
                                    this.pinnedMessageObject = null;
                                    var80.pinned_msg_id = 0;
                                    MessagesStorage.getInstance(super.currentAccount).updateUserPinnedMessage(this.chatInfo.id, 0);
                                    this.updatePinnedMessageView(true);
                                 }
                              }

                              this.messages.remove(var1);
                              var2 = var1 - 1;
                              this.messagesDict[0].remove(var62);
                              var50 = (ArrayList)this.messagesByDays.get(var36.dateKey);
                              var1 = var2;
                              if (var50 != null) {
                                 var50.remove(var36);
                                 var1 = var2;
                                 if (var50.isEmpty()) {
                                    this.messagesByDays.remove(var36.dateKey);
                                    var1 = var2;
                                    if (var2 >= 0) {
                                       var1 = var2;
                                       if (var2 < this.messages.size()) {
                                          this.messages.remove(var2);
                                          var1 = var2 - 1;
                                       }
                                    }
                                 }
                              }

                              var47 = true;
                           }
                        }

                        if (this.messages.isEmpty()) {
                           if (!this.endReached[0] && !this.loading) {
                              var70 = this.progressView;
                              if (var70 != null) {
                                 var70.setVisibility(4);
                              }

                              var61 = this.chatListView;
                              if (var61 != null) {
                                 var61.setEmptyView((View)null);
                              }

                              if (this.currentEncryptedChat == null) {
                                 var120 = this.maxMessageId;
                                 var120[1] = Integer.MAX_VALUE;
                                 var120[0] = Integer.MAX_VALUE;
                                 var120 = this.minMessageId;
                                 var120[1] = Integer.MIN_VALUE;
                                 var120[0] = Integer.MIN_VALUE;
                              } else {
                                 var120 = this.maxMessageId;
                                 var120[1] = Integer.MIN_VALUE;
                                 var120[0] = Integer.MIN_VALUE;
                                 var120 = this.minMessageId;
                                 var120[1] = Integer.MAX_VALUE;
                                 var120[0] = Integer.MAX_VALUE;
                              }

                              var120 = this.maxDate;
                              var120[1] = Integer.MIN_VALUE;
                              var120[0] = Integer.MIN_VALUE;
                              var120 = this.minDate;
                              var120[1] = 0;
                              var120[0] = 0;
                              this.waitingForLoad.add(this.lastLoadIndex);
                              var149 = MessagesController.getInstance(super.currentAccount);
                              var11 = this.dialog_id;
                              var6 = this.cacheEndReached[0];
                              var62 = this.minDate[0];
                              var1 = super.classGuid;
                              var10 = ChatObject.isChannel(this.currentChat);
                              var16 = this.lastLoadIndex++;
                              var149.loadMessages(var11, 30, 0, 0, var6 ^ true, var62, var1, 0, 0, var10, var16);
                              this.loading = true;
                           } else {
                              if (this.botButtons != null) {
                                 this.botButtons = null;
                                 var93 = this.chatActivityEnterView;
                                 if (var93 != null) {
                                    var93.setButtons((MessageObject)null, false);
                                 }
                              }

                              if (this.currentEncryptedChat == null) {
                                 var69 = this.currentUser;
                                 if (var69 != null && var69.bot && this.botUser == null) {
                                    this.botUser = "";
                                    this.updateBottomOverlay();
                                 }
                              }
                           }
                        }

                        this.showPagedownButton(false, true);
                        this.showMentionDownButton(false, true);
                        if (var47 && this.chatAdapter != null) {
                           this.removeUnreadPlane(true);
                           this.chatAdapter.notifyDataSetChanged();
                        }
                     } else {
                        Integer var79;
                        MessageObject.GroupedMessages var101;
                        View var104;
                        ChatActivity.ChatActivityAdapter var112;
                        if (var1 == NotificationCenter.messagesDeleted) {
                           label2837: {
                              var68 = (ArrayList)var3[0];
                              var62 = (Integer)var3[1];
                              if (ChatObject.isChannel(this.currentChat)) {
                                 if (var62 == 0 && this.mergeDialogId != 0L) {
                                    var40 = 1;
                                    break label2837;
                                 }

                                 if (var62 != this.currentChat.id) {
                                    return;
                                 }
                              } else if (var62 != 0) {
                                 return;
                              }

                              var40 = 0;
                           }

                           var94 = var68.size();
                           var18 = 0;
                           var6 = false;
                           var44 = null;
                           var67 = false;

                           for(var33 = false; var18 < var94; ++var18) {
                              var79 = (Integer)var68.get(var18);
                              var22 = (MessageObject)this.messagesDict[var40].get(var79);
                              if (var40 == 0) {
                                 label3602: {
                                    var78 = this.chatInfo;
                                    if (var78 == null || var78.pinned_msg_id != var79) {
                                       var80 = this.userInfo;
                                       if (var80 == null || var80.pinned_msg_id != var79) {
                                          break label3602;
                                       }
                                    }

                                    this.pinnedMessageObject = null;
                                    var78 = this.chatInfo;
                                    if (var78 != null) {
                                       var78.pinned_msg_id = 0;
                                    } else {
                                       var80 = this.userInfo;
                                       if (var80 != null) {
                                          var80.pinned_msg_id = 0;
                                       }
                                    }

                                    MessagesStorage.getInstance(super.currentAccount).updateChatPinnedMessage(var62, 0);
                                    this.updatePinnedMessageView(true);
                                 }
                              }

                              if (var22 != null) {
                                 if (this.editingMessageObject == var22) {
                                    this.hideFieldPanel(true);
                                 }

                                 var20 = this.messages.indexOf(var22);
                                 if (var20 != -1) {
                                    this.removeUnreadPlane(false);
                                    if (this.selectedMessagesIds[var40].indexOfKey(var79) >= 0) {
                                       if (var18 == var94 - 1) {
                                          var6 = true;
                                       } else {
                                          var6 = false;
                                       }

                                       this.addToSelectedMessages(var22, false, var6);
                                       var33 = true;
                                    }

                                    var8 = (MessageObject)this.messages.remove(var20);
                                    if (var8.getGroupId() != 0L) {
                                       MessageObject.GroupedMessages var116 = (MessageObject.GroupedMessages)this.groupedMessagesMap.get(var8.getGroupId());
                                       if (var116 != null) {
                                          var48 = var44;
                                          if (var44 == null) {
                                             var48 = new LongSparseArray();
                                          }

                                          var48.put(var116.groupId, var116);
                                          var116.messages.remove(var22);
                                          var44 = var48;
                                       }
                                    }

                                    this.messagesDict[var40].remove(var79);
                                    var50 = (ArrayList)this.messagesByDays.get(var22.dateKey);
                                    if (var50 != null) {
                                       var50.remove(var22);
                                       if (var50.isEmpty()) {
                                          this.messagesByDays.remove(var22.dateKey);
                                          if (var20 >= 0 && var20 < this.messages.size()) {
                                             this.messages.remove(var20);
                                          }
                                       }
                                    }

                                    var67 = true;
                                 }
                              }
                           }

                           if (var33) {
                              if (!var6) {
                                 this.addToSelectedMessages((MessageObject)null, false, true);
                              }

                              this.updateActionModeTitle();
                           }

                           if (var44 != null) {
                              for(var1 = 0; var1 < var44.size(); ++var1) {
                                 var101 = (MessageObject.GroupedMessages)var44.valueAt(var1);
                                 if (var101.messages.isEmpty()) {
                                    this.groupedMessagesMap.remove(var101.groupId);
                                 } else {
                                    var101.calculate();
                                    var68 = var101.messages;
                                    var7 = (MessageObject)var68.get(var68.size() - 1);
                                    var2 = this.messages.indexOf(var7);
                                    if (var2 >= 0) {
                                       var112 = this.chatAdapter;
                                       if (var112 != null) {
                                          var112.notifyItemRangeChanged(var2 + var112.messagesStartRow, var101.messages.size());
                                       }
                                    }
                                 }
                              }
                           }

                           if (this.messages.isEmpty()) {
                              if (!this.endReached[0] && !this.loading) {
                                 var70 = this.progressView;
                                 if (var70 != null) {
                                    var70.setVisibility(4);
                                 }

                                 var61 = this.chatListView;
                                 if (var61 != null) {
                                    var61.setEmptyView((View)null);
                                 }

                                 if (this.currentEncryptedChat == null) {
                                    var120 = this.maxMessageId;
                                    var120[1] = Integer.MAX_VALUE;
                                    var120[0] = Integer.MAX_VALUE;
                                    var120 = this.minMessageId;
                                    var120[1] = Integer.MIN_VALUE;
                                    var120[0] = Integer.MIN_VALUE;
                                 } else {
                                    var120 = this.maxMessageId;
                                    var120[1] = Integer.MIN_VALUE;
                                    var120[0] = Integer.MIN_VALUE;
                                    var120 = this.minMessageId;
                                    var120[1] = Integer.MAX_VALUE;
                                    var120[0] = Integer.MAX_VALUE;
                                 }

                                 var120 = this.maxDate;
                                 var120[1] = Integer.MIN_VALUE;
                                 var120[0] = Integer.MIN_VALUE;
                                 var120 = this.minDate;
                                 var120[1] = 0;
                                 var120[0] = 0;
                                 this.waitingForLoad.add(this.lastLoadIndex);
                                 var149 = MessagesController.getInstance(super.currentAccount);
                                 var11 = this.dialog_id;
                                 var10 = this.cacheEndReached[0];
                                 var1 = this.minDate[0];
                                 var62 = super.classGuid;
                                 var6 = ChatObject.isChannel(this.currentChat);
                                 var2 = this.lastLoadIndex++;
                                 var149.loadMessages(var11, 30, 0, 0, var10 ^ true, var1, var62, 0, 0, var6, var2);
                                 this.loading = true;
                              } else {
                                 if (this.botButtons != null) {
                                    this.botButtons = null;
                                    var93 = this.chatActivityEnterView;
                                    if (var93 != null) {
                                       var93.setButtons((MessageObject)null, false);
                                    }
                                 }

                                 if (this.currentEncryptedChat == null) {
                                    var69 = this.currentUser;
                                    if (var69 != null && var69.bot && this.botUser == null) {
                                       this.botUser = "";
                                       this.updateBottomOverlay();
                                    }
                                 }
                              }

                              this.showPagedownButton(false, true);
                              this.showMentionDownButton(false, true);
                           }

                           if (this.chatAdapter != null) {
                              if (var67) {
                                 var2 = this.chatListView.getChildCount();

                                 label2791: {
                                    for(var1 = 0; var1 < var2; ++var1) {
                                       var104 = this.chatListView.getChildAt(var1);
                                       if (var104 instanceof ChatMessageCell) {
                                          var36 = ((ChatMessageCell)var104).getMessageObject();
                                       } else if (var104 instanceof ChatActionCell) {
                                          var36 = ((ChatActionCell)var104).getMessageObject();
                                       } else {
                                          var36 = null;
                                       }

                                       if (var36 != null) {
                                          var16 = this.messages.indexOf(var36);
                                          if (var16 >= 0) {
                                             var1 = this.chatAdapter.messagesStartRow + var16;
                                             var2 = var104.getBottom();
                                             break label2791;
                                          }
                                       }
                                    }

                                    var1 = -1;
                                    var2 = 0;
                                 }

                                 this.chatAdapter.notifyDataSetChanged();
                                 if (var1 != -1) {
                                    this.chatLayoutManager.scrollToPositionWithOffset(var1, this.chatListView.getMeasuredHeight() - var2 - this.chatListView.getPaddingBottom());
                                 }
                              } else {
                                 this.first_unread_id = 0;
                                 this.last_message_id = 0;
                                 this.createUnreadMessageAfterId = 0;
                                 this.removeMessageObject(this.unreadMessageObject);
                                 this.unreadMessageObject = null;
                                 var49 = this.pagedownButtonCounter;
                                 if (var49 != null) {
                                    var49.setVisibility(4);
                                 }
                              }
                           }
                        } else if (var1 == NotificationCenter.messageReceivedByServer) {
                           var79 = (Integer)var3[0];
                           var22 = (MessageObject)this.messagesDict[0].get(var79);
                           if (var22 != null) {
                              Integer var118 = (Integer)var3[1];
                              if (!var118.equals(var79) && this.messagesDict[0].indexOfKey(var118) >= 0) {
                                 var36 = (MessageObject)this.messagesDict[0].get(var79);
                                 this.messagesDict[0].remove(var79);
                                 if (var36 != null) {
                                    var1 = this.messages.indexOf(var36);
                                    this.messages.remove(var1);
                                    var39 = (ArrayList)this.messagesByDays.get(var36.dateKey);
                                    var39.remove(var22);
                                    if (var39.isEmpty()) {
                                       this.messagesByDays.remove(var22.dateKey);
                                       if (var1 >= 0 && var1 < this.messages.size()) {
                                          this.messages.remove(var1);
                                       }
                                    }

                                    var51 = this.chatAdapter;
                                    if (var51 != null) {
                                       var51.notifyDataSetChanged();
                                    }
                                 }

                                 return;
                              }

                              TLRPC.Message var122 = (TLRPC.Message)var3[2];
                              Long var105;
                              if (var3.length >= 4) {
                                 var105 = (Long)var3[4];
                              } else {
                                 var105 = 0L;
                              }

                              if (var122 == null) {
                                 var10 = false;
                                 var47 = false;
                              } else {
                                 label2889: {
                                    label2888: {
                                       label2887: {
                                          label2886: {
                                             Exception var113;
                                             label3419: {
                                                Exception var10000;
                                                boolean var10001;
                                                label2884: {
                                                   label2883: {
                                                      label2882: {
                                                         label3420: {
                                                            try {
                                                               if (!var22.isForwarded()) {
                                                                  break label2882;
                                                               }

                                                               if (var22.messageOwner.reply_markup == null && var122.reply_markup != null) {
                                                                  break label2883;
                                                               }
                                                            } catch (Exception var32) {
                                                               var10000 = var32;
                                                               var10001 = false;
                                                               break label3420;
                                                            }

                                                            try {
                                                               var6 = var22.messageOwner.message.equals(var122.message);
                                                            } catch (Exception var31) {
                                                               var10000 = var31;
                                                               var10001 = false;
                                                               break label3420;
                                                            }

                                                            if (!var6) {
                                                               break label2883;
                                                            }
                                                            break label2882;
                                                         }

                                                         var113 = var10000;
                                                         var33 = false;
                                                         break label3419;
                                                      }

                                                      var33 = false;
                                                      break label2884;
                                                   }

                                                   var33 = true;
                                                }

                                                if (var33) {
                                                   break label2888;
                                                }

                                                label3422: {
                                                   try {
                                                      if (var22.messageOwner.params != null && var22.messageOwner.params.containsKey("query_id")) {
                                                         break label2888;
                                                      }
                                                   } catch (Exception var30) {
                                                      var10000 = var30;
                                                      var10001 = false;
                                                      break label3422;
                                                   }

                                                   var47 = var33;

                                                   try {
                                                      if (var122.media == null) {
                                                         break label2887;
                                                      }
                                                   } catch (Exception var29) {
                                                      var10000 = var29;
                                                      var10001 = false;
                                                      break label3422;
                                                   }

                                                   var47 = var33;

                                                   try {
                                                      if (var22.messageOwner.media == null) {
                                                         break label2887;
                                                      }

                                                      var6 = var122.media.getClass().equals(var22.messageOwner.media.getClass());
                                                      break label2886;
                                                   } catch (Exception var28) {
                                                      var10000 = var28;
                                                      var10001 = false;
                                                   }
                                                }

                                                var113 = var10000;
                                             }

                                             FileLog.e((Throwable)var113);
                                             var47 = var33;
                                             break label2887;
                                          }

                                          var47 = var33;
                                          if (!var6) {
                                             break label2888;
                                          }
                                       }

                                       var6 = false;
                                       var33 = var47;
                                       break label2889;
                                    }

                                    var6 = true;
                                 }

                                 if (var22.getGroupId() != 0L && var122.grouped_id != 0L) {
                                    var64 = (MessageObject.GroupedMessages)this.groupedMessagesMap.get(var22.getGroupId());
                                    if (var64 != null) {
                                       this.groupedMessagesMap.put(var122.grouped_id, var64);
                                    }

                                    var72 = var22.messageOwner;
                                    var22.localSentGroupId = var72.grouped_id;
                                    var72.grouped_id = var105;
                                 }

                                 TLRPC.MessageFwdHeader var110 = var22.messageOwner.fwd_from;
                                 var22.messageOwner = var122;
                                 if (var110 != null) {
                                    TLRPC.MessageFwdHeader var129 = var122.fwd_from;
                                    if (var129 != null && !TextUtils.isEmpty(var129.from_name)) {
                                       var22.messageOwner.fwd_from = var110;
                                    }
                                 }

                                 var22.generateThumbs(true);
                                 var22.setType();
                                 var10 = var6;
                                 var47 = var33;
                                 if (var122.media instanceof TLRPC.TL_messageMediaGame) {
                                    var22.applyNewText();
                                    var10 = var6;
                                    var47 = var33;
                                 }
                              }

                              if (var47) {
                                 var22.measureInlineBotButtons();
                              }

                              this.messagesDict[0].remove(var79);
                              this.messagesDict[0].put(var118, var22);
                              var22.messageOwner.id = var118;
                              var22.messageOwner.send_state = 0;
                              var22.forceUpdate = var10;
                              if (var3.length >= 6) {
                                 var22.applyMediaExistanceFlags((Integer)var3[5]);
                              }

                              this.addToPolls(var22, (MessageObject)null);
                              var39 = new ArrayList();
                              var39.add(var22);
                              if (this.currentEncryptedChat == null) {
                                 DataQuery.getInstance(super.currentAccount).loadReplyMessagesForMessages(var39, this.dialog_id);
                              }

                              var51 = this.chatAdapter;
                              if (var51 != null) {
                                 var51.updateRowWithMessageObject(var22, true);
                              }

                              GridLayoutManagerFixed var153 = this.chatLayoutManager;
                              if (var153 != null && var10 && var153.findFirstVisibleItemPosition() == 0) {
                                 this.moveScrollToLastMessage();
                              }

                              NotificationsController.getInstance(super.currentAccount).playOutChatSound();
                           }
                        } else {
                           ChatActivity.ChatActivityAdapter var111;
                           Integer var154;
                           if (var1 == NotificationCenter.messageReceivedByAck) {
                              var154 = (Integer)var3[0];
                              var36 = (MessageObject)this.messagesDict[0].get(var154);
                              if (var36 != null) {
                                 var36.messageOwner.send_state = 0;
                                 var111 = this.chatAdapter;
                                 if (var111 != null) {
                                    var111.updateRowWithMessageObject(var36, true);
                                 }
                              }
                           } else if (var1 == NotificationCenter.messageSendError) {
                              var154 = (Integer)var3[0];
                              var36 = (MessageObject)this.messagesDict[0].get(var154);
                              if (var36 != null) {
                                 var36.messageOwner.send_state = 2;
                                 this.updateVisibleRows();
                              }
                           } else {
                              ChatActivityEnterView var115;
                              MentionsAdapter var158;
                              if (var1 == NotificationCenter.chatInfoDidLoad) {
                                 var78 = (TLRPC.ChatFull)var3[0];
                                 var63 = this.currentChat;
                                 if (var63 != null && var78.id == var63.id) {
                                    if (var78 instanceof TLRPC.TL_channelFull) {
                                       if (var63.megagroup) {
                                          if (var78.participants != null) {
                                             var2 = 0;
                                             var1 = 0;

                                             while(true) {
                                                var16 = var1;
                                                if (var2 >= var78.participants.participants.size()) {
                                                   break;
                                                }

                                                var1 = Math.max(((TLRPC.ChatParticipant)var78.participants.participants.get(var2)).date, var1);
                                                ++var2;
                                             }
                                          } else {
                                             var16 = 0;
                                          }

                                          if (var16 == 0 || Math.abs(System.currentTimeMillis() / 1000L - (long)var16) > 3600L) {
                                             MessagesController.getInstance(super.currentAccount).loadChannelParticipants(this.currentChat.id);
                                          }
                                       }

                                       if (var78.participants == null) {
                                          TLRPC.ChatFull var130 = this.chatInfo;
                                          if (var130 != null) {
                                             var78.participants = var130.participants;
                                          }
                                       }
                                    }

                                    this.chatInfo = var78;
                                    var115 = this.chatActivityEnterView;
                                    if (var115 != null) {
                                       var115.setChatInfo(this.chatInfo);
                                    }

                                    MentionsAdapter var119 = this.mentionsAdapter;
                                    if (var119 != null) {
                                       var119.setChatInfo(this.chatInfo);
                                    }

                                    if (var3[3] instanceof MessageObject) {
                                       this.pinnedMessageObject = (MessageObject)var3[3];
                                       this.updatePinnedMessageView(false);
                                    } else {
                                       this.updatePinnedMessageView(true);
                                    }

                                    var82 = this.avatarContainer;
                                    if (var82 != null) {
                                       var82.updateOnlineCount();
                                       this.avatarContainer.updateSubtitle();
                                    }

                                    if (this.isBroadcast) {
                                       SendMessagesHelper.getInstance(super.currentAccount).setCurrentChatInfo(this.chatInfo);
                                    }

                                    TLRPC.ChatFull var156 = this.chatInfo;
                                    if (var156 instanceof TLRPC.TL_chatFull) {
                                       this.hasBotsCommands = false;
                                       this.botInfo.clear();
                                       this.botsCount = 0;
                                       URLSpanBotCommand.enabled = false;

                                       for(var1 = 0; var1 < this.chatInfo.participants.participants.size(); ++var1) {
                                          TLRPC.ChatParticipant var157 = (TLRPC.ChatParticipant)this.chatInfo.participants.participants.get(var1);
                                          var69 = MessagesController.getInstance(super.currentAccount).getUser(var157.user_id);
                                          if (var69 != null && var69.bot) {
                                             URLSpanBotCommand.enabled = true;
                                             ++this.botsCount;
                                             DataQuery.getInstance(super.currentAccount).loadBotInfo(var69.id, true, super.classGuid);
                                          }
                                       }

                                       var61 = this.chatListView;
                                       if (var61 != null) {
                                          var61.invalidateViews();
                                       }
                                    } else if (var156 instanceof TLRPC.TL_channelFull) {
                                       label2931: {
                                          this.hasBotsCommands = false;
                                          this.botInfo.clear();
                                          this.botsCount = 0;
                                          if (!this.chatInfo.bot_info.isEmpty()) {
                                             var86 = this.currentChat;
                                             if (var86 != null && var86.megagroup) {
                                                var6 = true;
                                                break label2931;
                                             }
                                          }

                                          var6 = false;
                                       }

                                       URLSpanBotCommand.enabled = var6;
                                       this.botsCount = this.chatInfo.bot_info.size();
                                       var1 = 0;

                                       while(true) {
                                          if (var1 >= this.chatInfo.bot_info.size()) {
                                             var61 = this.chatListView;
                                             if (var61 != null) {
                                                var61.invalidateViews();
                                             }

                                             if (this.mentionsAdapter != null) {
                                                label2910: {
                                                   if (ChatObject.isChannel(this.currentChat)) {
                                                      var86 = this.currentChat;
                                                      if (var86 == null || !var86.megagroup) {
                                                         break label2910;
                                                      }
                                                   }

                                                   this.mentionsAdapter.setBotInfo(this.botInfo);
                                                }
                                             }

                                             if (this.bottomOverlayChatText2 != null && ChatObject.isChannel(this.currentChat) && !this.currentChat.megagroup && -this.chatInfo.linked_chat_id != 0) {
                                                this.bottomOverlayChatText2.updateCounter();
                                             }
                                             break;
                                          }

                                          TLRPC.BotInfo var123 = (TLRPC.BotInfo)this.chatInfo.bot_info.get(var1);
                                          if (!var123.commands.isEmpty()) {
                                             label3516: {
                                                if (ChatObject.isChannel(this.currentChat)) {
                                                   var86 = this.currentChat;
                                                   if (var86 == null || !var86.megagroup) {
                                                      break label3516;
                                                   }
                                                }

                                                this.hasBotsCommands = true;
                                             }
                                          }

                                          this.botInfo.put(var123.user_id, var123);
                                          ++var1;
                                       }
                                    }

                                    var93 = this.chatActivityEnterView;
                                    if (var93 != null) {
                                       var93.setBotsCount(this.botsCount, this.hasBotsCommands);
                                    }

                                    var158 = this.mentionsAdapter;
                                    if (var158 != null) {
                                       var158.setBotsCount(this.botsCount);
                                    }

                                    if (ChatObject.isChannel(this.currentChat) && this.mergeDialogId == 0L) {
                                       var156 = this.chatInfo;
                                       var1 = var156.migrated_from_chat_id;
                                       if (var1 != 0) {
                                          this.mergeDialogId = (long)(-var1);
                                          this.maxMessageId[1] = var156.migrated_from_max_id;
                                          var51 = this.chatAdapter;
                                          if (var51 != null) {
                                             var51.notifyDataSetChanged();
                                          }

                                          if (this.mergeDialogId != 0L && this.endReached[0]) {
                                             this.checkScrollForLoad(false);
                                          }
                                       }
                                    }
                                 }
                              } else if (var1 == NotificationCenter.chatInfoCantLoad) {
                                 var1 = (Integer)var3[0];
                                 var55 = this.currentChat;
                                 if (var55 != null && var55.id == var1) {
                                    var1 = (Integer)var3[1];
                                    if (this.getParentActivity() == null || this.closeChatDialog != null) {
                                       return;
                                    }

                                    var99 = new AlertDialog.Builder(this.getParentActivity());
                                    var99.setTitle(LocaleController.getString("AppName", 2131558635));
                                    if (var1 == 0) {
                                       var99.setMessage(LocaleController.getString("ChannelCantOpenPrivate", 2131558939));
                                    } else if (var1 == 1) {
                                       var99.setMessage(LocaleController.getString("ChannelCantOpenNa", 2131558938));
                                    } else if (var1 == 2) {
                                       var99.setMessage(LocaleController.getString("ChannelCantOpenBanned", 2131558937));
                                    }

                                    var99.setPositiveButton(LocaleController.getString("OK", 2131560097), (OnClickListener)null);
                                    AlertDialog var159 = var99.create();
                                    this.closeChatDialog = var159;
                                    this.showDialog(var159);
                                    this.loading = false;
                                    var70 = this.progressView;
                                    if (var70 != null) {
                                       var70.setVisibility(4);
                                    }

                                    var51 = this.chatAdapter;
                                    if (var51 != null) {
                                       var51.notifyDataSetChanged();
                                    }
                                 }
                              } else if (var1 == NotificationCenter.contactsDidLoad) {
                                 this.updateContactStatus();
                                 if (this.currentEncryptedChat != null) {
                                    this.updateSpamView();
                                 }

                                 var82 = this.avatarContainer;
                                 if (var82 != null) {
                                    var82.updateSubtitle();
                                 }
                              } else {
                                 TLRPC.EncryptedChat var128;
                                 if (var1 == NotificationCenter.encryptedChatUpdated) {
                                    var128 = (TLRPC.EncryptedChat)var3[0];
                                    TLRPC.EncryptedChat var160 = this.currentEncryptedChat;
                                    if (var160 != null && var128.id == var160.id) {
                                       this.currentEncryptedChat = var128;
                                       this.updateContactStatus();
                                       this.updateSecretStatus();
                                       this.initStickers();
                                       var93 = this.chatActivityEnterView;
                                       if (var93 != null) {
                                          var128 = this.currentEncryptedChat;
                                          if (var128 != null && AndroidUtilities.getPeerLayerVersion(var128.layer) < 23) {
                                             var6 = false;
                                          } else {
                                             var6 = true;
                                          }

                                          var128 = this.currentEncryptedChat;
                                          if (var128 != null && AndroidUtilities.getPeerLayerVersion(var128.layer) < 46) {
                                             var10 = false;
                                          } else {
                                             var10 = true;
                                          }

                                          var93.setAllowStickersAndGifs(var6, var10);
                                          this.chatActivityEnterView.checkRoundVideo();
                                       }

                                       var158 = this.mentionsAdapter;
                                       if (var158 != null) {
                                          label3269: {
                                             if (!this.chatActivityEnterView.isEditingMessage()) {
                                                var128 = this.currentEncryptedChat;
                                                if (var128 == null || AndroidUtilities.getPeerLayerVersion(var128.layer) >= 46) {
                                                   var6 = true;
                                                   break label3269;
                                                }
                                             }

                                             var6 = false;
                                          }

                                          var158.setNeedBotContext(var6);
                                       }
                                    }
                                 } else if (var1 == NotificationCenter.messagesReadEncrypted) {
                                    var1 = (Integer)var3[0];
                                    var128 = this.currentEncryptedChat;
                                    if (var128 != null && var128.id == var1) {
                                       var1 = (Integer)var3[1];
                                       Iterator var132 = this.messages.iterator();

                                       while(var132.hasNext()) {
                                          var36 = (MessageObject)var132.next();
                                          if (var36.isOut()) {
                                             if (var36.isOut() && !var36.isUnread()) {
                                                break;
                                             }

                                             if (var36.messageOwner.date - 1 <= var1) {
                                                var36.setIsRead();
                                             }
                                          }
                                       }

                                       this.updateVisibleRows();
                                    }
                                 } else if (var1 == NotificationCenter.removeAllMessagesFromDialog) {
                                    var11 = (Long)var3[0];
                                    if (this.dialog_id == var11) {
                                       this.clearHistory((Boolean)var3[1]);
                                    }
                                 } else if (var1 == NotificationCenter.screenshotTook) {
                                    this.updateInformationForScreenshotDetector();
                                 } else if (var1 == NotificationCenter.blockedUsersDidLoad) {
                                    if (this.currentUser != null) {
                                       var10 = this.userBlocked;
                                       if (MessagesController.getInstance(super.currentAccount).blockedUsers.indexOfKey(this.currentUser.id) >= 0) {
                                          var6 = true;
                                       } else {
                                          var6 = false;
                                       }

                                       this.userBlocked = var6;
                                       if (var10 != this.userBlocked) {
                                          this.updateBottomOverlay();
                                       }
                                    }
                                 } else if (var1 == NotificationCenter.fileNewChunkAvailable) {
                                    var8 = (MessageObject)var3[0];
                                    var11 = (Long)var3[3];
                                    if (var11 != 0L && this.dialog_id == var8.getDialogId()) {
                                       var36 = (MessageObject)this.messagesDict[0].get(var8.getId());
                                       if (var36 != null) {
                                          TLRPC.Document var161 = var36.messageOwner.media.document;
                                          if (var161 != null) {
                                             var161.size = (int)var11;
                                             this.updateVisibleRows();
                                          }
                                       }
                                    }
                                 } else if (var1 == NotificationCenter.didCreatedNewDeleteTask) {
                                    SparseArray var162 = (SparseArray)var3[0];
                                    var2 = 0;

                                    for(var33 = false; var2 < var162.size(); ++var2) {
                                       var94 = var162.keyAt(var2);
                                       var50 = (ArrayList)var162.get(var94);

                                       for(var16 = 0; var16 < var50.size(); ++var16) {
                                          var11 = (Long)var50.get(var16);
                                          if (var16 == 0) {
                                             var18 = (int)(var11 >> 32);
                                             var62 = var18;
                                             if (var18 < 0) {
                                                var62 = 0;
                                             }

                                             if (ChatObject.isChannel(this.currentChat)) {
                                                var18 = this.currentChat.id;
                                             } else {
                                                var18 = 0;
                                             }

                                             if (var62 != var18) {
                                                return;
                                             }
                                          }

                                          var7 = (MessageObject)this.messagesDict[0].get((int)var11);
                                          if (var7 != null) {
                                             var7.messageOwner.destroyTime = var94;
                                             var33 = true;
                                          }
                                       }
                                    }

                                    if (var33) {
                                       this.updateVisibleRows();
                                    }
                                 } else {
                                    ChatMessageCell var134;
                                    AnimatedFileDrawable var163;
                                    if (var1 == NotificationCenter.messagePlayingDidStart) {
                                       var36 = (MessageObject)var3[0];
                                       if (var36.eventId != 0L) {
                                          return;
                                       }

                                       this.sendSecretMessageRead(var36);
                                       if (var36.isRoundVideo() || var36.isVideo()) {
                                          var52 = super.fragmentView;
                                          if (var52 != null && var52.getParent() != null) {
                                             MediaController.getInstance().setTextureView(this.createTextureView(true), this.aspectRatioFrameLayout, this.videoPlayerContainer, true);
                                             this.updateTextureViewPosition(true);
                                          }
                                       }

                                       var61 = this.chatListView;
                                       if (var61 != null) {
                                          var2 = var61.getChildCount();

                                          for(var1 = 0; var1 < var2; ++var1) {
                                             var52 = this.chatListView.getChildAt(var1);
                                             if (var52 instanceof ChatMessageCell) {
                                                var134 = (ChatMessageCell)var52;
                                                var7 = var134.getMessageObject();
                                                if (var7 != null) {
                                                   var6 = var7.isVideo();
                                                   if (!var7.isRoundVideo() && !var6) {
                                                      if (var7.isVoice() || var7.isMusic()) {
                                                         var134.updateButtonState(false, true, false);
                                                      }
                                                   } else {
                                                      var134.checkVideoPlayback(false);
                                                      if (!MediaController.getInstance().isPlayingMessage(var7)) {
                                                         if (var6 && !MediaController.getInstance().isGoingToShowMessageObject(var7)) {
                                                            var163 = var134.getPhotoImage().getAnimation();
                                                            if (var163 != null) {
                                                               var163.start();
                                                            }
                                                         }

                                                         if (var7.audioProgress != 0.0F) {
                                                            var7.resetPlayingProgress();
                                                            var134.invalidate();
                                                         }
                                                      } else if (var6) {
                                                         var134.updateButtonState(false, true, false);
                                                      }
                                                   }
                                                }
                                             }
                                          }

                                          var2 = this.mentionListView.getChildCount();

                                          for(var1 = 0; var1 < var2; ++var1) {
                                             var52 = this.mentionListView.getChildAt(var1);
                                             if (var52 instanceof ContextLinkCell) {
                                                ContextLinkCell var164 = (ContextLinkCell)var52;
                                                var8 = var164.getMessageObject();
                                                if (var8 != null && (var8.isVoice() || var8.isMusic())) {
                                                   var164.updateButtonState(false, true);
                                                }
                                             }
                                          }
                                       }
                                    } else if (var1 == NotificationCenter.messagePlayingGoingToStop) {
                                       if ((Boolean)var3[1]) {
                                          this.contentView.removeView(this.videoPlayerContainer);
                                          this.videoPlayerContainer = null;
                                          this.videoTextureView = null;
                                          this.aspectRatioFrameLayout = null;
                                       } else if (this.chatListView != null) {
                                          FrameLayout var136 = this.videoPlayerContainer;
                                          if (var136 != null && var136.getTag() != null) {
                                             var36 = (MessageObject)var3[0];
                                             var2 = this.chatListView.getChildCount();

                                             for(var1 = 0; var1 < var2; ++var1) {
                                                var104 = this.chatListView.getChildAt(var1);
                                                if (var104 instanceof ChatMessageCell) {
                                                   var134 = (ChatMessageCell)var104;
                                                   if (var36 == var134.getMessageObject()) {
                                                      AnimatedFileDrawable var137 = var134.getPhotoImage().getAnimation();
                                                      if (var137 != null) {
                                                         Bitmap var133 = var137.getAnimatedBitmap();
                                                         if (var133 != null) {
                                                            try {
                                                               Bitmap var146 = this.videoTextureView.getBitmap(var133.getWidth(), var133.getHeight());
                                                               Canvas var85 = new Canvas(var133);
                                                               var85.drawBitmap(var146, 0.0F, 0.0F, (Paint)null);
                                                               var146.recycle();
                                                            } catch (Throwable var27) {
                                                               FileLog.e(var27);
                                                            }
                                                         }

                                                         var137.seekTo((long)var36.audioProgressMs, FileLoader.getInstance(super.currentAccount).isLoadingVideo(var36.getDocument(), true) ^ true);
                                                      }
                                                      break;
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    } else if (var1 != NotificationCenter.messagePlayingDidReset && var1 != NotificationCenter.messagePlayingPlayStateChanged) {
                                       RecyclerListView var141;
                                       if (var1 == NotificationCenter.messagePlayingProgressDidChanged) {
                                          var154 = (Integer)var3[0];
                                          var141 = this.chatListView;
                                          if (var141 != null) {
                                             var2 = var141.getChildCount();

                                             for(var1 = 0; var1 < var2; ++var1) {
                                                var104 = this.chatListView.getChildAt(var1);
                                                if (var104 instanceof ChatMessageCell) {
                                                   var134 = (ChatMessageCell)var104;
                                                   var7 = var134.getMessageObject();
                                                   if (var7 != null && var7.getId() == var154) {
                                                      var36 = MediaController.getInstance().getPlayingMessageObject();
                                                      if (var36 != null) {
                                                         var7.audioProgress = var36.audioProgress;
                                                         var7.audioProgressSec = var36.audioProgressSec;
                                                         var7.audioPlayerDuration = var36.audioPlayerDuration;
                                                         var134.updatePlayingMessageProgress();
                                                         if (this.drawLaterRoundProgressCell == var134) {
                                                            super.fragmentView.invalidate();
                                                         }
                                                      }
                                                      break;
                                                   }
                                                }
                                             }
                                          }
                                       } else if (var1 == NotificationCenter.didUpdatePollResults) {
                                          var11 = (Long)var3[0];
                                          var68 = (ArrayList)this.polls.get(var11);
                                          if (var68 != null) {
                                             TLRPC.TL_poll var144 = (TLRPC.TL_poll)var3[1];
                                             TLRPC.TL_pollResults var165 = (TLRPC.TL_pollResults)var3[2];
                                             var2 = var68.size();

                                             for(var1 = 0; var1 < var2; ++var1) {
                                                var22 = (MessageObject)var68.get(var1);
                                                TLRPC.TL_messageMediaPoll var87 = (TLRPC.TL_messageMediaPoll)var22.messageOwner.media;
                                                if (var144 != null) {
                                                   var87.poll = var144;
                                                }

                                                MessageObject.updatePollResults(var87, var165);
                                                ChatActivity.ChatActivityAdapter var89 = this.chatAdapter;
                                                if (var89 != null) {
                                                   var89.updateRowWithMessageObject(var22, true);
                                                }
                                             }
                                          }
                                       } else if (var1 == NotificationCenter.updateMessageMedia) {
                                          TLRPC.Message var147 = (TLRPC.Message)var3[0];
                                          var7 = (MessageObject)this.messagesDict[0].get(var147.id);
                                          if (var7 != null) {
                                             var106 = var7.messageOwner;
                                             var106.media = var147.media;
                                             var106.attachPath = var147.attachPath;
                                             var7.generateThumbs(false);
                                             if (var7.getGroupId() != 0L) {
                                                var39 = var7.photoThumbs;
                                                if (var39 == null || var39.isEmpty()) {
                                                   MessageObject.GroupedMessages var90 = (MessageObject.GroupedMessages)this.groupedMessagesMap.get(var7.getGroupId());
                                                   if (var90 != null) {
                                                      var16 = var90.messages.indexOf(var7);
                                                      if (var16 >= 0) {
                                                         var2 = var90.messages.size();
                                                         if (var16 > 0 && var16 < var90.messages.size() - 1) {
                                                            var101 = new MessageObject.GroupedMessages();
                                                            var101.groupId = Utilities.random.nextLong();
                                                            ArrayList var124 = var101.messages;
                                                            var39 = var90.messages;
                                                            var62 = var16 + 1;
                                                            var124.addAll(var39.subList(var62, var39.size()));

                                                            for(var1 = 0; var1 < var101.messages.size(); ++var1) {
                                                               ((MessageObject)var101.messages.get(var1)).localGroupId = var101.groupId;
                                                               var90.messages.remove(var62);
                                                            }

                                                            this.groupedMessagesMap.put(var101.groupId, var101);
                                                            var39 = var101.messages;
                                                            var36 = (MessageObject)var39.get(var39.size() - 1);
                                                            var101.calculate();
                                                         } else {
                                                            var36 = null;
                                                         }

                                                         var90.messages.remove(var16);
                                                         if (var90.messages.isEmpty()) {
                                                            this.groupedMessagesMap.remove(var90.groupId);
                                                         } else {
                                                            var8 = var36;
                                                            if (var36 == null) {
                                                               var39 = var90.messages;
                                                               var8 = (MessageObject)var39.get(var39.size() - 1);
                                                            }

                                                            var90.calculate();
                                                            var1 = this.messages.indexOf(var8);
                                                            if (var1 >= 0) {
                                                               var51 = this.chatAdapter;
                                                               if (var51 != null) {
                                                                  var51.notifyItemRangeChanged(var1 + var51.messagesStartRow, var2);
                                                               }
                                                            }
                                                         }
                                                      }
                                                   }
                                                }
                                             }

                                             TLRPC.MessageMedia var166 = var147.media;
                                             if (var166.ttl_seconds == 0 || !(var166.photo instanceof TLRPC.TL_photoEmpty) && !(var166.document instanceof TLRPC.TL_documentEmpty)) {
                                                this.updateVisibleRows();
                                             } else {
                                                var7.setType();
                                                var51 = this.chatAdapter;
                                                if (var51 != null) {
                                                   var51.updateRowWithMessageObject(var7, false);
                                                }
                                             }
                                          }
                                       } else if (var1 == NotificationCenter.replaceMessagesObjects) {
                                          var11 = (Long)var3[0];
                                          if (var11 != this.dialog_id && var11 != this.mergeDialogId) {
                                             return;
                                          }

                                          if (var11 == this.dialog_id) {
                                             var40 = 0;
                                          } else {
                                             var40 = 1;
                                          }

                                          var39 = (ArrayList)var3[1];
                                          var1 = 0;

                                          for(var48 = null; var1 < var39.size(); var39 = var121) {
                                             var96 = (MessageObject)var39.get(var1);
                                             MessageObject var91 = (MessageObject)this.messagesDict[var40].get(var96.getId());
                                             var7 = this.pinnedMessageObject;
                                             if (var7 != null && var7.getId() == var96.getId()) {
                                                this.pinnedMessageObject = var96;
                                                this.updatePinnedMessageView(true);
                                             }

                                             label3131: {
                                                if (var91 != null) {
                                                   this.addToPolls(var96, var91);
                                                   if (var96.type >= 0) {
                                                      var7 = var91.replyMessageObject;
                                                      if (var7 != null) {
                                                         var96.replyMessageObject = var7;
                                                         var42 = var96.messageOwner.action;
                                                         if (var42 instanceof TLRPC.TL_messageActionGameScore) {
                                                            var96.generateGameMessageText((TLRPC.User)null);
                                                         } else if (var42 instanceof TLRPC.TL_messageActionPaymentSent) {
                                                            var96.generatePaymentSentMessageText((TLRPC.User)null);
                                                         }
                                                      }

                                                      if (!var91.isEditing()) {
                                                         if (var91.getFileName().equals(var96.getFileName())) {
                                                            var96.messageOwner.attachPath = var91.messageOwner.attachPath;
                                                            var96.attachPathExists = var91.attachPathExists;
                                                            var96.mediaExists = var91.mediaExists;
                                                         } else {
                                                            var96.checkMediaExistance();
                                                         }
                                                      }

                                                      this.messagesDict[var40].put(var91.getId(), var96);
                                                   } else {
                                                      this.messagesDict[var40].remove(var91.getId());
                                                   }

                                                   var18 = this.messages.indexOf(var91);
                                                   if (var18 >= 0) {
                                                      ArrayList var125 = (ArrayList)this.messagesByDays.get(var91.dateKey);
                                                      if (var125 != null) {
                                                         var16 = var125.indexOf(var91);
                                                      } else {
                                                         var16 = -1;
                                                      }

                                                      var43 = var48;
                                                      if (var91.getGroupId() != 0L) {
                                                         var92 = (MessageObject.GroupedMessages)this.groupedMessagesMap.get(var91.getGroupId());
                                                         var43 = var48;
                                                         if (var92 != null) {
                                                            var94 = var92.messages.indexOf(var91);
                                                            var43 = var48;
                                                            if (var94 >= 0) {
                                                               if (var91.getGroupId() != var96.getGroupId()) {
                                                                  this.groupedMessagesMap.put(var96.getGroupId(), var92);
                                                               }

                                                               var68 = var96.photoThumbs;
                                                               if (var68 != null && !var68.isEmpty()) {
                                                                  var92.messages.set(var94, var96);
                                                                  MessageObject.GroupedMessagePosition var145 = (MessageObject.GroupedMessagePosition)var92.positions.remove(var91);
                                                                  if (var145 != null) {
                                                                     var92.positions.put(var96, var145);
                                                                  }

                                                                  var43 = var48;
                                                                  if (var48 == null) {
                                                                     var43 = new LongSparseArray();
                                                                  }

                                                                  var43.put(var92.groupId, var92);
                                                               } else {
                                                                  var43 = var48;
                                                                  if (var48 == null) {
                                                                     var43 = new LongSparseArray();
                                                                  }

                                                                  var43.put(var92.groupId, var92);
                                                                  if (var94 > 0 && var94 < var92.messages.size() - 1) {
                                                                     var101 = new MessageObject.GroupedMessages();
                                                                     var101.groupId = Utilities.random.nextLong();
                                                                     var108 = var101.messages;
                                                                     ArrayList var131 = var92.messages;
                                                                     var20 = var94 + 1;
                                                                     var108.addAll(var131.subList(var20, var131.size()));

                                                                     for(var62 = 0; var62 < var101.messages.size(); ++var62) {
                                                                        ((MessageObject)var101.messages.get(var62)).localGroupId = var101.groupId;
                                                                        var92.messages.remove(var20);
                                                                     }

                                                                     var43.put(var101.groupId, var101);
                                                                     this.groupedMessagesMap.put(var101.groupId, var101);
                                                                  }

                                                                  var92.messages.remove(var94);
                                                               }
                                                            }
                                                         }
                                                      }

                                                      if (var96.type >= 0) {
                                                         this.messages.set(var18, var96);
                                                         var111 = this.chatAdapter;
                                                         if (var111 != null) {
                                                            var111.updateRowAtPosition(var111.messagesStartRow + var18);
                                                         }

                                                         var48 = var43;
                                                         var62 = var1;
                                                         var121 = var39;
                                                         if (var16 >= 0) {
                                                            var125.set(var16, var96);
                                                            var48 = var43;
                                                            var62 = var1;
                                                            var121 = var39;
                                                         }
                                                      } else {
                                                         this.messages.remove(var18);
                                                         var111 = this.chatAdapter;
                                                         if (var111 != null) {
                                                            var111.notifyItemRemoved(var111.messagesStartRow + var18);
                                                         }

                                                         var48 = var43;
                                                         var62 = var1;
                                                         var121 = var39;
                                                         if (var16 >= 0) {
                                                            var125.remove(var16);
                                                            var48 = var43;
                                                            var62 = var1;
                                                            var121 = var39;
                                                            if (var125.isEmpty()) {
                                                               this.messagesByDays.remove(var91.dateKey);
                                                               this.messages.remove(var18);
                                                               var111 = this.chatAdapter;
                                                               var111.notifyItemRemoved(var111.messagesStartRow);
                                                               var48 = var43;
                                                               var62 = var1;
                                                               var121 = var39;
                                                            }
                                                         }
                                                      }
                                                      break label3131;
                                                   }
                                                }

                                                var121 = var39;
                                                var62 = var1;
                                             }

                                             var1 = var62 + 1;
                                          }

                                          if (var48 != null) {
                                             for(var1 = 0; var1 < var48.size(); ++var1) {
                                                var41 = (MessageObject.GroupedMessages)var48.valueAt(var1);
                                                if (var41.messages.isEmpty()) {
                                                   this.groupedMessagesMap.remove(var41.groupId);
                                                } else {
                                                   var41.calculate();
                                                   var68 = var41.messages;
                                                   var7 = (MessageObject)var68.get(var68.size() - 1);
                                                   var2 = this.messages.indexOf(var7);
                                                   if (var2 >= 0) {
                                                      var112 = this.chatAdapter;
                                                      if (var112 != null) {
                                                         var112.notifyItemRangeChanged(var2 + var112.messagesStartRow, var41.messages.size());
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       } else if (var1 == NotificationCenter.notificationsSettingsUpdated) {
                                          this.updateTitleIcons();
                                          if (ChatObject.isChannel(this.currentChat)) {
                                             this.updateBottomOverlay();
                                          }
                                       } else if (var1 == NotificationCenter.replyMessagesDidLoad) {
                                          if ((Long)var3[0] == this.dialog_id) {
                                             this.updateVisibleRows();
                                          }
                                       } else if (var1 == NotificationCenter.pinnedMessageDidLoad) {
                                          var36 = (MessageObject)var3[0];
                                          if (var36.getDialogId() == this.dialog_id) {
                                             var78 = this.chatInfo;
                                             if (var78 == null || var78.pinned_msg_id != var36.getId()) {
                                                var80 = this.userInfo;
                                                if (var80 == null || var80.pinned_msg_id != var36.getId()) {
                                                   return;
                                                }
                                             }

                                             this.pinnedMessageObject = var36;
                                             this.loadingPinnedMessage = 0;
                                             this.updatePinnedMessageView(true);
                                          }
                                       } else if (var1 == NotificationCenter.didReceivedWebpages) {
                                          var50 = (ArrayList)var3[0];
                                          var1 = 0;

                                          for(var47 = false; var1 < var50.size(); ++var1) {
                                             var106 = (TLRPC.Message)var50.get(var1);
                                             var11 = MessageObject.getDialogId(var106);
                                             if (var11 == this.dialog_id || var11 == this.mergeDialogId) {
                                                SparseArray[] var148 = this.messagesDict;
                                                if (var11 == this.dialog_id) {
                                                   var98 = 0;
                                                } else {
                                                   var98 = 1;
                                                }

                                                var7 = (MessageObject)var148[var98].get(var106.id);
                                                if (var7 != null) {
                                                   var7.messageOwner.media = new TLRPC.TL_messageMediaWebPage();
                                                   var7.messageOwner.media.webpage = var106.media.webpage;
                                                   var7.generateThumbs(true);
                                                   var47 = true;
                                                }
                                             }
                                          }

                                          if (var47) {
                                             this.updateVisibleRows();
                                          }
                                       } else if (var1 == NotificationCenter.didReceivedWebpagesInUpdates) {
                                          if (this.foundWebPage != null) {
                                             var48 = (LongSparseArray)var3[0];

                                             for(var1 = 0; var1 < var48.size(); ++var1) {
                                                TLRPC.WebPage var167 = (TLRPC.WebPage)var48.valueAt(var1);
                                                if (var167.id == this.foundWebPage.id) {
                                                   if (!(var167 instanceof TLRPC.TL_webPageEmpty)) {
                                                      var6 = true;
                                                   } else {
                                                      var6 = false;
                                                   }

                                                   this.showFieldPanelForWebPage(var6, var167, false);
                                                   break;
                                                }
                                             }
                                          }
                                       } else if (var1 == NotificationCenter.messagesReadContent) {
                                          var39 = (ArrayList)var3[0];
                                          if (ChatObject.isChannel(this.currentChat)) {
                                             var1 = this.currentChat.id;
                                          } else {
                                             var1 = 0;
                                          }

                                          var2 = 0;

                                          for(var67 = false; var2 < var39.size(); ++var2) {
                                             var11 = (Long)var39.get(var2);
                                             var18 = (int)(var11 >> 32);
                                             var62 = var18;
                                             if (var18 < 0) {
                                                var62 = 0;
                                             }

                                             if (var62 == var1) {
                                                var8 = (MessageObject)this.messagesDict[0].get((int)var11);
                                                if (var8 != null) {
                                                   var8.setContentIsRead();
                                                   if (var8.messageOwner.mentioned) {
                                                      --this.newMentionsCount;
                                                      var16 = this.newMentionsCount;
                                                      if (var16 <= 0) {
                                                         this.newMentionsCount = 0;
                                                         this.hasAllMentionsLocal = true;
                                                         this.showMentionDownButton(false, true);
                                                      } else {
                                                         var77 = this.mentiondownButtonCounter;
                                                         if (var77 != null) {
                                                            var77.setText(String.format("%d", var16));
                                                         }
                                                      }
                                                   }

                                                   var67 = true;
                                                }
                                             }
                                          }

                                          if (var67) {
                                             this.updateVisibleRows();
                                          }
                                       } else if (var1 == NotificationCenter.botInfoDidLoad) {
                                          var1 = (Integer)var3[1];
                                          if (super.classGuid == var1) {
                                             TLRPC.BotInfo var168 = (TLRPC.BotInfo)var3[0];
                                             if (this.currentEncryptedChat == null) {
                                                if (!var168.commands.isEmpty() && !ChatObject.isChannel(this.currentChat)) {
                                                   this.hasBotsCommands = true;
                                                }

                                                this.botInfo.put(var168.user_id, var168);
                                                var51 = this.chatAdapter;
                                                if (var51 != null) {
                                                   var51.notifyItemChanged(var51.botInfoRow);
                                                }

                                                if (this.mentionsAdapter != null) {
                                                   label3061: {
                                                      if (ChatObject.isChannel(this.currentChat)) {
                                                         var86 = this.currentChat;
                                                         if (var86 == null || !var86.megagroup) {
                                                            break label3061;
                                                         }
                                                      }

                                                      this.mentionsAdapter.setBotInfo(this.botInfo);
                                                   }
                                                }

                                                var93 = this.chatActivityEnterView;
                                                if (var93 != null) {
                                                   var93.setBotsCount(this.botsCount, this.hasBotsCommands);
                                                }
                                             }

                                             this.updateBotButtons();
                                          }
                                       } else if (var1 == NotificationCenter.botKeyboardDidLoad) {
                                          if (this.dialog_id == (Long)var3[1]) {
                                             var106 = (TLRPC.Message)var3[0];
                                             if (var106 != null && !this.userBlocked) {
                                                this.botButtons = new MessageObject(super.currentAccount, var106, false);
                                                this.checkBotKeyboard();
                                             } else {
                                                this.botButtons = null;
                                                if (this.chatActivityEnterView != null) {
                                                   var36 = this.replyingMessageObject;
                                                   if (var36 != null && this.botReplyButtons == var36) {
                                                      this.botReplyButtons = null;
                                                      this.hideFieldPanel(true);
                                                   }

                                                   this.chatActivityEnterView.setButtons(this.botButtons);
                                                }
                                             }
                                          }
                                       } else {
                                          ActionBarMenuItem var169;
                                          if (var1 == NotificationCenter.chatSearchResultsAvailable) {
                                             if (super.classGuid == (Integer)var3[0]) {
                                                var2 = (Integer)var3[1];
                                                var11 = (Long)var3[3];
                                                if (var2 != 0) {
                                                   byte var155;
                                                   if (var11 == this.dialog_id) {
                                                      var155 = 0;
                                                   } else {
                                                      var155 = 1;
                                                   }

                                                   this.scrollToMessageId(var2, 0, true, var155, false);
                                                } else {
                                                   this.updateVisibleRows();
                                                }

                                                this.updateSearchButtons((Integer)var3[2], (Integer)var3[4], (Integer)var3[5]);
                                                var169 = this.searchItem;
                                                if (var169 != null) {
                                                   var169.setShowSearchProgress(false);
                                                }
                                             }
                                          } else if (var1 == NotificationCenter.chatSearchResultsLoading) {
                                             if (super.classGuid == (Integer)var3[0]) {
                                                var169 = this.searchItem;
                                                if (var169 != null) {
                                                   var169.setShowSearchProgress(true);
                                                }
                                             }
                                          } else if (var1 == NotificationCenter.didUpdatedMessagesViews) {
                                             SparseIntArray var170 = (SparseIntArray)((SparseArray)var3[0]).get((int)this.dialog_id);
                                             if (var170 != null) {
                                                var2 = 0;

                                                for(var33 = false; var2 < var170.size(); var33 = var67) {
                                                   var62 = var170.keyAt(var2);
                                                   var8 = (MessageObject)this.messagesDict[0].get(var62);
                                                   var67 = var33;
                                                   if (var8 != null) {
                                                      var62 = var170.get(var62);
                                                      TLRPC.Message var151 = var8.messageOwner;
                                                      var67 = var33;
                                                      if (var62 > var151.views) {
                                                         var151.views = var62;
                                                         var67 = true;
                                                      }
                                                   }

                                                   ++var2;
                                                }

                                                if (var33) {
                                                   this.updateVisibleRows();
                                                }
                                             }
                                          } else if (var1 == NotificationCenter.peerSettingsDidLoad) {
                                             if ((Long)var3[0] == this.dialog_id) {
                                                this.updateSpamView();
                                             }
                                          } else if (var1 == NotificationCenter.newDraftReceived) {
                                             if ((Long)var3[0] == this.dialog_id) {
                                                this.applyDraftMaybe(true);
                                             }
                                          } else if (var1 == NotificationCenter.userInfoDidLoad) {
                                             var54 = (Integer)var3[0];
                                             var71 = this.currentUser;
                                             if (var71 != null && var71.id == var54) {
                                                this.userInfo = (TLRPC.UserFull)var3[1];
                                                ActionBarMenuItem var152 = this.headerItem;
                                                if (var152 != null) {
                                                   if (this.userInfo.phone_calls_available) {
                                                      var152.showSubItem(32);
                                                   } else {
                                                      var152.hideSubItem(32);
                                                   }
                                                }

                                                if (var3[2] instanceof MessageObject) {
                                                   this.pinnedMessageObject = (MessageObject)var3[2];
                                                   this.updatePinnedMessageView(false);
                                                } else {
                                                   this.updatePinnedMessageView(true);
                                                }
                                             }
                                          } else if (var1 == NotificationCenter.didSetNewWallpapper) {
                                             if (super.fragmentView != null) {
                                                this.contentView.setBackgroundImage(Theme.getCachedWallpaper(), Theme.isWallpaperMotion());
                                                this.progressView2.getBackground().setColorFilter(Theme.colorFilter);
                                                var49 = this.emptyView;
                                                if (var49 != null) {
                                                   var49.getBackground().setColorFilter(Theme.colorFilter);
                                                }

                                                ChatBigEmptyView var171 = this.bigEmptyView;
                                                if (var171 != null) {
                                                   var171.getBackground().setColorFilter(Theme.colorFilter);
                                                }

                                                this.chatListView.invalidateViews();
                                             }
                                          } else if (var1 == NotificationCenter.channelRightsUpdated) {
                                             var86 = (TLRPC.Chat)var3[0];
                                             var55 = this.currentChat;
                                             if (var55 != null && var86.id == var55.id) {
                                                var115 = this.chatActivityEnterView;
                                                if (var115 != null) {
                                                   this.currentChat = var86;
                                                   var115.checkChannelRights();
                                                   this.checkRaiseSensors();
                                                   this.updateSecretStatus();
                                                }
                                             }
                                          } else if (var1 == NotificationCenter.updateMentionsCount) {
                                             if (this.dialog_id == (Long)var3[0]) {
                                                var1 = (Integer)var3[1];
                                                if (this.newMentionsCount > var1) {
                                                   this.newMentionsCount = var1;
                                                   var1 = this.newMentionsCount;
                                                   if (var1 <= 0) {
                                                      this.newMentionsCount = 0;
                                                      this.hasAllMentionsLocal = true;
                                                      this.showMentionDownButton(false, true);
                                                   } else {
                                                      this.mentiondownButtonCounter.setText(String.format("%d", var1));
                                                   }
                                                }
                                             }
                                          } else if (var1 == NotificationCenter.audioRecordTooShort) {
                                             this.showVoiceHint(false, (Boolean)var3[0]);
                                          } else if (var1 == NotificationCenter.videoLoadingStateChanged) {
                                             var141 = this.chatListView;
                                             if (var141 != null) {
                                                var140 = (String)var3[0];
                                                var2 = var141.getChildCount();

                                                for(var1 = 0; var1 < var2; ++var1) {
                                                   var104 = this.chatListView.getChildAt(var1);
                                                   if (var104 instanceof ChatMessageCell) {
                                                      var134 = (ChatMessageCell)var104;
                                                      TLRPC.Document var150 = var134.getStreamingMedia();
                                                      if (var150 != null && FileLoader.getAttachFileName(var150).equals(var140)) {
                                                         var134.updateButtonState(false, true, false);
                                                      }
                                                   }
                                                }
                                             }
                                          }
                                       }
                                    } else {
                                       if (var1 == NotificationCenter.messagePlayingDidReset) {
                                          this.destroyTextureView();
                                       }

                                       var61 = this.chatListView;
                                       if (var61 != null) {
                                          var2 = var61.getChildCount();

                                          for(var1 = 0; var1 < var2; ++var1) {
                                             var52 = this.chatListView.getChildAt(var1);
                                             if (var52 instanceof ChatMessageCell) {
                                                var134 = (ChatMessageCell)var52;
                                                var36 = var134.getMessageObject();
                                                if (var36 != null) {
                                                   if (!var36.isVoice() && !var36.isMusic()) {
                                                      if (var36.isVideo()) {
                                                         var134.updateButtonState(false, true, false);
                                                         if (!MediaController.getInstance().isPlayingMessage(var36) && !MediaController.getInstance().isGoingToShowMessageObject(var36)) {
                                                            var163 = var134.getPhotoImage().getAnimation();
                                                            if (var163 != null) {
                                                               var163.start();
                                                            }
                                                         }
                                                      } else if (var36.isRoundVideo() && !MediaController.getInstance().isPlayingMessage(var36)) {
                                                         var134.checkVideoPlayback(true);
                                                      }
                                                   } else {
                                                      var134.updateButtonState(false, true, false);
                                                   }
                                                }
                                             }
                                          }

                                          var2 = this.mentionListView.getChildCount();

                                          for(var1 = 0; var1 < var2; ++var1) {
                                             var52 = this.mentionListView.getChildAt(var1);
                                             if (var52 instanceof ContextLinkCell) {
                                                ContextLinkCell var139 = (ContextLinkCell)var52;
                                                var36 = var139.getMessageObject();
                                                if (var36 != null && (var36.isVoice() || var36.isMusic())) {
                                                   var139.updateButtonState(false, true);
                                                }
                                             }
                                          }
                                       }
                                    }
                                 }
                              }
                           }
                        }
                     }
                  }
               }
            }
         }
      }

   }

   public void didSelectDialogs(DialogsActivity var1, ArrayList var2, CharSequence var3, boolean var4) {
      MessageObject var5 = this.forwardingMessage;
      byte var6 = 0;
      if (var5 != null || this.selectedMessagesIds[0].size() != 0 || this.selectedMessagesIds[1].size() != 0) {
         ArrayList var15 = new ArrayList();
         MessageObject var7 = this.forwardingMessage;
         int var9;
         int var10;
         if (var7 != null) {
            MessageObject.GroupedMessages var8 = this.forwardingMessageGroup;
            if (var8 != null) {
               var15.addAll(var8.messages);
            } else {
               var15.add(var7);
            }

            this.forwardingMessage = null;
            this.forwardingMessageGroup = null;
         } else {
            for(var9 = 1; var9 >= 0; --var9) {
               ArrayList var17 = new ArrayList();

               for(var10 = 0; var10 < this.selectedMessagesIds[var9].size(); ++var10) {
                  var17.add(this.selectedMessagesIds[var9].keyAt(var10));
               }

               Collections.sort(var17);

               for(var10 = 0; var10 < var17.size(); ++var10) {
                  Integer var16 = (Integer)var17.get(var10);
                  var7 = (MessageObject)this.selectedMessagesIds[var9].get(var16);
                  if (var7 != null) {
                     var15.add(var7);
                  }
               }

               this.selectedMessagesCanCopyIds[var9].clear();
               this.selectedMessagesCanStarIds[var9].clear();
               this.selectedMessagesIds[var9].clear();
            }

            this.hideActionMode();
            this.updatePinnedMessageView(true);
         }

         long var11;
         if (var2.size() <= 1 && (Long)var2.get(0) != (long)UserConfig.getInstance(super.currentAccount).getClientUserId() && var3 == null) {
            var11 = (Long)var2.get(0);
            if (var11 != this.dialog_id) {
               var10 = (int)var11;
               var9 = (int)(var11 >> 32);
               Bundle var13 = new Bundle();
               var13.putBoolean("scrollToTopOnResume", this.scrollToTopOnResume);
               if (var10 != 0) {
                  if (var10 > 0) {
                     var13.putInt("user_id", var10);
                  } else if (var10 < 0) {
                     var13.putInt("chat_id", -var10);
                  }
               } else {
                  var13.putInt("enc_id", var9);
               }

               if (var10 != 0 && !MessagesController.getInstance(super.currentAccount).checkCanOpenChat(var13, var1)) {
                  return;
               }

               ChatActivity var14 = new ChatActivity(var13);
               if (this.presentFragment(var14, true)) {
                  var14.showFieldPanelForForward(true, var15);
                  if (!AndroidUtilities.isTablet()) {
                     this.removeSelfFromStack();
                  }
               } else {
                  var1.finishFragment();
               }
            } else {
               var1.finishFragment();
               this.moveScrollToLastMessage();
               this.showFieldPanelForForward(true, var15);
               if (AndroidUtilities.isTablet()) {
                  this.hideActionMode();
                  this.updatePinnedMessageView(true);
               }

               this.updateVisibleRows();
            }
         } else {
            for(var9 = var6; var9 < var2.size(); ++var9) {
               var11 = (Long)var2.get(var9);
               if (var3 != null) {
                  SendMessagesHelper.getInstance(super.currentAccount).sendMessage(var3.toString(), var11, (MessageObject)null, (TLRPC.WebPage)null, true, (ArrayList)null, (TLRPC.ReplyMarkup)null, (HashMap)null);
               }

               SendMessagesHelper.getInstance(super.currentAccount).sendMessage(var15, var11);
            }

            var1.finishFragment();
         }

      }
   }

   public void didSelectLocation(TLRPC.MessageMedia var1, int var2) {
      SendMessagesHelper.getInstance(super.currentAccount).sendMessage((TLRPC.MessageMedia)var1, this.dialog_id, this.replyingMessageObject, (TLRPC.ReplyMarkup)null, (HashMap)null);
      this.moveScrollToLastMessage();
      if (var2 == 1) {
         this.hideFieldPanel(false);
         DataQuery.getInstance(super.currentAccount).cleanDraft(this.dialog_id, true);
      }

      if (this.paused) {
         this.scrollToTopOnResume = true;
      }

   }

   public void dismissCurrentDialig() {
      ChatAttachAlert var1 = this.chatAttachAlert;
      if (var1 != null && super.visibleDialog == var1) {
         var1.closeCamera(false);
         this.chatAttachAlert.dismissInternal();
         this.chatAttachAlert.hideCamera(true);
      } else {
         super.dismissCurrentDialig();
      }
   }

   public boolean dismissDialogOnPause(Dialog var1) {
      boolean var2;
      if (var1 != this.chatAttachAlert && super.dismissDialogOnPause(var1)) {
         var2 = true;
      } else {
         var2 = false;
      }

      return var2;
   }

   public boolean extendActionMode(Menu var1) {
      if (PhotoViewer.hasInstance() && PhotoViewer.getInstance().isVisible()) {
         if (PhotoViewer.getInstance().getSelectiongLength() == 0 || var1.findItem(16908321) == null) {
            return true;
         }
      } else if (this.chatActivityEnterView.getSelectionLength() == 0 || var1.findItem(16908321) == null) {
         return true;
      }

      if (VERSION.SDK_INT >= 23) {
         var1.removeItem(16908341);
      }

      SpannableStringBuilder var2 = new SpannableStringBuilder(LocaleController.getString("Bold", 2131558847));
      var2.setSpan(new TypefaceSpan(AndroidUtilities.getTypeface("fonts/rmedium.ttf")), 0, var2.length(), 33);
      var1.add(2131230843, 2131230842, 6, var2);
      var2 = new SpannableStringBuilder(LocaleController.getString("Italic", 2131559701));
      var2.setSpan(new TypefaceSpan(AndroidUtilities.getTypeface("fonts/ritalic.ttf")), 0, var2.length(), 33);
      var1.add(2131230843, 2131230844, 7, var2);
      var2 = new SpannableStringBuilder(LocaleController.getString("Mono", 2131559876));
      var2.setSpan(new TypefaceSpan(Typeface.MONOSPACE), 0, var2.length(), 33);
      var1.add(2131230843, 2131230846, 8, var2);
      var1.add(2131230843, 2131230845, 9, LocaleController.getString("CreateLink", 2131559169));
      var1.add(2131230843, 2131230847, 10, LocaleController.getString("Regular", 2131560552));
      return true;
   }

   public void finishFragment() {
      super.finishFragment();
      ActionBarPopupWindow var1 = this.scrimPopupWindow;
      if (var1 != null) {
         var1.dismiss();
      }

   }

   public TLRPC.Chat getCurrentChat() {
      return this.currentChat;
   }

   public TLRPC.ChatFull getCurrentChatInfo() {
      return this.chatInfo;
   }

   public TLRPC.EncryptedChat getCurrentEncryptedChat() {
      return this.currentEncryptedChat;
   }

   public TLRPC.User getCurrentUser() {
      return this.currentUser;
   }

   public TLRPC.UserFull getCurrentUserInfo() {
      return this.userInfo;
   }

   public long getDialogId() {
      return this.dialog_id;
   }

   public ThemeDescription[] getThemeDescriptions() {
      _$$Lambda$ChatActivity$WruAO1rnumLf6ecGnTvBssodWEc var1 = new _$$Lambda$ChatActivity$WruAO1rnumLf6ecGnTvBssodWEc(this);
      ThemeDescription var2 = new ThemeDescription(super.fragmentView, 0, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_wallpaper");
      ThemeDescription var3 = new ThemeDescription(super.actionBar, ThemeDescription.FLAG_BACKGROUND, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "actionBarDefault");
      ThemeDescription var4 = new ThemeDescription(this.chatListView, ThemeDescription.FLAG_LISTGLOWCOLOR, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "actionBarDefault");
      ThemeDescription var5 = new ThemeDescription(super.actionBar, ThemeDescription.FLAG_AB_ITEMSCOLOR, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "actionBarDefaultIcon");
      ThemeDescription var6 = new ThemeDescription(super.actionBar, ThemeDescription.FLAG_AB_SELECTORCOLOR, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "actionBarDefaultSelector");
      ThemeDescription var7 = new ThemeDescription(super.actionBar, ThemeDescription.FLAG_AB_SUBMENUBACKGROUND, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "actionBarDefaultSubmenuBackground");
      ThemeDescription var8 = new ThemeDescription(super.actionBar, ThemeDescription.FLAG_AB_SUBMENUITEM, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "actionBarDefaultSubmenuItem");
      ThemeDescription var9 = new ThemeDescription(super.actionBar, ThemeDescription.FLAG_AB_SUBMENUITEM | ThemeDescription.FLAG_IMAGECOLOR, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "actionBarDefaultSubmenuItemIcon");
      ThemeDescription var10 = new ThemeDescription(super.actionBar, ThemeDescription.FLAG_BACKGROUND, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "actionBarDefault");
      ThemeDescription var11 = new ThemeDescription(this.chatListView, ThemeDescription.FLAG_LISTGLOWCOLOR, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "actionBarDefault");
      ThemeDescription var12 = new ThemeDescription(super.actionBar, ThemeDescription.FLAG_AB_ITEMSCOLOR, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "actionBarDefaultIcon");
      ChatAvatarContainer var13 = this.avatarContainer;
      Object var14 = null;
      SimpleTextView var375;
      if (var13 != null) {
         var375 = var13.getTitleTextView();
      } else {
         var375 = null;
      }

      ThemeDescription var15 = new ThemeDescription(var375, ThemeDescription.FLAG_TEXTCOLOR, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "actionBarDefaultTitle");
      var13 = this.avatarContainer;
      if (var13 != null) {
         var375 = var13.getTitleTextView();
      } else {
         var375 = null;
      }

      ThemeDescription var16 = new ThemeDescription(var375, ThemeDescription.FLAG_IMAGECOLOR, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "actionBarDefaultSubtitle");
      var13 = this.avatarContainer;
      if (var13 != null) {
         var375 = var13.getSubtitleTextView();
      } else {
         var375 = null;
      }

      ThemeDescription var17 = new ThemeDescription(var375, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_CHECKTAG, (Class[])null, new Paint[]{Theme.chat_statusPaint, Theme.chat_statusRecordPaint}, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_status", (Object)null);
      var13 = this.avatarContainer;
      if (var13 != null) {
         var375 = var13.getSubtitleTextView();
      } else {
         var375 = null;
      }

      ThemeDescription var18 = new ThemeDescription(var375, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_CHECKTAG, (Class[])null, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "actionBarDefaultSubtitle", (Object)null);
      ThemeDescription var19 = new ThemeDescription(super.actionBar, ThemeDescription.FLAG_AB_SELECTORCOLOR, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "actionBarDefaultSelector");
      ThemeDescription var20 = new ThemeDescription(super.actionBar, ThemeDescription.FLAG_AB_SEARCH, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "actionBarDefaultSearch");
      ThemeDescription var21 = new ThemeDescription(super.actionBar, ThemeDescription.FLAG_AB_SEARCHPLACEHOLDER, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "actionBarDefaultSearchPlaceholder");
      ThemeDescription var22 = new ThemeDescription(super.actionBar, ThemeDescription.FLAG_AB_AM_ITEMSCOLOR, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "actionBarActionModeDefaultIcon");
      ThemeDescription var23 = new ThemeDescription(super.actionBar, ThemeDescription.FLAG_AB_AM_BACKGROUND, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "actionBarActionModeDefault");
      ThemeDescription var24 = new ThemeDescription(super.actionBar, ThemeDescription.FLAG_AB_AM_TOPBACKGROUND, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "actionBarActionModeDefaultTop");
      ThemeDescription var25 = new ThemeDescription(super.actionBar, ThemeDescription.FLAG_AB_AM_SELECTORCOLOR, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "actionBarActionModeDefaultSelector");
      ThemeDescription var26 = new ThemeDescription(this.selectedMessagesCountTextView, ThemeDescription.FLAG_TEXTCOLOR, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "actionBarActionModeDefaultIcon");
      var13 = this.avatarContainer;
      if (var13 != null) {
         var375 = var13.getTitleTextView();
      } else {
         var375 = null;
      }

      ThemeDescription var27 = new ThemeDescription(var375, 0, (Class[])null, (Paint)null, new Drawable[]{Theme.chat_muteIconDrawable}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_muteIcon");
      var13 = this.avatarContainer;
      if (var13 != null) {
         var375 = var13.getTitleTextView();
      } else {
         var375 = null;
      }

      ThemeDescription var28 = new ThemeDescription(var375, 0, (Class[])null, (Paint)null, new Drawable[]{Theme.chat_lockIconDrawable}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_lockIcon");
      RecyclerListView var29 = this.chatListView;
      Drawable var30 = Theme.avatar_broadcastDrawable;
      Drawable var376 = Theme.avatar_savedDrawable;
      ThemeDescription var31 = new ThemeDescription(var29, 0, new Class[]{ChatMessageCell.class}, (Paint)null, new Drawable[]{var30, var376}, (ThemeDescription.ThemeDescriptionDelegate)null, "avatar_text");
      ThemeDescription var32 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "avatar_backgroundRed");
      ThemeDescription var33 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "avatar_backgroundOrange");
      ThemeDescription var34 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "avatar_backgroundViolet");
      ThemeDescription var35 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "avatar_backgroundGreen");
      ThemeDescription var379 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "avatar_backgroundCyan");
      ThemeDescription var36 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "avatar_backgroundBlue");
      ThemeDescription var37 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "avatar_backgroundPink");
      ThemeDescription var38 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "avatar_nameInMessageRed");
      ThemeDescription var39 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "avatar_nameInMessageOrange");
      ThemeDescription var40 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "avatar_nameInMessageViolet");
      ThemeDescription var41 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "avatar_nameInMessageGreen");
      ThemeDescription var42 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "avatar_nameInMessageCyan");
      ThemeDescription var43 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "avatar_nameInMessageBlue");
      ThemeDescription var44 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "avatar_nameInMessagePink");
      RecyclerListView var45 = this.chatListView;
      var30 = Theme.chat_msgInDrawable;
      var376 = Theme.chat_msgInMediaDrawable;
      ThemeDescription var385 = new ThemeDescription(var45, 0, new Class[]{ChatMessageCell.class, BotHelpCell.class}, (Paint)null, new Drawable[]{var30, var376}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inBubble");
      RecyclerListView var380 = this.chatListView;
      var376 = Theme.chat_msgInSelectedDrawable;
      Drawable var46 = Theme.chat_msgInMediaSelectedDrawable;
      ThemeDescription var386 = new ThemeDescription(var380, 0, new Class[]{ChatMessageCell.class}, (Paint)null, new Drawable[]{var376, var46}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inBubbleSelected");
      RecyclerListView var377 = this.chatListView;
      Drawable var47 = Theme.chat_msgInShadowDrawable;
      var30 = Theme.chat_msgInMediaShadowDrawable;
      ThemeDescription var387 = new ThemeDescription(var377, 0, new Class[]{ChatMessageCell.class, BotHelpCell.class}, (Paint)null, new Drawable[]{var47, var30}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inBubbleShadow");
      var377 = this.chatListView;
      var30 = Theme.chat_msgOutDrawable;
      Drawable var48 = Theme.chat_msgOutMediaDrawable;
      ThemeDescription var388 = new ThemeDescription(var377, 0, new Class[]{ChatMessageCell.class}, (Paint)null, new Drawable[]{var30, var48}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_outBubble");
      var377 = this.chatListView;
      var30 = Theme.chat_msgOutSelectedDrawable;
      Drawable var49 = Theme.chat_msgOutMediaSelectedDrawable;
      ThemeDescription var389 = new ThemeDescription(var377, 0, new Class[]{ChatMessageCell.class}, (Paint)null, new Drawable[]{var30, var49}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_outBubbleSelected");
      var380 = this.chatListView;
      var376 = Theme.chat_msgOutShadowDrawable;
      Drawable var50 = Theme.chat_msgOutMediaShadowDrawable;
      ThemeDescription var390 = new ThemeDescription(var380, 0, new Class[]{ChatMessageCell.class}, (Paint)null, new Drawable[]{var376, var50}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_outBubbleShadow");
      var380 = this.chatListView;
      int var51 = ThemeDescription.FLAG_TEXTCOLOR;
      TextPaint var378 = Theme.chat_actionTextPaint;
      ThemeDescription var52 = new ThemeDescription(var380, var51, new Class[]{ChatActionCell.class}, var378, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_serviceText");
      var380 = this.chatListView;
      var51 = ThemeDescription.FLAG_LINKCOLOR;
      var378 = Theme.chat_actionTextPaint;
      ThemeDescription var53 = new ThemeDescription(var380, var51, new Class[]{ChatActionCell.class}, var378, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_serviceLink");
      RecyclerListView var54 = this.chatListView;
      var30 = Theme.chat_shareIconDrawable;
      Drawable var55 = Theme.chat_replyIconDrawable;
      Drawable var56 = Theme.chat_botInlineDrawable;
      Drawable var57 = Theme.chat_botLinkDrawalbe;
      var376 = Theme.chat_goIconDrawable;
      ThemeDescription var392 = new ThemeDescription(var54, 0, new Class[]{ChatMessageCell.class}, (Paint)null, new Drawable[]{var30, var55, var56, var57, var376}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_serviceIcon");
      ThemeDescription var394 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class, ChatActionCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_serviceBackground");
      ThemeDescription var58 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class, ChatActionCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_serviceBackgroundSelected");
      ThemeDescription var59 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class, BotHelpCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_messageTextIn");
      ThemeDescription var395 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_messageTextOut");
      ThemeDescription var393 = new ThemeDescription(this.chatListView, ThemeDescription.FLAG_LINKCOLOR, new Class[]{ChatMessageCell.class, BotHelpCell.class}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_messageLinkIn", (Object)null);
      ThemeDescription var60 = new ThemeDescription(this.chatListView, ThemeDescription.FLAG_LINKCOLOR, new Class[]{ChatMessageCell.class}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_messageLinkOut", (Object)null);
      var377 = this.chatListView;
      var30 = Theme.chat_msgNoSoundDrawable;
      ThemeDescription var61 = new ThemeDescription(var377, 0, new Class[]{ChatMessageCell.class}, (Paint)null, new Drawable[]{var30}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_mediaTimeText");
      RecyclerListView var62 = this.chatListView;
      var30 = Theme.chat_msgOutCheckDrawable;
      var376 = Theme.chat_msgOutHalfCheckDrawable;
      ThemeDescription var398 = new ThemeDescription(var62, 0, new Class[]{ChatMessageCell.class}, (Paint)null, new Drawable[]{var30, var376}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_outSentCheck");
      var380 = this.chatListView;
      var376 = Theme.chat_msgOutCheckSelectedDrawable;
      Drawable var63 = Theme.chat_msgOutHalfCheckSelectedDrawable;
      ThemeDescription var399 = new ThemeDescription(var380, 0, new Class[]{ChatMessageCell.class}, (Paint)null, new Drawable[]{var376, var63}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_outSentCheckSelected");
      var377 = this.chatListView;
      var30 = Theme.chat_msgOutClockDrawable;
      ThemeDescription var64 = new ThemeDescription(var377, 0, new Class[]{ChatMessageCell.class}, (Paint)null, new Drawable[]{var30}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_outSentClock");
      var377 = this.chatListView;
      var30 = Theme.chat_msgOutSelectedClockDrawable;
      ThemeDescription var65 = new ThemeDescription(var377, 0, new Class[]{ChatMessageCell.class}, (Paint)null, new Drawable[]{var30}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_outSentClockSelected");
      var377 = this.chatListView;
      var30 = Theme.chat_msgInClockDrawable;
      ThemeDescription var66 = new ThemeDescription(var377, 0, new Class[]{ChatMessageCell.class}, (Paint)null, new Drawable[]{var30}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inSentClock");
      var380 = this.chatListView;
      var376 = Theme.chat_msgInSelectedClockDrawable;
      ThemeDescription var67 = new ThemeDescription(var380, 0, new Class[]{ChatMessageCell.class}, (Paint)null, new Drawable[]{var376}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inSentClockSelected");
      var377 = this.chatListView;
      Drawable var68 = Theme.chat_msgMediaCheckDrawable;
      var30 = Theme.chat_msgMediaHalfCheckDrawable;
      ThemeDescription var400 = new ThemeDescription(var377, 0, new Class[]{ChatMessageCell.class}, (Paint)null, new Drawable[]{var68, var30}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_mediaSentCheck");
      var380 = this.chatListView;
      Drawable var69 = Theme.chat_msgStickerHalfCheckDrawable;
      Drawable var70 = Theme.chat_msgStickerCheckDrawable;
      Drawable var71 = Theme.chat_msgStickerClockDrawable;
      var376 = Theme.chat_msgStickerViewsDrawable;
      ThemeDescription var403 = new ThemeDescription(var380, 0, new Class[]{ChatMessageCell.class}, (Paint)null, new Drawable[]{var69, var70, var71, var376}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_serviceText");
      var380 = this.chatListView;
      var376 = Theme.chat_msgMediaClockDrawable;
      ThemeDescription var402 = new ThemeDescription(var380, 0, new Class[]{ChatMessageCell.class}, (Paint)null, new Drawable[]{var376}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_mediaSentClock");
      var380 = this.chatListView;
      var376 = Theme.chat_msgOutViewsDrawable;
      ThemeDescription var401 = new ThemeDescription(var380, 0, new Class[]{ChatMessageCell.class}, (Paint)null, new Drawable[]{var376}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_outViews");
      var380 = this.chatListView;
      var376 = Theme.chat_msgOutViewsSelectedDrawable;
      ThemeDescription var72 = new ThemeDescription(var380, 0, new Class[]{ChatMessageCell.class}, (Paint)null, new Drawable[]{var376}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_outViewsSelected");
      var380 = this.chatListView;
      var376 = Theme.chat_msgInViewsDrawable;
      ThemeDescription var73 = new ThemeDescription(var380, 0, new Class[]{ChatMessageCell.class}, (Paint)null, new Drawable[]{var376}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inViews");
      var377 = this.chatListView;
      var30 = Theme.chat_msgInViewsSelectedDrawable;
      ThemeDescription var74 = new ThemeDescription(var377, 0, new Class[]{ChatMessageCell.class}, (Paint)null, new Drawable[]{var30}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inViewsSelected");
      var380 = this.chatListView;
      var376 = Theme.chat_msgMediaViewsDrawable;
      ThemeDescription var75 = new ThemeDescription(var380, 0, new Class[]{ChatMessageCell.class}, (Paint)null, new Drawable[]{var376}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_mediaViews");
      var380 = this.chatListView;
      var376 = Theme.chat_msgOutMenuDrawable;
      ThemeDescription var76 = new ThemeDescription(var380, 0, new Class[]{ChatMessageCell.class}, (Paint)null, new Drawable[]{var376}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_outMenu");
      var380 = this.chatListView;
      var376 = Theme.chat_msgOutMenuSelectedDrawable;
      ThemeDescription var77 = new ThemeDescription(var380, 0, new Class[]{ChatMessageCell.class}, (Paint)null, new Drawable[]{var376}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_outMenuSelected");
      var377 = this.chatListView;
      var30 = Theme.chat_msgInMenuDrawable;
      ThemeDescription var78 = new ThemeDescription(var377, 0, new Class[]{ChatMessageCell.class}, (Paint)null, new Drawable[]{var30}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inMenu");
      var377 = this.chatListView;
      var30 = Theme.chat_msgInMenuSelectedDrawable;
      ThemeDescription var79 = new ThemeDescription(var377, 0, new Class[]{ChatMessageCell.class}, (Paint)null, new Drawable[]{var30}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inMenuSelected");
      var380 = this.chatListView;
      var376 = Theme.chat_msgMediaMenuDrawable;
      ThemeDescription var80 = new ThemeDescription(var380, 0, new Class[]{ChatMessageCell.class}, (Paint)null, new Drawable[]{var376}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_mediaMenu");
      RecyclerListView var81 = this.chatListView;
      var376 = Theme.chat_msgOutInstantDrawable;
      var30 = Theme.chat_msgOutCallDrawable;
      ThemeDescription var404 = new ThemeDescription(var81, 0, new Class[]{ChatMessageCell.class}, (Paint)null, new Drawable[]{var376, var30}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_outInstant");
      var380 = this.chatListView;
      var376 = Theme.chat_msgOutCallSelectedDrawable;
      ThemeDescription var82 = new ThemeDescription(var380, 0, new Class[]{ChatMessageCell.class}, (Paint)null, new Drawable[]{var376}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_outInstantSelected");
      var380 = this.chatListView;
      var376 = Theme.chat_msgInInstantDrawable;
      Drawable var83 = Theme.chat_msgInCallDrawable;
      ThemeDescription var405 = new ThemeDescription(var380, 0, new Class[]{ChatMessageCell.class}, (Paint)null, new Drawable[]{var376, var83}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inInstant");
      var380 = this.chatListView;
      var376 = Theme.chat_msgInCallSelectedDrawable;
      ThemeDescription var84 = new ThemeDescription(var380, 0, new Class[]{ChatMessageCell.class}, (Paint)null, new Drawable[]{var376}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inInstantSelected");
      var377 = this.chatListView;
      var30 = Theme.chat_msgCallUpGreenDrawable;
      ThemeDescription var85 = new ThemeDescription(var377, 0, new Class[]{ChatMessageCell.class}, (Paint)null, new Drawable[]{var30}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_outUpCall");
      var380 = this.chatListView;
      var376 = Theme.chat_msgCallDownRedDrawable;
      ThemeDescription var86 = new ThemeDescription(var380, 0, new Class[]{ChatMessageCell.class}, (Paint)null, new Drawable[]{var376}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inUpCall");
      var377 = this.chatListView;
      var30 = Theme.chat_msgCallDownGreenDrawable;
      ThemeDescription var87 = new ThemeDescription(var377, 0, new Class[]{ChatMessageCell.class}, (Paint)null, new Drawable[]{var30}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inDownCall");
      var380 = this.chatListView;
      Paint var381 = Theme.chat_msgErrorPaint;
      ThemeDescription var88 = new ThemeDescription(var380, 0, new Class[]{ChatMessageCell.class}, var381, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_sentError");
      var377 = this.chatListView;
      var30 = Theme.chat_msgErrorDrawable;
      ThemeDescription var89 = new ThemeDescription(var377, 0, new Class[]{ChatMessageCell.class}, (Paint)null, new Drawable[]{var30}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_sentErrorIcon");
      ThemeDescription var90 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, var1, "chat_selectedBackground");
      var377 = this.chatListView;
      TextPaint var382 = Theme.chat_durationPaint;
      ThemeDescription var91 = new ThemeDescription(var377, 0, new Class[]{ChatMessageCell.class}, var382, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_previewDurationText");
      var380 = this.chatListView;
      var378 = Theme.chat_gamePaint;
      ThemeDescription var92 = new ThemeDescription(var380, 0, new Class[]{ChatMessageCell.class}, var378, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_previewGameText");
      ThemeDescription var93 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inPreviewInstantText");
      ThemeDescription var94 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_outPreviewInstantText");
      ThemeDescription var95 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inPreviewInstantSelectedText");
      ThemeDescription var96 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_outPreviewInstantSelectedText");
      var377 = this.chatListView;
      Paint var383 = Theme.chat_deleteProgressPaint;
      ThemeDescription var97 = new ThemeDescription(var377, 0, new Class[]{ChatMessageCell.class}, var383, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_secretTimeText");
      ThemeDescription var98 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_stickerNameText");
      var380 = this.chatListView;
      var378 = Theme.chat_botButtonPaint;
      ThemeDescription var99 = new ThemeDescription(var380, 0, new Class[]{ChatMessageCell.class}, var378, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_botButtonText");
      var377 = this.chatListView;
      var383 = Theme.chat_botProgressPaint;
      ThemeDescription var100 = new ThemeDescription(var377, 0, new Class[]{ChatMessageCell.class}, var383, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_botProgress");
      var380 = this.chatListView;
      var381 = Theme.chat_timeBackgroundPaint;
      ThemeDescription var101 = new ThemeDescription(var380, 0, new Class[]{ChatMessageCell.class}, var381, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_mediaTimeBackground");
      ThemeDescription var102 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inForwardedNameText");
      ThemeDescription var103 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_outForwardedNameText");
      ThemeDescription var104 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inViaBotNameText");
      ThemeDescription var105 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_outViaBotNameText");
      ThemeDescription var106 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_stickerViaBotNameText");
      ThemeDescription var107 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inReplyLine");
      ThemeDescription var108 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_outReplyLine");
      ThemeDescription var109 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_stickerReplyLine");
      ThemeDescription var110 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inReplyNameText");
      ThemeDescription var111 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_outReplyNameText");
      ThemeDescription var112 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_stickerReplyNameText");
      ThemeDescription var113 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inReplyMessageText");
      ThemeDescription var114 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_outReplyMessageText");
      ThemeDescription var115 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inReplyMediaMessageText");
      ThemeDescription var116 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_outReplyMediaMessageText");
      ThemeDescription var117 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inReplyMediaMessageSelectedText");
      ThemeDescription var118 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_outReplyMediaMessageSelectedText");
      ThemeDescription var119 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_stickerReplyMessageText");
      ThemeDescription var120 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inPreviewLine");
      ThemeDescription var121 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_outPreviewLine");
      ThemeDescription var122 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inSiteNameText");
      ThemeDescription var123 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_outSiteNameText");
      ThemeDescription var124 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inContactNameText");
      ThemeDescription var125 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_outContactNameText");
      ThemeDescription var126 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inContactPhoneText");
      ThemeDescription var127 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inContactPhoneSelectedText");
      ThemeDescription var128 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_outContactPhoneText");
      ThemeDescription var129 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_outContactPhoneSelectedText");
      ThemeDescription var130 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_mediaProgress");
      ThemeDescription var131 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inAudioProgress");
      ThemeDescription var132 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_outAudioProgress");
      ThemeDescription var133 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inAudioSelectedProgress");
      ThemeDescription var134 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_outAudioSelectedProgress");
      ThemeDescription var135 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_mediaTimeText");
      ThemeDescription var136 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inTimeText");
      ThemeDescription var137 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_outTimeText");
      ThemeDescription var138 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inTimeSelectedText");
      ThemeDescription var139 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_adminText");
      ThemeDescription var140 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_adminSelectedText");
      ThemeDescription var141 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_outTimeSelectedText");
      ThemeDescription var142 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inAudioPerfomerText");
      ThemeDescription var143 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inAudioPerfomerSelectedText");
      ThemeDescription var144 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_outAudioPerfomerText");
      ThemeDescription var145 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_outAudioPerfomerSelectedText");
      ThemeDescription var146 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inAudioTitleText");
      ThemeDescription var147 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_outAudioTitleText");
      ThemeDescription var148 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inAudioDurationText");
      ThemeDescription var149 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_outAudioDurationText");
      ThemeDescription var150 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inAudioDurationSelectedText");
      ThemeDescription var151 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_outAudioDurationSelectedText");
      ThemeDescription var152 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inAudioSeekbar");
      ThemeDescription var153 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_outAudioSeekbar");
      ThemeDescription var154 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inAudioSeekbarSelected");
      ThemeDescription var155 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_outAudioSeekbarSelected");
      ThemeDescription var156 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inAudioSeekbarFill");
      ThemeDescription var157 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inAudioCacheSeekbar");
      ThemeDescription var158 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_outAudioSeekbarFill");
      ThemeDescription var159 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_outAudioCacheSeekbar");
      ThemeDescription var160 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inVoiceSeekbar");
      ThemeDescription var161 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_outVoiceSeekbar");
      ThemeDescription var162 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inVoiceSeekbarSelected");
      ThemeDescription var163 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_outVoiceSeekbarSelected");
      ThemeDescription var164 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inVoiceSeekbarFill");
      ThemeDescription var165 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_outVoiceSeekbarFill");
      ThemeDescription var166 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inFileProgress");
      ThemeDescription var167 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_outFileProgress");
      ThemeDescription var168 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inFileProgressSelected");
      ThemeDescription var169 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_outFileProgressSelected");
      ThemeDescription var170 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inFileNameText");
      ThemeDescription var171 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_outFileNameText");
      ThemeDescription var172 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inFileInfoText");
      ThemeDescription var173 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_outFileInfoText");
      ThemeDescription var174 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inFileInfoSelectedText");
      ThemeDescription var175 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_outFileInfoSelectedText");
      ThemeDescription var176 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inFileBackground");
      ThemeDescription var177 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_outFileBackground");
      ThemeDescription var178 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inFileBackgroundSelected");
      ThemeDescription var179 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_outFileBackgroundSelected");
      ThemeDescription var180 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inVenueInfoText");
      ThemeDescription var181 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_outVenueInfoText");
      ThemeDescription var182 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inVenueInfoSelectedText");
      ThemeDescription var183 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_outVenueInfoSelectedText");
      ThemeDescription var184 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_mediaInfoText");
      var380 = this.chatListView;
      var381 = Theme.chat_urlPaint;
      ThemeDescription var185 = new ThemeDescription(var380, 0, new Class[]{ChatMessageCell.class}, var381, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_linkSelectBackground");
      var380 = this.chatListView;
      var381 = Theme.chat_textSearchSelectionPaint;
      ThemeDescription var186 = new ThemeDescription(var380, 0, new Class[]{ChatMessageCell.class}, var381, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_textSelectBackground");
      ThemeDescription var187 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_outLoader");
      ThemeDescription var188 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_outMediaIcon");
      ThemeDescription var189 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_outLoaderSelected");
      ThemeDescription var190 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_outMediaIconSelected");
      ThemeDescription var191 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inLoader");
      ThemeDescription var192 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inMediaIcon");
      ThemeDescription var193 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inLoaderSelected");
      ThemeDescription var194 = new ThemeDescription(this.chatListView, 0, new Class[]{ChatMessageCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inMediaIconSelected");
      RecyclerListView var195 = this.chatListView;
      var51 = ThemeDescription.FLAG_BACKGROUNDFILTER;
      Drawable[][] var196 = Theme.chat_photoStatesDrawables;
      var376 = var196[0][0];
      var30 = var196[1][0];
      Drawable var197 = var196[2][0];
      Drawable var408 = var196[3][0];
      ThemeDescription var410 = new ThemeDescription(var195, var51, new Class[]{ChatMessageCell.class}, (Paint)null, new Drawable[]{var376, var30, var197, var408}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_mediaLoaderPhoto");
      RecyclerListView var409 = this.chatListView;
      Drawable[][] var198 = Theme.chat_photoStatesDrawables;
      Drawable var406 = var198[0][0];
      var376 = var198[1][0];
      var30 = var198[2][0];
      Drawable var412 = var198[3][0];
      ThemeDescription var407 = new ThemeDescription(var409, 0, new Class[]{ChatMessageCell.class}, (Paint)null, new Drawable[]{var406, var376, var30, var412}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_mediaLoaderPhotoIcon");
      var409 = this.chatListView;
      var51 = ThemeDescription.FLAG_BACKGROUNDFILTER;
      Drawable[][] var199 = Theme.chat_photoStatesDrawables;
      var412 = var199[0][1];
      var30 = var199[1][1];
      var376 = var199[2][1];
      Drawable var413 = var199[3][1];
      ThemeDescription var411 = new ThemeDescription(var409, var51, new Class[]{ChatMessageCell.class}, (Paint)null, new Drawable[]{var412, var30, var376, var413}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_mediaLoaderPhotoSelected");
      var377 = this.chatListView;
      Drawable[][] var200 = Theme.chat_photoStatesDrawables;
      var30 = var200[0][1];
      var412 = var200[1][1];
      var413 = var200[2][1];
      Drawable var415 = var200[3][1];
      ThemeDescription var414 = new ThemeDescription(var377, 0, new Class[]{ChatMessageCell.class}, (Paint)null, new Drawable[]{var30, var412, var413, var415}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_mediaLoaderPhotoIconSelected");
      var380 = this.chatListView;
      var51 = ThemeDescription.FLAG_BACKGROUNDFILTER;
      var199 = Theme.chat_photoStatesDrawables;
      var376 = var199[7][0];
      var413 = var199[8][0];
      ThemeDescription var416 = new ThemeDescription(var380, var51, new Class[]{ChatMessageCell.class}, (Paint)null, new Drawable[]{var376, var413}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_outLoaderPhoto");
      var377 = this.chatListView;
      var200 = Theme.chat_photoStatesDrawables;
      var30 = var200[7][0];
      var415 = var200[8][0];
      ThemeDescription var417 = new ThemeDescription(var377, 0, new Class[]{ChatMessageCell.class}, (Paint)null, new Drawable[]{var30, var415}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_outLoaderPhotoIcon");
      var377 = this.chatListView;
      var51 = ThemeDescription.FLAG_BACKGROUNDFILTER;
      Drawable[][] var201 = Theme.chat_photoStatesDrawables;
      var30 = var201[7][1];
      Drawable var418 = var201[8][1];
      ThemeDescription var419 = new ThemeDescription(var377, var51, new Class[]{ChatMessageCell.class}, (Paint)null, new Drawable[]{var30, var418}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_outLoaderPhotoSelected");
      var380 = this.chatListView;
      Drawable[][] var202 = Theme.chat_photoStatesDrawables;
      var376 = var202[7][1];
      Drawable var420 = var202[8][1];
      ThemeDescription var421 = new ThemeDescription(var380, 0, new Class[]{ChatMessageCell.class}, (Paint)null, new Drawable[]{var376, var420}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_outLoaderPhotoIconSelected");
      var377 = this.chatListView;
      var51 = ThemeDescription.FLAG_BACKGROUNDFILTER;
      Drawable[][] var203 = Theme.chat_photoStatesDrawables;
      var30 = var203[10][0];
      Drawable var422 = var203[11][0];
      ThemeDescription var423 = new ThemeDescription(var377, var51, new Class[]{ChatMessageCell.class}, (Paint)null, new Drawable[]{var30, var422}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inLoaderPhoto");
      var380 = this.chatListView;
      Drawable[][] var204 = Theme.chat_photoStatesDrawables;
      var376 = var204[10][0];
      Drawable var424 = var204[11][0];
      ThemeDescription var425 = new ThemeDescription(var380, 0, new Class[]{ChatMessageCell.class}, (Paint)null, new Drawable[]{var376, var424}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inLoaderPhotoIcon");
      var377 = this.chatListView;
      var51 = ThemeDescription.FLAG_BACKGROUNDFILTER;
      Drawable[][] var205 = Theme.chat_photoStatesDrawables;
      var30 = var205[10][1];
      Drawable var426 = var205[11][1];
      ThemeDescription var427 = new ThemeDescription(var377, var51, new Class[]{ChatMessageCell.class}, (Paint)null, new Drawable[]{var30, var426}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inLoaderPhotoSelected");
      var380 = this.chatListView;
      Drawable[][] var206 = Theme.chat_photoStatesDrawables;
      var376 = var206[10][1];
      Drawable var428 = var206[11][1];
      ThemeDescription var429 = new ThemeDescription(var380, 0, new Class[]{ChatMessageCell.class}, (Paint)null, new Drawable[]{var376, var428}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inLoaderPhotoIconSelected");
      var377 = this.chatListView;
      var30 = Theme.chat_photoStatesDrawables[9][0];
      ThemeDescription var207 = new ThemeDescription(var377, 0, new Class[]{ChatMessageCell.class}, (Paint)null, new Drawable[]{var30}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_outFileIcon");
      var380 = this.chatListView;
      var376 = Theme.chat_photoStatesDrawables[9][1];
      ThemeDescription var208 = new ThemeDescription(var380, 0, new Class[]{ChatMessageCell.class}, (Paint)null, new Drawable[]{var376}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_outFileSelectedIcon");
      var377 = this.chatListView;
      var30 = Theme.chat_photoStatesDrawables[12][0];
      ThemeDescription var209 = new ThemeDescription(var377, 0, new Class[]{ChatMessageCell.class}, (Paint)null, new Drawable[]{var30}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inFileIcon");
      var377 = this.chatListView;
      var30 = Theme.chat_photoStatesDrawables[12][1];
      ThemeDescription var210 = new ThemeDescription(var377, 0, new Class[]{ChatMessageCell.class}, (Paint)null, new Drawable[]{var30}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inFileSelectedIcon");
      var377 = this.chatListView;
      var51 = ThemeDescription.FLAG_BACKGROUNDFILTER;
      var30 = Theme.chat_contactDrawable[0];
      ThemeDescription var211 = new ThemeDescription(var377, var51, new Class[]{ChatMessageCell.class}, (Paint)null, new Drawable[]{var30}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inContactBackground");
      var380 = this.chatListView;
      var376 = Theme.chat_contactDrawable[0];
      ThemeDescription var212 = new ThemeDescription(var380, 0, new Class[]{ChatMessageCell.class}, (Paint)null, new Drawable[]{var376}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inContactIcon");
      var377 = this.chatListView;
      var51 = ThemeDescription.FLAG_BACKGROUNDFILTER;
      var30 = Theme.chat_contactDrawable[1];
      ThemeDescription var213 = new ThemeDescription(var377, var51, new Class[]{ChatMessageCell.class}, (Paint)null, new Drawable[]{var30}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_outContactBackground");
      var380 = this.chatListView;
      var376 = Theme.chat_contactDrawable[1];
      ThemeDescription var214 = new ThemeDescription(var380, 0, new Class[]{ChatMessageCell.class}, (Paint)null, new Drawable[]{var376}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_outContactIcon");
      var380 = this.chatListView;
      var51 = ThemeDescription.FLAG_BACKGROUNDFILTER;
      var376 = Theme.chat_locationDrawable[0];
      ThemeDescription var215 = new ThemeDescription(var380, var51, new Class[]{ChatMessageCell.class}, (Paint)null, new Drawable[]{var376}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inLocationBackground");
      var377 = this.chatListView;
      var30 = Theme.chat_locationDrawable[0];
      ThemeDescription var216 = new ThemeDescription(var377, 0, new Class[]{ChatMessageCell.class}, (Paint)null, new Drawable[]{var30}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inLocationIcon");
      var377 = this.chatListView;
      var51 = ThemeDescription.FLAG_BACKGROUNDFILTER;
      var30 = Theme.chat_locationDrawable[1];
      ThemeDescription var217 = new ThemeDescription(var377, var51, new Class[]{ChatMessageCell.class}, (Paint)null, new Drawable[]{var30}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_outLocationBackground");
      var380 = this.chatListView;
      var376 = Theme.chat_locationDrawable[1];
      ThemeDescription var218 = new ThemeDescription(var380, 0, new Class[]{ChatMessageCell.class}, (Paint)null, new Drawable[]{var376}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_outLocationIcon");
      ThemeDescription var219 = new ThemeDescription(this.mentionContainer, 0, (Class[])null, Theme.chat_composeBackgroundPaint, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_messagePanelBackground");
      ThemeDescription var220 = new ThemeDescription(this.mentionContainer, 0, (Class[])null, (Paint)null, new Drawable[]{Theme.chat_composeShadowDrawable}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_messagePanelShadow");
      ThemeDescription var221 = new ThemeDescription(this.searchContainer, 0, (Class[])null, Theme.chat_composeBackgroundPaint, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_messagePanelBackground");
      ThemeDescription var222 = new ThemeDescription(this.searchContainer, 0, (Class[])null, (Paint)null, new Drawable[]{Theme.chat_composeShadowDrawable}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_messagePanelShadow");
      ThemeDescription var223 = new ThemeDescription(this.bottomOverlay, 0, (Class[])null, Theme.chat_composeBackgroundPaint, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_messagePanelBackground");
      ThemeDescription var224 = new ThemeDescription(this.bottomOverlay, 0, (Class[])null, (Paint)null, new Drawable[]{Theme.chat_composeShadowDrawable}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_messagePanelShadow");
      ThemeDescription var225 = new ThemeDescription(this.bottomOverlayChat, 0, (Class[])null, Theme.chat_composeBackgroundPaint, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_messagePanelBackground");
      ThemeDescription var226 = new ThemeDescription(this.bottomOverlayChat, 0, (Class[])null, (Paint)null, new Drawable[]{Theme.chat_composeShadowDrawable}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_messagePanelShadow");
      ThemeDescription var227 = new ThemeDescription(this.bottomMessagesActionContainer, 0, (Class[])null, Theme.chat_composeBackgroundPaint, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_messagePanelBackground");
      ThemeDescription var228 = new ThemeDescription(this.bottomMessagesActionContainer, 0, (Class[])null, (Paint)null, new Drawable[]{Theme.chat_composeShadowDrawable}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_messagePanelShadow");
      ThemeDescription var229 = new ThemeDescription(this.chatActivityEnterView, 0, (Class[])null, Theme.chat_composeBackgroundPaint, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_messagePanelBackground");
      ThemeDescription var230 = new ThemeDescription(this.chatActivityEnterView, 0, (Class[])null, (Paint)null, new Drawable[]{Theme.chat_composeShadowDrawable}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_messagePanelShadow");
      ThemeDescription var231 = new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_BACKGROUND, new Class[]{ChatActivityEnterView.class}, new String[]{"audioVideoButtonContainer"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_messagePanelBackground");
      ThemeDescription var232 = new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{ChatActivityEnterView.class}, new String[]{"messageEditText"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_messagePanelText");
      ThemeDescription var233 = new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{ChatActivityEnterView.class}, new String[]{"recordSendText"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_fieldOverlayText");
      ThemeDescription var234 = new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_HINTTEXTCOLOR, new Class[]{ChatActivityEnterView.class}, new String[]{"messageEditText"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_messagePanelHint");
      ThemeDescription var235 = new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"sendButton"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_messagePanelSend");
      ThemeDescription var236 = new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"emojiButton"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_messagePanelIcons");
      ThemeDescription var237 = new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"botButton"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_messagePanelIcons");
      ThemeDescription var238 = new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"notifyButton"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_messagePanelIcons");
      ThemeDescription var239 = new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"attachButton"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_messagePanelIcons");
      ThemeDescription var240 = new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"audioSendButton"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_messagePanelIcons");
      ThemeDescription var241 = new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"videoSendButton"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_messagePanelIcons");
      ThemeDescription var242 = new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_IMAGECOLOR | ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{ChatActivityEnterView.class}, new String[]{"doneButtonImage"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_messagePanelSend");
      ThemeDescription var243 = new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_IMAGECOLOR, new Class[]{ChatActivityEnterView.class}, new String[]{"doneButtonImage"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_messagePanelBackground");
      ThemeDescription var244 = new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_BACKGROUND, new Class[]{ChatActivityEnterView.class}, new String[]{"recordedAudioPanel"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_messagePanelBackground");
      ThemeDescription var245 = new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"micDrawable"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_messagePanelVoicePressed");
      ThemeDescription var246 = new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"cameraDrawable"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_messagePanelVoicePressed");
      ThemeDescription var247 = new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"sendDrawable"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_messagePanelVoicePressed");
      ThemeDescription var248 = new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"lockDrawable"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "key_chat_messagePanelVoiceLock");
      ThemeDescription var249 = new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"lockTopDrawable"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "key_chat_messagePanelVoiceLock");
      ThemeDescription var250 = new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"lockArrowDrawable"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "key_chat_messagePanelVoiceLock");
      ThemeDescription var251 = new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"lockBackgroundDrawable"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "key_chat_messagePanelVoiceLockBackground");
      ThemeDescription var252 = new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"lockShadowDrawable"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "key_chat_messagePanelVoiceLockShadow");
      ThemeDescription var253 = new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_IMAGECOLOR, new Class[]{ChatActivityEnterView.class}, new String[]{"recordDeleteImageView"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_messagePanelVoiceDelete");
      ThemeDescription var254 = new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{ChatActivityEnterView.class}, new String[]{"recordedAudioBackground"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_recordedVoiceBackground");
      ThemeDescription var255 = new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{ChatActivityEnterView.class}, new String[]{"recordTimeText"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_recordTime");
      ThemeDescription var256 = new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_BACKGROUND, new Class[]{ChatActivityEnterView.class}, new String[]{"recordTimeContainer"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_messagePanelBackground");
      ThemeDescription var257 = new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{ChatActivityEnterView.class}, new String[]{"recordCancelText"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_recordVoiceCancel");
      ThemeDescription var258 = new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_BACKGROUND, new Class[]{ChatActivityEnterView.class}, new String[]{"recordPanel"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_messagePanelBackground");
      ThemeDescription var259 = new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{ChatActivityEnterView.class}, new String[]{"recordedAudioTimeTextView"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_messagePanelVoiceDuration");
      ThemeDescription var260 = new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_IMAGECOLOR, new Class[]{ChatActivityEnterView.class}, new String[]{"recordCancelImage"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_recordVoiceCancel");
      ThemeDescription var261 = new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"doneButtonProgress"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "contextProgressInner1");
      ThemeDescription var262 = new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"doneButtonProgress"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "contextProgressOuter1");
      ThemeDescription var263 = new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_IMAGECOLOR, new Class[]{ChatActivityEnterView.class}, new String[]{"cancelBotButton"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_messagePanelCancelInlineBot");
      ThemeDescription var264 = new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"redDotPaint"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_recordedVoiceDot");
      ThemeDescription var265 = new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"paint"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_messagePanelVoiceBackground");
      ThemeDescription var266 = new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"paintRecord"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_messagePanelVoiceShadow");
      ThemeDescription var267 = new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"seekBarWaveform"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_recordedVoiceProgress");
      ThemeDescription var268 = new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"seekBarWaveform"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_recordedVoiceProgressInner");
      ThemeDescription var269 = new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"playDrawable"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_recordedVoicePlayPause");
      ThemeDescription var270 = new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"pauseDrawable"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_recordedVoicePlayPause");
      ThemeDescription var271 = new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, new Class[]{ChatActivityEnterView.class}, new String[]{"playDrawable"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_recordedVoicePlayPausePressed");
      ThemeDescription var272 = new ThemeDescription(this.chatActivityEnterView, ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, new Class[]{ChatActivityEnterView.class}, new String[]{"pauseDrawable"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_recordedVoicePlayPausePressed");
      ThemeDescription var273 = new ThemeDescription(this.chatActivityEnterView, 0, new Class[]{ChatActivityEnterView.class}, new String[]{"dotPaint"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_emojiPanelNewTrending");
      ChatActivityEnterView var391 = this.chatActivityEnterView;
      Object var384 = var391;
      if (var391 != null) {
         var384 = var391.getEmojiView();
      }

      ThemeDescription var274 = new ThemeDescription((View)var384, 0, new Class[]{EmojiView.class}, (String[])null, (Paint[])null, (Drawable[])null, var1, "chat_emojiPanelBackground");
      var391 = this.chatActivityEnterView;
      var384 = var391;
      if (var391 != null) {
         var384 = var391.getEmojiView();
      }

      ThemeDescription var275 = new ThemeDescription((View)var384, 0, new Class[]{EmojiView.class}, (String[])null, (Paint[])null, (Drawable[])null, var1, "chat_emojiPanelShadowLine");
      var391 = this.chatActivityEnterView;
      var384 = var391;
      if (var391 != null) {
         var384 = var391.getEmojiView();
      }

      ThemeDescription var276 = new ThemeDescription((View)var384, 0, new Class[]{EmojiView.class}, (String[])null, (Paint[])null, (Drawable[])null, var1, "chat_emojiPanelEmptyText");
      var391 = this.chatActivityEnterView;
      var384 = var391;
      if (var391 != null) {
         var384 = var391.getEmojiView();
      }

      ThemeDescription var277 = new ThemeDescription((View)var384, 0, new Class[]{EmojiView.class}, (String[])null, (Paint[])null, (Drawable[])null, var1, "chat_emojiPanelIcon");
      var391 = this.chatActivityEnterView;
      var384 = var391;
      if (var391 != null) {
         var384 = var391.getEmojiView();
      }

      ThemeDescription var278 = new ThemeDescription((View)var384, 0, new Class[]{EmojiView.class}, (String[])null, (Paint[])null, (Drawable[])null, var1, "chat_emojiPanelIconSelected");
      var391 = this.chatActivityEnterView;
      var384 = var391;
      if (var391 != null) {
         var384 = var391.getEmojiView();
      }

      ThemeDescription var279 = new ThemeDescription((View)var384, 0, new Class[]{EmojiView.class}, (String[])null, (Paint[])null, (Drawable[])null, var1, "chat_emojiPanelStickerPackSelector");
      var391 = this.chatActivityEnterView;
      var384 = var391;
      if (var391 != null) {
         var384 = var391.getEmojiView();
      }

      ThemeDescription var280 = new ThemeDescription((View)var384, 0, new Class[]{EmojiView.class}, (String[])null, (Paint[])null, (Drawable[])null, var1, "chat_emojiPanelBackspace");
      var391 = this.chatActivityEnterView;
      var384 = var391;
      if (var391 != null) {
         var384 = var391.getEmojiView();
      }

      ThemeDescription var281 = new ThemeDescription((View)var384, 0, new Class[]{EmojiView.class}, (String[])null, (Paint[])null, (Drawable[])null, var1, "chat_emojiPanelTrendingTitle");
      var391 = this.chatActivityEnterView;
      var384 = var391;
      if (var391 != null) {
         var384 = var391.getEmojiView();
      }

      ThemeDescription var282 = new ThemeDescription((View)var384, 0, new Class[]{EmojiView.class}, (String[])null, (Paint[])null, (Drawable[])null, var1, "chat_emojiPanelTrendingDescription");
      var391 = this.chatActivityEnterView;
      var384 = var391;
      if (var391 != null) {
         var384 = var391.getEmojiView();
      }

      ThemeDescription var283 = new ThemeDescription((View)var384, 0, new Class[]{EmojiView.class}, (String[])null, (Paint[])null, (Drawable[])null, var1, "chat_emojiPanelBadgeText");
      var391 = this.chatActivityEnterView;
      var384 = var391;
      if (var391 != null) {
         var384 = var391.getEmojiView();
      }

      ThemeDescription var284 = new ThemeDescription((View)var384, 0, new Class[]{EmojiView.class}, (String[])null, (Paint[])null, (Drawable[])null, var1, "chat_emojiPanelBadgeBackground");
      var391 = this.chatActivityEnterView;
      var384 = var391;
      if (var391 != null) {
         var384 = var391.getEmojiView();
      }

      ThemeDescription var285 = new ThemeDescription((View)var384, 0, new Class[]{EmojiView.class}, (String[])null, (Paint[])null, (Drawable[])null, var1, "chat_emojiBottomPanelIcon");
      var391 = this.chatActivityEnterView;
      var384 = var391;
      if (var391 != null) {
         var384 = var391.getEmojiView();
      }

      ThemeDescription var286 = new ThemeDescription((View)var384, 0, new Class[]{EmojiView.class}, (String[])null, (Paint[])null, (Drawable[])null, var1, "chat_emojiSearchIcon");
      var391 = this.chatActivityEnterView;
      var384 = var391;
      if (var391 != null) {
         var384 = var391.getEmojiView();
      }

      ThemeDescription var287 = new ThemeDescription((View)var384, 0, new Class[]{EmojiView.class}, (String[])null, (Paint[])null, (Drawable[])null, var1, "chat_emojiPanelStickerSetNameHighlight");
      var391 = this.chatActivityEnterView;
      var384 = var391;
      if (var391 != null) {
         var384 = var391.getEmojiView();
      }

      ThemeDescription var288 = new ThemeDescription((View)var384, 0, new Class[]{EmojiView.class}, (String[])null, (Paint[])null, (Drawable[])null, var1, "chat_emojiPanelStickerPackSelectorLine");
      ThemeDescription var289 = new ThemeDescription(this.undoView, ThemeDescription.FLAG_BACKGROUND, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "undo_background");
      ThemeDescription var290 = new ThemeDescription(this.undoView, 0, new Class[]{UndoView.class}, new String[]{"undoImageView"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "undo_cancelColor");
      ThemeDescription var291 = new ThemeDescription(this.undoView, 0, new Class[]{UndoView.class}, new String[]{"undoTextView"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "undo_cancelColor");
      ThemeDescription var292 = new ThemeDescription(this.undoView, 0, new Class[]{UndoView.class}, new String[]{"infoTextView"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "undo_infoColor");
      ThemeDescription var293 = new ThemeDescription(this.undoView, 0, new Class[]{UndoView.class}, new String[]{"textPaint"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "undo_infoColor");
      ThemeDescription var294 = new ThemeDescription(this.undoView, 0, new Class[]{UndoView.class}, new String[]{"progressPaint"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "undo_infoColor");
      ThemeDescription var295 = new ThemeDescription(this.undoView, ThemeDescription.FLAG_IMAGECOLOR, new Class[]{UndoView.class}, new String[]{"leftImageView"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "undo_infoColor");
      ThemeDescription var296 = new ThemeDescription((View)null, 0, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_botKeyboardButtonText");
      ThemeDescription var297 = new ThemeDescription((View)null, 0, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_botKeyboardButtonBackground");
      ThemeDescription var298 = new ThemeDescription((View)null, 0, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_botKeyboardButtonBackgroundPressed");
      ThemeDescription var299 = new ThemeDescription(super.fragmentView, ThemeDescription.FLAG_BACKGROUND | ThemeDescription.FLAG_CHECKTAG, new Class[]{FragmentContextView.class}, new String[]{"frameLayout"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "inappPlayerBackground");
      ThemeDescription var300 = new ThemeDescription(super.fragmentView, ThemeDescription.FLAG_IMAGECOLOR, new Class[]{FragmentContextView.class}, new String[]{"playButton"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "inappPlayerPlayPause");
      ThemeDescription var301 = new ThemeDescription(super.fragmentView, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_CHECKTAG, new Class[]{FragmentContextView.class}, new String[]{"titleTextView"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "inappPlayerTitle");
      ThemeDescription var302 = new ThemeDescription(super.fragmentView, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_FASTSCROLL, new Class[]{FragmentContextView.class}, new String[]{"titleTextView"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "inappPlayerPerformer");
      ThemeDescription var396 = new ThemeDescription(super.fragmentView, ThemeDescription.FLAG_IMAGECOLOR, new Class[]{FragmentContextView.class}, new String[]{"closeButton"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "inappPlayerClose");
      ThemeDescription var303 = new ThemeDescription(super.fragmentView, ThemeDescription.FLAG_BACKGROUND | ThemeDescription.FLAG_CHECKTAG, new Class[]{FragmentContextView.class}, new String[]{"frameLayout"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "returnToCallBackground");
      ThemeDescription var304 = new ThemeDescription(super.fragmentView, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_CHECKTAG, new Class[]{FragmentContextView.class}, new String[]{"titleTextView"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "returnToCallText");
      ThemeDescription var305 = new ThemeDescription(this.pinnedLineView, ThemeDescription.FLAG_BACKGROUND, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_topPanelLine");
      ThemeDescription var306 = new ThemeDescription(this.pinnedMessageNameTextView, ThemeDescription.FLAG_TEXTCOLOR, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_topPanelTitle");
      ThemeDescription var307 = new ThemeDescription(this.pinnedMessageTextView, ThemeDescription.FLAG_TEXTCOLOR, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_topPanelMessage");
      ThemeDescription var308 = new ThemeDescription(this.alertNameTextView, ThemeDescription.FLAG_TEXTCOLOR, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_topPanelTitle");
      ThemeDescription var309 = new ThemeDescription(this.alertTextView, ThemeDescription.FLAG_TEXTCOLOR, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_topPanelMessage");
      ThemeDescription var310 = new ThemeDescription(this.closePinned, ThemeDescription.FLAG_IMAGECOLOR, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_topPanelClose");
      ThemeDescription var311 = new ThemeDescription(this.closeReportSpam, ThemeDescription.FLAG_IMAGECOLOR, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_topPanelClose");
      ThemeDescription var312 = new ThemeDescription(this.reportSpamView, ThemeDescription.FLAG_BACKGROUNDFILTER, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_topPanelBackground");
      ThemeDescription var313 = new ThemeDescription(this.alertView, ThemeDescription.FLAG_BACKGROUNDFILTER, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_topPanelBackground");
      ThemeDescription var314 = new ThemeDescription(this.pinnedMessageView, ThemeDescription.FLAG_BACKGROUNDFILTER, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_topPanelBackground");
      ThemeDescription var315 = new ThemeDescription(this.addToContactsButton, ThemeDescription.FLAG_TEXTCOLOR, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_addContact");
      ThemeDescription var316 = new ThemeDescription(this.reportSpamButton, ThemeDescription.FLAG_TEXTCOLOR, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_reportSpam");
      ThemeDescription var317 = new ThemeDescription(this.replyLineView, ThemeDescription.FLAG_BACKGROUND, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_replyPanelLine");
      ThemeDescription var318 = new ThemeDescription(this.replyNameTextView, ThemeDescription.FLAG_TEXTCOLOR, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_replyPanelName");
      ThemeDescription var319 = new ThemeDescription(this.replyObjectTextView, ThemeDescription.FLAG_TEXTCOLOR, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_replyPanelMessage");
      ThemeDescription var320 = new ThemeDescription(this.replyIconImageView, ThemeDescription.FLAG_IMAGECOLOR, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_replyPanelIcons");
      ThemeDescription var321 = new ThemeDescription(this.replyCloseImageView, ThemeDescription.FLAG_IMAGECOLOR, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_replyPanelClose");
      ThemeDescription var322 = new ThemeDescription(this.searchUpButton, ThemeDescription.FLAG_IMAGECOLOR, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_searchPanelIcons");
      ThemeDescription var323 = new ThemeDescription(this.searchDownButton, ThemeDescription.FLAG_IMAGECOLOR, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_searchPanelIcons");
      ThemeDescription var324 = new ThemeDescription(this.searchCalendarButton, ThemeDescription.FLAG_IMAGECOLOR, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_searchPanelIcons");
      ThemeDescription var325 = new ThemeDescription(this.searchUserButton, ThemeDescription.FLAG_IMAGECOLOR, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_searchPanelIcons");
      ThemeDescription var326 = new ThemeDescription(this.searchCountText, ThemeDescription.FLAG_TEXTCOLOR, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_searchPanelText");
      ThemeDescription var327 = new ThemeDescription(this.bottomOverlayText, ThemeDescription.FLAG_TEXTCOLOR, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_secretChatStatusText");
      ThemeDescription var328 = new ThemeDescription(this.bottomOverlayChatText, ThemeDescription.FLAG_TEXTCOLOR, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_fieldOverlayText");
      ThemeDescription var329 = new ThemeDescription(this.bottomOverlayChatText2, ThemeDescription.FLAG_TEXTCOLOR, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_fieldOverlayText");
      ThemeDescription var330 = new ThemeDescription(this.bottomOverlayProgress, 0, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_fieldOverlayText");
      ThemeDescription var331 = new ThemeDescription(this.bigEmptyView, ThemeDescription.FLAG_TEXTCOLOR, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_serviceText");
      ThemeDescription var332 = new ThemeDescription(this.emptyView, ThemeDescription.FLAG_TEXTCOLOR, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_serviceText");
      ThemeDescription var333 = new ThemeDescription(this.progressBar, ThemeDescription.FLAG_PROGRESSBAR, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_serviceText");
      ThemeDescription var334 = new ThemeDescription(this.stickersPanelArrow, ThemeDescription.FLAG_IMAGECOLOR, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_stickersHintPanel");
      ThemeDescription var335 = new ThemeDescription(this.stickersListView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[]{StickerCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_stickersHintPanel");
      ThemeDescription var336 = new ThemeDescription(this.chatListView, ThemeDescription.FLAG_USEBACKGROUNDDRAWABLE, new Class[]{ChatUnreadCell.class}, new String[]{"backgroundLayout"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_unreadMessagesStartBackground");
      ThemeDescription var337 = new ThemeDescription(this.chatListView, ThemeDescription.FLAG_IMAGECOLOR, new Class[]{ChatUnreadCell.class}, new String[]{"imageView"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_unreadMessagesStartArrowIcon");
      ThemeDescription var338 = new ThemeDescription(this.chatListView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{ChatUnreadCell.class}, new String[]{"textView"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_unreadMessagesStartText");
      ThemeDescription var339 = new ThemeDescription(this.progressView2, ThemeDescription.FLAG_SERVICEBACKGROUND, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_serviceBackground");
      ThemeDescription var340 = new ThemeDescription(this.emptyView, ThemeDescription.FLAG_SERVICEBACKGROUND, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_serviceBackground");
      ThemeDescription var341 = new ThemeDescription(this.bigEmptyView, ThemeDescription.FLAG_SERVICEBACKGROUND, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_serviceBackground");
      ThemeDescription var342 = new ThemeDescription(this.chatListView, ThemeDescription.FLAG_SERVICEBACKGROUND, new Class[]{ChatLoadingCell.class}, new String[]{"textView"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_serviceBackground");
      ThemeDescription var343 = new ThemeDescription(this.chatListView, ThemeDescription.FLAG_PROGRESSBAR, new Class[]{ChatLoadingCell.class}, new String[]{"textView"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_serviceText");
      ThemeDescription var344 = new ThemeDescription(this.mentionListView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{BotSwitchCell.class}, new String[]{"textView"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_botSwitchToInlineText");
      ThemeDescription var345 = new ThemeDescription(this.mentionListView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{MentionCell.class}, new String[]{"nameTextView"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "windowBackgroundWhiteBlackText");
      ThemeDescription var346 = new ThemeDescription(this.mentionListView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{MentionCell.class}, new String[]{"usernameTextView"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "windowBackgroundWhiteGrayText3");
      RecyclerListView var347 = this.mentionListView;
      Drawable var348 = Theme.chat_inlineResultFile;
      var376 = Theme.chat_inlineResultAudio;
      Drawable var349 = Theme.chat_inlineResultLocation;
      ThemeDescription var350 = new ThemeDescription(var347, 0, new Class[]{ContextLinkCell.class}, (Paint)null, new Drawable[]{var348, var376, var349}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inlineResultIcon");
      ThemeDescription var351 = new ThemeDescription(this.mentionListView, 0, new Class[]{ContextLinkCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "windowBackgroundWhiteGrayText2");
      ThemeDescription var352 = new ThemeDescription(this.mentionListView, 0, new Class[]{ContextLinkCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "windowBackgroundWhiteLinkText");
      ThemeDescription var353 = new ThemeDescription(this.mentionListView, 0, new Class[]{ContextLinkCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "windowBackgroundWhiteBlackText");
      ThemeDescription var354 = new ThemeDescription(this.mentionListView, 0, new Class[]{ContextLinkCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inAudioProgress");
      ThemeDescription var355 = new ThemeDescription(this.mentionListView, 0, new Class[]{ContextLinkCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_inAudioSelectedProgress");
      ThemeDescription var432 = new ThemeDescription(this.mentionListView, 0, new Class[]{ContextLinkCell.class}, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "divider");
      ThemeDescription var431 = new ThemeDescription(this.gifHintTextView, ThemeDescription.FLAG_BACKGROUNDFILTER, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_gifSaveHintBackground");
      ThemeDescription var356 = new ThemeDescription(this.gifHintTextView, ThemeDescription.FLAG_TEXTCOLOR, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_gifSaveHintText");
      ThemeDescription var357 = new ThemeDescription((View)null, 0, (Class[])null, (Paint)null, (Drawable[])null, var1, "chat_attachMediaBanBackground");
      ThemeDescription var358 = new ThemeDescription((View)null, 0, (Class[])null, (Paint)null, (Drawable[])null, var1, "chat_attachMediaBanText");
      ThemeDescription var359 = new ThemeDescription(this.noSoundHintView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{HintView.class}, new String[]{"textView"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_gifSaveHintText");
      ThemeDescription var360 = new ThemeDescription(this.noSoundHintView, ThemeDescription.FLAG_IMAGECOLOR, new Class[]{HintView.class}, new String[]{"imageView"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_gifSaveHintText");
      ThemeDescription var361 = new ThemeDescription(this.noSoundHintView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{HintView.class}, new String[]{"arrowImageView"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_gifSaveHintBackground");
      ThemeDescription var362 = new ThemeDescription(this.forwardHintView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{HintView.class}, new String[]{"textView"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_gifSaveHintText");
      ThemeDescription var430 = new ThemeDescription(this.forwardHintView, ThemeDescription.FLAG_TEXTCOLOR, new Class[]{HintView.class}, new String[]{"arrowImageView"}, (Paint[])null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_gifSaveHintBackground");
      ThemeDescription var363 = new ThemeDescription(this.pagedownButtonCounter, ThemeDescription.FLAG_BACKGROUNDFILTER, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_goDownButtonCounterBackground");
      ThemeDescription var364 = new ThemeDescription(this.pagedownButtonCounter, ThemeDescription.FLAG_TEXTCOLOR, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_goDownButtonCounter");
      ThemeDescription var365 = new ThemeDescription(this.pagedownButtonImage, ThemeDescription.FLAG_BACKGROUNDFILTER, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_goDownButton");
      ImageView var397 = this.pagedownButtonImage;
      var51 = ThemeDescription.FLAG_BACKGROUNDFILTER;
      ThemeDescription var366 = new ThemeDescription(var397, ThemeDescription.FLAG_DRAWABLESELECTEDSTATE | var51, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_goDownButtonShadow");
      ThemeDescription var367 = new ThemeDescription(this.pagedownButtonImage, ThemeDescription.FLAG_IMAGECOLOR, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_goDownButtonIcon");
      ThemeDescription var368 = new ThemeDescription(this.mentiondownButtonCounter, ThemeDescription.FLAG_BACKGROUNDFILTER, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_goDownButtonCounterBackground");
      ThemeDescription var369 = new ThemeDescription(this.mentiondownButtonCounter, ThemeDescription.FLAG_TEXTCOLOR, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_goDownButtonCounter");
      ThemeDescription var370 = new ThemeDescription(this.mentiondownButtonImage, ThemeDescription.FLAG_BACKGROUNDFILTER, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_goDownButton");
      var397 = this.mentiondownButtonImage;
      var51 = ThemeDescription.FLAG_BACKGROUNDFILTER;
      ThemeDescription var371 = new ThemeDescription(var397, ThemeDescription.FLAG_DRAWABLESELECTEDSTATE | var51, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_goDownButtonShadow");
      ThemeDescription var372 = new ThemeDescription(this.mentiondownButtonImage, ThemeDescription.FLAG_IMAGECOLOR, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_goDownButtonIcon");
      var13 = this.avatarContainer;
      if (var13 != null) {
         var397 = var13.getTimeItem();
      } else {
         var397 = null;
      }

      ThemeDescription var373 = new ThemeDescription(var397, 0, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_secretTimerBackground");
      ChatAvatarContainer var374 = this.avatarContainer;
      var397 = (ImageView)var14;
      if (var374 != null) {
         var397 = var374.getTimeItem();
      }

      return new ThemeDescription[]{var2, var3, var4, var5, var6, var7, var8, var9, var10, var11, var12, var15, var16, var17, var18, var19, var20, var21, var22, var23, var24, var25, var26, var27, var28, var31, var32, var33, var34, var35, var379, var36, var37, var38, var39, var40, var41, var42, var43, var44, var385, var386, var387, var388, var389, var390, var52, var53, var392, var394, var58, var59, var395, var393, var60, var61, var398, var399, var64, var65, var66, var67, var400, var403, var402, var401, var72, var73, var74, var75, var76, var77, var78, var79, var80, var404, var82, var405, var84, var85, var86, var87, var88, var89, var90, var91, var92, var93, var94, var95, var96, var97, var98, var99, var100, var101, var102, var103, var104, var105, var106, var107, var108, var109, var110, var111, var112, var113, var114, var115, var116, var117, var118, var119, var120, var121, var122, var123, var124, var125, var126, var127, var128, var129, var130, var131, var132, var133, var134, var135, var136, var137, var138, var139, var140, var141, var142, var143, var144, var145, var146, var147, var148, var149, var150, var151, var152, var153, var154, var155, var156, var157, var158, var159, var160, var161, var162, var163, var164, var165, var166, var167, var168, var169, var170, var171, var172, var173, var174, var175, var176, var177, var178, var179, var180, var181, var182, var183, var184, var185, var186, var187, var188, var189, var190, var191, var192, var193, var194, var410, var407, var411, var414, var416, var417, var419, var421, var423, var425, var427, var429, var207, var208, var209, var210, var211, var212, var213, var214, var215, var216, var217, var218, var219, var220, var221, var222, var223, var224, var225, var226, var227, var228, var229, var230, var231, var232, var233, var234, var235, var236, var237, var238, var239, var240, var241, var242, var243, var244, var245, var246, var247, var248, var249, var250, var251, var252, var253, var254, var255, var256, var257, var258, var259, var260, var261, var262, var263, var264, var265, var266, var267, var268, var269, var270, var271, var272, var273, var274, var275, var276, var277, var278, var279, var280, var281, var282, var283, var284, var285, var286, var287, var288, var289, var290, var291, var292, var293, var294, var295, var296, var297, var298, var299, var300, var301, var302, var396, var303, var304, var305, var306, var307, var308, var309, var310, var311, var312, var313, var314, var315, var316, var317, var318, var319, var320, var321, var322, var323, var324, var325, var326, var327, var328, var329, var330, var331, var332, var333, var334, var335, var336, var337, var338, var339, var340, var341, var342, var343, var344, var345, var346, var350, var351, var352, var353, var354, var355, var432, var431, var356, var357, var358, var359, var360, var361, var362, var430, var363, var364, var365, var366, var367, var368, var369, var370, var371, var372, var373, new ThemeDescription(var397, 0, (Class[])null, (Paint)null, (Drawable[])null, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_secretTimerText"), new ThemeDescription((View)null, 0, (Class[])null, (Paint)null, new Drawable[]{Theme.chat_attachButtonDrawables[0]}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_attachCameraIcon1"), new ThemeDescription((View)null, 0, (Class[])null, (Paint)null, new Drawable[]{Theme.chat_attachButtonDrawables[0]}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_attachCameraIcon2"), new ThemeDescription((View)null, 0, (Class[])null, (Paint)null, new Drawable[]{Theme.chat_attachButtonDrawables[0]}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_attachCameraIcon3"), new ThemeDescription((View)null, 0, (Class[])null, (Paint)null, new Drawable[]{Theme.chat_attachButtonDrawables[0]}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_attachCameraIcon4"), new ThemeDescription((View)null, 0, (Class[])null, (Paint)null, new Drawable[]{Theme.chat_attachButtonDrawables[0]}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_attachCameraIcon5"), new ThemeDescription((View)null, 0, (Class[])null, (Paint)null, new Drawable[]{Theme.chat_attachButtonDrawables[0]}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_attachCameraIcon6"), new ThemeDescription((View)null, ThemeDescription.FLAG_BACKGROUNDFILTER, (Class[])null, (Paint)null, new Drawable[]{Theme.chat_attachButtonDrawables[1]}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_attachGalleryBackground"), new ThemeDescription((View)null, 0, (Class[])null, (Paint)null, new Drawable[]{Theme.chat_attachButtonDrawables[1]}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_attachGalleryIcon"), new ThemeDescription((View)null, ThemeDescription.FLAG_BACKGROUNDFILTER, (Class[])null, (Paint)null, new Drawable[]{Theme.chat_attachButtonDrawables[2]}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_attachVideoBackground"), new ThemeDescription((View)null, 0, (Class[])null, (Paint)null, new Drawable[]{Theme.chat_attachButtonDrawables[2]}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_attachVideoIcon"), new ThemeDescription((View)null, ThemeDescription.FLAG_BACKGROUNDFILTER, (Class[])null, (Paint)null, new Drawable[]{Theme.chat_attachButtonDrawables[3]}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_attachAudioBackground"), new ThemeDescription((View)null, 0, (Class[])null, (Paint)null, new Drawable[]{Theme.chat_attachButtonDrawables[3]}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_attachAudioIcon"), new ThemeDescription((View)null, ThemeDescription.FLAG_BACKGROUNDFILTER, (Class[])null, (Paint)null, new Drawable[]{Theme.chat_attachButtonDrawables[4]}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_attachFileBackground"), new ThemeDescription((View)null, 0, (Class[])null, (Paint)null, new Drawable[]{Theme.chat_attachButtonDrawables[4]}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_attachFileIcon"), new ThemeDescription((View)null, ThemeDescription.FLAG_BACKGROUNDFILTER, (Class[])null, (Paint)null, new Drawable[]{Theme.chat_attachButtonDrawables[5]}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_attachContactBackground"), new ThemeDescription((View)null, 0, (Class[])null, (Paint)null, new Drawable[]{Theme.chat_attachButtonDrawables[5]}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_attachContactIcon"), new ThemeDescription((View)null, ThemeDescription.FLAG_BACKGROUNDFILTER, (Class[])null, (Paint)null, new Drawable[]{Theme.chat_attachButtonDrawables[6]}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_attachLocationBackground"), new ThemeDescription((View)null, 0, (Class[])null, (Paint)null, new Drawable[]{Theme.chat_attachButtonDrawables[6]}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_attachLocationIcon"), new ThemeDescription((View)null, ThemeDescription.FLAG_BACKGROUNDFILTER, (Class[])null, (Paint)null, new Drawable[]{Theme.chat_attachButtonDrawables[7]}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_attachHideBackground"), new ThemeDescription((View)null, 0, (Class[])null, (Paint)null, new Drawable[]{Theme.chat_attachButtonDrawables[7]}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_attachHideIcon"), new ThemeDescription((View)null, ThemeDescription.FLAG_BACKGROUNDFILTER, (Class[])null, (Paint)null, new Drawable[]{Theme.chat_attachButtonDrawables[8]}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_attachSendBackground"), new ThemeDescription((View)null, 0, (Class[])null, (Paint)null, new Drawable[]{Theme.chat_attachButtonDrawables[8]}, (ThemeDescription.ThemeDescriptionDelegate)null, "chat_attachSendIcon"), new ThemeDescription((View)null, 0, (Class[])null, (Paint)null, (Drawable[])null, var1, "dialogBackground"), new ThemeDescription((View)null, 0, (Class[])null, (Paint)null, (Drawable[])null, var1, "dialogBackgroundGray"), new ThemeDescription((View)null, 0, (Class[])null, (Paint)null, (Drawable[])null, var1, "dialogTextGray2"), new ThemeDescription((View)null, 0, (Class[])null, (Paint)null, (Drawable[])null, var1, "dialogScrollGlow"), new ThemeDescription((View)null, 0, (Class[])null, (Paint)null, (Drawable[])null, var1, "dialogGrayLine"), new ThemeDescription((View)null, 0, (Class[])null, (Paint)null, (Drawable[])null, var1, "dialogCameraIcon")};
   }

   public void hideFieldPanel(boolean var1) {
      this.showFieldPanel(false, (MessageObject)null, (MessageObject)null, (ArrayList)null, (TLRPC.WebPage)null, false, var1);
   }

   public boolean isEditingMessageMedia() {
      ChatAttachAlert var1 = this.chatAttachAlert;
      boolean var2;
      if (var1 != null && var1.getEditingMessageObject() != null) {
         var2 = true;
      } else {
         var2 = false;
      }

      return var2;
   }

   public boolean isSecretChat() {
      boolean var1;
      if (this.currentEncryptedChat != null) {
         var1 = true;
      } else {
         var1 = false;
      }

      return var1;
   }

   // $FF: synthetic method
   public void lambda$applyDraftMaybe$61$ChatActivity() {
      ChatActivityEnterView var1 = this.chatActivityEnterView;
      if (var1 != null) {
         var1.setFieldFocused(true);
         this.chatActivityEnterView.openKeyboard();
      }

   }

   // $FF: synthetic method
   public void lambda$checkRecordLocked$82$ChatActivity(DialogInterface var1, int var2) {
      ChatActivityEnterView var3 = this.chatActivityEnterView;
      if (var3 != null) {
         var3.cancelRecordingAudioVideo();
      }

   }

   // $FF: synthetic method
   public void lambda$checkSecretMessageForLocation$56$ChatActivity() {
      int var1 = this.chatListView.getChildCount();

      for(int var2 = 0; var2 < var1; ++var2) {
         View var3 = this.chatListView.getChildAt(var2);
         if (var3 instanceof ChatMessageCell) {
            ChatMessageCell var4 = (ChatMessageCell)var3;
            if (var4.getMessageObject().type == 4) {
               var4.forceResetMessageObject();
            }
         }
      }

   }

   // $FF: synthetic method
   public void lambda$createDeleteMessagesAlert$62$ChatActivity() {
      this.hideActionMode();
      this.updatePinnedMessageView(true);
   }

   // $FF: synthetic method
   public boolean lambda$createMenu$63$ChatActivity(View var1, Rect var2, View var3, MotionEvent var4) {
      if (var4.getActionMasked() == 0) {
         ActionBarPopupWindow var6 = this.scrimPopupWindow;
         if (var6 != null && var6.isShowing()) {
            var1.getHitRect(var2);
            if (!var2.contains((int)var4.getX(), (int)var4.getY())) {
               this.scrimPopupWindow.dismiss();
            }
         }
      } else if (var4.getActionMasked() == 4) {
         ActionBarPopupWindow var5 = this.scrimPopupWindow;
         if (var5 != null && var5.isShowing()) {
            this.scrimPopupWindow.dismiss();
         }
      }

      return false;
   }

   // $FF: synthetic method
   public void lambda$createMenu$64$ChatActivity(KeyEvent var1) {
      if (var1.getKeyCode() == 4 && var1.getRepeatCount() == 0) {
         ActionBarPopupWindow var2 = this.scrimPopupWindow;
         if (var2 != null && var2.isShowing()) {
            this.scrimPopupWindow.dismiss();
         }
      }

   }

   // $FF: synthetic method
   public void lambda$createMenu$65$ChatActivity(int var1, ArrayList var2, View var3) {
      if (this.selectedObject != null && var1 >= 0 && var1 < var2.size()) {
         this.processSelectedOption((Integer)var2.get(var1));
         ActionBarPopupWindow var4 = this.scrimPopupWindow;
         if (var4 != null) {
            var4.dismiss();
         }
      }

   }

   // $FF: synthetic method
   public void lambda$createView$10$ChatActivity(View var1) {
      Bundle var2 = new Bundle();
      var2.putInt("user_id", this.currentUser.id);
      var2.putBoolean("addContact", true);
      this.presentFragment(new ContactAddActivity(var2));
   }

   // $FF: synthetic method
   public void lambda$createView$12$ChatActivity(View var1) {
      if (this.getParentActivity() != null) {
         AlertDialog.Builder var2 = new AlertDialog.Builder(this.getParentActivity());
         if (ChatObject.isChannel(this.currentChat) && !this.currentChat.megagroup) {
            var2.setMessage(LocaleController.getString("ReportSpamAlertChannel", 2131560578));
         } else if (this.currentChat != null) {
            var2.setMessage(LocaleController.getString("ReportSpamAlertGroup", 2131560579));
         } else {
            var2.setMessage(LocaleController.getString("ReportSpamAlert", 2131560577));
         }

         var2.setTitle(LocaleController.getString("AppName", 2131558635));
         var2.setPositiveButton(LocaleController.getString("OK", 2131560097), new _$$Lambda$ChatActivity$H4bknEjxJAA7MBL17avLHH4f0u4(this));
         var2.setNegativeButton(LocaleController.getString("Cancel", 2131558891), (OnClickListener)null);
         this.showDialog(var2.create());
      }
   }

   // $FF: synthetic method
   public void lambda$createView$13$ChatActivity(View var1) {
      MessagesController.getInstance(super.currentAccount).hideReportSpam(this.dialog_id, this.currentUser, this.currentChat);
      this.updateSpamView();
   }

   // $FF: synthetic method
   public void lambda$createView$14$ChatActivity(View var1) {
      this.wasManualScroll = true;
      this.checkTextureViewPosition = true;
      int var2 = this.createUnreadMessageAfterId;
      if (var2 != 0) {
         this.scrollToMessageId(var2, 0, false, this.returnToLoadIndex, false);
      } else {
         var2 = this.returnToMessageId;
         if (var2 > 0) {
            this.scrollToMessageId(var2, 0, true, this.returnToLoadIndex, false);
         } else {
            this.scrollToLastMessage(true);
         }
      }

   }

   // $FF: synthetic method
   public boolean lambda$createView$15$ChatActivity(View var1) {
      for(int var2 = 0; var2 < this.messages.size(); ++var2) {
         MessageObject var3 = (MessageObject)this.messages.get(var2);
         if (var3.messageOwner.mentioned && !var3.isContentUnread()) {
            var3.setContentIsRead();
         }
      }

      this.newMentionsCount = 0;
      MessagesController.getInstance(super.currentAccount).markMentionsAsRead(this.dialog_id);
      this.hasAllMentionsLocal = true;
      this.showMentionDownButton(false, true);
      return true;
   }

   // $FF: synthetic method
   public boolean lambda$createView$16$ChatActivity(View var1, MotionEvent var2) {
      return ContentPreviewViewer.getInstance().onTouch(var2, this.mentionListView, 0, this.mentionsOnItemClickListener, (ContentPreviewViewer.ContentPreviewViewerDelegate)null);
   }

   // $FF: synthetic method
   public void lambda$createView$17$ChatActivity(View var1, int var2) {
      if (!this.mentionsAdapter.isBannedInline()) {
         Object var7 = this.mentionsAdapter.getItem(var2);
         int var3 = this.mentionsAdapter.getResultStartPosition();
         int var4 = this.mentionsAdapter.getResultLength();
         ChatActivityEnterView var5;
         StringBuilder var6;
         String var9;
         if (var7 instanceof TLRPC.User) {
            TLRPC.User var8;
            String var13;
            if (this.searchingForUser && this.searchContainer.getVisibility() == 0) {
               this.searchingUserMessages = (TLRPC.User)var7;
               var8 = this.searchingUserMessages;
               if (var8 == null) {
                  return;
               }

               var13 = var8.first_name;
               var9 = var13;
               if (TextUtils.isEmpty(var13)) {
                  var9 = this.searchingUserMessages.last_name;
               }

               this.searchingForUser = false;
               var13 = LocaleController.getString("SearchFrom", 2131560647);
               var6 = new StringBuilder();
               var6.append(var13);
               var6.append(" ");
               var6.append(var9);
               SpannableString var10 = new SpannableString(var6.toString());
               var10.setSpan(new ForegroundColorSpan(Theme.getColor("actionBarDefaultSubtitle")), var13.length() + 1, var10.length(), 33);
               this.searchItem.setSearchFieldCaption(var10);
               this.mentionsAdapter.searchUsernameOrHashtag((String)null, 0, (ArrayList)null, false);
               this.searchItem.setSearchFieldHint((CharSequence)null);
               this.searchItem.clearSearchText();
               DataQuery.getInstance(super.currentAccount).searchMessagesInChat("", this.dialog_id, this.mergeDialogId, super.classGuid, 0, this.searchingUserMessages);
            } else {
               var8 = (TLRPC.User)var7;
               if (var8 != null) {
                  if (var8.username != null) {
                     var5 = this.chatActivityEnterView;
                     var6 = new StringBuilder();
                     var6.append("@");
                     var6.append(var8.username);
                     var6.append(" ");
                     var5.replaceWithText(var3, var4, var6.toString(), false);
                  } else {
                     var13 = UserObject.getFirstName(var8, false);
                     var6 = new StringBuilder();
                     var6.append(var13);
                     var6.append(" ");
                     SpannableString var15 = new SpannableString(var6.toString());
                     StringBuilder var14 = new StringBuilder();
                     var14.append("");
                     var14.append(var8.id);
                     var15.setSpan(new URLSpanUserMention(var14.toString(), 1), 0, var15.length(), 33);
                     this.chatActivityEnterView.replaceWithText(var3, var4, var15, false);
                  }
               }
            }
         } else if (var7 instanceof String) {
            if (this.mentionsAdapter.isBotCommands()) {
               SendMessagesHelper.getInstance(super.currentAccount).sendMessage((String)var7, this.dialog_id, this.replyingMessageObject, (TLRPC.WebPage)null, false, (ArrayList)null, (TLRPC.ReplyMarkup)null, (HashMap)null);
               this.chatActivityEnterView.setFieldText("");
               this.hideFieldPanel(false);
            } else {
               var5 = this.chatActivityEnterView;
               var6 = new StringBuilder();
               var6.append(var7);
               var6.append(" ");
               var5.replaceWithText(var3, var4, var6.toString(), false);
            }
         } else if (var7 instanceof TLRPC.BotInlineResult) {
            if (this.chatActivityEnterView.getFieldText() == null) {
               return;
            }

            TLRPC.BotInlineResult var11 = (TLRPC.BotInlineResult)var7;
            if ((!var11.type.equals("photo") || var11.photo == null && var11.content == null) && (!var11.type.equals("gif") || var11.document == null && var11.content == null) && (!var11.type.equals("video") || var11.document == null)) {
               this.sendBotInlineResult(var11);
            } else {
               ArrayList var12 = new ArrayList(this.mentionsAdapter.getSearchResultBotContext());
               this.botContextResults = var12;
               PhotoViewer.getInstance().setParentActivity(this.getParentActivity());
               PhotoViewer.getInstance().openPhotoForSelect(var12, this.mentionsAdapter.getItemPosition(var2), 3, this.botContextProvider, (ChatActivity)null);
            }
         } else if (var7 instanceof TLRPC.TL_inlineBotSwitchPM) {
            this.processInlineBotContextPM((TLRPC.TL_inlineBotSwitchPM)var7);
         } else if (var7 instanceof DataQuery.KeywordResult) {
            var9 = ((DataQuery.KeywordResult)var7).emoji;
            this.chatActivityEnterView.addEmojiToRecent(var9);
            this.chatActivityEnterView.replaceWithText(var3, var4, var9, true);
         }

      }
   }

   // $FF: synthetic method
   public boolean lambda$createView$19$ChatActivity(View var1, int var2) {
      Activity var7 = this.getParentActivity();
      boolean var3 = false;
      if (var7 != null && this.mentionsAdapter.isLongClickEnabled()) {
         Object var4 = this.mentionsAdapter.getItem(var2);
         if (var4 instanceof String) {
            if (this.mentionsAdapter.isBotCommands()) {
               if (URLSpanBotCommand.enabled) {
                  this.chatActivityEnterView.setFieldText("");
                  ChatActivityEnterView var9 = this.chatActivityEnterView;
                  String var5 = (String)var4;
                  TLRPC.Chat var10 = this.currentChat;
                  boolean var6 = var3;
                  if (var10 != null) {
                     var6 = var3;
                     if (var10.megagroup) {
                        var6 = true;
                     }
                  }

                  var9.setCommand((MessageObject)null, var5, true, var6);
                  return true;
               }

               return false;
            }

            AlertDialog.Builder var8 = new AlertDialog.Builder(this.getParentActivity());
            var8.setTitle(LocaleController.getString("AppName", 2131558635));
            var8.setMessage(LocaleController.getString("ClearSearch", 2131559114));
            var8.setPositiveButton(LocaleController.getString("ClearButton", 2131559102).toUpperCase(), new _$$Lambda$ChatActivity$0hrrPKyqw9BvBxC1CB9x_WqjaRc(this));
            var8.setNegativeButton(LocaleController.getString("Cancel", 2131558891), (OnClickListener)null);
            this.showDialog(var8.create());
            return true;
         }
      }

      return false;
   }

   // $FF: synthetic method
   public boolean lambda$createView$20$ChatActivity(View var1, MotionEvent var2) {
      if (var2.getAction() == 0) {
         this.checkRecordLocked();
      }

      this.overlayView.getParent().requestDisallowInterceptTouchEvent(true);
      return true;
   }

   // $FF: synthetic method
   public void lambda$createView$22$ChatActivity(View var1) {
      ArrayList var4 = this.forwardingMessages;
      MessageObject var5;
      if (var4 != null && !var4.isEmpty()) {
         int var2 = this.forwardingMessages.size();

         for(int var3 = 0; var3 < var2; ++var3) {
            var5 = (MessageObject)this.forwardingMessages.get(var3);
            this.selectedMessagesIds[0].put(var5.getId(), var5);
         }

         Bundle var6 = new Bundle();
         var6.putBoolean("onlySelect", true);
         var6.putInt("dialogsType", 3);
         DialogsActivity var7 = new DialogsActivity(var6);
         var7.setDelegate(this);
         this.presentFragment(var7);
      } else {
         var5 = this.replyingMessageObject;
         if (var5 != null) {
            this.scrollToMessageId(var5.getId(), 0, true, 0, false);
         } else {
            var5 = this.editingMessageObject;
            if (var5 != null && var5.canEditMedia() && this.editingMessageObjectReqId == 0) {
               if (this.chatAttachAlert == null) {
                  this.createChatAttachView();
               }

               this.chatAttachAlert.setEditingMessageObject(this.editingMessageObject);
               this.openAttachMenu();
            }
         }
      }

   }

   // $FF: synthetic method
   public void lambda$createView$23$ChatActivity(View var1) {
      ArrayList var2 = this.forwardingMessages;
      if (var2 != null) {
         var2.clear();
      }

      this.showFieldPanel(false, (MessageObject)null, (MessageObject)null, (ArrayList)null, this.foundWebPage, true, true);
   }

   // $FF: synthetic method
   public boolean lambda$createView$24$ChatActivity(ContentPreviewViewer.ContentPreviewViewerDelegate var1, View var2, MotionEvent var3) {
      return ContentPreviewViewer.getInstance().onTouch(var3, this.stickersListView, 0, this.stickersOnItemClickListener, var1);
   }

   // $FF: synthetic method
   public void lambda$createView$26$ChatActivity(View var1) {
      DataQuery.getInstance(super.currentAccount).searchMessagesInChat((String)null, this.dialog_id, this.mergeDialogId, super.classGuid, 1, this.searchingUserMessages);
   }

   // $FF: synthetic method
   public void lambda$createView$27$ChatActivity(View var1) {
      DataQuery.getInstance(super.currentAccount).searchMessagesInChat((String)null, this.dialog_id, this.mergeDialogId, super.classGuid, 2, this.searchingUserMessages);
   }

   // $FF: synthetic method
   public void lambda$createView$28$ChatActivity(View var1) {
      this.mentionLayoutManager.setReverseLayout(true);
      this.mentionsAdapter.setSearchingMentions(true);
      this.searchCalendarButton.setVisibility(8);
      this.searchUserButton.setVisibility(8);
      this.searchingForUser = true;
      this.searchingUserMessages = null;
      this.searchItem.setSearchFieldHint(LocaleController.getString("SearchMembers", 2131560654));
      this.searchItem.setSearchFieldCaption(LocaleController.getString("SearchFrom", 2131560647));
      AndroidUtilities.showKeyboard(this.searchItem.getSearchField());
      this.searchItem.clearSearchText();
   }

   // $FF: synthetic method
   public void lambda$createView$32$ChatActivity(View var1) {
      if (this.getParentActivity() != null) {
         AndroidUtilities.hideKeyboard(this.searchItem.getSearchField());
         Calendar var8 = Calendar.getInstance();
         int var2 = var8.get(1);
         int var3 = var8.get(2);
         int var4 = var8.get(5);

         try {
            Activity var5 = this.getParentActivity();
            _$$Lambda$ChatActivity$umBovobsU_OAcnawDf8vJOJo5sg var6 = new _$$Lambda$ChatActivity$umBovobsU_OAcnawDf8vJOJo5sg(this);
            DatePickerDialog var9 = new DatePickerDialog(var5, var6, var2, var3, var4);
            DatePicker var10 = var9.getDatePicker();
            var10.setMinDate(1375315200000L);
            var10.setMaxDate(System.currentTimeMillis());
            var9.setButton(-1, LocaleController.getString("JumpToDate", 2131559707), var9);
            var9.setButton(-2, LocaleController.getString("Cancel", 2131558891), _$$Lambda$ChatActivity$4aPdcp6iZRxF58i_l54irye2V0k.INSTANCE);
            if (VERSION.SDK_INT >= 21) {
               _$$Lambda$ChatActivity$TbwrkqNoA5Qkw5WQ2BUe7N3Clkw var11 = new _$$Lambda$ChatActivity$TbwrkqNoA5Qkw5WQ2BUe7N3Clkw(var10);
               var9.setOnShowListener(var11);
            }

            this.showDialog(var9);
         } catch (Exception var7) {
            FileLog.e((Throwable)var7);
         }

      }
   }

   // $FF: synthetic method
   public void lambda$createView$35$ChatActivity(View var1) {
      if (this.getParentActivity() != null) {
         TLRPC.User var4 = this.currentUser;
         String var5;
         if (var4 != null && this.userBlocked) {
            if (var4.bot) {
               var5 = this.botUser;
               this.botUser = null;
               MessagesController.getInstance(super.currentAccount).unblockUser(this.currentUser.id);
               if (var5 != null && var5.length() != 0) {
                  MessagesController.getInstance(super.currentAccount).sendBotStart(this.currentUser, var5);
               } else {
                  SendMessagesHelper.getInstance(super.currentAccount).sendMessage("/start", this.dialog_id, (MessageObject)null, (TLRPC.WebPage)null, false, (ArrayList)null, (TLRPC.ReplyMarkup)null, (HashMap)null);
               }
            } else {
               AlertDialog.Builder var7 = new AlertDialog.Builder(this.getParentActivity());
               var7.setMessage(LocaleController.getString("AreYouSureUnblockContact", 2131558702));
               var7.setPositiveButton(LocaleController.getString("OK", 2131560097), new _$$Lambda$ChatActivity$hsuJvVGvkAkeeELuM03tBxYoUt0(this));
               var7.setTitle(LocaleController.getString("AppName", 2131558635));
               var7.setNegativeButton(LocaleController.getString("Cancel", 2131558891), (OnClickListener)null);
               this.showDialog(var7.create());
            }
         } else {
            var4 = this.currentUser;
            if (var4 != null && var4.bot) {
               var5 = this.botUser;
               if (var5 != null) {
                  if (var5.length() != 0) {
                     MessagesController.getInstance(super.currentAccount).sendBotStart(this.currentUser, this.botUser);
                  } else {
                     SendMessagesHelper.getInstance(super.currentAccount).sendMessage("/start", this.dialog_id, (MessageObject)null, (TLRPC.WebPage)null, false, (ArrayList)null, (TLRPC.ReplyMarkup)null, (HashMap)null);
                  }

                  this.botUser = null;
                  this.updateBottomOverlay();
                  return;
               }
            }

            TLRPC.Chat var6;
            if (ChatObject.isChannel(this.currentChat)) {
               var6 = this.currentChat;
               if (!(var6 instanceof TLRPC.TL_channelForbidden)) {
                  if (ChatObject.isNotInChat(var6)) {
                     this.showBottomOverlayProgress(true, true);
                     MessagesController.getInstance(super.currentAccount).addUserToChat(this.currentChat.id, UserConfig.getInstance(super.currentAccount).getCurrentUser(), (TLRPC.ChatFull)null, 0, (String)null, this, (Runnable)null);
                     NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.closeSearchByActiveAction);
                  } else {
                     this.toggleMute(true);
                  }

                  return;
               }
            }

            var6 = this.currentChat;
            TLRPC.User var2 = this.currentUser;
            boolean var3;
            if (this.currentEncryptedChat != null) {
               var3 = true;
            } else {
               var3 = false;
            }

            AlertsCreator.createClearOrDeleteDialogAlert(this, false, var6, var2, var3, new _$$Lambda$ChatActivity$7ef79uBjIVbYvu_Yz_DQ2EN_OFI(this));
         }

      }
   }

   // $FF: synthetic method
   public void lambda$createView$36$ChatActivity(View var1) {
      if (this.chatInfo != null) {
         Bundle var2 = new Bundle();
         var2.putInt("chat_id", this.chatInfo.linked_chat_id);
         if (MessagesController.getInstance(super.currentAccount).checkCanOpenChat(var2, this)) {
            this.presentFragment(new ChatActivity(var2));
         }
      }
   }

   // $FF: synthetic method
   public void lambda$createView$37$ChatActivity(View var1) {
      MessageObject var2 = null;

      int var3;
      MessageObject var4;
      for(var3 = 1; var3 >= 0; var2 = var4) {
         var4 = var2;
         if (var2 == null) {
            var4 = var2;
            if (this.selectedMessagesIds[var3].size() != 0) {
               var4 = (MessageObject)this.messagesDict[var3].get(this.selectedMessagesIds[var3].keyAt(0));
            }
         }

         this.selectedMessagesIds[var3].clear();
         this.selectedMessagesCanCopyIds[var3].clear();
         this.selectedMessagesCanStarIds[var3].clear();
         --var3;
      }

      this.hideActionMode();
      if (var2 != null) {
         var3 = var2.messageOwner.id;
         if (var3 > 0 || var3 < 0 && this.currentEncryptedChat != null) {
            this.showFieldPanelForReply(var2);
         }
      }

      this.updatePinnedMessageView(true);
      this.updateVisibleRows();
   }

   // $FF: synthetic method
   public void lambda$createView$38$ChatActivity(View var1) {
      this.openForward();
   }

   // $FF: synthetic method
   public void lambda$createView$6$ChatActivity(View var1) {
      if (this.floatingDateView.getAlpha() != 0.0F && !super.actionBar.isActionModeShowed()) {
         Calendar var5 = Calendar.getInstance();
         var5.setTimeInMillis((long)this.floatingDateView.getCustomDate() * 1000L);
         int var2 = var5.get(1);
         int var3 = var5.get(2);
         int var4 = var5.get(5);
         var5.clear();
         var5.set(var2, var3, var4);
         this.jumpToDate((int)(var5.getTime().getTime() / 1000L));
      }

   }

   // $FF: synthetic method
   public void lambda$createView$7$ChatActivity(View var1) {
      this.wasManualScroll = true;
      TLRPC.ChatFull var2 = this.chatInfo;
      if (var2 != null) {
         this.scrollToMessageId(var2.pinned_msg_id, 0, true, 0, false);
      } else {
         TLRPC.UserFull var3 = this.userInfo;
         if (var3 != null) {
            this.scrollToMessageId(var3.pinned_msg_id, 0, true, 0, false);
         }
      }

   }

   // $FF: synthetic method
   public void lambda$createView$9$ChatActivity(View var1) {
      if (this.getParentActivity() != null) {
         TLRPC.Chat var5 = this.currentChat;
         boolean var2 = false;
         boolean var3;
         if (var5 != null) {
            var3 = ChatObject.canPinMessages(var5);
         } else {
            var3 = var2;
            if (this.currentEncryptedChat == null) {
               TLRPC.UserFull var6 = this.userInfo;
               var3 = var2;
               if (var6 != null) {
                  var3 = var6.can_pin_message;
               }
            }
         }

         if (var3) {
            AlertDialog.Builder var7 = new AlertDialog.Builder(this.getParentActivity());
            var7.setTitle(LocaleController.getString("UnpinMessageAlertTitle", 2131560944));
            var7.setMessage(LocaleController.getString("UnpinMessageAlert", 2131560943));
            var7.setPositiveButton(LocaleController.getString("OK", 2131560097), new _$$Lambda$ChatActivity$VDE4I_1TJtOt5ofSxoShI_veUKI(this));
            var7.setNegativeButton(LocaleController.getString("Cancel", 2131558891), (OnClickListener)null);
            this.showDialog(var7.create());
         } else {
            SharedPreferences var8 = MessagesController.getNotificationsSettings(super.currentAccount);
            StringBuilder var4;
            Editor var9;
            if (this.chatInfo != null) {
               var9 = var8.edit();
               var4 = new StringBuilder();
               var4.append("pin_");
               var4.append(this.dialog_id);
               var9.putInt(var4.toString(), this.chatInfo.pinned_msg_id).commit();
            } else if (this.userInfo != null) {
               var9 = var8.edit();
               var4 = new StringBuilder();
               var4.append("pin_");
               var4.append(this.dialog_id);
               var9.putInt(var4.toString(), this.userInfo.pinned_msg_id).commit();
            }

            this.updatePinnedMessageView(true);
         }

      }
   }

   // $FF: synthetic method
   public void lambda$didReceivedNotification$55$ChatActivity() {
      ActionBarLayout var1 = super.parentLayout;
      if (var1 != null) {
         var1.resumeDelayedFragmentAnimation();
      }

   }

   // $FF: synthetic method
   public void lambda$getThemeDescriptions$91$ChatActivity() {
      this.updateVisibleRows();
      ChatActivityEnterView var1 = this.chatActivityEnterView;
      if (var1 != null && var1.getEmojiView() != null) {
         this.chatActivityEnterView.getEmojiView().updateUIColors();
      }

      ChatAttachAlert var2 = this.chatAttachAlert;
      if (var2 != null) {
         var2.checkColors();
      }

   }

   // $FF: synthetic method
   public void lambda$initStickers$39$ChatActivity(boolean var1) {
      if ((!var1 || this.stickersPanel.getTag() == null) && (var1 || this.stickersPanel.getTag() != null)) {
         if (var1) {
            RecyclerListView var2 = this.stickersListView;
            int var3 = AndroidUtilities.dp(18.0F);
            int var4;
            if (this.stickersAdapter.isShowingKeywords()) {
               var4 = AndroidUtilities.dp(24.0F);
            } else {
               var4 = 0;
            }

            var2.setPadding(var3, var4, AndroidUtilities.dp(18.0F), 0);
            this.stickersListView.scrollToPosition(0);
            FrameLayout var10 = this.stickersPanel;
            byte var14;
            if (this.allowStickersPanel) {
               var14 = 0;
            } else {
               var14 = 4;
            }

            var10.setVisibility(var14);
            this.stickersPanel.setTag(1);
            boolean var5 = this.chatActivityEnterView.isRtlText();
            LayoutParams var11 = (LayoutParams)this.stickersPanelArrow.getLayoutParams();
            if (var5) {
               var14 = 5;
            } else {
               var14 = 3;
            }

            var11.gravity = var14 | 80;
            this.stickersPanelArrow.requestLayout();
         } else {
            this.stickersPanel.setTag((Object)null);
         }

         AnimatorSet var12 = this.runningAnimation;
         if (var12 != null) {
            var12.cancel();
            this.runningAnimation = null;
         }

         if (this.stickersPanel.getVisibility() != 4) {
            this.runningAnimation = new AnimatorSet();
            AnimatorSet var6 = this.runningAnimation;
            FrameLayout var7 = this.stickersPanel;
            Property var13 = View.ALPHA;
            float var8 = 0.0F;
            float var9;
            if (var1) {
               var9 = 0.0F;
            } else {
               var9 = 1.0F;
            }

            if (var1) {
               var8 = 1.0F;
            }

            var6.playTogether(new Animator[]{ObjectAnimator.ofFloat(var7, var13, new float[]{var9, var8})});
            this.runningAnimation.setDuration(150L);
            this.runningAnimation.addListener(new ChatActivity$38(this, var1));
            this.runningAnimation.start();
         } else if (!var1) {
            this.stickersPanel.setVisibility(8);
         }

      }
   }

   // $FF: synthetic method
   public void lambda$initStickers$40$ChatActivity(View var1, int var2) {
      Object var3 = this.stickersAdapter.getItem(var2);
      Object var4 = this.stickersAdapter.getItemParent(var2);
      if (var3 instanceof TLRPC.TL_document) {
         TLRPC.TL_document var6 = (TLRPC.TL_document)var3;
         SendMessagesHelper.getInstance(super.currentAccount).sendSticker(var6, this.dialog_id, this.replyingMessageObject, var4);
         this.hideFieldPanel(false);
         this.chatActivityEnterView.addStickerToRecent(var6);
         this.chatActivityEnterView.setFieldText("");
      } else if (var3 instanceof String) {
         SpannableString var5 = new SpannableString((String)var3);
         Emoji.replaceEmoji(var5, this.chatActivityEnterView.getEditField().getPaint().getFontMetricsInt(), AndroidUtilities.dp(20.0F), false);
         this.stickersAdapter.loadStikersForEmoji("", false);
         this.chatActivityEnterView.setFieldText(var5, false);
      }

   }

   // $FF: synthetic method
   public void lambda$migrateToNewChat$57$ChatActivity(BaseFragment var1, MessageObject var2, ActionBarLayout var3) {
      if (var1 != null) {
         NotificationCenter.getInstance(super.currentAccount).removeObserver(var1, NotificationCenter.closeChats);
      }

      NotificationCenter.getInstance(super.currentAccount).postNotificationName(NotificationCenter.closeChats);
      Bundle var4 = new Bundle();
      var4.putInt("chat_id", var2.messageOwner.action.channel_id);
      var3.presentFragment(new ChatActivity(var4), true);
   }

   // $FF: synthetic method
   public void lambda$migrateToNewChat$58$ChatActivity(int var1) {
      MessagesController.getInstance(super.currentAccount).loadFullChat(var1, 0, true);
   }

   // $FF: synthetic method
   public void lambda$null$11$ChatActivity(DialogInterface var1, int var2) {
      if (this.currentUser != null) {
         MessagesController.getInstance(super.currentAccount).blockUser(this.currentUser.id);
      }

      MessagesController.getInstance(super.currentAccount).reportSpam(this.dialog_id, this.currentUser, this.currentChat, this.currentEncryptedChat);
      this.updateSpamView();
      TLRPC.Chat var3 = this.currentChat;
      if (var3 != null) {
         if (ChatObject.isNotInChat(var3)) {
            MessagesController.getInstance(super.currentAccount).deleteDialog(this.dialog_id, 0);
         } else {
            MessagesController.getInstance(super.currentAccount).deleteUserFromChat((int)(-this.dialog_id), MessagesController.getInstance(super.currentAccount).getUser(UserConfig.getInstance(super.currentAccount).getClientUserId()), (TLRPC.ChatFull)null);
         }
      } else {
         MessagesController.getInstance(super.currentAccount).deleteDialog(this.dialog_id, 0);
      }

      this.finishFragment();
   }

   // $FF: synthetic method
   public void lambda$null$18$ChatActivity(DialogInterface var1, int var2) {
      this.mentionsAdapter.clearRecentHashtags();
   }

   // $FF: synthetic method
   public void lambda$null$29$ChatActivity(DatePicker var1, int var2, int var3, int var4) {
      Calendar var8 = Calendar.getInstance();
      var8.clear();
      var8.set(var2, var3, var4);
      var3 = (int)(var8.getTime().getTime() / 1000L);
      this.clearChatData();
      this.waitingForLoad.add(this.lastLoadIndex);
      MessagesController var9 = MessagesController.getInstance(super.currentAccount);
      long var5 = this.dialog_id;
      var2 = super.classGuid;
      boolean var7 = ChatObject.isChannel(this.currentChat);
      var4 = this.lastLoadIndex++;
      var9.loadMessages(var5, 30, 0, var3, true, 0, var2, 4, 0, var7, var4);
   }

   // $FF: synthetic method
   public void lambda$null$33$ChatActivity(DialogInterface var1, int var2) {
      MessagesController.getInstance(super.currentAccount).unblockUser(this.currentUser.id);
   }

   // $FF: synthetic method
   public void lambda$null$34$ChatActivity(boolean var1) {
      NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.closeChats);
      NotificationCenter.getInstance(super.currentAccount).postNotificationName(NotificationCenter.closeChats);
      this.finishFragment();
      NotificationCenter.getInstance(super.currentAccount).postNotificationName(NotificationCenter.needDeleteDialog, this.dialog_id, this.currentUser, this.currentChat, var1);
   }

   // $FF: synthetic method
   public void lambda$null$45$ChatActivity() {
      TLRPC.WebPage var1 = this.foundWebPage;
      if (var1 != null) {
         this.showFieldPanelForWebPage(false, var1, false);
         this.foundWebPage = null;
      }

   }

   // $FF: synthetic method
   public void lambda$null$46$ChatActivity() {
      TLRPC.WebPage var1 = this.foundWebPage;
      if (var1 != null) {
         this.showFieldPanelForWebPage(false, var1, false);
         this.foundWebPage = null;
      }

   }

   // $FF: synthetic method
   public void lambda$null$47$ChatActivity(MessagesController var1, CharSequence var2, boolean var3, DialogInterface var4, int var5) {
      var1.secretWebpagePreview = 1;
      MessagesController.getGlobalMainSettings().edit().putInt("secretWebpage2", MessagesController.getInstance(super.currentAccount).secretWebpagePreview).commit();
      this.foundUrls = null;
      this.searchLinks(var2, var3);
   }

   // $FF: synthetic method
   public void lambda$null$48$ChatActivity(MessagesController var1, CharSequence var2, boolean var3) {
      AlertDialog.Builder var4 = new AlertDialog.Builder(this.getParentActivity());
      var4.setTitle(LocaleController.getString("AppName", 2131558635));
      var4.setPositiveButton(LocaleController.getString("OK", 2131560097), new _$$Lambda$ChatActivity$6SufVm6NLqCSEhl5AAnBi0gOHIc(this, var1, var2, var3));
      var4.setNegativeButton(LocaleController.getString("Cancel", 2131558891), (OnClickListener)null);
      var4.setMessage(LocaleController.getString("SecretLinkPreviewAlert", 2131560672));
      this.showDialog(var4.create());
      var1.secretWebpagePreview = 0;
      MessagesController.getGlobalMainSettings().edit().putInt("secretWebpage2", var1.secretWebpagePreview).commit();
   }

   // $FF: synthetic method
   public void lambda$null$49$ChatActivity(TLRPC.TL_error var1, TLObject var2, TLRPC.TL_messages_getWebPagePreview var3) {
      this.linkSearchRequestId = 0;
      if (var1 == null) {
         TLRPC.WebPage var4;
         if (var2 instanceof TLRPC.TL_messageMediaWebPage) {
            this.foundWebPage = ((TLRPC.TL_messageMediaWebPage)var2).webpage;
            var4 = this.foundWebPage;
            if (!(var4 instanceof TLRPC.TL_webPage) && !(var4 instanceof TLRPC.TL_webPagePending)) {
               if (var4 != null) {
                  this.showFieldPanelForWebPage(false, var4, false);
                  this.foundWebPage = null;
               }
            } else {
               if (this.foundWebPage instanceof TLRPC.TL_webPagePending) {
                  this.pendingLinkSearchString = var3.message;
               }

               if (this.currentEncryptedChat != null) {
                  var4 = this.foundWebPage;
                  if (var4 instanceof TLRPC.TL_webPagePending) {
                     var4.url = var3.message;
                  }
               }

               this.showFieldPanelForWebPage(true, this.foundWebPage, false);
            }
         } else {
            var4 = this.foundWebPage;
            if (var4 != null) {
               this.showFieldPanelForWebPage(false, var4, false);
               this.foundWebPage = null;
            }
         }
      }

   }

   // $FF: synthetic method
   public void lambda$null$50$ChatActivity(TLRPC.TL_messages_getWebPagePreview var1, TLObject var2, TLRPC.TL_error var3) {
      AndroidUtilities.runOnUIThread(new _$$Lambda$ChatActivity$nv4_teNPvw_9ujyQH4qsdvaN1RY(this, var3, var2, var1));
   }

   // $FF: synthetic method
   public void lambda$null$66$ChatActivity(TLObject var1) {
      this.editingMessageObjectReqId = 0;
      ChatActivityEnterView var3;
      if (var1 == null) {
         AlertDialog.Builder var2 = new AlertDialog.Builder(this.getParentActivity());
         var2.setTitle(LocaleController.getString("AppName", 2131558635));
         var2.setMessage(LocaleController.getString("EditMessageError", 2131559324));
         var2.setPositiveButton(LocaleController.getString("OK", 2131560097), (OnClickListener)null);
         this.showDialog(var2.create());
         var3 = this.chatActivityEnterView;
         if (var3 != null) {
            var3.setEditingMessageObject((MessageObject)null, false);
            this.hideFieldPanel(true);
         }
      } else {
         var3 = this.chatActivityEnterView;
         if (var3 != null) {
            var3.showEditDoneProgress(false, true);
         }
      }

   }

   // $FF: synthetic method
   public void lambda$null$74$ChatActivity(int var1, DialogInterface var2) {
      ConnectionsManager.getInstance(super.currentAccount).cancelRequest(var1, true);
   }

   // $FF: synthetic method
   public void lambda$null$77$ChatActivity(TLRPC.TL_error var1, TLRPC.TL_messages_editMessage var2) {
      AlertsCreator.processError(super.currentAccount, var1, this, var2);
   }

   // $FF: synthetic method
   public void lambda$null$78$ChatActivity(AlertDialog[] var1, TLRPC.TL_messages_editMessage var2, TLObject var3, TLRPC.TL_error var4) {
      AndroidUtilities.runOnUIThread(new _$$Lambda$ChatActivity$agkXOiTiKl0dtjYlCxl3EGdGrvw(var1));
      if (var4 == null) {
         MessagesController.getInstance(super.currentAccount).processUpdates((TLRPC.Updates)var3, false);
      } else {
         AndroidUtilities.runOnUIThread(new _$$Lambda$ChatActivity$M6IELvVYbgqHEqQmecAx6SFmkfc(this, var4, var2));
      }

   }

   // $FF: synthetic method
   public void lambda$null$79$ChatActivity(int var1, DialogInterface var2) {
      ConnectionsManager.getInstance(super.currentAccount).cancelRequest(var1, true);
   }

   // $FF: synthetic method
   public void lambda$null$8$ChatActivity(DialogInterface var1, int var2) {
      MessagesController.getInstance(super.currentAccount).pinMessage(this.currentChat, this.currentUser, 0, false);
   }

   // $FF: synthetic method
   public void lambda$null$80$ChatActivity(AlertDialog[] var1, int var2) {
      if (var1[0] != null) {
         var1[0].setOnCancelListener(new _$$Lambda$ChatActivity$TmZBCTuFxmfT3qrzC4lu60EEiV4(this, var2));
         this.showDialog(var1[0]);
      }
   }

   // $FF: synthetic method
   public void lambda$null$86$ChatActivity(TLObject var1, String var2) {
      if (var1 instanceof TLRPC.TL_urlAuthResultAccepted) {
         TLRPC.TL_urlAuthResultAccepted var3 = (TLRPC.TL_urlAuthResultAccepted)var1;
         Browser.openUrl(this.getParentActivity(), (String)var3.url, false);
      } else if (var1 instanceof TLRPC.TL_urlAuthResultDefault) {
         Browser.openUrl(this.getParentActivity(), (String)var2, false);
      }

   }

   // $FF: synthetic method
   public void lambda$null$87$ChatActivity(String var1, TLObject var2, TLRPC.TL_error var3) {
      AndroidUtilities.runOnUIThread(new _$$Lambda$ChatActivity$yXI67P575_PM0WqsdVxx64Y9gWI(this, var2, var1));
   }

   // $FF: synthetic method
   public void lambda$null$88$ChatActivity(int var1, DialogInterface var2) {
      ConnectionsManager.getInstance(super.currentAccount).cancelRequest(var1, true);
   }

   // $FF: synthetic method
   public void lambda$null$89$ChatActivity(AlertDialog[] var1, int var2) {
      if (var1[0] != null) {
         var1[0].setOnCancelListener(new _$$Lambda$ChatActivity$jD_CpG8ofMpECWClk02OvBwC11M(this, var2));
         this.showDialog(var1[0]);
      }
   }

   // $FF: synthetic method
   public void lambda$onFragmentCreate$0$ChatActivity(MessagesStorage var1, int var2, CountDownLatch var3) {
      this.currentChat = var1.getChat(var2);
      var3.countDown();
   }

   // $FF: synthetic method
   public void lambda$onFragmentCreate$1$ChatActivity(MessagesStorage var1, int var2, CountDownLatch var3) {
      this.currentUser = var1.getUser(var2);
      var3.countDown();
   }

   // $FF: synthetic method
   public void lambda$onFragmentCreate$2$ChatActivity(MessagesStorage var1, int var2, CountDownLatch var3) {
      this.currentEncryptedChat = var1.getEncryptedChat(var2);
      var3.countDown();
   }

   // $FF: synthetic method
   public void lambda$onFragmentCreate$3$ChatActivity(MessagesStorage var1, CountDownLatch var2) {
      this.currentUser = var1.getUser(this.currentEncryptedChat.user_id);
      var2.countDown();
   }

   // $FF: synthetic method
   public void lambda$onRequestPermissionsResultFragment$54$ChatActivity(DialogInterface var1, int var2) {
      try {
         Intent var3 = new Intent("android.settings.APPLICATION_DETAILS_SETTINGS");
         StringBuilder var5 = new StringBuilder();
         var5.append("package:");
         var5.append(ApplicationLoader.applicationContext.getPackageName());
         var3.setData(Uri.parse(var5.toString()));
         this.getParentActivity().startActivity(var3);
      } catch (Exception var4) {
         FileLog.e((Throwable)var4);
      }

   }

   // $FF: synthetic method
   public void lambda$onResume$60$ChatActivity() {
      this.openVideoEditor(this.startVideoEdit, (String)null);
      this.startVideoEdit = null;
   }

   // $FF: synthetic method
   public void lambda$processSelectedAttach$42$ChatActivity(ArrayList var1) {
      this.fillEditingMediaWithCaption((CharSequence)null, (ArrayList)null);
      SendMessagesHelper.prepareSendingAudioDocuments(var1, this.dialog_id, this.replyingMessageObject, this.editingMessageObject);
      this.hideFieldPanel(false);
      DataQuery.getInstance(super.currentAccount).cleanDraft(this.dialog_id, true);
   }

   // $FF: synthetic method
   public void lambda$processSelectedAttach$43$ChatActivity(TLRPC.User var1) {
      SendMessagesHelper.getInstance(super.currentAccount).sendMessage((TLRPC.User)var1, this.dialog_id, this.replyingMessageObject, (TLRPC.ReplyMarkup)null, (HashMap)null);
      this.hideFieldPanel(false);
      DataQuery.getInstance(super.currentAccount).cleanDraft(this.dialog_id, true);
   }

   // $FF: synthetic method
   public void lambda$processSelectedAttach$44$ChatActivity(TLRPC.TL_messageMediaPoll var1) {
      SendMessagesHelper.getInstance(super.currentAccount).sendMessage((TLRPC.TL_messageMediaPoll)var1, this.dialog_id, this.replyingMessageObject, (TLRPC.ReplyMarkup)null, (HashMap)null);
      this.hideFieldPanel(false);
      DataQuery.getInstance(super.currentAccount).cleanDraft(this.dialog_id, true);
   }

   // $FF: synthetic method
   public void lambda$processSelectedOption$69$ChatActivity(int var1, boolean[] var2, DialogInterface var3, int var4) {
      MessagesController.getInstance(super.currentAccount).pinMessage(this.currentChat, this.currentUser, var1, var2[0]);
   }

   // $FF: synthetic method
   public void lambda$processSelectedOption$70$ChatActivity(DialogInterface var1, int var2) {
      MessagesController.getInstance(super.currentAccount).pinMessage(this.currentChat, this.currentUser, 0, false);
   }

   // $FF: synthetic method
   public void lambda$processSelectedOption$75$ChatActivity(AlertDialog[] var1, int var2) {
      if (var1[0] != null) {
         var1[0].setOnCancelListener(new _$$Lambda$ChatActivity$Uw1vUJCasvns_8emcerckL5C6rs(this, var2));
         this.showDialog(var1[0]);
      }
   }

   // $FF: synthetic method
   public void lambda$processSelectedOption$81$ChatActivity(MessageObject var1, DialogInterface var2, int var3) {
      AlertDialog[] var4 = new AlertDialog[]{new AlertDialog(this.getParentActivity(), 3)};
      TLRPC.TL_messages_editMessage var8 = new TLRPC.TL_messages_editMessage();
      TLRPC.TL_messageMediaPoll var5 = (TLRPC.TL_messageMediaPoll)var1.messageOwner.media;
      TLRPC.TL_inputMediaPoll var6 = new TLRPC.TL_inputMediaPoll();
      var6.poll = new TLRPC.TL_poll();
      TLRPC.TL_poll var7 = var6.poll;
      TLRPC.TL_poll var9 = var5.poll;
      var7.id = var9.id;
      var7.question = var9.question;
      var7.answers = var9.answers;
      var7.closed = true;
      var8.media = var6;
      var8.peer = MessagesController.getInstance(super.currentAccount).getInputPeer((int)this.dialog_id);
      var8.id = var1.getId();
      var8.flags |= 16384;
      AndroidUtilities.runOnUIThread(new _$$Lambda$ChatActivity$_8qAipLrdnoxZJxfQHAjuSnx9E8(this, var4, ConnectionsManager.getInstance(super.currentAccount).sendRequest(var8, new _$$Lambda$ChatActivity$frah9ruNSFpF0jFkOpWUpDnm2F0(this, var4, var8))), 500L);
   }

   // $FF: synthetic method
   public void lambda$searchLinks$51$ChatActivity(CharSequence var1, MessagesController var2, boolean var3) {
      if (this.linkSearchRequestId != 0) {
         ConnectionsManager.getInstance(super.currentAccount).cancelRequest(this.linkSearchRequestId, true);
         this.linkSearchRequestId = 0;
      }

      ArrayList var4 = null;

      Object var26;
      label186: {
         Exception var10000;
         label177: {
            Matcher var5;
            boolean var10001;
            try {
               var5 = AndroidUtilities.WEB_URL.matcher(var1);
            } catch (Exception var22) {
               var10000 = var22;
               var10001 = false;
               break label177;
            }

            label176:
            while(true) {
               ArrayList var6;
               while(true) {
                  try {
                     if (var5.find()) {
                        if (var5.start() <= 0 || var1.charAt(var5.start() - 1) != '@') {
                           break;
                        }
                        continue;
                     }
                  } catch (Exception var23) {
                     var10000 = var23;
                     var10001 = false;
                     break label176;
                  }

                  ArrayList var29 = var4;

                  int var8;
                  label152: {
                     URLSpanReplacement[] var7;
                     try {
                        if (!(var1 instanceof Spannable)) {
                           break label152;
                        }

                        var7 = (URLSpanReplacement[])((Spannable)var1).getSpans(0, var1.length(), URLSpanReplacement.class);
                     } catch (Exception var19) {
                        var10000 = var19;
                        var10001 = false;
                        break label176;
                     }

                     var29 = var4;
                     if (var7 != null) {
                        label190: {
                           var29 = var4;

                           try {
                              if (var7.length <= 0) {
                                 break label190;
                              }
                           } catch (Exception var18) {
                              var10000 = var18;
                              var10001 = false;
                              break label176;
                           }

                           var6 = var4;
                           if (var4 == null) {
                              try {
                                 var6 = new ArrayList();
                              } catch (Exception var16) {
                                 var10000 = var16;
                                 var10001 = false;
                                 break label176;
                              }
                           }

                           var8 = 0;

                           while(true) {
                              var29 = var6;

                              try {
                                 if (var8 >= var7.length) {
                                    break;
                                 }

                                 var6.add(var7[var8].getURL());
                              } catch (Exception var17) {
                                 var10000 = var17;
                                 var10001 = false;
                                 break label176;
                              }

                              ++var8;
                           }
                        }
                     }
                  }

                  if (var29 != null) {
                     label192: {
                        try {
                           if (this.foundUrls == null || var29.size() != this.foundUrls.size()) {
                              break label192;
                           }
                        } catch (Exception var15) {
                           var10000 = var15;
                           var10001 = false;
                           break label176;
                        }

                        var8 = 0;
                        boolean var9 = true;

                        while(true) {
                           try {
                              if (var8 >= var29.size()) {
                                 break;
                              }
                           } catch (Exception var13) {
                              var10000 = var13;
                              var10001 = false;
                              break label176;
                           }

                           label116: {
                              try {
                                 if (TextUtils.equals((CharSequence)var29.get(var8), (CharSequence)this.foundUrls.get(var8))) {
                                    break label116;
                                 }
                              } catch (Exception var14) {
                                 var10000 = var14;
                                 var10001 = false;
                                 break label176;
                              }

                              var9 = false;
                           }

                           ++var8;
                        }

                        if (var9) {
                           return;
                        }
                     }
                  }

                  try {
                     this.foundUrls = var29;
                  } catch (Exception var12) {
                     var10000 = var12;
                     var10001 = false;
                     break label176;
                  }

                  if (var29 == null) {
                     try {
                        _$$Lambda$ChatActivity$RCQkMUE1QVqjxKj3x7_MjQod6Bg var25 = new _$$Lambda$ChatActivity$RCQkMUE1QVqjxKj3x7_MjQod6Bg(this);
                        AndroidUtilities.runOnUIThread(var25);
                        return;
                     } catch (Exception var10) {
                        var10000 = var10;
                        var10001 = false;
                     }
                  } else {
                     try {
                        var26 = TextUtils.join(" ", var29);
                        break label186;
                     } catch (Exception var11) {
                        var10000 = var11;
                        var10001 = false;
                     }
                  }
                  break label176;
               }

               var6 = var4;
               if (var4 == null) {
                  try {
                     var6 = new ArrayList();
                  } catch (Exception var21) {
                     var10000 = var21;
                     var10001 = false;
                     break;
                  }
               }

               try {
                  var6.add(var1.subSequence(var5.start(), var5.end()));
               } catch (Exception var20) {
                  var10000 = var20;
                  var10001 = false;
                  break;
               }

               var4 = var6;
            }
         }

         Exception var27 = var10000;
         FileLog.e((Throwable)var27);
         String var28 = var1.toString().toLowerCase();
         if (var1.length() < 13 || !var28.contains("http://") && !var28.contains("https://")) {
            AndroidUtilities.runOnUIThread(new _$$Lambda$ChatActivity$zSv9_0LH1c_c0N6ZFt7zLwlq1pI(this));
            return;
         }

         var26 = var1;
      }

      if (this.currentEncryptedChat != null && var2.secretWebpagePreview == 2) {
         AndroidUtilities.runOnUIThread(new _$$Lambda$ChatActivity$0oRz_aZaJrB93EjYgpwpiFaa_gk(this, var2, var1, var3));
      } else {
         TLRPC.TL_messages_getWebPagePreview var24 = new TLRPC.TL_messages_getWebPagePreview();
         if (var26 instanceof String) {
            var24.message = (String)var26;
         } else {
            var24.message = ((CharSequence)var26).toString();
         }

         this.linkSearchRequestId = ConnectionsManager.getInstance(super.currentAccount).sendRequest(var24, new _$$Lambda$ChatActivity$aHokPFzwbubKvMSUYIVWnAepiGs(this, var24));
         ConnectionsManager.getInstance(super.currentAccount).bindRequestToGuid(this.linkSearchRequestId, super.classGuid);
      }
   }

   // $FF: synthetic method
   public void lambda$shareMyContact$41$ChatActivity(MessageObject var1, DialogInterface var2, int var3) {
      SendMessagesHelper.getInstance(super.currentAccount).sendMessage((TLRPC.User)UserConfig.getInstance(super.currentAccount).getCurrentUser(), this.dialog_id, var1, (TLRPC.ReplyMarkup)null, (HashMap)null);
      this.moveScrollToLastMessage();
      this.hideFieldPanel(false);
   }

   // $FF: synthetic method
   public void lambda$showFieldPanel$52$ChatActivity() {
      ChatActivityEnterView var1 = this.chatActivityEnterView;
      if (var1 != null) {
         var1.openKeyboard();
      }

   }

   // $FF: synthetic method
   public void lambda$showOpenGameAlert$83$ChatActivity(TLRPC.TL_game var1, MessageObject var2, String var3, int var4, DialogInterface var5, int var6) {
      this.showOpenGameAlert(var1, var2, var3, false, var4);
      Editor var7 = MessagesController.getNotificationsSettings(super.currentAccount).edit();
      StringBuilder var8 = new StringBuilder();
      var8.append("askgame_");
      var8.append(var4);
      var7.putBoolean(var8.toString(), false).commit();
   }

   // $FF: synthetic method
   public void lambda$showOpenUrlAlert$84$ChatActivity(String var1, DialogInterface var2, int var3) {
      Activity var5 = this.getParentActivity();
      boolean var4;
      if (this.inlineReturn == 0L) {
         var4 = true;
      } else {
         var4 = false;
      }

      Browser.openUrl(var5, (String)var1, var4);
   }

   // $FF: synthetic method
   public void lambda$showRequestUrlAlert$90$ChatActivity(CheckBoxCell[] var1, String var2, TLRPC.TL_messages_requestUrlAuth var3, TLRPC.TL_urlAuthResultRequest var4, DialogInterface var5, int var6) {
      if (!var1[0].isChecked()) {
         Browser.openUrl(this.getParentActivity(), (String)var2, false);
      } else {
         AlertDialog[] var7 = new AlertDialog[]{new AlertDialog(this.getParentActivity(), 3)};
         TLRPC.TL_messages_acceptUrlAuth var9 = new TLRPC.TL_messages_acceptUrlAuth();
         var9.button_id = var3.button_id;
         var9.msg_id = var3.msg_id;
         var9.peer = var3.peer;
         if (var4.request_write_access) {
            var9.write_allowed = var1[1].isChecked();
         }

         try {
            var7[0].dismiss();
         } catch (Throwable var8) {
         }

         var7[0] = null;
         AndroidUtilities.runOnUIThread(new _$$Lambda$ChatActivity$rHy1nT_QH1RLEZ4vJj3bODjInhQ(this, var7, this.getConnectionsManager().sendRequest(var9, new _$$Lambda$ChatActivity$ilk1G7oNY7NesFkLXCjlacEAUV0(this, var2))), 500L);
      }

   }

   // $FF: synthetic method
   public void lambda$startEditingMessageObject$67$ChatActivity(TLObject var1, TLRPC.TL_error var2) {
      AndroidUtilities.runOnUIThread(new _$$Lambda$ChatActivity$TB0a5O9Ce97nEXo_2OxegsCrqTA(this, var1));
   }

   // $FF: synthetic method
   public void lambda$startMessageUnselect$53$ChatActivity() {
      this.highlightMessageId = Integer.MAX_VALUE;
      this.updateVisibleRows();
      this.unselectRunnable = null;
   }

   // $FF: synthetic method
   public void lambda$updateBottomOverlay$59$ChatActivity() {
      this.chatActivityEnterView.openKeyboard();
   }

   public boolean maybePlayVisibleVideo() {
      if (this.chatListView == null) {
         return false;
      } else {
         MessageObject var1 = MediaController.getInstance().getPlayingMessageObject();
         if (var1 != null && !var1.isVideo()) {
            return false;
         } else {
            HintView var13 = this.noSoundHintView;
            Object var2 = null;
            AnimatedFileDrawable var5;
            boolean var6;
            Object var14;
            if (var13 != null && var13.getTag() != null) {
               ChatMessageCell var3 = this.noSoundHintView.getMessageCell();
               ImageReceiver var4 = var3.getPhotoImage();
               var5 = var4.getAnimation();
               if (var5 != null) {
                  var14 = var3.getMessageObject();
                  if (var3.getTop() + var4.getImageY2() > this.chatListView.getMeasuredHeight()) {
                     var6 = true;
                  } else {
                     var6 = false;
                  }

                  this.scrollToVideo = var6;
               } else {
                  var14 = null;
               }
            } else {
               var5 = null;
               var14 = var5;
            }

            AnimatedFileDrawable var15 = var5;
            Object var17 = var14;
            if (var14 == null) {
               int var7 = this.chatListView.getChildCount();
               int var8 = 0;

               while(true) {
                  var15 = var5;
                  var17 = var14;
                  if (var8 >= var7) {
                     break;
                  }

                  View var9 = this.chatListView.getChildAt(var8);
                  Object var22;
                  AnimatedFileDrawable var23;
                  if (!(var9 instanceof ChatMessageCell)) {
                     var23 = var5;
                     var22 = var14;
                  } else {
                     ChatMessageCell var19 = (ChatMessageCell)var9;
                     MessageObject var16 = var19.getMessageObject();
                     var6 = var16.isRoundVideo();
                     if (!var16.isVideo() && !var6) {
                        var23 = var5;
                        var22 = var14;
                     } else {
                        ImageReceiver var10 = var19.getPhotoImage();
                        AnimatedFileDrawable var20 = var10.getAnimation();
                        if (var20 == null) {
                           var23 = var5;
                           var22 = var14;
                        } else {
                           int var11 = var9.getTop() + var10.getImageY();
                           int var12 = var10.getImageHeight() + var11;
                           var23 = var5;
                           var22 = var14;
                           if (var12 >= 0) {
                              if (var11 > this.chatListView.getMeasuredHeight()) {
                                 var23 = var5;
                                 var22 = var14;
                              } else {
                                 if (var14 != null && var11 < 0) {
                                    var15 = var5;
                                    var17 = var14;
                                    break;
                                 }

                                 if (var11 >= 0 && var12 <= this.chatListView.getMeasuredHeight()) {
                                    var6 = false;
                                 } else {
                                    var6 = true;
                                 }

                                 this.scrollToVideo = var6;
                                 if (var11 >= 0 && var12 <= this.chatListView.getMeasuredHeight()) {
                                    var15 = var20;
                                    var17 = var16;
                                    break;
                                 }

                                 var22 = var16;
                                 var23 = var20;
                              }
                           }
                        }
                     }
                  }

                  ++var8;
                  var5 = var23;
                  var14 = var22;
               }
            }

            if (var17 != null) {
               if (MediaController.getInstance().isPlayingMessage((MessageObject)var17)) {
                  return false;
               } else {
                  var13 = this.noSoundHintView;
                  if (var13 != null) {
                     var13.hide();
                  }

                  var13 = this.forwardHintView;
                  if (var13 != null) {
                     var13.hide();
                  }

                  if (((MessageObject)var17).isRoundVideo()) {
                     var6 = MediaController.getInstance().playMessage((MessageObject)var17);
                     MediaController var21 = MediaController.getInstance();
                     ArrayList var18 = (ArrayList)var2;
                     if (var6) {
                        var18 = this.createVoiceMessagesPlaylist((MessageObject)var17, false);
                     }

                     var21.setVoiceMessagesPlaylist(var18, false);
                     return var6;
                  } else {
                     SharedConfig.setNoSoundHintShowed(true);
                     ((MessageObject)var17).audioProgress = var15.getCurrentProgress();
                     ((MessageObject)var17).audioProgressMs = var15.getCurrentProgressMs();
                     var15.stop();
                     if (PhotoViewer.isPlayingMessageInPip((MessageObject)var17)) {
                        PhotoViewer.getPipInstance().destroyPhotoViewer();
                     }

                     return MediaController.getInstance().playMessage((MessageObject)var17);
                  }
               }
            } else {
               return false;
            }
         }
      }
   }

   public boolean needDelayOpenAnimation() {
      return this.firstLoading;
   }

   public void onActivityResultFragment(int var1, int var2, Intent var3) {
      if (var2 == -1) {
         if (var1 != 0 && var1 != 2) {
            if (var1 == 1) {
               if (var3 == null || var3.getData() == null) {
                  this.showAttachmentError();
                  return;
               }

               Uri var7 = var3.getData();
               if (var7.toString().contains("video")) {
                  String var8;
                  try {
                     var8 = AndroidUtilities.getPath(var7);
                  } catch (Exception var5) {
                     FileLog.e((Throwable)var5);
                     var8 = null;
                  }

                  if (var8 == null) {
                     this.showAttachmentError();
                  }

                  if (this.paused) {
                     this.startVideoEdit = var8;
                  } else {
                     this.openVideoEditor(var8, (String)null);
                  }
               } else {
                  this.fillEditingMediaWithCaption((CharSequence)null, (ArrayList)null);
                  SendMessagesHelper.prepareSendingPhoto((String)null, var7, this.dialog_id, this.replyingMessageObject, (CharSequence)null, (ArrayList)null, (ArrayList)null, (InputContentInfoCompat)null, 0, this.editingMessageObject);
               }

               this.hideFieldPanel(false);
               DataQuery.getInstance(super.currentAccount).cleanDraft(this.dialog_id, true);
            } else if (var1 == 21) {
               if (var3 == null) {
                  this.showAttachmentError();
                  return;
               }

               if (var3.getData() != null) {
                  this.sendUriAsDocument(var3.getData());
               } else if (var3.getClipData() != null) {
                  ClipData var6 = var3.getClipData();

                  for(var1 = 0; var1 < var6.getItemCount(); ++var1) {
                     this.sendUriAsDocument(var6.getItemAt(var1).getUri());
                  }
               } else {
                  this.showAttachmentError();
               }

               this.hideFieldPanel(false);
               DataQuery.getInstance(super.currentAccount).cleanDraft(this.dialog_id, true);
            }
         } else {
            this.createChatAttachView();
            ChatAttachAlert var4 = this.chatAttachAlert;
            if (var4 != null) {
               var4.onActivityResultFragment(var1, var3, this.currentPicturePath);
            }

            this.currentPicturePath = null;
         }
      }

   }

   public boolean onBackPressed() {
      ActionBarPopupWindow var1 = this.scrimPopupWindow;
      if (var1 != null) {
         var1.dismiss();
         return false;
      } else if (this.checkRecordLocked()) {
         return false;
      } else {
         ActionBar var3 = super.actionBar;
         if (var3 != null && var3.isActionModeShowed()) {
            for(int var2 = 1; var2 >= 0; --var2) {
               this.selectedMessagesIds[var2].clear();
               this.selectedMessagesCanCopyIds[var2].clear();
               this.selectedMessagesCanStarIds[var2].clear();
            }

            this.hideActionMode();
            this.updatePinnedMessageView(true);
            this.updateVisibleRows();
            return false;
         } else {
            ChatActivityEnterView var4 = this.chatActivityEnterView;
            if (var4 != null && var4.isPopupShowing()) {
               this.chatActivityEnterView.hidePopup(true);
               return false;
            } else {
               return true;
            }
         }
      }
   }

   protected void onBecomeFullyHidden() {
      UndoView var1 = this.undoView;
      if (var1 != null) {
         var1.hide(true, 0);
      }

   }

   public void onConfigurationChanged(Configuration var1) {
      this.fixLayout();
      Dialog var2 = super.visibleDialog;
      if (var2 instanceof DatePickerDialog) {
         var2.dismiss();
      }

      ActionBarPopupWindow var10 = this.scrimPopupWindow;
      if (var10 != null) {
         var10.dismiss();
      }

      if (!AndroidUtilities.isTablet()) {
         if (var1.orientation == 2) {
            if (PhotoViewer.hasInstance() && PhotoViewer.getInstance().isVisible()) {
               return;
            }

            MessageObject var11 = MediaController.getInstance().getPlayingMessageObject();
            if (var11 != null && var11.isVideo()) {
               PhotoViewer.getInstance().setParentActivity(this.getParentActivity());
               FileLoader.getInstance(super.currentAccount).setLoadingVideoForPlayer(var11.getDocument(), false);
               MediaController.getInstance().cleanupPlayer(true, true, false, true);
               PhotoViewer var8 = PhotoViewer.getInstance();
               int var3 = var11.type;
               long var4 = 0L;
               long var6;
               if (var3 != 0) {
                  var6 = this.dialog_id;
               } else {
                  var6 = 0L;
               }

               if (var11.type != 0) {
                  var4 = this.mergeDialogId;
               }

               if (var8.openPhoto(var11, var6, var4, this.photoViewerProvider, false)) {
                  PhotoViewer.getInstance().setParentChatActivity(this);
               }

               HintView var9 = this.noSoundHintView;
               if (var9 != null) {
                  var9.hide();
               }

               var9 = this.forwardHintView;
               if (var9 != null) {
                  var9.hide();
               }

               MediaController.getInstance().resetGoingToShowMessageObject();
            }
         } else if (PhotoViewer.hasInstance() && PhotoViewer.getInstance().isOpenedFullScreenVideo()) {
            PhotoViewer.getInstance().injectVideoPlayerToMediaController();
            PhotoViewer.getInstance().closePhoto(false, true);
         }
      }

   }

   protected void onDialogDismiss(Dialog var1) {
      Dialog var2 = this.closeChatDialog;
      if (var2 != null && var1 == var2) {
         MessagesController.getInstance(super.currentAccount).deleteDialog(this.dialog_id, 0);
         ActionBarLayout var3 = super.parentLayout;
         if (var3 != null && !var3.fragmentsStack.isEmpty()) {
            ArrayList var4 = super.parentLayout.fragmentsStack;
            if (var4.get(var4.size() - 1) != this) {
               var4 = super.parentLayout.fragmentsStack;
               BaseFragment var5 = (BaseFragment)var4.get(var4.size() - 1);
               this.removeSelfFromStack();
               var5.finishFragment();
               return;
            }
         }

         this.finishFragment();
      }

   }

   public boolean onFragmentCreate() {
      int var1 = super.arguments.getInt("chat_id", 0);
      int var2 = super.arguments.getInt("user_id", 0);
      int var3 = super.arguments.getInt("enc_id", 0);
      this.inlineReturn = super.arguments.getLong("inline_return", 0L);
      String var4 = super.arguments.getString("inline_query");
      this.startLoadFromMessageId = super.arguments.getInt("message_id", 0);
      int var5 = super.arguments.getInt("migrated_to", 0);
      this.scrollToTopOnResume = super.arguments.getBoolean("scrollToTopOnResume", false);
      CountDownLatch var17;
      if (var1 != 0) {
         this.currentChat = MessagesController.getInstance(super.currentAccount).getChat(var1);
         if (this.currentChat == null) {
            var17 = new CountDownLatch(1);
            MessagesStorage var6 = MessagesStorage.getInstance(super.currentAccount);
            var6.getStorageQueue().postRunnable(new _$$Lambda$ChatActivity$diV3z76REAMmAeIIp51DTLTaiSg(this, var6, var1, var17));

            try {
               var17.await();
            } catch (Exception var16) {
               FileLog.e((Throwable)var16);
            }

            if (this.currentChat == null) {
               return false;
            }

            MessagesController.getInstance(super.currentAccount).putChat(this.currentChat, true);
         }

         if (var1 > 0) {
            this.dialog_id = (long)(-var1);
         } else {
            this.isBroadcast = true;
            this.dialog_id = AndroidUtilities.makeBroadcastId(var1);
         }

         if (ChatObject.isChannel(this.currentChat)) {
            MessagesController.getInstance(super.currentAccount).startShortPoll(this.currentChat, false);
         }
      } else {
         CountDownLatch var23;
         if (var2 != 0) {
            this.currentUser = MessagesController.getInstance(super.currentAccount).getUser(var2);
            if (this.currentUser == null) {
               MessagesStorage var7 = MessagesStorage.getInstance(super.currentAccount);
               var23 = new CountDownLatch(1);
               var7.getStorageQueue().postRunnable(new _$$Lambda$ChatActivity$rqBjWQeWrMiTLhewd_W0HAwxKps(this, var7, var2, var23));

               try {
                  var23.await();
               } catch (Exception var15) {
                  FileLog.e((Throwable)var15);
               }

               if (this.currentUser == null) {
                  return false;
               }

               MessagesController.getInstance(super.currentAccount).putUser(this.currentUser, true);
            }

            this.dialog_id = (long)var2;
            this.botUser = super.arguments.getString("botUser");
            if (var4 != null) {
               MessagesController.getInstance(super.currentAccount).sendBotStart(this.currentUser, var4);
            }
         } else {
            if (var3 == 0) {
               return false;
            }

            this.currentEncryptedChat = MessagesController.getInstance(super.currentAccount).getEncryptedChat(var3);
            MessagesStorage var18 = MessagesStorage.getInstance(super.currentAccount);
            if (this.currentEncryptedChat == null) {
               var23 = new CountDownLatch(1);
               var18.getStorageQueue().postRunnable(new _$$Lambda$ChatActivity$8qYn5CerE3_o6oJqpu7NjPs2smE(this, var18, var3, var23));

               try {
                  var23.await();
               } catch (Exception var14) {
                  FileLog.e((Throwable)var14);
               }

               if (this.currentEncryptedChat == null) {
                  return false;
               }

               MessagesController.getInstance(super.currentAccount).putEncryptedChat(this.currentEncryptedChat, true);
            }

            this.currentUser = MessagesController.getInstance(super.currentAccount).getUser(this.currentEncryptedChat.user_id);
            if (this.currentUser == null) {
               var23 = new CountDownLatch(1);
               var18.getStorageQueue().postRunnable(new _$$Lambda$ChatActivity$zbo6FUWEskAD8BCSLY3b_JqK_JY(this, var18, var23));

               try {
                  var23.await();
               } catch (Exception var13) {
                  FileLog.e((Throwable)var13);
               }

               if (this.currentUser == null) {
                  return false;
               }

               MessagesController.getInstance(super.currentAccount).putUser(this.currentUser, true);
            }

            this.dialog_id = (long)var3 << 32;
            int[] var19 = this.maxMessageId;
            var19[1] = Integer.MIN_VALUE;
            var19[0] = Integer.MIN_VALUE;
            var19 = this.minMessageId;
            var19[1] = Integer.MAX_VALUE;
            var19[0] = Integer.MAX_VALUE;
         }
      }

      if (this.currentUser != null) {
         MediaController.getInstance().startMediaObserver();
      }

      NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.messagesDidLoad);
      NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.emojiDidLoad);
      NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.didUpdateConnectionState);
      NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.updateInterfaces);
      NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.didReceiveNewMessages);
      NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.closeChats);
      NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.messagesRead);
      NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.messagesDeleted);
      NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.historyCleared);
      NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.messageReceivedByServer);
      NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.messageReceivedByAck);
      NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.messageSendError);
      NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.chatInfoDidLoad);
      NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.contactsDidLoad);
      NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.encryptedChatUpdated);
      NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.messagesReadEncrypted);
      NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.removeAllMessagesFromDialog);
      NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.messagePlayingProgressDidChanged);
      NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.messagePlayingDidReset);
      NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.messagePlayingGoingToStop);
      NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.messagePlayingPlayStateChanged);
      NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.screenshotTook);
      NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.blockedUsersDidLoad);
      NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.fileNewChunkAvailable);
      NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.didCreatedNewDeleteTask);
      NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.messagePlayingDidStart);
      NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.updateMessageMedia);
      NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.replaceMessagesObjects);
      NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.notificationsSettingsUpdated);
      NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.replyMessagesDidLoad);
      NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.didReceivedWebpages);
      NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.didReceivedWebpagesInUpdates);
      NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.messagesReadContent);
      NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.botInfoDidLoad);
      NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.botKeyboardDidLoad);
      NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.chatSearchResultsAvailable);
      NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.chatSearchResultsLoading);
      NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.didUpdatedMessagesViews);
      NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.chatInfoCantLoad);
      NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.pinnedMessageDidLoad);
      NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.peerSettingsDidLoad);
      NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.newDraftReceived);
      NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.userInfoDidLoad);
      NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.didSetNewWallpapper);
      NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.channelRightsUpdated);
      NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.updateMentionsCount);
      NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.audioRecordTooShort);
      NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.didUpdatePollResults);
      NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.chatOnlineCountDidLoad);
      NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.videoLoadingStateChanged);
      super.onFragmentCreate();
      if (this.currentEncryptedChat == null && !this.isBroadcast) {
         DataQuery.getInstance(super.currentAccount).loadBotKeyboard(this.dialog_id);
      }

      this.loading = true;
      MessagesController.getInstance(super.currentAccount).loadPeerSettings(this.currentUser, this.currentChat);
      MessagesController.getInstance(super.currentAccount).setLastCreatedDialogId(this.dialog_id, true);
      if (this.startLoadFromMessageId == 0) {
         SharedPreferences var21 = MessagesController.getNotificationsSettings(super.currentAccount);
         StringBuilder var24 = new StringBuilder();
         var24.append("diditem");
         var24.append(this.dialog_id);
         var1 = var21.getInt(var24.toString(), 0);
         if (var1 != 0) {
            this.wasManualScroll = true;
            this.loadingFromOldPosition = true;
            var24 = new StringBuilder();
            var24.append("diditemo");
            var24.append(this.dialog_id);
            this.startLoadFromMessageOffset = var21.getInt(var24.toString(), 0);
            this.startLoadFromMessageId = var1;
         }
      } else {
         this.needSelectFromMessageId = true;
      }

      long var8;
      boolean var11;
      byte var20;
      MessagesController var22;
      if (this.startLoadFromMessageId != 0) {
         this.waitingForLoad.add(this.lastLoadIndex);
         int var10;
         if (var5 != 0) {
            this.mergeDialogId = (long)var5;
            var22 = MessagesController.getInstance(super.currentAccount);
            var8 = this.mergeDialogId;
            if (this.loadingFromOldPosition) {
               var20 = 50;
            } else if (AndroidUtilities.isTablet()) {
               var20 = 30;
            } else {
               var20 = 20;
            }

            var1 = this.startLoadFromMessageId;
            var10 = super.classGuid;
            var11 = ChatObject.isChannel(this.currentChat);
            var3 = this.lastLoadIndex++;
            var22.loadMessages(var8, var20, var1, 0, true, 0, var10, 3, 0, var11, var3);
         } else {
            var22 = MessagesController.getInstance(super.currentAccount);
            var8 = this.dialog_id;
            if (this.loadingFromOldPosition) {
               var20 = 50;
            } else if (AndroidUtilities.isTablet()) {
               var20 = 30;
            } else {
               var20 = 20;
            }

            var10 = this.startLoadFromMessageId;
            var3 = super.classGuid;
            var11 = ChatObject.isChannel(this.currentChat);
            var1 = this.lastLoadIndex++;
            var22.loadMessages(var8, var20, var10, 0, true, 0, var3, 3, 0, var11, var1);
         }
      } else {
         this.waitingForLoad.add(this.lastLoadIndex);
         var22 = MessagesController.getInstance(super.currentAccount);
         var8 = this.dialog_id;
         if (AndroidUtilities.isTablet()) {
            var20 = 30;
         } else {
            var20 = 20;
         }

         var1 = super.classGuid;
         var11 = ChatObject.isChannel(this.currentChat);
         var3 = this.lastLoadIndex++;
         var22.loadMessages(var8, var20, 0, 0, true, 0, var1, 2, 0, var11, var3);
      }

      if (this.currentChat != null) {
         if (this.isBroadcast) {
            var17 = new CountDownLatch(1);
         } else {
            var17 = null;
         }

         MessagesController.getInstance(super.currentAccount).loadChatInfo(this.currentChat.id, var17, true);
         this.chatInfo = this.getMessagesController().getChatFull(this.currentChat.id);
         if (this.isBroadcast && var17 != null) {
            try {
               var17.await();
            } catch (Exception var12) {
               FileLog.e((Throwable)var12);
            }
         }
      } else if (this.currentUser != null) {
         MessagesController.getInstance(super.currentAccount).loadUserInfo(this.currentUser, true, super.classGuid);
      }

      if (var2 != 0 && this.currentUser.bot) {
         DataQuery.getInstance(super.currentAccount).loadBotInfo(var2, true, super.classGuid);
      } else if (this.chatInfo instanceof TLRPC.TL_chatFull) {
         for(var5 = 0; var5 < this.chatInfo.participants.participants.size(); ++var5) {
            TLRPC.ChatParticipant var25 = (TLRPC.ChatParticipant)this.chatInfo.participants.participants.get(var5);
            TLRPC.User var26 = MessagesController.getInstance(super.currentAccount).getUser(var25.user_id);
            if (var26 != null && var26.bot) {
               DataQuery.getInstance(super.currentAccount).loadBotInfo(var26.id, true, super.classGuid);
            }
         }
      }

      if (this.currentUser != null) {
         if (MessagesController.getInstance(super.currentAccount).blockedUsers.indexOfKey(this.currentUser.id) >= 0) {
            var11 = true;
         } else {
            var11 = false;
         }

         this.userBlocked = var11;
      }

      if (AndroidUtilities.isTablet()) {
         NotificationCenter.getInstance(super.currentAccount).postNotificationName(NotificationCenter.openedChatChanged, this.dialog_id, false);
      }

      TLRPC.EncryptedChat var27 = this.currentEncryptedChat;
      if (var27 != null && AndroidUtilities.getMyLayerVersion(var27.layer) != 73) {
         SecretChatHelper.getInstance(super.currentAccount).sendNotifyLayerMessage(this.currentEncryptedChat, (TLRPC.Message)null);
      }

      return true;
   }

   public void onFragmentDestroy() {
      super.onFragmentDestroy();
      ChatActivityEnterView var1 = this.chatActivityEnterView;
      if (var1 != null) {
         var1.onDestroy();
      }

      MentionsAdapter var3 = this.mentionsAdapter;
      if (var3 != null) {
         var3.onDestroy();
      }

      ChatAttachAlert var4 = this.chatAttachAlert;
      if (var4 != null) {
         var4.dismissInternal();
      }

      UndoView var5 = this.undoView;
      if (var5 != null) {
         var5.hide(true, 0);
      }

      MessagesController.getInstance(super.currentAccount).setLastCreatedDialogId(this.dialog_id, false);
      NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.messagesDidLoad);
      NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.emojiDidLoad);
      NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.didUpdateConnectionState);
      NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.updateInterfaces);
      NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.didReceiveNewMessages);
      NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.closeChats);
      NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.messagesRead);
      NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.messagesDeleted);
      NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.historyCleared);
      NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.messageReceivedByServer);
      NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.messageReceivedByAck);
      NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.messageSendError);
      NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.chatInfoDidLoad);
      NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.encryptedChatUpdated);
      NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.messagesReadEncrypted);
      NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.removeAllMessagesFromDialog);
      NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.contactsDidLoad);
      NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.messagePlayingProgressDidChanged);
      NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.messagePlayingDidReset);
      NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.screenshotTook);
      NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.blockedUsersDidLoad);
      NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.fileNewChunkAvailable);
      NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.didCreatedNewDeleteTask);
      NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.messagePlayingDidStart);
      NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.messagePlayingGoingToStop);
      NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.updateMessageMedia);
      NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.replaceMessagesObjects);
      NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.notificationsSettingsUpdated);
      NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.replyMessagesDidLoad);
      NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.didReceivedWebpages);
      NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.didReceivedWebpagesInUpdates);
      NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.messagesReadContent);
      NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.botInfoDidLoad);
      NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.botKeyboardDidLoad);
      NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.chatSearchResultsAvailable);
      NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.chatSearchResultsLoading);
      NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.messagePlayingPlayStateChanged);
      NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.didUpdatedMessagesViews);
      NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.chatInfoCantLoad);
      NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.pinnedMessageDidLoad);
      NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.peerSettingsDidLoad);
      NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.newDraftReceived);
      NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.userInfoDidLoad);
      NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.didSetNewWallpapper);
      NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.channelRightsUpdated);
      NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.updateMentionsCount);
      NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.audioRecordTooShort);
      NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.didUpdatePollResults);
      NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.chatOnlineCountDidLoad);
      NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.videoLoadingStateChanged);
      if (AndroidUtilities.isTablet()) {
         NotificationCenter.getInstance(super.currentAccount).postNotificationName(NotificationCenter.openedChatChanged, this.dialog_id, true);
      }

      if (this.currentUser != null) {
         MediaController.getInstance().stopMediaObserver();
      }

      if (this.currentEncryptedChat != null) {
         try {
            if (VERSION.SDK_INT >= 23 && (SharedConfig.passcodeHash.length() == 0 || SharedConfig.allowScreenCapture)) {
               MediaController.getInstance().setFlagSecure(this, false);
            }
         } catch (Throwable var2) {
            FileLog.e(var2);
         }
      }

      if (this.currentUser != null) {
         MessagesController.getInstance(super.currentAccount).cancelLoadFullUser(this.currentUser.id);
      }

      AndroidUtilities.removeAdjustResize(this.getParentActivity(), super.classGuid);
      StickersAdapter var6 = this.stickersAdapter;
      if (var6 != null) {
         var6.onDestroy();
      }

      var4 = this.chatAttachAlert;
      if (var4 != null) {
         var4.onDestroy();
      }

      AndroidUtilities.unlockOrientation(this.getParentActivity());
      if (ChatObject.isChannel(this.currentChat)) {
         MessagesController.getInstance(super.currentAccount).startShortPoll(this.currentChat, true);
      }

   }

   public void onPause() {
      super.onPause();
      ActionBarPopupWindow var1 = this.scrimPopupWindow;
      if (var1 != null) {
         var1.dismiss();
      }

      MessagesController.getInstance(super.currentAccount).markDialogAsReadNow(this.dialog_id);
      MediaController.getInstance().stopRaiseToEarSensors(this, true);
      this.paused = true;
      this.wasPaused = true;
      NotificationsController.getInstance(super.currentAccount).setOpenedDialogId(0L);
      MessagesController.getInstance(super.currentAccount).setLastVisibleDialogId(this.dialog_id, false);
      boolean var2 = this.ignoreAttachOnPause;
      View var3 = null;
      MessageObject var4;
      Object var14;
      if (!var2 && this.chatActivityEnterView != null && this.bottomOverlayChat.getVisibility() != 0) {
         this.chatActivityEnterView.onPause();
         var4 = this.replyingMessageObject;
         if (!this.chatActivityEnterView.isEditingMessage()) {
            var14 = AndroidUtilities.getTrimmedString(this.chatActivityEnterView.getFieldText());
         } else {
            var14 = null;
         }

         var2 = this.chatActivityEnterView.isMessageWebPageSearchEnabled();
         this.chatActivityEnterView.setFieldFocused(false);
      } else {
         var4 = null;
         var14 = var4;
         var2 = true;
      }

      ChatAttachAlert var5 = this.chatAttachAlert;
      if (var5 != null) {
         if (!this.ignoreAttachOnPause) {
            var5.onPause();
         } else {
            this.ignoreAttachOnPause = false;
         }
      }

      SizeNotifierFrameLayout var21 = this.contentView;
      if (var21 != null) {
         var21.onPause();
      }

      CharSequence[] var6 = new CharSequence[]{(CharSequence)var14};
      ArrayList var22 = DataQuery.getInstance(super.currentAccount).getEntities(var6);
      DataQuery var7 = DataQuery.getInstance(super.currentAccount);
      long var8 = this.dialog_id;
      CharSequence var23 = var6[0];
      TLRPC.Message var15 = var3;
      if (var4 != null) {
         var15 = var4.messageOwner;
      }

      if (!var2) {
         var2 = true;
      } else {
         var2 = false;
      }

      var7.saveDraft(var8, var23, var22, var15, var2);
      MessagesController.getInstance(super.currentAccount).cancelTyping(0, this.dialog_id);
      if (!this.pausedOnLastMessage) {
         int var10;
         int var13;
         Editor var19;
         StringBuilder var20;
         label155: {
            var19 = MessagesController.getNotificationsSettings(super.currentAccount).edit();
            GridLayoutManagerFixed var16 = this.chatLayoutManager;
            if (var16 != null) {
               var10 = var16.findFirstVisibleItemPosition();
               if (var10 != 0) {
                  RecyclerListView.Holder var18 = (RecyclerListView.Holder)this.chatListView.findViewHolderForAdapterPosition(var10);
                  if (var18 != null) {
                     var3 = var18.itemView;
                     int var11;
                     if (var3 instanceof ChatMessageCell) {
                        var11 = ((ChatMessageCell)var3).getMessageObject().getId();
                     } else if (var3 instanceof ChatActionCell) {
                        var11 = ((ChatActionCell)var3).getMessageObject().getId();
                     } else {
                        var11 = 0;
                     }

                     if (var11 == 0) {
                        var18 = (RecyclerListView.Holder)this.chatListView.findViewHolderForAdapterPosition(var10 + 1);
                     }

                     var11 = var10 - 1;

                     boolean var25;
                     while(true) {
                        label123: {
                           if (var11 >= this.chatAdapter.messagesStartRow) {
                              var10 = var11 - this.chatAdapter.messagesStartRow;
                              if (var10 < 0 || var10 >= this.messages.size()) {
                                 break label123;
                              }

                              MessageObject var17 = (MessageObject)this.messages.get(var10);
                              if (var17.getId() == 0) {
                                 break label123;
                              }

                              if (!var17.isOut() && var17.isUnread()) {
                                 var25 = true;
                                 break;
                              }
                           }

                           var25 = false;
                           break;
                        }

                        --var11;
                     }

                     if (var18 != null && !var25) {
                        var3 = var18.itemView;
                        if (var3 instanceof ChatMessageCell) {
                           var11 = ((ChatMessageCell)var3).getMessageObject().getId();
                        } else if (var3 instanceof ChatActionCell) {
                           var11 = ((ChatActionCell)var3).getMessageObject().getId();
                        } else {
                           var11 = 0;
                        }

                        if (var11 > 0 && this.currentEncryptedChat == null || var11 < 0 && this.currentEncryptedChat != null) {
                           int var12 = var18.itemView.getBottom() - this.chatListView.getMeasuredHeight();
                           var13 = var11;
                           var10 = var12;
                           if (BuildVars.LOGS_ENABLED) {
                              var20 = new StringBuilder();
                              var20.append("save offset = ");
                              var20.append(var12);
                              var20.append(" for mid ");
                              var20.append(var11);
                              FileLog.d(var20.toString());
                              var13 = var11;
                              var10 = var12;
                           }
                           break label155;
                        }
                     }
                  }
               }
            }

            var13 = 0;
            var10 = 0;
         }

         if (var13 != 0) {
            var20 = new StringBuilder();
            var20.append("diditem");
            var20.append(this.dialog_id);
            var19.putInt(var20.toString(), var13);
            var20 = new StringBuilder();
            var20.append("diditemo");
            var20.append(this.dialog_id);
            var19.putInt(var20.toString(), var10);
         } else {
            this.pausedOnLastMessage = true;
            var20 = new StringBuilder();
            var20.append("diditem");
            var20.append(this.dialog_id);
            var19.remove(var20.toString());
            var20 = new StringBuilder();
            var20.append("diditemo");
            var20.append(this.dialog_id);
            var19.remove(var20.toString());
         }

         var19.commit();
      }

      if (this.currentUser != null) {
         this.chatLeaveTime = System.currentTimeMillis();
         this.updateInformationForScreenshotDetector();
      }

      UndoView var24 = this.undoView;
      if (var24 != null) {
         var24.hide(true, 0);
      }

   }

   protected void onRemoveFromParent() {
      MessageObject var1 = MediaController.getInstance().getPlayingMessageObject();
      if (var1 != null && var1.isVideo()) {
         MediaController.getInstance().cleanupPlayer(true, true);
      } else {
         MediaController.getInstance().setTextureView(this.videoTextureView, (AspectRatioFrameLayout)null, (FrameLayout)null, false);
      }

   }

   public void onRequestPermissionsResultFragment(int var1, String[] var2, int[] var3) {
      ChatActivityEnterView var4 = this.chatActivityEnterView;
      if (var4 != null) {
         var4.onRequestPermissionsResultFragment(var1, var2, var3);
      }

      MentionsAdapter var10 = this.mentionsAdapter;
      if (var10 != null) {
         var10.onRequestPermissionsResultFragment(var1, var2, var3);
      }

      boolean var5 = false;
      if (var1 == 17) {
         ChatAttachAlert var7 = this.chatAttachAlert;
         if (var7 != null) {
            boolean var6 = var5;
            if (var3.length > 0) {
               var6 = var5;
               if (var3[0] == 0) {
                  var6 = true;
               }
            }

            var7.checkCamera(var6);
            return;
         }
      }

      if (var1 == 21) {
         if (this.getParentActivity() == null) {
            return;
         }

         if (var3 != null && var3.length != 0 && var3[0] != 0) {
            AlertDialog.Builder var8 = new AlertDialog.Builder(this.getParentActivity());
            var8.setTitle(LocaleController.getString("AppName", 2131558635));
            var8.setMessage(LocaleController.getString("PermissionNoAudioVideo", 2131560415));
            var8.setNegativeButton(LocaleController.getString("PermissionOpenSettings", 2131560419), new _$$Lambda$ChatActivity$hJy6ruYBSg7XdCQj8r9RXHEznxM(this));
            var8.setPositiveButton(LocaleController.getString("OK", 2131560097), (OnClickListener)null);
            var8.show();
         }
      } else if (var1 == 19 && var3 != null && var3.length > 0 && var3[0] == 0) {
         this.processSelectedAttach(0);
      } else if (var1 == 20 && var3 != null && var3.length > 0 && var3[0] == 0) {
         this.processSelectedAttach(2);
      } else if (var1 == 101) {
         TLRPC.User var9 = this.currentUser;
         if (var9 != null) {
            if (var3.length > 0 && var3[0] == 0) {
               VoIPHelper.startCall(var9, this.getParentActivity(), MessagesController.getInstance(super.currentAccount).getUserFull(this.currentUser.id));
            } else {
               VoIPHelper.permissionDenied(this.getParentActivity(), (Runnable)null);
            }
         }
      }

   }

   public void onResume() {
      super.onResume();
      AndroidUtilities.requestAdjustResize(this.getParentActivity(), super.classGuid);
      MediaController.getInstance().startRaiseToEarSensors(this);
      this.checkRaiseSensors();
      ChatAttachAlert var1 = this.chatAttachAlert;
      if (var1 != null) {
         var1.onResume();
      }

      SizeNotifierFrameLayout var5 = this.contentView;
      if (var5 != null) {
         var5.onResume();
      }

      if (this.firstOpen && MessagesController.getInstance(super.currentAccount).isProxyDialog(this.dialog_id, true)) {
         SharedPreferences var6 = MessagesController.getGlobalNotificationsSettings();
         if (var6.getLong("proxychannel", 0L) != this.dialog_id) {
            var6.edit().putLong("proxychannel", this.dialog_id).commit();
            AlertDialog.Builder var7 = new AlertDialog.Builder(this.getParentActivity());
            var7.setTitle(LocaleController.getString("AppName", 2131558635));
            var7.setMessage(LocaleController.getString("UseProxySponsorInfo", 2131560981));
            var7.setPositiveButton(LocaleController.getString("OK", 2131560097), (OnClickListener)null);
            this.showDialog(var7.create());
         }
      }

      this.checkActionBarMenu();
      TLRPC.PhotoSize var2 = this.replyImageLocation;
      BackupImageView var8;
      if (var2 != null) {
         var8 = this.replyImageView;
         if (var8 != null) {
            var8.setImage(ImageLocation.getForObject(var2, this.replyImageLocationObject), "50_50", ImageLocation.getForObject(this.replyImageThumbLocation, this.replyImageLocationObject), "50_50_b", (String)null, this.replyImageSize, this.replyImageCacheType, this.replyingMessageObject);
         }
      }

      var2 = this.pinnedImageLocation;
      if (var2 != null) {
         var8 = this.pinnedMessageImageView;
         if (var8 != null) {
            var8.setImage(ImageLocation.getForObject(var2, this.pinnedImageLocationObject), "50_50", ImageLocation.getForObject(this.pinnedImageThumbLocation, this.pinnedImageLocationObject), "50_50_b", (String)null, this.pinnedImageSize, this.pinnedImageCacheType, this.pinnedMessageObject);
         }
      }

      NotificationsController.getInstance(super.currentAccount).setOpenedDialogId(this.dialog_id);
      MessagesController.getInstance(super.currentAccount).setLastVisibleDialogId(this.dialog_id, true);
      if (this.scrollToTopOnResume) {
         label86: {
            if (this.scrollToTopUnReadOnResume) {
               MessageObject var9 = this.scrollToMessage;
               if (var9 != null) {
                  if (this.chatListView == null) {
                     break label86;
                  }

                  int var3;
                  boolean var4;
                  label81: {
                     var3 = this.scrollToMessagePosition;
                     if (var3 == -9000) {
                        var3 = this.getScrollOffsetForMessage(var9);
                     } else {
                        if (var3 != -10000) {
                           var4 = true;
                           break label81;
                        }

                        var3 = -AndroidUtilities.dp(11.0F);
                     }

                     var4 = false;
                  }

                  this.chatLayoutManager.scrollToPositionWithOffset(this.chatAdapter.messagesStartRow + this.messages.indexOf(this.scrollToMessage), var3, var4);
                  break label86;
               }
            }

            this.moveScrollToLastMessage();
         }

         this.scrollToTopUnReadOnResume = false;
         this.scrollToTopOnResume = false;
         this.scrollToMessage = null;
      }

      this.paused = false;
      this.pausedOnLastMessage = false;
      this.checkScrollForLoad(false);
      if (this.wasPaused) {
         this.wasPaused = false;
         ChatActivity.ChatActivityAdapter var10 = this.chatAdapter;
         if (var10 != null) {
            var10.notifyDataSetChanged();
         }
      }

      this.fixLayout();
      this.applyDraftMaybe(false);
      FrameLayout var11 = this.bottomOverlayChat;
      if (var11 != null && var11.getVisibility() != 0 && !super.actionBar.isSearchFieldVisible()) {
         this.chatActivityEnterView.setFieldFocused(true);
      }

      ChatActivityEnterView var12 = this.chatActivityEnterView;
      if (var12 != null) {
         var12.onResume();
      }

      if (this.currentUser != null) {
         this.chatEnterTime = System.currentTimeMillis();
         this.chatLeaveTime = 0L;
      }

      if (this.startVideoEdit != null) {
         AndroidUtilities.runOnUIThread(new _$$Lambda$ChatActivity$N0ZOc1paMbjXSSSBzo7RxTgXKM0(this));
      }

      if (this.chatListView != null) {
         var12 = this.chatActivityEnterView;
         if (var12 == null || !var12.isEditingMessage()) {
            this.chatListView.setOnItemLongClickListener(this.onItemLongClickListener);
            this.chatListView.setOnItemClickListener(this.onItemClickListener);
            this.chatListView.setLongClickable(true);
         }
      }

      this.checkBotCommands();
      this.updateTitle();
   }

   public void onTransitionAnimationEnd(boolean var1, boolean var2) {
      NotificationCenter var3 = NotificationCenter.getInstance(super.currentAccount);
      byte var4 = 0;
      var3.setAnimationInProgress(false);
      if (var1) {
         this.openAnimationEnded = true;
         if (VERSION.SDK_INT >= 21) {
            this.createChatAttachView();
         }

         if (this.chatActivityEnterView.hasRecordVideo() && !this.chatActivityEnterView.isSendButtonVisible()) {
            TLRPC.Chat var8 = this.currentChat;
            boolean var5;
            if (var8 != null && ChatObject.isChannel(var8) && !this.currentChat.megagroup) {
               var5 = true;
            } else {
               var5 = false;
            }

            SharedPreferences var6 = MessagesController.getGlobalMainSettings();
            String var9;
            if (var5) {
               var9 = "needShowRoundHintChannel";
            } else {
               var9 = "needShowRoundHint";
            }

            if (var6.getBoolean(var9, true) && Utilities.random.nextFloat() < 0.2F) {
               this.showVoiceHint(false, this.chatActivityEnterView.isInVideoMode());
               var6.edit().putBoolean(var9, false).commit();
            }
         }

         if (!var2) {
            ActionBarLayout var10 = super.parentLayout;
            if (var10 != null) {
               int var7 = var10.fragmentsStack.size();

               for(int var12 = var4; var12 < var7 - 1; ++var12) {
                  BaseFragment var11 = (BaseFragment)super.parentLayout.fragmentsStack.get(var12);
                  if (var11 != this && var11 instanceof ChatActivity && ((ChatActivity)var11).dialog_id == this.dialog_id) {
                     var11.removeSelfFromStack();
                     break;
                  }
               }
            }
         }
      }

   }

   public void onTransitionAnimationStart(boolean var1, boolean var2) {
      NotificationCenter.getInstance(super.currentAccount).setAllowedNotificationsDutingAnimation(new int[]{NotificationCenter.chatInfoDidLoad, NotificationCenter.dialogsNeedReload, NotificationCenter.closeChats, NotificationCenter.messagesDidLoad, NotificationCenter.botKeyboardDidLoad, NotificationCenter.userInfoDidLoad, NotificationCenter.needDeleteDialog});
      NotificationCenter.getInstance(super.currentAccount).setAnimationInProgress(true);
      if (var1) {
         this.openAnimationEnded = false;
      }

   }

   public void openVCard(String var1, String var2, String var3) {
      try {
         File var4 = new File(FileLoader.getDirectory(4), "sharing/");
         var4.mkdirs();
         File var5 = new File(var4, "vcard.vcf");
         FileWriter var9 = new FileWriter(var5);
         BufferedWriter var6 = new BufferedWriter(var9);
         var6.write(var1);
         var6.close();
         PhonebookShareActivity var8 = new PhonebookShareActivity((ContactsController.Contact)null, (Uri)null, var5, ContactsController.formatName(var2, var3));
         this.presentFragment(var8);
      } catch (Exception var7) {
         FileLog.e((Throwable)var7);
      }

   }

   public void openVideoEditor(String var1, String var2) {
      if (this.getParentActivity() != null) {
         final Bitmap var3 = ThumbnailUtils.createVideoThumbnail(var1, 1);
         PhotoViewer.getInstance().setParentActivity(this.getParentActivity());
         final ArrayList var4 = new ArrayList();
         MediaController.PhotoEntry var5 = new MediaController.PhotoEntry(0, 0, 0L, var1, 0, true);
         var5.caption = var2;
         var4.add(var5);
         PhotoViewer.getInstance().openPhotoForSelect(var4, 0, 2, new PhotoViewer.EmptyPhotoViewerProvider() {
            public boolean canScrollAway() {
               return false;
            }

            public ImageReceiver.BitmapHolder getThumbForPhoto(MessageObject var1, TLRPC.FileLocation var2, int var3x) {
               return new ImageReceiver.BitmapHolder(var3, (String)null);
            }

            public void sendButtonPressed(int var1, VideoEditedInfo var2) {
               ChatActivity.this.sendMedia((MediaController.PhotoEntry)var4.get(0), var2);
            }
         }, this);
      } else {
         this.fillEditingMediaWithCaption(var2, (ArrayList)null);
         SendMessagesHelper.prepareSendingVideo(var1, 0L, 0L, 0, 0, (VideoEditedInfo)null, this.dialog_id, this.replyingMessageObject, (CharSequence)null, (ArrayList)null, 0, this.editingMessageObject);
         this.hideFieldPanel(false);
         DataQuery.getInstance(super.currentAccount).cleanDraft(this.dialog_id, true);
      }

   }

   public boolean playFirstUnreadVoiceMessage() {
      ChatActivityEnterView var1 = this.chatActivityEnterView;
      if (var1 != null && var1.isRecordingAudioVideo()) {
         return true;
      } else {
         for(int var2 = this.messages.size() - 1; var2 >= 0; --var2) {
            MessageObject var4 = (MessageObject)this.messages.get(var2);
            if ((var4.isVoice() || var4.isRoundVideo()) && var4.isContentUnread() && !var4.isOut()) {
               MediaController var3 = MediaController.getInstance();
               ArrayList var5;
               if (MediaController.getInstance().playMessage(var4)) {
                  var5 = this.createVoiceMessagesPlaylist(var4, true);
               } else {
                  var5 = null;
               }

               var3.setVoiceMessagesPlaylist(var5, true);
               return true;
            }
         }

         if (VERSION.SDK_INT >= 23 && this.getParentActivity() != null && this.getParentActivity().checkSelfPermission("android.permission.RECORD_AUDIO") != 0) {
            this.getParentActivity().requestPermissions(new String[]{"android.permission.RECORD_AUDIO"}, 3);
            return true;
         } else {
            return false;
         }
      }
   }

   public void processInlineBotContextPM(TLRPC.TL_inlineBotSwitchPM var1) {
      if (var1 != null) {
         TLRPC.User var2 = this.mentionsAdapter.getContextBotUser();
         if (var2 != null) {
            this.chatActivityEnterView.setFieldText("");
            long var3 = this.dialog_id;
            if (var3 == (long)var2.id) {
               this.inlineReturn = var3;
               MessagesController.getInstance(super.currentAccount).sendBotStart(this.currentUser, var1.start_param);
            } else {
               Bundle var5 = new Bundle();
               var5.putInt("user_id", var2.id);
               var5.putString("inline_query", var1.start_param);
               var5.putLong("inline_return", this.dialog_id);
               if (!MessagesController.getInstance(super.currentAccount).checkCanOpenChat(var5, this)) {
                  return;
               }

               this.presentFragment(new ChatActivity(var5));
            }

         }
      }
   }

   public boolean processSendingText(String var1) {
      return this.chatActivityEnterView.processSendingText(var1);
   }

   public boolean processSwitchButton(TLRPC.TL_keyboardButtonSwitchInline var1) {
      if (this.inlineReturn != 0L && !var1.same_peer && super.parentLayout != null) {
         StringBuilder var2 = new StringBuilder();
         var2.append("@");
         var2.append(this.currentUser.username);
         var2.append(" ");
         var2.append(var1.query);
         String var7 = var2.toString();
         if (this.inlineReturn == this.dialog_id) {
            this.inlineReturn = 0L;
            this.chatActivityEnterView.setFieldText(var7);
         } else {
            DataQuery.getInstance(super.currentAccount).saveDraft(this.inlineReturn, var7, (ArrayList)null, (TLRPC.Message)null, false);
            if (super.parentLayout.fragmentsStack.size() > 1) {
               ArrayList var8 = super.parentLayout.fragmentsStack;
               BaseFragment var9 = (BaseFragment)var8.get(var8.size() - 2);
               if (var9 instanceof ChatActivity && ((ChatActivity)var9).dialog_id == this.inlineReturn) {
                  this.finishFragment();
               } else {
                  Bundle var10 = new Bundle();
                  long var3 = this.inlineReturn;
                  int var5 = (int)var3;
                  int var6 = (int)(var3 >> 32);
                  if (var5 != 0) {
                     if (var5 > 0) {
                        var10.putInt("user_id", var5);
                     } else if (var5 < 0) {
                        var10.putInt("chat_id", -var5);
                     }
                  } else {
                     var10.putInt("enc_id", var6);
                  }

                  this.presentFragment(new ChatActivity(var10), true);
               }
            }
         }

         return true;
      } else {
         return false;
      }
   }

   public void restoreSelfArgs(Bundle var1) {
      this.currentPicturePath = var1.getString("path");
   }

   public void saveSelfArgs(Bundle var1) {
      String var2 = this.currentPicturePath;
      if (var2 != null) {
         var1.putString("path", var2);
      }

   }

   public void scrollToMessageId(int var1, int var2, boolean var3, int var4, boolean var5) {
      this.wasManualScroll = true;
      MessageObject var6 = (MessageObject)this.messagesDict[var4].get(var1);
      boolean var7;
      int var9;
      int var16;
      if (var6 != null && this.messages.indexOf(var6) != -1) {
         this.removeSelectedMessageHighlight();
         if (var3) {
            this.highlightMessageId = var1;
         }

         var16 = this.getScrollOffsetForMessage(var6);
         ArrayList var8;
         if (var5) {
            var8 = this.messages;
            if (var8.get(var8.size() - 1) == var6) {
               this.chatListView.smoothScrollToPosition(this.chatAdapter.getItemCount() - 1);
            } else {
               this.chatListView.smoothScrollToPosition(this.chatAdapter.messagesStartRow + this.messages.indexOf(var6));
            }
         } else {
            var8 = this.messages;
            if (var8.get(var8.size() - 1) == var6) {
               this.chatLayoutManager.scrollToPositionWithOffset(this.chatAdapter.getItemCount() - 1, var16, false);
            } else {
               this.chatLayoutManager.scrollToPositionWithOffset(this.chatAdapter.messagesStartRow + this.messages.indexOf(var6), var16, false);
            }
         }

         this.updateVisibleRows();
         var9 = this.chatListView.getChildCount();
         var16 = 0;

         label78: {
            while(true) {
               if (var16 >= var9) {
                  var7 = false;
                  break label78;
               }

               View var17 = this.chatListView.getChildAt(var16);
               MessageObject var10;
               if (var17 instanceof ChatMessageCell) {
                  var10 = ((ChatMessageCell)var17).getMessageObject();
                  if (var10 != null && var10.getId() == var6.getId()) {
                     var17.sendAccessibilityEvent(8);
                     break;
                  }
               } else if (var17 instanceof ChatActionCell) {
                  var10 = ((ChatActionCell)var17).getMessageObject();
                  if (var10 != null && var10.getId() == var6.getId()) {
                     var17.sendAccessibilityEvent(8);
                     break;
                  }
               }

               ++var16;
            }

            var7 = true;
         }

         if (!var7) {
            this.showPagedownButton(true, true);
         }

         var7 = false;
      } else {
         var7 = true;
      }

      if (var7) {
         if (this.currentEncryptedChat != null && !MessagesStorage.getInstance(super.currentAccount).checkMessageId(this.dialog_id, this.startLoadFromMessageId)) {
            return;
         }

         this.waitingForLoad.clear();
         this.waitingForReplyMessageLoad = true;
         this.removeSelectedMessageHighlight();
         this.scrollToMessagePosition = -10000;
         this.startLoadFromMessageId = var1;
         if (var1 == this.createUnreadMessageAfterId) {
            this.createUnreadMessageAfterIdLoading = true;
         }

         this.waitingForLoad.add(this.lastLoadIndex);
         MessagesController var15 = MessagesController.getInstance(super.currentAccount);
         long var11;
         if (var4 == 0) {
            var11 = this.dialog_id;
         } else {
            var11 = this.mergeDialogId;
         }

         byte var14;
         if (AndroidUtilities.isTablet()) {
            var14 = 30;
         } else {
            var14 = 20;
         }

         var9 = this.startLoadFromMessageId;
         int var13 = super.classGuid;
         var5 = ChatObject.isChannel(this.currentChat);
         var16 = this.lastLoadIndex++;
         var15.loadMessages(var11, var14, var9, 0, true, 0, var13, 3, 0, var5, var16);
      } else {
         this.showFloatingDateView(false);
      }

      this.returnToMessageId = var2;
      this.returnToLoadIndex = var4;
      this.needSelectFromMessageId = var3;
   }

   public void sendMedia(MediaController.PhotoEntry var1, VideoEditedInfo var2) {
      if (var1 != null) {
         this.fillEditingMediaWithCaption(var1.caption, var1.entities);
         if (var1.isVideo) {
            if (var2 != null) {
               SendMessagesHelper.prepareSendingVideo(var1.path, var2.estimatedSize, var2.estimatedDuration, var2.resultWidth, var2.resultHeight, var2, this.dialog_id, this.replyingMessageObject, var1.caption, var1.entities, var1.ttl, this.editingMessageObject);
            } else {
               SendMessagesHelper.prepareSendingVideo(var1.path, 0L, 0L, 0, 0, (VideoEditedInfo)null, this.dialog_id, this.replyingMessageObject, var1.caption, var1.entities, var1.ttl, this.editingMessageObject);
            }

            this.hideFieldPanel(false);
            DataQuery.getInstance(super.currentAccount).cleanDraft(this.dialog_id, true);
         } else {
            String var3 = var1.imagePath;
            if (var3 != null) {
               SendMessagesHelper.prepareSendingPhoto(var3, (Uri)null, this.dialog_id, this.replyingMessageObject, var1.caption, var1.entities, var1.stickers, (InputContentInfoCompat)null, var1.ttl, this.editingMessageObject);
               this.hideFieldPanel(false);
               DataQuery.getInstance(super.currentAccount).cleanDraft(this.dialog_id, true);
            } else {
               var3 = var1.path;
               if (var3 != null) {
                  SendMessagesHelper.prepareSendingPhoto(var3, (Uri)null, this.dialog_id, this.replyingMessageObject, var1.caption, var1.entities, var1.stickers, (InputContentInfoCompat)null, var1.ttl, this.editingMessageObject);
                  this.hideFieldPanel(false);
                  DataQuery.getInstance(super.currentAccount).cleanDraft(this.dialog_id, true);
               }
            }
         }

      }
   }

   public void setBotUser(String var1) {
      if (this.inlineReturn != 0L) {
         MessagesController.getInstance(super.currentAccount).sendBotStart(this.currentUser, var1);
      } else {
         this.botUser = var1;
         this.updateBottomOverlay();
      }

   }

   protected void setIgnoreAttachOnPause(boolean var1) {
      this.ignoreAttachOnPause = var1;
   }

   protected void setInPreviewMode(boolean var1) {
      super.setInPreviewMode(var1);
      ChatAvatarContainer var2 = this.avatarContainer;
      float var3 = 0.0F;
      float var4;
      if (var2 != null) {
         var2.setOccupyStatusBar(var1 ^ true);
         var2 = this.avatarContainer;
         if (!var1) {
            var4 = 56.0F;
         } else {
            var4 = 0.0F;
         }

         var2.setLayoutParams(LayoutHelper.createFrame(-2, -1.0F, 51, var4, 0.0F, 40.0F, 0.0F));
      }

      ChatActivityEnterView var11 = this.chatActivityEnterView;
      if (var11 != null) {
         byte var5;
         if (!var1) {
            var5 = 0;
         } else {
            var5 = 4;
         }

         var11.setVisibility(var5);
      }

      ActionBar var6 = super.actionBar;
      if (var6 != null) {
         BackDrawable var12;
         if (!var1) {
            var12 = new BackDrawable(false);
         } else {
            var12 = null;
         }

         var6.setBackButtonDrawable(var12);
         ActionBarMenuItem var13 = this.headerItem;
         if (!var1) {
            var4 = 1.0F;
         } else {
            var4 = 0.0F;
         }

         var13.setAlpha(var4);
         var13 = this.attachItem;
         var4 = var3;
         if (!var1) {
            var4 = 1.0F;
         }

         var13.setAlpha(var4);
      }

      RecyclerListView var14 = this.chatListView;
      if (var14 != null) {
         int var7 = var14.getChildCount();

         for(int var16 = 0; var16 < var7; ++var16) {
            View var17 = this.chatListView.getChildAt(var16);
            var1 = var17 instanceof ChatMessageCell;
            MessageObject var15;
            if (var1) {
               var15 = ((ChatMessageCell)var17).getMessageObject();
            } else if (var17 instanceof ChatActionCell) {
               var15 = ((ChatActionCell)var17).getMessageObject();
            } else {
               var15 = null;
            }

            if (var15 != null) {
               TLRPC.Message var8 = var15.messageOwner;
               if (var8 != null && var8.media_unread && var8.mentioned) {
                  if (!var15.isVoice() && !var15.isRoundVideo()) {
                     --this.newMentionsCount;
                     int var9 = this.newMentionsCount;
                     if (var9 <= 0) {
                        this.newMentionsCount = 0;
                        this.hasAllMentionsLocal = true;
                        this.showMentionDownButton(false, true);
                     } else {
                        this.mentiondownButtonCounter.setText(String.format("%d", var9));
                     }

                     MessagesController var19 = MessagesController.getInstance(super.currentAccount);
                     int var10 = var15.getId();
                     if (ChatObject.isChannel(this.currentChat)) {
                        var9 = this.currentChat.id;
                     } else {
                        var9 = 0;
                     }

                     var19.markMentionMessageAsRead(var10, var9, this.dialog_id);
                     var15.setContentIsRead();
                  }

                  if (var1) {
                     ChatMessageCell var18 = (ChatMessageCell)var17;
                     var18.setHighlighted(false);
                     var18.setHighlightedAnimated();
                  }
               }
            }
         }
      }

      this.updateBottomOverlay();
      this.updateSecretStatus();
   }

   public void shareMyContact(MessageObject var1) {
      AlertDialog.Builder var2 = new AlertDialog.Builder(this.getParentActivity());
      var2.setTitle(LocaleController.getString("ShareYouPhoneNumberTitle", 2131560759));
      TLRPC.User var3 = this.currentUser;
      if (var3 != null) {
         if (var3.bot) {
            var2.setMessage(LocaleController.getString("AreYouSureShareMyContactInfoBot", 2131558700));
         } else {
            PhoneFormat var4 = PhoneFormat.getInstance();
            StringBuilder var5 = new StringBuilder();
            var5.append("+");
            var5.append(UserConfig.getInstance(super.currentAccount).getCurrentUser().phone);
            String var6 = var4.format(var5.toString());
            TLRPC.User var7 = this.currentUser;
            var2.setMessage(AndroidUtilities.replaceTags(LocaleController.formatString("AreYouSureShareMyContactInfoUser", 2131558701, var6, ContactsController.formatName(var7.first_name, var7.last_name))));
         }
      } else {
         var2.setMessage(LocaleController.getString("AreYouSureShareMyContactInfo", 2131558699));
      }

      var2.setPositiveButton(LocaleController.getString("OK", 2131560097), new _$$Lambda$ChatActivity$6zewwavO2MzfYBN_l_zORHqG6Gc(this, var1));
      var2.setNegativeButton(LocaleController.getString("Cancel", 2131558891), (OnClickListener)null);
      this.showDialog(var2.create());
   }

   public void showAlert(String var1, String var2) {
      FrameLayout var3 = this.alertView;
      if (var3 != null && var1 != null && var2 != null) {
         if (var3.getTag() != null) {
            this.alertView.setTag((Object)null);
            AnimatorSet var5 = this.alertViewAnimator;
            if (var5 != null) {
               var5.cancel();
               this.alertViewAnimator = null;
            }

            this.alertView.setVisibility(0);
            this.alertViewAnimator = new AnimatorSet();
            this.alertViewAnimator.playTogether(new Animator[]{ObjectAnimator.ofFloat(this.alertView, View.TRANSLATION_Y, new float[]{0.0F})});
            this.alertViewAnimator.setDuration(200L);
            this.alertViewAnimator.addListener(new AnimatorListenerAdapter() {
               public void onAnimationCancel(Animator var1) {
                  if (ChatActivity.this.alertViewAnimator != null && ChatActivity.this.alertViewAnimator.equals(var1)) {
                     ChatActivity.this.alertViewAnimator = null;
                  }

               }

               public void onAnimationEnd(Animator var1) {
                  if (ChatActivity.this.alertViewAnimator != null && ChatActivity.this.alertViewAnimator.equals(var1)) {
                     ChatActivity.this.alertViewAnimator = null;
                  }

               }
            });
            this.alertViewAnimator.start();
         }

         this.alertNameTextView.setText(var1);
         this.alertTextView.setText(Emoji.replaceEmoji(var2.replace('\n', ' '), this.alertTextView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14.0F), false));
         Runnable var4 = this.hideAlertViewRunnable;
         if (var4 != null) {
            AndroidUtilities.cancelRunOnUIThread(var4);
         }

         var4 = new Runnable() {
            public void run() {
               if (ChatActivity.this.hideAlertViewRunnable == this) {
                  if (ChatActivity.this.alertView.getTag() == null) {
                     ChatActivity.this.alertView.setTag(1);
                     if (ChatActivity.this.alertViewAnimator != null) {
                        ChatActivity.this.alertViewAnimator.cancel();
                        ChatActivity.this.alertViewAnimator = null;
                     }

                     ChatActivity.this.alertViewAnimator = new AnimatorSet();
                     ChatActivity.this.alertViewAnimator.playTogether(new Animator[]{ObjectAnimator.ofFloat(ChatActivity.this.alertView, View.TRANSLATION_Y, new float[]{(float)(-AndroidUtilities.dp(50.0F))})});
                     ChatActivity.this.alertViewAnimator.setDuration(200L);
                     ChatActivity.this.alertViewAnimator.addListener(new AnimatorListenerAdapter() {
                        public void onAnimationCancel(Animator var1) {
                           if (ChatActivity.this.alertViewAnimator != null && ChatActivity.this.alertViewAnimator.equals(var1)) {
                              ChatActivity.this.alertViewAnimator = null;
                           }

                        }

                        public void onAnimationEnd(Animator var1) {
                           if (ChatActivity.this.alertViewAnimator != null && ChatActivity.this.alertViewAnimator.equals(var1)) {
                              ChatActivity.this.alertView.setVisibility(8);
                              ChatActivity.this.alertViewAnimator = null;
                           }

                        }
                     });
                     ChatActivity.this.alertViewAnimator.start();
                  }

               }
            }
         };
         this.hideAlertViewRunnable = var4;
         AndroidUtilities.runOnUIThread(var4, 3000L);
      }

   }

   public void showFieldPanel(boolean var1, MessageObject var2, MessageObject var3, ArrayList var4, TLRPC.WebPage var5, boolean var6, boolean var7) {
      if (this.chatActivityEnterView != null) {
         if (!var1) {
            if (this.replyingMessageObject == null && this.forwardingMessages == null && this.foundWebPage == null && this.editingMessageObject == null) {
               return;
            }

            var2 = this.replyingMessageObject;
            if (var2 != null && var2.messageOwner.reply_markup instanceof TLRPC.TL_replyKeyboardForceReply) {
               Editor var16 = MessagesController.getMainSettings(super.currentAccount).edit();
               StringBuilder var35 = new StringBuilder();
               var35.append("answered_");
               var35.append(this.dialog_id);
               var16.putInt(var35.toString(), this.replyingMessageObject.getId()).commit();
            }

            if (this.foundWebPage != null) {
               this.foundWebPage = null;
               this.chatActivityEnterView.setWebPage((TLRPC.WebPage)null, var6 ^ true);
               if (var5 != null && (this.replyingMessageObject != null || this.forwardingMessages != null || this.editingMessageObject != null)) {
                  this.showFieldPanel(true, this.replyingMessageObject, this.editingMessageObject, this.forwardingMessages, (TLRPC.WebPage)null, false, true);
                  return;
               }
            }

            ArrayList var36 = this.forwardingMessages;
            if (var36 != null) {
               this.forwardMessages(var36, false);
            }

            this.chatActivityEnterView.setForceShowSendButton(false, false);
            this.chatActivityEnterView.hideTopView(var7);
            this.chatActivityEnterView.setReplyingMessageObject((MessageObject)null);
            this.chatActivityEnterView.setEditingMessageObject((MessageObject)null, false);
            this.replyingMessageObject = null;
            this.editingMessageObject = null;
            this.forwardingMessages = null;
            this.replyImageLocation = null;
            this.replyImageLocationObject = null;
         } else {
            if (var2 == null && var4 == null && var3 == null && var5 == null) {
               return;
            }

            HintView var9 = this.noSoundHintView;
            if (var9 != null) {
               var9.hide();
            }

            var9 = this.forwardHintView;
            if (var9 != null) {
               var9.hide();
            }

            if (this.searchItem != null && super.actionBar.isSearchFieldVisible()) {
               super.actionBar.closeSearchField(false);
               this.chatActivityEnterView.setFieldFocused();
               AndroidUtilities.runOnUIThread(new _$$Lambda$ChatActivity$cQIsesUtx41bAXt2yOlBbwlh0Zk(this), 100L);
            }

            MessageObject var17;
            ArrayList var28;
            if (var2 != null && var2.getDialogId() != this.dialog_id) {
               var28 = new ArrayList();
               var28.add(var2);
               var17 = null;
               var1 = true;
            } else {
               var1 = false;
               var28 = var4;
               var17 = var2;
            }

            int var10;
            String var14;
            SimpleTextView var15;
            CharSequence var19;
            String var20;
            if (var3 != null) {
               this.forwardingMessages = null;
               this.replyingMessageObject = null;
               this.editingMessageObject = var3;
               this.chatActivityEnterView.setReplyingMessageObject((MessageObject)null);
               this.chatActivityEnterView.setEditingMessageObject(var3, var3.isMediaEmpty() ^ true);
               if (this.foundWebPage != null) {
                  return;
               }

               this.chatActivityEnterView.setForceShowSendButton(false, false);
               this.replyIconImageView.setImageResource(2131165403);
               this.replyIconImageView.setContentDescription(LocaleController.getString("AccDescrEditing", 2131558430));
               this.replyCloseImageView.setContentDescription(LocaleController.getString("AccDescrCancelEdit", 2131558420));
               if (var3.isMediaEmpty()) {
                  this.replyNameTextView.setText(LocaleController.getString("EditMessage", 2131559323));
               } else {
                  this.replyNameTextView.setText(LocaleController.getString("EditCaption", 2131559321));
               }

               if (var3.canEditMedia()) {
                  this.replyObjectTextView.setText(LocaleController.getString("EditMessageMedia", 2131559325));
                  var2 = var17;
               } else {
                  var19 = var3.messageText;
                  var2 = var17;
                  if (var19 != null) {
                     var20 = var19.toString();
                     var14 = var20;
                     if (var20.length() > 150) {
                        var14 = var20.substring(0, 150);
                     }

                     var20 = var14.replace('\n', ' ');
                     var15 = this.replyObjectTextView;
                     var15.setText(Emoji.replaceEmoji(var20, var15.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14.0F), false));
                     var2 = var17;
                  }
               }
            } else {
               TLRPC.User var21;
               SimpleTextView var23;
               TLRPC.MessageMedia var24;
               if (var17 != null) {
                  this.forwardingMessages = null;
                  this.editingMessageObject = null;
                  this.replyingMessageObject = var17;
                  this.chatActivityEnterView.setReplyingMessageObject(var17);
                  this.chatActivityEnterView.setEditingMessageObject((MessageObject)null, false);
                  if (this.foundWebPage != null) {
                     return;
                  }

                  this.chatActivityEnterView.setForceShowSendButton(false, false);
                  if (var17.isFromUser()) {
                     var21 = MessagesController.getInstance(super.currentAccount).getUser(var17.messageOwner.from_id);
                     if (var21 == null) {
                        return;
                     }

                     var14 = UserObject.getUserName(var21);
                  } else {
                     TLRPC.Chat var18;
                     if (ChatObject.isChannel(this.currentChat) && this.currentChat.megagroup && var17.isForwardedChannelPost()) {
                        var18 = MessagesController.getInstance(super.currentAccount).getChat(var17.messageOwner.fwd_from.channel_id);
                     } else {
                        var18 = MessagesController.getInstance(super.currentAccount).getChat(var17.messageOwner.to_id.channel_id);
                     }

                     if (var18 == null) {
                        return;
                     }

                     var14 = var18.title;
                  }

                  this.replyIconImageView.setImageResource(2131165654);
                  this.replyNameTextView.setText(var14);
                  this.replyIconImageView.setContentDescription(LocaleController.getString("AccDescrReplying", 2131558465));
                  this.replyCloseImageView.setContentDescription(LocaleController.getString("AccDescrCancelReply", 2131558422));
                  var24 = var17.messageOwner.media;
                  if (var24 instanceof TLRPC.TL_messageMediaGame) {
                     var23 = this.replyObjectTextView;
                     var23.setText(Emoji.replaceEmoji(var24.game.title, var23.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14.0F), false));
                     var2 = var17;
                  } else {
                     var19 = var17.messageText;
                     var2 = var17;
                     if (var19 != null) {
                        var20 = var19.toString();
                        var14 = var20;
                        if (var20.length() > 150) {
                           var14 = var20.substring(0, 150);
                        }

                        var20 = var14.replace('\n', ' ');
                        var15 = this.replyObjectTextView;
                        var15.setText(Emoji.replaceEmoji(var20, var15.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14.0F), false));
                        var2 = var17;
                     }
                  }
               } else if (var28 != null) {
                  if (var28.isEmpty()) {
                     return;
                  }

                  this.replyingMessageObject = null;
                  this.editingMessageObject = null;
                  this.chatActivityEnterView.setReplyingMessageObject((MessageObject)null);
                  this.chatActivityEnterView.setEditingMessageObject((MessageObject)null, false);
                  this.forwardingMessages = var28;
                  if (this.foundWebPage != null) {
                     return;
                  }

                  this.chatActivityEnterView.setForceShowSendButton(true, false);
                  ArrayList var8 = new ArrayList();
                  this.replyIconImageView.setImageResource(2131165653);
                  this.replyIconImageView.setContentDescription(LocaleController.getString("AccDescrForwarding", 2131558433));
                  this.replyCloseImageView.setContentDescription(LocaleController.getString("AccDescrCancelForward", 2131558421));
                  var2 = (MessageObject)var28.get(0);
                  TLRPC.Chat var25;
                  if (var2.isFromUser()) {
                     var8.add(var2.messageOwner.from_id);
                  } else {
                     var25 = this.getMessagesController().getChat(var2.messageOwner.to_id.channel_id);
                     if (ChatObject.isChannel(var25) && var25.megagroup && var2.isForwardedChannelPost()) {
                        var8.add(-var2.messageOwner.fwd_from.channel_id);
                     } else {
                        var8.add(-var2.messageOwner.to_id.channel_id);
                     }
                  }

                  var10 = ((MessageObject)var28.get(0)).type;

                  int var11;
                  int var12;
                  for(var11 = 1; var11 < var28.size(); var10 = var12) {
                     var2 = (MessageObject)var28.get(var11);
                     if (var2.isFromUser()) {
                        var12 = var2.messageOwner.from_id;
                     } else {
                        var25 = this.getMessagesController().getChat(var2.messageOwner.to_id.channel_id);
                        if (ChatObject.isChannel(var25) && var25.megagroup && var2.isForwardedChannelPost()) {
                           var12 = var2.messageOwner.fwd_from.channel_id;
                        } else {
                           var12 = var2.messageOwner.to_id.channel_id;
                        }

                        var12 = -var12;
                     }

                     if (!var8.contains(var12)) {
                        var8.add(var12);
                     }

                     var12 = var10;
                     if (((MessageObject)var28.get(var11)).type != var10) {
                        var12 = -1;
                     }

                     ++var11;
                  }

                  StringBuilder var13 = new StringBuilder();

                  for(var11 = 0; var11 < var8.size(); ++var11) {
                     Integer var29 = (Integer)var8.get(var11);
                     if (var29 > 0) {
                        var21 = MessagesController.getInstance(super.currentAccount).getUser(var29);
                        var25 = null;
                     } else {
                        var25 = MessagesController.getInstance(super.currentAccount).getChat(-var29);
                        var21 = null;
                     }

                     if (var21 != null || var25 != null) {
                        if (var8.size() == 1) {
                           if (var21 != null) {
                              var13.append(UserObject.getUserName(var21));
                           } else {
                              var13.append(var25.title);
                           }
                        } else {
                           if (var8.size() != 2 && var13.length() != 0) {
                              var13.append(" ");
                              var13.append(LocaleController.formatPluralString("AndOther", var8.size() - 1));
                              break;
                           }

                           if (var13.length() > 0) {
                              var13.append(", ");
                           }

                           if (var21 != null) {
                              if (!TextUtils.isEmpty(var21.first_name)) {
                                 var13.append(var21.first_name);
                              } else if (!TextUtils.isEmpty(var21.last_name)) {
                                 var13.append(var21.last_name);
                              } else {
                                 var13.append(" ");
                              }
                           } else {
                              var13.append(var25.title);
                           }
                        }
                     }
                  }

                  this.replyNameTextView.setText(var13);
                  if (var10 != -1 && var10 != 0 && var10 != 10 && var10 != 11) {
                     if (var10 == 1) {
                        this.replyObjectTextView.setText(LocaleController.formatPluralString("ForwardedPhoto", var28.size()));
                        var2 = var17;
                        if (var28.size() == 1) {
                           var2 = (MessageObject)var28.get(0);
                        }
                     } else if (var10 == 4) {
                        this.replyObjectTextView.setText(LocaleController.formatPluralString("ForwardedLocation", var28.size()));
                        var2 = var17;
                     } else if (var10 == 3) {
                        this.replyObjectTextView.setText(LocaleController.formatPluralString("ForwardedVideo", var28.size()));
                        var2 = var17;
                        if (var28.size() == 1) {
                           var2 = (MessageObject)var28.get(0);
                        }
                     } else if (var10 == 12) {
                        this.replyObjectTextView.setText(LocaleController.formatPluralString("ForwardedContact", var28.size()));
                        var2 = var17;
                     } else if (var10 == 2) {
                        this.replyObjectTextView.setText(LocaleController.formatPluralString("ForwardedAudio", var28.size()));
                        var2 = var17;
                     } else if (var10 == 5) {
                        this.replyObjectTextView.setText(LocaleController.formatPluralString("ForwardedRound", var28.size()));
                        var2 = var17;
                     } else if (var10 == 14) {
                        this.replyObjectTextView.setText(LocaleController.formatPluralString("ForwardedMusic", var28.size()));
                        var2 = var17;
                     } else if (var10 == 13) {
                        this.replyObjectTextView.setText(LocaleController.formatPluralString("ForwardedSticker", var28.size()));
                        var2 = var17;
                     } else if (var10 == 17) {
                        this.replyObjectTextView.setText(LocaleController.formatPluralString("ForwardedPoll", var28.size()));
                        var2 = var17;
                     } else {
                        label342: {
                           if (var10 != 8) {
                              var2 = var17;
                              if (var10 != 9) {
                                 break label342;
                              }
                           }

                           if (var28.size() == 1) {
                              if (var10 == 8) {
                                 this.replyObjectTextView.setText(LocaleController.getString("AttachGif", 2131558716));
                                 var2 = var17;
                              } else {
                                 var14 = FileLoader.getDocumentFileName(((MessageObject)var28.get(0)).getDocument());
                                 if (var14.length() != 0) {
                                    this.replyObjectTextView.setText(var14);
                                 }

                                 var2 = (MessageObject)var28.get(0);
                              }
                           } else {
                              this.replyObjectTextView.setText(LocaleController.formatPluralString("ForwardedFile", var28.size()));
                              var2 = var17;
                           }
                        }
                     }
                  } else if (var28.size() == 1 && ((MessageObject)var28.get(0)).messageText != null) {
                     MessageObject var27 = (MessageObject)var28.get(0);
                     var24 = var27.messageOwner.media;
                     if (var24 instanceof TLRPC.TL_messageMediaGame) {
                        var23 = this.replyObjectTextView;
                        var23.setText(Emoji.replaceEmoji(var24.game.title, var23.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14.0F), false));
                        var2 = var17;
                     } else {
                        var20 = var27.messageText.toString();
                        var14 = var20;
                        if (var20.length() > 150) {
                           var14 = var20.substring(0, 150);
                        }

                        var20 = var14.replace('\n', ' ');
                        var15 = this.replyObjectTextView;
                        var15.setText(Emoji.replaceEmoji(var20, var15.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14.0F), false));
                        var2 = var17;
                     }
                  } else {
                     this.replyObjectTextView.setText(LocaleController.formatPluralString("ForwardedMessageCount", var28.size()));
                     var2 = var17;
                  }
               } else {
                  this.replyIconImageView.setImageResource(2131165640);
                  if (var5 instanceof TLRPC.TL_webPagePending) {
                     this.replyNameTextView.setText(LocaleController.getString("GettingLinkInfo", 2131559588));
                     this.replyObjectTextView.setText(this.pendingLinkSearchString);
                     var2 = var17;
                  } else {
                     var14 = var5.site_name;
                     if (var14 != null) {
                        this.replyNameTextView.setText(var14);
                     } else {
                        var14 = var5.title;
                        if (var14 != null) {
                           this.replyNameTextView.setText(var14);
                        } else {
                           this.replyNameTextView.setText(LocaleController.getString("LinkPreview", 2131559762));
                        }
                     }

                     var14 = var5.title;
                     if (var14 != null) {
                        this.replyObjectTextView.setText(var14);
                     } else {
                        var14 = var5.description;
                        if (var14 != null) {
                           this.replyObjectTextView.setText(var14);
                        } else {
                           var14 = var5.author;
                           if (var14 != null) {
                              this.replyObjectTextView.setText(var14);
                           } else {
                              this.replyObjectTextView.setText(var5.display_url);
                           }
                        }
                     }

                     this.chatActivityEnterView.setWebPage(var5, true);
                     var2 = var17;
                  }
               }
            }

            if (var2 != null) {
               var3 = var2;
            } else if (var3 == null) {
               var3 = null;
            }

            LayoutParams var26 = (LayoutParams)this.replyNameTextView.getLayoutParams();
            LayoutParams var33 = (LayoutParams)this.replyObjectTextView.getLayoutParams();
            TLRPC.PhotoSize var22;
            TLObject var30;
            byte var32;
            TLRPC.PhotoSize var34;
            if (var3 != null) {
               var22 = FileLoader.getClosestPhotoSizeWithSize(var3.photoThumbs2, 320);
               var34 = FileLoader.getClosestPhotoSizeWithSize(var3.photoThumbs2, AndroidUtilities.dp(40.0F));
               var30 = var3.photoThumbsObject2;
               if (var22 == null) {
                  if (var3.mediaExists) {
                     var22 = FileLoader.getClosestPhotoSizeWithSize(var3.photoThumbs, AndroidUtilities.getPhotoSize());
                     if (var22 != null) {
                        var10 = var22.size;
                     } else {
                        var10 = 0;
                     }

                     var32 = 0;
                  } else {
                     var22 = FileLoader.getClosestPhotoSizeWithSize(var3.photoThumbs, 320);
                     var32 = 1;
                     var10 = 0;
                  }

                  var34 = FileLoader.getClosestPhotoSizeWithSize(var3.photoThumbs, AndroidUtilities.dp(40.0F));
                  var30 = var3.photoThumbsObject;
               } else {
                  var32 = 1;
                  var10 = 0;
               }
            } else {
               var22 = null;
               var32 = 1;
               var10 = 0;
               var34 = null;
               var30 = null;
            }

            TLRPC.PhotoSize var31 = var34;
            if (var22 == var34) {
               var31 = null;
            }

            if (var22 != null && !(var22 instanceof TLRPC.TL_photoSizeEmpty) && !(var22.location instanceof TLRPC.TL_fileLocationUnavailable) && var3.type != 13 && (var3 == null || !var3.isSecretMedia())) {
               if (var3 != null && var3.isRoundVideo()) {
                  this.replyImageView.setRoundRadius(AndroidUtilities.dp(17.0F));
               } else {
                  this.replyImageView.setRoundRadius(0);
               }

               this.replyImageSize = var10;
               this.replyImageCacheType = var32;
               this.replyImageLocation = var22;
               this.replyImageThumbLocation = var31;
               this.replyImageLocationObject = var30;
               this.replyImageView.setImage(ImageLocation.getForObject(this.replyImageLocation, var30), "50_50", ImageLocation.getForObject(var31, var30), "50_50_b", (String)null, var10, var32, var3);
               this.replyImageView.setVisibility(0);
               var10 = AndroidUtilities.dp(96.0F);
               var33.leftMargin = var10;
               var26.leftMargin = var10;
            } else {
               this.replyImageView.setImageBitmap((Bitmap)null);
               this.replyImageLocation = null;
               this.replyImageLocationObject = null;
               this.replyImageView.setVisibility(4);
               var10 = AndroidUtilities.dp(52.0F);
               var33.leftMargin = var10;
               var26.leftMargin = var10;
            }

            this.replyNameTextView.setLayoutParams(var26);
            this.replyObjectTextView.setLayoutParams(var33);
            this.chatActivityEnterView.showTopView(true, var1);
         }

      }
   }

   public void showFieldPanelForEdit(boolean var1, MessageObject var2) {
      this.showFieldPanel(var1, (MessageObject)null, var2, (ArrayList)null, (TLRPC.WebPage)null, false, true);
   }

   public void showFieldPanelForForward(boolean var1, ArrayList var2) {
      this.showFieldPanel(var1, (MessageObject)null, (MessageObject)null, var2, (TLRPC.WebPage)null, false, true);
   }

   public void showFieldPanelForReply(MessageObject var1) {
      this.showFieldPanel(true, var1, (MessageObject)null, (ArrayList)null, (TLRPC.WebPage)null, false, true);
   }

   public void showFieldPanelForWebPage(boolean var1, TLRPC.WebPage var2, boolean var3) {
      this.showFieldPanel(var1, (MessageObject)null, (MessageObject)null, (ArrayList)null, var2, var3, true);
   }

   public void showOpenGameAlert(TLRPC.TL_game var1, MessageObject var2, String var3, boolean var4, int var5) {
      TLRPC.User var6 = MessagesController.getInstance(super.currentAccount).getUser(var5);
      String var7 = "";
      if (var4) {
         AlertDialog.Builder var8 = new AlertDialog.Builder(this.getParentActivity());
         var8.setTitle(LocaleController.getString("AppName", 2131558635));
         if (var6 != null) {
            var7 = ContactsController.formatName(var6.first_name, var6.last_name);
         }

         var8.setMessage(LocaleController.formatString("BotPermissionGameAlert", 2131558853, var7));
         var8.setPositiveButton(LocaleController.getString("OK", 2131560097), new _$$Lambda$ChatActivity$wLknVd0V_Pw0Q2vz0E5De6YlT8g(this, var1, var2, var3, var5));
         var8.setNegativeButton(LocaleController.getString("Cancel", 2131558891), (OnClickListener)null);
         this.showDialog(var8.create());
      } else {
         String var11;
         if (VERSION.SDK_INT >= 21 && !AndroidUtilities.isTablet() && WebviewActivity.supportWebview()) {
            ArrayList var12 = super.parentLayout.fragmentsStack;
            if (var12.get(var12.size() - 1) == this) {
               var11 = var7;
               if (var6 != null) {
                  var11 = var7;
                  if (!TextUtils.isEmpty(var6.username)) {
                     var11 = var6.username;
                  }
               }

               this.presentFragment(new WebviewActivity(var3, var11, var1.title, var1.short_name, var2));
            }
         } else {
            String var9;
            Activity var10;
            label31: {
               var10 = this.getParentActivity();
               var11 = var1.short_name;
               if (var6 != null) {
                  var9 = var6.username;
                  if (var9 != null) {
                     break label31;
                  }
               }

               var9 = "";
            }

            WebviewActivity.openGameInBrowser(var3, var2, var10, var11, var9);
         }
      }

   }

   public void showOpenUrlAlert(String var1, boolean var2) {
      boolean var3 = Browser.isInternalUrl(var1, (boolean[])null);
      boolean var4 = true;
      if (!var3 && var2) {
         if (this.getParentActivity() == null) {
            return;
         }

         AlertDialog.Builder var8 = new AlertDialog.Builder(this.getParentActivity());
         var8.setTitle(LocaleController.getString("OpenUrlTitle", 2131560121));
         String var6 = LocaleController.getString("OpenUrlAlert2", 2131560118);
         int var7 = var6.indexOf("%");
         SpannableStringBuilder var9 = new SpannableStringBuilder(String.format(var6, var1));
         if (var7 >= 0) {
            var9.setSpan(new URLSpan(var1), var7, var1.length() + var7, 33);
         }

         var8.setMessage(var9);
         var8.setMessageTextViewClickable(false);
         var8.setPositiveButton(LocaleController.getString("Open", 2131560110), new _$$Lambda$ChatActivity$FDrsm6mcMPqmDsmALxcjgPmFuS4(this, var1));
         var8.setNegativeButton(LocaleController.getString("Cancel", 2131558891), (OnClickListener)null);
         this.showDialog(var8.create());
      } else {
         Activity var5 = this.getParentActivity();
         if (this.inlineReturn == 0L) {
            var2 = var4;
         } else {
            var2 = false;
         }

         Browser.openUrl(var5, (String)var1, var2);
      }

   }

   public void showRequestUrlAlert(TLRPC.TL_urlAuthResultRequest var1, TLRPC.TL_messages_requestUrlAuth var2, String var3) {
      if (this.getParentActivity() != null) {
         AlertDialog.Builder var4 = new AlertDialog.Builder(this.getParentActivity());
         var4.setTitle(LocaleController.getString("OpenUrlTitle", 2131560121));
         String var5 = LocaleController.getString("OpenUrlAlert2", 2131560118);
         int var6 = var5.indexOf("%");
         SpannableStringBuilder var12 = new SpannableStringBuilder(String.format(var5, var3));
         if (var6 >= 0) {
            var12.setSpan(new URLSpan(var3), var6, var3.length() + var6, 33);
         }

         var4.setMessage(var12);
         var4.setMessageTextViewClickable(false);
         var4.setNegativeButton(LocaleController.getString("Cancel", 2131558891), (OnClickListener)null);
         CheckBoxCell[] var7 = new CheckBoxCell[2];
         LinearLayout var8 = new LinearLayout(this.getParentActivity());
         var8.setOrientation(1);
         TLRPC.User var13 = this.getUserConfig().getCurrentUser();
         var6 = 0;

         while(true) {
            byte var9;
            if (var1.request_write_access) {
               var9 = 2;
            } else {
               var9 = 1;
            }

            if (var6 >= var9) {
               var4.setCustomViewOffset(12);
               var4.setView(var8);
               var4.setPositiveButton(LocaleController.getString("Open", 2131560110), new _$$Lambda$ChatActivity$Ylfr0OF9_BXApgGlUw_IIZ6Lq80(this, var7, var3, var2, var1));
               this.showDialog(var4.create());
               return;
            }

            var7[var6] = new CheckBoxCell(this.getParentActivity(), 1);
            var7[var6].setBackgroundDrawable(Theme.getSelectorDrawable(false));
            var7[var6].setMultiline(true);
            var7[var6].setTag(var6);
            int var14;
            if (var6 == 0) {
               SpannableStringBuilder var10 = AndroidUtilities.replaceTags(LocaleController.formatString("OpenUrlOption1", 2131560119, var1.domain, ContactsController.formatName(var13.first_name, var13.last_name)));
               var14 = TextUtils.indexOf(var10, var1.domain);
               if (var14 >= 0) {
                  var10.setSpan(new URLSpan(""), var14, var1.domain.length() + var14, 33);
               }

               var7[var6].setText(var10, "", true, false);
            } else if (var6 == 1) {
               var7[var6].setText(AndroidUtilities.replaceTags(LocaleController.formatString("OpenUrlOption2", 2131560120, UserObject.getFirstName(var1.bot))), "", true, false);
            }

            CheckBoxCell var15 = var7[var6];
            if (LocaleController.isRTL) {
               var14 = AndroidUtilities.dp(16.0F);
            } else {
               var14 = AndroidUtilities.dp(8.0F);
            }

            int var11;
            if (LocaleController.isRTL) {
               var11 = AndroidUtilities.dp(8.0F);
            } else {
               var11 = AndroidUtilities.dp(16.0F);
            }

            var15.setPadding(var14, 0, var11, 0);
            var8.addView(var7[var6], LayoutHelper.createLinear(-1, -2));
            var7[var6].setOnClickListener(new _$$Lambda$ChatActivity$wvYiDIx4eLsIf8wqj2bNoytWsyQ(var7));
            ++var6;
         }
      }
   }

   public void updateTextureViewPosition(boolean var1) {
      if (super.fragmentView != null && !this.paused) {
         int var2 = this.chatListView.getChildCount();
         int var3 = 0;

         boolean var12;
         while(true) {
            if (var3 >= var2) {
               var12 = false;
               break;
            }

            View var4 = this.chatListView.getChildAt(var3);
            if (var4 instanceof ChatMessageCell) {
               ChatMessageCell var5 = (ChatMessageCell)var4;
               MessageObject var6 = var5.getMessageObject();
               if (this.videoPlayerContainer != null && (var6.isRoundVideo() || var6.isVideo()) && MediaController.getInstance().isPlayingMessage(var6)) {
                  ImageReceiver var10 = var5.getPhotoImage();
                  this.videoPlayerContainer.setTranslationX((float)var10.getImageX() + var5.getX());
                  FrameLayout var7 = this.videoPlayerContainer;
                  float var8 = (float)(super.fragmentView.getPaddingTop() + var5.getTop() + var10.getImageY() - this.chatListViewClipTop);
                  float var9 = this.chatListView.getTranslationY();
                  if (super.inPreviewMode) {
                     var3 = AndroidUtilities.statusBarHeight;
                  } else {
                     var3 = 0;
                  }

                  var7.setTranslationY(var8 + var9 + (float)var3);
                  LayoutParams var13 = (LayoutParams)this.videoPlayerContainer.getLayoutParams();
                  if (var6.isRoundVideo()) {
                     this.videoPlayerContainer.setTag(2131230860, (Object)null);
                     if (var13.width != AndroidUtilities.roundMessageSize || var13.height != AndroidUtilities.roundMessageSize) {
                        var3 = AndroidUtilities.roundMessageSize;
                        var13.height = var3;
                        var13.width = var3;
                        this.aspectRatioFrameLayout.setResizeMode(0);
                        this.videoPlayerContainer.setLayoutParams(var13);
                     }
                  } else {
                     this.videoPlayerContainer.setTag(2131230860, 1);
                     if (var13.width != var10.getImageWidth() || var13.height != var10.getImageHeight()) {
                        this.aspectRatioFrameLayout.setResizeMode(3);
                        var13.width = var10.getImageWidth();
                        var13.height = var10.getImageHeight();
                        this.videoPlayerContainer.setLayoutParams(var13);
                     }
                  }

                  super.fragmentView.invalidate();
                  this.videoPlayerContainer.invalidate();
                  var12 = true;
                  break;
               }
            }

            ++var3;
         }

         if (var1 && this.videoPlayerContainer != null) {
            MessageObject var11 = MediaController.getInstance().getPlayingMessageObject();
            if (var11 != null && var11.eventId == 0L) {
               if (!var12) {
                  if (this.checkTextureViewPosition && var11.isVideo()) {
                     MediaController.getInstance().cleanupPlayer(true, true);
                  } else {
                     this.videoPlayerContainer.setTranslationY((float)(-AndroidUtilities.roundMessageSize - 100));
                     super.fragmentView.invalidate();
                     if (var11 != null && (var11.isRoundVideo() || var11.isVideo())) {
                        if (!this.checkTextureViewPosition && PipRoundVideoView.getInstance() == null) {
                           this.scrollToMessageId(var11.getId(), 0, false, 0, true);
                        } else {
                           MediaController.getInstance().setCurrentVideoVisible(false);
                        }
                     }
                  }
               } else {
                  MediaController.getInstance().setCurrentVideoVisible(true);
                  if (!var11.isRoundVideo() && !this.scrollToVideo) {
                     this.chatListView.invalidate();
                  } else {
                     this.scrollToMessageId(var11.getId(), 0, false, 0, true);
                  }
               }
            }
         }
      }

   }

   public class ChatActivityAdapter extends RecyclerView.Adapter {
      private int botInfoRow = -1;
      private boolean isBot;
      private int loadingDownRow;
      private int loadingUpRow;
      private Context mContext;
      private int messagesEndRow;
      private int messagesStartRow;
      private int rowCount;

      public ChatActivityAdapter(Context var2) {
         this.mContext = var2;
         TLRPC.User var4 = ChatActivity.this.currentUser;
         boolean var3;
         if (var4 != null && var4.bot) {
            var3 = true;
         } else {
            var3 = false;
         }

         this.isBot = var3;
      }

      public int getItemCount() {
         int var1;
         if (ChatActivity.this.clearingHistory) {
            var1 = 0;
         } else {
            var1 = this.rowCount;
         }

         return var1;
      }

      public long getItemId(int var1) {
         return -1L;
      }

      public int getItemViewType(int var1) {
         int var2 = this.messagesStartRow;
         if (var1 >= var2 && var1 < this.messagesEndRow) {
            return ((MessageObject)ChatActivity.this.messages.get(var1 - var2)).contentType;
         } else {
            return var1 == this.botInfoRow ? 3 : 4;
         }
      }

      // $FF: synthetic method
      public void lambda$onCreateViewHolder$0$ChatActivity$ChatActivityAdapter(String var1) {
         if (var1.startsWith("@")) {
            MessagesController.getInstance(ChatActivity.access$27900(ChatActivity.this)).openByUserName(var1.substring(1), ChatActivity.this, 0);
         } else if (!var1.startsWith("#") && !var1.startsWith("$")) {
            if (var1.startsWith("/")) {
               ChatActivity.this.chatActivityEnterView.setCommand((MessageObject)null, var1, false, false);
               if (ChatActivity.this.chatActivityEnterView.getFieldText() == null) {
                  ChatActivity.this.hideFieldPanel(false);
               }
            }
         } else {
            DialogsActivity var2 = new DialogsActivity((Bundle)null);
            var2.setSearchString(var1);
            ChatActivity.this.presentFragment(var2);
         }

      }

      public void notifyDataSetChanged() {
         this.updateRows();

         try {
            super.notifyDataSetChanged();
         } catch (Exception var2) {
            FileLog.e((Throwable)var2);
         }

      }

      public void notifyItemChanged(int var1) {
         this.updateRows();

         try {
            super.notifyItemChanged(var1);
         } catch (Exception var3) {
            FileLog.e((Throwable)var3);
         }

      }

      public void notifyItemInserted(int var1) {
         this.updateRows();

         try {
            super.notifyItemInserted(var1);
         } catch (Exception var3) {
            FileLog.e((Throwable)var3);
         }

      }

      public void notifyItemMoved(int var1, int var2) {
         this.updateRows();

         try {
            super.notifyItemMoved(var1, var2);
         } catch (Exception var4) {
            FileLog.e((Throwable)var4);
         }

      }

      public void notifyItemRangeChanged(int var1, int var2) {
         this.updateRows();

         try {
            super.notifyItemRangeChanged(var1, var2);
         } catch (Exception var4) {
            FileLog.e((Throwable)var4);
         }

      }

      public void notifyItemRangeInserted(int var1, int var2) {
         this.updateRows();

         try {
            super.notifyItemRangeInserted(var1, var2);
         } catch (Exception var4) {
            FileLog.e((Throwable)var4);
         }

      }

      public void notifyItemRangeRemoved(int var1, int var2) {
         this.updateRows();

         try {
            super.notifyItemRangeRemoved(var1, var2);
         } catch (Exception var4) {
            FileLog.e((Throwable)var4);
         }

      }

      public void notifyItemRemoved(int var1) {
         this.updateRows();

         try {
            super.notifyItemRemoved(var1);
         } catch (Exception var3) {
            FileLog.e((Throwable)var3);
         }

      }

      public void onBindViewHolder(RecyclerView.ViewHolder var1, int var2) {
         if (var2 == this.botInfoRow) {
            BotHelpCell var3 = (BotHelpCell)var1.itemView;
            String var16;
            if (ChatActivity.this.botInfo.size() != 0) {
               var16 = ((TLRPC.BotInfo)ChatActivity.this.botInfo.get(ChatActivity.this.currentUser.id)).description;
            } else {
               var16 = null;
            }

            var3.setText(var16);
         } else {
            int var4 = this.loadingDownRow;
            boolean var5 = false;
            boolean var6 = false;
            if (var2 != var4 && var2 != this.loadingUpRow) {
               var4 = this.messagesStartRow;
               if (var2 >= var4 && var2 < this.messagesEndRow) {
                  MessageObject var20 = (MessageObject)ChatActivity.this.messages.get(var2 - var4);
                  View var7 = var1.itemView;
                  if (var7 instanceof ChatMessageCell) {
                     final ChatMessageCell var23 = (ChatMessageCell)var7;
                     ChatActivity var8 = ChatActivity.this;
                     if (var8.currentChat == null && !UserObject.isUserSelf(var8.currentUser)) {
                        var5 = false;
                     } else {
                        var5 = true;
                     }

                     var23.isChat = var5;
                     if (ChatObject.isChannel(ChatActivity.this.currentChat) && ChatActivity.this.currentChat.megagroup) {
                        var5 = true;
                     } else {
                        var5 = false;
                     }

                     boolean var11;
                     boolean var12;
                     MessageObject.GroupedMessages var24;
                     int var26;
                     label156: {
                        var23.isMegagroup = var5;
                        var24 = ChatActivity.this.getValidGroupedMessage(var20);
                        if (var24 != null) {
                           MessageObject.GroupedMessagePosition var9 = (MessageObject.GroupedMessagePosition)var24.positions.get(var20);
                           byte var10 = -100;
                           if (var9 != null) {
                              if ((var9.flags & 4) != 0) {
                                 var4 = var24.posArray.indexOf(var9) + var2 + 1;
                                 var11 = false;
                              } else {
                                 var4 = -100;
                                 var11 = true;
                              }

                              if ((var9.flags & 8) != 0) {
                                 var2 = var2 - var24.posArray.size() + var24.posArray.indexOf(var9);
                                 var12 = false;
                              } else {
                                 var12 = true;
                                 var2 = var10;
                              }
                              break label156;
                           }

                           var4 = -100;
                           var2 = var10;
                        } else {
                           var26 = var2 - 1;
                           var4 = var2 + 1;
                           var2 = var26;
                        }

                        var12 = false;
                        var11 = false;
                     }

                     var26 = this.getItemViewType(var2);
                     int var13 = this.getItemViewType(var4);
                     var5 = var12;
                     MessageObject var25;
                     if (!(var20.messageOwner.reply_markup instanceof TLRPC.TL_replyInlineMarkup)) {
                        var5 = var12;
                        if (var26 == var1.getItemViewType()) {
                           var25 = (MessageObject)ChatActivity.this.messages.get(var2 - this.messagesStartRow);
                           if (var25.isOutOwner() == var20.isOutOwner() && Math.abs(var25.messageOwner.date - var20.messageOwner.date) <= 300) {
                              var5 = true;
                           } else {
                              var5 = false;
                           }

                           if (var5) {
                              label183: {
                                 label142: {
                                    ChatActivity var14 = ChatActivity.this;
                                    if (var14.currentChat != null) {
                                       if (var25.messageOwner.from_id == var20.messageOwner.from_id) {
                                          break label142;
                                       }
                                    } else {
                                       if (!UserObject.isUserSelf(var14.currentUser)) {
                                          break label183;
                                       }

                                       if (var25.getFromId() == var20.getFromId()) {
                                          break label142;
                                       }
                                    }

                                    var5 = false;
                                    break label183;
                                 }

                                 var5 = true;
                              }
                           }
                        }
                     }

                     if (var13 != var1.getItemViewType()) {
                        var12 = var11;
                     } else {
                        var25 = (MessageObject)ChatActivity.this.messages.get(var4 - this.messagesStartRow);
                        if (!(var25.messageOwner.reply_markup instanceof TLRPC.TL_replyInlineMarkup) && var25.isOutOwner() == var20.isOutOwner() && Math.abs(var25.messageOwner.date - var20.messageOwner.date) <= 300) {
                           var12 = true;
                        } else {
                           var12 = false;
                        }

                        if (var12) {
                           label185: {
                              label119: {
                                 ChatActivity var18 = ChatActivity.this;
                                 if (var18.currentChat != null) {
                                    if (var25.messageOwner.from_id == var20.messageOwner.from_id) {
                                       break label119;
                                    }
                                 } else {
                                    if (!UserObject.isUserSelf(var18.currentUser)) {
                                       break label185;
                                    }

                                    if (var25.getFromId() == var20.getFromId()) {
                                       break label119;
                                    }
                                 }

                                 var12 = false;
                                 break label185;
                              }

                              var12 = true;
                           }
                        }
                     }

                     boolean var15 = var12;
                     var11 = var5;
                     if (ChatObject.isChannel(ChatActivity.this.currentChat)) {
                        var15 = var12;
                        var11 = var5;
                        if (ChatActivity.this.currentChat.megagroup) {
                           TLRPC.Message var19 = var20.messageOwner;
                           var15 = var12;
                           var11 = var5;
                           if (var19.from_id <= 0) {
                              TLRPC.MessageFwdHeader var21 = var19.fwd_from;
                              var15 = var12;
                              var11 = var5;
                              if (var21 != null) {
                                 var15 = var12;
                                 var11 = var5;
                                 if (var21.channel_post != 0) {
                                    var15 = false;
                                    var11 = false;
                                 }
                              }
                           }
                        }
                     }

                     var23.setMessageObject(var20, var24, var11, var15);
                     var5 = var6;
                     if (ChatActivity.this.highlightMessageId != Integer.MAX_VALUE) {
                        var5 = var6;
                        if (var20.getId() == ChatActivity.this.highlightMessageId) {
                           var5 = true;
                        }
                     }

                     var23.setHighlighted(var5);
                     if (ChatActivity.this.highlightMessageId != Integer.MAX_VALUE) {
                        ChatActivity.this.startMessageUnselect();
                     }

                     var2 = ChatActivity.this.animatingMessageObjects.indexOf(var20);
                     if (var2 != -1) {
                        ChatActivity.this.animatingMessageObjects.remove(var2);
                        var23.getViewTreeObserver().addOnPreDrawListener(new OnPreDrawListener() {
                           public boolean onPreDraw() {
                              PipRoundVideoView var1 = PipRoundVideoView.getInstance();
                              if (var1 != null) {
                                 var1.showTemporary(true);
                              }

                              var23.getViewTreeObserver().removeOnPreDrawListener(this);
                              ImageReceiver var2 = var23.getPhotoImage();
                              int var3 = var2.getImageWidth();
                              org.telegram.ui.Components.Rect var4 = ChatActivity.this.instantCameraView.getCameraRect();
                              float var5 = (float)var3 / var4.width;
                              int[] var7 = new int[2];
                              var23.setAlpha(0.0F);
                              var23.setTimeAlpha(0.0F);
                              var23.getLocationOnScreen(var7);
                              var7[0] += var2.getImageX();
                              var7[1] += var2.getImageY();
                              final FrameLayout var8 = ChatActivity.this.instantCameraView.getCameraContainer();
                              var8.setPivotX(0.0F);
                              var8.setPivotY(0.0F);
                              AnimatorSet var6 = new AnimatorSet();
                              var6.playTogether(new Animator[]{ObjectAnimator.ofFloat(ChatActivity.this.instantCameraView, View.ALPHA, new float[]{0.0F}), ObjectAnimator.ofFloat(var8, View.SCALE_X, new float[]{var5}), ObjectAnimator.ofFloat(var8, View.SCALE_Y, new float[]{var5}), ObjectAnimator.ofFloat(var8, View.TRANSLATION_X, new float[]{(float)var7[0] - var4.x}), ObjectAnimator.ofFloat(var8, View.TRANSLATION_Y, new float[]{(float)var7[1] - var4.y}), ObjectAnimator.ofFloat(ChatActivity.this.instantCameraView.getSwitchButtonView(), View.ALPHA, new float[]{0.0F}), ObjectAnimator.ofInt(ChatActivity.this.instantCameraView.getPaint(), AnimationProperties.PAINT_ALPHA, new int[]{0}), ObjectAnimator.ofFloat(ChatActivity.this.instantCameraView.getMuteImageView(), View.ALPHA, new float[]{0.0F})});
                              var6.setDuration(180L);
                              var6.setInterpolator(new DecelerateInterpolator());
                              var6.addListener(new AnimatorListenerAdapter() {
                                 public void onAnimationEnd(Animator var1) {
                                    var23.setAlpha(1.0F);
                                    AnimationProperties.FloatProperty var2 = new AnimationProperties.FloatProperty("alpha") {
                                       public Float get(ChatMessageCell var1) {
                                          return var1.getTimeAlpha();
                                       }

                                       public void setValue(ChatMessageCell var1, float var2) {
                                          var1.setTimeAlpha(var2);
                                       }
                                    };
                                    AnimatorSet var3 = new AnimatorSet();
                                    var3.playTogether(new Animator[]{ObjectAnimator.ofFloat(var8, View.ALPHA, new float[]{0.0F}), ObjectAnimator.ofFloat(var23, var2, new float[]{1.0F})});
                                    var3.setDuration(100L);
                                    var3.setInterpolator(new DecelerateInterpolator());
                                    var3.addListener(new AnimatorListenerAdapter() {
                                       public void onAnimationEnd(Animator var1) {
                                          ChatActivity.this.instantCameraView.hideCamera(true);
                                          ChatActivity.this.instantCameraView.setVisibility(4);
                                       }
                                    });
                                    var3.start();
                                 }
                              });
                              var6.start();
                              return true;
                           }
                        });
                     }
                  } else if (var7 instanceof ChatActionCell) {
                     ChatActionCell var22 = (ChatActionCell)var7;
                     var22.setMessageObject(var20);
                     var22.setAlpha(1.0F);
                  } else if (var7 instanceof ChatUnreadCell) {
                     ((ChatUnreadCell)var7).setText(LocaleController.getString("UnreadMessages", 2131560945));
                     if (ChatActivity.this.createUnreadMessageAfterId != 0) {
                        ChatActivity.this.createUnreadMessageAfterId = 0;
                     }
                  }
               }
            } else {
               ChatLoadingCell var17 = (ChatLoadingCell)var1.itemView;
               if (ChatActivity.this.loadsCount > 1) {
                  var5 = true;
               }

               var17.setProgressVisible(var5);
            }
         }

      }

      public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup var1, int var2) {
         Object var5;
         if (var2 == 0) {
            Object var3;
            if (!ChatActivity.this.chatMessageCellsCache.isEmpty()) {
               var3 = (View)ChatActivity.this.chatMessageCellsCache.get(0);
               ChatActivity.this.chatMessageCellsCache.remove(0);
            } else {
               var3 = new ChatMessageCell(this.mContext);
            }

            ChatMessageCell var4 = (ChatMessageCell)var3;
            var4.setDelegate(new ChatMessageCell.ChatMessageCellDelegate() {
               public boolean canPerformActions() {
                  boolean var1;
                  if (ChatActivity.access$24900(ChatActivity.this) != null && !ChatActivity.access$25000(ChatActivity.this).isActionModeShowed()) {
                     var1 = true;
                  } else {
                     var1 = false;
                  }

                  return var1;
               }

               public void didLongPress(ChatMessageCell var1, float var2, float var3) {
                  ChatActivity.this.createMenu(var1, false, false, var2, var3);
               }

               public void didPressBotButton(ChatMessageCell var1, TLRPC.KeyboardButton var2) {
                  if (ChatActivity.this.getParentActivity() != null && (ChatActivity.this.bottomOverlayChat.getVisibility() != 0 || var2 instanceof TLRPC.TL_keyboardButtonSwitchInline || var2 instanceof TLRPC.TL_keyboardButtonCallback || var2 instanceof TLRPC.TL_keyboardButtonGame || var2 instanceof TLRPC.TL_keyboardButtonUrl || var2 instanceof TLRPC.TL_keyboardButtonBuy || var2 instanceof TLRPC.TL_keyboardButtonUrlAuth)) {
                     ChatActivity.this.chatActivityEnterView.didPressedBotButton(var2, var1.getMessageObject(), var1.getMessageObject());
                  }

               }

               public void didPressCancelSendButton(ChatMessageCell var1) {
                  MessageObject var2 = var1.getMessageObject();
                  if (var2.messageOwner.send_state != 0) {
                     SendMessagesHelper.getInstance(ChatActivity.access$24800(ChatActivity.this)).cancelSendingMessage(var2);
                  }

               }

               public void didPressChannelAvatar(ChatMessageCell var1, TLRPC.Chat var2, int var3, float var4, float var5) {
                  if (ChatActivity.access$24000(ChatActivity.this).isActionModeShowed()) {
                     ChatActivity.this.processRowSelect(var1, true, var4, var5);
                  } else {
                     if (var2 != null && var2 != ChatActivity.this.currentChat) {
                        Bundle var6 = new Bundle();
                        var6.putInt("chat_id", var2.id);
                        if (var3 != 0) {
                           var6.putInt("message_id", var3);
                        }

                        if (MessagesController.getInstance(ChatActivity.access$24100(ChatActivity.this)).checkCanOpenChat(var6, ChatActivity.this, var1.getMessageObject())) {
                           ChatActivity.this.presentFragment(new ChatActivity(var6));
                        }
                     }

                  }
               }

               public void didPressHiddenForward(ChatMessageCell var1) {
                  ChatActivity.this.showForwardHint(var1);
               }

               public void didPressImage(ChatMessageCell var1, float var2, float var3) {
                  MessageObject var4 = var1.getMessageObject();
                  if (var4.isSendError()) {
                     ChatActivity.this.createMenu(var1, false, false, var2, var3);
                  } else if (!var4.isSending()) {
                     if (var4.needDrawBluredPreview()) {
                        if (ChatActivity.this.sendSecretMessageRead(var4)) {
                           var1.invalidate();
                        }

                        SecretMediaViewer.getInstance().setParentActivity(ChatActivity.this.getParentActivity());
                        SecretMediaViewer.getInstance().openMedia(var4, ChatActivity.this.photoViewerProvider);
                     } else {
                        int var5 = var4.type;
                        Activity var6 = null;
                        MessageObject var7 = null;
                        if (var5 == 13) {
                           ChatActivity var8 = ChatActivity.this;
                           var6 = var8.getParentActivity();
                           ChatActivity var9 = ChatActivity.this;
                           TLRPC.InputStickerSet var33 = var4.getInputStickerSet();
                           ChatActivityEnterView var28 = var7;
                           if (ChatActivity.this.bottomOverlayChat.getVisibility() != 0) {
                              label255: {
                                 TLRPC.Chat var10 = ChatActivity.this.currentChat;
                                 if (var10 != null) {
                                    var28 = var7;
                                    if (!ChatObject.canSendStickers(var10)) {
                                       break label255;
                                    }
                                 }

                                 var28 = ChatActivity.this.chatActivityEnterView;
                              }
                           }

                           var8.showDialog(new StickersAlert(var6, var9, var33, (TLRPC.TL_messages_stickerSet)null, var28));
                        } else {
                           boolean var11 = var4.isVideo();
                           boolean var35 = false;
                           long var12 = 0L;
                           long var16;
                           PhotoViewer var31;
                           if (!var11) {
                              int var14 = var4.type;
                              if (var14 != 1 && (var14 != 0 || var4.isWebpageDocument()) && !var4.isGif()) {
                                 int var15 = var4.type;
                                 byte var47 = 3;
                                 File var32;
                                 File var43;
                                 if (var15 == 3) {
                                    ChatActivity.this.sendSecretMessageRead(var4);
                                    var32 = var6;

                                    Exception var10000;
                                    label248: {
                                       boolean var10001;
                                       label249: {
                                          try {
                                             if (var4.messageOwner.attachPath == null) {
                                                break label249;
                                             }
                                          } catch (Exception var27) {
                                             var10000 = var27;
                                             var10001 = false;
                                             break label248;
                                          }

                                          var32 = var6;

                                          try {
                                             if (var4.messageOwner.attachPath.length() != 0) {
                                                var32 = new File(var4.messageOwner.attachPath);
                                             }
                                          } catch (Exception var26) {
                                             var10000 = var26;
                                             var10001 = false;
                                             break label248;
                                          }
                                       }

                                       label209: {
                                          if (var32 != null) {
                                             var43 = var32;

                                             try {
                                                if (var32.exists()) {
                                                   break label209;
                                                }
                                             } catch (Exception var25) {
                                                var10000 = var25;
                                                var10001 = false;
                                                break label248;
                                             }
                                          }

                                          try {
                                             var43 = FileLoader.getPathToMessage(var4.messageOwner);
                                          } catch (Exception var24) {
                                             var10000 = var24;
                                             var10001 = false;
                                             break label248;
                                          }
                                       }

                                       Intent var34;
                                       try {
                                          var34 = new Intent("android.intent.action.VIEW");
                                          var5 = VERSION.SDK_INT;
                                       } catch (Exception var23) {
                                          var10000 = var23;
                                          var10001 = false;
                                          break label248;
                                       }

                                       if (var5 >= 24) {
                                          try {
                                             var34.setFlags(1);
                                             var34.setDataAndType(FileProvider.getUriForFile(ChatActivity.this.getParentActivity(), "org.telegram.messenger.provider", var43), "video/mp4");
                                          } catch (Exception var22) {
                                             var10000 = var22;
                                             var10001 = false;
                                             break label248;
                                          }
                                       } else {
                                          try {
                                             var34.setDataAndType(Uri.fromFile(var43), "video/mp4");
                                          } catch (Exception var21) {
                                             var10000 = var21;
                                             var10001 = false;
                                             break label248;
                                          }
                                       }

                                       try {
                                          ChatActivity.this.getParentActivity().startActivityForResult(var34, 500);
                                          return;
                                       } catch (Exception var20) {
                                          var10000 = var20;
                                          var10001 = false;
                                       }
                                    }

                                    Exception var36 = var10000;
                                    FileLog.e((Throwable)var36);
                                    ChatActivity.this.alertUserOpenError(var4);
                                    return;
                                 } else if (var15 == 4) {
                                    if (!AndroidUtilities.isGoogleMapsInstalled(ChatActivity.this)) {
                                       return;
                                    }

                                    LocationActivity var37;
                                    if (var4.isLiveLocation()) {
                                       var37 = new LocationActivity(2);
                                       var37.setMessageObject(var4);
                                       var37.setDelegate(ChatActivity.this);
                                       ChatActivity.this.presentFragment(var37);
                                    } else {
                                       byte var38;
                                       if (ChatActivity.this.currentEncryptedChat == null) {
                                          var38 = var47;
                                       } else {
                                          var38 = 0;
                                       }

                                       var37 = new LocationActivity(var38);
                                       var37.setMessageObject(var4);
                                       var37.setDelegate(ChatActivity.this);
                                       ChatActivity.this.presentFragment(var37);
                                    }

                                    return;
                                 } else {
                                    if (var15 == 9 || var15 == 0) {
                                       if (var4.getDocumentName().toLowerCase().endsWith("attheme")) {
                                          label181: {
                                             String var39 = var4.messageOwner.attachPath;
                                             if (var39 != null && var39.length() != 0) {
                                                var32 = new File(var4.messageOwner.attachPath);
                                                if (var32.exists()) {
                                                   break label181;
                                                }
                                             }

                                             var32 = null;
                                          }

                                          var43 = var32;
                                          if (var32 == null) {
                                             File var41 = FileLoader.getPathToMessage(var4.messageOwner);
                                             var43 = var32;
                                             if (var41.exists()) {
                                                var43 = var41;
                                             }
                                          }

                                          if (ChatActivity.this.chatLayoutManager != null) {
                                             var14 = ChatActivity.this.chatLayoutManager.findFirstVisibleItemPosition();
                                             if (var14 != 0) {
                                                ChatActivity.this.scrollToPositionOnRecreate = var14;
                                                RecyclerListView.Holder var42 = (RecyclerListView.Holder)ChatActivity.this.chatListView.findViewHolderForAdapterPosition(ChatActivity.this.scrollToPositionOnRecreate);
                                                if (var42 != null) {
                                                   ChatActivity var44 = ChatActivity.this;
                                                   var44.scrollToOffsetOnRecreate = var44.chatListView.getMeasuredHeight() - var42.itemView.getBottom() - ChatActivity.this.chatListView.getPaddingBottom();
                                                } else {
                                                   ChatActivity.this.scrollToPositionOnRecreate = -1;
                                                }
                                             } else {
                                                ChatActivity.this.scrollToPositionOnRecreate = -1;
                                             }
                                          }

                                          Theme.ThemeInfo var45 = Theme.applyThemeFile(var43, var4.getDocumentName(), true);
                                          if (var45 != null) {
                                             ChatActivity.this.presentFragment(new ThemePreviewActivity(var43, var45));
                                             return;
                                          }

                                          ChatActivity.this.scrollToPositionOnRecreate = -1;
                                       }

                                       if (var4.canPreviewDocument()) {
                                          PhotoViewer.getInstance().setParentActivity(ChatActivity.this.getParentActivity());
                                          var31 = PhotoViewer.getInstance();
                                          if (var4.type != 0) {
                                             var16 = ChatActivity.this.dialog_id;
                                          } else {
                                             var16 = 0L;
                                          }

                                          if (var4.type != 0) {
                                             var12 = ChatActivity.this.mergeDialogId;
                                          }

                                          var31.openPhoto(var4, var16, var12, ChatActivity.this.photoViewerProvider);
                                          var35 = true;
                                       }

                                       if (!var35) {
                                          try {
                                             AndroidUtilities.openForView(var4, ChatActivity.this.getParentActivity());
                                          } catch (Exception var19) {
                                             FileLog.e((Throwable)var19);
                                             ChatActivity.this.alertUserOpenError(var4);
                                          }

                                          return;
                                       }

                                       return;
                                    }

                                    return;
                                 }
                              }
                           }

                           if (var4.isVideo()) {
                              ChatActivity.this.sendSecretMessageRead(var4);
                           }

                           PhotoViewer.getInstance().setParentActivity(ChatActivity.this.getParentActivity());
                           var7 = MediaController.getInstance().getPlayingMessageObject();
                           if (var7 != null && var7.isVideo()) {
                              FileLoader.getInstance(ChatActivity.access$25700(ChatActivity.this)).setLoadingVideoForPlayer(var7.getDocument(), false);
                              if (var7.equals(var4)) {
                                 AnimatedFileDrawable var29 = var1.getPhotoImage().getAnimation();
                                 if (var29 != null && ChatActivity.this.videoTextureView != null && ChatActivity.this.videoPlayerContainer.getTag() != null) {
                                    Bitmap var40 = var29.getAnimatedBitmap();
                                    if (var40 != null) {
                                       try {
                                          Bitmap var46 = ChatActivity.this.videoTextureView.getBitmap(var40.getWidth(), var40.getHeight());
                                          Canvas var30 = new Canvas(var40);
                                          var30.drawBitmap(var46, 0.0F, 0.0F, (Paint)null);
                                          var46.recycle();
                                       } catch (Throwable var18) {
                                          FileLog.e(var18);
                                       }
                                    }
                                 }
                              }

                              MediaController.getInstance().cleanupPlayer(true, true, false, var7.equals(var4));
                           }

                           var31 = PhotoViewer.getInstance();
                           if (var4.type != 0) {
                              var16 = ChatActivity.this.dialog_id;
                           } else {
                              var16 = 0L;
                           }

                           if (var4.type != 0) {
                              var12 = ChatActivity.this.mergeDialogId;
                           }

                           if (var31.openPhoto(var4, var16, var12, ChatActivity.this.photoViewerProvider)) {
                              PhotoViewer.getInstance().setParentChatActivity(ChatActivity.this);
                           }

                           if (ChatActivity.this.noSoundHintView != null) {
                              ChatActivity.this.noSoundHintView.hide();
                           }

                           if (ChatActivity.this.forwardHintView != null) {
                              ChatActivity.this.forwardHintView.hide();
                           }

                           MediaController.getInstance().resetGoingToShowMessageObject();
                        }
                     }

                  }
               }

               public void didPressInstantButton(ChatMessageCell var1, int var2) {
                  MessageObject var4 = var1.getMessageObject();
                  TLRPC.MessageMedia var3;
                  if (var2 == 0) {
                     var3 = var4.messageOwner.media;
                     if (var3 != null) {
                        TLRPC.WebPage var6 = var3.webpage;
                        if (var6 != null && var6.cached_page != null) {
                           ArticleViewer.getInstance().setParentActivity(ChatActivity.this.getParentActivity(), ChatActivity.this);
                           ArticleViewer.getInstance().open(var4);
                        }
                     }
                  } else if (var2 == 5) {
                     ChatActivity var7 = ChatActivity.this;
                     TLRPC.MessageMedia var5 = var4.messageOwner.media;
                     var7.openVCard(var5.vcard, var5.first_name, var5.last_name);
                  } else {
                     var3 = var4.messageOwner.media;
                     if (var3 != null && var3.webpage != null) {
                        Browser.openUrl(ChatActivity.this.getParentActivity(), (String)var4.messageOwner.media.webpage.url);
                     }
                  }

               }

               public void didPressOther(ChatMessageCell var1, float var2, float var3) {
                  if (var1.getMessageObject().type == 16) {
                     ChatActivity var4 = ChatActivity.this;
                     TLRPC.User var5 = var4.currentUser;
                     if (var5 != null) {
                        VoIPHelper.startCall(var5, var4.getParentActivity(), MessagesController.getInstance(ChatActivity.access$24300(ChatActivity.this)).getUserFull(ChatActivity.this.currentUser.id));
                     }
                  } else {
                     ChatActivity.this.createMenu(var1, true, false, var2, var3, false);
                  }

               }

               public void didPressReplyMessage(ChatMessageCell var1, int var2) {
                  MessageObject var3 = var1.getMessageObject();
                  ChatActivity var6 = ChatActivity.this;
                  int var4 = var3.getId();
                  byte var5;
                  if (var3.getDialogId() == ChatActivity.this.mergeDialogId) {
                     var5 = 1;
                  } else {
                     var5 = 0;
                  }

                  var6.scrollToMessageId(var2, var4, true, var5, false);
               }

               public void didPressShare(ChatMessageCell var1) {
                  if (ChatActivity.this.getParentActivity() != null) {
                     ChatActivityEnterView var2 = ChatActivity.this.chatActivityEnterView;
                     if (var2 != null) {
                        var2.closeKeyboard();
                     }

                     MessageObject var3 = var1.getMessageObject();
                     if (UserObject.isUserSelf(ChatActivity.this.currentUser) && var3.messageOwner.fwd_from.saved_from_peer != null) {
                        Bundle var9 = new Bundle();
                        TLRPC.Peer var10 = var3.messageOwner.fwd_from.saved_from_peer;
                        int var4 = var10.channel_id;
                        if (var4 != 0) {
                           var9.putInt("chat_id", var4);
                        } else {
                           var4 = var10.chat_id;
                           if (var4 != 0) {
                              var9.putInt("chat_id", var4);
                           } else {
                              var4 = var10.user_id;
                              if (var4 != 0) {
                                 var9.putInt("user_id", var4);
                              }
                           }
                        }

                        var9.putInt("message_id", var3.messageOwner.fwd_from.saved_from_msg_id);
                        if (MessagesController.getInstance(ChatActivity.access$23100(ChatActivity.this)).checkCanOpenChat(var9, ChatActivity.this)) {
                           ChatActivity.this.presentFragment(new ChatActivity(var9));
                        }
                     } else {
                        var2 = null;
                        ArrayList var6 = var2;
                        if (var3.getGroupId() != 0L) {
                           MessageObject.GroupedMessages var5 = (MessageObject.GroupedMessages)ChatActivity.this.groupedMessagesMap.get(var3.getGroupId());
                           var6 = var2;
                           if (var5 != null) {
                              var6 = var5.messages;
                           }
                        }

                        ArrayList var7 = var6;
                        if (var6 == null) {
                           var7 = new ArrayList();
                           var7.add(var3);
                        }

                        ChatActivity.ChatActivityAdapter var8 = ChatActivityAdapter.this;
                        ChatActivity.this.showDialog(new ShareAlert(var8.mContext, var7, (String)null, ChatObject.isChannel(ChatActivity.this.currentChat), (String)null, false) {
                           public void dismissInternal() {
                              super.dismissInternal();
                              AndroidUtilities.requestAdjustResize(ChatActivity.this.getParentActivity(), ChatActivity.access$23400(ChatActivity.this));
                              if (ChatActivity.this.chatActivityEnterView.getVisibility() == 0) {
                                 ChatActivity.access$23500(ChatActivity.this).requestLayout();
                              }

                           }
                        });
                        AndroidUtilities.setAdjustResizeToNothing(ChatActivity.this.getParentActivity(), ChatActivity.access$23600(ChatActivity.this));
                        ChatActivity.access$23700(ChatActivity.this).requestLayout();
                     }

                  }
               }

               public void didPressUrl(MessageObject var1, CharacterStyle var2, boolean var3) {
                  if (var2 != null && ChatActivity.this.getParentActivity() != null) {
                     boolean var4 = var2 instanceof URLSpanMono;
                     boolean var5 = false;
                     if (var4) {
                        ((URLSpanMono)var2).copyToClipboard();
                        Toast.makeText(ChatActivity.this.getParentActivity(), LocaleController.getString("TextCopied", 2131560887), 0).show();
                     } else if (var2 instanceof URLSpanUserMention) {
                        TLRPC.User var17 = MessagesController.getInstance(ChatActivity.access$25100(ChatActivity.this)).getUser(Utilities.parseInt(((URLSpanUserMention)var2).getURL()));
                        if (var17 != null) {
                           MessagesController.openChatOrProfileWith(var17, (TLRPC.Chat)null, ChatActivity.this, 0, false);
                        }
                     } else {
                        boolean var6 = var2 instanceof URLSpanNoUnderline;
                        var4 = true;
                        String var10;
                        String var16;
                        if (var6) {
                           var16 = ((URLSpanNoUnderline)var2).getURL();
                           if (var16.startsWith("@")) {
                              var10 = var16.substring(1).toLowerCase();
                              TLRPC.Chat var19 = ChatActivity.this.currentChat;
                              TLRPC.User var20;
                              if (var19 == null || TextUtils.isEmpty(var19.username) || !var10.equals(ChatActivity.this.currentChat.username.toLowerCase())) {
                                 var20 = ChatActivity.this.currentUser;
                                 if (var20 == null || TextUtils.isEmpty(var20.username) || !var10.equals(ChatActivity.this.currentUser.username.toLowerCase())) {
                                    MessagesController.getInstance(ChatActivity.access$25200(ChatActivity.this)).openByUserName(var10, ChatActivity.this, 0);
                                    return;
                                 }
                              }

                              Bundle var11 = new Bundle();
                              ChatActivity var21 = ChatActivity.this;
                              TLRPC.Chat var23 = var21.currentChat;
                              if (var23 != null) {
                                 var11.putInt("chat_id", var23.id);
                              } else {
                                 var20 = var21.currentUser;
                                 if (var20 != null) {
                                    var11.putInt("user_id", var20.id);
                                    var21 = ChatActivity.this;
                                    if (var21.currentEncryptedChat != null) {
                                       var11.putLong("dialog_id", var21.dialog_id);
                                    }
                                 }
                              }

                              ProfileActivity var13 = new ProfileActivity(var11);
                              var13.setPlayProfileAnimation(true);
                              var13.setChatInfo(ChatActivity.this.chatInfo);
                              var13.setUserInfo(ChatActivity.this.userInfo);
                              ChatActivity.this.presentFragment(var13);
                           } else if (!var16.startsWith("#") && !var16.startsWith("$")) {
                              if (var16.startsWith("/") && URLSpanBotCommand.enabled) {
                                 ChatActivity var25 = ChatActivity.this;
                                 ChatActivityEnterView var24 = var25.chatActivityEnterView;
                                 TLRPC.Chat var26 = var25.currentChat;
                                 if (var26 != null && var26.megagroup) {
                                    var5 = var4;
                                 } else {
                                    var5 = false;
                                 }

                                 var24.setCommand(var1, var16, var3, var5);
                                 if (!var3 && ChatActivity.this.chatActivityEnterView.getFieldText() == null) {
                                    ChatActivity.this.hideFieldPanel(false);
                                 }
                              }
                           } else if (ChatObject.isChannel(ChatActivity.this.currentChat)) {
                              ChatActivity.this.openSearchWithText(var16);
                           } else {
                              DialogsActivity var15 = new DialogsActivity((Bundle)null);
                              var15.setSearchString(var16);
                              ChatActivity.this.presentFragment(var15);
                           }
                        } else {
                           String var7 = ((URLSpan)var2).getURL();
                           String var8;
                           if (var3) {
                              BottomSheet.Builder var18 = new BottomSheet.Builder(ChatActivity.this.getParentActivity());
                              var18.setTitle(var7);
                              var10 = LocaleController.getString("Open", 2131560110);
                              var8 = LocaleController.getString("Copy", 2131559163);
                              _$$Lambda$ChatActivity$ChatActivityAdapter$1$mvBU2f0l49KzASBTxcsB_CaLwnI var22 = new _$$Lambda$ChatActivity$ChatActivityAdapter$1$mvBU2f0l49KzASBTxcsB_CaLwnI(this, var7);
                              var18.setItems(new CharSequence[]{var10, var8}, var22);
                              ChatActivity.this.showDialog(var18.create());
                           } else if (var2 instanceof URLSpanReplacement && (var7 == null || !var7.startsWith("mailto:"))) {
                              ChatActivity.this.showOpenUrlAlert(var7, true);
                           } else if (!(var2 instanceof URLSpan)) {
                              if (var2 instanceof ClickableSpan) {
                                 ((ClickableSpan)var2).onClick(ChatActivity.access$25400(ChatActivity.this));
                              }
                           } else {
                              TLRPC.MessageMedia var12 = var1.messageOwner.media;
                              if (var12 instanceof TLRPC.TL_messageMediaWebPage) {
                                 TLRPC.WebPage var14 = var12.webpage;
                                 if (var14 != null && var14.cached_page != null) {
                                    var16 = var7.toLowerCase();
                                    var8 = var1.messageOwner.media.webpage.url.toLowerCase();
                                    if ((var16.contains("telegram.org/blog") || var16.contains("telegra.ph") || var16.contains("t.me/iv")) && (var16.contains(var8) || var8.contains(var16))) {
                                       ArticleViewer.getInstance().setParentActivity(ChatActivity.this.getParentActivity(), ChatActivity.this);
                                       ArticleViewer.getInstance().open(var1);
                                       return;
                                    }
                                 }
                              }

                              Activity var9 = ChatActivity.this.getParentActivity();
                              var3 = var5;
                              if (ChatActivity.this.inlineReturn == 0L) {
                                 var3 = true;
                              }

                              Browser.openUrl(var9, (String)var7, var3);
                           }
                        }
                     }
                  }

               }

               public void didPressUserAvatar(ChatMessageCell var1, TLRPC.User var2, float var3, float var4) {
                  boolean var5 = ChatActivity.access$24500(ChatActivity.this).isActionModeShowed();
                  boolean var6 = true;
                  if (var5) {
                     ChatActivity.this.processRowSelect(var1, true, var3, var4);
                  } else {
                     if (var2 != null && var2.id != UserConfig.getInstance(ChatActivity.access$24600(ChatActivity.this)).getClientUserId()) {
                        Bundle var8 = new Bundle();
                        var8.putInt("user_id", var2.id);
                        ProfileActivity var7 = new ProfileActivity(var8);
                        TLRPC.User var9 = ChatActivity.this.currentUser;
                        if (var9 == null || var9.id != var2.id) {
                           var6 = false;
                        }

                        var7.setPlayProfileAnimation(var6);
                        ChatActivity.this.presentFragment(var7);
                     }

                  }
               }

               public void didPressViaBot(ChatMessageCell var1, String var2) {
                  if ((ChatActivity.this.bottomOverlayChat == null || ChatActivity.this.bottomOverlayChat.getVisibility() != 0) && (ChatActivity.this.bottomOverlay == null || ChatActivity.this.bottomOverlay.getVisibility() != 0)) {
                     if (ChatActivity.this.chatActivityEnterView != null && var2 != null && var2.length() > 0) {
                        ChatActivityEnterView var4 = ChatActivity.this.chatActivityEnterView;
                        StringBuilder var3 = new StringBuilder();
                        var3.append("@");
                        var3.append(var2);
                        var3.append(" ");
                        var4.setFieldText(var3.toString());
                        ChatActivity.this.chatActivityEnterView.openKeyboard();
                     }

                  }
               }

               public void didPressVoteButton(ChatMessageCell var1, TLRPC.TL_pollAnswer var2) {
                  SendMessagesHelper.getInstance(ChatActivity.access$24700(ChatActivity.this)).sendVote(var1.getMessageObject(), var2, (Runnable)null);
               }

               public void didStartVideoStream(MessageObject var1) {
                  if (var1.isVideo()) {
                     ChatActivity.this.sendSecretMessageRead(var1);
                  }

               }

               public boolean isChatAdminCell(int var1) {
                  if (ChatObject.isChannel(ChatActivity.this.currentChat)) {
                     ChatActivity var2 = ChatActivity.this;
                     if (var2.currentChat.megagroup) {
                        return MessagesController.getInstance(ChatActivity.access$26000(var2)).isChannelAdmin(ChatActivity.this.currentChat.id, var1);
                     }
                  }

                  return false;
               }

               // $FF: synthetic method
               public void lambda$didPressUrl$0$ChatActivity$ChatActivityAdapter$1(String var1, DialogInterface var2, int var3) {
                  boolean var4 = true;
                  if (var3 == 0) {
                     Activity var5 = ChatActivity.this.getParentActivity();
                     if (ChatActivity.this.inlineReturn != 0L) {
                        var4 = false;
                     }

                     Browser.openUrl(var5, (String)var1, var4, false);
                  } else if (var3 == 1) {
                     String var6;
                     if (var1.startsWith("mailto:")) {
                        var6 = var1.substring(7);
                     } else {
                        var6 = var1;
                        if (var1.startsWith("tel:")) {
                           var6 = var1.substring(4);
                        }
                     }

                     AndroidUtilities.addToClipboard(var6);
                  }

               }

               public void needOpenWebView(String var1, String var2, String var3, String var4, int var5, int var6) {
                  try {
                     EmbedBottomSheet.show(ChatActivityAdapter.this.mContext, var2, var3, var4, var1, var5, var6);
                  } catch (Throwable var7) {
                     FileLog.e(var7);
                  }

               }

               public boolean needPlayMessage(MessageObject var1) {
                  if (!var1.isVoice() && !var1.isRoundVideo()) {
                     return var1.isMusic() ? MediaController.getInstance().setPlaylist(ChatActivity.this.messages, var1) : false;
                  } else {
                     boolean var2 = MediaController.getInstance().playMessage(var1);
                     MediaController var3 = MediaController.getInstance();
                     ArrayList var4;
                     if (var2) {
                        var4 = ChatActivity.this.createVoiceMessagesPlaylist(var1, false);
                     } else {
                        var4 = null;
                     }

                     var3.setVoiceMessagesPlaylist(var4, false);
                     return var2;
                  }
               }

               public void videoTimerReached() {
                  ChatActivity.this.showNoSoundHint();
               }
            });
            var5 = var3;
            if (ChatActivity.this.currentEncryptedChat == null) {
               var4.setAllowAssistant(true);
               var5 = var3;
            }
         } else if (var2 == 1) {
            var5 = new ChatActionCell(this.mContext);
            ((ChatActionCell)var5).setDelegate(new ChatActionCell.ChatActionCellDelegate() {
               public void didClickImage(ChatActionCell var1) {
                  MessageObject var3 = var1.getMessageObject();
                  PhotoViewer.getInstance().setParentActivity(ChatActivity.this.getParentActivity());
                  TLRPC.PhotoSize var2 = FileLoader.getClosestPhotoSizeWithSize(var3.photoThumbs, 640);
                  if (var2 != null) {
                     PhotoViewer.getInstance().openPhoto(var2.location, ChatActivity.this.photoViewerProvider);
                  } else {
                     PhotoViewer.getInstance().openPhoto(var3, 0L, 0L, ChatActivity.this.photoViewerProvider);
                  }

               }

               public void didLongPress(ChatActionCell var1, float var2, float var3) {
                  ChatActivity.this.createMenu(var1, false, false, var2, var3);
               }

               public void didPressBotButton(MessageObject var1, TLRPC.KeyboardButton var2) {
                  if (ChatActivity.this.getParentActivity() != null && (ChatActivity.this.bottomOverlayChat.getVisibility() != 0 || var2 instanceof TLRPC.TL_keyboardButtonSwitchInline || var2 instanceof TLRPC.TL_keyboardButtonCallback || var2 instanceof TLRPC.TL_keyboardButtonGame || var2 instanceof TLRPC.TL_keyboardButtonUrl || var2 instanceof TLRPC.TL_keyboardButtonBuy || var2 instanceof TLRPC.TL_keyboardButtonUrlAuth)) {
                     ChatActivity.this.chatActivityEnterView.didPressedBotButton(var2, var1, var1);
                  }

               }

               public void didPressReplyMessage(ChatActionCell var1, int var2) {
                  MessageObject var6 = var1.getMessageObject();
                  ChatActivity var3 = ChatActivity.this;
                  int var4 = var6.getId();
                  byte var5;
                  if (var6.getDialogId() == ChatActivity.this.mergeDialogId) {
                     var5 = 1;
                  } else {
                     var5 = 0;
                  }

                  var3.scrollToMessageId(var2, var4, true, var5, false);
               }

               public void needOpenUserProfile(int var1) {
                  Bundle var2;
                  if (var1 < 0) {
                     var2 = new Bundle();
                     var2.putInt("chat_id", -var1);
                     if (MessagesController.getInstance(ChatActivity.access$26100(ChatActivity.this)).checkCanOpenChat(var2, ChatActivity.this)) {
                        ChatActivity.this.presentFragment(new ChatActivity(var2));
                     }
                  } else if (var1 != UserConfig.getInstance(ChatActivity.access$26200(ChatActivity.this)).getClientUserId()) {
                     var2 = new Bundle();
                     var2.putInt("user_id", var1);
                     ChatActivity var3 = ChatActivity.this;
                     if (var3.currentEncryptedChat != null && var1 == var3.currentUser.id) {
                        var2.putLong("dialog_id", var3.dialog_id);
                     }

                     ProfileActivity var5 = new ProfileActivity(var2);
                     TLRPC.User var6 = ChatActivity.this.currentUser;
                     boolean var4;
                     if (var6 != null && var6.id == var1) {
                        var4 = true;
                     } else {
                        var4 = false;
                     }

                     var5.setPlayProfileAnimation(var4);
                     ChatActivity.this.presentFragment(var5);
                  }

               }
            });
         } else if (var2 == 2) {
            var5 = new ChatUnreadCell(this.mContext);
         } else if (var2 == 3) {
            var5 = new BotHelpCell(this.mContext);
            ((BotHelpCell)var5).setDelegate(new _$$Lambda$ChatActivity$ChatActivityAdapter$XvP34CBh8veH5SfzBXUoiQ29tr8(this));
         } else if (var2 == 4) {
            var5 = new ChatLoadingCell(this.mContext);
         } else {
            var5 = null;
         }

         ((View)var5).setLayoutParams(new RecyclerView.LayoutParams(-1, -2));
         return new RecyclerListView.Holder((View)var5);
      }

      public void onViewAttachedToWindow(RecyclerView.ViewHolder var1) {
         View var2 = var1.itemView;
         boolean var3 = var2 instanceof ChatMessageCell;
         byte var4 = 0;
         MessageObject var12;
         int var18;
         if (var3) {
            final ChatMessageCell var5 = (ChatMessageCell)var2;
            MessageObject var6 = var5.getMessageObject();
            boolean var7;
            boolean var8;
            if (ChatActivity.access$26800(ChatActivity.this).isActionModeShowed()) {
               var5.setCheckBoxVisible(true, false);
               ChatActivityEnterView var11 = ChatActivity.this.chatActivityEnterView;
               if (var11 != null) {
                  var12 = var11.getEditingMessageObject();
               } else {
                  var12 = null;
               }

               byte var16;
               if (var6.getDialogId() == ChatActivity.this.dialog_id) {
                  var16 = 0;
               } else {
                  var16 = 1;
               }

               if (var12 != var6 && ChatActivity.this.selectedMessagesIds[var16].indexOfKey(var6.getId()) < 0) {
                  var5.setDrawSelectionBackground(false);
                  var5.setChecked(false, false, false);
                  var7 = false;
               } else {
                  ChatActivity.this.setCellSelectionBackground(var6, var5, var16, false);
                  var7 = true;
               }

               var8 = true;
            } else {
               var5.setDrawSelectionBackground(false);
               var5.setChecked(false, false, false);
               var5.setCheckBoxVisible(false, false);
               var8 = false;
               var7 = false;
            }

            if (var8 && var7) {
               var3 = true;
            } else {
               var3 = false;
            }

            label97: {
               var5.setCheckPressed(var8 ^ true, var3);
               if (ChatActivity.this.searchContainer != null && ChatActivity.this.searchContainer.getVisibility() == 0) {
                  DataQuery var13 = DataQuery.getInstance(ChatActivity.access$27100(ChatActivity.this));
                  var18 = var6.getId();
                  if (var6.getDialogId() == ChatActivity.this.mergeDialogId) {
                     var3 = true;
                  } else {
                     var3 = false;
                  }

                  if (var13.isMessageFound(var18, var3) && DataQuery.getInstance(ChatActivity.access$27200(ChatActivity.this)).getLastSearchQuery() != null) {
                     var5.setHighlightedText(DataQuery.getInstance(ChatActivity.access$27300(ChatActivity.this)).getLastSearchQuery());
                     break label97;
                  }
               }

               var5.setHighlightedText((String)null);
            }

            var5.getViewTreeObserver().addOnPreDrawListener(new OnPreDrawListener() {
               public boolean onPreDraw() {
                  var5.getViewTreeObserver().removeOnPreDrawListener(this);
                  int var1 = ChatActivity.this.chatListView.getMeasuredHeight();
                  int var2 = var5.getTop();
                  var5.getBottom();
                  if (var2 >= 0) {
                     var2 = 0;
                  } else {
                     var2 = -var2;
                  }

                  int var3 = var5.getMeasuredHeight();
                  int var4 = var3;
                  if (var3 > var1) {
                     var4 = var2 + var1;
                  }

                  var5.setVisiblePart(var2, var4 - var2);
                  return true;
               }
            });
            if (!ChatActivity.access$27400(ChatActivity.this) || !var5.isHighlighted()) {
               if (ChatActivity.this.highlightMessageId != Integer.MAX_VALUE && var5.getMessageObject().getId() == ChatActivity.this.highlightMessageId) {
                  var3 = true;
               } else {
                  var3 = false;
               }

               var5.setHighlighted(var3);
               if (ChatActivity.this.highlightMessageId != Integer.MAX_VALUE) {
                  ChatActivity.this.startMessageUnselect();
               }
            }
         }

         var18 = var1.getAdapterPosition();
         int var17 = this.messagesStartRow;
         if (var18 >= var17 && var18 < this.messagesEndRow) {
            var12 = (MessageObject)ChatActivity.this.messages.get(var18 - var17);
            View var9 = var1.itemView;
            if (var12 != null) {
               TLRPC.Message var14 = var12.messageOwner;
               if (var14 != null && var14.media_unread && var14.mentioned) {
                  if (!ChatActivity.access$27500(ChatActivity.this) && !var12.isVoice() && !var12.isRoundVideo()) {
                     ChatActivity.access$16210(ChatActivity.this);
                     if (ChatActivity.this.newMentionsCount <= 0) {
                        ChatActivity.this.newMentionsCount = 0;
                        ChatActivity.this.hasAllMentionsLocal = true;
                        ChatActivity.this.showMentionDownButton(false, true);
                     } else {
                        ChatActivity.this.mentiondownButtonCounter.setText(String.format("%d", ChatActivity.this.newMentionsCount));
                     }

                     MessagesController var15 = MessagesController.getInstance(ChatActivity.access$27600(ChatActivity.this));
                     var17 = var12.getId();
                     var18 = var4;
                     if (ChatObject.isChannel(ChatActivity.this.currentChat)) {
                        var18 = ChatActivity.this.currentChat.id;
                     }

                     var15.markMentionMessageAsRead(var17, var18, ChatActivity.this.dialog_id);
                     var12.setContentIsRead();
                  }

                  if (var9 instanceof ChatMessageCell) {
                     ChatMessageCell var10 = (ChatMessageCell)var9;
                     if (ChatActivity.access$27700(ChatActivity.this)) {
                        var10.setHighlighted(true);
                     } else {
                        var10.setHighlightedAnimated();
                     }
                  }
               }
            }
         }

      }

      public void updateRowAtPosition(int var1) {
         if (ChatActivity.this.chatLayoutManager != null) {
            int var3;
            label21: {
               if (!ChatActivity.this.wasManualScroll && ChatActivity.this.unreadMessageObject != null) {
                  ChatActivity var2 = ChatActivity.this;
                  var3 = var2.messages.indexOf(var2.unreadMessageObject);
                  if (var3 >= 0) {
                     var3 += this.messagesStartRow;
                     break label21;
                  }
               }

               var3 = -1;
            }

            this.notifyItemChanged(var1);
            if (var3 != -1) {
               int var4 = ChatActivity.this.chatListView.getMeasuredHeight();
               int var5 = ChatActivity.this.chatListView.getPaddingBottom();
               int var6 = ChatActivity.this.chatListView.getPaddingTop();
               var1 = AndroidUtilities.dp(29.0F);
               ChatActivity.this.chatLayoutManager.scrollToPositionWithOffset(var3, var4 - var5 - var6 - var1);
            }

         }
      }

      public void updateRowWithMessageObject(MessageObject var1, boolean var2) {
         int var4;
         if (var2) {
            int var3 = ChatActivity.this.chatListView.getChildCount();

            for(var4 = 0; var4 < var3; ++var4) {
               View var5 = ChatActivity.this.chatListView.getChildAt(var4);
               if (var5 instanceof ChatMessageCell) {
                  ChatMessageCell var6 = (ChatMessageCell)var5;
                  if (var6.getMessageObject() == var1) {
                     var6.setMessageObject(var1, var6.getCurrentMessagesGroup(), var6.isPinnedBottom(), var6.isPinnedTop());
                     return;
                  }
               }
            }
         }

         var4 = ChatActivity.this.messages.indexOf(var1);
         if (var4 != -1) {
            this.updateRowAtPosition(var4 + this.messagesStartRow);
         }
      }

      public void updateRows() {
         this.rowCount = 0;
         int var1;
         TLRPC.User var2;
         if (!ChatActivity.this.messages.isEmpty()) {
            if (!ChatActivity.this.forwardEndReached[0] || ChatActivity.this.mergeDialogId != 0L && !ChatActivity.this.forwardEndReached[1]) {
               var1 = this.rowCount++;
               this.loadingDownRow = var1;
            } else {
               this.loadingDownRow = -1;
            }

            var1 = this.rowCount;
            this.messagesStartRow = var1;
            this.rowCount = var1 + ChatActivity.this.messages.size();
            var1 = this.rowCount;
            this.messagesEndRow = var1;
            var2 = ChatActivity.this.currentUser;
            if (var2 != null && var2.bot) {
               this.rowCount = var1 + 1;
               this.botInfoRow = var1;
            } else {
               this.botInfoRow = -1;
            }

            if (!ChatActivity.this.endReached[0] || ChatActivity.this.mergeDialogId != 0L && !ChatActivity.this.endReached[1]) {
               var1 = this.rowCount++;
               this.loadingUpRow = var1;
            } else {
               this.loadingUpRow = -1;
            }
         } else {
            this.loadingUpRow = -1;
            this.loadingDownRow = -1;
            this.messagesStartRow = -1;
            this.messagesEndRow = -1;
            var2 = ChatActivity.this.currentUser;
            if (var2 != null && var2.bot && !MessagesController.isSupportUser(var2)) {
               var1 = this.rowCount++;
               this.botInfoRow = var1;
            } else {
               this.botInfoRow = -1;
            }
         }

      }
   }

   private class UnreadCounterTextView extends TextView {
      private int circleWidth;
      private int currentCounter;
      private String currentCounterString;
      private Paint paint = new Paint(1);
      private RectF rect = new RectF();
      private TextPaint textPaint = new TextPaint(1);
      private int textWidth;

      public UnreadCounterTextView(Context var2) {
         super(var2);
         this.textPaint.setTextSize((float)AndroidUtilities.dp(13.0F));
         this.textPaint.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
      }

      protected void onDraw(Canvas var1) {
         super.onDraw(var1);
         if (this.currentCounterString != null) {
            Layout var2 = this.getLayout();
            if (var2 != null && this.getLineCount() > 0) {
               int var3 = (int)Math.ceil((double)var2.getLineWidth(0));
               var3 = (this.getMeasuredWidth() + (var3 - this.circleWidth)) / 2 + AndroidUtilities.dp(8.0F);
               this.rect.set((float)var3, (float)(this.getMeasuredHeight() / 2 - AndroidUtilities.dp(10.0F)), (float)(var3 + this.circleWidth), (float)(this.getMeasuredHeight() / 2 + AndroidUtilities.dp(10.0F)));
               var1.drawRoundRect(this.rect, (float)AndroidUtilities.dp(10.0F), (float)AndroidUtilities.dp(10.0F), this.paint);
               var1.drawText(this.currentCounterString, this.rect.centerX() - (float)this.textWidth / 2.0F, this.rect.top + (float)AndroidUtilities.dp(14.5F), this.textPaint);
            }
         }

      }

      public void setTextColor(int var1) {
         super.setTextColor(var1);
         this.textPaint.setColor(Theme.getColor("chat_messagePanelBackground"));
         this.paint.setColor(Theme.getColor("chat_goDownButtonCounterBackground"));
      }

      public void updateCounter() {
         int var3;
         label29: {
            if (ChatObject.isChannel(ChatActivity.this.currentChat)) {
               ChatActivity var1 = ChatActivity.this;
               if (!var1.currentChat.megagroup) {
                  TLRPC.ChatFull var2 = var1.chatInfo;
                  if (var2 != null && var2.linked_chat_id != 0) {
                     TLRPC.Dialog var4 = (TLRPC.Dialog)var1.getMessagesController().dialogs_dict.get((long)(-ChatActivity.this.chatInfo.linked_chat_id));
                     if (var4 != null) {
                        var3 = var4.unread_count;
                        break label29;
                     }
                  }
               }
            }

            var3 = 0;
         }

         if (this.currentCounter != var3) {
            this.currentCounter = var3;
            var3 = this.currentCounter;
            if (var3 == 0) {
               this.currentCounterString = null;
               this.circleWidth = 0;
               this.setPadding(0, 0, 0, 0);
            } else {
               this.currentCounterString = String.format("%d", var3);
               this.textWidth = (int)Math.ceil((double)this.textPaint.measureText(this.currentCounterString));
               var3 = Math.max(AndroidUtilities.dp(20.0F), AndroidUtilities.dp(12.0F) + this.textWidth);
               if (this.circleWidth != var3) {
                  this.circleWidth = var3;
                  this.setPadding(0, 0, this.circleWidth / 2 + AndroidUtilities.dp(7.0F), 0);
               }
            }

            this.invalidate();
         }

      }
   }
}
