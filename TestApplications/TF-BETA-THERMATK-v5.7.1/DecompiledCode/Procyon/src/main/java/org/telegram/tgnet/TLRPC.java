// 
// Decompiled by Procyon v0.5.34
// 

package org.telegram.tgnet;

import java.util.Iterator;
import java.util.Map;
import org.telegram.messenger.Utilities;
import android.text.TextUtils;
import java.util.HashMap;
import java.util.ArrayList;

public class TLRPC
{
    public static final int CHAT_FLAG_IS_PUBLIC = 64;
    public static final int LAYER = 100;
    public static final int MESSAGE_FLAG_EDITED = 32768;
    public static final int MESSAGE_FLAG_FWD = 4;
    public static final int MESSAGE_FLAG_HAS_BOT_ID = 2048;
    public static final int MESSAGE_FLAG_HAS_ENTITIES = 128;
    public static final int MESSAGE_FLAG_HAS_FROM_ID = 256;
    public static final int MESSAGE_FLAG_HAS_MARKUP = 64;
    public static final int MESSAGE_FLAG_HAS_MEDIA = 512;
    public static final int MESSAGE_FLAG_HAS_VIEWS = 1024;
    public static final int MESSAGE_FLAG_MEGAGROUP = Integer.MIN_VALUE;
    public static final int MESSAGE_FLAG_REPLY = 8;
    public static final int USER_FLAG_ACCESS_HASH = 1;
    public static final int USER_FLAG_FIRST_NAME = 2;
    public static final int USER_FLAG_LAST_NAME = 4;
    public static final int USER_FLAG_PHONE = 16;
    public static final int USER_FLAG_PHOTO = 32;
    public static final int USER_FLAG_STATUS = 64;
    public static final int USER_FLAG_UNUSED = 128;
    public static final int USER_FLAG_UNUSED2 = 256;
    public static final int USER_FLAG_UNUSED3 = 512;
    public static final int USER_FLAG_USERNAME = 8;
    
    public abstract static class Audio extends TLObject
    {
        public long access_hash;
        public int date;
        public int dc_id;
        public int duration;
        public long id;
        public byte[] iv;
        public byte[] key;
        public String mime_type;
        public int size;
        public int user_id;
        
        public static Audio TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject = null;
            switch (i) {
                default: {
                    tlObject = null;
                    break;
                }
                case 1483311320: {
                    tlObject = new TL_audioEmpty_layer45();
                    break;
                }
                case 1431655926: {
                    tlObject = new TL_audioEncrypted();
                    break;
                }
                case 1114908135: {
                    tlObject = new TL_audio_old();
                    break;
                }
                case -102543275: {
                    tlObject = new TL_audio_layer45();
                    break;
                }
                case -945003370: {
                    tlObject = new TL_audio_old2();
                    break;
                }
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in Audio", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (Audio)tlObject;
        }
    }
    
    public abstract static class Bool extends TLObject
    {
        public static Bool TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != -1720552011) {
                if (i != -1132882121) {
                    tlObject = null;
                }
                else {
                    tlObject = new TL_boolFalse();
                }
            }
            else {
                tlObject = new TL_boolTrue();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in Bool", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (Bool)tlObject;
        }
    }
    
    public abstract static class BotInfo extends TLObject
    {
        public ArrayList<TL_botCommand> commands;
        public String description;
        public int user_id;
        public int version;
        
        public BotInfo() {
            this.commands = new ArrayList<TL_botCommand>();
        }
        
        public static BotInfo TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            BotInfo botInfo;
            if (i != -1729618630) {
                if (i != -1154598962) {
                    if (i != 164583517) {
                        botInfo = null;
                    }
                    else {
                        botInfo = new TL_botInfo_layer48();
                    }
                }
                else {
                    botInfo = new TL_botInfoEmpty_layer48();
                }
            }
            else {
                botInfo = new TL_botInfo();
            }
            if (botInfo == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in BotInfo", i));
            }
            if (botInfo != null) {
                ((TL_botInfo)botInfo).readParams(abstractSerializedData, b);
            }
            return botInfo;
        }
    }
    
    public abstract static class BotInlineMessage extends TLObject
    {
        public String address;
        public ArrayList<MessageEntity> entities;
        public String first_name;
        public int flags;
        public GeoPoint geo;
        public String last_name;
        public String message;
        public boolean no_webpage;
        public int period;
        public String phone_number;
        public String provider;
        public ReplyMarkup reply_markup;
        public String title;
        public String vcard;
        public String venue_id;
        public String venue_type;
        
        public BotInlineMessage() {
            this.entities = new ArrayList<MessageEntity>();
        }
        
        public static BotInlineMessage TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject = null;
            switch (i) {
                default: {
                    tlObject = null;
                    break;
                }
                case 1984755728: {
                    tlObject = new TL_botInlineMessageMediaAuto();
                    break;
                }
                case 1130767150: {
                    tlObject = new TL_botInlineMessageMediaVenue_layer77();
                    break;
                }
                case 982505656: {
                    tlObject = new TL_botInlineMessageMediaGeo_layer71();
                    break;
                }
                case 904770772: {
                    tlObject = new TL_botInlineMessageMediaContact_layer81();
                    break;
                }
                case 416402882: {
                    tlObject = new TL_botInlineMessageMediaContact();
                    break;
                }
                case 175419739: {
                    tlObject = new TL_botInlineMessageMediaAuto_layer74();
                    break;
                }
                case -1222451611: {
                    tlObject = new TL_botInlineMessageMediaGeo();
                    break;
                }
                case -1937807902: {
                    tlObject = new TL_botInlineMessageText();
                    break;
                }
                case -1970903652: {
                    tlObject = new TL_botInlineMessageMediaVenue();
                    break;
                }
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in BotInlineMessage", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (BotInlineMessage)tlObject;
        }
    }
    
    public abstract static class BotInlineResult extends TLObject
    {
        public WebDocument content;
        public String description;
        public Document document;
        public int flags;
        public String id;
        public Photo photo;
        public long query_id;
        public BotInlineMessage send_message;
        public WebDocument thumb;
        public String title;
        public String type;
        public String url;
        
        public static BotInlineResult TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != 295067450) {
                if (i != 400266251) {
                    tlObject = null;
                }
                else {
                    tlObject = new TL_botInlineMediaResult();
                }
            }
            else {
                tlObject = new TL_botInlineResult();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in BotInlineResult", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (BotInlineResult)tlObject;
        }
    }
    
    public abstract static class ChannelAdminLogEventAction extends TLObject
    {
        public Message message;
        public Message new_message;
        public ChannelParticipant new_participant;
        public Photo new_photo;
        public InputStickerSet new_stickerset;
        public ChannelParticipant participant;
        public Message prev_message;
        public ChannelParticipant prev_participant;
        public Photo prev_photo;
        public InputStickerSet prev_stickerset;
        public String prev_value;
        
        public static ChannelAdminLogEventAction TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject = null;
            switch (i) {
                default: {
                    tlObject = null;
                    break;
                }
                case 1889215493: {
                    tlObject = new TL_channelAdminLogEventActionEditMessage();
                    break;
                }
                case 1783299128: {
                    tlObject = new TL_channelAdminLogEventActionChangeUsername();
                    break;
                }
                case 1599903217: {
                    tlObject = new TL_channelAdminLogEventActionTogglePreHistoryHidden();
                    break;
                }
                case 1427671598: {
                    tlObject = new TL_channelAdminLogEventActionChangeAbout();
                    break;
                }
                case 1129042607: {
                    tlObject = new TL_channelAdminLogEventActionChangePhoto();
                    break;
                }
                case 1121994683: {
                    tlObject = new TL_channelAdminLogEventActionDeleteMessage();
                    break;
                }
                case 771095562: {
                    tlObject = new TL_channelAdminLogEventActionDefaultBannedRights();
                    break;
                }
                case 648939889: {
                    tlObject = new TL_channelAdminLogEventActionToggleSignatures();
                    break;
                }
                case 460916654: {
                    tlObject = new TL_channelAdminLogEventActionToggleInvites();
                    break;
                }
                case 405815507: {
                    tlObject = new TL_channelAdminLogEventActionParticipantJoin();
                    break;
                }
                case -124291086: {
                    tlObject = new TL_channelAdminLogEventActionParticipantLeave();
                    break;
                }
                case -370660328: {
                    tlObject = new TL_channelAdminLogEventActionUpdatePinned();
                    break;
                }
                case -421545947: {
                    tlObject = new TL_channelAdminLogEventActionChangeTitle();
                    break;
                }
                case -422036098: {
                    tlObject = new TL_channelAdminLogEventActionParticipantToggleBan();
                    break;
                }
                case -484690728: {
                    tlObject = new TL_channelAdminLogEventActionParticipantInvite();
                    break;
                }
                case -714643696: {
                    tlObject = new TL_channelAdminLogEventActionParticipantToggleAdmin();
                    break;
                }
                case -1312568665: {
                    tlObject = new TL_channelAdminLogEventActionChangeStickerSet();
                    break;
                }
                case -1569748965: {
                    tlObject = new TL_channelAdminLogEventActionChangeLinkedChat();
                    break;
                }
                case -1895328189: {
                    tlObject = new TL_channelAdminLogEventActionStopPoll();
                    break;
                }
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in ChannelAdminLogEventAction", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (ChannelAdminLogEventAction)tlObject;
        }
    }
    
    public abstract static class ChannelMessagesFilter extends TLObject
    {
        public boolean exclude_new_messages;
        public int flags;
        public ArrayList<TL_messageRange> ranges;
        
        public ChannelMessagesFilter() {
            this.ranges = new ArrayList<TL_messageRange>();
        }
        
        public static ChannelMessagesFilter TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != -1798033689) {
                if (i != -847783593) {
                    tlObject = null;
                }
                else {
                    tlObject = new TL_channelMessagesFilter();
                }
            }
            else {
                tlObject = new TL_channelMessagesFilterEmpty();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in ChannelMessagesFilter", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (ChannelMessagesFilter)tlObject;
        }
    }
    
    public abstract static class ChannelParticipant extends TLObject
    {
        public TL_chatAdminRights admin_rights;
        public TL_channelAdminRights_layer92 admin_rights_layer92;
        public TL_chatBannedRights banned_rights;
        public TL_channelBannedRights_layer92 banned_rights_layer92;
        public boolean can_edit;
        public int date;
        public int flags;
        public int inviter_id;
        public int kicked_by;
        public boolean left;
        public int promoted_by;
        public boolean self;
        public int user_id;
        
        public static ChannelParticipant TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject = null;
            switch (i) {
                default: {
                    tlObject = null;
                    break;
                }
                case 1571450403: {
                    tlObject = new TL_channelParticipantAdmin();
                    break;
                }
                case 573315206: {
                    tlObject = new TL_channelParticipantBanned_layer92();
                    break;
                }
                case 470789295: {
                    tlObject = new TL_channelParticipantBanned();
                    break;
                }
                case 367766557: {
                    tlObject = new TL_channelParticipant();
                    break;
                }
                case -471670279: {
                    tlObject = new TL_channelParticipantCreator();
                    break;
                }
                case -1473271656: {
                    tlObject = new TL_channelParticipantAdmin_layer92();
                    break;
                }
                case -1557620115: {
                    tlObject = new TL_channelParticipantSelf();
                    break;
                }
                case -1743180447: {
                    tlObject = new TL_channelParticipantEditor_layer67();
                    break;
                }
                case -1861910545: {
                    tlObject = new TL_channelParticipantModerator_layer67();
                    break;
                }
                case -1933187430: {
                    tlObject = new TL_channelParticipantKicked_layer67();
                    break;
                }
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in ChannelParticipant", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (ChannelParticipant)tlObject;
        }
    }
    
    public abstract static class ChannelParticipantsFilter extends TLObject
    {
        public String q;
        
        public static ChannelParticipantsFilter TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject = null;
            switch (i) {
                default: {
                    tlObject = null;
                    break;
                }
                case 338142689: {
                    tlObject = new TL_channelParticipantsBanned();
                    break;
                }
                case 106343499: {
                    tlObject = new TL_channelParticipantsSearch();
                    break;
                }
                case -566281095: {
                    tlObject = new TL_channelParticipantsRecent();
                    break;
                }
                case -1150621555: {
                    tlObject = new TL_channelParticipantsContacts();
                    break;
                }
                case -1268741783: {
                    tlObject = new TL_channelParticipantsAdmins();
                    break;
                }
                case -1328445861: {
                    tlObject = new TL_channelParticipantsBots();
                    break;
                }
                case -1548400251: {
                    tlObject = new TL_channelParticipantsKicked();
                    break;
                }
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in ChannelParticipantsFilter", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (ChannelParticipantsFilter)tlObject;
        }
    }
    
    public abstract static class Chat extends TLObject
    {
        public long access_hash;
        public TL_chatAdminRights admin_rights;
        public TL_channelAdminRights_layer92 admin_rights_layer92;
        public TL_chatBannedRights banned_rights;
        public TL_channelBannedRights_layer92 banned_rights_layer92;
        public boolean broadcast;
        public boolean creator;
        public int date;
        public boolean deactivated;
        public TL_chatBannedRights default_banned_rights;
        public boolean explicit_content;
        public int flags;
        public boolean has_link;
        public int id;
        public boolean kicked;
        public boolean left;
        public boolean megagroup;
        public InputChannel migrated_to;
        public boolean min;
        public boolean moderator;
        public int participants_count;
        public ChatPhoto photo;
        public boolean restricted;
        public String restriction_reason;
        public boolean scam;
        public boolean signatures;
        public String title;
        public int until_date;
        public String username;
        public boolean verified;
        public int version;
        
        public static Chat TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject = null;
            switch (i) {
                default: {
                    tlObject = null;
                    break;
                }
                case 1930607688: {
                    tlObject = new TL_chat_old2();
                    break;
                }
                case 1855757255: {
                    tlObject = new TL_chat_old();
                    break;
                }
                case 1737397639: {
                    tlObject = new TL_channel_old();
                    break;
                }
                case 1307772980: {
                    tlObject = new TL_channel();
                    break;
                }
                case 1260090630: {
                    tlObject = new TL_channel_layer48();
                    break;
                }
                case 1158377749: {
                    tlObject = new TL_channel_layer77();
                    break;
                }
                case 1004149726: {
                    tlObject = new TL_chat();
                    break;
                }
                case 763724588: {
                    tlObject = new TL_channelForbidden_layer52();
                    break;
                }
                case 681420594: {
                    tlObject = new TL_channelForbidden();
                    break;
                }
                case 213142300: {
                    tlObject = new TL_channel_layer72();
                    break;
                }
                case 120753115: {
                    tlObject = new TL_chatForbidden();
                    break;
                }
                case -83047359: {
                    tlObject = new TL_chatForbidden_old();
                    break;
                }
                case -652419756: {
                    tlObject = new TL_chat_layer92();
                    break;
                }
                case -930515796: {
                    tlObject = new TL_channel_layer92();
                    break;
                }
                case -1588737454: {
                    tlObject = new TL_channel_layer67();
                    break;
                }
                case -1683826688: {
                    tlObject = new TL_chatEmpty();
                    break;
                }
                case -2059962289: {
                    tlObject = new TL_channelForbidden_layer67();
                    break;
                }
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in Chat", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (Chat)tlObject;
        }
        
        protected static TL_chatAdminRights mergeAdminRights(final TL_channelAdminRights_layer92 tl_channelAdminRights_layer92) {
            if (tl_channelAdminRights_layer92 == null) {
                return null;
            }
            final TL_chatAdminRights tl_chatAdminRights = new TL_chatAdminRights();
            tl_chatAdminRights.change_info = tl_channelAdminRights_layer92.change_info;
            tl_chatAdminRights.post_messages = tl_channelAdminRights_layer92.post_messages;
            tl_chatAdminRights.edit_messages = tl_channelAdminRights_layer92.edit_messages;
            tl_chatAdminRights.delete_messages = tl_channelAdminRights_layer92.delete_messages;
            tl_chatAdminRights.ban_users = tl_channelAdminRights_layer92.ban_users;
            tl_chatAdminRights.invite_users = tl_channelAdminRights_layer92.invite_users;
            tl_chatAdminRights.pin_messages = tl_channelAdminRights_layer92.pin_messages;
            tl_chatAdminRights.add_admins = tl_channelAdminRights_layer92.add_admins;
            return tl_chatAdminRights;
        }
        
        protected static TL_chatBannedRights mergeBannedRights(final TL_channelBannedRights_layer92 tl_channelBannedRights_layer92) {
            if (tl_channelBannedRights_layer92 == null) {
                return null;
            }
            final TL_chatBannedRights tl_chatBannedRights = new TL_chatBannedRights();
            tl_chatBannedRights.view_messages = tl_channelBannedRights_layer92.view_messages;
            tl_chatBannedRights.send_messages = tl_channelBannedRights_layer92.send_messages;
            final boolean send_media = tl_channelBannedRights_layer92.send_media;
            tl_chatBannedRights.send_media = send_media;
            tl_chatBannedRights.send_stickers = tl_channelBannedRights_layer92.send_stickers;
            tl_chatBannedRights.send_gifs = tl_channelBannedRights_layer92.send_gifs;
            tl_chatBannedRights.send_games = tl_channelBannedRights_layer92.send_games;
            tl_chatBannedRights.send_inline = tl_channelBannedRights_layer92.send_inline;
            tl_chatBannedRights.embed_links = tl_channelBannedRights_layer92.embed_links;
            tl_chatBannedRights.send_polls = send_media;
            tl_chatBannedRights.change_info = true;
            tl_chatBannedRights.invite_users = true;
            tl_chatBannedRights.pin_messages = true;
            tl_chatBannedRights.until_date = tl_channelBannedRights_layer92.until_date;
            return tl_chatBannedRights;
        }
    }
    
    public abstract static class ChatFull extends TLObject
    {
        public String about;
        public int admins_count;
        public int available_min_id;
        public int banned_count;
        public ArrayList<BotInfo> bot_info;
        public int call_msg_id;
        public boolean can_set_stickers;
        public boolean can_set_username;
        public boolean can_view_participants;
        public boolean can_view_stats;
        public Photo chat_photo;
        public ExportedChatInvite exported_invite;
        public int flags;
        public int folder_id;
        public boolean hidden_prehistory;
        public int id;
        public int kicked_count;
        public int linked_chat_id;
        public int migrated_from_chat_id;
        public int migrated_from_max_id;
        public PeerNotifySettings notify_settings;
        public int online_count;
        public ChatParticipants participants;
        public int participants_count;
        public int pinned_msg_id;
        public int pts;
        public int read_inbox_max_id;
        public int read_outbox_max_id;
        public StickerSet stickerset;
        public int unread_count;
        public int unread_important_count;
        
        public ChatFull() {
            this.bot_info = new ArrayList<BotInfo>();
        }
        
        public static ChatFull TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject = null;
            switch (i) {
                default: {
                    tlObject = null;
                    break;
                }
                case 1991201921: {
                    tlObject = new TL_channelFull_layer72();
                    break;
                }
                case 771925524: {
                    tlObject = new TL_chatFull_layer87();
                    break;
                }
                case 581055962: {
                    tlObject = new TL_chatFull_layer98();
                    break;
                }
                case 478652186: {
                    tlObject = new TL_channelFull_layer98();
                    break;
                }
                case 461151667: {
                    tlObject = new TL_chatFull();
                    break;
                }
                case 401891279: {
                    tlObject = new TL_channelFull_layer71();
                    break;
                }
                case 56920439: {
                    tlObject = new TL_channelFull_layer99();
                    break;
                }
                case -88925533: {
                    tlObject = new TL_channelFull_old();
                    break;
                }
                case -304961647: {
                    tlObject = new TL_chatFull_layer92();
                    break;
                }
                case -877254512: {
                    tlObject = new TL_channelFull_layer89();
                    break;
                }
                case -1009430225: {
                    tlObject = new TL_channelFull_layer67();
                    break;
                }
                case -1640751649: {
                    tlObject = new TL_channelFull_layer48();
                    break;
                }
                case -1736252138: {
                    tlObject = new TL_channelFull();
                    break;
                }
                case -1749097118: {
                    tlObject = new TL_channelFull_layer52();
                    break;
                }
                case -1781833897: {
                    tlObject = new TL_channelFull_layer70();
                    break;
                }
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in ChatFull", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (ChatFull)tlObject;
        }
    }
    
    public abstract static class ChatInvite extends TLObject
    {
        public boolean broadcast;
        public boolean channel;
        public Chat chat;
        public int flags;
        public boolean isPublic;
        public boolean megagroup;
        public ArrayList<User> participants;
        public int participants_count;
        public Photo photo;
        public String title;
        
        public ChatInvite() {
            this.participants = new ArrayList<User>();
        }
        
        public static ChatInvite TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != -540871282) {
                if (i != 1516793212) {
                    tlObject = null;
                }
                else {
                    tlObject = new TL_chatInviteAlready();
                }
            }
            else {
                tlObject = new TL_chatInvite();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in ChatInvite", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (ChatInvite)tlObject;
        }
    }
    
    public abstract static class ChatParticipant extends TLObject
    {
        public int date;
        public int inviter_id;
        public int user_id;
        
        public static ChatParticipant TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != -925415106) {
                if (i != -636267638) {
                    if (i != -489233354) {
                        tlObject = null;
                    }
                    else {
                        tlObject = new TL_chatParticipantAdmin();
                    }
                }
                else {
                    tlObject = new TL_chatParticipantCreator();
                }
            }
            else {
                tlObject = new TL_chatParticipant();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in ChatParticipant", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (ChatParticipant)tlObject;
        }
    }
    
    public abstract static class ChatParticipants extends TLObject
    {
        public int admin_id;
        public int chat_id;
        public int flags;
        public ArrayList<ChatParticipant> participants;
        public ChatParticipant self_participant;
        public int version;
        
        public ChatParticipants() {
            this.participants = new ArrayList<ChatParticipant>();
        }
        
        public static ChatParticipants TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject = null;
            switch (i) {
                default: {
                    tlObject = null;
                    break;
                }
                case 2017571861: {
                    tlObject = new TL_chatParticipants_old();
                    break;
                }
                case 1061556205: {
                    tlObject = new TL_chatParticipants();
                    break;
                }
                case 265468810: {
                    tlObject = new TL_chatParticipantsForbidden_old();
                    break;
                }
                case -57668565: {
                    tlObject = new TL_chatParticipantsForbidden();
                    break;
                }
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in ChatParticipants", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (ChatParticipants)tlObject;
        }
    }
    
    public abstract static class ChatPhoto extends TLObject
    {
        public int dc_id;
        public FileLocation photo_big;
        public FileLocation photo_small;
        
        public static ChatPhoto TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != 935395612) {
                if (i != 1197267925) {
                    if (i != 1632839530) {
                        tlObject = null;
                    }
                    else {
                        tlObject = new TL_chatPhoto_layer97();
                    }
                }
                else {
                    tlObject = new TL_chatPhoto();
                }
            }
            else {
                tlObject = new TL_chatPhotoEmpty();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in ChatPhoto", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (ChatPhoto)tlObject;
        }
    }
    
    public abstract static class ContactLink extends TLObject
    {
        public static ContactLink TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != -721239344) {
                if (i != -17968211) {
                    if (i != 1599050311) {
                        tlObject = null;
                    }
                    else {
                        tlObject = new TL_contactLinkUnknown();
                    }
                }
                else {
                    tlObject = new TL_contactLinkNone();
                }
            }
            else {
                tlObject = new TL_contactLinkContact();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in ContactLink", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (ContactLink)tlObject;
        }
    }
    
    public abstract static class DecryptedMessage extends TLObject
    {
        public DecryptedMessageAction action;
        public ArrayList<MessageEntity> entities;
        public int flags;
        public long grouped_id;
        public DecryptedMessageMedia media;
        public String message;
        public byte[] random_bytes;
        public long random_id;
        public long reply_to_random_id;
        public int ttl;
        public String via_bot_name;
        
        public DecryptedMessage() {
            this.entities = new ArrayList<MessageEntity>();
        }
        
        public static DecryptedMessage TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject = null;
            switch (i) {
                default: {
                    tlObject = null;
                    break;
                }
                case 1930838368: {
                    tlObject = new TL_decryptedMessageService();
                    break;
                }
                case 917541342: {
                    tlObject = new TL_decryptedMessage_layer45();
                    break;
                }
                case 541931640: {
                    tlObject = new TL_decryptedMessage_layer17();
                    break;
                }
                case 528568095: {
                    tlObject = new TL_decryptedMessage_layer8();
                    break;
                }
                case -1438109059: {
                    tlObject = new TL_decryptedMessageService_layer8();
                    break;
                }
                case -1848883596: {
                    tlObject = new TL_decryptedMessage();
                    break;
                }
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in DecryptedMessage", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (DecryptedMessage)tlObject;
        }
    }
    
    public abstract static class DecryptedMessageAction extends TLObject
    {
        public SendMessageAction action;
        public int end_seq_no;
        public long exchange_id;
        public byte[] g_a;
        public byte[] g_b;
        public long key_fingerprint;
        public int layer;
        public ArrayList<Long> random_ids;
        public int start_seq_no;
        public int ttl_seconds;
        
        public DecryptedMessageAction() {
            this.random_ids = new ArrayList<Long>();
        }
        
        public static DecryptedMessageAction TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject = null;
            switch (i) {
                default: {
                    tlObject = null;
                    break;
                }
                case 1877046107: {
                    tlObject = new TL_decryptedMessageActionAcceptKey();
                    break;
                }
                case 1729750108: {
                    tlObject = new TL_decryptedMessageActionFlushHistory();
                    break;
                }
                case 1700872964: {
                    tlObject = new TL_decryptedMessageActionDeleteMessages();
                    break;
                }
                case 1360072880: {
                    tlObject = new TL_decryptedMessageActionResend();
                    break;
                }
                case 206520510: {
                    tlObject = new TL_decryptedMessageActionReadMessages();
                    break;
                }
                case -204906213: {
                    tlObject = new TL_decryptedMessageActionRequestKey();
                    break;
                }
                case -217806717: {
                    tlObject = new TL_decryptedMessageActionNotifyLayer();
                    break;
                }
                case -332526693: {
                    tlObject = new TL_decryptedMessageActionCommitKey();
                    break;
                }
                case -586814357: {
                    tlObject = new TL_decryptedMessageActionAbortKey();
                    break;
                }
                case -860719551: {
                    tlObject = new TL_decryptedMessageActionTyping();
                    break;
                }
                case -1473258141: {
                    tlObject = new TL_decryptedMessageActionNoop();
                    break;
                }
                case -1586283796: {
                    tlObject = new TL_decryptedMessageActionSetMessageTTL();
                    break;
                }
                case -1967000459: {
                    tlObject = new TL_decryptedMessageActionScreenshotMessages();
                    break;
                }
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in DecryptedMessageAction", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (DecryptedMessageAction)tlObject;
        }
    }
    
    public abstract static class DecryptedMessageMedia extends TLObject
    {
        public double _long;
        public long access_hash;
        public String address;
        public ArrayList<DocumentAttribute> attributes;
        public String caption;
        public int date;
        public int dc_id;
        public int duration;
        public String file_name;
        public String first_name;
        public int h;
        public long id;
        public byte[] iv;
        public byte[] key;
        public String last_name;
        public double lat;
        public String mime_type;
        public String phone_number;
        public String provider;
        public int size;
        public int thumb_h;
        public int thumb_w;
        public String title;
        public String url;
        public int user_id;
        public String venue_id;
        public int w;
        
        public DecryptedMessageMedia() {
            this.attributes = new ArrayList<DocumentAttribute>();
        }
        
        public static DecryptedMessageMedia TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject = null;
            switch (i) {
                default: {
                    tlObject = null;
                    break;
                }
                case 2063502050: {
                    tlObject = new TL_decryptedMessageMediaDocument();
                    break;
                }
                case 1619031439: {
                    tlObject = new TL_decryptedMessageMediaAudio_layer8();
                    break;
                }
                case 1485441687: {
                    tlObject = new TL_decryptedMessageMediaContact();
                    break;
                }
                case 1474341323: {
                    tlObject = new TL_decryptedMessageMediaAudio();
                    break;
                }
                case 1380598109: {
                    tlObject = new TL_decryptedMessageMediaVideo_layer17();
                    break;
                }
                case 1290694387: {
                    tlObject = new TL_decryptedMessageMediaVideo_layer8();
                    break;
                }
                case 893913689: {
                    tlObject = new TL_decryptedMessageMediaGeoPoint();
                    break;
                }
                case 846826124: {
                    tlObject = new TL_decryptedMessageMediaPhoto_layer8();
                    break;
                }
                case 144661578: {
                    tlObject = new TL_decryptedMessageMediaEmpty();
                    break;
                }
                case -90853155: {
                    tlObject = new TL_decryptedMessageMediaExternalDocument();
                    break;
                }
                case -235238024: {
                    tlObject = new TL_decryptedMessageMediaPhoto();
                    break;
                }
                case -452652584: {
                    tlObject = new TL_decryptedMessageMediaWebPage();
                    break;
                }
                case -1332395189: {
                    tlObject = new TL_decryptedMessageMediaDocument_layer8();
                    break;
                }
                case -1760785394: {
                    tlObject = new TL_decryptedMessageMediaVideo();
                    break;
                }
                case -1978796689: {
                    tlObject = new TL_decryptedMessageMediaVenue();
                    break;
                }
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in DecryptedMessageMedia", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (DecryptedMessageMedia)tlObject;
        }
    }
    
    public abstract static class Dialog extends TLObject
    {
        public DraftMessage draft;
        public int flags;
        public int folder_id;
        public long id;
        public int last_message_date;
        public PeerNotifySettings notify_settings;
        public Peer peer;
        public boolean pinned;
        public int pinnedNum;
        public int pts;
        public int read_inbox_max_id;
        public int read_outbox_max_id;
        public int top_message;
        public int unread_count;
        public boolean unread_mark;
        public int unread_mentions_count;
        
        public static Dialog TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != 739712882) {
                if (i != 1908216652) {
                    tlObject = null;
                }
                else {
                    tlObject = new TL_dialogFolder();
                }
            }
            else {
                tlObject = new TL_dialog();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in Dialog", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (Dialog)tlObject;
        }
    }
    
    public abstract static class DialogPeer extends TLObject
    {
        public static DialogPeer TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != -445792507) {
                if (i != 1363483106) {
                    tlObject = null;
                }
                else {
                    tlObject = new TL_dialogPeerFolder();
                }
            }
            else {
                tlObject = new TL_dialogPeer();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in DialogPeer", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (DialogPeer)tlObject;
        }
    }
    
    public abstract static class Document extends TLObject
    {
        public long access_hash;
        public ArrayList<DocumentAttribute> attributes;
        public int date;
        public int dc_id;
        public String file_name;
        public byte[] file_reference;
        public int flags;
        public long id;
        public byte[] iv;
        public byte[] key;
        public String mime_type;
        public int size;
        public ArrayList<PhotoSize> thumbs;
        public int user_id;
        public int version;
        
        public Document() {
            this.thumbs = new ArrayList<PhotoSize>();
            this.attributes = new ArrayList<DocumentAttribute>();
        }
        
        public static Document TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject = null;
            switch (i) {
                default: {
                    tlObject = null;
                    break;
                }
                case 1498631756: {
                    tlObject = new TL_document_layer92();
                    break;
                }
                case 1431655768: {
                    tlObject = new TL_documentEncrypted();
                    break;
                }
                case 1431655766: {
                    tlObject = new TL_documentEncrypted_old();
                    break;
                }
                case 922273905: {
                    tlObject = new TL_documentEmpty();
                    break;
                }
                case -106717361: {
                    tlObject = new TL_document_layer53();
                    break;
                }
                case -1627626714: {
                    tlObject = new TL_document_old();
                    break;
                }
                case -1683841855: {
                    tlObject = new TL_document();
                    break;
                }
                case -2027738169: {
                    tlObject = new TL_document_layer82();
                    break;
                }
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in Document", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (Document)tlObject;
        }
    }
    
    public abstract static class DocumentAttribute extends TLObject
    {
        public String alt;
        public int duration;
        public String file_name;
        public int flags;
        public int h;
        public boolean mask;
        public TL_maskCoords mask_coords;
        public String performer;
        public boolean round_message;
        public InputStickerSet stickerset;
        public boolean supports_streaming;
        public String title;
        public boolean voice;
        public int w;
        public byte[] waveform;
        
        public static DocumentAttribute TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject = null;
            switch (i) {
                default: {
                    tlObject = null;
                    break;
                }
                case 1815593308: {
                    tlObject = new TL_documentAttributeImageSize();
                    break;
                }
                case 1662637586: {
                    tlObject = new TL_documentAttributeSticker();
                    break;
                }
                case 1494273227: {
                    tlObject = new TL_documentAttributeVideo_layer65();
                    break;
                }
                case 978674434: {
                    tlObject = new TL_documentAttributeSticker_layer55();
                    break;
                }
                case 358154344: {
                    tlObject = new TL_documentAttributeFilename();
                    break;
                }
                case 297109817: {
                    tlObject = new TL_documentAttributeAnimated();
                    break;
                }
                case 250621158: {
                    tlObject = new TL_documentAttributeVideo();
                    break;
                }
                case 85215461: {
                    tlObject = new TL_documentAttributeAudio_old();
                    break;
                }
                case -83208409: {
                    tlObject = new TL_documentAttributeSticker_old();
                    break;
                }
                case -556656416: {
                    tlObject = new TL_documentAttributeAudio_layer45();
                    break;
                }
                case -1723033470: {
                    tlObject = new TL_documentAttributeSticker_old2();
                    break;
                }
                case -1739392570: {
                    tlObject = new TL_documentAttributeAudio();
                    break;
                }
                case -1744710921: {
                    tlObject = new TL_documentAttributeHasStickers();
                    break;
                }
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in DocumentAttribute", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (DocumentAttribute)tlObject;
        }
    }
    
    public abstract static class DraftMessage extends TLObject
    {
        public int date;
        public ArrayList<MessageEntity> entities;
        public int flags;
        public String message;
        public boolean no_webpage;
        public int reply_to_msg_id;
        
        public DraftMessage() {
            this.entities = new ArrayList<MessageEntity>();
        }
        
        public static DraftMessage TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != -1169445179) {
                if (i != -40996577) {
                    if (i != 453805082) {
                        tlObject = null;
                    }
                    else {
                        tlObject = new TL_draftMessageEmpty();
                    }
                }
                else {
                    tlObject = new TL_draftMessage();
                }
            }
            else {
                tlObject = new TL_draftMessageEmpty_layer81();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in DraftMessage", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (DraftMessage)tlObject;
        }
    }
    
    public abstract static class EmojiKeyword extends TLObject
    {
        public static EmojiKeyword TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != -709641735) {
                if (i != 594408994) {
                    tlObject = null;
                }
                else {
                    tlObject = new TL_emojiKeywordDeleted();
                }
            }
            else {
                tlObject = new TL_emojiKeyword();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in EmojiKeyword", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (EmojiKeyword)tlObject;
        }
    }
    
    public abstract static class EncryptedChat extends TLObject
    {
        public byte[] a_or_b;
        public long access_hash;
        public int admin_id;
        public byte[] auth_key;
        public int date;
        public long exchange_id;
        public byte[] future_auth_key;
        public long future_key_fingerprint;
        public byte[] g_a;
        public byte[] g_a_or_b;
        public int id;
        public int in_seq_no;
        public int key_create_date;
        public long key_fingerprint;
        public byte[] key_hash;
        public short key_use_count_in;
        public short key_use_count_out;
        public int layer;
        public int mtproto_seq;
        public byte[] nonce;
        public int participant_id;
        public int seq_in;
        public int seq_out;
        public int ttl;
        public int user_id;
        
        public static EncryptedChat TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject = null;
            switch (i) {
                default: {
                    tlObject = null;
                    break;
                }
                case 1711395151: {
                    tlObject = new TL_encryptedChat_old();
                    break;
                }
                case 1006044124: {
                    tlObject = new TL_encryptedChatWaiting();
                    break;
                }
                case 332848423: {
                    tlObject = new TL_encryptedChatDiscarded();
                    break;
                }
                case -39213129: {
                    tlObject = new TL_encryptedChatRequested_old();
                    break;
                }
                case -94974410: {
                    tlObject = new TL_encryptedChat();
                    break;
                }
                case -931638658: {
                    tlObject = new TL_encryptedChatRequested();
                    break;
                }
                case -1417756512: {
                    tlObject = new TL_encryptedChatEmpty();
                    break;
                }
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in EncryptedChat", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (EncryptedChat)tlObject;
        }
    }
    
    public abstract static class EncryptedFile extends TLObject
    {
        public long access_hash;
        public int dc_id;
        public long id;
        public int key_fingerprint;
        public int size;
        
        public static EncryptedFile TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != -1038136962) {
                if (i != 1248893260) {
                    tlObject = null;
                }
                else {
                    tlObject = new TL_encryptedFile();
                }
            }
            else {
                tlObject = new TL_encryptedFileEmpty();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in EncryptedFile", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (EncryptedFile)tlObject;
        }
    }
    
    public abstract static class EncryptedMessage extends TLObject
    {
        public byte[] bytes;
        public int chat_id;
        public int date;
        public EncryptedFile file;
        public long random_id;
        
        public static EncryptedMessage TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != -317144808) {
                if (i != 594758406) {
                    tlObject = null;
                }
                else {
                    tlObject = new TL_encryptedMessageService();
                }
            }
            else {
                tlObject = new TL_encryptedMessage();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in EncryptedMessage", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (EncryptedMessage)tlObject;
        }
    }
    
    public abstract static class ExportedChatInvite extends TLObject
    {
        public String link;
        
        public static ExportedChatInvite TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != -64092740) {
                if (i != 1776236393) {
                    tlObject = null;
                }
                else {
                    tlObject = new TL_chatInviteEmpty();
                }
            }
            else {
                tlObject = new TL_chatInviteExported();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in ExportedChatInvite", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (ExportedChatInvite)tlObject;
        }
    }
    
    public abstract static class FileLocation extends TLObject
    {
        public int dc_id;
        public byte[] file_reference;
        public byte[] iv;
        public byte[] key;
        public int local_id;
        public long secret;
        public long volume_id;
        
        public static FileLocation TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject = null;
            switch (i) {
                default: {
                    tlObject = null;
                    break;
                }
                case 2086234950: {
                    tlObject = new TL_fileLocationUnavailable();
                    break;
                }
                case 1431655764: {
                    tlObject = new TL_fileEncryptedLocation();
                    break;
                }
                case 1406570614: {
                    tlObject = new TL_fileLocation_layer82();
                    break;
                }
                case 152900075: {
                    tlObject = new TL_fileLocation_layer97();
                    break;
                }
                case -1132476723: {
                    tlObject = new TL_fileLocationToBeDeprecated();
                    break;
                }
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in FileLocation", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (FileLocation)tlObject;
        }
    }
    
    public abstract static class FoundGif extends TLObject
    {
        public String content_type;
        public String content_url;
        public Document document;
        public int h;
        public Photo photo;
        public String thumb_url;
        public String url;
        public int w;
        
        public static FoundGif TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != -1670052855) {
                if (i != 372165663) {
                    tlObject = null;
                }
                else {
                    tlObject = new TL_foundGif();
                }
            }
            else {
                tlObject = new TL_foundGifCached();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in FoundGif", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (FoundGif)tlObject;
        }
    }
    
    public abstract static class GeoPoint extends TLObject
    {
        public double _long;
        public long access_hash;
        public double lat;
        
        public static GeoPoint TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != 43446532) {
                if (i != 286776671) {
                    if (i != 541710092) {
                        tlObject = null;
                    }
                    else {
                        tlObject = new TL_geoPoint_layer81();
                    }
                }
                else {
                    tlObject = new TL_geoPointEmpty();
                }
            }
            else {
                tlObject = new TL_geoPoint();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in GeoPoint", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (GeoPoint)tlObject;
        }
    }
    
    public abstract static class GroupCall extends TLObject
    {
        public long access_hash;
        public int admin_id;
        public int channel_id;
        public TL_groupCallConnection connection;
        public int duration;
        public byte[] encryption_key;
        public int flags;
        public long id;
        public long key_fingerprint;
        public int participants_count;
        public TL_phoneCallProtocol protocol;
        public byte[] reflector_group_tag;
        public byte[] reflector_self_secret;
        public byte[] reflector_self_tag;
        
        public static GroupCall TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != 177149476) {
                if (i != 1829443076) {
                    if (i != 2004925620) {
                        tlObject = null;
                    }
                    else {
                        tlObject = new TL_groupCallDiscarded();
                    }
                }
                else {
                    tlObject = new TL_groupCallPrivate();
                }
            }
            else {
                tlObject = new TL_groupCall();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in GroupCall", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (GroupCall)tlObject;
        }
    }
    
    public abstract static class GroupCallParticipant extends TLObject
    {
        public int date;
        public int flags;
        public int inviter_id;
        public byte[] member_tag_hash;
        public TL_inputPhoneCall phone_call;
        public boolean readonly;
        public byte[] streams;
        public int user_id;
        
        public static GroupCallParticipant TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject = null;
            switch (i) {
                default: {
                    tlObject = null;
                    break;
                }
                case 1486730135: {
                    tlObject = new TL_groupCallParticipant();
                    break;
                }
                case 1326135736: {
                    tlObject = new TL_groupCallParticipantAdmin();
                    break;
                }
                case 1100680690: {
                    tlObject = new TL_groupCallParticipantLeft();
                    break;
                }
                case 930387696: {
                    tlObject = new TL_groupCallParticipantInvited();
                    break;
                }
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in GroupCallParticipant", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (GroupCallParticipant)tlObject;
        }
    }
    
    public abstract static class InputChannel extends TLObject
    {
        public long access_hash;
        public int channel_id;
        
        public static InputChannel TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != -1343524562) {
                if (i != -292807034) {
                    if (i != 707290417) {
                        tlObject = null;
                    }
                    else {
                        tlObject = new TL_inputChannelFromMessage();
                    }
                }
                else {
                    tlObject = new TL_inputChannelEmpty();
                }
            }
            else {
                tlObject = new TL_inputChannel();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in InputChannel", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (InputChannel)tlObject;
        }
    }
    
    public abstract static class InputChatPhoto extends TLObject
    {
        public InputFile file;
        public InputPhoto id;
        
        public static InputChatPhoto TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != -1991004873) {
                if (i != -1837345356) {
                    if (i != 480546647) {
                        tlObject = null;
                    }
                    else {
                        tlObject = new TL_inputChatPhotoEmpty();
                    }
                }
                else {
                    tlObject = new TL_inputChatUploadedPhoto();
                }
            }
            else {
                tlObject = new TL_inputChatPhoto();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in InputChatPhoto", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (InputChatPhoto)tlObject;
        }
    }
    
    public abstract static class InputCheckPasswordSRP extends TLObject
    {
        public static InputCheckPasswordSRP TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != -1736378792) {
                if (i != -763367294) {
                    tlObject = null;
                }
                else {
                    tlObject = new TL_inputCheckPasswordSRP();
                }
            }
            else {
                tlObject = new TL_inputCheckPasswordEmpty();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in InputCheckPasswordSRP", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (InputCheckPasswordSRP)tlObject;
        }
    }
    
    public abstract static class InputDialogPeer extends TLObject
    {
        public static InputDialogPeer TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != -55902537) {
                if (i != 1684014375) {
                    tlObject = null;
                }
                else {
                    tlObject = new TL_inputDialogPeerFolder();
                }
            }
            else {
                tlObject = new TL_inputDialogPeer();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in InputDialogPeer", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (InputDialogPeer)tlObject;
        }
    }
    
    public abstract static class InputDocument extends TLObject
    {
        public long access_hash;
        public byte[] file_reference;
        public long id;
        
        public static InputDocument TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != 448771445) {
                if (i != 1928391342) {
                    tlObject = null;
                }
                else {
                    tlObject = new TL_inputDocumentEmpty();
                }
            }
            else {
                tlObject = new TL_inputDocument();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in InputDocument", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (InputDocument)tlObject;
        }
    }
    
    public abstract static class InputEncryptedFile extends TLObject
    {
        public long access_hash;
        public long id;
        public int key_fingerprint;
        public String md5_checksum;
        public int parts;
        
        public static InputEncryptedFile TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject = null;
            switch (i) {
                default: {
                    tlObject = null;
                    break;
                }
                case 1690108678: {
                    tlObject = new TL_inputEncryptedFileUploaded();
                    break;
                }
                case 1511503333: {
                    tlObject = new TL_inputEncryptedFile();
                    break;
                }
                case 767652808: {
                    tlObject = new TL_inputEncryptedFileBigUploaded();
                    break;
                }
                case 406307684: {
                    tlObject = new TL_inputEncryptedFileEmpty();
                    break;
                }
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in InputEncryptedFile", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (InputEncryptedFile)tlObject;
        }
    }
    
    public abstract static class InputFile extends TLObject
    {
        public long id;
        public String md5_checksum;
        public String name;
        public int parts;
        
        public static InputFile TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != -181407105) {
                if (i != -95482955) {
                    tlObject = null;
                }
                else {
                    tlObject = new TL_inputFileBig();
                }
            }
            else {
                tlObject = new TL_inputFile();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in InputFile", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (InputFile)tlObject;
        }
    }
    
    public abstract static class InputFileLocation extends TLObject
    {
        public long access_hash;
        public boolean big;
        public byte[] file_reference;
        public int flags;
        public long id;
        public int local_id;
        public InputPeer peer;
        public long secret;
        public InputStickerSet stickerset;
        public String thumb_size;
        public long volume_id;
        
        public static InputFileLocation TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject = null;
            switch (i) {
                default: {
                    tlObject = null;
                    break;
                }
                case 1075322878: {
                    tlObject = new TL_inputPhotoFileLocation();
                    break;
                }
                case 668375447: {
                    tlObject = new TL_inputPeerPhotoFileLocation();
                    break;
                }
                case 230353641: {
                    tlObject = new TL_inputStickerSetThumb();
                    break;
                }
                case -182231723: {
                    tlObject = new TL_inputEncryptedFileLocation();
                    break;
                }
                case -539317279: {
                    tlObject = new TL_inputFileLocation();
                    break;
                }
                case -876089816: {
                    tlObject = new TL_inputSecureFileLocation();
                    break;
                }
                case -1160743548: {
                    tlObject = new TL_inputDocumentFileLocation();
                    break;
                }
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in InputFileLocation", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (InputFileLocation)tlObject;
        }
    }
    
    public abstract static class InputGame extends TLObject
    {
        public long access_hash;
        public InputUser bot_id;
        public long id;
        public String short_name;
        
        public static InputGame TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != -1020139510) {
                if (i != 53231223) {
                    tlObject = null;
                }
                else {
                    tlObject = new TL_inputGameID();
                }
            }
            else {
                tlObject = new TL_inputGameShortName();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in InputGame", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (InputGame)tlObject;
        }
    }
    
    public abstract static class InputGeoPoint extends TLObject
    {
        public double _long;
        public double lat;
        
        public static InputGeoPoint TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != -457104426) {
                if (i != -206066487) {
                    tlObject = null;
                }
                else {
                    tlObject = new TL_inputGeoPoint();
                }
            }
            else {
                tlObject = new TL_inputGeoPointEmpty();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in InputGeoPoint", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (InputGeoPoint)tlObject;
        }
    }
    
    public abstract static class InputMedia extends TLObject
    {
        public String address;
        public ArrayList<DocumentAttribute> attributes;
        public InputFile file;
        public String first_name;
        public int flags;
        public InputGeoPoint geo_point;
        public String last_name;
        public String mime_type;
        public boolean nosound_video;
        public int period;
        public String phone_number;
        public String provider;
        public String q;
        public ArrayList<InputDocument> stickers;
        public boolean stopped;
        public InputFile thumb;
        public String title;
        public int ttl_seconds;
        public String url;
        public String vcard;
        public String venue_id;
        public String venue_type;
        
        public InputMedia() {
            this.stickers = new ArrayList<InputDocument>();
            this.attributes = new ArrayList<DocumentAttribute>();
        }
        
        public static InputMedia TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject = null;
            switch (i) {
                default: {
                    tlObject = null;
                    break;
                }
                case 1530447553: {
                    tlObject = new TL_inputMediaUploadedDocument();
                    break;
                }
                case 1212395773: {
                    tlObject = new TL_inputMediaGifExternal();
                    break;
                }
                case 598418386: {
                    tlObject = new TL_inputMediaDocument();
                    break;
                }
                case 505969924: {
                    tlObject = new TL_inputMediaUploadedPhoto();
                    break;
                }
                case 112424539: {
                    tlObject = new TL_inputMediaPoll();
                    break;
                }
                case -78455655: {
                    tlObject = new TL_inputMediaDocumentExternal();
                    break;
                }
                case -104578748: {
                    tlObject = new TL_inputMediaGeoPoint();
                    break;
                }
                case -122978821: {
                    tlObject = new TL_inputMediaContact();
                    break;
                }
                case -440664550: {
                    tlObject = new TL_inputMediaPhotoExternal();
                    break;
                }
                case -750828557: {
                    tlObject = new TL_inputMediaGame();
                    break;
                }
                case -833715459: {
                    tlObject = new TL_inputMediaGeoLive();
                    break;
                }
                case -1052959727: {
                    tlObject = new TL_inputMediaVenue();
                    break;
                }
                case -1279654347: {
                    tlObject = new TL_inputMediaPhoto();
                    break;
                }
                case -1771768449: {
                    tlObject = new TL_inputMediaEmpty();
                    break;
                }
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in InputMedia", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (InputMedia)tlObject;
        }
    }
    
    public abstract static class InputNotifyPeer extends TLObject
    {
        public static InputNotifyPeer TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject = null;
            switch (i) {
                default: {
                    tlObject = null;
                    break;
                }
                case 1251338318: {
                    tlObject = new TL_inputNotifyChats();
                    break;
                }
                case 423314455: {
                    tlObject = new TL_inputNotifyUsers();
                    break;
                }
                case -1195615476: {
                    tlObject = new TL_inputNotifyPeer();
                    break;
                }
                case -1311015810: {
                    tlObject = new TL_inputNotifyBroadcasts();
                    break;
                }
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in InputNotifyPeer", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (InputNotifyPeer)tlObject;
        }
    }
    
    public abstract static class InputPaymentCredentials extends TLObject
    {
        public TL_dataJSON data;
        public int flags;
        public String google_transaction_id;
        public String id;
        public TL_dataJSON payment_token;
        public boolean save;
        public byte[] tmp_password;
        
        public static InputPaymentCredentials TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != -1056001329) {
                if (i != -905587442) {
                    if (i != 873977640) {
                        tlObject = null;
                    }
                    else {
                        tlObject = new TL_inputPaymentCredentials();
                    }
                }
                else {
                    tlObject = new TL_inputPaymentCredentialsAndroidPay();
                }
            }
            else {
                tlObject = new TL_inputPaymentCredentialsSaved();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in InputPaymentCredentials", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (InputPaymentCredentials)tlObject;
        }
    }
    
    public abstract static class InputPeer extends TLObject
    {
        public long access_hash;
        public int channel_id;
        public int chat_id;
        public int user_id;
        
        public static InputPeer TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject = null;
            switch (i) {
                default: {
                    tlObject = null;
                    break;
                }
                case 2134579434: {
                    tlObject = new TL_inputPeerEmpty();
                    break;
                }
                case 2107670217: {
                    tlObject = new TL_inputPeerSelf();
                    break;
                }
                case 2072935910: {
                    tlObject = new TL_inputPeerUser();
                    break;
                }
                case 548253432: {
                    tlObject = new TL_inputPeerChannel();
                    break;
                }
                case 398123750: {
                    tlObject = new TL_inputPeerUserFromMessage();
                    break;
                }
                case 396093539: {
                    tlObject = new TL_inputPeerChat();
                    break;
                }
                case -1667893317: {
                    tlObject = new TL_inputPeerChannelFromMessage();
                    break;
                }
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in InputPeer", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (InputPeer)tlObject;
        }
    }
    
    public abstract static class InputPhoto extends TLObject
    {
        public long access_hash;
        public byte[] file_reference;
        public long id;
        
        public static InputPhoto TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != 483901197) {
                if (i != 1001634122) {
                    tlObject = null;
                }
                else {
                    tlObject = new TL_inputPhoto();
                }
            }
            else {
                tlObject = new TL_inputPhotoEmpty();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in InputPhoto", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (InputPhoto)tlObject;
        }
    }
    
    public abstract static class InputPrivacyKey extends TLObject
    {
        public static InputPrivacyKey TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject = null;
            switch (i) {
                default: {
                    tlObject = null;
                    break;
                }
                case 1461304012: {
                    tlObject = new TL_inputPrivacyKeyProfilePhoto();
                    break;
                }
                case 1335282456: {
                    tlObject = new TL_inputPrivacyKeyStatusTimestamp();
                    break;
                }
                case 55761658: {
                    tlObject = new TL_inputPrivacyKeyPhoneNumber();
                    break;
                }
                case -88417185: {
                    tlObject = new TL_inputPrivacyKeyPhoneCall();
                    break;
                }
                case -610373422: {
                    tlObject = new TL_inputPrivacyKeyPhoneP2P();
                    break;
                }
                case -1107622874: {
                    tlObject = new TL_inputPrivacyKeyChatInvite();
                    break;
                }
                case -1529000952: {
                    tlObject = new TL_inputPrivacyKeyForwards();
                    break;
                }
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in InputPrivacyKey", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (InputPrivacyKey)tlObject;
        }
    }
    
    public abstract static class InputPrivacyRule extends TLObject
    {
        public static InputPrivacyRule TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject = null;
            switch (i) {
                default: {
                    tlObject = null;
                    break;
                }
                case 1283572154: {
                    tlObject = new TL_inputPrivacyValueAllowChatParticipants();
                    break;
                }
                case 407582158: {
                    tlObject = new TL_inputPrivacyValueAllowAll();
                    break;
                }
                case 320652927: {
                    tlObject = new TL_inputPrivacyValueAllowUsers();
                    break;
                }
                case 218751099: {
                    tlObject = new TL_inputPrivacyValueAllowContacts();
                    break;
                }
                case 195371015: {
                    tlObject = new TL_inputPrivacyValueDisallowContacts();
                    break;
                }
                case -668769361: {
                    tlObject = new TL_inputPrivacyValueDisallowChatParticipants();
                    break;
                }
                case -697604407: {
                    tlObject = new TL_inputPrivacyValueDisallowAll();
                    break;
                }
                case -1877932953: {
                    tlObject = new TL_inputPrivacyValueDisallowUsers();
                    break;
                }
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in InputPrivacyRule", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (InputPrivacyRule)tlObject;
        }
    }
    
    public abstract static class InputSecureFile extends TLObject
    {
        public static InputSecureFile TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != 859091184) {
                if (i != 1399317950) {
                    tlObject = null;
                }
                else {
                    tlObject = new TL_inputSecureFile();
                }
            }
            else {
                tlObject = new TL_inputSecureFileUploaded();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in InputSecureFile", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (InputSecureFile)tlObject;
        }
    }
    
    public abstract static class InputStickerSet extends TLObject
    {
        public long access_hash;
        public long id;
        public String short_name;
        
        public static InputStickerSet TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != -2044933984) {
                if (i != -1645763991) {
                    if (i != -4838507) {
                        tlObject = null;
                    }
                    else {
                        tlObject = new TL_inputStickerSetEmpty();
                    }
                }
                else {
                    tlObject = new TL_inputStickerSetID();
                }
            }
            else {
                tlObject = new TL_inputStickerSetShortName();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in InputStickerSet", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (InputStickerSet)tlObject;
        }
    }
    
    public abstract static class InputStickeredMedia extends TLObject
    {
        public static InputStickeredMedia TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != 70813275) {
                if (i != 1251549527) {
                    tlObject = null;
                }
                else {
                    tlObject = new TL_inputStickeredMediaPhoto();
                }
            }
            else {
                tlObject = new TL_inputStickeredMediaDocument();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in InputStickeredMedia", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (InputStickeredMedia)tlObject;
        }
    }
    
    public abstract static class InputUser extends TLObject
    {
        public long access_hash;
        public int user_id;
        
        public static InputUser TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject = null;
            switch (i) {
                default: {
                    tlObject = null;
                    break;
                }
                case 756118935: {
                    tlObject = new TL_inputUserFromMessage();
                    break;
                }
                case -138301121: {
                    tlObject = new TL_inputUserSelf();
                    break;
                }
                case -668391402: {
                    tlObject = new TL_inputUser();
                    break;
                }
                case -1182234929: {
                    tlObject = new TL_inputUserEmpty();
                    break;
                }
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in InputUser", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (InputUser)tlObject;
        }
    }
    
    public abstract static class InputWallPaper extends TLObject
    {
        public static InputWallPaper TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != -433014407) {
                if (i != 1913199744) {
                    tlObject = null;
                }
                else {
                    tlObject = new TL_inputWallPaperSlug();
                }
            }
            else {
                tlObject = new TL_inputWallPaper();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in InputWallPaper", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (InputWallPaper)tlObject;
        }
    }
    
    public abstract static class InputWebFileLocation extends TLObject
    {
        public static InputWebFileLocation TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != -1625153079) {
                if (i != -1036396922) {
                    tlObject = null;
                }
                else {
                    tlObject = new TL_inputWebFileLocation();
                }
            }
            else {
                tlObject = new TL_inputWebFileGeoPointLocation();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in InputWebFileLocation", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (InputWebFileLocation)tlObject;
        }
    }
    
    public abstract static class JSONValue extends TLObject
    {
        public static JSONValue TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject = null;
            switch (i) {
                default: {
                    tlObject = null;
                    break;
                }
                case 1064139624: {
                    tlObject = new TL_jsonNull();
                    break;
                }
                case 736157604: {
                    tlObject = new TL_jsonNumber();
                    break;
                }
                case -146520221: {
                    tlObject = new TL_jsonArray();
                    break;
                }
                case -952869270: {
                    tlObject = new TL_jsonBool();
                    break;
                }
                case -1222740358: {
                    tlObject = new TL_jsonString();
                    break;
                }
                case -1715350371: {
                    tlObject = new TL_jsonObject();
                    break;
                }
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in JSONValue", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (JSONValue)tlObject;
        }
    }
    
    public abstract static class KeyboardButton extends TLObject
    {
        public InputUser bot;
        public int button_id;
        public byte[] data;
        public int flags;
        public String fwd_text;
        public String query;
        public boolean request_write_access;
        public boolean same_peer;
        public String text;
        public String url;
        
        public static KeyboardButton TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject = null;
            switch (i) {
                default: {
                    tlObject = null;
                    break;
                }
                case 1748655686: {
                    tlObject = new TL_keyboardButtonCallback();
                    break;
                }
                case 1358175439: {
                    tlObject = new TL_keyboardButtonGame();
                    break;
                }
                case 629866245: {
                    tlObject = new TL_keyboardButtonUrl();
                    break;
                }
                case 280464681: {
                    tlObject = new TL_keyboardButtonUrlAuth();
                    break;
                }
                case 90744648: {
                    tlObject = new TL_keyboardButtonSwitchInline();
                    break;
                }
                case -59151553: {
                    tlObject = new TL_keyboardButtonRequestGeoLocation();
                    break;
                }
                case -802258988: {
                    tlObject = new TL_inputKeyboardButtonUrlAuth();
                    break;
                }
                case -1318425559: {
                    tlObject = new TL_keyboardButtonRequestPhone();
                    break;
                }
                case -1344716869: {
                    tlObject = new TL_keyboardButtonBuy();
                    break;
                }
                case -1560655744: {
                    tlObject = new TL_keyboardButton();
                    break;
                }
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in KeyboardButton", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (KeyboardButton)tlObject;
        }
    }
    
    public abstract static class LangPackString extends TLObject
    {
        public String few_value;
        public int flags;
        public String key;
        public String many_value;
        public String one_value;
        public String other_value;
        public String two_value;
        public String value;
        public String zero_value;
        
        public static LangPackString TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != -892239370) {
                if (i != 695856818) {
                    if (i != 1816636575) {
                        tlObject = null;
                    }
                    else {
                        tlObject = new TL_langPackStringPluralized();
                    }
                }
                else {
                    tlObject = new TL_langPackStringDeleted();
                }
            }
            else {
                tlObject = new TL_langPackString();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in LangPackString", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (LangPackString)tlObject;
        }
    }
    
    public abstract static class Message extends TLObject
    {
        public MessageAction action;
        public String attachPath;
        public int date;
        public int destroyTime;
        public long dialog_id;
        public int edit_date;
        public ArrayList<MessageEntity> entities;
        public int flags;
        public int from_id;
        public boolean from_scheduled;
        public MessageFwdHeader fwd_from;
        public int fwd_msg_id;
        public long grouped_id;
        public int id;
        public int layer;
        public boolean legacy;
        public int local_id;
        public MessageMedia media;
        public boolean media_unread;
        public boolean mentioned;
        public String message;
        public boolean out;
        public HashMap<String, String> params;
        public boolean post;
        public String post_author;
        public long random_id;
        public int realId;
        public Message replyMessage;
        public ReplyMarkup reply_markup;
        public int reply_to_msg_id;
        public long reply_to_random_id;
        public int reqId;
        public int send_state;
        public int seq_in;
        public int seq_out;
        public boolean silent;
        public Peer to_id;
        public int ttl;
        public boolean unread;
        public int via_bot_id;
        public String via_bot_name;
        public int views;
        public boolean with_my_score;
        
        public Message() {
            this.entities = new ArrayList<MessageEntity>();
            this.send_state = 0;
            this.fwd_msg_id = 0;
            this.attachPath = "";
            this.local_id = 0;
        }
        
        public static Message TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject = null;
            switch (i) {
                default: {
                    tlObject = null;
                    break;
                }
                case 1537633299: {
                    tlObject = new TL_message_old7();
                    break;
                }
                case 1450613171: {
                    tlObject = new TL_message_old2();
                    break;
                }
                case 1431655930: {
                    tlObject = new TL_message_secret();
                    break;
                }
                case 1431655929: {
                    tlObject = new TL_message_secret_layer72();
                    break;
                }
                case 1431655928: {
                    tlObject = new TL_message_secret_old();
                    break;
                }
                case 1157215293: {
                    tlObject = new TL_message();
                    break;
                }
                case 736885382: {
                    tlObject = new TL_message_old6();
                    break;
                }
                case 585853626: {
                    tlObject = new TL_message_old();
                    break;
                }
                case 495384334: {
                    tlObject = new TL_messageService_old2();
                    break;
                }
                case 99903492: {
                    tlObject = new TL_messageForwarded_old();
                    break;
                }
                case -260565816: {
                    tlObject = new TL_message_old5();
                    break;
                }
                case -913120932: {
                    tlObject = new TL_message_layer47();
                    break;
                }
                case -1023016155: {
                    tlObject = new TL_message_old4();
                    break;
                }
                case -1063525281: {
                    tlObject = new TL_message_layer68();
                    break;
                }
                case -1066691065: {
                    tlObject = new TL_messageService_layer48();
                    break;
                }
                case -1481959023: {
                    tlObject = new TL_message_old3();
                    break;
                }
                case -1553471722: {
                    tlObject = new TL_messageForwarded_old2();
                    break;
                }
                case -1618124613: {
                    tlObject = new TL_messageService_old();
                    break;
                }
                case -1642487306: {
                    tlObject = new TL_messageService();
                    break;
                }
                case -1864508399: {
                    tlObject = new TL_message_layer72();
                    break;
                }
                case -2082087340: {
                    tlObject = new TL_messageEmpty();
                    break;
                }
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in Message", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (Message)tlObject;
        }
        
        public void readAttachPath(final AbstractSerializedData abstractSerializedData, int i) {
            final MessageMedia media = this.media;
            final boolean b = media != null && !(media instanceof TL_messageMediaEmpty) && !(media instanceof TL_messageMediaWebPage);
            boolean b2 = false;
            Label_0110: {
                if (!TextUtils.isEmpty((CharSequence)this.message)) {
                    final MessageMedia media2 = this.media;
                    if ((media2 instanceof TL_messageMediaPhoto_old || media2 instanceof TL_messageMediaPhoto_layer68 || media2 instanceof TL_messageMediaPhoto_layer74 || media2 instanceof TL_messageMediaDocument_old || media2 instanceof TL_messageMediaDocument_layer68 || media2 instanceof TL_messageMediaDocument_layer74) && this.message.startsWith("-1")) {
                        b2 = true;
                        break Label_0110;
                    }
                }
                b2 = false;
            }
            Label_0445: {
                Label_0183: {
                    Label_0176: {
                        if (!this.out) {
                            final Peer to_id = this.to_id;
                            if (to_id == null) {
                                break Label_0176;
                            }
                            final int user_id = to_id.user_id;
                            if (user_id == 0) {
                                break Label_0176;
                            }
                            final int from_id = this.from_id;
                            if (user_id != from_id || from_id != i) {
                                break Label_0176;
                            }
                        }
                        if (this.id < 0 || b || this.send_state == 3) {
                            break Label_0183;
                        }
                    }
                    if (!this.legacy) {
                        break Label_0445;
                    }
                }
                if (b && b2) {
                    if (this.message.length() > 6 && this.message.charAt(2) == '_') {
                        (this.params = new HashMap<String, String>()).put("ve", this.message);
                    }
                    if (this.params != null || this.message.length() == 2) {
                        this.message = "";
                    }
                }
                if (abstractSerializedData.remaining() > 0) {
                    this.attachPath = abstractSerializedData.readString(false);
                    if ((this.id < 0 || this.send_state == 3 || this.legacy) && this.attachPath.startsWith("||")) {
                        final String[] split = this.attachPath.split("\\|\\|");
                        if (split.length > 0) {
                            if (this.params == null) {
                                this.params = new HashMap<String, String>();
                            }
                            String[] split2;
                            for (i = 1; i < split.length - 1; ++i) {
                                split2 = split[i].split("\\|=\\|");
                                if (split2.length == 2) {
                                    this.params.put(split2[0], split2[1]);
                                }
                            }
                            this.attachPath = split[split.length - 1].trim();
                            if (this.legacy) {
                                this.layer = Utilities.parseInt(this.params.get("legacy_layer"));
                            }
                        }
                    }
                }
            }
            if ((this.flags & 0x4) != 0x0 && this.id < 0) {
                this.fwd_msg_id = abstractSerializedData.readInt32(false);
            }
        }
        
        protected void writeAttachPath(final AbstractSerializedData abstractSerializedData) {
            if (!(this instanceof TL_message_secret) && !(this instanceof TL_message_secret_layer72)) {
                String s;
                if (!TextUtils.isEmpty((CharSequence)this.attachPath)) {
                    s = this.attachPath;
                }
                else {
                    s = " ";
                }
                if (this.legacy) {
                    if (this.params == null) {
                        this.params = new HashMap<String, String>();
                    }
                    this.layer = 100;
                    this.params.put("legacy_layer", "100");
                }
                String string = null;
                Label_0264: {
                    if (this.id >= 0 && this.send_state != 3) {
                        string = s;
                        if (!this.legacy) {
                            break Label_0264;
                        }
                    }
                    final HashMap<String, String> params = this.params;
                    string = s;
                    if (params != null) {
                        string = s;
                        if (params.size() > 0) {
                            for (final Map.Entry<String, String> entry : this.params.entrySet()) {
                                final StringBuilder sb = new StringBuilder();
                                sb.append(entry.getKey());
                                sb.append("|=|");
                                sb.append(entry.getValue());
                                sb.append("||");
                                sb.append(s);
                                s = sb.toString();
                            }
                            final StringBuilder sb2 = new StringBuilder();
                            sb2.append("||");
                            sb2.append(s);
                            string = sb2.toString();
                        }
                    }
                }
                abstractSerializedData.writeString(string);
                if ((this.flags & 0x4) != 0x0 && this.id < 0) {
                    abstractSerializedData.writeInt32(this.fwd_msg_id);
                }
            }
            else {
                String s2 = this.attachPath;
                if (s2 == null) {
                    s2 = "";
                }
                String string2 = s2;
                if (this.send_state == 1) {
                    final HashMap<String, String> params2 = this.params;
                    string2 = s2;
                    if (params2 != null) {
                        string2 = s2;
                        if (params2.size() > 0) {
                            for (final Map.Entry<String, String> entry2 : this.params.entrySet()) {
                                final StringBuilder sb3 = new StringBuilder();
                                sb3.append(entry2.getKey());
                                sb3.append("|=|");
                                sb3.append(entry2.getValue());
                                sb3.append("||");
                                sb3.append(s2);
                                s2 = sb3.toString();
                            }
                            final StringBuilder sb4 = new StringBuilder();
                            sb4.append("||");
                            sb4.append(s2);
                            string2 = sb4.toString();
                        }
                    }
                }
                abstractSerializedData.writeString(string2);
            }
        }
    }
    
    public abstract static class MessageAction extends TLObject
    {
        public String address;
        public TL_inputGroupCall call;
        public long call_id;
        public int channel_id;
        public int chat_id;
        public String currency;
        public int duration;
        public DecryptedMessageAction encryptedAction;
        public int flags;
        public long game_id;
        public int inviter_id;
        public String message;
        public UserProfilePhoto newUserPhoto;
        public Photo photo;
        public PhoneCallDiscardReason reason;
        public int score;
        public String title;
        public long total_amount;
        public int ttl;
        public int user_id;
        public ArrayList<Integer> users;
        public boolean video;
        
        public MessageAction() {
            this.users = new ArrayList<Integer>();
        }
        
        public static MessageAction TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject = null;
            switch (i) {
                default: {
                    tlObject = null;
                    break;
                }
                case 2144015272: {
                    tlObject = new TL_messageActionChatEditPhoto();
                    break;
                }
                case 2047704898: {
                    tlObject = new TL_messageActionGroupCall();
                    break;
                }
                case 1581055051: {
                    tlObject = new TL_messageActionChatAddUser_old();
                    break;
                }
                case 1431655927: {
                    tlObject = new TL_messageEncryptedAction();
                    break;
                }
                case 1431655925: {
                    tlObject = new TL_messageActionLoginUnknownLocation();
                    break;
                }
                case 1431655767: {
                    tlObject = new TL_messageActionCreatedBroadcastList();
                    break;
                }
                case 1431655762: {
                    tlObject = new TL_messageActionTTLChange();
                    break;
                }
                case 1431655761: {
                    tlObject = new TL_messageActionUserUpdatedPhoto();
                    break;
                }
                case 1431655760: {
                    tlObject = new TL_messageActionUserJoined();
                    break;
                }
                case 1371385889: {
                    tlObject = new TL_messageActionChatMigrateTo();
                    break;
                }
                case 1217033015: {
                    tlObject = new TL_messageActionChatAddUser();
                    break;
                }
                case 1200788123: {
                    tlObject = new TL_messageActionScreenshotTaken();
                    break;
                }
                case 1080663248: {
                    tlObject = new TL_messageActionPaymentSent();
                    break;
                }
                case -85549226: {
                    tlObject = new TL_messageActionCustomAction();
                    break;
                }
                case -123931160: {
                    tlObject = new TL_messageActionChatJoinedByLink();
                    break;
                }
                case -202219658: {
                    tlObject = new TL_messageActionContactSignUp();
                    break;
                }
                case -648257196: {
                    tlObject = new TL_messageActionSecureValuesSent();
                    break;
                }
                case -1230047312: {
                    tlObject = new TL_messageActionEmpty();
                    break;
                }
                case -1247687078: {
                    tlObject = new TL_messageActionChatEditTitle();
                    break;
                }
                case -1297179892: {
                    tlObject = new TL_messageActionChatDeleteUser();
                    break;
                }
                case -1336546578: {
                    tlObject = new TL_messageActionChannelMigrateFrom();
                    break;
                }
                case -1410748418: {
                    tlObject = new TL_messageActionBotAllowed();
                    break;
                }
                case -1503425638: {
                    tlObject = new TL_messageActionChatCreate();
                    break;
                }
                case -1615153660: {
                    tlObject = new TL_messageActionHistoryClear();
                    break;
                }
                case -1780220945: {
                    tlObject = new TL_messageActionChatDeletePhoto();
                    break;
                }
                case -1781355374: {
                    tlObject = new TL_messageActionChannelCreate();
                    break;
                }
                case -1799538451: {
                    tlObject = new TL_messageActionPinMessage();
                    break;
                }
                case -1834538890: {
                    tlObject = new TL_messageActionGameScore();
                    break;
                }
                case -2132731265: {
                    tlObject = new TL_messageActionPhoneCall();
                    break;
                }
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in MessageAction", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (MessageAction)tlObject;
        }
    }
    
    public abstract static class MessageEntity extends TLObject
    {
        public String language;
        public int length;
        public int offset;
        public String url;
        
        public static MessageEntity TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject = null;
            switch (i) {
                default: {
                    tlObject = null;
                    break;
                }
                case 1990644519: {
                    tlObject = new TL_messageEntityTextUrl();
                    break;
                }
                case 1938967520: {
                    tlObject = new TL_messageEntityPre();
                    break;
                }
                case 1868782349: {
                    tlObject = new TL_messageEntityHashtag();
                    break;
                }
                case 1859134776: {
                    tlObject = new TL_messageEntityUrl();
                    break;
                }
                case 1827637959: {
                    tlObject = new TL_messageEntityBotCommand();
                    break;
                }
                case 1692693954: {
                    tlObject = new TL_messageEntityEmail();
                    break;
                }
                case 1280209983: {
                    tlObject = new TL_messageEntityCashtag();
                    break;
                }
                case 892193368: {
                    tlObject = new TL_messageEntityMentionName();
                    break;
                }
                case 681706865: {
                    tlObject = new TL_messageEntityCode();
                    break;
                }
                case 546203849: {
                    tlObject = new TL_inputMessageEntityMentionName();
                    break;
                }
                case 34469328: {
                    tlObject = new TL_messageEntityBlockquote();
                    break;
                }
                case -100378723: {
                    tlObject = new TL_messageEntityMention();
                    break;
                }
                case -1090087980: {
                    tlObject = new TL_messageEntityStrike();
                    break;
                }
                case -1117713463: {
                    tlObject = new TL_messageEntityBold();
                    break;
                }
                case -1148011883: {
                    tlObject = new TL_messageEntityUnknown();
                    break;
                }
                case -1672577397: {
                    tlObject = new TL_messageEntityUnderline();
                    break;
                }
                case -1687559349: {
                    tlObject = new TL_messageEntityPhone();
                    break;
                }
                case -2106619040: {
                    tlObject = new TL_messageEntityItalic();
                    break;
                }
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in MessageEntity", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (MessageEntity)tlObject;
        }
    }
    
    public abstract static class MessageFwdHeader extends TLObject
    {
        public int channel_id;
        public int channel_post;
        public int date;
        public int flags;
        public int from_id;
        public String from_name;
        public String post_author;
        public int saved_from_msg_id;
        public Peer saved_from_peer;
        
        public static MessageFwdHeader TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            MessageFwdHeader messageFwdHeader = null;
            switch (i) {
                default: {
                    messageFwdHeader = null;
                    break;
                }
                case 1436466797: {
                    messageFwdHeader = new TL_messageFwdHeader_layer96();
                    break;
                }
                case -85986132: {
                    messageFwdHeader = new TL_messageFwdHeader_layer72();
                    break;
                }
                case -332168592: {
                    messageFwdHeader = new TL_messageFwdHeader();
                    break;
                }
                case -947462709: {
                    messageFwdHeader = new TL_messageFwdHeader_layer68();
                    break;
                }
            }
            if (messageFwdHeader == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in MessageFwdHeader", i));
            }
            if (messageFwdHeader != null) {
                ((TL_messageFwdHeader)messageFwdHeader).readParams(abstractSerializedData, b);
            }
            return messageFwdHeader;
        }
    }
    
    public abstract static class MessageMedia extends TLObject
    {
        public String address;
        public Audio audio_unused;
        public byte[] bytes;
        public String captionLegacy;
        public String currency;
        public String description;
        public Document document;
        public String first_name;
        public int flags;
        public TL_game game;
        public GeoPoint geo;
        public String last_name;
        public int period;
        public String phone_number;
        public Photo photo;
        public String provider;
        public int receipt_msg_id;
        public boolean shipping_address_requested;
        public String start_param;
        public boolean test;
        public String title;
        public long total_amount;
        public int ttl_seconds;
        public int user_id;
        public String vcard;
        public String venue_id;
        public String venue_type;
        public Video video_unused;
        public WebPage webpage;
        
        public static MessageMedia TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject = null;
            switch (i) {
                default: {
                    tlObject = null;
                    break;
                }
                case 2084836563: {
                    tlObject = new TL_messageMediaDocument_layer74();
                    break;
                }
                case 2084316681: {
                    tlObject = new TL_messageMediaGeoLive();
                    break;
                }
                case 2031269663: {
                    tlObject = new TL_messageMediaVenue_layer71();
                    break;
                }
                case 1766936791: {
                    tlObject = new TL_messageMediaPhoto();
                    break;
                }
                case 1585262393: {
                    tlObject = new TL_messageMediaContact_layer81();
                    break;
                }
                case 1540298357: {
                    tlObject = new TL_messageMediaVideo_layer45();
                    break;
                }
                case 1457575028: {
                    tlObject = new TL_messageMediaGeo();
                    break;
                }
                case 1272375192: {
                    tlObject = new TL_messageMediaPoll();
                    break;
                }
                case 1038967584: {
                    tlObject = new TL_messageMediaEmpty();
                    break;
                }
                case 1032643901: {
                    tlObject = new TL_messageMediaPhoto_layer68();
                    break;
                }
                case 802824708: {
                    tlObject = new TL_messageMediaDocument_old();
                    break;
                }
                case 784356159: {
                    tlObject = new TL_messageMediaVenue();
                    break;
                }
                case 694364726: {
                    tlObject = new TL_messageMediaUnsupported_old();
                    break;
                }
                case -38694904: {
                    tlObject = new TL_messageMediaGame();
                    break;
                }
                case -203411800: {
                    tlObject = new TL_messageMediaDocument_layer68();
                    break;
                }
                case -873313984: {
                    tlObject = new TL_messageMediaContact();
                    break;
                }
                case -926655958: {
                    tlObject = new TL_messageMediaPhoto_old();
                    break;
                }
                case -961117440: {
                    tlObject = new TL_messageMediaAudio_layer45();
                    break;
                }
                case -1256047857: {
                    tlObject = new TL_messageMediaPhoto_layer74();
                    break;
                }
                case -1557277184: {
                    tlObject = new TL_messageMediaWebPage();
                    break;
                }
                case -1563278704: {
                    tlObject = new TL_messageMediaVideo_old();
                    break;
                }
                case -1618676578: {
                    tlObject = new TL_messageMediaUnsupported();
                    break;
                }
                case -1666158377: {
                    tlObject = new TL_messageMediaDocument();
                    break;
                }
                case -2074799289: {
                    tlObject = new TL_messageMediaInvoice();
                    break;
                }
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in MessageMedia", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
                if (((MessageMedia)tlObject).video_unused != null) {
                    final TL_messageMediaDocument tl_messageMediaDocument = new TL_messageMediaDocument();
                    if (((MessageMedia)tlObject).video_unused instanceof TL_videoEncrypted) {
                        ((MessageMedia)tl_messageMediaDocument).document = new TL_documentEncrypted();
                        final Document document = ((MessageMedia)tl_messageMediaDocument).document;
                        final Video video_unused = ((MessageMedia)tlObject).video_unused;
                        document.key = video_unused.key;
                        document.iv = video_unused.iv;
                    }
                    else {
                        ((MessageMedia)tl_messageMediaDocument).document = new TL_document();
                    }
                    ((MessageMedia)tl_messageMediaDocument).flags = 3;
                    final Document document2 = ((MessageMedia)tl_messageMediaDocument).document;
                    document2.file_reference = new byte[0];
                    final Video video_unused2 = ((MessageMedia)tlObject).video_unused;
                    document2.id = video_unused2.id;
                    document2.access_hash = video_unused2.access_hash;
                    document2.date = video_unused2.date;
                    final String mime_type = video_unused2.mime_type;
                    if (mime_type != null) {
                        document2.mime_type = mime_type;
                    }
                    else {
                        document2.mime_type = "video/mp4";
                    }
                    final Document document3 = ((MessageMedia)tl_messageMediaDocument).document;
                    final Video video_unused3 = ((MessageMedia)tlObject).video_unused;
                    document3.size = video_unused3.size;
                    document3.thumbs.add(video_unused3.thumb);
                    ((MessageMedia)tl_messageMediaDocument).document.dc_id = ((MessageMedia)tlObject).video_unused.dc_id;
                    ((MessageMedia)tl_messageMediaDocument).captionLegacy = ((MessageMedia)tlObject).captionLegacy;
                    final TL_documentAttributeVideo e = new TL_documentAttributeVideo();
                    final Video video_unused4 = ((MessageMedia)tlObject).video_unused;
                    e.w = video_unused4.w;
                    e.h = video_unused4.h;
                    e.duration = video_unused4.duration;
                    ((MessageMedia)tl_messageMediaDocument).document.attributes.add(e);
                    MessageMedia messageMedia = (MessageMedia)tl_messageMediaDocument;
                    if (((MessageMedia)tl_messageMediaDocument).captionLegacy == null) {
                        ((MessageMedia)tl_messageMediaDocument).captionLegacy = "";
                        messageMedia = (MessageMedia)tl_messageMediaDocument;
                        return messageMedia;
                    }
                    return messageMedia;
                }
                else if (((MessageMedia)tlObject).audio_unused != null) {
                    final TL_messageMediaDocument tl_messageMediaDocument2 = new TL_messageMediaDocument();
                    if (((MessageMedia)tlObject).audio_unused instanceof TL_audioEncrypted) {
                        ((MessageMedia)tl_messageMediaDocument2).document = new TL_documentEncrypted();
                        final Document document4 = ((MessageMedia)tl_messageMediaDocument2).document;
                        final Audio audio_unused = ((MessageMedia)tlObject).audio_unused;
                        document4.key = audio_unused.key;
                        document4.iv = audio_unused.iv;
                    }
                    else {
                        ((MessageMedia)tl_messageMediaDocument2).document = new TL_document();
                    }
                    ((MessageMedia)tl_messageMediaDocument2).flags = 3;
                    final Document document5 = ((MessageMedia)tl_messageMediaDocument2).document;
                    document5.file_reference = new byte[0];
                    final Audio audio_unused2 = ((MessageMedia)tlObject).audio_unused;
                    document5.id = audio_unused2.id;
                    document5.access_hash = audio_unused2.access_hash;
                    document5.date = audio_unused2.date;
                    final String mime_type2 = audio_unused2.mime_type;
                    if (mime_type2 != null) {
                        document5.mime_type = mime_type2;
                    }
                    else {
                        document5.mime_type = "audio/ogg";
                    }
                    ((MessageMedia)tl_messageMediaDocument2).document.size = ((MessageMedia)tlObject).audio_unused.size;
                    final TL_photoSizeEmpty e2 = new TL_photoSizeEmpty();
                    e2.type = "s";
                    ((MessageMedia)tl_messageMediaDocument2).document.thumbs.add(e2);
                    ((MessageMedia)tl_messageMediaDocument2).document.dc_id = ((MessageMedia)tlObject).audio_unused.dc_id;
                    ((MessageMedia)tl_messageMediaDocument2).captionLegacy = ((MessageMedia)tlObject).captionLegacy;
                    final TL_documentAttributeAudio e3 = new TL_documentAttributeAudio();
                    e3.duration = ((MessageMedia)tlObject).audio_unused.duration;
                    e3.voice = true;
                    ((MessageMedia)tl_messageMediaDocument2).document.attributes.add(e3);
                    MessageMedia messageMedia = (MessageMedia)tl_messageMediaDocument2;
                    if (((MessageMedia)tl_messageMediaDocument2).captionLegacy == null) {
                        ((MessageMedia)tl_messageMediaDocument2).captionLegacy = "";
                        messageMedia = (MessageMedia)tl_messageMediaDocument2;
                        return messageMedia;
                    }
                    return messageMedia;
                }
            }
            return (MessageMedia)tlObject;
        }
    }
    
    public abstract static class MessagesFilter extends TLObject
    {
        public int flags;
        public boolean missed;
        
        public static MessagesFilter TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject = null;
            switch (i) {
                default: {
                    tlObject = null;
                    break;
                }
                case 2129714567: {
                    tlObject = new TL_inputMessagesFilterUrl();
                    break;
                }
                case 2054952868: {
                    tlObject = new TL_inputMessagesFilterRoundVoice();
                    break;
                }
                case 1474492012: {
                    tlObject = new TL_inputMessagesFilterEmpty();
                    break;
                }
                case 1458172132: {
                    tlObject = new TL_inputMessagesFilterPhotoVideo();
                    break;
                }
                case 1358283666: {
                    tlObject = new TL_inputMessagesFilterVoice();
                    break;
                }
                case 975236280: {
                    tlObject = new TL_inputMessagesFilterChatPhotos();
                    break;
                }
                case 928101534: {
                    tlObject = new TL_inputMessagesFilterMusic();
                    break;
                }
                case -3644025: {
                    tlObject = new TL_inputMessagesFilterGif();
                    break;
                }
                case -419271411: {
                    tlObject = new TL_inputMessagesFilterGeo();
                    break;
                }
                case -530392189: {
                    tlObject = new TL_inputMessagesFilterContacts();
                    break;
                }
                case -648121413: {
                    tlObject = new TL_inputMessagesFilterPhotoVideoDocuments();
                    break;
                }
                case -1040652646: {
                    tlObject = new TL_inputMessagesFilterMyMentions();
                    break;
                }
                case -1253451181: {
                    tlObject = new TL_inputMessagesFilterRoundVideo();
                    break;
                }
                case -1614803355: {
                    tlObject = new TL_inputMessagesFilterVideo();
                    break;
                }
                case -1629621880: {
                    tlObject = new TL_inputMessagesFilterDocument();
                    break;
                }
                case -1777752804: {
                    tlObject = new TL_inputMessagesFilterPhotos();
                    break;
                }
                case -2134272152: {
                    tlObject = new TL_inputMessagesFilterPhoneCalls();
                    break;
                }
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in MessagesFilter", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (MessagesFilter)tlObject;
        }
    }
    
    public abstract static class NotifyPeer extends TLObject
    {
        public static NotifyPeer TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject = null;
            switch (i) {
                default: {
                    tlObject = null;
                    break;
                }
                case -703403793: {
                    tlObject = new TL_notifyBroadcasts();
                    break;
                }
                case -1073230141: {
                    tlObject = new TL_notifyChats();
                    break;
                }
                case -1261946036: {
                    tlObject = new TL_notifyUsers();
                    break;
                }
                case -1613493288: {
                    tlObject = new TL_notifyPeer();
                    break;
                }
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in NotifyPeer", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (NotifyPeer)tlObject;
        }
    }
    
    public abstract static class Page extends TLObject
    {
        public ArrayList<PageBlock> blocks;
        public ArrayList<Document> documents;
        public int flags;
        public boolean part;
        public ArrayList<Photo> photos;
        public boolean rtl;
        public String url;
        
        public Page() {
            this.blocks = new ArrayList<PageBlock>();
            this.photos = new ArrayList<Photo>();
            this.documents = new ArrayList<Document>();
        }
        
        public static Page TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject = null;
            switch (i) {
                default: {
                    tlObject = null;
                    break;
                }
                case 1433323434: {
                    tlObject = new TL_pageFull_layer82();
                    break;
                }
                case -677274263: {
                    tlObject = new TL_pageFull_layer67();
                    break;
                }
                case -1366746132: {
                    tlObject = new TL_page();
                    break;
                }
                case -1908433218: {
                    tlObject = new TL_pagePart_layer82();
                    break;
                }
                case -1913754556: {
                    tlObject = new TL_pagePart_layer67();
                    break;
                }
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in Page", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (Page)tlObject;
        }
    }
    
    public abstract static class PageBlock extends TLObject
    {
        public boolean bottom;
        public boolean first;
        public int groupId;
        public int level;
        public int mid;
        public PhotoSize thumb;
        public TLObject thumbObject;
        
        public static PageBlock TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject = null;
            switch (i) {
                default: {
                    tlObject = null;
                    break;
                }
                case 2089805750: {
                    tlObject = new TL_pageBlockVideo();
                    break;
                }
                case 1987480557: {
                    tlObject = new TL_pageBlockDetails();
                    break;
                }
                case 1890305021: {
                    tlObject = new TL_pageBlockTitle();
                    break;
                }
                case 1705048653: {
                    tlObject = new TL_pageBlockCollage();
                    break;
                }
                case 1329878739: {
                    tlObject = new TL_pageBlockPullquote();
                    break;
                }
                case 1216809369: {
                    tlObject = new TL_pageBlockFooter();
                    break;
                }
                case 1182402406: {
                    tlObject = new TL_pageBlockParagraph();
                    break;
                }
                case 1029399794: {
                    tlObject = new TL_pageBlockAuthorDate_layer60();
                    break;
                }
                case 978896884: {
                    tlObject = new TL_pageBlockList_layer82();
                    break;
                }
                case 972174080: {
                    tlObject = new TL_pageBlockCover();
                    break;
                }
                case 834148991: {
                    tlObject = new TL_pageBlockAudio_layer82();
                    break;
                }
                case 690781161: {
                    tlObject = new TL_pageBlockEmbedPost_layer82();
                    break;
                }
                case 641563686: {
                    tlObject = new TL_pageBlockBlockquote();
                    break;
                }
                case 504660880: {
                    tlObject = new TL_pageBlockKicker();
                    break;
                }
                case 391759200: {
                    tlObject = new TL_pageBlockPhoto();
                    break;
                }
                case 370236054: {
                    tlObject = new TL_pageBlockRelatedArticles();
                    break;
                }
                case 324435594: {
                    tlObject = new TL_pageBlockUnsupported();
                    break;
                }
                case 319588707: {
                    tlObject = new TL_pageBlockSlideshow_layer82();
                    break;
                }
                case 145955919: {
                    tlObject = new TL_pageBlockCollage_layer82();
                    break;
                }
                case 52401552: {
                    tlObject = new TL_pageBlockSlideshow();
                    break;
                }
                case -229005301: {
                    tlObject = new TL_pageBlockEmbedPost();
                    break;
                }
                case -248793375: {
                    tlObject = new TL_pageBlockSubheader();
                    break;
                }
                case -283684427: {
                    tlObject = new TL_pageBlockChannel();
                    break;
                }
                case -372860542: {
                    tlObject = new TL_pageBlockPhoto_layer82();
                    break;
                }
                case -454524911: {
                    tlObject = new TL_pageBlockList();
                    break;
                }
                case -618614392: {
                    tlObject = new TL_pageBlockDivider();
                    break;
                }
                case -640214938: {
                    tlObject = new TL_pageBlockVideo_layer82();
                    break;
                }
                case -650782469: {
                    tlObject = new TL_pageBlockEmbed_layer60();
                    break;
                }
                case -837994576: {
                    tlObject = new TL_pageBlockAnchor();
                    break;
                }
                case -840826671: {
                    tlObject = new TL_pageBlockEmbed_layer82();
                    break;
                }
                case -1066346178: {
                    tlObject = new TL_pageBlockPreformatted();
                    break;
                }
                case -1076861716: {
                    tlObject = new TL_pageBlockHeader();
                    break;
                }
                case -1085412734: {
                    tlObject = new TL_pageBlockTable();
                    break;
                }
                case -1162877472: {
                    tlObject = new TL_pageBlockAuthorDate();
                    break;
                }
                case -1468953147: {
                    tlObject = new TL_pageBlockEmbed();
                    break;
                }
                case -1538310410: {
                    tlObject = new TL_pageBlockMap();
                    break;
                }
                case -1702174239: {
                    tlObject = new TL_pageBlockOrderedList();
                    break;
                }
                case -1879401953: {
                    tlObject = new TL_pageBlockSubtitle();
                    break;
                }
                case -2143067670: {
                    tlObject = new TL_pageBlockAudio();
                    break;
                }
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in PageBlock", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (PageBlock)tlObject;
        }
    }
    
    public abstract static class PageListItem extends TLObject
    {
        public static PageListItem TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != -1188055347) {
                if (i != 635466748) {
                    tlObject = null;
                }
                else {
                    tlObject = new TL_pageListItemBlocks();
                }
            }
            else {
                tlObject = new TL_pageListItemText();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in PageListItem", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (PageListItem)tlObject;
        }
    }
    
    public abstract static class PageListOrderedItem extends TLObject
    {
        public static PageListOrderedItem TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != -1730311882) {
                if (i != 1577484359) {
                    tlObject = null;
                }
                else {
                    tlObject = new TL_pageListOrderedItemText();
                }
            }
            else {
                tlObject = new TL_pageListOrderedItemBlocks();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in PageListOrderedItem", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (PageListOrderedItem)tlObject;
        }
    }
    
    public abstract static class PasswordKdfAlgo extends TLObject
    {
        public static PasswordKdfAlgo TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != -732254058) {
                if (i != 982592842) {
                    tlObject = null;
                }
                else {
                    tlObject = new TL_passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow();
                }
            }
            else {
                tlObject = new TL_passwordKdfAlgoUnknown();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in PasswordKdfAlgo", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (PasswordKdfAlgo)tlObject;
        }
    }
    
    public abstract static class Peer extends TLObject
    {
        public int channel_id;
        public int chat_id;
        public int user_id;
        
        public static Peer TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != -1649296275) {
                if (i != -1160714821) {
                    if (i != -1109531342) {
                        tlObject = null;
                    }
                    else {
                        tlObject = new TL_peerChannel();
                    }
                }
                else {
                    tlObject = new TL_peerChat();
                }
            }
            else {
                tlObject = new TL_peerUser();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in Peer", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (Peer)tlObject;
        }
    }
    
    public abstract static class PeerNotifySettings extends TLObject
    {
        public int events_mask;
        public int flags;
        public int mute_until;
        public boolean show_previews;
        public boolean silent;
        public String sound;
        
        public static PeerNotifySettings TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject = null;
            switch (i) {
                default: {
                    tlObject = null;
                    break;
                }
                case 1889961234: {
                    tlObject = new TL_peerNotifySettingsEmpty_layer77();
                    break;
                }
                case -1353671392: {
                    tlObject = new TL_peerNotifySettings();
                    break;
                }
                case -1697798976: {
                    tlObject = new TL_peerNotifySettings_layer77();
                    break;
                }
                case -1923214866: {
                    tlObject = new TL_peerNotifySettings_layer47();
                    break;
                }
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in PeerNotifySettings", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (PeerNotifySettings)tlObject;
        }
    }
    
    public abstract static class PhoneCall extends TLObject
    {
        public long access_hash;
        public int admin_id;
        public ArrayList<TL_phoneConnection> connections;
        public int date;
        public int duration;
        public int flags;
        public byte[] g_a_hash;
        public byte[] g_a_or_b;
        public byte[] g_b;
        public long id;
        public long key_fingerprint;
        public boolean need_debug;
        public boolean need_rating;
        public boolean p2p_allowed;
        public int participant_id;
        public TL_phoneCallProtocol protocol;
        public PhoneCallDiscardReason reason;
        public int receive_date;
        public int start_date;
        public boolean video;
        
        public PhoneCall() {
            this.connections = new ArrayList<TL_phoneConnection>();
        }
        
        public static PhoneCall TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject = null;
            switch (i) {
                default: {
                    tlObject = null;
                    break;
                }
                case 1399245077: {
                    tlObject = new TL_phoneCallEmpty();
                    break;
                }
                case 1355435489: {
                    tlObject = new TL_phoneCallDiscarded();
                    break;
                }
                case 462375633: {
                    tlObject = new TL_phoneCallWaiting();
                    break;
                }
                case -1719909046: {
                    tlObject = new TL_phoneCallAccepted();
                    break;
                }
                case -2014659757: {
                    tlObject = new TL_phoneCallRequested();
                    break;
                }
                case -2025673089: {
                    tlObject = new TL_phoneCall();
                    break;
                }
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in PhoneCall", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (PhoneCall)tlObject;
        }
    }
    
    public abstract static class PhoneCallDiscardReason extends TLObject
    {
        public byte[] encrypted_key;
        
        public static PhoneCallDiscardReason TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject = null;
            switch (i) {
                default: {
                    tlObject = null;
                    break;
                }
                case 1471006352: {
                    tlObject = new TL_phoneCallDiscardReasonHangup();
                    break;
                }
                case -84416311: {
                    tlObject = new TL_phoneCallDiscardReasonBusy();
                    break;
                }
                case -527056480: {
                    tlObject = new TL_phoneCallDiscardReasonDisconnect();
                    break;
                }
                case -1344096199: {
                    tlObject = new TL_phoneCallDiscardReasonAllowGroupCall();
                    break;
                }
                case -2048646399: {
                    tlObject = new TL_phoneCallDiscardReasonMissed();
                    break;
                }
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in PhoneCallDiscardReason", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (PhoneCallDiscardReason)tlObject;
        }
    }
    
    public abstract static class Photo extends TLObject
    {
        public long access_hash;
        public String caption;
        public int date;
        public int dc_id;
        public byte[] file_reference;
        public int flags;
        public GeoPoint geo;
        public boolean has_stickers;
        public long id;
        public ArrayList<PhotoSize> sizes;
        public int user_id;
        
        public Photo() {
            this.sizes = new ArrayList<PhotoSize>();
        }
        
        public static Photo TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject = null;
            switch (i) {
                default: {
                    tlObject = null;
                    break;
                }
                case 590459437: {
                    tlObject = new TL_photoEmpty();
                    break;
                }
                case 582313809: {
                    tlObject = new TL_photo_old();
                    break;
                }
                case -797637467: {
                    tlObject = new TL_photo();
                    break;
                }
                case -840088834: {
                    tlObject = new TL_photo_layer55();
                    break;
                }
                case -1014792074: {
                    tlObject = new TL_photo_old2();
                    break;
                }
                case -1673036328: {
                    tlObject = new TL_photo_layer97();
                    break;
                }
                case -1836524247: {
                    tlObject = new TL_photo_layer82();
                    break;
                }
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in Photo", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (Photo)tlObject;
        }
    }
    
    public abstract static class PhotoSize extends TLObject
    {
        public byte[] bytes;
        public int h;
        public FileLocation location;
        public int size;
        public String type;
        public int w;
        
        public static PhotoSize TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject = null;
            switch (i) {
                default: {
                    tlObject = null;
                    break;
                }
                case 2009052699: {
                    tlObject = new TL_photoSize();
                    break;
                }
                case 236446268: {
                    tlObject = new TL_photoSizeEmpty();
                    break;
                }
                case -374917894: {
                    tlObject = new TL_photoCachedSize();
                    break;
                }
                case -525288402: {
                    tlObject = new TL_photoStrippedSize();
                    break;
                }
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in PhotoSize", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (PhotoSize)tlObject;
        }
    }
    
    public abstract static class PrivacyKey extends TLObject
    {
        public static PrivacyKey TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject = null;
            switch (i) {
                default: {
                    tlObject = null;
                    break;
                }
                case 1777096355: {
                    tlObject = new TL_privacyKeyForwards();
                    break;
                }
                case 1343122938: {
                    tlObject = new TL_privacyKeyChatInvite();
                    break;
                }
                case 1030105979: {
                    tlObject = new TL_privacyKeyPhoneCall();
                    break;
                }
                case 961092808: {
                    tlObject = new TL_privacyKeyPhoneP2P();
                    break;
                }
                case -778378131: {
                    tlObject = new TL_privacyKeyPhoneNumber();
                    break;
                }
                case -1137792208: {
                    tlObject = new TL_privacyKeyStatusTimestamp();
                    break;
                }
                case -1777000467: {
                    tlObject = new TL_privacyKeyProfilePhoto();
                    break;
                }
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in PrivacyKey", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (PrivacyKey)tlObject;
        }
    }
    
    public abstract static class PrivacyRule extends TLObject
    {
        public static PrivacyRule TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject = null;
            switch (i) {
                default: {
                    tlObject = null;
                    break;
                }
                case 1698855810: {
                    tlObject = new TL_privacyValueAllowAll();
                    break;
                }
                case 1297858060: {
                    tlObject = new TL_privacyValueAllowUsers();
                    break;
                }
                case 415136107: {
                    tlObject = new TL_privacyValueAllowChatParticipants();
                    break;
                }
                case 209668535: {
                    tlObject = new TL_privacyValueDisallowUsers();
                    break;
                }
                case -123988: {
                    tlObject = new TL_privacyValueAllowContacts();
                    break;
                }
                case -125240806: {
                    tlObject = new TL_privacyValueDisallowContacts();
                    break;
                }
                case -1397881200: {
                    tlObject = new TL_privacyValueDisallowChatParticipants();
                    break;
                }
                case -1955338397: {
                    tlObject = new TL_privacyValueDisallowAll();
                    break;
                }
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in PrivacyRule", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (PrivacyRule)tlObject;
        }
    }
    
    public abstract static class RecentMeUrl extends TLObject
    {
        public int chat_id;
        public ChatInvite chat_invite;
        public StickerSetCovered set;
        public String url;
        public int user_id;
        
        public static RecentMeUrl TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject = null;
            switch (i) {
                default: {
                    tlObject = null;
                    break;
                }
                case 1189204285: {
                    tlObject = new TL_recentMeUrlUnknown();
                    break;
                }
                case -347535331: {
                    tlObject = new TL_recentMeUrlChatInvite();
                    break;
                }
                case -1140172836: {
                    tlObject = new TL_recentMeUrlStickerSet();
                    break;
                }
                case -1608834311: {
                    tlObject = new TL_recentMeUrlChat();
                    break;
                }
                case -1917045962: {
                    tlObject = new TL_recentMeUrlUser();
                    break;
                }
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in RecentMeUrl", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (RecentMeUrl)tlObject;
        }
    }
    
    public abstract static class ReplyMarkup extends TLObject
    {
        public int flags;
        public boolean resize;
        public ArrayList<TL_keyboardButtonRow> rows;
        public boolean selective;
        public boolean single_use;
        
        public ReplyMarkup() {
            this.rows = new ArrayList<TL_keyboardButtonRow>();
        }
        
        public static ReplyMarkup TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject = null;
            switch (i) {
                default: {
                    tlObject = null;
                    break;
                }
                case 1218642516: {
                    tlObject = new TL_replyInlineMarkup();
                    break;
                }
                case 889353612: {
                    tlObject = new TL_replyKeyboardMarkup();
                    break;
                }
                case -200242528: {
                    tlObject = new TL_replyKeyboardForceReply();
                    break;
                }
                case -1606526075: {
                    tlObject = new TL_replyKeyboardHide();
                    break;
                }
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in ReplyMarkup", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (ReplyMarkup)tlObject;
        }
    }
    
    public abstract static class ReportReason extends TLObject
    {
        public static ReportReason TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject = null;
            switch (i) {
                default: {
                    tlObject = null;
                    break;
                }
                case 1490799288: {
                    tlObject = new TL_inputReportReasonSpam();
                    break;
                }
                case 777640226: {
                    tlObject = new TL_inputReportReasonPornography();
                    break;
                }
                case 505595789: {
                    tlObject = new TL_inputReportReasonViolence();
                    break;
                }
                case -512463606: {
                    tlObject = new TL_inputReportReasonOther();
                    break;
                }
                case -1376497949: {
                    tlObject = new TL_inputReportReasonChildAbuse();
                    break;
                }
                case -1685456582: {
                    tlObject = new TL_inputReportReasonCopyright();
                    break;
                }
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in ReportReason", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (ReportReason)tlObject;
        }
    }
    
    public abstract static class RichText extends TLObject
    {
        public String email;
        public RichText parentRichText;
        public ArrayList<RichText> texts;
        public String url;
        public long webpage_id;
        
        public RichText() {
            this.texts = new ArrayList<RichText>();
        }
        
        public static RichText TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject = null;
            switch (i) {
                default: {
                    tlObject = null;
                    break;
                }
                case 2120376535: {
                    tlObject = new TL_textConcat();
                    break;
                }
                case 1950782688: {
                    tlObject = new TL_textPlain();
                    break;
                }
                case 1816074681: {
                    tlObject = new TL_textFixed();
                    break;
                }
                case 1730456516: {
                    tlObject = new TL_textBold();
                    break;
                }
                case 1009288385: {
                    tlObject = new TL_textUrl();
                    break;
                }
                case 894777186: {
                    tlObject = new TL_textAnchor();
                    break;
                }
                case 483104362: {
                    tlObject = new TL_textPhone();
                    break;
                }
                case 136105807: {
                    tlObject = new TL_textImage();
                    break;
                }
                case 55281185: {
                    tlObject = new TL_textMarked();
                    break;
                }
                case -311786236: {
                    tlObject = new TL_textSubscript();
                    break;
                }
                case -564523562: {
                    tlObject = new TL_textEmail();
                    break;
                }
                case -599948721: {
                    tlObject = new TL_textEmpty();
                    break;
                }
                case -653089380: {
                    tlObject = new TL_textItalic();
                    break;
                }
                case -939827711: {
                    tlObject = new TL_textSuperscript();
                    break;
                }
                case -1054465340: {
                    tlObject = new TL_textUnderline();
                    break;
                }
                case -1678197867: {
                    tlObject = new TL_textStrike();
                    break;
                }
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in RichText", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (RichText)tlObject;
        }
    }
    
    public abstract static class SecureFile extends TLObject
    {
        public static SecureFile TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != -534283678) {
                if (i != 1679398724) {
                    tlObject = null;
                }
                else {
                    tlObject = new TL_secureFileEmpty();
                }
            }
            else {
                tlObject = new TL_secureFile();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in SecureFile", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (SecureFile)tlObject;
        }
    }
    
    public abstract static class SecurePasswordKdfAlgo extends TLObject
    {
        public static SecurePasswordKdfAlgo TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != -2042159726) {
                if (i != -1141711456) {
                    if (i != 4883767) {
                        tlObject = null;
                    }
                    else {
                        tlObject = new TL_securePasswordKdfAlgoUnknown();
                    }
                }
                else {
                    tlObject = new TL_securePasswordKdfAlgoPBKDF2HMACSHA512iter100000();
                }
            }
            else {
                tlObject = new TL_securePasswordKdfAlgoSHA512();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in SecurePasswordKdfAlgo", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (SecurePasswordKdfAlgo)tlObject;
        }
    }
    
    public abstract static class SecurePlainData extends TLObject
    {
        public static SecurePlainData TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != 569137759) {
                if (i != 2103482845) {
                    tlObject = null;
                }
                else {
                    tlObject = new TL_securePlainPhone();
                }
            }
            else {
                tlObject = new TL_securePlainEmail();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in SecurePlainData", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (SecurePlainData)tlObject;
        }
    }
    
    public abstract static class SecureRequiredType extends TLObject
    {
        public static SecureRequiredType TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != -2103600678) {
                if (i != 41187252) {
                    tlObject = null;
                }
                else {
                    tlObject = new TL_secureRequiredTypeOneOf();
                }
            }
            else {
                tlObject = new TL_secureRequiredType();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in SecureRequiredType", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (SecureRequiredType)tlObject;
        }
    }
    
    public abstract static class SecureValueError extends TLObject
    {
        public static SecureValueError TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject = null;
            switch (i) {
                default: {
                    tlObject = null;
                    break;
                }
                case 2054162547: {
                    tlObject = new TL_secureValueErrorFile();
                    break;
                }
                case 1717706985: {
                    tlObject = new TL_secureValueErrorFiles();
                    break;
                }
                case 878931416: {
                    tlObject = new TL_secureValueErrorTranslationFiles();
                    break;
                }
                case 12467706: {
                    tlObject = new TL_secureValueErrorFrontSide();
                    break;
                }
                case -391902247: {
                    tlObject = new TL_secureValueErrorData();
                    break;
                }
                case -449327402: {
                    tlObject = new TL_secureValueErrorSelfie();
                    break;
                }
                case -1592506512: {
                    tlObject = new TL_secureValueErrorTranslationFile();
                    break;
                }
                case -2036501105: {
                    tlObject = new TL_secureValueError();
                    break;
                }
                case -2037765467: {
                    tlObject = new TL_secureValueErrorReverseSide();
                    break;
                }
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in SecureValueError", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (SecureValueError)tlObject;
        }
    }
    
    public abstract static class SecureValueType extends TLObject
    {
        public static SecureValueType TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject = null;
            switch (i) {
                default: {
                    tlObject = null;
                    break;
                }
                case 1034709504: {
                    tlObject = new TL_secureValueTypePassport();
                    break;
                }
                case 115615172: {
                    tlObject = new TL_secureValueTypeDriverLicense();
                    break;
                }
                case -63531698: {
                    tlObject = new TL_secureValueTypeUtilityBill();
                    break;
                }
                case -368907213: {
                    tlObject = new TL_secureValueTypeTemporaryRegistration();
                    break;
                }
                case -874308058: {
                    tlObject = new TL_secureValueTypeAddress();
                    break;
                }
                case -1289704741: {
                    tlObject = new TL_secureValueTypePhone();
                    break;
                }
                case -1596951477: {
                    tlObject = new TL_secureValueTypeIdentityCard();
                    break;
                }
                case -1658158621: {
                    tlObject = new TL_secureValueTypePersonalDetails();
                    break;
                }
                case -1713143702: {
                    tlObject = new TL_secureValueTypePassportRegistration();
                    break;
                }
                case -1717268701: {
                    tlObject = new TL_secureValueTypeInternalPassport();
                    break;
                }
                case -1908627474: {
                    tlObject = new TL_secureValueTypeEmail();
                    break;
                }
                case -1954007928: {
                    tlObject = new TL_secureValueTypeRentalAgreement();
                    break;
                }
                case -1995211763: {
                    tlObject = new TL_secureValueTypeBankStatement();
                    break;
                }
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in SecureValueType", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (SecureValueType)tlObject;
        }
    }
    
    public abstract static class SendMessageAction extends TLObject
    {
        public int progress;
        
        public static SendMessageAction TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject = null;
            switch (i) {
                default: {
                    tlObject = null;
                    break;
                }
                case 1653390447: {
                    tlObject = new TL_sendMessageChooseContactAction();
                    break;
                }
                case 608050278: {
                    tlObject = new TL_sendMessageUploadRoundAction();
                    break;
                }
                case 393186209: {
                    tlObject = new TL_sendMessageGeoLocationAction();
                    break;
                }
                case 381645902: {
                    tlObject = new TL_sendMessageTypingAction();
                    break;
                }
                case -44119819: {
                    tlObject = new TL_sendMessageCancelAction();
                    break;
                }
                case -212740181: {
                    tlObject = new TL_sendMessageUploadAudioAction();
                    break;
                }
                case -378127636: {
                    tlObject = new TL_sendMessageUploadVideoAction();
                    break;
                }
                case -424899985: {
                    tlObject = new TL_sendMessageUploadAudioAction_old();
                    break;
                }
                case -580219064: {
                    tlObject = new TL_sendMessageGamePlayAction();
                    break;
                }
                case -718310409: {
                    tlObject = new TL_sendMessageRecordAudioAction();
                    break;
                }
                case -774682074: {
                    tlObject = new TL_sendMessageUploadPhotoAction();
                    break;
                }
                case -1441998364: {
                    tlObject = new TL_sendMessageUploadDocumentAction();
                    break;
                }
                case -1584933265: {
                    tlObject = new TL_sendMessageRecordVideoAction();
                    break;
                }
                case -1727382502: {
                    tlObject = new TL_sendMessageUploadPhotoAction_old();
                    break;
                }
                case -1845219337: {
                    tlObject = new TL_sendMessageUploadVideoAction_old();
                    break;
                }
                case -1884362354: {
                    tlObject = new TL_sendMessageUploadDocumentAction_old();
                    break;
                }
                case -1997373508: {
                    tlObject = new TL_sendMessageRecordRoundAction();
                    break;
                }
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in SendMessageAction", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (SendMessageAction)tlObject;
        }
    }
    
    public abstract static class StickerSet extends TLObject
    {
        public long access_hash;
        public boolean archived;
        public int count;
        public int flags;
        public int hash;
        public long id;
        public boolean installed;
        public int installed_date;
        public boolean masks;
        public boolean official;
        public String short_name;
        public PhotoSize thumb;
        public int thumb_dc_id;
        public String title;
        
        public static StickerSet TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            StickerSet set = null;
            switch (i) {
                default: {
                    set = null;
                    break;
                }
                case 1787870391: {
                    set = new TL_stickerSet_layer97();
                    break;
                }
                case 1434820921: {
                    set = new TL_stickerSet_layer96();
                    break;
                }
                case -290164953: {
                    set = new TL_stickerSet();
                    break;
                }
                case -852477119: {
                    set = new TL_stickerSet_layer75();
                    break;
                }
                case -1482409193: {
                    set = new TL_stickerSet_old();
                    break;
                }
            }
            if (set == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in StickerSet", i));
            }
            if (set != null) {
                ((TL_stickerSet)set).readParams(abstractSerializedData, b);
            }
            return set;
        }
    }
    
    public abstract static class StickerSetCovered extends TLObject
    {
        public Document cover;
        public ArrayList<Document> covers;
        public StickerSet set;
        
        public StickerSetCovered() {
            this.covers = new ArrayList<Document>();
        }
        
        public static StickerSetCovered TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != 872932635) {
                if (i != 1678812626) {
                    tlObject = null;
                }
                else {
                    tlObject = new TL_stickerSetCovered();
                }
            }
            else {
                tlObject = new TL_stickerSetMultiCovered();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in StickerSetCovered", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (StickerSetCovered)tlObject;
        }
    }
    
    public static class TL_accountDaysTTL extends TLObject
    {
        public static int constructor = -1194283041;
        public int days;
        
        public static TL_accountDaysTTL TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_accountDaysTTL.constructor == i) {
                final TL_accountDaysTTL tl_accountDaysTTL = new TL_accountDaysTTL();
                tl_accountDaysTTL.readParams(abstractSerializedData, b);
                return tl_accountDaysTTL;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_accountDaysTTL", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.days = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_accountDaysTTL.constructor);
            abstractSerializedData.writeInt32(this.days);
        }
    }
    
    public static class TL_account_acceptAuthorization extends TLObject
    {
        public static int constructor = -419267436;
        public int bot_id;
        public TL_secureCredentialsEncrypted credentials;
        public String public_key;
        public String scope;
        public ArrayList<TL_secureValueHash> value_hashes;
        
        public TL_account_acceptAuthorization() {
            this.value_hashes = new ArrayList<TL_secureValueHash>();
        }
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_account_acceptAuthorization.constructor);
            abstractSerializedData.writeInt32(this.bot_id);
            abstractSerializedData.writeString(this.scope);
            abstractSerializedData.writeString(this.public_key);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.value_hashes.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                this.value_hashes.get(i).serializeToStream(abstractSerializedData);
            }
            this.credentials.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_account_authorizationForm extends TLObject
    {
        public static int constructor = -1389486888;
        public ArrayList<SecureValueError> errors;
        public int flags;
        public String privacy_policy_url;
        public ArrayList<SecureRequiredType> required_types;
        public ArrayList<User> users;
        public ArrayList<TL_secureValue> values;
        
        public TL_account_authorizationForm() {
            this.required_types = new ArrayList<SecureRequiredType>();
            this.values = new ArrayList<TL_secureValue>();
            this.errors = new ArrayList<SecureValueError>();
            this.users = new ArrayList<User>();
        }
        
        public static TL_account_authorizationForm TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_account_authorizationForm.constructor == i) {
                final TL_account_authorizationForm tl_account_authorizationForm = new TL_account_authorizationForm();
                tl_account_authorizationForm.readParams(abstractSerializedData, b);
                return tl_account_authorizationForm;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_account_authorizationForm", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.flags = abstractSerializedData.readInt32(b);
            final int int32 = abstractSerializedData.readInt32(b);
            final int n = 0;
            if (int32 != 481674261) {
                if (!b) {
                    return;
                }
                throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
            }
            else {
                for (int int33 = abstractSerializedData.readInt32(b), i = 0; i < int33; ++i) {
                    final SecureRequiredType tLdeserialize = SecureRequiredType.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    this.required_types.add(tLdeserialize);
                }
                final int int34 = abstractSerializedData.readInt32(b);
                if (int34 != 481674261) {
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int34));
                }
                else {
                    for (int int35 = abstractSerializedData.readInt32(b), j = 0; j < int35; ++j) {
                        final TL_secureValue tLdeserialize2 = TL_secureValue.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize2 == null) {
                            return;
                        }
                        this.values.add(tLdeserialize2);
                    }
                    final int int36 = abstractSerializedData.readInt32(b);
                    if (int36 != 481674261) {
                        if (!b) {
                            return;
                        }
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", int36));
                    }
                    else {
                        for (int int37 = abstractSerializedData.readInt32(b), k = 0; k < int37; ++k) {
                            final SecureValueError tLdeserialize3 = SecureValueError.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                            if (tLdeserialize3 == null) {
                                return;
                            }
                            this.errors.add(tLdeserialize3);
                        }
                        final int int38 = abstractSerializedData.readInt32(b);
                        if (int38 == 481674261) {
                            for (int int39 = abstractSerializedData.readInt32(b), l = n; l < int39; ++l) {
                                final User tLdeserialize4 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                                if (tLdeserialize4 == null) {
                                    return;
                                }
                                this.users.add(tLdeserialize4);
                            }
                            if ((this.flags & 0x1) != 0x0) {
                                this.privacy_policy_url = abstractSerializedData.readString(b);
                            }
                            return;
                        }
                        if (!b) {
                            return;
                        }
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", int38));
                    }
                }
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_account_authorizationForm.constructor);
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.required_types.size();
            abstractSerializedData.writeInt32(size);
            final int n = 0;
            for (int i = 0; i < size; ++i) {
                this.required_types.get(i).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size2 = this.values.size();
            abstractSerializedData.writeInt32(size2);
            for (int j = 0; j < size2; ++j) {
                this.values.get(j).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size3 = this.errors.size();
            abstractSerializedData.writeInt32(size3);
            for (int k = 0; k < size3; ++k) {
                this.errors.get(k).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size4 = this.users.size();
            abstractSerializedData.writeInt32(size4);
            for (int l = n; l < size4; ++l) {
                this.users.get(l).serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 0x1) != 0x0) {
                abstractSerializedData.writeString(this.privacy_policy_url);
            }
        }
    }
    
    public static class TL_account_authorizations extends TLObject
    {
        public static int constructor = 307276766;
        public ArrayList<TL_authorization> authorizations;
        
        public TL_account_authorizations() {
            this.authorizations = new ArrayList<TL_authorization>();
        }
        
        public static TL_account_authorizations TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_account_authorizations.constructor == i) {
                final TL_account_authorizations tl_account_authorizations = new TL_account_authorizations();
                tl_account_authorizations.readParams(abstractSerializedData, b);
                return tl_account_authorizations;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_account_authorizations", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final TL_authorization tLdeserialize = TL_authorization.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    this.authorizations.add(tLdeserialize);
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_account_authorizations.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.authorizations.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                this.authorizations.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_account_autoDownloadSettings extends TLObject
    {
        public static int constructor = 1674235686;
        public TL_autoDownloadSettings high;
        public TL_autoDownloadSettings low;
        public TL_autoDownloadSettings medium;
        
        public static TL_account_autoDownloadSettings TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_account_autoDownloadSettings.constructor == i) {
                final TL_account_autoDownloadSettings tl_account_autoDownloadSettings = new TL_account_autoDownloadSettings();
                tl_account_autoDownloadSettings.readParams(abstractSerializedData, b);
                return tl_account_autoDownloadSettings;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_account_autoDownloadSettings", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.low = TL_autoDownloadSettings.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            this.medium = TL_autoDownloadSettings.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            this.high = TL_autoDownloadSettings.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_account_autoDownloadSettings.constructor);
            this.low.serializeToStream(abstractSerializedData);
            this.medium.serializeToStream(abstractSerializedData);
            this.high.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_account_cancelPasswordEmail extends TLObject
    {
        public static int constructor = -1043606090;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_account_cancelPasswordEmail.constructor);
        }
    }
    
    public static class TL_account_changePhone extends TLObject
    {
        public static int constructor = 1891839707;
        public String phone_code;
        public String phone_code_hash;
        public String phone_number;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return User.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_account_changePhone.constructor);
            abstractSerializedData.writeString(this.phone_number);
            abstractSerializedData.writeString(this.phone_code_hash);
            abstractSerializedData.writeString(this.phone_code);
        }
    }
    
    public static class TL_account_checkUsername extends TLObject
    {
        public static int constructor = 655677548;
        public String username;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_account_checkUsername.constructor);
            abstractSerializedData.writeString(this.username);
        }
    }
    
    public static class TL_account_confirmPasswordEmail extends TLObject
    {
        public static int constructor = -1881204448;
        public String code;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_account_confirmPasswordEmail.constructor);
            abstractSerializedData.writeString(this.code);
        }
    }
    
    public static class TL_account_confirmPhone extends TLObject
    {
        public static int constructor = 1596029123;
        public String phone_code;
        public String phone_code_hash;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_account_confirmPhone.constructor);
            abstractSerializedData.writeString(this.phone_code_hash);
            abstractSerializedData.writeString(this.phone_code);
        }
    }
    
    public static class TL_account_deleteAccount extends TLObject
    {
        public static int constructor = 1099779595;
        public String reason;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_account_deleteAccount.constructor);
            abstractSerializedData.writeString(this.reason);
        }
    }
    
    public static class TL_account_deleteSecureValue extends TLObject
    {
        public static int constructor = -1199522741;
        public ArrayList<SecureValueType> types;
        
        public TL_account_deleteSecureValue() {
            this.types = new ArrayList<SecureValueType>();
        }
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_account_deleteSecureValue.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.types.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                this.types.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_account_getAccountTTL extends TLObject
    {
        public static int constructor = 150761757;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_accountDaysTTL.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_account_getAccountTTL.constructor);
        }
    }
    
    public static class TL_account_getAllSecureValues extends TLObject
    {
        public static int constructor = -1299661699;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, int i, final boolean b) {
            final Vector vector = new Vector();
            int int32;
            TL_secureValue tLdeserialize;
            for (int32 = abstractSerializedData.readInt32(b), i = 0; i < int32; ++i) {
                tLdeserialize = TL_secureValue.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                if (tLdeserialize == null) {
                    return vector;
                }
                vector.objects.add(tLdeserialize);
            }
            return vector;
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_account_getAllSecureValues.constructor);
        }
    }
    
    public static class TL_account_getAuthorizationForm extends TLObject
    {
        public static int constructor = -1200903967;
        public int bot_id;
        public String public_key;
        public String scope;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_account_authorizationForm.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_account_getAuthorizationForm.constructor);
            abstractSerializedData.writeInt32(this.bot_id);
            abstractSerializedData.writeString(this.scope);
            abstractSerializedData.writeString(this.public_key);
        }
    }
    
    public static class TL_account_getAuthorizations extends TLObject
    {
        public static int constructor = -484392616;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_account_authorizations.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_account_getAuthorizations.constructor);
        }
    }
    
    public static class TL_account_getAutoDownloadSettings extends TLObject
    {
        public static int constructor = 1457130303;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_account_autoDownloadSettings.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_account_getAutoDownloadSettings.constructor);
        }
    }
    
    public static class TL_account_getContactSignUpNotification extends TLObject
    {
        public static int constructor = -1626880216;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_account_getContactSignUpNotification.constructor);
        }
    }
    
    public static class TL_account_getNotifyExceptions extends TLObject
    {
        public static int constructor = 1398240377;
        public boolean compare_sound;
        public int flags;
        public InputNotifyPeer peer;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Updates.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_account_getNotifyExceptions.constructor);
            int flags;
            if (this.compare_sound) {
                flags = (this.flags | 0x2);
            }
            else {
                flags = (this.flags & 0xFFFFFFFD);
            }
            abstractSerializedData.writeInt32(this.flags = flags);
            if ((this.flags & 0x1) != 0x0) {
                this.peer.serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_account_getNotifySettings extends TLObject
    {
        public static int constructor = 313765169;
        public InputNotifyPeer peer;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return PeerNotifySettings.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_account_getNotifySettings.constructor);
            this.peer.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_account_getPassword extends TLObject
    {
        public static int constructor = 1418342645;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_account_password.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_account_getPassword.constructor);
        }
    }
    
    public static class TL_account_getPasswordSettings extends TLObject
    {
        public static int constructor = -1663767815;
        public InputCheckPasswordSRP password;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_account_passwordSettings.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_account_getPasswordSettings.constructor);
            this.password.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_account_getPrivacy extends TLObject
    {
        public static int constructor = -623130288;
        public InputPrivacyKey key;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_account_privacyRules.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_account_getPrivacy.constructor);
            this.key.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_account_getSecureValue extends TLObject
    {
        public static int constructor = 1936088002;
        public ArrayList<SecureValueType> types;
        
        public TL_account_getSecureValue() {
            this.types = new ArrayList<SecureValueType>();
        }
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, int i, final boolean b) {
            final Vector vector = new Vector();
            int int32;
            TL_secureValue tLdeserialize;
            for (int32 = abstractSerializedData.readInt32(b), i = 0; i < int32; ++i) {
                tLdeserialize = TL_secureValue.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                if (tLdeserialize == null) {
                    return vector;
                }
                vector.objects.add(tLdeserialize);
            }
            return vector;
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_account_getSecureValue.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.types.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                this.types.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_account_getTmpPassword extends TLObject
    {
        public static int constructor = 1151208273;
        public InputCheckPasswordSRP password;
        public int period;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_account_tmpPassword.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_account_getTmpPassword.constructor);
            this.password.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.period);
        }
    }
    
    public static class TL_account_getWallPaper extends TLObject
    {
        public static int constructor = -57811990;
        public InputWallPaper wallpaper;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return WallPaper.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_account_getWallPaper.constructor);
            this.wallpaper.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_account_getWallPapers extends TLObject
    {
        public static int constructor = -1430579357;
        public int hash;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return account_WallPapers.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_account_getWallPapers.constructor);
            abstractSerializedData.writeInt32(this.hash);
        }
    }
    
    public static class TL_account_getWebAuthorizations extends TLObject
    {
        public static int constructor = 405695855;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_account_webAuthorizations.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_account_getWebAuthorizations.constructor);
        }
    }
    
    public static class TL_account_installWallPaper extends TLObject
    {
        public static int constructor = -18000023;
        public TL_wallPaperSettings settings;
        public InputWallPaper wallpaper;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_account_installWallPaper.constructor);
            this.wallpaper.serializeToStream(abstractSerializedData);
            this.settings.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_account_password extends TLObject
    {
        public static int constructor = -1390001672;
        public PasswordKdfAlgo current_algo;
        public String email_unconfirmed_pattern;
        public int flags;
        public boolean has_password;
        public boolean has_recovery;
        public boolean has_secure_values;
        public String hint;
        public PasswordKdfAlgo new_algo;
        public SecurePasswordKdfAlgo new_secure_algo;
        public byte[] secure_random;
        public byte[] srp_B;
        public long srp_id;
        
        public static TL_account_password TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_account_password.constructor == i) {
                final TL_account_password tl_account_password = new TL_account_password();
                tl_account_password.readParams(abstractSerializedData, b);
                return tl_account_password;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_account_password", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.flags = abstractSerializedData.readInt32(b);
            final int flags = this.flags;
            final boolean b2 = true;
            this.has_recovery = ((flags & 0x1) != 0x0);
            this.has_secure_values = ((this.flags & 0x2) != 0x0);
            this.has_password = ((this.flags & 0x4) != 0x0 && b2);
            if ((this.flags & 0x4) != 0x0) {
                this.current_algo = PasswordKdfAlgo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            if ((this.flags & 0x4) != 0x0) {
                this.srp_B = abstractSerializedData.readByteArray(b);
            }
            if ((this.flags & 0x4) != 0x0) {
                this.srp_id = abstractSerializedData.readInt64(b);
            }
            if ((this.flags & 0x8) != 0x0) {
                this.hint = abstractSerializedData.readString(b);
            }
            if ((this.flags & 0x10) != 0x0) {
                this.email_unconfirmed_pattern = abstractSerializedData.readString(b);
            }
            this.new_algo = PasswordKdfAlgo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            this.new_secure_algo = SecurePasswordKdfAlgo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            this.secure_random = abstractSerializedData.readByteArray(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_account_password.constructor);
            int flags;
            if (this.has_recovery) {
                flags = (this.flags | 0x1);
            }
            else {
                flags = (this.flags & 0xFFFFFFFE);
            }
            this.flags = flags;
            int flags2;
            if (this.has_secure_values) {
                flags2 = (this.flags | 0x2);
            }
            else {
                flags2 = (this.flags & 0xFFFFFFFD);
            }
            this.flags = flags2;
            int flags3;
            if (this.has_password) {
                flags3 = (this.flags | 0x4);
            }
            else {
                flags3 = (this.flags & 0xFFFFFFFB);
            }
            abstractSerializedData.writeInt32(this.flags = flags3);
            if ((this.flags & 0x4) != 0x0) {
                this.current_algo.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 0x4) != 0x0) {
                abstractSerializedData.writeByteArray(this.srp_B);
            }
            if ((this.flags & 0x4) != 0x0) {
                abstractSerializedData.writeInt64(this.srp_id);
            }
            if ((this.flags & 0x8) != 0x0) {
                abstractSerializedData.writeString(this.hint);
            }
            if ((this.flags & 0x10) != 0x0) {
                abstractSerializedData.writeString(this.email_unconfirmed_pattern);
            }
            this.new_algo.serializeToStream(abstractSerializedData);
            this.new_secure_algo.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeByteArray(this.secure_random);
        }
    }
    
    public static class TL_account_passwordInputSettings extends TLObject
    {
        public static int constructor = -1036572727;
        public String email;
        public int flags;
        public String hint;
        public PasswordKdfAlgo new_algo;
        public byte[] new_password_hash;
        public TL_secureSecretSettings new_secure_settings;
        
        public static TL_account_passwordInputSettings TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_account_passwordInputSettings.constructor == i) {
                final TL_account_passwordInputSettings tl_account_passwordInputSettings = new TL_account_passwordInputSettings();
                tl_account_passwordInputSettings.readParams(abstractSerializedData, b);
                return tl_account_passwordInputSettings;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_account_passwordInputSettings", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.flags = abstractSerializedData.readInt32(b);
            if ((this.flags & 0x1) != 0x0) {
                this.new_algo = PasswordKdfAlgo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            if ((this.flags & 0x1) != 0x0) {
                this.new_password_hash = abstractSerializedData.readByteArray(b);
            }
            if ((this.flags & 0x1) != 0x0) {
                this.hint = abstractSerializedData.readString(b);
            }
            if ((this.flags & 0x2) != 0x0) {
                this.email = abstractSerializedData.readString(b);
            }
            if ((this.flags & 0x4) != 0x0) {
                this.new_secure_settings = TL_secureSecretSettings.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_account_passwordInputSettings.constructor);
            abstractSerializedData.writeInt32(this.flags);
            if ((this.flags & 0x1) != 0x0) {
                this.new_algo.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 0x1) != 0x0) {
                abstractSerializedData.writeByteArray(this.new_password_hash);
            }
            if ((this.flags & 0x1) != 0x0) {
                abstractSerializedData.writeString(this.hint);
            }
            if ((this.flags & 0x2) != 0x0) {
                abstractSerializedData.writeString(this.email);
            }
            if ((this.flags & 0x4) != 0x0) {
                this.new_secure_settings.serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_account_passwordSettings extends TLObject
    {
        public static int constructor = -1705233435;
        public String email;
        public int flags;
        public TL_secureSecretSettings secure_settings;
        
        public static TL_account_passwordSettings TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_account_passwordSettings.constructor == i) {
                final TL_account_passwordSettings tl_account_passwordSettings = new TL_account_passwordSettings();
                tl_account_passwordSettings.readParams(abstractSerializedData, b);
                return tl_account_passwordSettings;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_account_passwordSettings", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.flags = abstractSerializedData.readInt32(b);
            if ((this.flags & 0x1) != 0x0) {
                this.email = abstractSerializedData.readString(b);
            }
            if ((this.flags & 0x2) != 0x0) {
                this.secure_settings = TL_secureSecretSettings.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_account_passwordSettings.constructor);
            abstractSerializedData.writeInt32(this.flags);
            if ((this.flags & 0x1) != 0x0) {
                abstractSerializedData.writeString(this.email);
            }
            if ((this.flags & 0x2) != 0x0) {
                this.secure_settings.serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_account_privacyRules extends TLObject
    {
        public static int constructor = 1352683077;
        public ArrayList<Chat> chats;
        public ArrayList<PrivacyRule> rules;
        public ArrayList<User> users;
        
        public TL_account_privacyRules() {
            this.rules = new ArrayList<PrivacyRule>();
            this.chats = new ArrayList<Chat>();
            this.users = new ArrayList<User>();
        }
        
        public static TL_account_privacyRules TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_account_privacyRules.constructor == i) {
                final TL_account_privacyRules tl_account_privacyRules = new TL_account_privacyRules();
                tl_account_privacyRules.readParams(abstractSerializedData, b);
                return tl_account_privacyRules;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_account_privacyRules", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            final int int32 = abstractSerializedData.readInt32(b);
            final int n = 0;
            if (int32 != 481674261) {
                if (!b) {
                    return;
                }
                throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
            }
            else {
                for (int int33 = abstractSerializedData.readInt32(b), i = 0; i < int33; ++i) {
                    final PrivacyRule tLdeserialize = PrivacyRule.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    this.rules.add(tLdeserialize);
                }
                final int int34 = abstractSerializedData.readInt32(b);
                if (int34 != 481674261) {
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int34));
                }
                else {
                    for (int int35 = abstractSerializedData.readInt32(b), j = 0; j < int35; ++j) {
                        final Chat tLdeserialize2 = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize2 == null) {
                            return;
                        }
                        this.chats.add(tLdeserialize2);
                    }
                    final int int36 = abstractSerializedData.readInt32(b);
                    if (int36 == 481674261) {
                        for (int int37 = abstractSerializedData.readInt32(b), k = n; k < int37; ++k) {
                            final User tLdeserialize3 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                            if (tLdeserialize3 == null) {
                                return;
                            }
                            this.users.add(tLdeserialize3);
                        }
                        return;
                    }
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int36));
                }
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_account_privacyRules.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.rules.size();
            abstractSerializedData.writeInt32(size);
            final int n = 0;
            for (int i = 0; i < size; ++i) {
                this.rules.get(i).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size2 = this.chats.size();
            abstractSerializedData.writeInt32(size2);
            for (int j = 0; j < size2; ++j) {
                this.chats.get(j).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size3 = this.users.size();
            abstractSerializedData.writeInt32(size3);
            for (int k = n; k < size3; ++k) {
                this.users.get(k).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_account_registerDevice extends TLObject
    {
        public static int constructor = 1555998096;
        public boolean app_sandbox;
        public ArrayList<Integer> other_uids;
        public byte[] secret;
        public String token;
        public int token_type;
        
        public TL_account_registerDevice() {
            this.other_uids = new ArrayList<Integer>();
        }
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_account_registerDevice.constructor);
            abstractSerializedData.writeInt32(this.token_type);
            abstractSerializedData.writeString(this.token);
            abstractSerializedData.writeBool(this.app_sandbox);
            abstractSerializedData.writeByteArray(this.secret);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.other_uids.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                abstractSerializedData.writeInt32(this.other_uids.get(i));
            }
        }
    }
    
    public static class TL_account_reportPeer extends TLObject
    {
        public static int constructor = -1374118561;
        public InputPeer peer;
        public ReportReason reason;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_account_reportPeer.constructor);
            this.peer.serializeToStream(abstractSerializedData);
            this.reason.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_account_resendPasswordEmail extends TLObject
    {
        public static int constructor = 2055154197;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_account_resendPasswordEmail.constructor);
        }
    }
    
    public static class TL_account_resetAuthorization extends TLObject
    {
        public static int constructor = -545786948;
        public long hash;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_account_resetAuthorization.constructor);
            abstractSerializedData.writeInt64(this.hash);
        }
    }
    
    public static class TL_account_resetNotifySettings extends TLObject
    {
        public static int constructor = -612493497;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_account_resetNotifySettings.constructor);
        }
    }
    
    public static class TL_account_resetWallPapers extends TLObject
    {
        public static int constructor = -1153722364;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_account_resetWallPapers.constructor);
        }
    }
    
    public static class TL_account_resetWebAuthorization extends TLObject
    {
        public static int constructor = 755087855;
        public long hash;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_account_resetWebAuthorization.constructor);
            abstractSerializedData.writeInt64(this.hash);
        }
    }
    
    public static class TL_account_resetWebAuthorizations extends TLObject
    {
        public static int constructor = 1747789204;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_account_resetWebAuthorizations.constructor);
        }
    }
    
    public static class TL_account_saveAutoDownloadSettings extends TLObject
    {
        public static int constructor = 1995661875;
        public int flags;
        public boolean high;
        public boolean low;
        public TL_autoDownloadSettings settings;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_account_saveAutoDownloadSettings.constructor);
            int flags;
            if (this.low) {
                flags = (this.flags | 0x1);
            }
            else {
                flags = (this.flags & 0xFFFFFFFE);
            }
            this.flags = flags;
            int flags2;
            if (this.high) {
                flags2 = (this.flags | 0x2);
            }
            else {
                flags2 = (this.flags & 0xFFFFFFFD);
            }
            abstractSerializedData.writeInt32(this.flags = flags2);
            this.settings.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_account_saveSecureValue extends TLObject
    {
        public static int constructor = -1986010339;
        public long secure_secret_id;
        public TL_inputSecureValue value;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_secureValue.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_account_saveSecureValue.constructor);
            this.value.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt64(this.secure_secret_id);
        }
    }
    
    public static class TL_account_saveWallPaper extends TLObject
    {
        public static int constructor = 1817860919;
        public TL_wallPaperSettings settings;
        public boolean unsave;
        public InputWallPaper wallpaper;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_account_saveWallPaper.constructor);
            this.wallpaper.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeBool(this.unsave);
            this.settings.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_account_sendChangePhoneCode extends TLObject
    {
        public static int constructor = -2108208411;
        public String phone_number;
        public TL_codeSettings settings;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_auth_sentCode.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_account_sendChangePhoneCode.constructor);
            abstractSerializedData.writeString(this.phone_number);
            this.settings.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_account_sendConfirmPhoneCode extends TLObject
    {
        public static int constructor = 457157256;
        public String hash;
        public TL_codeSettings settings;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_auth_sentCode.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_account_sendConfirmPhoneCode.constructor);
            abstractSerializedData.writeString(this.hash);
            this.settings.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_account_sendVerifyEmailCode extends TLObject
    {
        public static int constructor = 1880182943;
        public String email;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_account_sentEmailCode.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_account_sendVerifyEmailCode.constructor);
            abstractSerializedData.writeString(this.email);
        }
    }
    
    public static class TL_account_sendVerifyPhoneCode extends TLObject
    {
        public static int constructor = -1516022023;
        public String phone_number;
        public TL_codeSettings settings;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_auth_sentCode.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_account_sendVerifyPhoneCode.constructor);
            abstractSerializedData.writeString(this.phone_number);
            this.settings.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_account_sentEmailCode extends TLObject
    {
        public static int constructor = -2128640689;
        public String email_pattern;
        public int length;
        
        public static TL_account_sentEmailCode TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_account_sentEmailCode.constructor == i) {
                final TL_account_sentEmailCode tl_account_sentEmailCode = new TL_account_sentEmailCode();
                tl_account_sentEmailCode.readParams(abstractSerializedData, b);
                return tl_account_sentEmailCode;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_account_sentEmailCode", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.email_pattern = abstractSerializedData.readString(b);
            this.length = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_account_sentEmailCode.constructor);
            abstractSerializedData.writeString(this.email_pattern);
            abstractSerializedData.writeInt32(this.length);
        }
    }
    
    public static class TL_account_setAccountTTL extends TLObject
    {
        public static int constructor = 608323678;
        public TL_accountDaysTTL ttl;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_account_setAccountTTL.constructor);
            this.ttl.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_account_setContactSignUpNotification extends TLObject
    {
        public static int constructor = -806076575;
        public boolean silent;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_account_setContactSignUpNotification.constructor);
            abstractSerializedData.writeBool(this.silent);
        }
    }
    
    public static class TL_account_setPrivacy extends TLObject
    {
        public static int constructor = -906486552;
        public InputPrivacyKey key;
        public ArrayList<InputPrivacyRule> rules;
        
        public TL_account_setPrivacy() {
            this.rules = new ArrayList<InputPrivacyRule>();
        }
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_account_privacyRules.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_account_setPrivacy.constructor);
            this.key.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.rules.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                this.rules.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_account_tmpPassword extends TLObject
    {
        public static int constructor = -614138572;
        public byte[] tmp_password;
        public int valid_until;
        
        public static TL_account_tmpPassword TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_account_tmpPassword.constructor == i) {
                final TL_account_tmpPassword tl_account_tmpPassword = new TL_account_tmpPassword();
                tl_account_tmpPassword.readParams(abstractSerializedData, b);
                return tl_account_tmpPassword;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_account_tmpPassword", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.tmp_password = abstractSerializedData.readByteArray(b);
            this.valid_until = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_account_tmpPassword.constructor);
            abstractSerializedData.writeByteArray(this.tmp_password);
            abstractSerializedData.writeInt32(this.valid_until);
        }
    }
    
    public static class TL_account_unregisterDevice extends TLObject
    {
        public static int constructor = 813089983;
        public ArrayList<Integer> other_uids;
        public String token;
        public int token_type;
        
        public TL_account_unregisterDevice() {
            this.other_uids = new ArrayList<Integer>();
        }
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_account_unregisterDevice.constructor);
            abstractSerializedData.writeInt32(this.token_type);
            abstractSerializedData.writeString(this.token);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.other_uids.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                abstractSerializedData.writeInt32(this.other_uids.get(i));
            }
        }
    }
    
    public static class TL_account_updateDeviceLocked extends TLObject
    {
        public static int constructor = 954152242;
        public int period;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_account_updateDeviceLocked.constructor);
            abstractSerializedData.writeInt32(this.period);
        }
    }
    
    public static class TL_account_updateNotifySettings extends TLObject
    {
        public static int constructor = -2067899501;
        public InputNotifyPeer peer;
        public TL_inputPeerNotifySettings settings;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_account_updateNotifySettings.constructor);
            this.peer.serializeToStream(abstractSerializedData);
            this.settings.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_account_updatePasswordSettings extends TLObject
    {
        public static int constructor = -1516564433;
        public TL_account_passwordInputSettings new_settings;
        public InputCheckPasswordSRP password;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_account_updatePasswordSettings.constructor);
            this.password.serializeToStream(abstractSerializedData);
            this.new_settings.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_account_updateProfile extends TLObject
    {
        public static int constructor = 2018596725;
        public String about;
        public String first_name;
        public int flags;
        public String last_name;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return User.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_account_updateProfile.constructor);
            abstractSerializedData.writeInt32(this.flags);
            if ((this.flags & 0x1) != 0x0) {
                abstractSerializedData.writeString(this.first_name);
            }
            if ((this.flags & 0x2) != 0x0) {
                abstractSerializedData.writeString(this.last_name);
            }
            if ((this.flags & 0x4) != 0x0) {
                abstractSerializedData.writeString(this.about);
            }
        }
    }
    
    public static class TL_account_updateStatus extends TLObject
    {
        public static int constructor = 1713919532;
        public boolean offline;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_account_updateStatus.constructor);
            abstractSerializedData.writeBool(this.offline);
        }
    }
    
    public static class TL_account_updateUsername extends TLObject
    {
        public static int constructor = 1040964988;
        public String username;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return User.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_account_updateUsername.constructor);
            abstractSerializedData.writeString(this.username);
        }
    }
    
    public static class TL_account_uploadWallPaper extends TLObject
    {
        public static int constructor = -578472351;
        public InputFile file;
        public String mime_type;
        public TL_wallPaperSettings settings;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return WallPaper.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_account_uploadWallPaper.constructor);
            this.file.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(this.mime_type);
            this.settings.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_account_verifyEmail extends TLObject
    {
        public static int constructor = -323339813;
        public String code;
        public String email;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_account_verifyEmail.constructor);
            abstractSerializedData.writeString(this.email);
            abstractSerializedData.writeString(this.code);
        }
    }
    
    public static class TL_account_verifyPhone extends TLObject
    {
        public static int constructor = 1305716726;
        public String phone_code;
        public String phone_code_hash;
        public String phone_number;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_account_verifyPhone.constructor);
            abstractSerializedData.writeString(this.phone_number);
            abstractSerializedData.writeString(this.phone_code_hash);
            abstractSerializedData.writeString(this.phone_code);
        }
    }
    
    public static class TL_account_wallPapers extends account_WallPapers
    {
        public static int constructor = 1881892265;
        public int hash;
        public ArrayList<WallPaper> wallpapers;
        
        public TL_account_wallPapers() {
            this.wallpapers = new ArrayList<WallPaper>();
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.hash = abstractSerializedData.readInt32(b);
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final WallPaper tLdeserialize = WallPaper.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    this.wallpapers.add(tLdeserialize);
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_account_wallPapers.constructor);
            abstractSerializedData.writeInt32(this.hash);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.wallpapers.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                this.wallpapers.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_account_wallPapersNotModified extends account_WallPapers
    {
        public static int constructor = 471437699;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_account_wallPapersNotModified.constructor);
        }
    }
    
    public static class TL_account_webAuthorizations extends TLObject
    {
        public static int constructor = -313079300;
        public ArrayList<TL_webAuthorization> authorizations;
        public ArrayList<User> users;
        
        public TL_account_webAuthorizations() {
            this.authorizations = new ArrayList<TL_webAuthorization>();
            this.users = new ArrayList<User>();
        }
        
        public static TL_account_webAuthorizations TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_account_webAuthorizations.constructor == i) {
                final TL_account_webAuthorizations tl_account_webAuthorizations = new TL_account_webAuthorizations();
                tl_account_webAuthorizations.readParams(abstractSerializedData, b);
                return tl_account_webAuthorizations;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_account_webAuthorizations", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            final int int32 = abstractSerializedData.readInt32(b);
            final int n = 0;
            if (int32 != 481674261) {
                if (!b) {
                    return;
                }
                throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
            }
            else {
                for (int int33 = abstractSerializedData.readInt32(b), i = 0; i < int33; ++i) {
                    final TL_webAuthorization tLdeserialize = TL_webAuthorization.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    this.authorizations.add(tLdeserialize);
                }
                final int int34 = abstractSerializedData.readInt32(b);
                if (int34 == 481674261) {
                    for (int int35 = abstractSerializedData.readInt32(b), j = n; j < int35; ++j) {
                        final User tLdeserialize2 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize2 == null) {
                            return;
                        }
                        this.users.add(tLdeserialize2);
                    }
                    return;
                }
                if (!b) {
                    return;
                }
                throw new RuntimeException(String.format("wrong Vector magic, got %x", int34));
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_account_webAuthorizations.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.authorizations.size();
            abstractSerializedData.writeInt32(size);
            final int n = 0;
            for (int i = 0; i < size; ++i) {
                this.authorizations.get(i).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size2 = this.users.size();
            abstractSerializedData.writeInt32(size2);
            for (int j = n; j < size2; ++j) {
                this.users.get(j).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_audioEmpty_layer45 extends Audio
    {
        public static int constructor = 1483311320;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt64(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_audioEmpty_layer45.constructor);
            abstractSerializedData.writeInt64(super.id);
        }
    }
    
    public static class TL_audioEncrypted extends TL_audio_layer45
    {
        public static int constructor = 1431655926;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt64(b);
            super.access_hash = abstractSerializedData.readInt64(b);
            super.user_id = abstractSerializedData.readInt32(b);
            super.date = abstractSerializedData.readInt32(b);
            super.duration = abstractSerializedData.readInt32(b);
            super.size = abstractSerializedData.readInt32(b);
            super.dc_id = abstractSerializedData.readInt32(b);
            super.key = abstractSerializedData.readByteArray(b);
            super.iv = abstractSerializedData.readByteArray(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_audioEncrypted.constructor);
            abstractSerializedData.writeInt64(super.id);
            abstractSerializedData.writeInt64(super.access_hash);
            abstractSerializedData.writeInt32(super.user_id);
            abstractSerializedData.writeInt32(super.date);
            abstractSerializedData.writeInt32(super.duration);
            abstractSerializedData.writeInt32(super.size);
            abstractSerializedData.writeInt32(super.dc_id);
            abstractSerializedData.writeByteArray(super.key);
            abstractSerializedData.writeByteArray(super.iv);
        }
    }
    
    public static class TL_audio_layer45 extends Audio
    {
        public static int constructor = -102543275;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt64(b);
            super.access_hash = abstractSerializedData.readInt64(b);
            super.date = abstractSerializedData.readInt32(b);
            super.duration = abstractSerializedData.readInt32(b);
            super.mime_type = abstractSerializedData.readString(b);
            super.size = abstractSerializedData.readInt32(b);
            super.dc_id = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_audio_layer45.constructor);
            abstractSerializedData.writeInt64(super.id);
            abstractSerializedData.writeInt64(super.access_hash);
            abstractSerializedData.writeInt32(super.date);
            abstractSerializedData.writeInt32(super.duration);
            abstractSerializedData.writeString(super.mime_type);
            abstractSerializedData.writeInt32(super.size);
            abstractSerializedData.writeInt32(super.dc_id);
        }
    }
    
    public static class TL_audio_old extends TL_audio_layer45
    {
        public static int constructor = 1114908135;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt64(b);
            super.access_hash = abstractSerializedData.readInt64(b);
            super.user_id = abstractSerializedData.readInt32(b);
            super.date = abstractSerializedData.readInt32(b);
            super.duration = abstractSerializedData.readInt32(b);
            super.size = abstractSerializedData.readInt32(b);
            super.dc_id = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_audio_old.constructor);
            abstractSerializedData.writeInt64(super.id);
            abstractSerializedData.writeInt64(super.access_hash);
            abstractSerializedData.writeInt32(super.user_id);
            abstractSerializedData.writeInt32(super.date);
            abstractSerializedData.writeInt32(super.duration);
            abstractSerializedData.writeInt32(super.size);
            abstractSerializedData.writeInt32(super.dc_id);
        }
    }
    
    public static class TL_audio_old2 extends TL_audio_layer45
    {
        public static int constructor = -945003370;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt64(b);
            super.access_hash = abstractSerializedData.readInt64(b);
            super.user_id = abstractSerializedData.readInt32(b);
            super.date = abstractSerializedData.readInt32(b);
            super.duration = abstractSerializedData.readInt32(b);
            super.mime_type = abstractSerializedData.readString(b);
            super.size = abstractSerializedData.readInt32(b);
            super.dc_id = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_audio_old2.constructor);
            abstractSerializedData.writeInt64(super.id);
            abstractSerializedData.writeInt64(super.access_hash);
            abstractSerializedData.writeInt32(super.user_id);
            abstractSerializedData.writeInt32(super.date);
            abstractSerializedData.writeInt32(super.duration);
            abstractSerializedData.writeString(super.mime_type);
            abstractSerializedData.writeInt32(super.size);
            abstractSerializedData.writeInt32(super.dc_id);
        }
    }
    
    public static class TL_auth_authorization extends TLObject
    {
        public static int constructor = -855308010;
        public int flags;
        public int tmp_sessions;
        public User user;
        
        public static TL_auth_authorization TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_auth_authorization.constructor == i) {
                final TL_auth_authorization tl_auth_authorization = new TL_auth_authorization();
                tl_auth_authorization.readParams(abstractSerializedData, b);
                return tl_auth_authorization;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_auth_authorization", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.flags = abstractSerializedData.readInt32(b);
            if ((this.flags & 0x1) != 0x0) {
                this.tmp_sessions = abstractSerializedData.readInt32(b);
            }
            this.user = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_auth_authorization.constructor);
            abstractSerializedData.writeInt32(this.flags);
            if ((this.flags & 0x1) != 0x0) {
                abstractSerializedData.writeInt32(this.tmp_sessions);
            }
            this.user.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_auth_cancelCode extends TLObject
    {
        public static int constructor = 520357240;
        public String phone_code_hash;
        public String phone_number;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_auth_cancelCode.constructor);
            abstractSerializedData.writeString(this.phone_number);
            abstractSerializedData.writeString(this.phone_code_hash);
        }
    }
    
    public static class TL_auth_checkPassword extends TLObject
    {
        public static int constructor = -779399914;
        public InputCheckPasswordSRP password;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_auth_authorization.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_auth_checkPassword.constructor);
            this.password.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_auth_checkPhone extends TLObject
    {
        public static int constructor = 1877286395;
        public String phone_number;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_auth_checkedPhone.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_auth_checkPhone.constructor);
            abstractSerializedData.writeString(this.phone_number);
        }
    }
    
    public static class TL_auth_checkedPhone extends TLObject
    {
        public static int constructor = -2128698738;
        public boolean phone_registered;
        
        public static TL_auth_checkedPhone TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_auth_checkedPhone.constructor == i) {
                final TL_auth_checkedPhone tl_auth_checkedPhone = new TL_auth_checkedPhone();
                tl_auth_checkedPhone.readParams(abstractSerializedData, b);
                return tl_auth_checkedPhone;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_auth_checkedPhone", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.phone_registered = abstractSerializedData.readBool(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_auth_checkedPhone.constructor);
            abstractSerializedData.writeBool(this.phone_registered);
        }
    }
    
    public static class TL_auth_codeTypeCall extends auth_CodeType
    {
        public static int constructor = 1948046307;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_auth_codeTypeCall.constructor);
        }
    }
    
    public static class TL_auth_codeTypeFlashCall extends auth_CodeType
    {
        public static int constructor = 577556219;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_auth_codeTypeFlashCall.constructor);
        }
    }
    
    public static class TL_auth_codeTypeSms extends auth_CodeType
    {
        public static int constructor = 1923290508;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_auth_codeTypeSms.constructor);
        }
    }
    
    public static class TL_auth_exportAuthorization extends TLObject
    {
        public static int constructor = -440401971;
        public int dc_id;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_auth_exportedAuthorization.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_auth_exportAuthorization.constructor);
            abstractSerializedData.writeInt32(this.dc_id);
        }
    }
    
    public static class TL_auth_exportedAuthorization extends TLObject
    {
        public static int constructor = -543777747;
        public byte[] bytes;
        public int id;
        
        public static TL_auth_exportedAuthorization TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_auth_exportedAuthorization.constructor == i) {
                final TL_auth_exportedAuthorization tl_auth_exportedAuthorization = new TL_auth_exportedAuthorization();
                tl_auth_exportedAuthorization.readParams(abstractSerializedData, b);
                return tl_auth_exportedAuthorization;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_auth_exportedAuthorization", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.id = abstractSerializedData.readInt32(b);
            this.bytes = abstractSerializedData.readByteArray(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_auth_exportedAuthorization.constructor);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeByteArray(this.bytes);
        }
    }
    
    public static class TL_auth_importAuthorization extends TLObject
    {
        public static int constructor = -470837741;
        public byte[] bytes;
        public int id;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_auth_authorization.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_auth_importAuthorization.constructor);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeByteArray(this.bytes);
        }
    }
    
    public static class TL_auth_logOut extends TLObject
    {
        public static int constructor = 1461180992;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_auth_logOut.constructor);
        }
    }
    
    public static class TL_auth_passwordRecovery extends TLObject
    {
        public static int constructor = 326715557;
        public String email_pattern;
        
        public static TL_auth_passwordRecovery TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_auth_passwordRecovery.constructor == i) {
                final TL_auth_passwordRecovery tl_auth_passwordRecovery = new TL_auth_passwordRecovery();
                tl_auth_passwordRecovery.readParams(abstractSerializedData, b);
                return tl_auth_passwordRecovery;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_auth_passwordRecovery", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.email_pattern = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_auth_passwordRecovery.constructor);
            abstractSerializedData.writeString(this.email_pattern);
        }
    }
    
    public static class TL_auth_recoverPassword extends TLObject
    {
        public static int constructor = 1319464594;
        public String code;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_auth_authorization.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_auth_recoverPassword.constructor);
            abstractSerializedData.writeString(this.code);
        }
    }
    
    public static class TL_auth_requestPasswordRecovery extends TLObject
    {
        public static int constructor = -661144474;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_auth_passwordRecovery.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_auth_requestPasswordRecovery.constructor);
        }
    }
    
    public static class TL_auth_resendCode extends TLObject
    {
        public static int constructor = 1056025023;
        public String phone_code_hash;
        public String phone_number;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_auth_sentCode.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_auth_resendCode.constructor);
            abstractSerializedData.writeString(this.phone_number);
            abstractSerializedData.writeString(this.phone_code_hash);
        }
    }
    
    public static class TL_auth_resetAuthorizations extends TLObject
    {
        public static int constructor = -1616179942;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_auth_resetAuthorizations.constructor);
        }
    }
    
    public static class TL_auth_sendCode extends TLObject
    {
        public static int constructor = -1502141361;
        public String api_hash;
        public int api_id;
        public String phone_number;
        public TL_codeSettings settings;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_auth_sentCode.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_auth_sendCode.constructor);
            abstractSerializedData.writeString(this.phone_number);
            abstractSerializedData.writeInt32(this.api_id);
            abstractSerializedData.writeString(this.api_hash);
            this.settings.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_auth_sentCode extends TLObject
    {
        public static int constructor = 955951967;
        public int flags;
        public auth_CodeType next_type;
        public String phone_code_hash;
        public boolean phone_registered;
        public TL_help_termsOfService terms_of_service;
        public int timeout;
        public auth_SentCodeType type;
        
        public static TL_auth_sentCode TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_auth_sentCode.constructor == i) {
                final TL_auth_sentCode tl_auth_sentCode = new TL_auth_sentCode();
                tl_auth_sentCode.readParams(abstractSerializedData, b);
                return tl_auth_sentCode;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_auth_sentCode", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.flags = abstractSerializedData.readInt32(b);
            final int flags = this.flags;
            boolean phone_registered = true;
            if ((flags & 0x1) == 0x0) {
                phone_registered = false;
            }
            this.phone_registered = phone_registered;
            this.type = auth_SentCodeType.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            this.phone_code_hash = abstractSerializedData.readString(b);
            if ((this.flags & 0x2) != 0x0) {
                this.next_type = auth_CodeType.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            if ((this.flags & 0x4) != 0x0) {
                this.timeout = abstractSerializedData.readInt32(b);
            }
            if ((this.flags & 0x8) != 0x0) {
                this.terms_of_service = TL_help_termsOfService.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_auth_sentCode.constructor);
            int flags;
            if (this.phone_registered) {
                flags = (this.flags | 0x1);
            }
            else {
                flags = (this.flags & 0xFFFFFFFE);
            }
            abstractSerializedData.writeInt32(this.flags = flags);
            this.type.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(this.phone_code_hash);
            if ((this.flags & 0x2) != 0x0) {
                this.next_type.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 0x4) != 0x0) {
                abstractSerializedData.writeInt32(this.timeout);
            }
            if ((this.flags & 0x8) != 0x0) {
                this.terms_of_service.serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_auth_sentCodeTypeApp extends auth_SentCodeType
    {
        public static int constructor = 1035688326;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.length = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_auth_sentCodeTypeApp.constructor);
            abstractSerializedData.writeInt32(super.length);
        }
    }
    
    public static class TL_auth_sentCodeTypeCall extends auth_SentCodeType
    {
        public static int constructor = 1398007207;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.length = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_auth_sentCodeTypeCall.constructor);
            abstractSerializedData.writeInt32(super.length);
        }
    }
    
    public static class TL_auth_sentCodeTypeFlashCall extends auth_SentCodeType
    {
        public static int constructor = -1425815847;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.pattern = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_auth_sentCodeTypeFlashCall.constructor);
            abstractSerializedData.writeString(super.pattern);
        }
    }
    
    public static class TL_auth_sentCodeTypeSms extends auth_SentCodeType
    {
        public static int constructor = -1073693790;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.length = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_auth_sentCodeTypeSms.constructor);
            abstractSerializedData.writeInt32(super.length);
        }
    }
    
    public static class TL_auth_signIn extends TLObject
    {
        public static int constructor = -1126886015;
        public String phone_code;
        public String phone_code_hash;
        public String phone_number;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_auth_authorization.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_auth_signIn.constructor);
            abstractSerializedData.writeString(this.phone_number);
            abstractSerializedData.writeString(this.phone_code_hash);
            abstractSerializedData.writeString(this.phone_code);
        }
    }
    
    public static class TL_auth_signUp extends TLObject
    {
        public static int constructor = 453408308;
        public String first_name;
        public String last_name;
        public String phone_code;
        public String phone_code_hash;
        public String phone_number;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_auth_authorization.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_auth_signUp.constructor);
            abstractSerializedData.writeString(this.phone_number);
            abstractSerializedData.writeString(this.phone_code_hash);
            abstractSerializedData.writeString(this.phone_code);
            abstractSerializedData.writeString(this.first_name);
            abstractSerializedData.writeString(this.last_name);
        }
    }
    
    public static class TL_authorization extends TLObject
    {
        public static int constructor = -1392388579;
        public int api_id;
        public String app_name;
        public String app_version;
        public String country;
        public boolean current;
        public int date_active;
        public int date_created;
        public String device_model;
        public int flags;
        public long hash;
        public String ip;
        public boolean official_app;
        public boolean password_pending;
        public String platform;
        public String region;
        public String system_version;
        
        public static TL_authorization TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_authorization.constructor == i) {
                final TL_authorization tl_authorization = new TL_authorization();
                tl_authorization.readParams(abstractSerializedData, b);
                return tl_authorization;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_authorization", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.flags = abstractSerializedData.readInt32(b);
            final int flags = this.flags;
            final boolean b2 = true;
            this.current = ((flags & 0x1) != 0x0);
            this.official_app = ((this.flags & 0x2) != 0x0);
            this.password_pending = ((this.flags & 0x4) != 0x0 && b2);
            this.hash = abstractSerializedData.readInt64(b);
            this.device_model = abstractSerializedData.readString(b);
            this.platform = abstractSerializedData.readString(b);
            this.system_version = abstractSerializedData.readString(b);
            this.api_id = abstractSerializedData.readInt32(b);
            this.app_name = abstractSerializedData.readString(b);
            this.app_version = abstractSerializedData.readString(b);
            this.date_created = abstractSerializedData.readInt32(b);
            this.date_active = abstractSerializedData.readInt32(b);
            this.ip = abstractSerializedData.readString(b);
            this.country = abstractSerializedData.readString(b);
            this.region = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_authorization.constructor);
            int flags;
            if (this.current) {
                flags = (this.flags | 0x1);
            }
            else {
                flags = (this.flags & 0xFFFFFFFE);
            }
            this.flags = flags;
            int flags2;
            if (this.official_app) {
                flags2 = (this.flags | 0x2);
            }
            else {
                flags2 = (this.flags & 0xFFFFFFFD);
            }
            this.flags = flags2;
            int flags3;
            if (this.password_pending) {
                flags3 = (this.flags | 0x4);
            }
            else {
                flags3 = (this.flags & 0xFFFFFFFB);
            }
            abstractSerializedData.writeInt32(this.flags = flags3);
            abstractSerializedData.writeInt64(this.hash);
            abstractSerializedData.writeString(this.device_model);
            abstractSerializedData.writeString(this.platform);
            abstractSerializedData.writeString(this.system_version);
            abstractSerializedData.writeInt32(this.api_id);
            abstractSerializedData.writeString(this.app_name);
            abstractSerializedData.writeString(this.app_version);
            abstractSerializedData.writeInt32(this.date_created);
            abstractSerializedData.writeInt32(this.date_active);
            abstractSerializedData.writeString(this.ip);
            abstractSerializedData.writeString(this.country);
            abstractSerializedData.writeString(this.region);
        }
    }
    
    public static class TL_autoDownloadSettings extends TLObject
    {
        public static int constructor = -767099577;
        public boolean audio_preload_next;
        public boolean disabled;
        public int file_size_max;
        public int flags;
        public boolean phonecalls_less_data;
        public int photo_size_max;
        public boolean video_preload_large;
        public int video_size_max;
        
        public static TL_autoDownloadSettings TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_autoDownloadSettings.constructor == i) {
                final TL_autoDownloadSettings tl_autoDownloadSettings = new TL_autoDownloadSettings();
                tl_autoDownloadSettings.readParams(abstractSerializedData, b);
                return tl_autoDownloadSettings;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_autoDownloadSettings", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.flags = abstractSerializedData.readInt32(b);
            final int flags = this.flags;
            final boolean b2 = true;
            this.disabled = ((flags & 0x1) != 0x0);
            this.video_preload_large = ((this.flags & 0x2) != 0x0);
            this.audio_preload_next = ((this.flags & 0x4) != 0x0);
            this.phonecalls_less_data = ((this.flags & 0x8) != 0x0 && b2);
            this.photo_size_max = abstractSerializedData.readInt32(b);
            this.video_size_max = abstractSerializedData.readInt32(b);
            this.file_size_max = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_autoDownloadSettings.constructor);
            int flags;
            if (this.disabled) {
                flags = (this.flags | 0x1);
            }
            else {
                flags = (this.flags & 0xFFFFFFFE);
            }
            this.flags = flags;
            int flags2;
            if (this.video_preload_large) {
                flags2 = (this.flags | 0x2);
            }
            else {
                flags2 = (this.flags & 0xFFFFFFFD);
            }
            this.flags = flags2;
            int flags3;
            if (this.audio_preload_next) {
                flags3 = (this.flags | 0x4);
            }
            else {
                flags3 = (this.flags & 0xFFFFFFFB);
            }
            this.flags = flags3;
            int flags4;
            if (this.phonecalls_less_data) {
                flags4 = (this.flags | 0x8);
            }
            else {
                flags4 = (this.flags & 0xFFFFFFF7);
            }
            abstractSerializedData.writeInt32(this.flags = flags4);
            abstractSerializedData.writeInt32(this.photo_size_max);
            abstractSerializedData.writeInt32(this.video_size_max);
            abstractSerializedData.writeInt32(this.file_size_max);
        }
    }
    
    public static class TL_boolFalse extends Bool
    {
        public static int constructor = -1132882121;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_boolFalse.constructor);
        }
    }
    
    public static class TL_boolTrue extends Bool
    {
        public static int constructor = -1720552011;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_boolTrue.constructor);
        }
    }
    
    public static class TL_botCommand extends TLObject
    {
        public static int constructor = -1032140601;
        public String command;
        public String description;
        
        public static TL_botCommand TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_botCommand.constructor == i) {
                final TL_botCommand tl_botCommand = new TL_botCommand();
                tl_botCommand.readParams(abstractSerializedData, b);
                return tl_botCommand;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_botCommand", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.command = abstractSerializedData.readString(b);
            this.description = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_botCommand.constructor);
            abstractSerializedData.writeString(this.command);
            abstractSerializedData.writeString(this.description);
        }
    }
    
    public static class TL_botInfo extends BotInfo
    {
        public static int constructor = -1729618630;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.user_id = abstractSerializedData.readInt32(b);
            super.description = abstractSerializedData.readString(b);
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final TL_botCommand tLdeserialize = TL_botCommand.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.commands.add(tLdeserialize);
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_botInfo.constructor);
            abstractSerializedData.writeInt32(super.user_id);
            abstractSerializedData.writeString(super.description);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.commands.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                super.commands.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_botInfoEmpty_layer48 extends TL_botInfo
    {
        public static int constructor = -1154598962;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_botInfoEmpty_layer48.constructor);
        }
    }
    
    public static class TL_botInfo_layer48 extends TL_botInfo
    {
        public static int constructor = 164583517;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.user_id = abstractSerializedData.readInt32(b);
            super.version = abstractSerializedData.readInt32(b);
            abstractSerializedData.readString(b);
            super.description = abstractSerializedData.readString(b);
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final TL_botCommand tLdeserialize = TL_botCommand.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.commands.add(tLdeserialize);
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_botInfo_layer48.constructor);
            abstractSerializedData.writeInt32(super.user_id);
            abstractSerializedData.writeInt32(super.version);
            abstractSerializedData.writeString("");
            abstractSerializedData.writeString(super.description);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.commands.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                super.commands.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_botInlineMediaResult extends BotInlineResult
    {
        public static int constructor = 400266251;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            super.id = abstractSerializedData.readString(b);
            super.type = abstractSerializedData.readString(b);
            if ((super.flags & 0x1) != 0x0) {
                super.photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            if ((super.flags & 0x2) != 0x0) {
                super.document = Document.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            if ((super.flags & 0x4) != 0x0) {
                super.title = abstractSerializedData.readString(b);
            }
            if ((super.flags & 0x8) != 0x0) {
                super.description = abstractSerializedData.readString(b);
            }
            super.send_message = BotInlineMessage.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_botInlineMediaResult.constructor);
            abstractSerializedData.writeInt32(super.flags);
            abstractSerializedData.writeString(super.id);
            abstractSerializedData.writeString(super.type);
            if ((super.flags & 0x1) != 0x0) {
                super.photo.serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x2) != 0x0) {
                super.document.serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x4) != 0x0) {
                abstractSerializedData.writeString(super.title);
            }
            if ((super.flags & 0x8) != 0x0) {
                abstractSerializedData.writeString(super.description);
            }
            super.send_message.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_botInlineMessageMediaAuto extends BotInlineMessage
    {
        public static int constructor = 1984755728;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            super.message = abstractSerializedData.readString(b);
            if ((super.flags & 0x2) != 0x0) {
                final int int32 = abstractSerializedData.readInt32(b);
                int i = 0;
                if (int32 != 481674261) {
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
                }
                else {
                    while (i < abstractSerializedData.readInt32(b)) {
                        final MessageEntity tLdeserialize = MessageEntity.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize == null) {
                            return;
                        }
                        super.entities.add(tLdeserialize);
                        ++i;
                    }
                }
            }
            if ((super.flags & 0x4) != 0x0) {
                super.reply_markup = ReplyMarkup.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_botInlineMessageMediaAuto.constructor);
            abstractSerializedData.writeInt32(super.flags);
            abstractSerializedData.writeString(super.message);
            if ((super.flags & 0x2) != 0x0) {
                abstractSerializedData.writeInt32(481674261);
                final int size = super.entities.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; ++i) {
                    super.entities.get(i).serializeToStream(abstractSerializedData);
                }
            }
            if ((super.flags & 0x4) != 0x0) {
                super.reply_markup.serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_botInlineMessageMediaAuto_layer74 extends TL_botInlineMessageMediaAuto
    {
        public static int constructor = 175419739;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            super.message = abstractSerializedData.readString(b);
            if ((super.flags & 0x4) != 0x0) {
                super.reply_markup = ReplyMarkup.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_botInlineMessageMediaAuto_layer74.constructor);
            abstractSerializedData.writeInt32(super.flags);
            abstractSerializedData.writeString(super.message);
            if ((super.flags & 0x4) != 0x0) {
                super.reply_markup.serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_botInlineMessageMediaContact extends BotInlineMessage
    {
        public static int constructor = 416402882;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            super.phone_number = abstractSerializedData.readString(b);
            super.first_name = abstractSerializedData.readString(b);
            super.last_name = abstractSerializedData.readString(b);
            super.vcard = abstractSerializedData.readString(b);
            if ((super.flags & 0x4) != 0x0) {
                super.reply_markup = ReplyMarkup.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_botInlineMessageMediaContact.constructor);
            abstractSerializedData.writeInt32(super.flags);
            abstractSerializedData.writeString(super.phone_number);
            abstractSerializedData.writeString(super.first_name);
            abstractSerializedData.writeString(super.last_name);
            abstractSerializedData.writeString(super.vcard);
            if ((super.flags & 0x4) != 0x0) {
                super.reply_markup.serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_botInlineMessageMediaContact_layer81 extends TL_botInlineMessageMediaContact
    {
        public static int constructor = 904770772;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            super.phone_number = abstractSerializedData.readString(b);
            super.first_name = abstractSerializedData.readString(b);
            super.last_name = abstractSerializedData.readString(b);
            if ((super.flags & 0x4) != 0x0) {
                super.reply_markup = ReplyMarkup.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_botInlineMessageMediaContact_layer81.constructor);
            abstractSerializedData.writeInt32(super.flags);
            abstractSerializedData.writeString(super.phone_number);
            abstractSerializedData.writeString(super.first_name);
            abstractSerializedData.writeString(super.last_name);
            if ((super.flags & 0x4) != 0x0) {
                super.reply_markup.serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_botInlineMessageMediaGeo extends BotInlineMessage
    {
        public static int constructor = -1222451611;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            super.geo = GeoPoint.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.period = abstractSerializedData.readInt32(b);
            if ((super.flags & 0x4) != 0x0) {
                super.reply_markup = ReplyMarkup.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_botInlineMessageMediaGeo.constructor);
            abstractSerializedData.writeInt32(super.flags);
            super.geo.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(super.period);
            if ((super.flags & 0x4) != 0x0) {
                super.reply_markup.serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_botInlineMessageMediaGeo_layer71 extends TL_botInlineMessageMediaGeo
    {
        public static int constructor = 982505656;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            super.geo = GeoPoint.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            if ((super.flags & 0x4) != 0x0) {
                super.reply_markup = ReplyMarkup.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_botInlineMessageMediaGeo_layer71.constructor);
            abstractSerializedData.writeInt32(super.flags);
            super.geo.serializeToStream(abstractSerializedData);
            if ((super.flags & 0x4) != 0x0) {
                super.reply_markup.serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_botInlineMessageMediaVenue extends BotInlineMessage
    {
        public static int constructor = -1970903652;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            super.geo = GeoPoint.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.title = abstractSerializedData.readString(b);
            super.address = abstractSerializedData.readString(b);
            super.provider = abstractSerializedData.readString(b);
            super.venue_id = abstractSerializedData.readString(b);
            super.venue_type = abstractSerializedData.readString(b);
            if ((super.flags & 0x4) != 0x0) {
                super.reply_markup = ReplyMarkup.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_botInlineMessageMediaVenue.constructor);
            abstractSerializedData.writeInt32(super.flags);
            super.geo.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(super.title);
            abstractSerializedData.writeString(super.address);
            abstractSerializedData.writeString(super.provider);
            abstractSerializedData.writeString(super.venue_id);
            abstractSerializedData.writeString(super.venue_type);
            if ((super.flags & 0x4) != 0x0) {
                super.reply_markup.serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_botInlineMessageMediaVenue_layer77 extends TL_botInlineMessageMediaVenue
    {
        public static int constructor = 1130767150;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            super.geo = GeoPoint.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.title = abstractSerializedData.readString(b);
            super.address = abstractSerializedData.readString(b);
            super.provider = abstractSerializedData.readString(b);
            super.venue_id = abstractSerializedData.readString(b);
            if ((super.flags & 0x4) != 0x0) {
                super.reply_markup = ReplyMarkup.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_botInlineMessageMediaVenue_layer77.constructor);
            abstractSerializedData.writeInt32(super.flags);
            super.geo.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(super.title);
            abstractSerializedData.writeString(super.address);
            abstractSerializedData.writeString(super.provider);
            abstractSerializedData.writeString(super.venue_id);
            if ((super.flags & 0x4) != 0x0) {
                super.reply_markup.serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_botInlineMessageText extends BotInlineMessage
    {
        public static int constructor = -1937807902;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            int i = 0;
            super.no_webpage = ((flags & 0x1) != 0x0);
            super.message = abstractSerializedData.readString(b);
            if ((super.flags & 0x2) != 0x0) {
                final int int32 = abstractSerializedData.readInt32(b);
                if (int32 != 481674261) {
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
                }
                else {
                    while (i < abstractSerializedData.readInt32(b)) {
                        final MessageEntity tLdeserialize = MessageEntity.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize == null) {
                            return;
                        }
                        super.entities.add(tLdeserialize);
                        ++i;
                    }
                }
            }
            if ((super.flags & 0x4) != 0x0) {
                super.reply_markup = ReplyMarkup.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_botInlineMessageText.constructor);
            int flags;
            if (super.no_webpage) {
                flags = (super.flags | 0x1);
            }
            else {
                flags = (super.flags & 0xFFFFFFFE);
            }
            abstractSerializedData.writeInt32(super.flags = flags);
            abstractSerializedData.writeString(super.message);
            if ((super.flags & 0x2) != 0x0) {
                abstractSerializedData.writeInt32(481674261);
                final int size = super.entities.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; ++i) {
                    super.entities.get(i).serializeToStream(abstractSerializedData);
                }
            }
            if ((super.flags & 0x4) != 0x0) {
                super.reply_markup.serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_botInlineResult extends BotInlineResult
    {
        public static int constructor = 295067450;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            super.id = abstractSerializedData.readString(b);
            super.type = abstractSerializedData.readString(b);
            if ((super.flags & 0x2) != 0x0) {
                super.title = abstractSerializedData.readString(b);
            }
            if ((super.flags & 0x4) != 0x0) {
                super.description = abstractSerializedData.readString(b);
            }
            if ((super.flags & 0x8) != 0x0) {
                super.url = abstractSerializedData.readString(b);
            }
            if ((super.flags & 0x10) != 0x0) {
                super.thumb = WebDocument.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            if ((super.flags & 0x20) != 0x0) {
                super.content = WebDocument.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            super.send_message = BotInlineMessage.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_botInlineResult.constructor);
            abstractSerializedData.writeInt32(super.flags);
            abstractSerializedData.writeString(super.id);
            abstractSerializedData.writeString(super.type);
            if ((super.flags & 0x2) != 0x0) {
                abstractSerializedData.writeString(super.title);
            }
            if ((super.flags & 0x4) != 0x0) {
                abstractSerializedData.writeString(super.description);
            }
            if ((super.flags & 0x8) != 0x0) {
                abstractSerializedData.writeString(super.url);
            }
            if ((super.flags & 0x10) != 0x0) {
                super.thumb.serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x20) != 0x0) {
                super.content.serializeToStream(abstractSerializedData);
            }
            super.send_message.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_channel extends Chat
    {
        public static int constructor = 1307772980;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            final boolean b2 = true;
            super.creator = ((flags & 0x1) != 0x0);
            super.left = ((super.flags & 0x4) != 0x0);
            super.broadcast = ((super.flags & 0x20) != 0x0);
            super.verified = ((super.flags & 0x80) != 0x0);
            super.megagroup = ((super.flags & 0x100) != 0x0);
            super.restricted = ((super.flags & 0x200) != 0x0);
            super.signatures = ((super.flags & 0x800) != 0x0);
            super.min = ((super.flags & 0x1000) != 0x0);
            super.scam = ((super.flags & 0x80000) != 0x0);
            super.has_link = ((super.flags & 0x100000) != 0x0 && b2);
            super.id = abstractSerializedData.readInt32(b);
            if ((super.flags & 0x2000) != 0x0) {
                super.access_hash = abstractSerializedData.readInt64(b);
            }
            super.title = abstractSerializedData.readString(b);
            if ((super.flags & 0x40) != 0x0) {
                super.username = abstractSerializedData.readString(b);
            }
            super.photo = ChatPhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.date = abstractSerializedData.readInt32(b);
            super.version = abstractSerializedData.readInt32(b);
            if ((super.flags & 0x200) != 0x0) {
                super.restriction_reason = abstractSerializedData.readString(b);
            }
            if ((super.flags & 0x4000) != 0x0) {
                super.admin_rights = TL_chatAdminRights.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            if ((super.flags & 0x8000) != 0x0) {
                super.banned_rights = TL_chatBannedRights.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            if ((super.flags & 0x40000) != 0x0) {
                super.default_banned_rights = TL_chatBannedRights.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            if ((super.flags & 0x20000) != 0x0) {
                super.participants_count = abstractSerializedData.readInt32(b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channel.constructor);
            int flags;
            if (super.creator) {
                flags = (super.flags | 0x1);
            }
            else {
                flags = (super.flags & 0xFFFFFFFE);
            }
            super.flags = flags;
            int flags2;
            if (super.left) {
                flags2 = (super.flags | 0x4);
            }
            else {
                flags2 = (super.flags & 0xFFFFFFFB);
            }
            super.flags = flags2;
            int flags3;
            if (super.broadcast) {
                flags3 = (super.flags | 0x20);
            }
            else {
                flags3 = (super.flags & 0xFFFFFFDF);
            }
            super.flags = flags3;
            int flags4;
            if (super.verified) {
                flags4 = (super.flags | 0x80);
            }
            else {
                flags4 = (super.flags & 0xFFFFFF7F);
            }
            super.flags = flags4;
            int flags5;
            if (super.megagroup) {
                flags5 = (super.flags | 0x100);
            }
            else {
                flags5 = (super.flags & 0xFFFFFEFF);
            }
            super.flags = flags5;
            int flags6;
            if (super.restricted) {
                flags6 = (super.flags | 0x200);
            }
            else {
                flags6 = (super.flags & 0xFFFFFDFF);
            }
            super.flags = flags6;
            int flags7;
            if (super.signatures) {
                flags7 = (super.flags | 0x800);
            }
            else {
                flags7 = (super.flags & 0xFFFFF7FF);
            }
            super.flags = flags7;
            int flags8;
            if (super.min) {
                flags8 = (super.flags | 0x1000);
            }
            else {
                flags8 = (super.flags & 0xFFFFEFFF);
            }
            super.flags = flags8;
            int flags9;
            if (super.scam) {
                flags9 = (super.flags | 0x80000);
            }
            else {
                flags9 = (super.flags & 0xFFF7FFFF);
            }
            super.flags = flags9;
            int flags10;
            if (super.has_link) {
                flags10 = (super.flags | 0x100000);
            }
            else {
                flags10 = (super.flags & 0xFFEFFFFF);
            }
            abstractSerializedData.writeInt32(super.flags = flags10);
            abstractSerializedData.writeInt32(super.id);
            if ((super.flags & 0x2000) != 0x0) {
                abstractSerializedData.writeInt64(super.access_hash);
            }
            abstractSerializedData.writeString(super.title);
            if ((super.flags & 0x40) != 0x0) {
                abstractSerializedData.writeString(super.username);
            }
            super.photo.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(super.date);
            abstractSerializedData.writeInt32(super.version);
            if ((super.flags & 0x200) != 0x0) {
                abstractSerializedData.writeString(super.restriction_reason);
            }
            if ((super.flags & 0x4000) != 0x0) {
                super.admin_rights.serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x8000) != 0x0) {
                super.banned_rights.serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x40000) != 0x0) {
                super.default_banned_rights.serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x20000) != 0x0) {
                abstractSerializedData.writeInt32(super.participants_count);
            }
        }
    }
    
    public static class TL_channelAdminLogEvent extends TLObject
    {
        public static int constructor = 995769920;
        public ChannelAdminLogEventAction action;
        public int date;
        public long id;
        public int user_id;
        
        public static TL_channelAdminLogEvent TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_channelAdminLogEvent.constructor == i) {
                final TL_channelAdminLogEvent tl_channelAdminLogEvent = new TL_channelAdminLogEvent();
                tl_channelAdminLogEvent.readParams(abstractSerializedData, b);
                return tl_channelAdminLogEvent;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_channelAdminLogEvent", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.id = abstractSerializedData.readInt64(b);
            this.date = abstractSerializedData.readInt32(b);
            this.user_id = abstractSerializedData.readInt32(b);
            this.action = ChannelAdminLogEventAction.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channelAdminLogEvent.constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeInt32(this.user_id);
            this.action.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_channelAdminLogEventActionChangeAbout extends ChannelAdminLogEventAction
    {
        public static int constructor = 1427671598;
        public String new_value;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.prev_value = abstractSerializedData.readString(b);
            this.new_value = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channelAdminLogEventActionChangeAbout.constructor);
            abstractSerializedData.writeString(super.prev_value);
            abstractSerializedData.writeString(this.new_value);
        }
    }
    
    public static class TL_channelAdminLogEventActionChangeLinkedChat extends ChannelAdminLogEventAction
    {
        public static int constructor = -1569748965;
        public int new_value;
        public int prev_value;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.prev_value = abstractSerializedData.readInt32(b);
            this.new_value = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channelAdminLogEventActionChangeLinkedChat.constructor);
            abstractSerializedData.writeInt32(this.prev_value);
            abstractSerializedData.writeInt32(this.new_value);
        }
    }
    
    public static class TL_channelAdminLogEventActionChangePhoto extends ChannelAdminLogEventAction
    {
        public static int constructor = 1129042607;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.prev_photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.new_photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channelAdminLogEventActionChangePhoto.constructor);
            super.prev_photo.serializeToStream(abstractSerializedData);
            super.new_photo.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_channelAdminLogEventActionChangeStickerSet extends ChannelAdminLogEventAction
    {
        public static int constructor = -1312568665;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.prev_stickerset = InputStickerSet.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.new_stickerset = InputStickerSet.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channelAdminLogEventActionChangeStickerSet.constructor);
            super.prev_stickerset.serializeToStream(abstractSerializedData);
            super.new_stickerset.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_channelAdminLogEventActionChangeTitle extends ChannelAdminLogEventAction
    {
        public static int constructor = -421545947;
        public String new_value;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.prev_value = abstractSerializedData.readString(b);
            this.new_value = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channelAdminLogEventActionChangeTitle.constructor);
            abstractSerializedData.writeString(super.prev_value);
            abstractSerializedData.writeString(this.new_value);
        }
    }
    
    public static class TL_channelAdminLogEventActionChangeUsername extends ChannelAdminLogEventAction
    {
        public static int constructor = 1783299128;
        public String new_value;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.prev_value = abstractSerializedData.readString(b);
            this.new_value = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channelAdminLogEventActionChangeUsername.constructor);
            abstractSerializedData.writeString(super.prev_value);
            abstractSerializedData.writeString(this.new_value);
        }
    }
    
    public static class TL_channelAdminLogEventActionDefaultBannedRights extends ChannelAdminLogEventAction
    {
        public static int constructor = 771095562;
        public TL_chatBannedRights new_banned_rights;
        public TL_chatBannedRights prev_banned_rights;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.prev_banned_rights = TL_chatBannedRights.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            this.new_banned_rights = TL_chatBannedRights.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channelAdminLogEventActionDefaultBannedRights.constructor);
            this.prev_banned_rights.serializeToStream(abstractSerializedData);
            this.new_banned_rights.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_channelAdminLogEventActionDeleteMessage extends ChannelAdminLogEventAction
    {
        public static int constructor = 1121994683;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.message = Message.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channelAdminLogEventActionDeleteMessage.constructor);
            super.message.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_channelAdminLogEventActionEditMessage extends ChannelAdminLogEventAction
    {
        public static int constructor = 1889215493;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.prev_message = Message.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.new_message = Message.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channelAdminLogEventActionEditMessage.constructor);
            super.prev_message.serializeToStream(abstractSerializedData);
            super.new_message.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_channelAdminLogEventActionParticipantInvite extends ChannelAdminLogEventAction
    {
        public static int constructor = -484690728;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.participant = ChannelParticipant.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channelAdminLogEventActionParticipantInvite.constructor);
            super.participant.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_channelAdminLogEventActionParticipantJoin extends ChannelAdminLogEventAction
    {
        public static int constructor = 405815507;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channelAdminLogEventActionParticipantJoin.constructor);
        }
    }
    
    public static class TL_channelAdminLogEventActionParticipantLeave extends ChannelAdminLogEventAction
    {
        public static int constructor = -124291086;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channelAdminLogEventActionParticipantLeave.constructor);
        }
    }
    
    public static class TL_channelAdminLogEventActionParticipantToggleAdmin extends ChannelAdminLogEventAction
    {
        public static int constructor = -714643696;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.prev_participant = ChannelParticipant.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.new_participant = ChannelParticipant.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channelAdminLogEventActionParticipantToggleAdmin.constructor);
            super.prev_participant.serializeToStream(abstractSerializedData);
            super.new_participant.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_channelAdminLogEventActionParticipantToggleBan extends ChannelAdminLogEventAction
    {
        public static int constructor = -422036098;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.prev_participant = ChannelParticipant.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.new_participant = ChannelParticipant.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channelAdminLogEventActionParticipantToggleBan.constructor);
            super.prev_participant.serializeToStream(abstractSerializedData);
            super.new_participant.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_channelAdminLogEventActionStopPoll extends ChannelAdminLogEventAction
    {
        public static int constructor = -1895328189;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.message = Message.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channelAdminLogEventActionStopPoll.constructor);
            super.message.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_channelAdminLogEventActionToggleInvites extends ChannelAdminLogEventAction
    {
        public static int constructor = 460916654;
        public boolean new_value;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.new_value = abstractSerializedData.readBool(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channelAdminLogEventActionToggleInvites.constructor);
            abstractSerializedData.writeBool(this.new_value);
        }
    }
    
    public static class TL_channelAdminLogEventActionTogglePreHistoryHidden extends ChannelAdminLogEventAction
    {
        public static int constructor = 1599903217;
        public boolean new_value;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.new_value = abstractSerializedData.readBool(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channelAdminLogEventActionTogglePreHistoryHidden.constructor);
            abstractSerializedData.writeBool(this.new_value);
        }
    }
    
    public static class TL_channelAdminLogEventActionToggleSignatures extends ChannelAdminLogEventAction
    {
        public static int constructor = 648939889;
        public boolean new_value;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.new_value = abstractSerializedData.readBool(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channelAdminLogEventActionToggleSignatures.constructor);
            abstractSerializedData.writeBool(this.new_value);
        }
    }
    
    public static class TL_channelAdminLogEventActionUpdatePinned extends ChannelAdminLogEventAction
    {
        public static int constructor = -370660328;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.message = Message.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channelAdminLogEventActionUpdatePinned.constructor);
            super.message.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_channelAdminLogEventsFilter extends TLObject
    {
        public static int constructor = -368018716;
        public boolean ban;
        public boolean delete;
        public boolean demote;
        public boolean edit;
        public int flags;
        public boolean info;
        public boolean invite;
        public boolean join;
        public boolean kick;
        public boolean leave;
        public boolean pinned;
        public boolean promote;
        public boolean settings;
        public boolean unban;
        public boolean unkick;
        
        public static TL_channelAdminLogEventsFilter TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_channelAdminLogEventsFilter.constructor == i) {
                final TL_channelAdminLogEventsFilter tl_channelAdminLogEventsFilter = new TL_channelAdminLogEventsFilter();
                tl_channelAdminLogEventsFilter.readParams(abstractSerializedData, b);
                return tl_channelAdminLogEventsFilter;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_channelAdminLogEventsFilter", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.flags = abstractSerializedData.readInt32(b);
            final int flags = this.flags;
            final boolean b2 = true;
            this.join = ((flags & 0x1) != 0x0);
            this.leave = ((this.flags & 0x2) != 0x0);
            this.invite = ((this.flags & 0x4) != 0x0);
            this.ban = ((this.flags & 0x8) != 0x0);
            this.unban = ((this.flags & 0x10) != 0x0);
            this.kick = ((this.flags & 0x20) != 0x0);
            this.unkick = ((this.flags & 0x40) != 0x0);
            this.promote = ((this.flags & 0x80) != 0x0);
            this.demote = ((this.flags & 0x100) != 0x0);
            this.info = ((this.flags & 0x200) != 0x0);
            this.settings = ((this.flags & 0x400) != 0x0);
            this.pinned = ((this.flags & 0x800) != 0x0);
            this.edit = ((this.flags & 0x1000) != 0x0);
            this.delete = ((this.flags & 0x2000) != 0x0 && b2);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channelAdminLogEventsFilter.constructor);
            int flags;
            if (this.join) {
                flags = (this.flags | 0x1);
            }
            else {
                flags = (this.flags & 0xFFFFFFFE);
            }
            this.flags = flags;
            int flags2;
            if (this.leave) {
                flags2 = (this.flags | 0x2);
            }
            else {
                flags2 = (this.flags & 0xFFFFFFFD);
            }
            this.flags = flags2;
            int flags3;
            if (this.invite) {
                flags3 = (this.flags | 0x4);
            }
            else {
                flags3 = (this.flags & 0xFFFFFFFB);
            }
            this.flags = flags3;
            int flags4;
            if (this.ban) {
                flags4 = (this.flags | 0x8);
            }
            else {
                flags4 = (this.flags & 0xFFFFFFF7);
            }
            this.flags = flags4;
            int flags5;
            if (this.unban) {
                flags5 = (this.flags | 0x10);
            }
            else {
                flags5 = (this.flags & 0xFFFFFFEF);
            }
            this.flags = flags5;
            int flags6;
            if (this.kick) {
                flags6 = (this.flags | 0x20);
            }
            else {
                flags6 = (this.flags & 0xFFFFFFDF);
            }
            this.flags = flags6;
            int flags7;
            if (this.unkick) {
                flags7 = (this.flags | 0x40);
            }
            else {
                flags7 = (this.flags & 0xFFFFFFBF);
            }
            this.flags = flags7;
            int flags8;
            if (this.promote) {
                flags8 = (this.flags | 0x80);
            }
            else {
                flags8 = (this.flags & 0xFFFFFF7F);
            }
            this.flags = flags8;
            int flags9;
            if (this.demote) {
                flags9 = (this.flags | 0x100);
            }
            else {
                flags9 = (this.flags & 0xFFFFFEFF);
            }
            this.flags = flags9;
            int flags10;
            if (this.info) {
                flags10 = (this.flags | 0x200);
            }
            else {
                flags10 = (this.flags & 0xFFFFFDFF);
            }
            this.flags = flags10;
            int flags11;
            if (this.settings) {
                flags11 = (this.flags | 0x400);
            }
            else {
                flags11 = (this.flags & 0xFFFFFBFF);
            }
            this.flags = flags11;
            int flags12;
            if (this.pinned) {
                flags12 = (this.flags | 0x800);
            }
            else {
                flags12 = (this.flags & 0xFFFFF7FF);
            }
            this.flags = flags12;
            int flags13;
            if (this.edit) {
                flags13 = (this.flags | 0x1000);
            }
            else {
                flags13 = (this.flags & 0xFFFFEFFF);
            }
            this.flags = flags13;
            int flags14;
            if (this.delete) {
                flags14 = (this.flags | 0x2000);
            }
            else {
                flags14 = (this.flags & 0xFFFFDFFF);
            }
            abstractSerializedData.writeInt32(this.flags = flags14);
        }
    }
    
    public static class TL_channelAdminRights_layer92 extends TLObject
    {
        public static int constructor = 1568467877;
        public boolean add_admins;
        public boolean ban_users;
        public boolean change_info;
        public boolean delete_messages;
        public boolean edit_messages;
        public int flags;
        public boolean invite_users;
        public boolean manage_call;
        public boolean pin_messages;
        public boolean post_messages;
        
        public static TL_channelAdminRights_layer92 TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_channelAdminRights_layer92.constructor == i) {
                final TL_channelAdminRights_layer92 tl_channelAdminRights_layer92 = new TL_channelAdminRights_layer92();
                tl_channelAdminRights_layer92.readParams(abstractSerializedData, b);
                return tl_channelAdminRights_layer92;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_channelAdminRights_layer92", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.flags = abstractSerializedData.readInt32(b);
            final int flags = this.flags;
            final boolean b2 = true;
            this.change_info = ((flags & 0x1) != 0x0);
            this.post_messages = ((this.flags & 0x2) != 0x0);
            this.edit_messages = ((this.flags & 0x4) != 0x0);
            this.delete_messages = ((this.flags & 0x8) != 0x0);
            this.ban_users = ((this.flags & 0x10) != 0x0);
            this.invite_users = ((this.flags & 0x20) != 0x0);
            this.pin_messages = ((this.flags & 0x80) != 0x0);
            this.add_admins = ((this.flags & 0x200) != 0x0);
            this.manage_call = ((this.flags & 0x400) != 0x0 && b2);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channelAdminRights_layer92.constructor);
            int flags;
            if (this.change_info) {
                flags = (this.flags | 0x1);
            }
            else {
                flags = (this.flags & 0xFFFFFFFE);
            }
            this.flags = flags;
            int flags2;
            if (this.post_messages) {
                flags2 = (this.flags | 0x2);
            }
            else {
                flags2 = (this.flags & 0xFFFFFFFD);
            }
            this.flags = flags2;
            int flags3;
            if (this.edit_messages) {
                flags3 = (this.flags | 0x4);
            }
            else {
                flags3 = (this.flags & 0xFFFFFFFB);
            }
            this.flags = flags3;
            int flags4;
            if (this.delete_messages) {
                flags4 = (this.flags | 0x8);
            }
            else {
                flags4 = (this.flags & 0xFFFFFFF7);
            }
            this.flags = flags4;
            int flags5;
            if (this.ban_users) {
                flags5 = (this.flags | 0x10);
            }
            else {
                flags5 = (this.flags & 0xFFFFFFEF);
            }
            this.flags = flags5;
            int flags6;
            if (this.invite_users) {
                flags6 = (this.flags | 0x20);
            }
            else {
                flags6 = (this.flags & 0xFFFFFFDF);
            }
            this.flags = flags6;
            int flags7;
            if (this.pin_messages) {
                flags7 = (this.flags | 0x80);
            }
            else {
                flags7 = (this.flags & 0xFFFFFF7F);
            }
            this.flags = flags7;
            int flags8;
            if (this.add_admins) {
                flags8 = (this.flags | 0x200);
            }
            else {
                flags8 = (this.flags & 0xFFFFFDFF);
            }
            this.flags = flags8;
            int flags9;
            if (this.manage_call) {
                flags9 = (this.flags | 0x400);
            }
            else {
                flags9 = (this.flags & 0xFFFFFBFF);
            }
            abstractSerializedData.writeInt32(this.flags = flags9);
        }
    }
    
    public static class TL_channelBannedRights_layer92 extends TLObject
    {
        public static int constructor = 1489977929;
        public boolean embed_links;
        public int flags;
        public boolean send_games;
        public boolean send_gifs;
        public boolean send_inline;
        public boolean send_media;
        public boolean send_messages;
        public boolean send_stickers;
        public int until_date;
        public boolean view_messages;
        
        public static TL_channelBannedRights_layer92 TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_channelBannedRights_layer92.constructor == i) {
                final TL_channelBannedRights_layer92 tl_channelBannedRights_layer92 = new TL_channelBannedRights_layer92();
                tl_channelBannedRights_layer92.readParams(abstractSerializedData, b);
                return tl_channelBannedRights_layer92;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_channelBannedRights_layer92", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.flags = abstractSerializedData.readInt32(b);
            final int flags = this.flags;
            final boolean b2 = true;
            this.view_messages = ((flags & 0x1) != 0x0);
            this.send_messages = ((this.flags & 0x2) != 0x0);
            this.send_media = ((this.flags & 0x4) != 0x0);
            this.send_stickers = ((this.flags & 0x8) != 0x0);
            this.send_gifs = ((this.flags & 0x10) != 0x0);
            this.send_games = ((this.flags & 0x20) != 0x0);
            this.send_inline = ((this.flags & 0x40) != 0x0);
            this.embed_links = ((this.flags & 0x80) != 0x0 && b2);
            this.until_date = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channelBannedRights_layer92.constructor);
            int flags;
            if (this.view_messages) {
                flags = (this.flags | 0x1);
            }
            else {
                flags = (this.flags & 0xFFFFFFFE);
            }
            this.flags = flags;
            int flags2;
            if (this.send_messages) {
                flags2 = (this.flags | 0x2);
            }
            else {
                flags2 = (this.flags & 0xFFFFFFFD);
            }
            this.flags = flags2;
            int flags3;
            if (this.send_media) {
                flags3 = (this.flags | 0x4);
            }
            else {
                flags3 = (this.flags & 0xFFFFFFFB);
            }
            this.flags = flags3;
            int flags4;
            if (this.send_stickers) {
                flags4 = (this.flags | 0x8);
            }
            else {
                flags4 = (this.flags & 0xFFFFFFF7);
            }
            this.flags = flags4;
            int flags5;
            if (this.send_gifs) {
                flags5 = (this.flags | 0x10);
            }
            else {
                flags5 = (this.flags & 0xFFFFFFEF);
            }
            this.flags = flags5;
            int flags6;
            if (this.send_games) {
                flags6 = (this.flags | 0x20);
            }
            else {
                flags6 = (this.flags & 0xFFFFFFDF);
            }
            this.flags = flags6;
            int flags7;
            if (this.send_inline) {
                flags7 = (this.flags | 0x40);
            }
            else {
                flags7 = (this.flags & 0xFFFFFFBF);
            }
            this.flags = flags7;
            int flags8;
            if (this.embed_links) {
                flags8 = (this.flags | 0x80);
            }
            else {
                flags8 = (this.flags & 0xFFFFFF7F);
            }
            abstractSerializedData.writeInt32(this.flags = flags8);
            abstractSerializedData.writeInt32(this.until_date);
        }
    }
    
    public static class TL_channelForbidden extends Chat
    {
        public static int constructor = 681420594;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            final boolean b2 = true;
            super.broadcast = ((flags & 0x20) != 0x0);
            super.megagroup = ((super.flags & 0x100) != 0x0 && b2);
            super.id = abstractSerializedData.readInt32(b);
            super.access_hash = abstractSerializedData.readInt64(b);
            super.title = abstractSerializedData.readString(b);
            if ((super.flags & 0x10000) != 0x0) {
                super.until_date = abstractSerializedData.readInt32(b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channelForbidden.constructor);
            int flags;
            if (super.broadcast) {
                flags = (super.flags | 0x20);
            }
            else {
                flags = (super.flags & 0xFFFFFFDF);
            }
            super.flags = flags;
            int flags2;
            if (super.megagroup) {
                flags2 = (super.flags | 0x100);
            }
            else {
                flags2 = (super.flags & 0xFFFFFEFF);
            }
            abstractSerializedData.writeInt32(super.flags = flags2);
            abstractSerializedData.writeInt32(super.id);
            abstractSerializedData.writeInt64(super.access_hash);
            abstractSerializedData.writeString(super.title);
            if ((super.flags & 0x10000) != 0x0) {
                abstractSerializedData.writeInt32(super.until_date);
            }
        }
    }
    
    public static class TL_channelForbidden_layer52 extends TL_channelForbidden
    {
        public static int constructor = 763724588;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt32(b);
            super.access_hash = abstractSerializedData.readInt64(b);
            super.title = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channelForbidden_layer52.constructor);
            abstractSerializedData.writeInt32(super.id);
            abstractSerializedData.writeInt64(super.access_hash);
            abstractSerializedData.writeString(super.title);
        }
    }
    
    public static class TL_channelForbidden_layer67 extends TL_channelForbidden
    {
        public static int constructor = -2059962289;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            final boolean b2 = true;
            super.broadcast = ((flags & 0x20) != 0x0);
            super.megagroup = ((super.flags & 0x100) != 0x0 && b2);
            super.id = abstractSerializedData.readInt32(b);
            super.access_hash = abstractSerializedData.readInt64(b);
            super.title = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channelForbidden_layer67.constructor);
            int flags;
            if (super.broadcast) {
                flags = (super.flags | 0x20);
            }
            else {
                flags = (super.flags & 0xFFFFFFDF);
            }
            super.flags = flags;
            int flags2;
            if (super.megagroup) {
                flags2 = (super.flags | 0x100);
            }
            else {
                flags2 = (super.flags & 0xFFFFFEFF);
            }
            abstractSerializedData.writeInt32(super.flags = flags2);
            abstractSerializedData.writeInt32(super.id);
            abstractSerializedData.writeInt64(super.access_hash);
            abstractSerializedData.writeString(super.title);
        }
    }
    
    public static class TL_channelFull extends ChatFull
    {
        public static int constructor = -1736252138;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            int i = 0;
            super.can_view_participants = ((flags & 0x8) != 0x0);
            super.can_set_username = ((super.flags & 0x40) != 0x0);
            super.can_set_stickers = ((super.flags & 0x80) != 0x0);
            super.hidden_prehistory = ((super.flags & 0x400) != 0x0);
            super.can_view_stats = ((super.flags & 0x1000) != 0x0);
            super.id = abstractSerializedData.readInt32(b);
            super.about = abstractSerializedData.readString(b);
            if ((super.flags & 0x1) != 0x0) {
                super.participants_count = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x2) != 0x0) {
                super.admins_count = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x4) != 0x0) {
                super.kicked_count = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x4) != 0x0) {
                super.banned_count = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x2000) != 0x0) {
                super.online_count = abstractSerializedData.readInt32(b);
            }
            super.read_inbox_max_id = abstractSerializedData.readInt32(b);
            super.read_outbox_max_id = abstractSerializedData.readInt32(b);
            super.unread_count = abstractSerializedData.readInt32(b);
            super.chat_photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.notify_settings = PeerNotifySettings.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.exported_invite = ExportedChatInvite.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            final int int32 = abstractSerializedData.readInt32(b);
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final BotInfo tLdeserialize = BotInfo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.bot_info.add(tLdeserialize);
                    ++i;
                }
                if ((super.flags & 0x10) != 0x0) {
                    super.migrated_from_chat_id = abstractSerializedData.readInt32(b);
                }
                if ((super.flags & 0x10) != 0x0) {
                    super.migrated_from_max_id = abstractSerializedData.readInt32(b);
                }
                if ((super.flags & 0x20) != 0x0) {
                    super.pinned_msg_id = abstractSerializedData.readInt32(b);
                }
                if ((super.flags & 0x100) != 0x0) {
                    super.stickerset = StickerSet.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                }
                if ((super.flags & 0x200) != 0x0) {
                    super.available_min_id = abstractSerializedData.readInt32(b);
                }
                if ((super.flags & 0x800) != 0x0) {
                    super.folder_id = abstractSerializedData.readInt32(b);
                }
                if ((super.flags & 0x2000) != 0x0) {
                    super.linked_chat_id = abstractSerializedData.readInt32(b);
                }
                super.pts = abstractSerializedData.readInt32(b);
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channelFull.constructor);
            int flags;
            if (super.can_view_participants) {
                flags = (super.flags | 0x8);
            }
            else {
                flags = (super.flags & 0xFFFFFFF7);
            }
            super.flags = flags;
            int flags2;
            if (super.can_set_username) {
                flags2 = (super.flags | 0x40);
            }
            else {
                flags2 = (super.flags & 0xFFFFFFBF);
            }
            super.flags = flags2;
            int flags3;
            if (super.can_set_stickers) {
                flags3 = (super.flags | 0x80);
            }
            else {
                flags3 = (super.flags & 0xFFFFFF7F);
            }
            super.flags = flags3;
            int flags4;
            if (super.hidden_prehistory) {
                flags4 = (super.flags | 0x400);
            }
            else {
                flags4 = (super.flags & 0xFFFFFBFF);
            }
            super.flags = flags4;
            int flags5;
            if (super.can_view_stats) {
                flags5 = (super.flags | 0x1000);
            }
            else {
                flags5 = (super.flags & 0xFFFFEFFF);
            }
            abstractSerializedData.writeInt32(super.flags = flags5);
            abstractSerializedData.writeInt32(super.id);
            abstractSerializedData.writeString(super.about);
            if ((super.flags & 0x1) != 0x0) {
                abstractSerializedData.writeInt32(super.participants_count);
            }
            if ((super.flags & 0x2) != 0x0) {
                abstractSerializedData.writeInt32(super.admins_count);
            }
            if ((super.flags & 0x4) != 0x0) {
                abstractSerializedData.writeInt32(super.kicked_count);
            }
            if ((super.flags & 0x4) != 0x0) {
                abstractSerializedData.writeInt32(super.banned_count);
            }
            if ((super.flags & 0x2000) != 0x0) {
                abstractSerializedData.writeInt32(super.online_count);
            }
            abstractSerializedData.writeInt32(super.read_inbox_max_id);
            abstractSerializedData.writeInt32(super.read_outbox_max_id);
            abstractSerializedData.writeInt32(super.unread_count);
            super.chat_photo.serializeToStream(abstractSerializedData);
            super.notify_settings.serializeToStream(abstractSerializedData);
            super.exported_invite.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.bot_info.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                super.bot_info.get(i).serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x10) != 0x0) {
                abstractSerializedData.writeInt32(super.migrated_from_chat_id);
            }
            if ((super.flags & 0x10) != 0x0) {
                abstractSerializedData.writeInt32(super.migrated_from_max_id);
            }
            if ((super.flags & 0x20) != 0x0) {
                abstractSerializedData.writeInt32(super.pinned_msg_id);
            }
            if ((super.flags & 0x100) != 0x0) {
                super.stickerset.serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x200) != 0x0) {
                abstractSerializedData.writeInt32(super.available_min_id);
            }
            if ((super.flags & 0x800) != 0x0) {
                abstractSerializedData.writeInt32(super.folder_id);
            }
            if ((super.flags & 0x2000) != 0x0) {
                abstractSerializedData.writeInt32(super.linked_chat_id);
            }
            abstractSerializedData.writeInt32(super.pts);
        }
    }
    
    public static class TL_channelFull_layer48 extends TL_channelFull
    {
        public static int constructor = -1640751649;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            int i = 0;
            super.can_view_participants = ((flags & 0x8) != 0x0);
            super.id = abstractSerializedData.readInt32(b);
            super.about = abstractSerializedData.readString(b);
            if ((super.flags & 0x1) != 0x0) {
                super.participants_count = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x2) != 0x0) {
                super.admins_count = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x4) != 0x0) {
                super.kicked_count = abstractSerializedData.readInt32(b);
            }
            super.read_inbox_max_id = abstractSerializedData.readInt32(b);
            super.unread_count = abstractSerializedData.readInt32(b);
            super.unread_important_count = abstractSerializedData.readInt32(b);
            super.chat_photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.notify_settings = PeerNotifySettings.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.exported_invite = ExportedChatInvite.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            final int int32 = abstractSerializedData.readInt32(b);
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final BotInfo tLdeserialize = BotInfo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.bot_info.add(tLdeserialize);
                    ++i;
                }
                if ((super.flags & 0x10) != 0x0) {
                    super.migrated_from_chat_id = abstractSerializedData.readInt32(b);
                }
                if ((super.flags & 0x10) != 0x0) {
                    super.migrated_from_max_id = abstractSerializedData.readInt32(b);
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channelFull_layer48.constructor);
            int flags;
            if (super.can_view_participants) {
                flags = (super.flags | 0x8);
            }
            else {
                flags = (super.flags & 0xFFFFFFF7);
            }
            abstractSerializedData.writeInt32(super.flags = flags);
            abstractSerializedData.writeInt32(super.id);
            abstractSerializedData.writeString(super.about);
            if ((super.flags & 0x1) != 0x0) {
                abstractSerializedData.writeInt32(super.participants_count);
            }
            if ((super.flags & 0x2) != 0x0) {
                abstractSerializedData.writeInt32(super.admins_count);
            }
            if ((super.flags & 0x4) != 0x0) {
                abstractSerializedData.writeInt32(super.kicked_count);
            }
            abstractSerializedData.writeInt32(super.read_inbox_max_id);
            abstractSerializedData.writeInt32(super.unread_count);
            abstractSerializedData.writeInt32(super.unread_important_count);
            super.chat_photo.serializeToStream(abstractSerializedData);
            super.notify_settings.serializeToStream(abstractSerializedData);
            super.exported_invite.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.bot_info.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                super.bot_info.get(i).serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x10) != 0x0) {
                abstractSerializedData.writeInt32(super.migrated_from_chat_id);
            }
            if ((super.flags & 0x10) != 0x0) {
                abstractSerializedData.writeInt32(super.migrated_from_max_id);
            }
        }
    }
    
    public static class TL_channelFull_layer52 extends TL_channelFull
    {
        public static int constructor = -1749097118;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            int i = 0;
            super.can_view_participants = ((flags & 0x8) != 0x0);
            super.can_set_username = ((super.flags & 0x40) != 0x0);
            super.id = abstractSerializedData.readInt32(b);
            super.about = abstractSerializedData.readString(b);
            if ((super.flags & 0x1) != 0x0) {
                super.participants_count = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x2) != 0x0) {
                super.admins_count = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x4) != 0x0) {
                super.kicked_count = abstractSerializedData.readInt32(b);
            }
            super.read_inbox_max_id = abstractSerializedData.readInt32(b);
            super.unread_count = abstractSerializedData.readInt32(b);
            super.unread_important_count = abstractSerializedData.readInt32(b);
            super.chat_photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.notify_settings = PeerNotifySettings.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.exported_invite = ExportedChatInvite.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            final int int32 = abstractSerializedData.readInt32(b);
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final BotInfo tLdeserialize = BotInfo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.bot_info.add(tLdeserialize);
                    ++i;
                }
                if ((super.flags & 0x10) != 0x0) {
                    super.migrated_from_chat_id = abstractSerializedData.readInt32(b);
                }
                if ((super.flags & 0x10) != 0x0) {
                    super.migrated_from_max_id = abstractSerializedData.readInt32(b);
                }
                if ((super.flags & 0x20) != 0x0) {
                    super.pinned_msg_id = abstractSerializedData.readInt32(b);
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channelFull_layer52.constructor);
            int flags;
            if (super.can_view_participants) {
                flags = (super.flags | 0x8);
            }
            else {
                flags = (super.flags & 0xFFFFFFF7);
            }
            super.flags = flags;
            int flags2;
            if (super.can_set_username) {
                flags2 = (super.flags | 0x40);
            }
            else {
                flags2 = (super.flags & 0xFFFFFFBF);
            }
            abstractSerializedData.writeInt32(super.flags = flags2);
            abstractSerializedData.writeInt32(super.id);
            abstractSerializedData.writeString(super.about);
            if ((super.flags & 0x1) != 0x0) {
                abstractSerializedData.writeInt32(super.participants_count);
            }
            if ((super.flags & 0x2) != 0x0) {
                abstractSerializedData.writeInt32(super.admins_count);
            }
            if ((super.flags & 0x4) != 0x0) {
                abstractSerializedData.writeInt32(super.kicked_count);
            }
            abstractSerializedData.writeInt32(super.read_inbox_max_id);
            abstractSerializedData.writeInt32(super.unread_count);
            abstractSerializedData.writeInt32(super.unread_important_count);
            super.chat_photo.serializeToStream(abstractSerializedData);
            super.notify_settings.serializeToStream(abstractSerializedData);
            super.exported_invite.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.bot_info.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                super.bot_info.get(i).serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x10) != 0x0) {
                abstractSerializedData.writeInt32(super.migrated_from_chat_id);
            }
            if ((super.flags & 0x10) != 0x0) {
                abstractSerializedData.writeInt32(super.migrated_from_max_id);
            }
            if ((super.flags & 0x20) != 0x0) {
                abstractSerializedData.writeInt32(super.pinned_msg_id);
            }
        }
    }
    
    public static class TL_channelFull_layer67 extends TL_channelFull
    {
        public static int constructor = -1009430225;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            int i = 0;
            super.can_view_participants = ((flags & 0x8) != 0x0);
            super.can_set_username = ((super.flags & 0x40) != 0x0);
            super.id = abstractSerializedData.readInt32(b);
            super.about = abstractSerializedData.readString(b);
            if ((super.flags & 0x1) != 0x0) {
                super.participants_count = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x2) != 0x0) {
                super.admins_count = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x4) != 0x0) {
                super.kicked_count = abstractSerializedData.readInt32(b);
            }
            super.read_inbox_max_id = abstractSerializedData.readInt32(b);
            super.read_outbox_max_id = abstractSerializedData.readInt32(b);
            super.unread_count = abstractSerializedData.readInt32(b);
            super.chat_photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.notify_settings = PeerNotifySettings.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.exported_invite = ExportedChatInvite.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            final int int32 = abstractSerializedData.readInt32(b);
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final BotInfo tLdeserialize = BotInfo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.bot_info.add(tLdeserialize);
                    ++i;
                }
                if ((super.flags & 0x10) != 0x0) {
                    super.migrated_from_chat_id = abstractSerializedData.readInt32(b);
                }
                if ((super.flags & 0x10) != 0x0) {
                    super.migrated_from_max_id = abstractSerializedData.readInt32(b);
                }
                if ((super.flags & 0x20) != 0x0) {
                    super.pinned_msg_id = abstractSerializedData.readInt32(b);
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channelFull_layer67.constructor);
            int flags;
            if (super.can_view_participants) {
                flags = (super.flags | 0x8);
            }
            else {
                flags = (super.flags & 0xFFFFFFF7);
            }
            super.flags = flags;
            int flags2;
            if (super.can_set_username) {
                flags2 = (super.flags | 0x40);
            }
            else {
                flags2 = (super.flags & 0xFFFFFFBF);
            }
            abstractSerializedData.writeInt32(super.flags = flags2);
            abstractSerializedData.writeInt32(super.id);
            abstractSerializedData.writeString(super.about);
            if ((super.flags & 0x1) != 0x0) {
                abstractSerializedData.writeInt32(super.participants_count);
            }
            if ((super.flags & 0x2) != 0x0) {
                abstractSerializedData.writeInt32(super.admins_count);
            }
            if ((super.flags & 0x4) != 0x0) {
                abstractSerializedData.writeInt32(super.kicked_count);
            }
            abstractSerializedData.writeInt32(super.read_inbox_max_id);
            abstractSerializedData.writeInt32(super.read_outbox_max_id);
            abstractSerializedData.writeInt32(super.unread_count);
            super.chat_photo.serializeToStream(abstractSerializedData);
            super.notify_settings.serializeToStream(abstractSerializedData);
            super.exported_invite.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.bot_info.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                super.bot_info.get(i).serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x10) != 0x0) {
                abstractSerializedData.writeInt32(super.migrated_from_chat_id);
            }
            if ((super.flags & 0x10) != 0x0) {
                abstractSerializedData.writeInt32(super.migrated_from_max_id);
            }
            if ((super.flags & 0x20) != 0x0) {
                abstractSerializedData.writeInt32(super.pinned_msg_id);
            }
        }
    }
    
    public static class TL_channelFull_layer70 extends TL_channelFull
    {
        public static int constructor = -1781833897;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            int i = 0;
            super.can_view_participants = ((flags & 0x8) != 0x0);
            super.can_set_username = ((super.flags & 0x40) != 0x0);
            super.id = abstractSerializedData.readInt32(b);
            super.about = abstractSerializedData.readString(b);
            if ((super.flags & 0x1) != 0x0) {
                super.participants_count = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x2) != 0x0) {
                super.admins_count = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x4) != 0x0) {
                super.kicked_count = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x4) != 0x0) {
                super.banned_count = abstractSerializedData.readInt32(b);
            }
            super.read_inbox_max_id = abstractSerializedData.readInt32(b);
            super.read_outbox_max_id = abstractSerializedData.readInt32(b);
            super.unread_count = abstractSerializedData.readInt32(b);
            super.chat_photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.notify_settings = PeerNotifySettings.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.exported_invite = ExportedChatInvite.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            final int int32 = abstractSerializedData.readInt32(b);
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final BotInfo tLdeserialize = BotInfo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.bot_info.add(tLdeserialize);
                    ++i;
                }
                if ((super.flags & 0x10) != 0x0) {
                    super.migrated_from_chat_id = abstractSerializedData.readInt32(b);
                }
                if ((super.flags & 0x10) != 0x0) {
                    super.migrated_from_max_id = abstractSerializedData.readInt32(b);
                }
                if ((super.flags & 0x20) != 0x0) {
                    super.pinned_msg_id = abstractSerializedData.readInt32(b);
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channelFull_layer70.constructor);
            int flags;
            if (super.can_view_participants) {
                flags = (super.flags | 0x8);
            }
            else {
                flags = (super.flags & 0xFFFFFFF7);
            }
            super.flags = flags;
            int flags2;
            if (super.can_set_username) {
                flags2 = (super.flags | 0x40);
            }
            else {
                flags2 = (super.flags & 0xFFFFFFBF);
            }
            abstractSerializedData.writeInt32(super.flags = flags2);
            abstractSerializedData.writeInt32(super.id);
            abstractSerializedData.writeString(super.about);
            if ((super.flags & 0x1) != 0x0) {
                abstractSerializedData.writeInt32(super.participants_count);
            }
            if ((super.flags & 0x2) != 0x0) {
                abstractSerializedData.writeInt32(super.admins_count);
            }
            if ((super.flags & 0x4) != 0x0) {
                abstractSerializedData.writeInt32(super.kicked_count);
            }
            if ((super.flags & 0x4) != 0x0) {
                abstractSerializedData.writeInt32(super.banned_count);
            }
            abstractSerializedData.writeInt32(super.read_inbox_max_id);
            abstractSerializedData.writeInt32(super.read_outbox_max_id);
            abstractSerializedData.writeInt32(super.unread_count);
            super.chat_photo.serializeToStream(abstractSerializedData);
            super.notify_settings.serializeToStream(abstractSerializedData);
            super.exported_invite.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.bot_info.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                super.bot_info.get(i).serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x10) != 0x0) {
                abstractSerializedData.writeInt32(super.migrated_from_chat_id);
            }
            if ((super.flags & 0x10) != 0x0) {
                abstractSerializedData.writeInt32(super.migrated_from_max_id);
            }
            if ((super.flags & 0x20) != 0x0) {
                abstractSerializedData.writeInt32(super.pinned_msg_id);
            }
        }
    }
    
    public static class TL_channelFull_layer71 extends TL_channelFull
    {
        public static int constructor = 401891279;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            int i = 0;
            super.can_view_participants = ((flags & 0x8) != 0x0);
            super.can_set_username = ((super.flags & 0x40) != 0x0);
            super.can_set_stickers = ((super.flags & 0x80) != 0x0);
            super.id = abstractSerializedData.readInt32(b);
            super.about = abstractSerializedData.readString(b);
            if ((super.flags & 0x1) != 0x0) {
                super.participants_count = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x2) != 0x0) {
                super.admins_count = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x4) != 0x0) {
                super.kicked_count = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x4) != 0x0) {
                super.banned_count = abstractSerializedData.readInt32(b);
            }
            super.read_inbox_max_id = abstractSerializedData.readInt32(b);
            super.read_outbox_max_id = abstractSerializedData.readInt32(b);
            super.unread_count = abstractSerializedData.readInt32(b);
            super.chat_photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.notify_settings = PeerNotifySettings.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.exported_invite = ExportedChatInvite.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            final int int32 = abstractSerializedData.readInt32(b);
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final BotInfo tLdeserialize = BotInfo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.bot_info.add(tLdeserialize);
                    ++i;
                }
                if ((super.flags & 0x10) != 0x0) {
                    super.migrated_from_chat_id = abstractSerializedData.readInt32(b);
                }
                if ((super.flags & 0x10) != 0x0) {
                    super.migrated_from_max_id = abstractSerializedData.readInt32(b);
                }
                if ((super.flags & 0x20) != 0x0) {
                    super.pinned_msg_id = abstractSerializedData.readInt32(b);
                }
                if ((super.flags & 0x100) != 0x0) {
                    super.stickerset = StickerSet.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channelFull_layer71.constructor);
            int flags;
            if (super.can_view_participants) {
                flags = (super.flags | 0x8);
            }
            else {
                flags = (super.flags & 0xFFFFFFF7);
            }
            super.flags = flags;
            int flags2;
            if (super.can_set_username) {
                flags2 = (super.flags | 0x40);
            }
            else {
                flags2 = (super.flags & 0xFFFFFFBF);
            }
            super.flags = flags2;
            int flags3;
            if (super.can_set_stickers) {
                flags3 = (super.flags | 0x80);
            }
            else {
                flags3 = (super.flags & 0xFFFFFF7F);
            }
            abstractSerializedData.writeInt32(super.flags = flags3);
            abstractSerializedData.writeInt32(super.id);
            abstractSerializedData.writeString(super.about);
            if ((super.flags & 0x1) != 0x0) {
                abstractSerializedData.writeInt32(super.participants_count);
            }
            if ((super.flags & 0x2) != 0x0) {
                abstractSerializedData.writeInt32(super.admins_count);
            }
            if ((super.flags & 0x4) != 0x0) {
                abstractSerializedData.writeInt32(super.kicked_count);
            }
            if ((super.flags & 0x4) != 0x0) {
                abstractSerializedData.writeInt32(super.banned_count);
            }
            abstractSerializedData.writeInt32(super.read_inbox_max_id);
            abstractSerializedData.writeInt32(super.read_outbox_max_id);
            abstractSerializedData.writeInt32(super.unread_count);
            super.chat_photo.serializeToStream(abstractSerializedData);
            super.notify_settings.serializeToStream(abstractSerializedData);
            super.exported_invite.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.bot_info.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                super.bot_info.get(i).serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x10) != 0x0) {
                abstractSerializedData.writeInt32(super.migrated_from_chat_id);
            }
            if ((super.flags & 0x10) != 0x0) {
                abstractSerializedData.writeInt32(super.migrated_from_max_id);
            }
            if ((super.flags & 0x20) != 0x0) {
                abstractSerializedData.writeInt32(super.pinned_msg_id);
            }
            if ((super.flags & 0x100) != 0x0) {
                super.stickerset.serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_channelFull_layer72 extends TL_channelFull
    {
        public static int constructor = 1991201921;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            int i = 0;
            super.can_view_participants = ((flags & 0x8) != 0x0);
            super.can_set_username = ((super.flags & 0x40) != 0x0);
            super.can_set_stickers = ((super.flags & 0x80) != 0x0);
            super.hidden_prehistory = ((super.flags & 0x400) != 0x0);
            super.id = abstractSerializedData.readInt32(b);
            super.about = abstractSerializedData.readString(b);
            if ((super.flags & 0x1) != 0x0) {
                super.participants_count = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x2) != 0x0) {
                super.admins_count = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x4) != 0x0) {
                super.kicked_count = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x4) != 0x0) {
                super.banned_count = abstractSerializedData.readInt32(b);
            }
            super.read_inbox_max_id = abstractSerializedData.readInt32(b);
            super.read_outbox_max_id = abstractSerializedData.readInt32(b);
            super.unread_count = abstractSerializedData.readInt32(b);
            super.chat_photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.notify_settings = PeerNotifySettings.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.exported_invite = ExportedChatInvite.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            final int int32 = abstractSerializedData.readInt32(b);
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final BotInfo tLdeserialize = BotInfo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.bot_info.add(tLdeserialize);
                    ++i;
                }
                if ((super.flags & 0x10) != 0x0) {
                    super.migrated_from_chat_id = abstractSerializedData.readInt32(b);
                }
                if ((super.flags & 0x10) != 0x0) {
                    super.migrated_from_max_id = abstractSerializedData.readInt32(b);
                }
                if ((super.flags & 0x20) != 0x0) {
                    super.pinned_msg_id = abstractSerializedData.readInt32(b);
                }
                if ((super.flags & 0x100) != 0x0) {
                    super.stickerset = StickerSet.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                }
                if ((super.flags & 0x200) != 0x0) {
                    super.available_min_id = abstractSerializedData.readInt32(b);
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channelFull_layer72.constructor);
            int flags;
            if (super.can_view_participants) {
                flags = (super.flags | 0x8);
            }
            else {
                flags = (super.flags & 0xFFFFFFF7);
            }
            super.flags = flags;
            int flags2;
            if (super.can_set_username) {
                flags2 = (super.flags | 0x40);
            }
            else {
                flags2 = (super.flags & 0xFFFFFFBF);
            }
            super.flags = flags2;
            int flags3;
            if (super.can_set_stickers) {
                flags3 = (super.flags | 0x80);
            }
            else {
                flags3 = (super.flags & 0xFFFFFF7F);
            }
            super.flags = flags3;
            int flags4;
            if (super.hidden_prehistory) {
                flags4 = (super.flags | 0x400);
            }
            else {
                flags4 = (super.flags & 0xFFFFFBFF);
            }
            abstractSerializedData.writeInt32(super.flags = flags4);
            abstractSerializedData.writeInt32(super.id);
            abstractSerializedData.writeString(super.about);
            if ((super.flags & 0x1) != 0x0) {
                abstractSerializedData.writeInt32(super.participants_count);
            }
            if ((super.flags & 0x2) != 0x0) {
                abstractSerializedData.writeInt32(super.admins_count);
            }
            if ((super.flags & 0x4) != 0x0) {
                abstractSerializedData.writeInt32(super.kicked_count);
            }
            if ((super.flags & 0x4) != 0x0) {
                abstractSerializedData.writeInt32(super.banned_count);
            }
            abstractSerializedData.writeInt32(super.read_inbox_max_id);
            abstractSerializedData.writeInt32(super.read_outbox_max_id);
            abstractSerializedData.writeInt32(super.unread_count);
            super.chat_photo.serializeToStream(abstractSerializedData);
            super.notify_settings.serializeToStream(abstractSerializedData);
            super.exported_invite.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.bot_info.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                super.bot_info.get(i).serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x10) != 0x0) {
                abstractSerializedData.writeInt32(super.migrated_from_chat_id);
            }
            if ((super.flags & 0x10) != 0x0) {
                abstractSerializedData.writeInt32(super.migrated_from_max_id);
            }
            if ((super.flags & 0x20) != 0x0) {
                abstractSerializedData.writeInt32(super.pinned_msg_id);
            }
            if ((super.flags & 0x100) != 0x0) {
                super.stickerset.serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x200) != 0x0) {
                abstractSerializedData.writeInt32(super.available_min_id);
            }
        }
    }
    
    public static class TL_channelFull_layer89 extends TL_channelFull
    {
        public static int constructor = -877254512;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            int i = 0;
            super.can_view_participants = ((flags & 0x8) != 0x0);
            super.can_set_username = ((super.flags & 0x40) != 0x0);
            super.can_set_stickers = ((super.flags & 0x80) != 0x0);
            super.hidden_prehistory = ((super.flags & 0x400) != 0x0);
            super.id = abstractSerializedData.readInt32(b);
            super.about = abstractSerializedData.readString(b);
            if ((super.flags & 0x1) != 0x0) {
                super.participants_count = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x2) != 0x0) {
                super.admins_count = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x4) != 0x0) {
                super.kicked_count = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x4) != 0x0) {
                super.banned_count = abstractSerializedData.readInt32(b);
            }
            super.read_inbox_max_id = abstractSerializedData.readInt32(b);
            super.read_outbox_max_id = abstractSerializedData.readInt32(b);
            super.unread_count = abstractSerializedData.readInt32(b);
            super.chat_photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.notify_settings = PeerNotifySettings.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.exported_invite = ExportedChatInvite.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            final int int32 = abstractSerializedData.readInt32(b);
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final BotInfo tLdeserialize = BotInfo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.bot_info.add(tLdeserialize);
                    ++i;
                }
                if ((super.flags & 0x10) != 0x0) {
                    super.migrated_from_chat_id = abstractSerializedData.readInt32(b);
                }
                if ((super.flags & 0x10) != 0x0) {
                    super.migrated_from_max_id = abstractSerializedData.readInt32(b);
                }
                if ((super.flags & 0x20) != 0x0) {
                    super.pinned_msg_id = abstractSerializedData.readInt32(b);
                }
                if ((super.flags & 0x100) != 0x0) {
                    super.stickerset = StickerSet.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                }
                if ((super.flags & 0x200) != 0x0) {
                    super.available_min_id = abstractSerializedData.readInt32(b);
                }
                if ((super.flags & 0x800) != 0x0) {
                    super.call_msg_id = abstractSerializedData.readInt32(b);
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channelFull_layer89.constructor);
            int flags;
            if (super.can_view_participants) {
                flags = (super.flags | 0x8);
            }
            else {
                flags = (super.flags & 0xFFFFFFF7);
            }
            super.flags = flags;
            int flags2;
            if (super.can_set_username) {
                flags2 = (super.flags | 0x40);
            }
            else {
                flags2 = (super.flags & 0xFFFFFFBF);
            }
            super.flags = flags2;
            int flags3;
            if (super.can_set_stickers) {
                flags3 = (super.flags | 0x80);
            }
            else {
                flags3 = (super.flags & 0xFFFFFF7F);
            }
            super.flags = flags3;
            int flags4;
            if (super.hidden_prehistory) {
                flags4 = (super.flags | 0x400);
            }
            else {
                flags4 = (super.flags & 0xFFFFFBFF);
            }
            abstractSerializedData.writeInt32(super.flags = flags4);
            abstractSerializedData.writeInt32(super.id);
            abstractSerializedData.writeString(super.about);
            if ((super.flags & 0x1) != 0x0) {
                abstractSerializedData.writeInt32(super.participants_count);
            }
            if ((super.flags & 0x2) != 0x0) {
                abstractSerializedData.writeInt32(super.admins_count);
            }
            if ((super.flags & 0x4) != 0x0) {
                abstractSerializedData.writeInt32(super.kicked_count);
            }
            if ((super.flags & 0x4) != 0x0) {
                abstractSerializedData.writeInt32(super.banned_count);
            }
            abstractSerializedData.writeInt32(super.read_inbox_max_id);
            abstractSerializedData.writeInt32(super.read_outbox_max_id);
            abstractSerializedData.writeInt32(super.unread_count);
            super.chat_photo.serializeToStream(abstractSerializedData);
            super.notify_settings.serializeToStream(abstractSerializedData);
            super.exported_invite.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.bot_info.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                super.bot_info.get(i).serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x10) != 0x0) {
                abstractSerializedData.writeInt32(super.migrated_from_chat_id);
            }
            if ((super.flags & 0x10) != 0x0) {
                abstractSerializedData.writeInt32(super.migrated_from_max_id);
            }
            if ((super.flags & 0x20) != 0x0) {
                abstractSerializedData.writeInt32(super.pinned_msg_id);
            }
            if ((super.flags & 0x100) != 0x0) {
                super.stickerset.serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x200) != 0x0) {
                abstractSerializedData.writeInt32(super.available_min_id);
            }
            if ((super.flags & 0x800) != 0x0) {
                abstractSerializedData.writeInt32(super.call_msg_id);
            }
        }
    }
    
    public static class TL_channelFull_layer98 extends TL_channelFull
    {
        public static int constructor = 478652186;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            int i = 0;
            super.can_view_participants = ((flags & 0x8) != 0x0);
            super.can_set_username = ((super.flags & 0x40) != 0x0);
            super.can_set_stickers = ((super.flags & 0x80) != 0x0);
            super.hidden_prehistory = ((super.flags & 0x400) != 0x0);
            super.can_view_stats = ((super.flags & 0x1000) != 0x0);
            super.id = abstractSerializedData.readInt32(b);
            super.about = abstractSerializedData.readString(b);
            if ((super.flags & 0x1) != 0x0) {
                super.participants_count = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x2) != 0x0) {
                super.admins_count = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x4) != 0x0) {
                super.kicked_count = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x4) != 0x0) {
                super.banned_count = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x2000) != 0x0) {
                super.online_count = abstractSerializedData.readInt32(b);
            }
            super.read_inbox_max_id = abstractSerializedData.readInt32(b);
            super.read_outbox_max_id = abstractSerializedData.readInt32(b);
            super.unread_count = abstractSerializedData.readInt32(b);
            super.chat_photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.notify_settings = PeerNotifySettings.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.exported_invite = ExportedChatInvite.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            final int int32 = abstractSerializedData.readInt32(b);
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final BotInfo tLdeserialize = BotInfo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.bot_info.add(tLdeserialize);
                    ++i;
                }
                if ((super.flags & 0x10) != 0x0) {
                    super.migrated_from_chat_id = abstractSerializedData.readInt32(b);
                }
                if ((super.flags & 0x10) != 0x0) {
                    super.migrated_from_max_id = abstractSerializedData.readInt32(b);
                }
                if ((super.flags & 0x20) != 0x0) {
                    super.pinned_msg_id = abstractSerializedData.readInt32(b);
                }
                if ((super.flags & 0x100) != 0x0) {
                    super.stickerset = StickerSet.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                }
                if ((super.flags & 0x200) != 0x0) {
                    super.available_min_id = abstractSerializedData.readInt32(b);
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channelFull_layer98.constructor);
            int flags;
            if (super.can_view_participants) {
                flags = (super.flags | 0x8);
            }
            else {
                flags = (super.flags & 0xFFFFFFF7);
            }
            super.flags = flags;
            int flags2;
            if (super.can_set_username) {
                flags2 = (super.flags | 0x40);
            }
            else {
                flags2 = (super.flags & 0xFFFFFFBF);
            }
            super.flags = flags2;
            int flags3;
            if (super.can_set_stickers) {
                flags3 = (super.flags | 0x80);
            }
            else {
                flags3 = (super.flags & 0xFFFFFF7F);
            }
            super.flags = flags3;
            int flags4;
            if (super.hidden_prehistory) {
                flags4 = (super.flags | 0x400);
            }
            else {
                flags4 = (super.flags & 0xFFFFFBFF);
            }
            super.flags = flags4;
            int flags5;
            if (super.can_view_stats) {
                flags5 = (super.flags | 0x1000);
            }
            else {
                flags5 = (super.flags & 0xFFFFEFFF);
            }
            abstractSerializedData.writeInt32(super.flags = flags5);
            abstractSerializedData.writeInt32(super.id);
            abstractSerializedData.writeString(super.about);
            if ((super.flags & 0x1) != 0x0) {
                abstractSerializedData.writeInt32(super.participants_count);
            }
            if ((super.flags & 0x2) != 0x0) {
                abstractSerializedData.writeInt32(super.admins_count);
            }
            if ((super.flags & 0x4) != 0x0) {
                abstractSerializedData.writeInt32(super.kicked_count);
            }
            if ((super.flags & 0x4) != 0x0) {
                abstractSerializedData.writeInt32(super.banned_count);
            }
            if ((super.flags & 0x2000) != 0x0) {
                abstractSerializedData.writeInt32(super.online_count);
            }
            abstractSerializedData.writeInt32(super.read_inbox_max_id);
            abstractSerializedData.writeInt32(super.read_outbox_max_id);
            abstractSerializedData.writeInt32(super.unread_count);
            super.chat_photo.serializeToStream(abstractSerializedData);
            super.notify_settings.serializeToStream(abstractSerializedData);
            super.exported_invite.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.bot_info.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                super.bot_info.get(i).serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x10) != 0x0) {
                abstractSerializedData.writeInt32(super.migrated_from_chat_id);
            }
            if ((super.flags & 0x10) != 0x0) {
                abstractSerializedData.writeInt32(super.migrated_from_max_id);
            }
            if ((super.flags & 0x20) != 0x0) {
                abstractSerializedData.writeInt32(super.pinned_msg_id);
            }
            if ((super.flags & 0x100) != 0x0) {
                super.stickerset.serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x200) != 0x0) {
                abstractSerializedData.writeInt32(super.available_min_id);
            }
        }
    }
    
    public static class TL_channelFull_layer99 extends TL_channelFull
    {
        public static int constructor = 56920439;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            int i = 0;
            super.can_view_participants = ((flags & 0x8) != 0x0);
            super.can_set_username = ((super.flags & 0x40) != 0x0);
            super.can_set_stickers = ((super.flags & 0x80) != 0x0);
            super.hidden_prehistory = ((super.flags & 0x400) != 0x0);
            super.can_view_stats = ((super.flags & 0x1000) != 0x0);
            super.id = abstractSerializedData.readInt32(b);
            super.about = abstractSerializedData.readString(b);
            if ((super.flags & 0x1) != 0x0) {
                super.participants_count = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x2) != 0x0) {
                super.admins_count = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x4) != 0x0) {
                super.kicked_count = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x4) != 0x0) {
                super.banned_count = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x2000) != 0x0) {
                super.online_count = abstractSerializedData.readInt32(b);
            }
            super.read_inbox_max_id = abstractSerializedData.readInt32(b);
            super.read_outbox_max_id = abstractSerializedData.readInt32(b);
            super.unread_count = abstractSerializedData.readInt32(b);
            super.chat_photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.notify_settings = PeerNotifySettings.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.exported_invite = ExportedChatInvite.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            final int int32 = abstractSerializedData.readInt32(b);
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final BotInfo tLdeserialize = BotInfo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.bot_info.add(tLdeserialize);
                    ++i;
                }
                if ((super.flags & 0x10) != 0x0) {
                    super.migrated_from_chat_id = abstractSerializedData.readInt32(b);
                }
                if ((super.flags & 0x10) != 0x0) {
                    super.migrated_from_max_id = abstractSerializedData.readInt32(b);
                }
                if ((super.flags & 0x20) != 0x0) {
                    super.pinned_msg_id = abstractSerializedData.readInt32(b);
                }
                if ((super.flags & 0x100) != 0x0) {
                    super.stickerset = StickerSet.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                }
                if ((super.flags & 0x200) != 0x0) {
                    super.available_min_id = abstractSerializedData.readInt32(b);
                }
                if ((super.flags & 0x800) != 0x0) {
                    super.folder_id = abstractSerializedData.readInt32(b);
                }
                super.pts = abstractSerializedData.readInt32(b);
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channelFull_layer99.constructor);
            int flags;
            if (super.can_view_participants) {
                flags = (super.flags | 0x8);
            }
            else {
                flags = (super.flags & 0xFFFFFFF7);
            }
            super.flags = flags;
            int flags2;
            if (super.can_set_username) {
                flags2 = (super.flags | 0x40);
            }
            else {
                flags2 = (super.flags & 0xFFFFFFBF);
            }
            super.flags = flags2;
            int flags3;
            if (super.can_set_stickers) {
                flags3 = (super.flags | 0x80);
            }
            else {
                flags3 = (super.flags & 0xFFFFFF7F);
            }
            super.flags = flags3;
            int flags4;
            if (super.hidden_prehistory) {
                flags4 = (super.flags | 0x400);
            }
            else {
                flags4 = (super.flags & 0xFFFFFBFF);
            }
            super.flags = flags4;
            int flags5;
            if (super.can_view_stats) {
                flags5 = (super.flags | 0x1000);
            }
            else {
                flags5 = (super.flags & 0xFFFFEFFF);
            }
            abstractSerializedData.writeInt32(super.flags = flags5);
            abstractSerializedData.writeInt32(super.id);
            abstractSerializedData.writeString(super.about);
            if ((super.flags & 0x1) != 0x0) {
                abstractSerializedData.writeInt32(super.participants_count);
            }
            if ((super.flags & 0x2) != 0x0) {
                abstractSerializedData.writeInt32(super.admins_count);
            }
            if ((super.flags & 0x4) != 0x0) {
                abstractSerializedData.writeInt32(super.kicked_count);
            }
            if ((super.flags & 0x4) != 0x0) {
                abstractSerializedData.writeInt32(super.banned_count);
            }
            if ((super.flags & 0x2000) != 0x0) {
                abstractSerializedData.writeInt32(super.online_count);
            }
            abstractSerializedData.writeInt32(super.read_inbox_max_id);
            abstractSerializedData.writeInt32(super.read_outbox_max_id);
            abstractSerializedData.writeInt32(super.unread_count);
            super.chat_photo.serializeToStream(abstractSerializedData);
            super.notify_settings.serializeToStream(abstractSerializedData);
            super.exported_invite.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.bot_info.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                super.bot_info.get(i).serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x10) != 0x0) {
                abstractSerializedData.writeInt32(super.migrated_from_chat_id);
            }
            if ((super.flags & 0x10) != 0x0) {
                abstractSerializedData.writeInt32(super.migrated_from_max_id);
            }
            if ((super.flags & 0x20) != 0x0) {
                abstractSerializedData.writeInt32(super.pinned_msg_id);
            }
            if ((super.flags & 0x100) != 0x0) {
                super.stickerset.serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x200) != 0x0) {
                abstractSerializedData.writeInt32(super.available_min_id);
            }
            if ((super.flags & 0x800) != 0x0) {
                abstractSerializedData.writeInt32(super.folder_id);
            }
            abstractSerializedData.writeInt32(super.pts);
        }
    }
    
    public static class TL_channelFull_old extends TL_channelFull
    {
        public static int constructor = -88925533;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            super.can_view_participants = ((super.flags & 0x8) != 0x0);
            super.id = abstractSerializedData.readInt32(b);
            super.about = abstractSerializedData.readString(b);
            if ((super.flags & 0x1) != 0x0) {
                super.participants_count = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x2) != 0x0) {
                super.admins_count = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x4) != 0x0) {
                super.kicked_count = abstractSerializedData.readInt32(b);
            }
            super.read_inbox_max_id = abstractSerializedData.readInt32(b);
            super.unread_count = abstractSerializedData.readInt32(b);
            super.unread_important_count = abstractSerializedData.readInt32(b);
            super.chat_photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.notify_settings = PeerNotifySettings.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.exported_invite = ExportedChatInvite.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channelFull_old.constructor);
            int flags;
            if (super.can_view_participants) {
                flags = (super.flags | 0x8);
            }
            else {
                flags = (super.flags & 0xFFFFFFF7);
            }
            abstractSerializedData.writeInt32(super.flags = flags);
            abstractSerializedData.writeInt32(super.id);
            abstractSerializedData.writeString(super.about);
            if ((super.flags & 0x1) != 0x0) {
                abstractSerializedData.writeInt32(super.participants_count);
            }
            if ((super.flags & 0x2) != 0x0) {
                abstractSerializedData.writeInt32(super.admins_count);
            }
            if ((super.flags & 0x4) != 0x0) {
                abstractSerializedData.writeInt32(super.kicked_count);
            }
            abstractSerializedData.writeInt32(super.read_inbox_max_id);
            abstractSerializedData.writeInt32(super.unread_count);
            abstractSerializedData.writeInt32(super.unread_important_count);
            super.chat_photo.serializeToStream(abstractSerializedData);
            super.notify_settings.serializeToStream(abstractSerializedData);
            super.exported_invite.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_channelMessagesFilter extends ChannelMessagesFilter
    {
        public static int constructor = -847783593;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            int i = 0;
            super.exclude_new_messages = ((flags & 0x2) != 0x0);
            final int int32 = abstractSerializedData.readInt32(b);
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final TL_messageRange tLdeserialize = TL_messageRange.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.ranges.add(tLdeserialize);
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channelMessagesFilter.constructor);
            int flags;
            if (super.exclude_new_messages) {
                flags = (super.flags | 0x2);
            }
            else {
                flags = (super.flags & 0xFFFFFFFD);
            }
            abstractSerializedData.writeInt32(super.flags = flags);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.ranges.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                super.ranges.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_channelMessagesFilterEmpty extends ChannelMessagesFilter
    {
        public static int constructor = -1798033689;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channelMessagesFilterEmpty.constructor);
        }
    }
    
    public static class TL_channelParticipant extends ChannelParticipant
    {
        public static int constructor = 367766557;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.user_id = abstractSerializedData.readInt32(b);
            super.date = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channelParticipant.constructor);
            abstractSerializedData.writeInt32(super.user_id);
            abstractSerializedData.writeInt32(super.date);
        }
    }
    
    public static class TL_channelParticipantAdmin extends ChannelParticipant
    {
        public static int constructor = 1571450403;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            final boolean b2 = true;
            super.can_edit = ((flags & 0x1) != 0x0);
            super.self = ((super.flags & 0x2) != 0x0 && b2);
            super.user_id = abstractSerializedData.readInt32(b);
            if ((super.flags & 0x2) != 0x0) {
                super.inviter_id = abstractSerializedData.readInt32(b);
            }
            super.promoted_by = abstractSerializedData.readInt32(b);
            super.date = abstractSerializedData.readInt32(b);
            super.admin_rights = TL_chatAdminRights.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channelParticipantAdmin.constructor);
            int flags;
            if (super.can_edit) {
                flags = (super.flags | 0x1);
            }
            else {
                flags = (super.flags & 0xFFFFFFFE);
            }
            super.flags = flags;
            int flags2;
            if (super.self) {
                flags2 = (super.flags | 0x2);
            }
            else {
                flags2 = (super.flags & 0xFFFFFFFD);
            }
            abstractSerializedData.writeInt32(super.flags = flags2);
            abstractSerializedData.writeInt32(super.user_id);
            if ((super.flags & 0x2) != 0x0) {
                abstractSerializedData.writeInt32(super.inviter_id);
            }
            abstractSerializedData.writeInt32(super.promoted_by);
            abstractSerializedData.writeInt32(super.date);
            super.admin_rights.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_channelParticipantAdmin_layer92 extends TL_channelParticipantAdmin
    {
        public static int constructor = -1473271656;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            boolean can_edit = true;
            if ((flags & 0x1) == 0x0) {
                can_edit = false;
            }
            super.can_edit = can_edit;
            super.user_id = abstractSerializedData.readInt32(b);
            super.inviter_id = abstractSerializedData.readInt32(b);
            super.promoted_by = abstractSerializedData.readInt32(b);
            super.date = abstractSerializedData.readInt32(b);
            super.admin_rights_layer92 = TL_channelAdminRights_layer92.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.admin_rights = Chat.mergeAdminRights(super.admin_rights_layer92);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channelParticipantAdmin_layer92.constructor);
            int flags;
            if (super.can_edit) {
                flags = (super.flags | 0x1);
            }
            else {
                flags = (super.flags & 0xFFFFFFFE);
            }
            abstractSerializedData.writeInt32(super.flags = flags);
            abstractSerializedData.writeInt32(super.user_id);
            abstractSerializedData.writeInt32(super.inviter_id);
            abstractSerializedData.writeInt32(super.promoted_by);
            abstractSerializedData.writeInt32(super.date);
            super.admin_rights_layer92.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_channelParticipantBanned extends ChannelParticipant
    {
        public static int constructor = 470789295;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            boolean left = true;
            if ((flags & 0x1) == 0x0) {
                left = false;
            }
            super.left = left;
            super.user_id = abstractSerializedData.readInt32(b);
            super.kicked_by = abstractSerializedData.readInt32(b);
            super.date = abstractSerializedData.readInt32(b);
            super.banned_rights = TL_chatBannedRights.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channelParticipantBanned.constructor);
            int flags;
            if (super.left) {
                flags = (super.flags | 0x1);
            }
            else {
                flags = (super.flags & 0xFFFFFFFE);
            }
            abstractSerializedData.writeInt32(super.flags = flags);
            abstractSerializedData.writeInt32(super.user_id);
            abstractSerializedData.writeInt32(super.kicked_by);
            abstractSerializedData.writeInt32(super.date);
            super.banned_rights.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_channelParticipantBanned_layer92 extends TL_channelParticipantBanned
    {
        public static int constructor = 573315206;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            boolean left = true;
            if ((flags & 0x1) == 0x0) {
                left = false;
            }
            super.left = left;
            super.user_id = abstractSerializedData.readInt32(b);
            super.kicked_by = abstractSerializedData.readInt32(b);
            super.date = abstractSerializedData.readInt32(b);
            super.banned_rights_layer92 = TL_channelBannedRights_layer92.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.banned_rights = Chat.mergeBannedRights(super.banned_rights_layer92);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channelParticipantBanned_layer92.constructor);
            int flags;
            if (super.left) {
                flags = (super.flags | 0x1);
            }
            else {
                flags = (super.flags & 0xFFFFFFFE);
            }
            abstractSerializedData.writeInt32(super.flags = flags);
            abstractSerializedData.writeInt32(super.user_id);
            abstractSerializedData.writeInt32(super.kicked_by);
            abstractSerializedData.writeInt32(super.date);
            super.banned_rights_layer92.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_channelParticipantCreator extends ChannelParticipant
    {
        public static int constructor = -471670279;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.user_id = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channelParticipantCreator.constructor);
            abstractSerializedData.writeInt32(super.user_id);
        }
    }
    
    public static class TL_channelParticipantEditor_layer67 extends TL_channelParticipantAdmin
    {
        public static int constructor = -1743180447;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.user_id = abstractSerializedData.readInt32(b);
            super.inviter_id = abstractSerializedData.readInt32(b);
            super.date = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channelParticipantEditor_layer67.constructor);
            abstractSerializedData.writeInt32(super.user_id);
            abstractSerializedData.writeInt32(super.inviter_id);
            abstractSerializedData.writeInt32(super.date);
        }
    }
    
    public static class TL_channelParticipantKicked_layer67 extends ChannelParticipant
    {
        public static int constructor = -1933187430;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.user_id = abstractSerializedData.readInt32(b);
            super.kicked_by = abstractSerializedData.readInt32(b);
            super.date = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channelParticipantKicked_layer67.constructor);
            abstractSerializedData.writeInt32(super.user_id);
            abstractSerializedData.writeInt32(super.kicked_by);
            abstractSerializedData.writeInt32(super.date);
        }
    }
    
    public static class TL_channelParticipantModerator_layer67 extends TL_channelParticipantAdmin
    {
        public static int constructor = -1861910545;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.user_id = abstractSerializedData.readInt32(b);
            super.inviter_id = abstractSerializedData.readInt32(b);
            super.date = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channelParticipantModerator_layer67.constructor);
            abstractSerializedData.writeInt32(super.user_id);
            abstractSerializedData.writeInt32(super.inviter_id);
            abstractSerializedData.writeInt32(super.date);
        }
    }
    
    public static class TL_channelParticipantSelf extends ChannelParticipant
    {
        public static int constructor = -1557620115;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.user_id = abstractSerializedData.readInt32(b);
            super.inviter_id = abstractSerializedData.readInt32(b);
            super.date = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channelParticipantSelf.constructor);
            abstractSerializedData.writeInt32(super.user_id);
            abstractSerializedData.writeInt32(super.inviter_id);
            abstractSerializedData.writeInt32(super.date);
        }
    }
    
    public static class TL_channelParticipantsAdmins extends ChannelParticipantsFilter
    {
        public static int constructor = -1268741783;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channelParticipantsAdmins.constructor);
        }
    }
    
    public static class TL_channelParticipantsBanned extends ChannelParticipantsFilter
    {
        public static int constructor = 338142689;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.q = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channelParticipantsBanned.constructor);
            abstractSerializedData.writeString(super.q);
        }
    }
    
    public static class TL_channelParticipantsBots extends ChannelParticipantsFilter
    {
        public static int constructor = -1328445861;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channelParticipantsBots.constructor);
        }
    }
    
    public static class TL_channelParticipantsContacts extends ChannelParticipantsFilter
    {
        public static int constructor = -1150621555;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.q = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channelParticipantsContacts.constructor);
            abstractSerializedData.writeString(super.q);
        }
    }
    
    public static class TL_channelParticipantsKicked extends ChannelParticipantsFilter
    {
        public static int constructor = -1548400251;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.q = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channelParticipantsKicked.constructor);
            abstractSerializedData.writeString(super.q);
        }
    }
    
    public static class TL_channelParticipantsRecent extends ChannelParticipantsFilter
    {
        public static int constructor = -566281095;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channelParticipantsRecent.constructor);
        }
    }
    
    public static class TL_channelParticipantsSearch extends ChannelParticipantsFilter
    {
        public static int constructor = 106343499;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.q = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channelParticipantsSearch.constructor);
            abstractSerializedData.writeString(super.q);
        }
    }
    
    public static class TL_channel_layer48 extends TL_channel
    {
        public static int constructor = 1260090630;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            final boolean b2 = true;
            super.creator = ((flags & 0x1) != 0x0);
            super.kicked = ((super.flags & 0x2) != 0x0);
            super.left = ((super.flags & 0x4) != 0x0);
            super.moderator = ((super.flags & 0x10) != 0x0);
            super.broadcast = ((super.flags & 0x20) != 0x0);
            super.verified = ((super.flags & 0x80) != 0x0);
            super.megagroup = ((super.flags & 0x100) != 0x0);
            super.restricted = ((super.flags & 0x200) != 0x0);
            super.signatures = ((super.flags & 0x800) != 0x0 && b2);
            super.id = abstractSerializedData.readInt32(b);
            super.access_hash = abstractSerializedData.readInt64(b);
            super.title = abstractSerializedData.readString(b);
            if ((super.flags & 0x40) != 0x0) {
                super.username = abstractSerializedData.readString(b);
            }
            super.photo = ChatPhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.date = abstractSerializedData.readInt32(b);
            super.version = abstractSerializedData.readInt32(b);
            if ((super.flags & 0x200) != 0x0) {
                super.restriction_reason = abstractSerializedData.readString(b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channel_layer48.constructor);
            int flags;
            if (super.creator) {
                flags = (super.flags | 0x1);
            }
            else {
                flags = (super.flags & 0xFFFFFFFE);
            }
            super.flags = flags;
            int flags2;
            if (super.kicked) {
                flags2 = (super.flags | 0x2);
            }
            else {
                flags2 = (super.flags & 0xFFFFFFFD);
            }
            super.flags = flags2;
            int flags3;
            if (super.left) {
                flags3 = (super.flags | 0x4);
            }
            else {
                flags3 = (super.flags & 0xFFFFFFFB);
            }
            super.flags = flags3;
            int flags4;
            if (super.moderator) {
                flags4 = (super.flags | 0x10);
            }
            else {
                flags4 = (super.flags & 0xFFFFFFEF);
            }
            super.flags = flags4;
            int flags5;
            if (super.broadcast) {
                flags5 = (super.flags | 0x20);
            }
            else {
                flags5 = (super.flags & 0xFFFFFFDF);
            }
            super.flags = flags5;
            int flags6;
            if (super.verified) {
                flags6 = (super.flags | 0x80);
            }
            else {
                flags6 = (super.flags & 0xFFFFFF7F);
            }
            super.flags = flags6;
            int flags7;
            if (super.megagroup) {
                flags7 = (super.flags | 0x100);
            }
            else {
                flags7 = (super.flags & 0xFFFFFEFF);
            }
            super.flags = flags7;
            int flags8;
            if (super.restricted) {
                flags8 = (super.flags | 0x200);
            }
            else {
                flags8 = (super.flags & 0xFFFFFDFF);
            }
            super.flags = flags8;
            int flags9;
            if (super.signatures) {
                flags9 = (super.flags | 0x800);
            }
            else {
                flags9 = (super.flags & 0xFFFFF7FF);
            }
            abstractSerializedData.writeInt32(super.flags = flags9);
            abstractSerializedData.writeInt32(super.id);
            abstractSerializedData.writeInt64(super.access_hash);
            abstractSerializedData.writeString(super.title);
            if ((super.flags & 0x40) != 0x0) {
                abstractSerializedData.writeString(super.username);
            }
            super.photo.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(super.date);
            abstractSerializedData.writeInt32(super.version);
            if ((super.flags & 0x200) != 0x0) {
                abstractSerializedData.writeString(super.restriction_reason);
            }
        }
    }
    
    public static class TL_channel_layer67 extends TL_channel
    {
        public static int constructor = -1588737454;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            final boolean b2 = true;
            super.creator = ((flags & 0x1) != 0x0);
            super.kicked = ((super.flags & 0x2) != 0x0);
            super.left = ((super.flags & 0x4) != 0x0);
            super.moderator = ((super.flags & 0x10) != 0x0);
            super.broadcast = ((super.flags & 0x20) != 0x0);
            super.verified = ((super.flags & 0x80) != 0x0);
            super.megagroup = ((super.flags & 0x100) != 0x0);
            super.restricted = ((super.flags & 0x200) != 0x0);
            super.signatures = ((super.flags & 0x800) != 0x0);
            super.min = ((super.flags & 0x1000) != 0x0 && b2);
            super.id = abstractSerializedData.readInt32(b);
            if ((super.flags & 0x2000) != 0x0) {
                super.access_hash = abstractSerializedData.readInt64(b);
            }
            super.title = abstractSerializedData.readString(b);
            if ((super.flags & 0x40) != 0x0) {
                super.username = abstractSerializedData.readString(b);
            }
            super.photo = ChatPhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.date = abstractSerializedData.readInt32(b);
            super.version = abstractSerializedData.readInt32(b);
            if ((super.flags & 0x200) != 0x0) {
                super.restriction_reason = abstractSerializedData.readString(b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channel_layer67.constructor);
            int flags;
            if (super.creator) {
                flags = (super.flags | 0x1);
            }
            else {
                flags = (super.flags & 0xFFFFFFFE);
            }
            super.flags = flags;
            int flags2;
            if (super.kicked) {
                flags2 = (super.flags | 0x2);
            }
            else {
                flags2 = (super.flags & 0xFFFFFFFD);
            }
            super.flags = flags2;
            int flags3;
            if (super.left) {
                flags3 = (super.flags | 0x4);
            }
            else {
                flags3 = (super.flags & 0xFFFFFFFB);
            }
            super.flags = flags3;
            int flags4;
            if (super.moderator) {
                flags4 = (super.flags | 0x10);
            }
            else {
                flags4 = (super.flags & 0xFFFFFFEF);
            }
            super.flags = flags4;
            int flags5;
            if (super.broadcast) {
                flags5 = (super.flags | 0x20);
            }
            else {
                flags5 = (super.flags & 0xFFFFFFDF);
            }
            super.flags = flags5;
            int flags6;
            if (super.verified) {
                flags6 = (super.flags | 0x80);
            }
            else {
                flags6 = (super.flags & 0xFFFFFF7F);
            }
            super.flags = flags6;
            int flags7;
            if (super.megagroup) {
                flags7 = (super.flags | 0x100);
            }
            else {
                flags7 = (super.flags & 0xFFFFFEFF);
            }
            super.flags = flags7;
            int flags8;
            if (super.restricted) {
                flags8 = (super.flags | 0x200);
            }
            else {
                flags8 = (super.flags & 0xFFFFFDFF);
            }
            super.flags = flags8;
            int flags9;
            if (super.signatures) {
                flags9 = (super.flags | 0x800);
            }
            else {
                flags9 = (super.flags & 0xFFFFF7FF);
            }
            super.flags = flags9;
            int flags10;
            if (super.min) {
                flags10 = (super.flags | 0x1000);
            }
            else {
                flags10 = (super.flags & 0xFFFFEFFF);
            }
            abstractSerializedData.writeInt32(super.flags = flags10);
            abstractSerializedData.writeInt32(super.id);
            if ((super.flags & 0x2000) != 0x0) {
                abstractSerializedData.writeInt64(super.access_hash);
            }
            abstractSerializedData.writeString(super.title);
            if ((super.flags & 0x40) != 0x0) {
                abstractSerializedData.writeString(super.username);
            }
            super.photo.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(super.date);
            abstractSerializedData.writeInt32(super.version);
            if ((super.flags & 0x200) != 0x0) {
                abstractSerializedData.writeString(super.restriction_reason);
            }
        }
    }
    
    public static class TL_channel_layer72 extends TL_channel
    {
        public static int constructor = 213142300;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            final boolean b2 = true;
            super.creator = ((flags & 0x1) != 0x0);
            super.left = ((super.flags & 0x4) != 0x0);
            super.broadcast = ((super.flags & 0x20) != 0x0);
            super.verified = ((super.flags & 0x80) != 0x0);
            super.megagroup = ((super.flags & 0x100) != 0x0);
            super.restricted = ((super.flags & 0x200) != 0x0);
            super.signatures = ((super.flags & 0x800) != 0x0);
            super.min = ((super.flags & 0x1000) != 0x0 && b2);
            super.id = abstractSerializedData.readInt32(b);
            if ((super.flags & 0x2000) != 0x0) {
                super.access_hash = abstractSerializedData.readInt64(b);
            }
            super.title = abstractSerializedData.readString(b);
            if ((super.flags & 0x40) != 0x0) {
                super.username = abstractSerializedData.readString(b);
            }
            super.photo = ChatPhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.date = abstractSerializedData.readInt32(b);
            super.version = abstractSerializedData.readInt32(b);
            if ((super.flags & 0x200) != 0x0) {
                super.restriction_reason = abstractSerializedData.readString(b);
            }
            if ((super.flags & 0x4000) != 0x0) {
                super.admin_rights_layer92 = TL_channelAdminRights_layer92.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                super.admin_rights = Chat.mergeAdminRights(super.admin_rights_layer92);
            }
            if ((super.flags & 0x8000) != 0x0) {
                super.banned_rights_layer92 = TL_channelBannedRights_layer92.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                super.banned_rights = Chat.mergeBannedRights(super.banned_rights_layer92);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channel_layer72.constructor);
            int flags;
            if (super.creator) {
                flags = (super.flags | 0x1);
            }
            else {
                flags = (super.flags & 0xFFFFFFFE);
            }
            super.flags = flags;
            int flags2;
            if (super.kicked) {
                flags2 = (super.flags | 0x2);
            }
            else {
                flags2 = (super.flags & 0xFFFFFFFD);
            }
            super.flags = flags2;
            int flags3;
            if (super.left) {
                flags3 = (super.flags | 0x4);
            }
            else {
                flags3 = (super.flags & 0xFFFFFFFB);
            }
            super.flags = flags3;
            int flags4;
            if (super.broadcast) {
                flags4 = (super.flags | 0x20);
            }
            else {
                flags4 = (super.flags & 0xFFFFFFDF);
            }
            super.flags = flags4;
            int flags5;
            if (super.verified) {
                flags5 = (super.flags | 0x80);
            }
            else {
                flags5 = (super.flags & 0xFFFFFF7F);
            }
            super.flags = flags5;
            int flags6;
            if (super.megagroup) {
                flags6 = (super.flags | 0x100);
            }
            else {
                flags6 = (super.flags & 0xFFFFFEFF);
            }
            super.flags = flags6;
            int flags7;
            if (super.restricted) {
                flags7 = (super.flags | 0x200);
            }
            else {
                flags7 = (super.flags & 0xFFFFFDFF);
            }
            super.flags = flags7;
            int flags8;
            if (super.signatures) {
                flags8 = (super.flags | 0x800);
            }
            else {
                flags8 = (super.flags & 0xFFFFF7FF);
            }
            super.flags = flags8;
            int flags9;
            if (super.min) {
                flags9 = (super.flags | 0x1000);
            }
            else {
                flags9 = (super.flags & 0xFFFFEFFF);
            }
            abstractSerializedData.writeInt32(super.flags = flags9);
            abstractSerializedData.writeInt32(super.id);
            if ((super.flags & 0x2000) != 0x0) {
                abstractSerializedData.writeInt64(super.access_hash);
            }
            abstractSerializedData.writeString(super.title);
            if ((super.flags & 0x40) != 0x0) {
                abstractSerializedData.writeString(super.username);
            }
            super.photo.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(super.date);
            abstractSerializedData.writeInt32(super.version);
            if ((super.flags & 0x200) != 0x0) {
                abstractSerializedData.writeString(super.restriction_reason);
            }
            if ((super.flags & 0x4000) != 0x0) {
                super.admin_rights_layer92.serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x8000) != 0x0) {
                super.banned_rights_layer92.serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_channel_layer77 extends TL_channel
    {
        public static int constructor = 1158377749;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            final boolean b2 = true;
            super.creator = ((flags & 0x1) != 0x0);
            super.left = ((super.flags & 0x4) != 0x0);
            super.broadcast = ((super.flags & 0x20) != 0x0);
            super.verified = ((super.flags & 0x80) != 0x0);
            super.megagroup = ((super.flags & 0x100) != 0x0);
            super.restricted = ((super.flags & 0x200) != 0x0);
            super.signatures = ((super.flags & 0x800) != 0x0);
            super.min = ((super.flags & 0x1000) != 0x0 && b2);
            super.id = abstractSerializedData.readInt32(b);
            if ((super.flags & 0x2000) != 0x0) {
                super.access_hash = abstractSerializedData.readInt64(b);
            }
            super.title = abstractSerializedData.readString(b);
            if ((super.flags & 0x40) != 0x0) {
                super.username = abstractSerializedData.readString(b);
            }
            super.photo = ChatPhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.date = abstractSerializedData.readInt32(b);
            super.version = abstractSerializedData.readInt32(b);
            if ((super.flags & 0x200) != 0x0) {
                super.restriction_reason = abstractSerializedData.readString(b);
            }
            if ((super.flags & 0x4000) != 0x0) {
                super.admin_rights_layer92 = TL_channelAdminRights_layer92.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                super.admin_rights = Chat.mergeAdminRights(super.admin_rights_layer92);
            }
            if ((super.flags & 0x8000) != 0x0) {
                super.banned_rights_layer92 = TL_channelBannedRights_layer92.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                super.banned_rights = Chat.mergeBannedRights(super.banned_rights_layer92);
            }
            if ((super.flags & 0x20000) != 0x0) {
                super.participants_count = abstractSerializedData.readInt32(b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channel_layer77.constructor);
            int flags;
            if (super.creator) {
                flags = (super.flags | 0x1);
            }
            else {
                flags = (super.flags & 0xFFFFFFFE);
            }
            super.flags = flags;
            int flags2;
            if (super.left) {
                flags2 = (super.flags | 0x4);
            }
            else {
                flags2 = (super.flags & 0xFFFFFFFB);
            }
            super.flags = flags2;
            int flags3;
            if (super.broadcast) {
                flags3 = (super.flags | 0x20);
            }
            else {
                flags3 = (super.flags & 0xFFFFFFDF);
            }
            super.flags = flags3;
            int flags4;
            if (super.verified) {
                flags4 = (super.flags | 0x80);
            }
            else {
                flags4 = (super.flags & 0xFFFFFF7F);
            }
            super.flags = flags4;
            int flags5;
            if (super.megagroup) {
                flags5 = (super.flags | 0x100);
            }
            else {
                flags5 = (super.flags & 0xFFFFFEFF);
            }
            super.flags = flags5;
            int flags6;
            if (super.restricted) {
                flags6 = (super.flags | 0x200);
            }
            else {
                flags6 = (super.flags & 0xFFFFFDFF);
            }
            super.flags = flags6;
            int flags7;
            if (super.signatures) {
                flags7 = (super.flags | 0x800);
            }
            else {
                flags7 = (super.flags & 0xFFFFF7FF);
            }
            super.flags = flags7;
            int flags8;
            if (super.min) {
                flags8 = (super.flags | 0x1000);
            }
            else {
                flags8 = (super.flags & 0xFFFFEFFF);
            }
            abstractSerializedData.writeInt32(super.flags = flags8);
            abstractSerializedData.writeInt32(super.id);
            if ((super.flags & 0x2000) != 0x0) {
                abstractSerializedData.writeInt64(super.access_hash);
            }
            abstractSerializedData.writeString(super.title);
            if ((super.flags & 0x40) != 0x0) {
                abstractSerializedData.writeString(super.username);
            }
            super.photo.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(super.date);
            abstractSerializedData.writeInt32(super.version);
            if ((super.flags & 0x200) != 0x0) {
                abstractSerializedData.writeString(super.restriction_reason);
            }
            if ((super.flags & 0x4000) != 0x0) {
                super.admin_rights_layer92.serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x8000) != 0x0) {
                super.banned_rights_layer92.serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x20000) != 0x0) {
                abstractSerializedData.writeInt32(super.participants_count);
            }
        }
    }
    
    public static class TL_channel_layer92 extends TL_channel
    {
        public static int constructor = -930515796;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            final boolean b2 = true;
            super.creator = ((flags & 0x1) != 0x0);
            super.left = ((super.flags & 0x4) != 0x0);
            super.broadcast = ((super.flags & 0x20) != 0x0);
            super.verified = ((super.flags & 0x80) != 0x0);
            super.megagroup = ((super.flags & 0x100) != 0x0);
            super.restricted = ((super.flags & 0x200) != 0x0);
            super.signatures = ((super.flags & 0x800) != 0x0);
            super.min = ((super.flags & 0x1000) != 0x0 && b2);
            super.id = abstractSerializedData.readInt32(b);
            if ((super.flags & 0x2000) != 0x0) {
                super.access_hash = abstractSerializedData.readInt64(b);
            }
            super.title = abstractSerializedData.readString(b);
            if ((super.flags & 0x40) != 0x0) {
                super.username = abstractSerializedData.readString(b);
            }
            super.photo = ChatPhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.date = abstractSerializedData.readInt32(b);
            super.version = abstractSerializedData.readInt32(b);
            if ((super.flags & 0x200) != 0x0) {
                super.restriction_reason = abstractSerializedData.readString(b);
            }
            if ((super.flags & 0x4000) != 0x0) {
                super.admin_rights_layer92 = TL_channelAdminRights_layer92.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                super.admin_rights = Chat.mergeAdminRights(super.admin_rights_layer92);
            }
            if ((super.flags & 0x8000) != 0x0) {
                super.banned_rights_layer92 = TL_channelBannedRights_layer92.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                super.banned_rights = Chat.mergeBannedRights(super.banned_rights_layer92);
            }
            if ((super.flags & 0x20000) != 0x0) {
                super.participants_count = abstractSerializedData.readInt32(b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channel_layer92.constructor);
            int flags;
            if (super.creator) {
                flags = (super.flags | 0x1);
            }
            else {
                flags = (super.flags & 0xFFFFFFFE);
            }
            super.flags = flags;
            int flags2;
            if (super.left) {
                flags2 = (super.flags | 0x4);
            }
            else {
                flags2 = (super.flags & 0xFFFFFFFB);
            }
            super.flags = flags2;
            int flags3;
            if (super.broadcast) {
                flags3 = (super.flags | 0x20);
            }
            else {
                flags3 = (super.flags & 0xFFFFFFDF);
            }
            super.flags = flags3;
            int flags4;
            if (super.verified) {
                flags4 = (super.flags | 0x80);
            }
            else {
                flags4 = (super.flags & 0xFFFFFF7F);
            }
            super.flags = flags4;
            int flags5;
            if (super.megagroup) {
                flags5 = (super.flags | 0x100);
            }
            else {
                flags5 = (super.flags & 0xFFFFFEFF);
            }
            super.flags = flags5;
            int flags6;
            if (super.restricted) {
                flags6 = (super.flags | 0x200);
            }
            else {
                flags6 = (super.flags & 0xFFFFFDFF);
            }
            super.flags = flags6;
            int flags7;
            if (super.signatures) {
                flags7 = (super.flags | 0x800);
            }
            else {
                flags7 = (super.flags & 0xFFFFF7FF);
            }
            super.flags = flags7;
            int flags8;
            if (super.min) {
                flags8 = (super.flags | 0x1000);
            }
            else {
                flags8 = (super.flags & 0xFFFFEFFF);
            }
            abstractSerializedData.writeInt32(super.flags = flags8);
            abstractSerializedData.writeInt32(super.id);
            if ((super.flags & 0x2000) != 0x0) {
                abstractSerializedData.writeInt64(super.access_hash);
            }
            abstractSerializedData.writeString(super.title);
            if ((super.flags & 0x40) != 0x0) {
                abstractSerializedData.writeString(super.username);
            }
            super.photo.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(super.date);
            abstractSerializedData.writeInt32(super.version);
            if ((super.flags & 0x200) != 0x0) {
                abstractSerializedData.writeString(super.restriction_reason);
            }
            if ((super.flags & 0x4000) != 0x0) {
                super.admin_rights_layer92.serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x8000) != 0x0) {
                super.banned_rights_layer92.serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x20000) != 0x0) {
                abstractSerializedData.writeInt32(super.participants_count);
            }
        }
    }
    
    public static class TL_channel_old extends TL_channel
    {
        public static int constructor = 1737397639;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            final boolean b2 = true;
            super.creator = ((flags & 0x1) != 0x0);
            super.kicked = ((super.flags & 0x2) != 0x0);
            super.left = ((super.flags & 0x4) != 0x0);
            super.moderator = ((super.flags & 0x10) != 0x0);
            super.broadcast = ((super.flags & 0x20) != 0x0);
            super.verified = ((super.flags & 0x80) != 0x0);
            super.megagroup = ((super.flags & 0x100) != 0x0);
            super.explicit_content = ((super.flags & 0x200) != 0x0 && b2);
            super.id = abstractSerializedData.readInt32(b);
            super.access_hash = abstractSerializedData.readInt64(b);
            super.title = abstractSerializedData.readString(b);
            if ((super.flags & 0x40) != 0x0) {
                super.username = abstractSerializedData.readString(b);
            }
            super.photo = ChatPhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.date = abstractSerializedData.readInt32(b);
            super.version = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channel_old.constructor);
            int flags;
            if (super.creator) {
                flags = (super.flags | 0x1);
            }
            else {
                flags = (super.flags & 0xFFFFFFFE);
            }
            super.flags = flags;
            int flags2;
            if (super.kicked) {
                flags2 = (super.flags | 0x2);
            }
            else {
                flags2 = (super.flags & 0xFFFFFFFD);
            }
            super.flags = flags2;
            int flags3;
            if (super.left) {
                flags3 = (super.flags | 0x4);
            }
            else {
                flags3 = (super.flags & 0xFFFFFFFB);
            }
            super.flags = flags3;
            int flags4;
            if (super.moderator) {
                flags4 = (super.flags | 0x10);
            }
            else {
                flags4 = (super.flags & 0xFFFFFFEF);
            }
            super.flags = flags4;
            int flags5;
            if (super.broadcast) {
                flags5 = (super.flags | 0x20);
            }
            else {
                flags5 = (super.flags & 0xFFFFFFDF);
            }
            super.flags = flags5;
            int flags6;
            if (super.verified) {
                flags6 = (super.flags | 0x80);
            }
            else {
                flags6 = (super.flags & 0xFFFFFF7F);
            }
            super.flags = flags6;
            int flags7;
            if (super.megagroup) {
                flags7 = (super.flags | 0x100);
            }
            else {
                flags7 = (super.flags & 0xFFFFFEFF);
            }
            super.flags = flags7;
            int flags8;
            if (super.explicit_content) {
                flags8 = (super.flags | 0x200);
            }
            else {
                flags8 = (super.flags & 0xFFFFFDFF);
            }
            abstractSerializedData.writeInt32(super.flags = flags8);
            abstractSerializedData.writeInt32(super.id);
            abstractSerializedData.writeInt64(super.access_hash);
            abstractSerializedData.writeString(super.title);
            if ((super.flags & 0x40) != 0x0) {
                abstractSerializedData.writeString(super.username);
            }
            super.photo.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(super.date);
            abstractSerializedData.writeInt32(super.version);
        }
    }
    
    public static class TL_channels_adminLogResults extends TLObject
    {
        public static int constructor = -309659827;
        public ArrayList<Chat> chats;
        public ArrayList<TL_channelAdminLogEvent> events;
        public ArrayList<User> users;
        
        public TL_channels_adminLogResults() {
            this.events = new ArrayList<TL_channelAdminLogEvent>();
            this.chats = new ArrayList<Chat>();
            this.users = new ArrayList<User>();
        }
        
        public static TL_channels_adminLogResults TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_channels_adminLogResults.constructor == i) {
                final TL_channels_adminLogResults tl_channels_adminLogResults = new TL_channels_adminLogResults();
                tl_channels_adminLogResults.readParams(abstractSerializedData, b);
                return tl_channels_adminLogResults;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_channels_adminLogResults", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            final int int32 = abstractSerializedData.readInt32(b);
            final int n = 0;
            if (int32 != 481674261) {
                if (!b) {
                    return;
                }
                throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
            }
            else {
                for (int int33 = abstractSerializedData.readInt32(b), i = 0; i < int33; ++i) {
                    final TL_channelAdminLogEvent tLdeserialize = TL_channelAdminLogEvent.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    this.events.add(tLdeserialize);
                }
                final int int34 = abstractSerializedData.readInt32(b);
                if (int34 != 481674261) {
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int34));
                }
                else {
                    for (int int35 = abstractSerializedData.readInt32(b), j = 0; j < int35; ++j) {
                        final Chat tLdeserialize2 = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize2 == null) {
                            return;
                        }
                        this.chats.add(tLdeserialize2);
                    }
                    final int int36 = abstractSerializedData.readInt32(b);
                    if (int36 == 481674261) {
                        for (int int37 = abstractSerializedData.readInt32(b), k = n; k < int37; ++k) {
                            final User tLdeserialize3 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                            if (tLdeserialize3 == null) {
                                return;
                            }
                            this.users.add(tLdeserialize3);
                        }
                        return;
                    }
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int36));
                }
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channels_adminLogResults.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.events.size();
            abstractSerializedData.writeInt32(size);
            final int n = 0;
            for (int i = 0; i < size; ++i) {
                this.events.get(i).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size2 = this.chats.size();
            abstractSerializedData.writeInt32(size2);
            for (int j = 0; j < size2; ++j) {
                this.chats.get(j).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size3 = this.users.size();
            abstractSerializedData.writeInt32(size3);
            for (int k = n; k < size3; ++k) {
                this.users.get(k).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_channels_channelParticipant extends TLObject
    {
        public static int constructor = -791039645;
        public ChannelParticipant participant;
        public ArrayList<User> users;
        
        public TL_channels_channelParticipant() {
            this.users = new ArrayList<User>();
        }
        
        public static TL_channels_channelParticipant TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_channels_channelParticipant.constructor == i) {
                final TL_channels_channelParticipant tl_channels_channelParticipant = new TL_channels_channelParticipant();
                tl_channels_channelParticipant.readParams(abstractSerializedData, b);
                return tl_channels_channelParticipant;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_channels_channelParticipant", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.participant = ChannelParticipant.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final User tLdeserialize = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    this.users.add(tLdeserialize);
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channels_channelParticipant.constructor);
            this.participant.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.users.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                this.users.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_channels_channelParticipants extends channels_ChannelParticipants
    {
        public static int constructor = -177282392;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.count = abstractSerializedData.readInt32(b);
            final int int32 = abstractSerializedData.readInt32(b);
            final int n = 0;
            if (int32 != 481674261) {
                if (!b) {
                    return;
                }
                throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
            }
            else {
                for (int int33 = abstractSerializedData.readInt32(b), i = 0; i < int33; ++i) {
                    final ChannelParticipant tLdeserialize = ChannelParticipant.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.participants.add(tLdeserialize);
                }
                final int int34 = abstractSerializedData.readInt32(b);
                if (int34 == 481674261) {
                    for (int int35 = abstractSerializedData.readInt32(b), j = n; j < int35; ++j) {
                        final User tLdeserialize2 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize2 == null) {
                            return;
                        }
                        super.users.add(tLdeserialize2);
                    }
                    return;
                }
                if (!b) {
                    return;
                }
                throw new RuntimeException(String.format("wrong Vector magic, got %x", int34));
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channels_channelParticipants.constructor);
            abstractSerializedData.writeInt32(super.count);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.participants.size();
            abstractSerializedData.writeInt32(size);
            final int n = 0;
            for (int i = 0; i < size; ++i) {
                super.participants.get(i).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size2 = super.users.size();
            abstractSerializedData.writeInt32(size2);
            for (int j = n; j < size2; ++j) {
                super.users.get(j).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_channels_channelParticipantsNotModified extends channels_ChannelParticipants
    {
        public static int constructor = -266911767;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channels_channelParticipantsNotModified.constructor);
        }
    }
    
    public static class TL_channels_checkUsername extends TLObject
    {
        public static int constructor = 283557164;
        public InputChannel channel;
        public String username;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channels_checkUsername.constructor);
            this.channel.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(this.username);
        }
    }
    
    public static class TL_channels_createChannel extends TLObject
    {
        public static int constructor = -192332417;
        public String about;
        public boolean broadcast;
        public int flags;
        public boolean megagroup;
        public String title;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Updates.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channels_createChannel.constructor);
            int flags;
            if (this.broadcast) {
                flags = (this.flags | 0x1);
            }
            else {
                flags = (this.flags & 0xFFFFFFFE);
            }
            this.flags = flags;
            int flags2;
            if (this.megagroup) {
                flags2 = (this.flags | 0x2);
            }
            else {
                flags2 = (this.flags & 0xFFFFFFFD);
            }
            abstractSerializedData.writeInt32(this.flags = flags2);
            abstractSerializedData.writeString(this.title);
            abstractSerializedData.writeString(this.about);
        }
    }
    
    public static class TL_channels_deleteChannel extends TLObject
    {
        public static int constructor = -1072619549;
        public InputChannel channel;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Updates.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channels_deleteChannel.constructor);
            this.channel.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_channels_deleteHistory extends TLObject
    {
        public static int constructor = -1355375294;
        public InputChannel channel;
        public int max_id;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channels_deleteHistory.constructor);
            this.channel.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.max_id);
        }
    }
    
    public static class TL_channels_deleteMessages extends TLObject
    {
        public static int constructor = -2067661490;
        public InputChannel channel;
        public ArrayList<Integer> id;
        
        public TL_channels_deleteMessages() {
            this.id = new ArrayList<Integer>();
        }
        
        public static TL_channels_deleteMessages TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_channels_deleteMessages.constructor == i) {
                final TL_channels_deleteMessages tl_channels_deleteMessages = new TL_channels_deleteMessages();
                tl_channels_deleteMessages.readParams(abstractSerializedData, b);
                return tl_channels_deleteMessages;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_channels_deleteMessages", i));
        }
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_messages_affectedMessages.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.channel = InputChannel.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    this.id.add(abstractSerializedData.readInt32(b));
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channels_deleteMessages.constructor);
            this.channel.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.id.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                abstractSerializedData.writeInt32(this.id.get(i));
            }
        }
    }
    
    public static class TL_channels_deleteUserHistory extends TLObject
    {
        public static int constructor = -787622117;
        public InputChannel channel;
        public InputUser user_id;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_messages_affectedHistory.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channels_deleteUserHistory.constructor);
            this.channel.serializeToStream(abstractSerializedData);
            this.user_id.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_channels_editAdmin extends TLObject
    {
        public static int constructor = 1895338938;
        public TL_chatAdminRights admin_rights;
        public InputChannel channel;
        public InputUser user_id;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Updates.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channels_editAdmin.constructor);
            this.channel.serializeToStream(abstractSerializedData);
            this.user_id.serializeToStream(abstractSerializedData);
            this.admin_rights.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_channels_editBanned extends TLObject
    {
        public static int constructor = 1920559378;
        public TL_chatBannedRights banned_rights;
        public InputChannel channel;
        public InputUser user_id;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Updates.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channels_editBanned.constructor);
            this.channel.serializeToStream(abstractSerializedData);
            this.user_id.serializeToStream(abstractSerializedData);
            this.banned_rights.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_channels_editPhoto extends TLObject
    {
        public static int constructor = -248621111;
        public InputChannel channel;
        public InputChatPhoto photo;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Updates.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channels_editPhoto.constructor);
            this.channel.serializeToStream(abstractSerializedData);
            this.photo.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_channels_editTitle extends TLObject
    {
        public static int constructor = 1450044624;
        public InputChannel channel;
        public String title;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Updates.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channels_editTitle.constructor);
            this.channel.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(this.title);
        }
    }
    
    public static class TL_channels_exportMessageLink extends TLObject
    {
        public static int constructor = -934882771;
        public InputChannel channel;
        public int id;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_exportedMessageLink.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channels_exportMessageLink.constructor);
            this.channel.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.id);
        }
    }
    
    public static class TL_channels_getAdminLog extends TLObject
    {
        public static int constructor = 870184064;
        public ArrayList<InputUser> admins;
        public InputChannel channel;
        public TL_channelAdminLogEventsFilter events_filter;
        public int flags;
        public int limit;
        public long max_id;
        public long min_id;
        public String q;
        
        public TL_channels_getAdminLog() {
            this.admins = new ArrayList<InputUser>();
        }
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_channels_adminLogResults.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channels_getAdminLog.constructor);
            abstractSerializedData.writeInt32(this.flags);
            this.channel.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(this.q);
            if ((this.flags & 0x1) != 0x0) {
                this.events_filter.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 0x2) != 0x0) {
                abstractSerializedData.writeInt32(481674261);
                final int size = this.admins.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; ++i) {
                    this.admins.get(i).serializeToStream(abstractSerializedData);
                }
            }
            abstractSerializedData.writeInt64(this.max_id);
            abstractSerializedData.writeInt64(this.min_id);
            abstractSerializedData.writeInt32(this.limit);
        }
    }
    
    public static class TL_channels_getAdminedPublicChannels extends TLObject
    {
        public static int constructor = -1920105769;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return messages_Chats.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channels_getAdminedPublicChannels.constructor);
        }
    }
    
    public static class TL_channels_getBroadcastsForDiscussion extends TLObject
    {
        public static int constructor = 445117188;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return messages_Chats.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channels_getBroadcastsForDiscussion.constructor);
        }
    }
    
    public static class TL_channels_getChannels extends TLObject
    {
        public static int constructor = 176122811;
        public ArrayList<InputChannel> id;
        
        public TL_channels_getChannels() {
            this.id = new ArrayList<InputChannel>();
        }
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return messages_Chats.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channels_getChannels.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.id.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                this.id.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_channels_getFullChannel extends TLObject
    {
        public static int constructor = 141781513;
        public InputChannel channel;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_messages_chatFull.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channels_getFullChannel.constructor);
            this.channel.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_channels_getGroupsForDiscussion extends TLObject
    {
        public static int constructor = -170208392;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return messages_Chats.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channels_getGroupsForDiscussion.constructor);
        }
    }
    
    public static class TL_channels_getMessages extends TLObject
    {
        public static int constructor = -1814580409;
        public InputChannel channel;
        public ArrayList<Integer> id;
        
        public TL_channels_getMessages() {
            this.id = new ArrayList<Integer>();
        }
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return messages_Messages.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channels_getMessages.constructor);
            this.channel.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.id.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                abstractSerializedData.writeInt32(this.id.get(i));
            }
        }
    }
    
    public static class TL_channels_getParticipant extends TLObject
    {
        public static int constructor = 1416484774;
        public InputChannel channel;
        public InputUser user_id;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_channels_channelParticipant.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channels_getParticipant.constructor);
            this.channel.serializeToStream(abstractSerializedData);
            this.user_id.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_channels_getParticipants extends TLObject
    {
        public static int constructor = 306054633;
        public InputChannel channel;
        public ChannelParticipantsFilter filter;
        public int hash;
        public int limit;
        public int offset;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return channels_ChannelParticipants.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channels_getParticipants.constructor);
            this.channel.serializeToStream(abstractSerializedData);
            this.filter.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.offset);
            abstractSerializedData.writeInt32(this.limit);
            abstractSerializedData.writeInt32(this.hash);
        }
    }
    
    public static class TL_channels_inviteToChannel extends TLObject
    {
        public static int constructor = 429865580;
        public InputChannel channel;
        public ArrayList<InputUser> users;
        
        public TL_channels_inviteToChannel() {
            this.users = new ArrayList<InputUser>();
        }
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Updates.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channels_inviteToChannel.constructor);
            this.channel.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.users.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                this.users.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_channels_joinChannel extends TLObject
    {
        public static int constructor = 615851205;
        public InputChannel channel;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Updates.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channels_joinChannel.constructor);
            this.channel.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_channels_leaveChannel extends TLObject
    {
        public static int constructor = -130635115;
        public InputChannel channel;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Updates.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channels_leaveChannel.constructor);
            this.channel.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_channels_readHistory extends TLObject
    {
        public static int constructor = -871347913;
        public InputChannel channel;
        public int max_id;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channels_readHistory.constructor);
            this.channel.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.max_id);
        }
    }
    
    public static class TL_channels_readMessageContents extends TLObject
    {
        public static int constructor = -357180360;
        public InputChannel channel;
        public ArrayList<Integer> id;
        
        public TL_channels_readMessageContents() {
            this.id = new ArrayList<Integer>();
        }
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channels_readMessageContents.constructor);
            this.channel.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.id.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                abstractSerializedData.writeInt32(this.id.get(i));
            }
        }
    }
    
    public static class TL_channels_reportSpam extends TLObject
    {
        public static int constructor = -32999408;
        public InputChannel channel;
        public ArrayList<Integer> id;
        public InputUser user_id;
        
        public TL_channels_reportSpam() {
            this.id = new ArrayList<Integer>();
        }
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channels_reportSpam.constructor);
            this.channel.serializeToStream(abstractSerializedData);
            this.user_id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.id.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                abstractSerializedData.writeInt32(this.id.get(i));
            }
        }
    }
    
    public static class TL_channels_searchPosts extends TLObject
    {
        public static int constructor = 1134602210;
        public int limit;
        public int offset_id;
        public InputPeer offset_peer;
        public int offset_rate;
        public String q;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return messages_Messages.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channels_searchPosts.constructor);
            abstractSerializedData.writeString(this.q);
            abstractSerializedData.writeInt32(this.offset_rate);
            this.offset_peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.offset_id);
            abstractSerializedData.writeInt32(this.limit);
        }
    }
    
    public static class TL_channels_setDiscussionGroup extends TLObject
    {
        public static int constructor = 1079520178;
        public InputChannel broadcast;
        public InputChannel group;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channels_setDiscussionGroup.constructor);
            this.broadcast.serializeToStream(abstractSerializedData);
            this.group.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_channels_setStickers extends TLObject
    {
        public static int constructor = -359881479;
        public InputChannel channel;
        public InputStickerSet stickerset;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channels_setStickers.constructor);
            this.channel.serializeToStream(abstractSerializedData);
            this.stickerset.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_channels_togglePreHistoryHidden extends TLObject
    {
        public static int constructor = -356796084;
        public InputChannel channel;
        public boolean enabled;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Updates.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channels_togglePreHistoryHidden.constructor);
            this.channel.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeBool(this.enabled);
        }
    }
    
    public static class TL_channels_toggleSignatures extends TLObject
    {
        public static int constructor = 527021574;
        public InputChannel channel;
        public boolean enabled;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Updates.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channels_toggleSignatures.constructor);
            this.channel.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeBool(this.enabled);
        }
    }
    
    public static class TL_channels_updateUsername extends TLObject
    {
        public static int constructor = 890549214;
        public InputChannel channel;
        public String username;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_channels_updateUsername.constructor);
            this.channel.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(this.username);
        }
    }
    
    public static class TL_chat extends Chat
    {
        public static int constructor = 1004149726;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            final boolean b2 = true;
            super.creator = ((flags & 0x1) != 0x0);
            super.kicked = ((super.flags & 0x2) != 0x0);
            super.left = ((super.flags & 0x4) != 0x0);
            super.deactivated = ((super.flags & 0x20) != 0x0 && b2);
            super.id = abstractSerializedData.readInt32(b);
            super.title = abstractSerializedData.readString(b);
            super.photo = ChatPhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.participants_count = abstractSerializedData.readInt32(b);
            super.date = abstractSerializedData.readInt32(b);
            super.version = abstractSerializedData.readInt32(b);
            if ((super.flags & 0x40) != 0x0) {
                super.migrated_to = InputChannel.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            if ((super.flags & 0x4000) != 0x0) {
                super.admin_rights = TL_chatAdminRights.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            if ((super.flags & 0x40000) != 0x0) {
                super.default_banned_rights = TL_chatBannedRights.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_chat.constructor);
            int flags;
            if (super.creator) {
                flags = (super.flags | 0x1);
            }
            else {
                flags = (super.flags & 0xFFFFFFFE);
            }
            super.flags = flags;
            int flags2;
            if (super.kicked) {
                flags2 = (super.flags | 0x2);
            }
            else {
                flags2 = (super.flags & 0xFFFFFFFD);
            }
            super.flags = flags2;
            int flags3;
            if (super.left) {
                flags3 = (super.flags | 0x4);
            }
            else {
                flags3 = (super.flags & 0xFFFFFFFB);
            }
            super.flags = flags3;
            int flags4;
            if (super.deactivated) {
                flags4 = (super.flags | 0x20);
            }
            else {
                flags4 = (super.flags & 0xFFFFFFDF);
            }
            abstractSerializedData.writeInt32(super.flags = flags4);
            abstractSerializedData.writeInt32(super.id);
            abstractSerializedData.writeString(super.title);
            super.photo.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(super.participants_count);
            abstractSerializedData.writeInt32(super.date);
            abstractSerializedData.writeInt32(super.version);
            if ((super.flags & 0x40) != 0x0) {
                super.migrated_to.serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x4000) != 0x0) {
                super.admin_rights.serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x40000) != 0x0) {
                super.default_banned_rights.serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_chatAdminRights extends TLObject
    {
        public static int constructor = 1605510357;
        public boolean add_admins;
        public boolean ban_users;
        public boolean change_info;
        public boolean delete_messages;
        public boolean edit_messages;
        public int flags;
        public boolean invite_users;
        public boolean pin_messages;
        public boolean post_messages;
        
        public static TL_chatAdminRights TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_chatAdminRights.constructor == i) {
                final TL_chatAdminRights tl_chatAdminRights = new TL_chatAdminRights();
                tl_chatAdminRights.readParams(abstractSerializedData, b);
                return tl_chatAdminRights;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_chatAdminRights", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.flags = abstractSerializedData.readInt32(b);
            final int flags = this.flags;
            final boolean b2 = true;
            this.change_info = ((flags & 0x1) != 0x0);
            this.post_messages = ((this.flags & 0x2) != 0x0);
            this.edit_messages = ((this.flags & 0x4) != 0x0);
            this.delete_messages = ((this.flags & 0x8) != 0x0);
            this.ban_users = ((this.flags & 0x10) != 0x0);
            this.invite_users = ((this.flags & 0x20) != 0x0);
            this.pin_messages = ((this.flags & 0x80) != 0x0);
            this.add_admins = ((this.flags & 0x200) != 0x0 && b2);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_chatAdminRights.constructor);
            int flags;
            if (this.change_info) {
                flags = (this.flags | 0x1);
            }
            else {
                flags = (this.flags & 0xFFFFFFFE);
            }
            this.flags = flags;
            int flags2;
            if (this.post_messages) {
                flags2 = (this.flags | 0x2);
            }
            else {
                flags2 = (this.flags & 0xFFFFFFFD);
            }
            this.flags = flags2;
            int flags3;
            if (this.edit_messages) {
                flags3 = (this.flags | 0x4);
            }
            else {
                flags3 = (this.flags & 0xFFFFFFFB);
            }
            this.flags = flags3;
            int flags4;
            if (this.delete_messages) {
                flags4 = (this.flags | 0x8);
            }
            else {
                flags4 = (this.flags & 0xFFFFFFF7);
            }
            this.flags = flags4;
            int flags5;
            if (this.ban_users) {
                flags5 = (this.flags | 0x10);
            }
            else {
                flags5 = (this.flags & 0xFFFFFFEF);
            }
            this.flags = flags5;
            int flags6;
            if (this.invite_users) {
                flags6 = (this.flags | 0x20);
            }
            else {
                flags6 = (this.flags & 0xFFFFFFDF);
            }
            this.flags = flags6;
            int flags7;
            if (this.pin_messages) {
                flags7 = (this.flags | 0x80);
            }
            else {
                flags7 = (this.flags & 0xFFFFFF7F);
            }
            this.flags = flags7;
            int flags8;
            if (this.add_admins) {
                flags8 = (this.flags | 0x200);
            }
            else {
                flags8 = (this.flags & 0xFFFFFDFF);
            }
            abstractSerializedData.writeInt32(this.flags = flags8);
        }
    }
    
    public static class TL_chatBannedRights extends TLObject
    {
        public static int constructor = -1626209256;
        public boolean change_info;
        public boolean embed_links;
        public int flags;
        public boolean invite_users;
        public boolean pin_messages;
        public boolean send_games;
        public boolean send_gifs;
        public boolean send_inline;
        public boolean send_media;
        public boolean send_messages;
        public boolean send_polls;
        public boolean send_stickers;
        public int until_date;
        public boolean view_messages;
        
        public static TL_chatBannedRights TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_chatBannedRights.constructor == i) {
                final TL_chatBannedRights tl_chatBannedRights = new TL_chatBannedRights();
                tl_chatBannedRights.readParams(abstractSerializedData, b);
                return tl_chatBannedRights;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_chatBannedRights", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.flags = abstractSerializedData.readInt32(b);
            final int flags = this.flags;
            final boolean b2 = true;
            this.view_messages = ((flags & 0x1) != 0x0);
            this.send_messages = ((this.flags & 0x2) != 0x0);
            this.send_media = ((this.flags & 0x4) != 0x0);
            this.send_stickers = ((this.flags & 0x8) != 0x0);
            this.send_gifs = ((this.flags & 0x10) != 0x0);
            this.send_games = ((this.flags & 0x20) != 0x0);
            this.send_inline = ((this.flags & 0x40) != 0x0);
            this.embed_links = ((this.flags & 0x80) != 0x0);
            this.send_polls = ((this.flags & 0x100) != 0x0);
            this.change_info = ((this.flags & 0x400) != 0x0);
            this.invite_users = ((this.flags & 0x8000) != 0x0);
            this.pin_messages = ((this.flags & 0x20000) != 0x0 && b2);
            this.until_date = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_chatBannedRights.constructor);
            int flags;
            if (this.view_messages) {
                flags = (this.flags | 0x1);
            }
            else {
                flags = (this.flags & 0xFFFFFFFE);
            }
            this.flags = flags;
            int flags2;
            if (this.send_messages) {
                flags2 = (this.flags | 0x2);
            }
            else {
                flags2 = (this.flags & 0xFFFFFFFD);
            }
            this.flags = flags2;
            int flags3;
            if (this.send_media) {
                flags3 = (this.flags | 0x4);
            }
            else {
                flags3 = (this.flags & 0xFFFFFFFB);
            }
            this.flags = flags3;
            int flags4;
            if (this.send_stickers) {
                flags4 = (this.flags | 0x8);
            }
            else {
                flags4 = (this.flags & 0xFFFFFFF7);
            }
            this.flags = flags4;
            int flags5;
            if (this.send_gifs) {
                flags5 = (this.flags | 0x10);
            }
            else {
                flags5 = (this.flags & 0xFFFFFFEF);
            }
            this.flags = flags5;
            int flags6;
            if (this.send_games) {
                flags6 = (this.flags | 0x20);
            }
            else {
                flags6 = (this.flags & 0xFFFFFFDF);
            }
            this.flags = flags6;
            int flags7;
            if (this.send_inline) {
                flags7 = (this.flags | 0x40);
            }
            else {
                flags7 = (this.flags & 0xFFFFFFBF);
            }
            this.flags = flags7;
            int flags8;
            if (this.embed_links) {
                flags8 = (this.flags | 0x80);
            }
            else {
                flags8 = (this.flags & 0xFFFFFF7F);
            }
            this.flags = flags8;
            int flags9;
            if (this.send_polls) {
                flags9 = (this.flags | 0x100);
            }
            else {
                flags9 = (this.flags & 0xFFFFFEFF);
            }
            this.flags = flags9;
            int flags10;
            if (this.change_info) {
                flags10 = (this.flags | 0x400);
            }
            else {
                flags10 = (this.flags & 0xFFFFFBFF);
            }
            this.flags = flags10;
            int flags11;
            if (this.invite_users) {
                flags11 = (this.flags | 0x8000);
            }
            else {
                flags11 = (this.flags & 0xFFFF7FFF);
            }
            this.flags = flags11;
            int flags12;
            if (this.pin_messages) {
                flags12 = (this.flags | 0x20000);
            }
            else {
                flags12 = (this.flags & 0xFFFDFFFF);
            }
            abstractSerializedData.writeInt32(this.flags = flags12);
            abstractSerializedData.writeInt32(this.until_date);
        }
    }
    
    public static class TL_chatChannelParticipant extends ChatParticipant
    {
        public static int constructor = -925415106;
        public ChannelParticipant channelParticipant;
    }
    
    public static class TL_chatEmpty extends Chat
    {
        public static int constructor = -1683826688;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt32(b);
            super.title = "DELETED";
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_chatEmpty.constructor);
            abstractSerializedData.writeInt32(super.id);
        }
    }
    
    public static class TL_chatForbidden extends Chat
    {
        public static int constructor = 120753115;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt32(b);
            super.title = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_chatForbidden.constructor);
            abstractSerializedData.writeInt32(super.id);
            abstractSerializedData.writeString(super.title);
        }
    }
    
    public static class TL_chatForbidden_old extends TL_chatForbidden
    {
        public static int constructor = -83047359;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt32(b);
            super.title = abstractSerializedData.readString(b);
            super.date = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_chatForbidden_old.constructor);
            abstractSerializedData.writeInt32(super.id);
            abstractSerializedData.writeString(super.title);
            abstractSerializedData.writeInt32(super.date);
        }
    }
    
    public static class TL_chatFull extends ChatFull
    {
        public static int constructor = 461151667;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            int i = 0;
            super.can_set_username = ((flags & 0x80) != 0x0);
            super.id = abstractSerializedData.readInt32(b);
            super.about = abstractSerializedData.readString(b);
            super.participants = ChatParticipants.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            if ((super.flags & 0x4) != 0x0) {
                super.chat_photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            super.notify_settings = PeerNotifySettings.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.exported_invite = ExportedChatInvite.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            if ((super.flags & 0x8) != 0x0) {
                final int int32 = abstractSerializedData.readInt32(b);
                if (int32 != 481674261) {
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
                }
                else {
                    while (i < abstractSerializedData.readInt32(b)) {
                        final BotInfo tLdeserialize = BotInfo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize == null) {
                            return;
                        }
                        super.bot_info.add(tLdeserialize);
                        ++i;
                    }
                }
            }
            if ((super.flags & 0x40) != 0x0) {
                super.pinned_msg_id = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x800) != 0x0) {
                super.folder_id = abstractSerializedData.readInt32(b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_chatFull.constructor);
            int flags;
            if (super.can_set_username) {
                flags = (super.flags | 0x80);
            }
            else {
                flags = (super.flags & 0xFFFFFF7F);
            }
            abstractSerializedData.writeInt32(super.flags = flags);
            abstractSerializedData.writeInt32(super.id);
            abstractSerializedData.writeString(super.about);
            super.participants.serializeToStream(abstractSerializedData);
            if ((super.flags & 0x4) != 0x0) {
                super.chat_photo.serializeToStream(abstractSerializedData);
            }
            super.notify_settings.serializeToStream(abstractSerializedData);
            super.exported_invite.serializeToStream(abstractSerializedData);
            if ((super.flags & 0x8) != 0x0) {
                abstractSerializedData.writeInt32(481674261);
                final int size = super.bot_info.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; ++i) {
                    super.bot_info.get(i).serializeToStream(abstractSerializedData);
                }
            }
            if ((super.flags & 0x40) != 0x0) {
                abstractSerializedData.writeInt32(super.pinned_msg_id);
            }
            if ((super.flags & 0x800) != 0x0) {
                abstractSerializedData.writeInt32(super.folder_id);
            }
        }
    }
    
    public static class TL_chatFull_layer87 extends TL_chatFull
    {
        public static int constructor = 771925524;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt32(b);
            super.participants = ChatParticipants.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.chat_photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.notify_settings = PeerNotifySettings.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.exported_invite = ExportedChatInvite.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final BotInfo tLdeserialize = BotInfo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.bot_info.add(tLdeserialize);
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_chatFull_layer87.constructor);
            abstractSerializedData.writeInt32(super.id);
            super.participants.serializeToStream(abstractSerializedData);
            super.chat_photo.serializeToStream(abstractSerializedData);
            super.notify_settings.serializeToStream(abstractSerializedData);
            super.exported_invite.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.bot_info.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                super.bot_info.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_chatFull_layer92 extends TL_chatFull
    {
        public static int constructor = -304961647;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            super.id = abstractSerializedData.readInt32(b);
            super.participants = ChatParticipants.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            if ((super.flags & 0x4) != 0x0) {
                super.chat_photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            super.notify_settings = PeerNotifySettings.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.exported_invite = ExportedChatInvite.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            if ((super.flags & 0x8) != 0x0) {
                final int int32 = abstractSerializedData.readInt32(b);
                int i = 0;
                if (int32 != 481674261) {
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
                }
                else {
                    while (i < abstractSerializedData.readInt32(b)) {
                        final BotInfo tLdeserialize = BotInfo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize == null) {
                            return;
                        }
                        super.bot_info.add(tLdeserialize);
                        ++i;
                    }
                }
            }
            if ((super.flags & 0x40) != 0x0) {
                super.pinned_msg_id = abstractSerializedData.readInt32(b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_chatFull_layer92.constructor);
            abstractSerializedData.writeInt32(super.flags);
            abstractSerializedData.writeInt32(super.id);
            super.participants.serializeToStream(abstractSerializedData);
            if ((super.flags & 0x4) != 0x0) {
                super.chat_photo.serializeToStream(abstractSerializedData);
            }
            super.notify_settings.serializeToStream(abstractSerializedData);
            super.exported_invite.serializeToStream(abstractSerializedData);
            if ((super.flags & 0x8) != 0x0) {
                abstractSerializedData.writeInt32(481674261);
                final int size = super.bot_info.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; ++i) {
                    super.bot_info.get(i).serializeToStream(abstractSerializedData);
                }
            }
            if ((super.flags & 0x40) != 0x0) {
                abstractSerializedData.writeInt32(super.pinned_msg_id);
            }
        }
    }
    
    public static class TL_chatFull_layer98 extends TL_chatFull
    {
        public static int constructor = 581055962;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            int i = 0;
            super.can_set_username = ((flags & 0x80) != 0x0);
            super.id = abstractSerializedData.readInt32(b);
            super.about = abstractSerializedData.readString(b);
            super.participants = ChatParticipants.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            if ((super.flags & 0x4) != 0x0) {
                super.chat_photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            super.notify_settings = PeerNotifySettings.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.exported_invite = ExportedChatInvite.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            if ((super.flags & 0x8) != 0x0) {
                final int int32 = abstractSerializedData.readInt32(b);
                if (int32 != 481674261) {
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
                }
                else {
                    while (i < abstractSerializedData.readInt32(b)) {
                        final BotInfo tLdeserialize = BotInfo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize == null) {
                            return;
                        }
                        super.bot_info.add(tLdeserialize);
                        ++i;
                    }
                }
            }
            if ((super.flags & 0x40) != 0x0) {
                super.pinned_msg_id = abstractSerializedData.readInt32(b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_chatFull_layer98.constructor);
            int flags;
            if (super.can_set_username) {
                flags = (super.flags | 0x80);
            }
            else {
                flags = (super.flags & 0xFFFFFF7F);
            }
            abstractSerializedData.writeInt32(super.flags = flags);
            abstractSerializedData.writeInt32(super.id);
            abstractSerializedData.writeString(super.about);
            super.participants.serializeToStream(abstractSerializedData);
            if ((super.flags & 0x4) != 0x0) {
                super.chat_photo.serializeToStream(abstractSerializedData);
            }
            super.notify_settings.serializeToStream(abstractSerializedData);
            super.exported_invite.serializeToStream(abstractSerializedData);
            if ((super.flags & 0x8) != 0x0) {
                abstractSerializedData.writeInt32(481674261);
                final int size = super.bot_info.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; ++i) {
                    super.bot_info.get(i).serializeToStream(abstractSerializedData);
                }
            }
            if ((super.flags & 0x40) != 0x0) {
                abstractSerializedData.writeInt32(super.pinned_msg_id);
            }
        }
    }
    
    public static class TL_chatInvite extends ChatInvite
    {
        public static int constructor = -540871282;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            int i = 0;
            super.channel = ((flags & 0x1) != 0x0);
            super.broadcast = ((super.flags & 0x2) != 0x0);
            super.isPublic = ((super.flags & 0x4) != 0x0);
            super.megagroup = ((super.flags & 0x8) != 0x0);
            super.title = abstractSerializedData.readString(b);
            super.photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.participants_count = abstractSerializedData.readInt32(b);
            if ((super.flags & 0x10) != 0x0) {
                final int int32 = abstractSerializedData.readInt32(b);
                if (int32 != 481674261) {
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
                }
                else {
                    while (i < abstractSerializedData.readInt32(b)) {
                        final User tLdeserialize = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize == null) {
                            return;
                        }
                        super.participants.add(tLdeserialize);
                        ++i;
                    }
                }
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_chatInvite.constructor);
            int flags;
            if (super.channel) {
                flags = (super.flags | 0x1);
            }
            else {
                flags = (super.flags & 0xFFFFFFFE);
            }
            super.flags = flags;
            int flags2;
            if (super.broadcast) {
                flags2 = (super.flags | 0x2);
            }
            else {
                flags2 = (super.flags & 0xFFFFFFFD);
            }
            super.flags = flags2;
            int flags3;
            if (super.isPublic) {
                flags3 = (super.flags | 0x4);
            }
            else {
                flags3 = (super.flags & 0xFFFFFFFB);
            }
            super.flags = flags3;
            int flags4;
            if (super.megagroup) {
                flags4 = (super.flags | 0x8);
            }
            else {
                flags4 = (super.flags & 0xFFFFFFF7);
            }
            abstractSerializedData.writeInt32(super.flags = flags4);
            abstractSerializedData.writeString(super.title);
            super.photo.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(super.participants_count);
            if ((super.flags & 0x10) != 0x0) {
                abstractSerializedData.writeInt32(481674261);
                final int size = super.participants.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; ++i) {
                    super.participants.get(i).serializeToStream(abstractSerializedData);
                }
            }
        }
    }
    
    public static class TL_chatInviteAlready extends ChatInvite
    {
        public static int constructor = 1516793212;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.chat = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_chatInviteAlready.constructor);
            super.chat.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_chatInviteEmpty extends ExportedChatInvite
    {
        public static int constructor = 1776236393;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_chatInviteEmpty.constructor);
        }
    }
    
    public static class TL_chatInviteExported extends ExportedChatInvite
    {
        public static int constructor = -64092740;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.link = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_chatInviteExported.constructor);
            abstractSerializedData.writeString(super.link);
        }
    }
    
    public static class TL_chatLocated extends TLObject
    {
        public static int constructor = 909233996;
        public int chat_id;
        public int distance;
        
        public static TL_chatLocated TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_chatLocated.constructor == i) {
                final TL_chatLocated tl_chatLocated = new TL_chatLocated();
                tl_chatLocated.readParams(abstractSerializedData, b);
                return tl_chatLocated;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_chatLocated", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.chat_id = abstractSerializedData.readInt32(b);
            this.distance = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_chatLocated.constructor);
            abstractSerializedData.writeInt32(this.chat_id);
            abstractSerializedData.writeInt32(this.distance);
        }
    }
    
    public static class TL_chatOnlines extends TLObject
    {
        public static int constructor = -264117680;
        public int onlines;
        
        public static TL_chatOnlines TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_chatOnlines.constructor == i) {
                final TL_chatOnlines tl_chatOnlines = new TL_chatOnlines();
                tl_chatOnlines.readParams(abstractSerializedData, b);
                return tl_chatOnlines;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_chatOnlines", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.onlines = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_chatOnlines.constructor);
            abstractSerializedData.writeInt32(this.onlines);
        }
    }
    
    public static class TL_chatParticipant extends ChatParticipant
    {
        public static int constructor = -925415106;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.user_id = abstractSerializedData.readInt32(b);
            super.inviter_id = abstractSerializedData.readInt32(b);
            super.date = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_chatParticipant.constructor);
            abstractSerializedData.writeInt32(super.user_id);
            abstractSerializedData.writeInt32(super.inviter_id);
            abstractSerializedData.writeInt32(super.date);
        }
    }
    
    public static class TL_chatParticipantAdmin extends ChatParticipant
    {
        public static int constructor = -489233354;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.user_id = abstractSerializedData.readInt32(b);
            super.inviter_id = abstractSerializedData.readInt32(b);
            super.date = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_chatParticipantAdmin.constructor);
            abstractSerializedData.writeInt32(super.user_id);
            abstractSerializedData.writeInt32(super.inviter_id);
            abstractSerializedData.writeInt32(super.date);
        }
    }
    
    public static class TL_chatParticipantCreator extends ChatParticipant
    {
        public static int constructor = -636267638;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.user_id = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_chatParticipantCreator.constructor);
            abstractSerializedData.writeInt32(super.user_id);
        }
    }
    
    public static class TL_chatParticipants extends ChatParticipants
    {
        public static int constructor = 1061556205;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.chat_id = abstractSerializedData.readInt32(b);
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final ChatParticipant tLdeserialize = ChatParticipant.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.participants.add(tLdeserialize);
                    ++i;
                }
                super.version = abstractSerializedData.readInt32(b);
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_chatParticipants.constructor);
            abstractSerializedData.writeInt32(super.chat_id);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.participants.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                super.participants.get(i).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(super.version);
        }
    }
    
    public static class TL_chatParticipantsForbidden extends ChatParticipants
    {
        public static int constructor = -57668565;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            super.chat_id = abstractSerializedData.readInt32(b);
            if ((super.flags & 0x1) != 0x0) {
                super.self_participant = ChatParticipant.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_chatParticipantsForbidden.constructor);
            abstractSerializedData.writeInt32(super.flags);
            abstractSerializedData.writeInt32(super.chat_id);
            if ((super.flags & 0x1) != 0x0) {
                super.self_participant.serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_chatParticipantsForbidden_old extends TL_chatParticipantsForbidden
    {
        public static int constructor = 265468810;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.chat_id = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_chatParticipantsForbidden_old.constructor);
            abstractSerializedData.writeInt32(super.chat_id);
        }
    }
    
    public static class TL_chatParticipants_old extends TL_chatParticipants
    {
        public static int constructor = 2017571861;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.chat_id = abstractSerializedData.readInt32(b);
            super.admin_id = abstractSerializedData.readInt32(b);
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final ChatParticipant tLdeserialize = ChatParticipant.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.participants.add(tLdeserialize);
                    ++i;
                }
                super.version = abstractSerializedData.readInt32(b);
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_chatParticipants_old.constructor);
            abstractSerializedData.writeInt32(super.chat_id);
            abstractSerializedData.writeInt32(super.admin_id);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.participants.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                super.participants.get(i).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(super.version);
        }
    }
    
    public static class TL_chatPhoto extends ChatPhoto
    {
        public static int constructor = 1197267925;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.photo_small = FileLocation.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.photo_big = FileLocation.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.dc_id = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_chatPhoto.constructor);
            super.photo_small.serializeToStream(abstractSerializedData);
            super.photo_big.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(super.dc_id);
        }
    }
    
    public static class TL_chatPhotoEmpty extends ChatPhoto
    {
        public static int constructor = 935395612;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_chatPhotoEmpty.constructor);
        }
    }
    
    public static class TL_chatPhoto_layer97 extends TL_chatPhoto
    {
        public static int constructor = 1632839530;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.photo_small = FileLocation.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.photo_big = FileLocation.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_chatPhoto_layer97.constructor);
            super.photo_small.serializeToStream(abstractSerializedData);
            super.photo_big.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_chat_layer92 extends TL_chat
    {
        public static int constructor = -652419756;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            final boolean b2 = true;
            super.creator = ((flags & 0x1) != 0x0);
            super.kicked = ((super.flags & 0x2) != 0x0);
            super.left = ((super.flags & 0x4) != 0x0);
            super.deactivated = ((super.flags & 0x20) != 0x0 && b2);
            super.id = abstractSerializedData.readInt32(b);
            super.title = abstractSerializedData.readString(b);
            super.photo = ChatPhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.participants_count = abstractSerializedData.readInt32(b);
            super.date = abstractSerializedData.readInt32(b);
            super.version = abstractSerializedData.readInt32(b);
            if ((super.flags & 0x40) != 0x0) {
                super.migrated_to = InputChannel.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_chat_layer92.constructor);
            int flags;
            if (super.creator) {
                flags = (super.flags | 0x1);
            }
            else {
                flags = (super.flags & 0xFFFFFFFE);
            }
            super.flags = flags;
            int flags2;
            if (super.kicked) {
                flags2 = (super.flags | 0x2);
            }
            else {
                flags2 = (super.flags & 0xFFFFFFFD);
            }
            super.flags = flags2;
            int flags3;
            if (super.left) {
                flags3 = (super.flags | 0x4);
            }
            else {
                flags3 = (super.flags & 0xFFFFFFFB);
            }
            super.flags = flags3;
            int flags4;
            if (super.deactivated) {
                flags4 = (super.flags | 0x20);
            }
            else {
                flags4 = (super.flags & 0xFFFFFFDF);
            }
            abstractSerializedData.writeInt32(super.flags = flags4);
            abstractSerializedData.writeInt32(super.id);
            abstractSerializedData.writeString(super.title);
            super.photo.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(super.participants_count);
            abstractSerializedData.writeInt32(super.date);
            abstractSerializedData.writeInt32(super.version);
            if ((super.flags & 0x40) != 0x0) {
                super.migrated_to.serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_chat_old extends TL_chat
    {
        public static int constructor = 1855757255;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt32(b);
            super.title = abstractSerializedData.readString(b);
            super.photo = ChatPhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.participants_count = abstractSerializedData.readInt32(b);
            super.date = abstractSerializedData.readInt32(b);
            super.left = abstractSerializedData.readBool(b);
            super.version = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_chat_old.constructor);
            abstractSerializedData.writeInt32(super.id);
            abstractSerializedData.writeString(super.title);
            super.photo.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(super.participants_count);
            abstractSerializedData.writeInt32(super.date);
            abstractSerializedData.writeBool(super.left);
            abstractSerializedData.writeInt32(super.version);
        }
    }
    
    public static class TL_chat_old2 extends TL_chat
    {
        public static int constructor = 1930607688;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            final boolean b2 = true;
            super.creator = ((flags & 0x1) != 0x0);
            super.kicked = ((super.flags & 0x2) != 0x0);
            super.left = ((super.flags & 0x4) != 0x0);
            super.deactivated = ((super.flags & 0x20) != 0x0 && b2);
            super.id = abstractSerializedData.readInt32(b);
            super.title = abstractSerializedData.readString(b);
            super.photo = ChatPhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.participants_count = abstractSerializedData.readInt32(b);
            super.date = abstractSerializedData.readInt32(b);
            super.version = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_chat_old2.constructor);
            int flags;
            if (super.creator) {
                flags = (super.flags | 0x1);
            }
            else {
                flags = (super.flags & 0xFFFFFFFE);
            }
            super.flags = flags;
            int flags2;
            if (super.kicked) {
                flags2 = (super.flags | 0x2);
            }
            else {
                flags2 = (super.flags & 0xFFFFFFFD);
            }
            super.flags = flags2;
            int flags3;
            if (super.left) {
                flags3 = (super.flags | 0x4);
            }
            else {
                flags3 = (super.flags & 0xFFFFFFFB);
            }
            super.flags = flags3;
            int flags4;
            if (super.deactivated) {
                flags4 = (super.flags | 0x20);
            }
            else {
                flags4 = (super.flags & 0xFFFFFFDF);
            }
            abstractSerializedData.writeInt32(super.flags = flags4);
            abstractSerializedData.writeInt32(super.id);
            abstractSerializedData.writeString(super.title);
            super.photo.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(super.participants_count);
            abstractSerializedData.writeInt32(super.date);
            abstractSerializedData.writeInt32(super.version);
        }
    }
    
    public static class TL_codeSettings extends TLObject
    {
        public static int constructor = 808409587;
        public boolean allow_flashcall;
        public String app_hash;
        public boolean app_hash_persistent;
        public boolean current_number;
        public int flags;
        
        public static TL_codeSettings TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_codeSettings.constructor == i) {
                final TL_codeSettings tl_codeSettings = new TL_codeSettings();
                tl_codeSettings.readParams(abstractSerializedData, b);
                return tl_codeSettings;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_codeSettings", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.flags = abstractSerializedData.readInt32(b);
            final int flags = this.flags;
            final boolean b2 = true;
            this.allow_flashcall = ((flags & 0x1) != 0x0);
            this.current_number = ((this.flags & 0x2) != 0x0);
            this.app_hash_persistent = ((this.flags & 0x4) != 0x0 && b2);
            if ((this.flags & 0x8) != 0x0) {
                this.app_hash = abstractSerializedData.readString(b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_codeSettings.constructor);
            int flags;
            if (this.allow_flashcall) {
                flags = (this.flags | 0x1);
            }
            else {
                flags = (this.flags & 0xFFFFFFFE);
            }
            this.flags = flags;
            int flags2;
            if (this.current_number) {
                flags2 = (this.flags | 0x2);
            }
            else {
                flags2 = (this.flags & 0xFFFFFFFD);
            }
            this.flags = flags2;
            int flags3;
            if (this.app_hash_persistent) {
                flags3 = (this.flags | 0x4);
            }
            else {
                flags3 = (this.flags & 0xFFFFFFFB);
            }
            abstractSerializedData.writeInt32(this.flags = flags3);
            if ((this.flags & 0x8) != 0x0) {
                abstractSerializedData.writeString(this.app_hash);
            }
        }
    }
    
    public static class TL_config extends TLObject
    {
        public static int constructor = 856375399;
        public String autoupdate_url_prefix;
        public int base_lang_pack_version;
        public boolean blocked_mode;
        public int call_connect_timeout_ms;
        public int call_packet_timeout_ms;
        public int call_receive_timeout_ms;
        public int call_ring_timeout_ms;
        public int caption_length_max;
        public int channels_read_media_period;
        public int chat_size_max;
        public int date;
        public ArrayList<TL_dcOption> dc_options;
        public String dc_txt_domain_name;
        public boolean default_p2p_contacts;
        public int edit_time_limit;
        public int expires;
        public int flags;
        public int forwarded_count_max;
        public String gif_search_username;
        public boolean ignore_phone_entities;
        public String img_search_username;
        public int lang_pack_version;
        public String me_url_prefix;
        public int megagroup_size_max;
        public int message_length_max;
        public int notify_cloud_delay_ms;
        public int notify_default_delay_ms;
        public int offline_blur_timeout_ms;
        public int offline_idle_timeout_ms;
        public int online_cloud_timeout_ms;
        public int online_update_period_ms;
        public boolean pfs_enabled;
        public boolean phonecalls_enabled;
        public int pinned_dialogs_count_max;
        public int pinned_infolder_count_max;
        public boolean preload_featured_stickers;
        public int push_chat_limit;
        public int push_chat_period_ms;
        public int rating_e_decay;
        public boolean revoke_pm_inbox;
        public int revoke_pm_time_limit;
        public int revoke_time_limit;
        public int saved_gifs_limit;
        public String static_maps_provider;
        public int stickers_faved_limit;
        public int stickers_recent_limit;
        public String suggested_lang_code;
        public boolean test_mode;
        public int this_dc;
        public int tmp_sessions;
        public String venue_search_username;
        public int webfile_dc_id;
        
        public TL_config() {
            this.dc_options = new ArrayList<TL_dcOption>();
        }
        
        public static TL_config TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_config.constructor == i) {
                final TL_config tl_config = new TL_config();
                tl_config.readParams(abstractSerializedData, b);
                return tl_config;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_config", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.flags = abstractSerializedData.readInt32(b);
            final int flags = this.flags;
            int i = 0;
            this.phonecalls_enabled = ((flags & 0x2) != 0x0);
            this.default_p2p_contacts = ((this.flags & 0x8) != 0x0);
            this.preload_featured_stickers = ((this.flags & 0x10) != 0x0);
            this.ignore_phone_entities = ((this.flags & 0x20) != 0x0);
            this.revoke_pm_inbox = ((this.flags & 0x40) != 0x0);
            this.blocked_mode = ((this.flags & 0x100) != 0x0);
            this.pfs_enabled = ((this.flags & 0x2000) != 0x0);
            this.date = abstractSerializedData.readInt32(b);
            this.expires = abstractSerializedData.readInt32(b);
            this.test_mode = abstractSerializedData.readBool(b);
            this.this_dc = abstractSerializedData.readInt32(b);
            final int int32 = abstractSerializedData.readInt32(b);
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final TL_dcOption tLdeserialize = TL_dcOption.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    this.dc_options.add(tLdeserialize);
                    ++i;
                }
                this.dc_txt_domain_name = abstractSerializedData.readString(b);
                this.chat_size_max = abstractSerializedData.readInt32(b);
                this.megagroup_size_max = abstractSerializedData.readInt32(b);
                this.forwarded_count_max = abstractSerializedData.readInt32(b);
                this.online_update_period_ms = abstractSerializedData.readInt32(b);
                this.offline_blur_timeout_ms = abstractSerializedData.readInt32(b);
                this.offline_idle_timeout_ms = abstractSerializedData.readInt32(b);
                this.online_cloud_timeout_ms = abstractSerializedData.readInt32(b);
                this.notify_cloud_delay_ms = abstractSerializedData.readInt32(b);
                this.notify_default_delay_ms = abstractSerializedData.readInt32(b);
                this.push_chat_period_ms = abstractSerializedData.readInt32(b);
                this.push_chat_limit = abstractSerializedData.readInt32(b);
                this.saved_gifs_limit = abstractSerializedData.readInt32(b);
                this.edit_time_limit = abstractSerializedData.readInt32(b);
                this.revoke_time_limit = abstractSerializedData.readInt32(b);
                this.revoke_pm_time_limit = abstractSerializedData.readInt32(b);
                this.rating_e_decay = abstractSerializedData.readInt32(b);
                this.stickers_recent_limit = abstractSerializedData.readInt32(b);
                this.stickers_faved_limit = abstractSerializedData.readInt32(b);
                this.channels_read_media_period = abstractSerializedData.readInt32(b);
                if ((this.flags & 0x1) != 0x0) {
                    this.tmp_sessions = abstractSerializedData.readInt32(b);
                }
                this.pinned_dialogs_count_max = abstractSerializedData.readInt32(b);
                this.pinned_infolder_count_max = abstractSerializedData.readInt32(b);
                this.call_receive_timeout_ms = abstractSerializedData.readInt32(b);
                this.call_ring_timeout_ms = abstractSerializedData.readInt32(b);
                this.call_connect_timeout_ms = abstractSerializedData.readInt32(b);
                this.call_packet_timeout_ms = abstractSerializedData.readInt32(b);
                this.me_url_prefix = abstractSerializedData.readString(b);
                if ((this.flags & 0x80) != 0x0) {
                    this.autoupdate_url_prefix = abstractSerializedData.readString(b);
                }
                if ((this.flags & 0x200) != 0x0) {
                    this.gif_search_username = abstractSerializedData.readString(b);
                }
                if ((this.flags & 0x400) != 0x0) {
                    this.venue_search_username = abstractSerializedData.readString(b);
                }
                if ((this.flags & 0x800) != 0x0) {
                    this.img_search_username = abstractSerializedData.readString(b);
                }
                if ((this.flags & 0x1000) != 0x0) {
                    this.static_maps_provider = abstractSerializedData.readString(b);
                }
                this.caption_length_max = abstractSerializedData.readInt32(b);
                this.message_length_max = abstractSerializedData.readInt32(b);
                this.webfile_dc_id = abstractSerializedData.readInt32(b);
                if ((this.flags & 0x4) != 0x0) {
                    this.suggested_lang_code = abstractSerializedData.readString(b);
                }
                if ((this.flags & 0x4) != 0x0) {
                    this.lang_pack_version = abstractSerializedData.readInt32(b);
                }
                if ((this.flags & 0x4) != 0x0) {
                    this.base_lang_pack_version = abstractSerializedData.readInt32(b);
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_config.constructor);
            int flags;
            if (this.phonecalls_enabled) {
                flags = (this.flags | 0x2);
            }
            else {
                flags = (this.flags & 0xFFFFFFFD);
            }
            this.flags = flags;
            int flags2;
            if (this.default_p2p_contacts) {
                flags2 = (this.flags | 0x8);
            }
            else {
                flags2 = (this.flags & 0xFFFFFFF7);
            }
            this.flags = flags2;
            int flags3;
            if (this.preload_featured_stickers) {
                flags3 = (this.flags | 0x10);
            }
            else {
                flags3 = (this.flags & 0xFFFFFFEF);
            }
            this.flags = flags3;
            int flags4;
            if (this.ignore_phone_entities) {
                flags4 = (this.flags | 0x20);
            }
            else {
                flags4 = (this.flags & 0xFFFFFFDF);
            }
            this.flags = flags4;
            int flags5;
            if (this.revoke_pm_inbox) {
                flags5 = (this.flags | 0x40);
            }
            else {
                flags5 = (this.flags & 0xFFFFFFBF);
            }
            this.flags = flags5;
            int flags6;
            if (this.blocked_mode) {
                flags6 = (this.flags | 0x100);
            }
            else {
                flags6 = (this.flags & 0xFFFFFEFF);
            }
            this.flags = flags6;
            int flags7;
            if (this.pfs_enabled) {
                flags7 = (this.flags | 0x2000);
            }
            else {
                flags7 = (this.flags & 0xFFFFDFFF);
            }
            abstractSerializedData.writeInt32(this.flags = flags7);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeInt32(this.expires);
            abstractSerializedData.writeBool(this.test_mode);
            abstractSerializedData.writeInt32(this.this_dc);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.dc_options.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                this.dc_options.get(i).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeString(this.dc_txt_domain_name);
            abstractSerializedData.writeInt32(this.chat_size_max);
            abstractSerializedData.writeInt32(this.megagroup_size_max);
            abstractSerializedData.writeInt32(this.forwarded_count_max);
            abstractSerializedData.writeInt32(this.online_update_period_ms);
            abstractSerializedData.writeInt32(this.offline_blur_timeout_ms);
            abstractSerializedData.writeInt32(this.offline_idle_timeout_ms);
            abstractSerializedData.writeInt32(this.online_cloud_timeout_ms);
            abstractSerializedData.writeInt32(this.notify_cloud_delay_ms);
            abstractSerializedData.writeInt32(this.notify_default_delay_ms);
            abstractSerializedData.writeInt32(this.push_chat_period_ms);
            abstractSerializedData.writeInt32(this.push_chat_limit);
            abstractSerializedData.writeInt32(this.saved_gifs_limit);
            abstractSerializedData.writeInt32(this.edit_time_limit);
            abstractSerializedData.writeInt32(this.revoke_time_limit);
            abstractSerializedData.writeInt32(this.revoke_pm_time_limit);
            abstractSerializedData.writeInt32(this.rating_e_decay);
            abstractSerializedData.writeInt32(this.stickers_recent_limit);
            abstractSerializedData.writeInt32(this.stickers_faved_limit);
            abstractSerializedData.writeInt32(this.channels_read_media_period);
            if ((this.flags & 0x1) != 0x0) {
                abstractSerializedData.writeInt32(this.tmp_sessions);
            }
            abstractSerializedData.writeInt32(this.pinned_dialogs_count_max);
            abstractSerializedData.writeInt32(this.pinned_infolder_count_max);
            abstractSerializedData.writeInt32(this.call_receive_timeout_ms);
            abstractSerializedData.writeInt32(this.call_ring_timeout_ms);
            abstractSerializedData.writeInt32(this.call_connect_timeout_ms);
            abstractSerializedData.writeInt32(this.call_packet_timeout_ms);
            abstractSerializedData.writeString(this.me_url_prefix);
            if ((this.flags & 0x80) != 0x0) {
                abstractSerializedData.writeString(this.autoupdate_url_prefix);
            }
            if ((this.flags & 0x200) != 0x0) {
                abstractSerializedData.writeString(this.gif_search_username);
            }
            if ((this.flags & 0x400) != 0x0) {
                abstractSerializedData.writeString(this.venue_search_username);
            }
            if ((this.flags & 0x800) != 0x0) {
                abstractSerializedData.writeString(this.img_search_username);
            }
            if ((this.flags & 0x1000) != 0x0) {
                abstractSerializedData.writeString(this.static_maps_provider);
            }
            abstractSerializedData.writeInt32(this.caption_length_max);
            abstractSerializedData.writeInt32(this.message_length_max);
            abstractSerializedData.writeInt32(this.webfile_dc_id);
            if ((this.flags & 0x4) != 0x0) {
                abstractSerializedData.writeString(this.suggested_lang_code);
            }
            if ((this.flags & 0x4) != 0x0) {
                abstractSerializedData.writeInt32(this.lang_pack_version);
            }
            if ((this.flags & 0x4) != 0x0) {
                abstractSerializedData.writeInt32(this.base_lang_pack_version);
            }
        }
    }
    
    public static class TL_contact extends TLObject
    {
        public static int constructor = -116274796;
        public boolean mutual;
        public int user_id;
        
        public static TL_contact TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_contact.constructor == i) {
                final TL_contact tl_contact = new TL_contact();
                tl_contact.readParams(abstractSerializedData, b);
                return tl_contact;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_contact", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.user_id = abstractSerializedData.readInt32(b);
            this.mutual = abstractSerializedData.readBool(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_contact.constructor);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeBool(this.mutual);
        }
    }
    
    public static class TL_contactBlocked extends TLObject
    {
        public static int constructor = 1444661369;
        public int date;
        public int user_id;
        
        public static TL_contactBlocked TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_contactBlocked.constructor == i) {
                final TL_contactBlocked tl_contactBlocked = new TL_contactBlocked();
                tl_contactBlocked.readParams(abstractSerializedData, b);
                return tl_contactBlocked;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_contactBlocked", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.user_id = abstractSerializedData.readInt32(b);
            this.date = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_contactBlocked.constructor);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeInt32(this.date);
        }
    }
    
    public static class TL_contactFound extends TLObject
    {
        public static int constructor = -360210539;
        public int user_id;
        
        public static TL_contactFound TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_contactFound.constructor == i) {
                final TL_contactFound tl_contactFound = new TL_contactFound();
                tl_contactFound.readParams(abstractSerializedData, b);
                return tl_contactFound;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_contactFound", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.user_id = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_contactFound.constructor);
            abstractSerializedData.writeInt32(this.user_id);
        }
    }
    
    public static class TL_contactLinkContact extends ContactLink
    {
        public static int constructor = -721239344;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_contactLinkContact.constructor);
        }
    }
    
    public static class TL_contactLinkNone extends ContactLink
    {
        public static int constructor = -17968211;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_contactLinkNone.constructor);
        }
    }
    
    public static class TL_contactLinkUnknown extends ContactLink
    {
        public static int constructor = 1599050311;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_contactLinkUnknown.constructor);
        }
    }
    
    public static class TL_contactStatus extends TLObject
    {
        public static int constructor = -748155807;
        public UserStatus status;
        public int user_id;
        
        public static TL_contactStatus TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_contactStatus.constructor == i) {
                final TL_contactStatus tl_contactStatus = new TL_contactStatus();
                tl_contactStatus.readParams(abstractSerializedData, b);
                return tl_contactStatus;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_contactStatus", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.user_id = abstractSerializedData.readInt32(b);
            this.status = UserStatus.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_contactStatus.constructor);
            abstractSerializedData.writeInt32(this.user_id);
            this.status.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_contacts_block extends TLObject
    {
        public static int constructor = 858475004;
        public InputUser id;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_contacts_block.constructor);
            this.id.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_contacts_blocked extends contacts_Blocked
    {
        public static int constructor = 471043349;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            final int int32 = abstractSerializedData.readInt32(b);
            final int n = 0;
            if (int32 != 481674261) {
                if (!b) {
                    return;
                }
                throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
            }
            else {
                for (int int33 = abstractSerializedData.readInt32(b), i = 0; i < int33; ++i) {
                    final TL_contactBlocked tLdeserialize = TL_contactBlocked.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.blocked.add(tLdeserialize);
                }
                final int int34 = abstractSerializedData.readInt32(b);
                if (int34 == 481674261) {
                    for (int int35 = abstractSerializedData.readInt32(b), j = n; j < int35; ++j) {
                        final User tLdeserialize2 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize2 == null) {
                            return;
                        }
                        super.users.add(tLdeserialize2);
                    }
                    return;
                }
                if (!b) {
                    return;
                }
                throw new RuntimeException(String.format("wrong Vector magic, got %x", int34));
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_contacts_blocked.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.blocked.size();
            abstractSerializedData.writeInt32(size);
            final int n = 0;
            for (int i = 0; i < size; ++i) {
                super.blocked.get(i).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size2 = super.users.size();
            abstractSerializedData.writeInt32(size2);
            for (int j = n; j < size2; ++j) {
                super.users.get(j).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_contacts_blockedSlice extends contacts_Blocked
    {
        public static int constructor = -1878523231;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.count = abstractSerializedData.readInt32(b);
            final int int32 = abstractSerializedData.readInt32(b);
            final int n = 0;
            if (int32 != 481674261) {
                if (!b) {
                    return;
                }
                throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
            }
            else {
                for (int int33 = abstractSerializedData.readInt32(b), i = 0; i < int33; ++i) {
                    final TL_contactBlocked tLdeserialize = TL_contactBlocked.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.blocked.add(tLdeserialize);
                }
                final int int34 = abstractSerializedData.readInt32(b);
                if (int34 == 481674261) {
                    for (int int35 = abstractSerializedData.readInt32(b), j = n; j < int35; ++j) {
                        final User tLdeserialize2 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize2 == null) {
                            return;
                        }
                        super.users.add(tLdeserialize2);
                    }
                    return;
                }
                if (!b) {
                    return;
                }
                throw new RuntimeException(String.format("wrong Vector magic, got %x", int34));
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_contacts_blockedSlice.constructor);
            abstractSerializedData.writeInt32(super.count);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.blocked.size();
            abstractSerializedData.writeInt32(size);
            final int n = 0;
            for (int i = 0; i < size; ++i) {
                super.blocked.get(i).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size2 = super.users.size();
            abstractSerializedData.writeInt32(size2);
            for (int j = n; j < size2; ++j) {
                super.users.get(j).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_contacts_contacts extends contacts_Contacts
    {
        public static int constructor = -353862078;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            final int int32 = abstractSerializedData.readInt32(b);
            final int n = 0;
            if (int32 != 481674261) {
                if (!b) {
                    return;
                }
                throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
            }
            else {
                for (int int33 = abstractSerializedData.readInt32(b), i = 0; i < int33; ++i) {
                    final TL_contact tLdeserialize = TL_contact.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.contacts.add(tLdeserialize);
                }
                super.saved_count = abstractSerializedData.readInt32(b);
                final int int34 = abstractSerializedData.readInt32(b);
                if (int34 == 481674261) {
                    for (int int35 = abstractSerializedData.readInt32(b), j = n; j < int35; ++j) {
                        final User tLdeserialize2 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize2 == null) {
                            return;
                        }
                        super.users.add(tLdeserialize2);
                    }
                    return;
                }
                if (!b) {
                    return;
                }
                throw new RuntimeException(String.format("wrong Vector magic, got %x", int34));
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_contacts_contacts.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.contacts.size();
            abstractSerializedData.writeInt32(size);
            final int n = 0;
            for (int i = 0; i < size; ++i) {
                super.contacts.get(i).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(super.saved_count);
            abstractSerializedData.writeInt32(481674261);
            final int size2 = super.users.size();
            abstractSerializedData.writeInt32(size2);
            for (int j = n; j < size2; ++j) {
                super.users.get(j).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_contacts_contactsNotModified extends contacts_Contacts
    {
        public static int constructor = -1219778094;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_contacts_contactsNotModified.constructor);
        }
    }
    
    public static class TL_contacts_deleteByPhones extends TLObject
    {
        public static int constructor = 269745566;
        public ArrayList<String> phones;
        
        public TL_contacts_deleteByPhones() {
            this.phones = new ArrayList<String>();
        }
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_contacts_deleteByPhones.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.phones.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                abstractSerializedData.writeString(this.phones.get(i));
            }
        }
    }
    
    public static class TL_contacts_deleteContact extends TLObject
    {
        public static int constructor = -1902823612;
        public InputUser id;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_contacts_link.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_contacts_deleteContact.constructor);
            this.id.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_contacts_deleteContacts extends TLObject
    {
        public static int constructor = 1504393374;
        public ArrayList<InputUser> id;
        
        public TL_contacts_deleteContacts() {
            this.id = new ArrayList<InputUser>();
        }
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_contacts_deleteContacts.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.id.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                this.id.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_contacts_exportCard extends TLObject
    {
        public static int constructor = -2065352905;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, int i, final boolean b) {
            final Vector vector = new Vector();
            int int32;
            for (int32 = abstractSerializedData.readInt32(b), i = 0; i < int32; ++i) {
                vector.objects.add(abstractSerializedData.readInt32(b));
            }
            return vector;
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_contacts_exportCard.constructor);
        }
    }
    
    public static class TL_contacts_found extends TLObject
    {
        public static int constructor = -1290580579;
        public ArrayList<Chat> chats;
        public ArrayList<Peer> my_results;
        public ArrayList<Peer> results;
        public ArrayList<User> users;
        
        public TL_contacts_found() {
            this.my_results = new ArrayList<Peer>();
            this.results = new ArrayList<Peer>();
            this.chats = new ArrayList<Chat>();
            this.users = new ArrayList<User>();
        }
        
        public static TL_contacts_found TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_contacts_found.constructor == i) {
                final TL_contacts_found tl_contacts_found = new TL_contacts_found();
                tl_contacts_found.readParams(abstractSerializedData, b);
                return tl_contacts_found;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_contacts_found", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            final int int32 = abstractSerializedData.readInt32(b);
            final int n = 0;
            if (int32 != 481674261) {
                if (!b) {
                    return;
                }
                throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
            }
            else {
                for (int int33 = abstractSerializedData.readInt32(b), i = 0; i < int33; ++i) {
                    final Peer tLdeserialize = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    this.my_results.add(tLdeserialize);
                }
                final int int34 = abstractSerializedData.readInt32(b);
                if (int34 != 481674261) {
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int34));
                }
                else {
                    for (int int35 = abstractSerializedData.readInt32(b), j = 0; j < int35; ++j) {
                        final Peer tLdeserialize2 = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize2 == null) {
                            return;
                        }
                        this.results.add(tLdeserialize2);
                    }
                    final int int36 = abstractSerializedData.readInt32(b);
                    if (int36 != 481674261) {
                        if (!b) {
                            return;
                        }
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", int36));
                    }
                    else {
                        for (int int37 = abstractSerializedData.readInt32(b), k = 0; k < int37; ++k) {
                            final Chat tLdeserialize3 = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                            if (tLdeserialize3 == null) {
                                return;
                            }
                            this.chats.add(tLdeserialize3);
                        }
                        final int int38 = abstractSerializedData.readInt32(b);
                        if (int38 == 481674261) {
                            for (int int39 = abstractSerializedData.readInt32(b), l = n; l < int39; ++l) {
                                final User tLdeserialize4 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                                if (tLdeserialize4 == null) {
                                    return;
                                }
                                this.users.add(tLdeserialize4);
                            }
                            return;
                        }
                        if (!b) {
                            return;
                        }
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", int38));
                    }
                }
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_contacts_found.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.my_results.size();
            abstractSerializedData.writeInt32(size);
            final int n = 0;
            for (int i = 0; i < size; ++i) {
                this.my_results.get(i).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size2 = this.results.size();
            abstractSerializedData.writeInt32(size2);
            for (int j = 0; j < size2; ++j) {
                this.results.get(j).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size3 = this.chats.size();
            abstractSerializedData.writeInt32(size3);
            for (int k = 0; k < size3; ++k) {
                this.chats.get(k).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size4 = this.users.size();
            abstractSerializedData.writeInt32(size4);
            for (int l = n; l < size4; ++l) {
                this.users.get(l).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_contacts_getBlocked extends TLObject
    {
        public static int constructor = -176409329;
        public int limit;
        public int offset;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return contacts_Blocked.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_contacts_getBlocked.constructor);
            abstractSerializedData.writeInt32(this.offset);
            abstractSerializedData.writeInt32(this.limit);
        }
    }
    
    public static class TL_contacts_getContacts extends TLObject
    {
        public static int constructor = -1071414113;
        public int hash;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return contacts_Contacts.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_contacts_getContacts.constructor);
            abstractSerializedData.writeInt32(this.hash);
        }
    }
    
    public static class TL_contacts_getStatuses extends TLObject
    {
        public static int constructor = -995929106;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, int i, final boolean b) {
            final Vector vector = new Vector();
            int int32;
            TL_contactStatus tLdeserialize;
            for (int32 = abstractSerializedData.readInt32(b), i = 0; i < int32; ++i) {
                tLdeserialize = TL_contactStatus.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                if (tLdeserialize == null) {
                    return vector;
                }
                vector.objects.add(tLdeserialize);
            }
            return vector;
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_contacts_getStatuses.constructor);
        }
    }
    
    public static class TL_contacts_getTopPeers extends TLObject
    {
        public static int constructor = -728224331;
        public boolean bots_inline;
        public boolean bots_pm;
        public boolean channels;
        public boolean correspondents;
        public int flags;
        public boolean forward_chats;
        public boolean forward_users;
        public boolean groups;
        public int hash;
        public int limit;
        public int offset;
        public boolean phone_calls;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return contacts_TopPeers.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_contacts_getTopPeers.constructor);
            int flags;
            if (this.correspondents) {
                flags = (this.flags | 0x1);
            }
            else {
                flags = (this.flags & 0xFFFFFFFE);
            }
            this.flags = flags;
            int flags2;
            if (this.bots_pm) {
                flags2 = (this.flags | 0x2);
            }
            else {
                flags2 = (this.flags & 0xFFFFFFFD);
            }
            this.flags = flags2;
            int flags3;
            if (this.bots_inline) {
                flags3 = (this.flags | 0x4);
            }
            else {
                flags3 = (this.flags & 0xFFFFFFFB);
            }
            this.flags = flags3;
            int flags4;
            if (this.phone_calls) {
                flags4 = (this.flags | 0x8);
            }
            else {
                flags4 = (this.flags & 0xFFFFFFF7);
            }
            this.flags = flags4;
            int flags5;
            if (this.forward_users) {
                flags5 = (this.flags | 0x10);
            }
            else {
                flags5 = (this.flags & 0xFFFFFFEF);
            }
            this.flags = flags5;
            int flags6;
            if (this.forward_chats) {
                flags6 = (this.flags | 0x20);
            }
            else {
                flags6 = (this.flags & 0xFFFFFFDF);
            }
            this.flags = flags6;
            int flags7;
            if (this.groups) {
                flags7 = (this.flags | 0x400);
            }
            else {
                flags7 = (this.flags & 0xFFFFFBFF);
            }
            this.flags = flags7;
            int flags8;
            if (this.channels) {
                flags8 = (this.flags | 0x8000);
            }
            else {
                flags8 = (this.flags & 0xFFFF7FFF);
            }
            abstractSerializedData.writeInt32(this.flags = flags8);
            abstractSerializedData.writeInt32(this.offset);
            abstractSerializedData.writeInt32(this.limit);
            abstractSerializedData.writeInt32(this.hash);
        }
    }
    
    public static class TL_contacts_importCard extends TLObject
    {
        public static int constructor = 1340184318;
        public ArrayList<Integer> export_card;
        
        public TL_contacts_importCard() {
            this.export_card = new ArrayList<Integer>();
        }
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return User.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_contacts_importCard.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.export_card.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                abstractSerializedData.writeInt32(this.export_card.get(i));
            }
        }
    }
    
    public static class TL_contacts_importContacts extends TLObject
    {
        public static int constructor = 746589157;
        public ArrayList<TL_inputPhoneContact> contacts;
        
        public TL_contacts_importContacts() {
            this.contacts = new ArrayList<TL_inputPhoneContact>();
        }
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_contacts_importedContacts.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_contacts_importContacts.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.contacts.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                this.contacts.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_contacts_importedContacts extends TLObject
    {
        public static int constructor = 2010127419;
        public ArrayList<TL_importedContact> imported;
        public ArrayList<TL_popularContact> popular_invites;
        public ArrayList<Long> retry_contacts;
        public ArrayList<User> users;
        
        public TL_contacts_importedContacts() {
            this.imported = new ArrayList<TL_importedContact>();
            this.popular_invites = new ArrayList<TL_popularContact>();
            this.retry_contacts = new ArrayList<Long>();
            this.users = new ArrayList<User>();
        }
        
        public static TL_contacts_importedContacts TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_contacts_importedContacts.constructor == i) {
                final TL_contacts_importedContacts tl_contacts_importedContacts = new TL_contacts_importedContacts();
                tl_contacts_importedContacts.readParams(abstractSerializedData, b);
                return tl_contacts_importedContacts;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_contacts_importedContacts", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            final int int32 = abstractSerializedData.readInt32(b);
            final int n = 0;
            if (int32 != 481674261) {
                if (!b) {
                    return;
                }
                throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
            }
            else {
                for (int int33 = abstractSerializedData.readInt32(b), i = 0; i < int33; ++i) {
                    final TL_importedContact tLdeserialize = TL_importedContact.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    this.imported.add(tLdeserialize);
                }
                final int int34 = abstractSerializedData.readInt32(b);
                if (int34 != 481674261) {
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int34));
                }
                else {
                    for (int int35 = abstractSerializedData.readInt32(b), j = 0; j < int35; ++j) {
                        final TL_popularContact tLdeserialize2 = TL_popularContact.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize2 == null) {
                            return;
                        }
                        this.popular_invites.add(tLdeserialize2);
                    }
                    final int int36 = abstractSerializedData.readInt32(b);
                    if (int36 != 481674261) {
                        if (!b) {
                            return;
                        }
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", int36));
                    }
                    else {
                        for (int int37 = abstractSerializedData.readInt32(b), k = 0; k < int37; ++k) {
                            this.retry_contacts.add(abstractSerializedData.readInt64(b));
                        }
                        final int int38 = abstractSerializedData.readInt32(b);
                        if (int38 == 481674261) {
                            for (int int39 = abstractSerializedData.readInt32(b), l = n; l < int39; ++l) {
                                final User tLdeserialize3 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                                if (tLdeserialize3 == null) {
                                    return;
                                }
                                this.users.add(tLdeserialize3);
                            }
                            return;
                        }
                        if (!b) {
                            return;
                        }
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", int38));
                    }
                }
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_contacts_importedContacts.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.imported.size();
            abstractSerializedData.writeInt32(size);
            final int n = 0;
            for (int i = 0; i < size; ++i) {
                this.imported.get(i).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size2 = this.popular_invites.size();
            abstractSerializedData.writeInt32(size2);
            for (int j = 0; j < size2; ++j) {
                this.popular_invites.get(j).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size3 = this.retry_contacts.size();
            abstractSerializedData.writeInt32(size3);
            for (int k = 0; k < size3; ++k) {
                abstractSerializedData.writeInt64(this.retry_contacts.get(k));
            }
            abstractSerializedData.writeInt32(481674261);
            final int size4 = this.users.size();
            abstractSerializedData.writeInt32(size4);
            for (int l = n; l < size4; ++l) {
                this.users.get(l).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_contacts_link extends TLObject
    {
        public static int constructor = 986597452;
        public ContactLink foreign_link;
        public ContactLink my_link;
        public User user;
        
        public static TL_contacts_link TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_contacts_link.constructor == i) {
                final TL_contacts_link tl_contacts_link = new TL_contacts_link();
                tl_contacts_link.readParams(abstractSerializedData, b);
                return tl_contacts_link;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_contacts_link", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.my_link = ContactLink.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            this.foreign_link = ContactLink.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            this.user = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_contacts_link.constructor);
            this.my_link.serializeToStream(abstractSerializedData);
            this.foreign_link.serializeToStream(abstractSerializedData);
            this.user.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_contacts_resetSaved extends TLObject
    {
        public static int constructor = -2020263951;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_contacts_resetSaved.constructor);
        }
    }
    
    public static class TL_contacts_resetTopPeerRating extends TLObject
    {
        public static int constructor = 451113900;
        public TopPeerCategory category;
        public InputPeer peer;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_contacts_resetTopPeerRating.constructor);
            this.category.serializeToStream(abstractSerializedData);
            this.peer.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_contacts_resolveUsername extends TLObject
    {
        public static int constructor = -113456221;
        public String username;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_contacts_resolvedPeer.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_contacts_resolveUsername.constructor);
            abstractSerializedData.writeString(this.username);
        }
    }
    
    public static class TL_contacts_resolvedPeer extends TLObject
    {
        public static int constructor = 2131196633;
        public ArrayList<Chat> chats;
        public Peer peer;
        public ArrayList<User> users;
        
        public TL_contacts_resolvedPeer() {
            this.chats = new ArrayList<Chat>();
            this.users = new ArrayList<User>();
        }
        
        public static TL_contacts_resolvedPeer TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_contacts_resolvedPeer.constructor == i) {
                final TL_contacts_resolvedPeer tl_contacts_resolvedPeer = new TL_contacts_resolvedPeer();
                tl_contacts_resolvedPeer.readParams(abstractSerializedData, b);
                return tl_contacts_resolvedPeer;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_contacts_resolvedPeer", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.peer = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            final int int32 = abstractSerializedData.readInt32(b);
            final int n = 0;
            if (int32 != 481674261) {
                if (!b) {
                    return;
                }
                throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
            }
            else {
                for (int int33 = abstractSerializedData.readInt32(b), i = 0; i < int33; ++i) {
                    final Chat tLdeserialize = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    this.chats.add(tLdeserialize);
                }
                final int int34 = abstractSerializedData.readInt32(b);
                if (int34 == 481674261) {
                    for (int int35 = abstractSerializedData.readInt32(b), j = n; j < int35; ++j) {
                        final User tLdeserialize2 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize2 == null) {
                            return;
                        }
                        this.users.add(tLdeserialize2);
                    }
                    return;
                }
                if (!b) {
                    return;
                }
                throw new RuntimeException(String.format("wrong Vector magic, got %x", int34));
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_contacts_resolvedPeer.constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.chats.size();
            abstractSerializedData.writeInt32(size);
            final int n = 0;
            for (int i = 0; i < size; ++i) {
                this.chats.get(i).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size2 = this.users.size();
            abstractSerializedData.writeInt32(size2);
            for (int j = n; j < size2; ++j) {
                this.users.get(j).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_contacts_search extends TLObject
    {
        public static int constructor = 301470424;
        public int limit;
        public String q;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_contacts_found.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_contacts_search.constructor);
            abstractSerializedData.writeString(this.q);
            abstractSerializedData.writeInt32(this.limit);
        }
    }
    
    public static class TL_contacts_toggleTopPeers extends TLObject
    {
        public static int constructor = -2062238246;
        public boolean enabled;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_contacts_toggleTopPeers.constructor);
            abstractSerializedData.writeBool(this.enabled);
        }
    }
    
    public static class TL_contacts_topPeers extends contacts_TopPeers
    {
        public static int constructor = 1891070632;
        public ArrayList<TL_topPeerCategoryPeers> categories;
        public ArrayList<Chat> chats;
        public ArrayList<User> users;
        
        public TL_contacts_topPeers() {
            this.categories = new ArrayList<TL_topPeerCategoryPeers>();
            this.chats = new ArrayList<Chat>();
            this.users = new ArrayList<User>();
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            final int int32 = abstractSerializedData.readInt32(b);
            final int n = 0;
            if (int32 != 481674261) {
                if (!b) {
                    return;
                }
                throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
            }
            else {
                for (int int33 = abstractSerializedData.readInt32(b), i = 0; i < int33; ++i) {
                    final TL_topPeerCategoryPeers tLdeserialize = TL_topPeerCategoryPeers.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    this.categories.add(tLdeserialize);
                }
                final int int34 = abstractSerializedData.readInt32(b);
                if (int34 != 481674261) {
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int34));
                }
                else {
                    for (int int35 = abstractSerializedData.readInt32(b), j = 0; j < int35; ++j) {
                        final Chat tLdeserialize2 = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize2 == null) {
                            return;
                        }
                        this.chats.add(tLdeserialize2);
                    }
                    final int int36 = abstractSerializedData.readInt32(b);
                    if (int36 == 481674261) {
                        for (int int37 = abstractSerializedData.readInt32(b), k = n; k < int37; ++k) {
                            final User tLdeserialize3 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                            if (tLdeserialize3 == null) {
                                return;
                            }
                            this.users.add(tLdeserialize3);
                        }
                        return;
                    }
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int36));
                }
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_contacts_topPeers.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.categories.size();
            abstractSerializedData.writeInt32(size);
            final int n = 0;
            for (int i = 0; i < size; ++i) {
                this.categories.get(i).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size2 = this.chats.size();
            abstractSerializedData.writeInt32(size2);
            for (int j = 0; j < size2; ++j) {
                this.chats.get(j).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size3 = this.users.size();
            abstractSerializedData.writeInt32(size3);
            for (int k = n; k < size3; ++k) {
                this.users.get(k).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_contacts_topPeersDisabled extends contacts_TopPeers
    {
        public static int constructor = -1255369827;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_contacts_topPeersDisabled.constructor);
        }
    }
    
    public static class TL_contacts_topPeersNotModified extends contacts_TopPeers
    {
        public static int constructor = -567906571;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_contacts_topPeersNotModified.constructor);
        }
    }
    
    public static class TL_contacts_unblock extends TLObject
    {
        public static int constructor = -448724803;
        public InputUser id;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_contacts_unblock.constructor);
            this.id.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_dataJSON extends TLObject
    {
        public static int constructor = 2104790276;
        public String data;
        
        public static TL_dataJSON TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_dataJSON.constructor == i) {
                final TL_dataJSON tl_dataJSON = new TL_dataJSON();
                tl_dataJSON.readParams(abstractSerializedData, b);
                return tl_dataJSON;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_dataJSON", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.data = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_dataJSON.constructor);
            abstractSerializedData.writeString(this.data);
        }
    }
    
    public static class TL_dcOption extends TLObject
    {
        public static int constructor = 414687501;
        public boolean cdn;
        public int flags;
        public int id;
        public String ip_address;
        public boolean ipv6;
        public boolean isStatic;
        public boolean media_only;
        public int port;
        public byte[] secret;
        public boolean tcpo_only;
        
        public static TL_dcOption TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_dcOption.constructor == i) {
                final TL_dcOption tl_dcOption = new TL_dcOption();
                tl_dcOption.readParams(abstractSerializedData, b);
                return tl_dcOption;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_dcOption", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.flags = abstractSerializedData.readInt32(b);
            final int flags = this.flags;
            final boolean b2 = true;
            this.ipv6 = ((flags & 0x1) != 0x0);
            this.media_only = ((this.flags & 0x2) != 0x0);
            this.tcpo_only = ((this.flags & 0x4) != 0x0);
            this.cdn = ((this.flags & 0x8) != 0x0);
            this.isStatic = ((this.flags & 0x10) != 0x0 && b2);
            this.id = abstractSerializedData.readInt32(b);
            this.ip_address = abstractSerializedData.readString(b);
            this.port = abstractSerializedData.readInt32(b);
            if ((this.flags & 0x400) != 0x0) {
                this.secret = abstractSerializedData.readByteArray(b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_dcOption.constructor);
            int flags;
            if (this.ipv6) {
                flags = (this.flags | 0x1);
            }
            else {
                flags = (this.flags & 0xFFFFFFFE);
            }
            this.flags = flags;
            int flags2;
            if (this.media_only) {
                flags2 = (this.flags | 0x2);
            }
            else {
                flags2 = (this.flags & 0xFFFFFFFD);
            }
            this.flags = flags2;
            int flags3;
            if (this.tcpo_only) {
                flags3 = (this.flags | 0x4);
            }
            else {
                flags3 = (this.flags & 0xFFFFFFFB);
            }
            this.flags = flags3;
            int flags4;
            if (this.cdn) {
                flags4 = (this.flags | 0x8);
            }
            else {
                flags4 = (this.flags & 0xFFFFFFF7);
            }
            this.flags = flags4;
            int flags5;
            if (this.isStatic) {
                flags5 = (this.flags | 0x10);
            }
            else {
                flags5 = (this.flags & 0xFFFFFFEF);
            }
            abstractSerializedData.writeInt32(this.flags = flags5);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeString(this.ip_address);
            abstractSerializedData.writeInt32(this.port);
            if ((this.flags & 0x400) != 0x0) {
                abstractSerializedData.writeByteArray(this.secret);
            }
        }
    }
    
    public static class TL_decryptedMessage extends DecryptedMessage
    {
        public static int constructor = -1848883596;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            super.random_id = abstractSerializedData.readInt64(b);
            super.ttl = abstractSerializedData.readInt32(b);
            super.message = abstractSerializedData.readString(b);
            if ((super.flags & 0x200) != 0x0) {
                super.media = DecryptedMessageMedia.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            if ((super.flags & 0x80) != 0x0) {
                final int int32 = abstractSerializedData.readInt32(b);
                int i = 0;
                if (int32 != 481674261) {
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
                }
                else {
                    while (i < abstractSerializedData.readInt32(b)) {
                        final MessageEntity tLdeserialize = MessageEntity.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize == null) {
                            return;
                        }
                        super.entities.add(tLdeserialize);
                        ++i;
                    }
                }
            }
            if ((super.flags & 0x800) != 0x0) {
                super.via_bot_name = abstractSerializedData.readString(b);
            }
            if ((super.flags & 0x8) != 0x0) {
                super.reply_to_random_id = abstractSerializedData.readInt64(b);
            }
            if ((super.flags & 0x20000) != 0x0) {
                super.grouped_id = abstractSerializedData.readInt64(b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_decryptedMessage.constructor);
            abstractSerializedData.writeInt32(super.flags);
            abstractSerializedData.writeInt64(super.random_id);
            abstractSerializedData.writeInt32(super.ttl);
            abstractSerializedData.writeString(super.message);
            if ((super.flags & 0x200) != 0x0) {
                super.media.serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x80) != 0x0) {
                abstractSerializedData.writeInt32(481674261);
                final int size = super.entities.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; ++i) {
                    super.entities.get(i).serializeToStream(abstractSerializedData);
                }
            }
            if ((super.flags & 0x800) != 0x0) {
                abstractSerializedData.writeString(super.via_bot_name);
            }
            if ((super.flags & 0x8) != 0x0) {
                abstractSerializedData.writeInt64(super.reply_to_random_id);
            }
            if ((super.flags & 0x20000) != 0x0) {
                abstractSerializedData.writeInt64(super.grouped_id);
            }
        }
    }
    
    public static class TL_decryptedMessageActionAbortKey extends DecryptedMessageAction
    {
        public static int constructor = -586814357;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.exchange_id = abstractSerializedData.readInt64(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_decryptedMessageActionAbortKey.constructor);
            abstractSerializedData.writeInt64(super.exchange_id);
        }
    }
    
    public static class TL_decryptedMessageActionAcceptKey extends DecryptedMessageAction
    {
        public static int constructor = 1877046107;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.exchange_id = abstractSerializedData.readInt64(b);
            super.g_b = abstractSerializedData.readByteArray(b);
            super.key_fingerprint = abstractSerializedData.readInt64(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_decryptedMessageActionAcceptKey.constructor);
            abstractSerializedData.writeInt64(super.exchange_id);
            abstractSerializedData.writeByteArray(super.g_b);
            abstractSerializedData.writeInt64(super.key_fingerprint);
        }
    }
    
    public static class TL_decryptedMessageActionCommitKey extends DecryptedMessageAction
    {
        public static int constructor = -332526693;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.exchange_id = abstractSerializedData.readInt64(b);
            super.key_fingerprint = abstractSerializedData.readInt64(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_decryptedMessageActionCommitKey.constructor);
            abstractSerializedData.writeInt64(super.exchange_id);
            abstractSerializedData.writeInt64(super.key_fingerprint);
        }
    }
    
    public static class TL_decryptedMessageActionDeleteMessages extends DecryptedMessageAction
    {
        public static int constructor = 1700872964;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    super.random_ids.add(abstractSerializedData.readInt64(b));
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_decryptedMessageActionDeleteMessages.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.random_ids.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                abstractSerializedData.writeInt64(super.random_ids.get(i));
            }
        }
    }
    
    public static class TL_decryptedMessageActionFlushHistory extends DecryptedMessageAction
    {
        public static int constructor = 1729750108;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_decryptedMessageActionFlushHistory.constructor);
        }
    }
    
    public static class TL_decryptedMessageActionNoop extends DecryptedMessageAction
    {
        public static int constructor = -1473258141;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_decryptedMessageActionNoop.constructor);
        }
    }
    
    public static class TL_decryptedMessageActionNotifyLayer extends DecryptedMessageAction
    {
        public static int constructor = -217806717;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.layer = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_decryptedMessageActionNotifyLayer.constructor);
            abstractSerializedData.writeInt32(super.layer);
        }
    }
    
    public static class TL_decryptedMessageActionReadMessages extends DecryptedMessageAction
    {
        public static int constructor = 206520510;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    super.random_ids.add(abstractSerializedData.readInt64(b));
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_decryptedMessageActionReadMessages.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.random_ids.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                abstractSerializedData.writeInt64(super.random_ids.get(i));
            }
        }
    }
    
    public static class TL_decryptedMessageActionRequestKey extends DecryptedMessageAction
    {
        public static int constructor = -204906213;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.exchange_id = abstractSerializedData.readInt64(b);
            super.g_a = abstractSerializedData.readByteArray(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_decryptedMessageActionRequestKey.constructor);
            abstractSerializedData.writeInt64(super.exchange_id);
            abstractSerializedData.writeByteArray(super.g_a);
        }
    }
    
    public static class TL_decryptedMessageActionResend extends DecryptedMessageAction
    {
        public static int constructor = 1360072880;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.start_seq_no = abstractSerializedData.readInt32(b);
            super.end_seq_no = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_decryptedMessageActionResend.constructor);
            abstractSerializedData.writeInt32(super.start_seq_no);
            abstractSerializedData.writeInt32(super.end_seq_no);
        }
    }
    
    public static class TL_decryptedMessageActionScreenshotMessages extends DecryptedMessageAction
    {
        public static int constructor = -1967000459;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    super.random_ids.add(abstractSerializedData.readInt64(b));
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_decryptedMessageActionScreenshotMessages.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.random_ids.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                abstractSerializedData.writeInt64(super.random_ids.get(i));
            }
        }
    }
    
    public static class TL_decryptedMessageActionSetMessageTTL extends DecryptedMessageAction
    {
        public static int constructor = -1586283796;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.ttl_seconds = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_decryptedMessageActionSetMessageTTL.constructor);
            abstractSerializedData.writeInt32(super.ttl_seconds);
        }
    }
    
    public static class TL_decryptedMessageActionTyping extends DecryptedMessageAction
    {
        public static int constructor = -860719551;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.action = SendMessageAction.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_decryptedMessageActionTyping.constructor);
            super.action.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_decryptedMessageLayer extends TLObject
    {
        public static int constructor = 467867529;
        public int in_seq_no;
        public int layer;
        public DecryptedMessage message;
        public int out_seq_no;
        public byte[] random_bytes;
        
        public static TL_decryptedMessageLayer TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_decryptedMessageLayer.constructor == i) {
                final TL_decryptedMessageLayer tl_decryptedMessageLayer = new TL_decryptedMessageLayer();
                tl_decryptedMessageLayer.readParams(abstractSerializedData, b);
                return tl_decryptedMessageLayer;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_decryptedMessageLayer", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.random_bytes = abstractSerializedData.readByteArray(b);
            this.layer = abstractSerializedData.readInt32(b);
            this.in_seq_no = abstractSerializedData.readInt32(b);
            this.out_seq_no = abstractSerializedData.readInt32(b);
            this.message = DecryptedMessage.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_decryptedMessageLayer.constructor);
            abstractSerializedData.writeByteArray(this.random_bytes);
            abstractSerializedData.writeInt32(this.layer);
            abstractSerializedData.writeInt32(this.in_seq_no);
            abstractSerializedData.writeInt32(this.out_seq_no);
            this.message.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_decryptedMessageMediaAudio extends DecryptedMessageMedia
    {
        public static int constructor = 1474341323;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.duration = abstractSerializedData.readInt32(b);
            super.mime_type = abstractSerializedData.readString(b);
            super.size = abstractSerializedData.readInt32(b);
            super.key = abstractSerializedData.readByteArray(b);
            super.iv = abstractSerializedData.readByteArray(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_decryptedMessageMediaAudio.constructor);
            abstractSerializedData.writeInt32(super.duration);
            abstractSerializedData.writeString(super.mime_type);
            abstractSerializedData.writeInt32(super.size);
            abstractSerializedData.writeByteArray(super.key);
            abstractSerializedData.writeByteArray(super.iv);
        }
    }
    
    public static class TL_decryptedMessageMediaAudio_layer8 extends TL_decryptedMessageMediaAudio
    {
        public static int constructor = 1619031439;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.duration = abstractSerializedData.readInt32(b);
            super.size = abstractSerializedData.readInt32(b);
            super.key = abstractSerializedData.readByteArray(b);
            super.iv = abstractSerializedData.readByteArray(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_decryptedMessageMediaAudio_layer8.constructor);
            abstractSerializedData.writeInt32(super.duration);
            abstractSerializedData.writeInt32(super.size);
            abstractSerializedData.writeByteArray(super.key);
            abstractSerializedData.writeByteArray(super.iv);
        }
    }
    
    public static class TL_decryptedMessageMediaContact extends DecryptedMessageMedia
    {
        public static int constructor = 1485441687;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.phone_number = abstractSerializedData.readString(b);
            super.first_name = abstractSerializedData.readString(b);
            super.last_name = abstractSerializedData.readString(b);
            super.user_id = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_decryptedMessageMediaContact.constructor);
            abstractSerializedData.writeString(super.phone_number);
            abstractSerializedData.writeString(super.first_name);
            abstractSerializedData.writeString(super.last_name);
            abstractSerializedData.writeInt32(super.user_id);
        }
    }
    
    public static class TL_decryptedMessageMediaDocument extends DecryptedMessageMedia
    {
        public static int constructor = 2063502050;
        public byte[] thumb;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.thumb = abstractSerializedData.readByteArray(b);
            super.thumb_w = abstractSerializedData.readInt32(b);
            super.thumb_h = abstractSerializedData.readInt32(b);
            super.mime_type = abstractSerializedData.readString(b);
            super.size = abstractSerializedData.readInt32(b);
            super.key = abstractSerializedData.readByteArray(b);
            super.iv = abstractSerializedData.readByteArray(b);
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final DocumentAttribute tLdeserialize = DocumentAttribute.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.attributes.add(tLdeserialize);
                    ++i;
                }
                super.caption = abstractSerializedData.readString(b);
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_decryptedMessageMediaDocument.constructor);
            abstractSerializedData.writeByteArray(this.thumb);
            abstractSerializedData.writeInt32(super.thumb_w);
            abstractSerializedData.writeInt32(super.thumb_h);
            abstractSerializedData.writeString(super.mime_type);
            abstractSerializedData.writeInt32(super.size);
            abstractSerializedData.writeByteArray(super.key);
            abstractSerializedData.writeByteArray(super.iv);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.attributes.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                super.attributes.get(i).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeString(super.caption);
        }
    }
    
    public static class TL_decryptedMessageMediaDocument_layer8 extends TL_decryptedMessageMediaDocument
    {
        public static int constructor = -1332395189;
        public byte[] thumb;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.thumb = abstractSerializedData.readByteArray(b);
            super.thumb_w = abstractSerializedData.readInt32(b);
            super.thumb_h = abstractSerializedData.readInt32(b);
            super.file_name = abstractSerializedData.readString(b);
            super.mime_type = abstractSerializedData.readString(b);
            super.size = abstractSerializedData.readInt32(b);
            super.key = abstractSerializedData.readByteArray(b);
            super.iv = abstractSerializedData.readByteArray(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_decryptedMessageMediaDocument_layer8.constructor);
            abstractSerializedData.writeByteArray(this.thumb);
            abstractSerializedData.writeInt32(super.thumb_w);
            abstractSerializedData.writeInt32(super.thumb_h);
            abstractSerializedData.writeString(super.file_name);
            abstractSerializedData.writeString(super.mime_type);
            abstractSerializedData.writeInt32(super.size);
            abstractSerializedData.writeByteArray(super.key);
            abstractSerializedData.writeByteArray(super.iv);
        }
    }
    
    public static class TL_decryptedMessageMediaEmpty extends DecryptedMessageMedia
    {
        public static int constructor = 144661578;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_decryptedMessageMediaEmpty.constructor);
        }
    }
    
    public static class TL_decryptedMessageMediaExternalDocument extends DecryptedMessageMedia
    {
        public static int constructor = -90853155;
        public PhotoSize thumb;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt64(b);
            super.access_hash = abstractSerializedData.readInt64(b);
            super.date = abstractSerializedData.readInt32(b);
            super.mime_type = abstractSerializedData.readString(b);
            super.size = abstractSerializedData.readInt32(b);
            this.thumb = PhotoSize.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.dc_id = abstractSerializedData.readInt32(b);
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final DocumentAttribute tLdeserialize = DocumentAttribute.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.attributes.add(tLdeserialize);
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_decryptedMessageMediaExternalDocument.constructor);
            abstractSerializedData.writeInt64(super.id);
            abstractSerializedData.writeInt64(super.access_hash);
            abstractSerializedData.writeInt32(super.date);
            abstractSerializedData.writeString(super.mime_type);
            abstractSerializedData.writeInt32(super.size);
            this.thumb.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(super.dc_id);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.attributes.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                super.attributes.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_decryptedMessageMediaGeoPoint extends DecryptedMessageMedia
    {
        public static int constructor = 893913689;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.lat = abstractSerializedData.readDouble(b);
            super._long = abstractSerializedData.readDouble(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_decryptedMessageMediaGeoPoint.constructor);
            abstractSerializedData.writeDouble(super.lat);
            abstractSerializedData.writeDouble(super._long);
        }
    }
    
    public static class TL_decryptedMessageMediaPhoto extends DecryptedMessageMedia
    {
        public static int constructor = -235238024;
        public byte[] thumb;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.thumb = abstractSerializedData.readByteArray(b);
            super.thumb_w = abstractSerializedData.readInt32(b);
            super.thumb_h = abstractSerializedData.readInt32(b);
            super.w = abstractSerializedData.readInt32(b);
            super.h = abstractSerializedData.readInt32(b);
            super.size = abstractSerializedData.readInt32(b);
            super.key = abstractSerializedData.readByteArray(b);
            super.iv = abstractSerializedData.readByteArray(b);
            super.caption = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_decryptedMessageMediaPhoto.constructor);
            abstractSerializedData.writeByteArray(this.thumb);
            abstractSerializedData.writeInt32(super.thumb_w);
            abstractSerializedData.writeInt32(super.thumb_h);
            abstractSerializedData.writeInt32(super.w);
            abstractSerializedData.writeInt32(super.h);
            abstractSerializedData.writeInt32(super.size);
            abstractSerializedData.writeByteArray(super.key);
            abstractSerializedData.writeByteArray(super.iv);
            abstractSerializedData.writeString(super.caption);
        }
    }
    
    public static class TL_decryptedMessageMediaPhoto_layer8 extends TL_decryptedMessageMediaPhoto
    {
        public static int constructor = 846826124;
        public byte[] thumb;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.thumb = abstractSerializedData.readByteArray(b);
            super.thumb_w = abstractSerializedData.readInt32(b);
            super.thumb_h = abstractSerializedData.readInt32(b);
            super.w = abstractSerializedData.readInt32(b);
            super.h = abstractSerializedData.readInt32(b);
            super.size = abstractSerializedData.readInt32(b);
            super.key = abstractSerializedData.readByteArray(b);
            super.iv = abstractSerializedData.readByteArray(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_decryptedMessageMediaPhoto_layer8.constructor);
            abstractSerializedData.writeByteArray(this.thumb);
            abstractSerializedData.writeInt32(super.thumb_w);
            abstractSerializedData.writeInt32(super.thumb_h);
            abstractSerializedData.writeInt32(super.w);
            abstractSerializedData.writeInt32(super.h);
            abstractSerializedData.writeInt32(super.size);
            abstractSerializedData.writeByteArray(super.key);
            abstractSerializedData.writeByteArray(super.iv);
        }
    }
    
    public static class TL_decryptedMessageMediaVenue extends DecryptedMessageMedia
    {
        public static int constructor = -1978796689;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.lat = abstractSerializedData.readDouble(b);
            super._long = abstractSerializedData.readDouble(b);
            super.title = abstractSerializedData.readString(b);
            super.address = abstractSerializedData.readString(b);
            super.provider = abstractSerializedData.readString(b);
            super.venue_id = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_decryptedMessageMediaVenue.constructor);
            abstractSerializedData.writeDouble(super.lat);
            abstractSerializedData.writeDouble(super._long);
            abstractSerializedData.writeString(super.title);
            abstractSerializedData.writeString(super.address);
            abstractSerializedData.writeString(super.provider);
            abstractSerializedData.writeString(super.venue_id);
        }
    }
    
    public static class TL_decryptedMessageMediaVideo extends DecryptedMessageMedia
    {
        public static int constructor = -1760785394;
        public byte[] thumb;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.thumb = abstractSerializedData.readByteArray(b);
            super.thumb_w = abstractSerializedData.readInt32(b);
            super.thumb_h = abstractSerializedData.readInt32(b);
            super.duration = abstractSerializedData.readInt32(b);
            super.mime_type = abstractSerializedData.readString(b);
            super.w = abstractSerializedData.readInt32(b);
            super.h = abstractSerializedData.readInt32(b);
            super.size = abstractSerializedData.readInt32(b);
            super.key = abstractSerializedData.readByteArray(b);
            super.iv = abstractSerializedData.readByteArray(b);
            super.caption = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_decryptedMessageMediaVideo.constructor);
            abstractSerializedData.writeByteArray(this.thumb);
            abstractSerializedData.writeInt32(super.thumb_w);
            abstractSerializedData.writeInt32(super.thumb_h);
            abstractSerializedData.writeInt32(super.duration);
            abstractSerializedData.writeString(super.mime_type);
            abstractSerializedData.writeInt32(super.w);
            abstractSerializedData.writeInt32(super.h);
            abstractSerializedData.writeInt32(super.size);
            abstractSerializedData.writeByteArray(super.key);
            abstractSerializedData.writeByteArray(super.iv);
            abstractSerializedData.writeString(super.caption);
        }
    }
    
    public static class TL_decryptedMessageMediaVideo_layer17 extends TL_decryptedMessageMediaVideo
    {
        public static int constructor = 1380598109;
        public byte[] thumb;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.thumb = abstractSerializedData.readByteArray(b);
            super.thumb_w = abstractSerializedData.readInt32(b);
            super.thumb_h = abstractSerializedData.readInt32(b);
            super.duration = abstractSerializedData.readInt32(b);
            super.mime_type = abstractSerializedData.readString(b);
            super.w = abstractSerializedData.readInt32(b);
            super.h = abstractSerializedData.readInt32(b);
            super.size = abstractSerializedData.readInt32(b);
            super.key = abstractSerializedData.readByteArray(b);
            super.iv = abstractSerializedData.readByteArray(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_decryptedMessageMediaVideo_layer17.constructor);
            abstractSerializedData.writeByteArray(this.thumb);
            abstractSerializedData.writeInt32(super.thumb_w);
            abstractSerializedData.writeInt32(super.thumb_h);
            abstractSerializedData.writeInt32(super.duration);
            abstractSerializedData.writeString(super.mime_type);
            abstractSerializedData.writeInt32(super.w);
            abstractSerializedData.writeInt32(super.h);
            abstractSerializedData.writeInt32(super.size);
            abstractSerializedData.writeByteArray(super.key);
            abstractSerializedData.writeByteArray(super.iv);
        }
    }
    
    public static class TL_decryptedMessageMediaVideo_layer8 extends TL_decryptedMessageMediaVideo
    {
        public static int constructor = 1290694387;
        public byte[] thumb;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.thumb = abstractSerializedData.readByteArray(b);
            super.thumb_w = abstractSerializedData.readInt32(b);
            super.thumb_h = abstractSerializedData.readInt32(b);
            super.duration = abstractSerializedData.readInt32(b);
            super.w = abstractSerializedData.readInt32(b);
            super.h = abstractSerializedData.readInt32(b);
            super.size = abstractSerializedData.readInt32(b);
            super.key = abstractSerializedData.readByteArray(b);
            super.iv = abstractSerializedData.readByteArray(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_decryptedMessageMediaVideo_layer8.constructor);
            abstractSerializedData.writeByteArray(this.thumb);
            abstractSerializedData.writeInt32(super.thumb_w);
            abstractSerializedData.writeInt32(super.thumb_h);
            abstractSerializedData.writeInt32(super.duration);
            abstractSerializedData.writeInt32(super.w);
            abstractSerializedData.writeInt32(super.h);
            abstractSerializedData.writeInt32(super.size);
            abstractSerializedData.writeByteArray(super.key);
            abstractSerializedData.writeByteArray(super.iv);
        }
    }
    
    public static class TL_decryptedMessageMediaWebPage extends DecryptedMessageMedia
    {
        public static int constructor = -452652584;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.url = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_decryptedMessageMediaWebPage.constructor);
            abstractSerializedData.writeString(super.url);
        }
    }
    
    public static class TL_decryptedMessageService extends DecryptedMessage
    {
        public static int constructor = 1930838368;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.random_id = abstractSerializedData.readInt64(b);
            super.action = DecryptedMessageAction.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_decryptedMessageService.constructor);
            abstractSerializedData.writeInt64(super.random_id);
            super.action.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_decryptedMessageService_layer8 extends TL_decryptedMessageService
    {
        public static int constructor = -1438109059;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.random_id = abstractSerializedData.readInt64(b);
            super.random_bytes = abstractSerializedData.readByteArray(b);
            super.action = DecryptedMessageAction.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_decryptedMessageService_layer8.constructor);
            abstractSerializedData.writeInt64(super.random_id);
            abstractSerializedData.writeByteArray(super.random_bytes);
            super.action.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_decryptedMessage_layer17 extends TL_decryptedMessage
    {
        public static int constructor = 541931640;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.random_id = abstractSerializedData.readInt64(b);
            super.ttl = abstractSerializedData.readInt32(b);
            super.message = abstractSerializedData.readString(b);
            super.media = DecryptedMessageMedia.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_decryptedMessage_layer17.constructor);
            abstractSerializedData.writeInt64(super.random_id);
            abstractSerializedData.writeInt32(super.ttl);
            abstractSerializedData.writeString(super.message);
            super.media.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_decryptedMessage_layer45 extends TL_decryptedMessage
    {
        public static int constructor = 917541342;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            super.random_id = abstractSerializedData.readInt64(b);
            super.ttl = abstractSerializedData.readInt32(b);
            super.message = abstractSerializedData.readString(b);
            if ((super.flags & 0x200) != 0x0) {
                super.media = DecryptedMessageMedia.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            if ((super.flags & 0x80) != 0x0) {
                final int int32 = abstractSerializedData.readInt32(b);
                int i = 0;
                if (int32 != 481674261) {
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
                }
                else {
                    while (i < abstractSerializedData.readInt32(b)) {
                        final MessageEntity tLdeserialize = MessageEntity.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize == null) {
                            return;
                        }
                        super.entities.add(tLdeserialize);
                        ++i;
                    }
                }
            }
            if ((super.flags & 0x800) != 0x0) {
                super.via_bot_name = abstractSerializedData.readString(b);
            }
            if ((super.flags & 0x8) != 0x0) {
                super.reply_to_random_id = abstractSerializedData.readInt64(b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_decryptedMessage_layer45.constructor);
            abstractSerializedData.writeInt32(super.flags);
            abstractSerializedData.writeInt64(super.random_id);
            abstractSerializedData.writeInt32(super.ttl);
            abstractSerializedData.writeString(super.message);
            if ((super.flags & 0x200) != 0x0) {
                super.media.serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x80) != 0x0) {
                abstractSerializedData.writeInt32(481674261);
                final int size = super.entities.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; ++i) {
                    super.entities.get(i).serializeToStream(abstractSerializedData);
                }
            }
            if ((super.flags & 0x800) != 0x0) {
                abstractSerializedData.writeString(super.via_bot_name);
            }
            if ((super.flags & 0x8) != 0x0) {
                abstractSerializedData.writeInt64(super.reply_to_random_id);
            }
        }
    }
    
    public static class TL_decryptedMessage_layer8 extends TL_decryptedMessage
    {
        public static int constructor = 528568095;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.random_id = abstractSerializedData.readInt64(b);
            super.random_bytes = abstractSerializedData.readByteArray(b);
            super.message = abstractSerializedData.readString(b);
            super.media = DecryptedMessageMedia.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_decryptedMessage_layer8.constructor);
            abstractSerializedData.writeInt64(super.random_id);
            abstractSerializedData.writeByteArray(super.random_bytes);
            abstractSerializedData.writeString(super.message);
            super.media.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_dialog extends Dialog
    {
        public static int constructor = 739712882;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            final boolean b2 = false;
            super.pinned = ((flags & 0x4) != 0x0);
            boolean unread_mark = b2;
            if ((super.flags & 0x8) != 0x0) {
                unread_mark = true;
            }
            super.unread_mark = unread_mark;
            super.peer = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.top_message = abstractSerializedData.readInt32(b);
            super.read_inbox_max_id = abstractSerializedData.readInt32(b);
            super.read_outbox_max_id = abstractSerializedData.readInt32(b);
            super.unread_count = abstractSerializedData.readInt32(b);
            super.unread_mentions_count = abstractSerializedData.readInt32(b);
            super.notify_settings = PeerNotifySettings.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            if ((super.flags & 0x1) != 0x0) {
                super.pts = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x2) != 0x0) {
                super.draft = DraftMessage.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            if ((super.flags & 0x10) != 0x0) {
                super.folder_id = abstractSerializedData.readInt32(b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_dialog.constructor);
            int flags;
            if (super.pinned) {
                flags = (super.flags | 0x4);
            }
            else {
                flags = (super.flags & 0xFFFFFFFB);
            }
            super.flags = flags;
            int flags2;
            if (super.unread_mark) {
                flags2 = (super.flags | 0x8);
            }
            else {
                flags2 = (super.flags & 0xFFFFFFF7);
            }
            abstractSerializedData.writeInt32(super.flags = flags2);
            super.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(super.top_message);
            abstractSerializedData.writeInt32(super.read_inbox_max_id);
            abstractSerializedData.writeInt32(super.read_outbox_max_id);
            abstractSerializedData.writeInt32(super.unread_count);
            abstractSerializedData.writeInt32(super.unread_mentions_count);
            super.notify_settings.serializeToStream(abstractSerializedData);
            if ((super.flags & 0x1) != 0x0) {
                abstractSerializedData.writeInt32(super.pts);
            }
            if ((super.flags & 0x2) != 0x0) {
                super.draft.serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x10) != 0x0) {
                abstractSerializedData.writeInt32(super.folder_id);
            }
        }
    }
    
    public static class TL_dialogFolder extends Dialog
    {
        public static int constructor = 1908216652;
        public TL_folder folder;
        public int unread_muted_messages_count;
        public int unread_muted_peers_count;
        public int unread_unmuted_messages_count;
        public int unread_unmuted_peers_count;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            super.pinned = ((super.flags & 0x4) != 0x0);
            this.folder = TL_folder.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.peer = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.top_message = abstractSerializedData.readInt32(b);
            this.unread_muted_peers_count = abstractSerializedData.readInt32(b);
            this.unread_unmuted_peers_count = abstractSerializedData.readInt32(b);
            this.unread_muted_messages_count = abstractSerializedData.readInt32(b);
            this.unread_unmuted_messages_count = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_dialogFolder.constructor);
            int flags;
            if (super.pinned) {
                flags = (super.flags | 0x4);
            }
            else {
                flags = (super.flags & 0xFFFFFFFB);
            }
            abstractSerializedData.writeInt32(super.flags = flags);
            this.folder.serializeToStream(abstractSerializedData);
            super.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(super.top_message);
            abstractSerializedData.writeInt32(this.unread_muted_peers_count);
            abstractSerializedData.writeInt32(this.unread_unmuted_peers_count);
            abstractSerializedData.writeInt32(this.unread_muted_messages_count);
            abstractSerializedData.writeInt32(this.unread_unmuted_messages_count);
        }
    }
    
    public static class TL_dialogPeer extends DialogPeer
    {
        public static int constructor = -445792507;
        public Peer peer;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.peer = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_dialogPeer.constructor);
            this.peer.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_dialogPeerFolder extends DialogPeer
    {
        public static int constructor = 1363483106;
        public int folder_id;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.folder_id = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_dialogPeerFolder.constructor);
            abstractSerializedData.writeInt32(this.folder_id);
        }
    }
    
    public static class TL_document extends Document
    {
        public static int constructor = -1683841855;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            super.id = abstractSerializedData.readInt64(b);
            super.access_hash = abstractSerializedData.readInt64(b);
            super.file_reference = abstractSerializedData.readByteArray(b);
            super.date = abstractSerializedData.readInt32(b);
            super.mime_type = abstractSerializedData.readString(b);
            super.size = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            final int n = 0;
            if ((flags & 0x1) != 0x0) {
                final int int32 = abstractSerializedData.readInt32(b);
                if (int32 != 481674261) {
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
                }
                else {
                    for (int int33 = abstractSerializedData.readInt32(b), i = 0; i < int33; ++i) {
                        final PhotoSize tLdeserialize = PhotoSize.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize == null) {
                            return;
                        }
                        super.thumbs.add(tLdeserialize);
                    }
                }
            }
            super.dc_id = abstractSerializedData.readInt32(b);
            final int int34 = abstractSerializedData.readInt32(b);
            if (int34 == 481674261) {
                for (int int35 = abstractSerializedData.readInt32(b), j = n; j < int35; ++j) {
                    final DocumentAttribute tLdeserialize2 = DocumentAttribute.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize2 == null) {
                        return;
                    }
                    super.attributes.add(tLdeserialize2);
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int34));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_document.constructor);
            abstractSerializedData.writeInt32(super.flags);
            abstractSerializedData.writeInt64(super.id);
            abstractSerializedData.writeInt64(super.access_hash);
            abstractSerializedData.writeByteArray(super.file_reference);
            abstractSerializedData.writeInt32(super.date);
            abstractSerializedData.writeString(super.mime_type);
            abstractSerializedData.writeInt32(super.size);
            final int flags = super.flags;
            final int n = 0;
            if ((flags & 0x1) != 0x0) {
                abstractSerializedData.writeInt32(481674261);
                final int size = super.thumbs.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; ++i) {
                    super.thumbs.get(i).serializeToStream(abstractSerializedData);
                }
            }
            abstractSerializedData.writeInt32(super.dc_id);
            abstractSerializedData.writeInt32(481674261);
            final int size2 = super.attributes.size();
            abstractSerializedData.writeInt32(size2);
            for (int j = n; j < size2; ++j) {
                super.attributes.get(j).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_documentAttributeAnimated extends DocumentAttribute
    {
        public static int constructor = 297109817;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_documentAttributeAnimated.constructor);
        }
    }
    
    public static class TL_documentAttributeAudio extends DocumentAttribute
    {
        public static int constructor = -1739392570;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            super.voice = ((super.flags & 0x400) != 0x0);
            super.duration = abstractSerializedData.readInt32(b);
            if ((super.flags & 0x1) != 0x0) {
                super.title = abstractSerializedData.readString(b);
            }
            if ((super.flags & 0x2) != 0x0) {
                super.performer = abstractSerializedData.readString(b);
            }
            if ((super.flags & 0x4) != 0x0) {
                super.waveform = abstractSerializedData.readByteArray(b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_documentAttributeAudio.constructor);
            int flags;
            if (super.voice) {
                flags = (super.flags | 0x400);
            }
            else {
                flags = (super.flags & 0xFFFFFBFF);
            }
            abstractSerializedData.writeInt32(super.flags = flags);
            abstractSerializedData.writeInt32(super.duration);
            if ((super.flags & 0x1) != 0x0) {
                abstractSerializedData.writeString(super.title);
            }
            if ((super.flags & 0x2) != 0x0) {
                abstractSerializedData.writeString(super.performer);
            }
            if ((super.flags & 0x4) != 0x0) {
                abstractSerializedData.writeByteArray(super.waveform);
            }
        }
    }
    
    public static class TL_documentAttributeAudio_layer45 extends TL_documentAttributeAudio
    {
        public static int constructor = -556656416;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.duration = abstractSerializedData.readInt32(b);
            super.title = abstractSerializedData.readString(b);
            super.performer = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_documentAttributeAudio_layer45.constructor);
            abstractSerializedData.writeInt32(super.duration);
            abstractSerializedData.writeString(super.title);
            abstractSerializedData.writeString(super.performer);
        }
    }
    
    public static class TL_documentAttributeAudio_old extends TL_documentAttributeAudio
    {
        public static int constructor = 85215461;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.duration = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_documentAttributeAudio_old.constructor);
            abstractSerializedData.writeInt32(super.duration);
        }
    }
    
    public static class TL_documentAttributeFilename extends DocumentAttribute
    {
        public static int constructor = 358154344;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.file_name = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_documentAttributeFilename.constructor);
            abstractSerializedData.writeString(super.file_name);
        }
    }
    
    public static class TL_documentAttributeHasStickers extends DocumentAttribute
    {
        public static int constructor = -1744710921;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_documentAttributeHasStickers.constructor);
        }
    }
    
    public static class TL_documentAttributeImageSize extends DocumentAttribute
    {
        public static int constructor = 1815593308;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.w = abstractSerializedData.readInt32(b);
            super.h = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_documentAttributeImageSize.constructor);
            abstractSerializedData.writeInt32(super.w);
            abstractSerializedData.writeInt32(super.h);
        }
    }
    
    public static class TL_documentAttributeSticker extends DocumentAttribute
    {
        public static int constructor = 1662637586;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            super.mask = ((super.flags & 0x2) != 0x0);
            super.alt = abstractSerializedData.readString(b);
            super.stickerset = InputStickerSet.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            if ((super.flags & 0x1) != 0x0) {
                super.mask_coords = TL_maskCoords.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_documentAttributeSticker.constructor);
            int flags;
            if (super.mask) {
                flags = (super.flags | 0x2);
            }
            else {
                flags = (super.flags & 0xFFFFFFFD);
            }
            abstractSerializedData.writeInt32(super.flags = flags);
            abstractSerializedData.writeString(super.alt);
            super.stickerset.serializeToStream(abstractSerializedData);
            if ((super.flags & 0x1) != 0x0) {
                super.mask_coords.serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_documentAttributeSticker_layer55 extends TL_documentAttributeSticker
    {
        public static int constructor = 978674434;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.alt = abstractSerializedData.readString(b);
            super.stickerset = InputStickerSet.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_documentAttributeSticker_layer55.constructor);
            abstractSerializedData.writeString(super.alt);
            super.stickerset.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_documentAttributeSticker_old extends TL_documentAttributeSticker
    {
        public static int constructor = -83208409;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_documentAttributeSticker_old.constructor);
        }
    }
    
    public static class TL_documentAttributeSticker_old2 extends TL_documentAttributeSticker
    {
        public static int constructor = -1723033470;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.alt = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_documentAttributeSticker_old2.constructor);
            abstractSerializedData.writeString(super.alt);
        }
    }
    
    public static class TL_documentAttributeVideo extends DocumentAttribute
    {
        public static int constructor = 250621158;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            final boolean b2 = true;
            super.round_message = ((flags & 0x1) != 0x0);
            super.supports_streaming = ((super.flags & 0x2) != 0x0 && b2);
            super.duration = abstractSerializedData.readInt32(b);
            super.w = abstractSerializedData.readInt32(b);
            super.h = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_documentAttributeVideo.constructor);
            int flags;
            if (super.round_message) {
                flags = (super.flags | 0x1);
            }
            else {
                flags = (super.flags & 0xFFFFFFFE);
            }
            super.flags = flags;
            int flags2;
            if (super.supports_streaming) {
                flags2 = (super.flags | 0x2);
            }
            else {
                flags2 = (super.flags & 0xFFFFFFFD);
            }
            abstractSerializedData.writeInt32(super.flags = flags2);
            abstractSerializedData.writeInt32(super.duration);
            abstractSerializedData.writeInt32(super.w);
            abstractSerializedData.writeInt32(super.h);
        }
    }
    
    public static class TL_documentAttributeVideo_layer65 extends TL_documentAttributeVideo
    {
        public static int constructor = 1494273227;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.duration = abstractSerializedData.readInt32(b);
            super.w = abstractSerializedData.readInt32(b);
            super.h = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_documentAttributeVideo_layer65.constructor);
            abstractSerializedData.writeInt32(super.duration);
            abstractSerializedData.writeInt32(super.w);
            abstractSerializedData.writeInt32(super.h);
        }
    }
    
    public static class TL_documentEmpty extends Document
    {
        public static int constructor = 922273905;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt64(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_documentEmpty.constructor);
            abstractSerializedData.writeInt64(super.id);
        }
    }
    
    public static class TL_documentEncrypted extends Document
    {
        public static int constructor = 1431655768;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt64(b);
            super.access_hash = abstractSerializedData.readInt64(b);
            super.date = abstractSerializedData.readInt32(b);
            super.mime_type = abstractSerializedData.readString(b);
            super.size = abstractSerializedData.readInt32(b);
            super.thumbs.add(PhotoSize.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b));
            super.dc_id = abstractSerializedData.readInt32(b);
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final DocumentAttribute tLdeserialize = DocumentAttribute.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.attributes.add(tLdeserialize);
                    ++i;
                }
                super.key = abstractSerializedData.readByteArray(b);
                super.iv = abstractSerializedData.readByteArray(b);
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_documentEncrypted.constructor);
            abstractSerializedData.writeInt64(super.id);
            abstractSerializedData.writeInt64(super.access_hash);
            abstractSerializedData.writeInt32(super.date);
            abstractSerializedData.writeString(super.mime_type);
            abstractSerializedData.writeInt32(super.size);
            final ArrayList<PhotoSize> thumbs = (ArrayList<PhotoSize>)super.thumbs;
            int i = 0;
            thumbs.get(0).serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(super.dc_id);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.attributes.size();
            abstractSerializedData.writeInt32(size);
            while (i < size) {
                super.attributes.get(i).serializeToStream(abstractSerializedData);
                ++i;
            }
            abstractSerializedData.writeByteArray(super.key);
            abstractSerializedData.writeByteArray(super.iv);
        }
    }
    
    public static class TL_documentEncrypted_old extends TL_document
    {
        public static int constructor = 1431655766;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt64(b);
            super.access_hash = abstractSerializedData.readInt64(b);
            super.user_id = abstractSerializedData.readInt32(b);
            super.date = abstractSerializedData.readInt32(b);
            super.file_name = abstractSerializedData.readString(b);
            super.mime_type = abstractSerializedData.readString(b);
            super.size = abstractSerializedData.readInt32(b);
            super.thumbs.add(PhotoSize.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b));
            super.dc_id = abstractSerializedData.readInt32(b);
            super.key = abstractSerializedData.readByteArray(b);
            super.iv = abstractSerializedData.readByteArray(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_documentEncrypted_old.constructor);
            abstractSerializedData.writeInt64(super.id);
            abstractSerializedData.writeInt64(super.access_hash);
            abstractSerializedData.writeInt32(super.user_id);
            abstractSerializedData.writeInt32(super.date);
            abstractSerializedData.writeString(super.file_name);
            abstractSerializedData.writeString(super.mime_type);
            abstractSerializedData.writeInt32(super.size);
            super.thumbs.get(0).serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(super.dc_id);
            abstractSerializedData.writeByteArray(super.key);
            abstractSerializedData.writeByteArray(super.iv);
        }
    }
    
    public static class TL_document_layer53 extends TL_document
    {
        public static int constructor = -106717361;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt64(b);
            super.access_hash = abstractSerializedData.readInt64(b);
            super.date = abstractSerializedData.readInt32(b);
            super.mime_type = abstractSerializedData.readString(b);
            super.size = abstractSerializedData.readInt32(b);
            super.thumbs.add(PhotoSize.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b));
            super.dc_id = abstractSerializedData.readInt32(b);
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final DocumentAttribute tLdeserialize = DocumentAttribute.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.attributes.add(tLdeserialize);
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_document_layer53.constructor);
            abstractSerializedData.writeInt64(super.id);
            abstractSerializedData.writeInt64(super.access_hash);
            abstractSerializedData.writeInt32(super.date);
            abstractSerializedData.writeString(super.mime_type);
            abstractSerializedData.writeInt32(super.size);
            final ArrayList<PhotoSize> thumbs = (ArrayList<PhotoSize>)super.thumbs;
            int i = 0;
            thumbs.get(0).serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(super.dc_id);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.attributes.size();
            abstractSerializedData.writeInt32(size);
            while (i < size) {
                super.attributes.get(i).serializeToStream(abstractSerializedData);
                ++i;
            }
        }
    }
    
    public static class TL_document_layer82 extends TL_document
    {
        public static int constructor = -2027738169;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt64(b);
            super.access_hash = abstractSerializedData.readInt64(b);
            super.date = abstractSerializedData.readInt32(b);
            super.mime_type = abstractSerializedData.readString(b);
            super.size = abstractSerializedData.readInt32(b);
            super.thumbs.add(PhotoSize.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b));
            super.dc_id = abstractSerializedData.readInt32(b);
            abstractSerializedData.readInt32(b);
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final DocumentAttribute tLdeserialize = DocumentAttribute.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.attributes.add(tLdeserialize);
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_document_layer82.constructor);
            abstractSerializedData.writeInt64(super.id);
            abstractSerializedData.writeInt64(super.access_hash);
            abstractSerializedData.writeInt32(super.date);
            abstractSerializedData.writeString(super.mime_type);
            abstractSerializedData.writeInt32(super.size);
            final ArrayList<PhotoSize> thumbs = (ArrayList<PhotoSize>)super.thumbs;
            int i = 0;
            thumbs.get(0).serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(super.dc_id);
            abstractSerializedData.writeInt32(0);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.attributes.size();
            abstractSerializedData.writeInt32(size);
            while (i < size) {
                super.attributes.get(i).serializeToStream(abstractSerializedData);
                ++i;
            }
        }
    }
    
    public static class TL_document_layer92 extends TL_document
    {
        public static int constructor = 1498631756;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt64(b);
            super.access_hash = abstractSerializedData.readInt64(b);
            super.file_reference = abstractSerializedData.readByteArray(b);
            super.date = abstractSerializedData.readInt32(b);
            super.mime_type = abstractSerializedData.readString(b);
            super.size = abstractSerializedData.readInt32(b);
            super.thumbs.add(PhotoSize.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b));
            super.dc_id = abstractSerializedData.readInt32(b);
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final DocumentAttribute tLdeserialize = DocumentAttribute.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.attributes.add(tLdeserialize);
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_document_layer92.constructor);
            abstractSerializedData.writeInt64(super.id);
            abstractSerializedData.writeInt64(super.access_hash);
            abstractSerializedData.writeByteArray(super.file_reference);
            abstractSerializedData.writeInt32(super.date);
            abstractSerializedData.writeString(super.mime_type);
            abstractSerializedData.writeInt32(super.size);
            final ArrayList<PhotoSize> thumbs = (ArrayList<PhotoSize>)super.thumbs;
            int i = 0;
            thumbs.get(0).serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(super.dc_id);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.attributes.size();
            abstractSerializedData.writeInt32(size);
            while (i < size) {
                super.attributes.get(i).serializeToStream(abstractSerializedData);
                ++i;
            }
        }
    }
    
    public static class TL_document_old extends TL_document
    {
        public static int constructor = -1627626714;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt64(b);
            super.access_hash = abstractSerializedData.readInt64(b);
            super.user_id = abstractSerializedData.readInt32(b);
            super.date = abstractSerializedData.readInt32(b);
            super.file_name = abstractSerializedData.readString(b);
            super.mime_type = abstractSerializedData.readString(b);
            super.size = abstractSerializedData.readInt32(b);
            super.thumbs.add(PhotoSize.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b));
            super.dc_id = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_document_old.constructor);
            abstractSerializedData.writeInt64(super.id);
            abstractSerializedData.writeInt64(super.access_hash);
            abstractSerializedData.writeInt32(super.user_id);
            abstractSerializedData.writeInt32(super.date);
            abstractSerializedData.writeString(super.file_name);
            abstractSerializedData.writeString(super.mime_type);
            abstractSerializedData.writeInt32(super.size);
            super.thumbs.get(0).serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(super.dc_id);
        }
    }
    
    public static class TL_draftMessage extends DraftMessage
    {
        public static int constructor = -40996577;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            int i = 0;
            super.no_webpage = ((flags & 0x2) != 0x0);
            if ((super.flags & 0x1) != 0x0) {
                super.reply_to_msg_id = abstractSerializedData.readInt32(b);
            }
            super.message = abstractSerializedData.readString(b);
            if ((super.flags & 0x8) != 0x0) {
                final int int32 = abstractSerializedData.readInt32(b);
                if (int32 != 481674261) {
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
                }
                else {
                    while (i < abstractSerializedData.readInt32(b)) {
                        final MessageEntity tLdeserialize = MessageEntity.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize == null) {
                            return;
                        }
                        super.entities.add(tLdeserialize);
                        ++i;
                    }
                }
            }
            super.date = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_draftMessage.constructor);
            int flags;
            if (super.no_webpage) {
                flags = (super.flags | 0x2);
            }
            else {
                flags = (super.flags & 0xFFFFFFFD);
            }
            abstractSerializedData.writeInt32(super.flags = flags);
            if ((super.flags & 0x1) != 0x0) {
                abstractSerializedData.writeInt32(super.reply_to_msg_id);
            }
            abstractSerializedData.writeString(super.message);
            if ((super.flags & 0x8) != 0x0) {
                abstractSerializedData.writeInt32(481674261);
                final int size = super.entities.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; ++i) {
                    super.entities.get(i).serializeToStream(abstractSerializedData);
                }
            }
            abstractSerializedData.writeInt32(super.date);
        }
    }
    
    public static class TL_draftMessageEmpty extends DraftMessage
    {
        public static int constructor = 453805082;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            if ((super.flags & 0x1) != 0x0) {
                super.date = abstractSerializedData.readInt32(b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_draftMessageEmpty.constructor);
            abstractSerializedData.writeInt32(super.flags);
            if ((super.flags & 0x1) != 0x0) {
                abstractSerializedData.writeInt32(super.date);
            }
        }
    }
    
    public static class TL_draftMessageEmpty_layer81 extends TL_draftMessageEmpty
    {
        public static int constructor = -1169445179;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_draftMessageEmpty_layer81.constructor);
        }
    }
    
    public static class TL_emojiKeyword extends EmojiKeyword
    {
        public static int constructor = -709641735;
        public ArrayList<String> emoticons;
        public String keyword;
        
        public TL_emojiKeyword() {
            this.emoticons = new ArrayList<String>();
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.keyword = abstractSerializedData.readString(b);
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    this.emoticons.add(abstractSerializedData.readString(b));
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_emojiKeyword.constructor);
            abstractSerializedData.writeString(this.keyword);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.emoticons.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                abstractSerializedData.writeString(this.emoticons.get(i));
            }
        }
    }
    
    public static class TL_emojiKeywordDeleted extends EmojiKeyword
    {
        public static int constructor = 594408994;
        public ArrayList<String> emoticons;
        public String keyword;
        
        public TL_emojiKeywordDeleted() {
            this.emoticons = new ArrayList<String>();
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.keyword = abstractSerializedData.readString(b);
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    this.emoticons.add(abstractSerializedData.readString(b));
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_emojiKeywordDeleted.constructor);
            abstractSerializedData.writeString(this.keyword);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.emoticons.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                abstractSerializedData.writeString(this.emoticons.get(i));
            }
        }
    }
    
    public static class TL_emojiKeywordsDifference extends TLObject
    {
        public static int constructor = 1556570557;
        public int from_version;
        public ArrayList<EmojiKeyword> keywords;
        public String lang_code;
        public int version;
        
        public TL_emojiKeywordsDifference() {
            this.keywords = new ArrayList<EmojiKeyword>();
        }
        
        public static TL_emojiKeywordsDifference TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_emojiKeywordsDifference.constructor == i) {
                final TL_emojiKeywordsDifference tl_emojiKeywordsDifference = new TL_emojiKeywordsDifference();
                tl_emojiKeywordsDifference.readParams(abstractSerializedData, b);
                return tl_emojiKeywordsDifference;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_emojiKeywordsDifference", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.lang_code = abstractSerializedData.readString(b);
            this.from_version = abstractSerializedData.readInt32(b);
            this.version = abstractSerializedData.readInt32(b);
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final EmojiKeyword tLdeserialize = EmojiKeyword.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    this.keywords.add(tLdeserialize);
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_emojiKeywordsDifference.constructor);
            abstractSerializedData.writeString(this.lang_code);
            abstractSerializedData.writeInt32(this.from_version);
            abstractSerializedData.writeInt32(this.version);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.keywords.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                this.keywords.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_emojiLanguage extends TLObject
    {
        public static int constructor = -1275374751;
        public String lang_code;
        
        public static TL_emojiLanguage TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_emojiLanguage.constructor == i) {
                final TL_emojiLanguage tl_emojiLanguage = new TL_emojiLanguage();
                tl_emojiLanguage.readParams(abstractSerializedData, b);
                return tl_emojiLanguage;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_emojiLanguage", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.lang_code = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_emojiLanguage.constructor);
            abstractSerializedData.writeString(this.lang_code);
        }
    }
    
    public static class TL_emojiURL extends TLObject
    {
        public static int constructor = -1519029347;
        public String url;
        
        public static TL_emojiURL TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_emojiURL.constructor == i) {
                final TL_emojiURL tl_emojiURL = new TL_emojiURL();
                tl_emojiURL.readParams(abstractSerializedData, b);
                return tl_emojiURL;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_emojiURL", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.url = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_emojiURL.constructor);
            abstractSerializedData.writeString(this.url);
        }
    }
    
    public static class TL_encryptedChat extends EncryptedChat
    {
        public static int constructor = -94974410;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt32(b);
            super.access_hash = abstractSerializedData.readInt64(b);
            super.date = abstractSerializedData.readInt32(b);
            super.admin_id = abstractSerializedData.readInt32(b);
            super.participant_id = abstractSerializedData.readInt32(b);
            super.g_a_or_b = abstractSerializedData.readByteArray(b);
            super.key_fingerprint = abstractSerializedData.readInt64(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_encryptedChat.constructor);
            abstractSerializedData.writeInt32(super.id);
            abstractSerializedData.writeInt64(super.access_hash);
            abstractSerializedData.writeInt32(super.date);
            abstractSerializedData.writeInt32(super.admin_id);
            abstractSerializedData.writeInt32(super.participant_id);
            abstractSerializedData.writeByteArray(super.g_a_or_b);
            abstractSerializedData.writeInt64(super.key_fingerprint);
        }
    }
    
    public static class TL_encryptedChatDiscarded extends EncryptedChat
    {
        public static int constructor = 332848423;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_encryptedChatDiscarded.constructor);
            abstractSerializedData.writeInt32(super.id);
        }
    }
    
    public static class TL_encryptedChatEmpty extends EncryptedChat
    {
        public static int constructor = -1417756512;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_encryptedChatEmpty.constructor);
            abstractSerializedData.writeInt32(super.id);
        }
    }
    
    public static class TL_encryptedChatRequested extends EncryptedChat
    {
        public static int constructor = -931638658;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt32(b);
            super.access_hash = abstractSerializedData.readInt64(b);
            super.date = abstractSerializedData.readInt32(b);
            super.admin_id = abstractSerializedData.readInt32(b);
            super.participant_id = abstractSerializedData.readInt32(b);
            super.g_a = abstractSerializedData.readByteArray(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_encryptedChatRequested.constructor);
            abstractSerializedData.writeInt32(super.id);
            abstractSerializedData.writeInt64(super.access_hash);
            abstractSerializedData.writeInt32(super.date);
            abstractSerializedData.writeInt32(super.admin_id);
            abstractSerializedData.writeInt32(super.participant_id);
            abstractSerializedData.writeByteArray(super.g_a);
        }
    }
    
    public static class TL_encryptedChatRequested_old extends TL_encryptedChatRequested
    {
        public static int constructor = -39213129;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt32(b);
            super.access_hash = abstractSerializedData.readInt64(b);
            super.date = abstractSerializedData.readInt32(b);
            super.admin_id = abstractSerializedData.readInt32(b);
            super.participant_id = abstractSerializedData.readInt32(b);
            super.g_a = abstractSerializedData.readByteArray(b);
            super.nonce = abstractSerializedData.readByteArray(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_encryptedChatRequested_old.constructor);
            abstractSerializedData.writeInt32(super.id);
            abstractSerializedData.writeInt64(super.access_hash);
            abstractSerializedData.writeInt32(super.date);
            abstractSerializedData.writeInt32(super.admin_id);
            abstractSerializedData.writeInt32(super.participant_id);
            abstractSerializedData.writeByteArray(super.g_a);
            abstractSerializedData.writeByteArray(super.nonce);
        }
    }
    
    public static class TL_encryptedChatWaiting extends EncryptedChat
    {
        public static int constructor = 1006044124;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt32(b);
            super.access_hash = abstractSerializedData.readInt64(b);
            super.date = abstractSerializedData.readInt32(b);
            super.admin_id = abstractSerializedData.readInt32(b);
            super.participant_id = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_encryptedChatWaiting.constructor);
            abstractSerializedData.writeInt32(super.id);
            abstractSerializedData.writeInt64(super.access_hash);
            abstractSerializedData.writeInt32(super.date);
            abstractSerializedData.writeInt32(super.admin_id);
            abstractSerializedData.writeInt32(super.participant_id);
        }
    }
    
    public static class TL_encryptedChat_old extends TL_encryptedChat
    {
        public static int constructor = 1711395151;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt32(b);
            super.access_hash = abstractSerializedData.readInt64(b);
            super.date = abstractSerializedData.readInt32(b);
            super.admin_id = abstractSerializedData.readInt32(b);
            super.participant_id = abstractSerializedData.readInt32(b);
            super.g_a_or_b = abstractSerializedData.readByteArray(b);
            super.nonce = abstractSerializedData.readByteArray(b);
            super.key_fingerprint = abstractSerializedData.readInt64(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_encryptedChat_old.constructor);
            abstractSerializedData.writeInt32(super.id);
            abstractSerializedData.writeInt64(super.access_hash);
            abstractSerializedData.writeInt32(super.date);
            abstractSerializedData.writeInt32(super.admin_id);
            abstractSerializedData.writeInt32(super.participant_id);
            abstractSerializedData.writeByteArray(super.g_a_or_b);
            abstractSerializedData.writeByteArray(super.nonce);
            abstractSerializedData.writeInt64(super.key_fingerprint);
        }
    }
    
    public static class TL_encryptedFile extends EncryptedFile
    {
        public static int constructor = 1248893260;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt64(b);
            super.access_hash = abstractSerializedData.readInt64(b);
            super.size = abstractSerializedData.readInt32(b);
            super.dc_id = abstractSerializedData.readInt32(b);
            super.key_fingerprint = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_encryptedFile.constructor);
            abstractSerializedData.writeInt64(super.id);
            abstractSerializedData.writeInt64(super.access_hash);
            abstractSerializedData.writeInt32(super.size);
            abstractSerializedData.writeInt32(super.dc_id);
            abstractSerializedData.writeInt32(super.key_fingerprint);
        }
    }
    
    public static class TL_encryptedFileEmpty extends EncryptedFile
    {
        public static int constructor = -1038136962;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_encryptedFileEmpty.constructor);
        }
    }
    
    public static class TL_encryptedMessage extends EncryptedMessage
    {
        public static int constructor = -317144808;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.random_id = abstractSerializedData.readInt64(b);
            super.chat_id = abstractSerializedData.readInt32(b);
            super.date = abstractSerializedData.readInt32(b);
            super.bytes = abstractSerializedData.readByteArray(b);
            super.file = EncryptedFile.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_encryptedMessage.constructor);
            abstractSerializedData.writeInt64(super.random_id);
            abstractSerializedData.writeInt32(super.chat_id);
            abstractSerializedData.writeInt32(super.date);
            abstractSerializedData.writeByteArray(super.bytes);
            super.file.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_encryptedMessageService extends EncryptedMessage
    {
        public static int constructor = 594758406;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.random_id = abstractSerializedData.readInt64(b);
            super.chat_id = abstractSerializedData.readInt32(b);
            super.date = abstractSerializedData.readInt32(b);
            super.bytes = abstractSerializedData.readByteArray(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_encryptedMessageService.constructor);
            abstractSerializedData.writeInt64(super.random_id);
            abstractSerializedData.writeInt32(super.chat_id);
            abstractSerializedData.writeInt32(super.date);
            abstractSerializedData.writeByteArray(super.bytes);
        }
    }
    
    public static class TL_error extends TLObject
    {
        public static int constructor = -994444869;
        public int code;
        public String text;
        
        public static TL_error TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_error.constructor == i) {
                final TL_error tl_error = new TL_error();
                tl_error.readParams(abstractSerializedData, b);
                return tl_error;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_error", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.code = abstractSerializedData.readInt32(b);
            this.text = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_error.constructor);
            abstractSerializedData.writeInt32(this.code);
            abstractSerializedData.writeString(this.text);
        }
    }
    
    public static class TL_exportedMessageLink extends TLObject
    {
        public static int constructor = 1571494644;
        public String html;
        public String link;
        
        public static TL_exportedMessageLink TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_exportedMessageLink.constructor == i) {
                final TL_exportedMessageLink tl_exportedMessageLink = new TL_exportedMessageLink();
                tl_exportedMessageLink.readParams(abstractSerializedData, b);
                return tl_exportedMessageLink;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_exportedMessageLink", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.link = abstractSerializedData.readString(b);
            this.html = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_exportedMessageLink.constructor);
            abstractSerializedData.writeString(this.link);
            abstractSerializedData.writeString(this.html);
        }
    }
    
    public static class TL_fileEncryptedLocation extends FileLocation
    {
        public static int constructor = 1431655764;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.dc_id = abstractSerializedData.readInt32(b);
            super.volume_id = abstractSerializedData.readInt64(b);
            super.local_id = abstractSerializedData.readInt32(b);
            super.secret = abstractSerializedData.readInt64(b);
            super.key = abstractSerializedData.readByteArray(b);
            super.iv = abstractSerializedData.readByteArray(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_fileEncryptedLocation.constructor);
            abstractSerializedData.writeInt32(super.dc_id);
            abstractSerializedData.writeInt64(super.volume_id);
            abstractSerializedData.writeInt32(super.local_id);
            abstractSerializedData.writeInt64(super.secret);
            abstractSerializedData.writeByteArray(super.key);
            abstractSerializedData.writeByteArray(super.iv);
        }
    }
    
    public static class TL_fileHash extends TLObject
    {
        public static int constructor = 1648543603;
        public byte[] hash;
        public int limit;
        public int offset;
        
        public static TL_fileHash TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_fileHash.constructor == i) {
                final TL_fileHash tl_fileHash = new TL_fileHash();
                tl_fileHash.readParams(abstractSerializedData, b);
                return tl_fileHash;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_fileHash", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.offset = abstractSerializedData.readInt32(b);
            this.limit = abstractSerializedData.readInt32(b);
            this.hash = abstractSerializedData.readByteArray(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_fileHash.constructor);
            abstractSerializedData.writeInt32(this.offset);
            abstractSerializedData.writeInt32(this.limit);
            abstractSerializedData.writeByteArray(this.hash);
        }
    }
    
    public static class TL_fileLocationToBeDeprecated extends FileLocation
    {
        public static int constructor = -1132476723;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.volume_id = abstractSerializedData.readInt64(b);
            super.local_id = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_fileLocationToBeDeprecated.constructor);
            abstractSerializedData.writeInt64(super.volume_id);
            abstractSerializedData.writeInt32(super.local_id);
        }
    }
    
    public static class TL_fileLocationUnavailable extends FileLocation
    {
        public static int constructor = 2086234950;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.volume_id = abstractSerializedData.readInt64(b);
            super.local_id = abstractSerializedData.readInt32(b);
            super.secret = abstractSerializedData.readInt64(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_fileLocationUnavailable.constructor);
            abstractSerializedData.writeInt64(super.volume_id);
            abstractSerializedData.writeInt32(super.local_id);
            abstractSerializedData.writeInt64(super.secret);
        }
    }
    
    public static class TL_fileLocation_layer82 extends TL_fileLocation_layer97
    {
        public static int constructor = 1406570614;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.dc_id = abstractSerializedData.readInt32(b);
            super.volume_id = abstractSerializedData.readInt64(b);
            super.local_id = abstractSerializedData.readInt32(b);
            super.secret = abstractSerializedData.readInt64(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_fileLocation_layer82.constructor);
            abstractSerializedData.writeInt32(super.dc_id);
            abstractSerializedData.writeInt64(super.volume_id);
            abstractSerializedData.writeInt32(super.local_id);
            abstractSerializedData.writeInt64(super.secret);
        }
    }
    
    public static class TL_fileLocation_layer97 extends FileLocation
    {
        public static int constructor = 152900075;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.dc_id = abstractSerializedData.readInt32(b);
            super.volume_id = abstractSerializedData.readInt64(b);
            super.local_id = abstractSerializedData.readInt32(b);
            super.secret = abstractSerializedData.readInt64(b);
            super.file_reference = abstractSerializedData.readByteArray(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_fileLocation_layer97.constructor);
            abstractSerializedData.writeInt32(super.dc_id);
            abstractSerializedData.writeInt64(super.volume_id);
            abstractSerializedData.writeInt32(super.local_id);
            abstractSerializedData.writeInt64(super.secret);
            abstractSerializedData.writeByteArray(super.file_reference);
        }
    }
    
    public static class TL_folder extends TLObject
    {
        public static int constructor = -11252123;
        public boolean autofill_new_broadcasts;
        public boolean autofill_new_correspondents;
        public boolean autofill_public_groups;
        public int flags;
        public int id;
        public ChatPhoto photo;
        public String title;
        
        public static TL_folder TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_folder.constructor == i) {
                final TL_folder tl_folder = new TL_folder();
                tl_folder.readParams(abstractSerializedData, b);
                return tl_folder;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_folder", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.flags = abstractSerializedData.readInt32(b);
            final int flags = this.flags;
            final boolean b2 = true;
            this.autofill_new_broadcasts = ((flags & 0x1) != 0x0);
            this.autofill_public_groups = ((this.flags & 0x2) != 0x0);
            this.autofill_new_correspondents = ((this.flags & 0x4) != 0x0 && b2);
            this.id = abstractSerializedData.readInt32(b);
            this.title = abstractSerializedData.readString(b);
            if ((this.flags & 0x8) != 0x0) {
                this.photo = ChatPhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_folder.constructor);
            int flags;
            if (this.autofill_new_broadcasts) {
                flags = (this.flags | 0x1);
            }
            else {
                flags = (this.flags & 0xFFFFFFFE);
            }
            this.flags = flags;
            int flags2;
            if (this.autofill_public_groups) {
                flags2 = (this.flags | 0x2);
            }
            else {
                flags2 = (this.flags & 0xFFFFFFFD);
            }
            this.flags = flags2;
            int flags3;
            if (this.autofill_new_correspondents) {
                flags3 = (this.flags | 0x4);
            }
            else {
                flags3 = (this.flags & 0xFFFFFFFB);
            }
            abstractSerializedData.writeInt32(this.flags = flags3);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeString(this.title);
            if ((this.flags & 0x8) != 0x0) {
                this.photo.serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_folderPeer extends TLObject
    {
        public static int constructor = -373643672;
        public int folder_id;
        public Peer peer;
        
        public static TL_folderPeer TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_folderPeer.constructor == i) {
                final TL_folderPeer tl_folderPeer = new TL_folderPeer();
                tl_folderPeer.readParams(abstractSerializedData, b);
                return tl_folderPeer;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_folderPeer", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.peer = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            this.folder_id = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_folderPeer.constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.folder_id);
        }
    }
    
    public static class TL_folders_deleteFolder extends TLObject
    {
        public static int constructor = 472471681;
        public int folder_id;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Updates.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_folders_deleteFolder.constructor);
            abstractSerializedData.writeInt32(this.folder_id);
        }
    }
    
    public static class TL_folders_editPeerFolders extends TLObject
    {
        public static int constructor = 1749536939;
        public ArrayList<TL_inputFolderPeer> folder_peers;
        
        public TL_folders_editPeerFolders() {
            this.folder_peers = new ArrayList<TL_inputFolderPeer>();
        }
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Updates.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_folders_editPeerFolders.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.folder_peers.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                this.folder_peers.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_foundGif extends FoundGif
    {
        public static int constructor = 372165663;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.url = abstractSerializedData.readString(b);
            super.thumb_url = abstractSerializedData.readString(b);
            super.content_url = abstractSerializedData.readString(b);
            super.content_type = abstractSerializedData.readString(b);
            super.w = abstractSerializedData.readInt32(b);
            super.h = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_foundGif.constructor);
            abstractSerializedData.writeString(super.url);
            abstractSerializedData.writeString(super.thumb_url);
            abstractSerializedData.writeString(super.content_url);
            abstractSerializedData.writeString(super.content_type);
            abstractSerializedData.writeInt32(super.w);
            abstractSerializedData.writeInt32(super.h);
        }
    }
    
    public static class TL_foundGifCached extends FoundGif
    {
        public static int constructor = -1670052855;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.url = abstractSerializedData.readString(b);
            super.photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.document = Document.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_foundGifCached.constructor);
            abstractSerializedData.writeString(super.url);
            super.photo.serializeToStream(abstractSerializedData);
            super.document.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_game extends TLObject
    {
        public static int constructor = -1107729093;
        public long access_hash;
        public String description;
        public Document document;
        public int flags;
        public long id;
        public Photo photo;
        public String short_name;
        public String title;
        
        public static TL_game TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_game.constructor == i) {
                final TL_game tl_game = new TL_game();
                tl_game.readParams(abstractSerializedData, b);
                return tl_game;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_game", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.flags = abstractSerializedData.readInt32(b);
            this.id = abstractSerializedData.readInt64(b);
            this.access_hash = abstractSerializedData.readInt64(b);
            this.short_name = abstractSerializedData.readString(b);
            this.title = abstractSerializedData.readString(b);
            this.description = abstractSerializedData.readString(b);
            this.photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            if ((this.flags & 0x1) != 0x0) {
                this.document = Document.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_game.constructor);
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeString(this.short_name);
            abstractSerializedData.writeString(this.title);
            abstractSerializedData.writeString(this.description);
            this.photo.serializeToStream(abstractSerializedData);
            if ((this.flags & 0x1) != 0x0) {
                this.document.serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_geoPoint extends GeoPoint
    {
        public static int constructor = 43446532;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super._long = abstractSerializedData.readDouble(b);
            super.lat = abstractSerializedData.readDouble(b);
            super.access_hash = abstractSerializedData.readInt64(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_geoPoint.constructor);
            abstractSerializedData.writeDouble(super._long);
            abstractSerializedData.writeDouble(super.lat);
            abstractSerializedData.writeInt64(super.access_hash);
        }
    }
    
    public static class TL_geoPointEmpty extends GeoPoint
    {
        public static int constructor = 286776671;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_geoPointEmpty.constructor);
        }
    }
    
    public static class TL_geoPoint_layer81 extends TL_geoPoint
    {
        public static int constructor = 541710092;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super._long = abstractSerializedData.readDouble(b);
            super.lat = abstractSerializedData.readDouble(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_geoPoint_layer81.constructor);
            abstractSerializedData.writeDouble(super._long);
            abstractSerializedData.writeDouble(super.lat);
        }
    }
    
    public static class TL_groupCall extends GroupCall
    {
        public static int constructor = 177149476;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            super.id = abstractSerializedData.readInt64(b);
            super.access_hash = abstractSerializedData.readInt64(b);
            if ((super.flags & 0x1) != 0x0) {
                super.channel_id = abstractSerializedData.readInt32(b);
            }
            super.admin_id = abstractSerializedData.readInt32(b);
            if ((super.flags & 0x2) != 0x0) {
                super.encryption_key = abstractSerializedData.readByteArray(b);
            }
            super.key_fingerprint = abstractSerializedData.readInt64(b);
            super.protocol = TL_phoneCallProtocol.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.connection = TL_groupCallConnection.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.reflector_group_tag = abstractSerializedData.readByteArray(b);
            super.reflector_self_tag = abstractSerializedData.readByteArray(b);
            super.reflector_self_secret = abstractSerializedData.readByteArray(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_groupCall.constructor);
            abstractSerializedData.writeInt32(super.flags);
            abstractSerializedData.writeInt64(super.id);
            abstractSerializedData.writeInt64(super.access_hash);
            if ((super.flags & 0x1) != 0x0) {
                abstractSerializedData.writeInt32(super.channel_id);
            }
            abstractSerializedData.writeInt32(super.admin_id);
            if ((super.flags & 0x2) != 0x0) {
                abstractSerializedData.writeByteArray(super.encryption_key);
            }
            abstractSerializedData.writeInt64(super.key_fingerprint);
            super.protocol.serializeToStream(abstractSerializedData);
            super.connection.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeByteArray(super.reflector_group_tag);
            abstractSerializedData.writeByteArray(super.reflector_self_tag);
            abstractSerializedData.writeByteArray(super.reflector_self_secret);
        }
    }
    
    public static class TL_groupCallConnection extends TLObject
    {
        public static int constructor = 1081287011;
        public long id;
        public String ip;
        public String ipv6;
        public int port;
        
        public static TL_groupCallConnection TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_groupCallConnection.constructor == i) {
                final TL_groupCallConnection tl_groupCallConnection = new TL_groupCallConnection();
                tl_groupCallConnection.readParams(abstractSerializedData, b);
                return tl_groupCallConnection;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_groupCallConnection", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.id = abstractSerializedData.readInt64(b);
            this.ip = abstractSerializedData.readString(b);
            this.ipv6 = abstractSerializedData.readString(b);
            this.port = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_groupCallConnection.constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeString(this.ip);
            abstractSerializedData.writeString(this.ipv6);
            abstractSerializedData.writeInt32(this.port);
        }
    }
    
    public static class TL_groupCallDiscarded extends GroupCall
    {
        public static int constructor = 2004925620;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt64(b);
            super.access_hash = abstractSerializedData.readInt64(b);
            super.duration = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_groupCallDiscarded.constructor);
            abstractSerializedData.writeInt64(super.id);
            abstractSerializedData.writeInt64(super.access_hash);
            abstractSerializedData.writeInt32(super.duration);
        }
    }
    
    public static class TL_groupCallParticipant extends GroupCallParticipant
    {
        public static int constructor = 1486730135;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            boolean readonly = true;
            if ((flags & 0x1) == 0x0) {
                readonly = false;
            }
            super.readonly = readonly;
            super.user_id = abstractSerializedData.readInt32(b);
            super.date = abstractSerializedData.readInt32(b);
            super.member_tag_hash = abstractSerializedData.readByteArray(b);
            super.streams = abstractSerializedData.readByteArray(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_groupCallParticipant.constructor);
            int flags;
            if (super.readonly) {
                flags = (super.flags | 0x1);
            }
            else {
                flags = (super.flags & 0xFFFFFFFE);
            }
            abstractSerializedData.writeInt32(super.flags = flags);
            abstractSerializedData.writeInt32(super.user_id);
            abstractSerializedData.writeInt32(super.date);
            abstractSerializedData.writeByteArray(super.member_tag_hash);
            abstractSerializedData.writeByteArray(super.streams);
        }
    }
    
    public static class TL_groupCallParticipantAdmin extends GroupCallParticipant
    {
        public static int constructor = 1326135736;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.user_id = abstractSerializedData.readInt32(b);
            super.member_tag_hash = abstractSerializedData.readByteArray(b);
            super.streams = abstractSerializedData.readByteArray(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_groupCallParticipantAdmin.constructor);
            abstractSerializedData.writeInt32(super.user_id);
            abstractSerializedData.writeByteArray(super.member_tag_hash);
            abstractSerializedData.writeByteArray(super.streams);
        }
    }
    
    public static class TL_groupCallParticipantInvited extends GroupCallParticipant
    {
        public static int constructor = 930387696;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            super.user_id = abstractSerializedData.readInt32(b);
            super.inviter_id = abstractSerializedData.readInt32(b);
            super.date = abstractSerializedData.readInt32(b);
            if ((super.flags & 0x1) != 0x0) {
                super.phone_call = TL_inputPhoneCall.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_groupCallParticipantInvited.constructor);
            abstractSerializedData.writeInt32(super.flags);
            abstractSerializedData.writeInt32(super.user_id);
            abstractSerializedData.writeInt32(super.inviter_id);
            abstractSerializedData.writeInt32(super.date);
            if ((super.flags & 0x1) != 0x0) {
                super.phone_call.serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_groupCallParticipantLeft extends GroupCallParticipant
    {
        public static int constructor = 1100680690;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.user_id = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_groupCallParticipantLeft.constructor);
            abstractSerializedData.writeInt32(super.user_id);
        }
    }
    
    public static class TL_groupCallPrivate extends GroupCall
    {
        public static int constructor = 1829443076;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            super.id = abstractSerializedData.readInt64(b);
            super.access_hash = abstractSerializedData.readInt64(b);
            if ((super.flags & 0x1) != 0x0) {
                super.channel_id = abstractSerializedData.readInt32(b);
            }
            super.participants_count = abstractSerializedData.readInt32(b);
            super.admin_id = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_groupCallPrivate.constructor);
            abstractSerializedData.writeInt32(super.flags);
            abstractSerializedData.writeInt64(super.id);
            abstractSerializedData.writeInt64(super.access_hash);
            if ((super.flags & 0x1) != 0x0) {
                abstractSerializedData.writeInt32(super.channel_id);
            }
            abstractSerializedData.writeInt32(super.participants_count);
            abstractSerializedData.writeInt32(super.admin_id);
        }
    }
    
    public static class TL_help_acceptTermsOfService extends TLObject
    {
        public static int constructor = -294455398;
        public TL_dataJSON id;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_help_acceptTermsOfService.constructor);
            this.id.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_help_appUpdate extends help_AppUpdate
    {
        public static int constructor = 497489295;
        public Document document;
        public ArrayList<MessageEntity> entities;
        public int flags;
        public int id;
        public boolean popup;
        public String text;
        public String url;
        public String version;
        
        public TL_help_appUpdate() {
            this.entities = new ArrayList<MessageEntity>();
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.flags = abstractSerializedData.readInt32(b);
            final int flags = this.flags;
            int i = 0;
            this.popup = ((flags & 0x1) != 0x0);
            this.id = abstractSerializedData.readInt32(b);
            this.version = abstractSerializedData.readString(b);
            this.text = abstractSerializedData.readString(b);
            final int int32 = abstractSerializedData.readInt32(b);
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final MessageEntity tLdeserialize = MessageEntity.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    this.entities.add(tLdeserialize);
                    ++i;
                }
                if ((this.flags & 0x2) != 0x0) {
                    this.document = Document.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                }
                if ((this.flags & 0x4) != 0x0) {
                    this.url = abstractSerializedData.readString(b);
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_help_appUpdate.constructor);
            int flags;
            if (this.popup) {
                flags = (this.flags | 0x1);
            }
            else {
                flags = (this.flags & 0xFFFFFFFE);
            }
            abstractSerializedData.writeInt32(this.flags = flags);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeString(this.version);
            abstractSerializedData.writeString(this.text);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.entities.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                this.entities.get(i).serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 0x2) != 0x0) {
                this.document.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 0x4) != 0x0) {
                abstractSerializedData.writeString(this.url);
            }
        }
    }
    
    public static class TL_help_deepLinkInfo extends help_DeepLinkInfo
    {
        public static int constructor = 1783556146;
        public ArrayList<MessageEntity> entities;
        public int flags;
        public String message;
        public boolean update_app;
        
        public TL_help_deepLinkInfo() {
            this.entities = new ArrayList<MessageEntity>();
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.flags = abstractSerializedData.readInt32(b);
            final int flags = this.flags;
            int i = 0;
            this.update_app = ((flags & 0x1) != 0x0);
            this.message = abstractSerializedData.readString(b);
            if ((this.flags & 0x2) != 0x0) {
                final int int32 = abstractSerializedData.readInt32(b);
                if (int32 != 481674261) {
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
                }
                else {
                    while (i < abstractSerializedData.readInt32(b)) {
                        final MessageEntity tLdeserialize = MessageEntity.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize == null) {
                            return;
                        }
                        this.entities.add(tLdeserialize);
                        ++i;
                    }
                }
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_help_deepLinkInfo.constructor);
            int flags;
            if (this.update_app) {
                flags = (this.flags | 0x1);
            }
            else {
                flags = (this.flags & 0xFFFFFFFE);
            }
            abstractSerializedData.writeInt32(this.flags = flags);
            abstractSerializedData.writeString(this.message);
            if ((this.flags & 0x2) != 0x0) {
                abstractSerializedData.writeInt32(481674261);
                final int size = this.entities.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; ++i) {
                    this.entities.get(i).serializeToStream(abstractSerializedData);
                }
            }
        }
    }
    
    public static class TL_help_deepLinkInfoEmpty extends help_DeepLinkInfo
    {
        public static int constructor = 1722786150;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_help_deepLinkInfoEmpty.constructor);
        }
    }
    
    public static class TL_help_editUserInfo extends TLObject
    {
        public static int constructor = 1723407216;
        public ArrayList<MessageEntity> entities;
        public String message;
        public InputUser user_id;
        
        public TL_help_editUserInfo() {
            this.entities = new ArrayList<MessageEntity>();
        }
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return help_UserInfo.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_help_editUserInfo.constructor);
            this.user_id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(this.message);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.entities.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                this.entities.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_help_getAppChangelog extends TLObject
    {
        public static int constructor = -1877938321;
        public String prev_app_version;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Updates.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_help_getAppChangelog.constructor);
            abstractSerializedData.writeString(this.prev_app_version);
        }
    }
    
    public static class TL_help_getAppConfig extends TLObject
    {
        public static int constructor = -1735311088;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return JSONValue.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_help_getAppConfig.constructor);
        }
    }
    
    public static class TL_help_getAppUpdate extends TLObject
    {
        public static int constructor = 1378703997;
        public String source;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return help_AppUpdate.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_help_getAppUpdate.constructor);
            abstractSerializedData.writeString(this.source);
        }
    }
    
    public static class TL_help_getConfig extends TLObject
    {
        public static int constructor = -990308245;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_config.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_help_getConfig.constructor);
        }
    }
    
    public static class TL_help_getDeepLinkInfo extends TLObject
    {
        public static int constructor = 1072547679;
        public String path;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return help_DeepLinkInfo.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_help_getDeepLinkInfo.constructor);
            abstractSerializedData.writeString(this.path);
        }
    }
    
    public static class TL_help_getInviteText extends TLObject
    {
        public static int constructor = 1295590211;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_help_inviteText.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_help_getInviteText.constructor);
        }
    }
    
    public static class TL_help_getNearestDc extends TLObject
    {
        public static int constructor = 531836966;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_nearestDc.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_help_getNearestDc.constructor);
        }
    }
    
    public static class TL_help_getPassportConfig extends TLObject
    {
        public static int constructor = -966677240;
        public int hash;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return help_PassportConfig.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_help_getPassportConfig.constructor);
            abstractSerializedData.writeInt32(this.hash);
        }
    }
    
    public static class TL_help_getProxyData extends TLObject
    {
        public static int constructor = 1031231713;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return help_ProxyData.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_help_getProxyData.constructor);
        }
    }
    
    public static class TL_help_getRecentMeUrls extends TLObject
    {
        public static int constructor = 1036054804;
        public String referer;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_help_recentMeUrls.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_help_getRecentMeUrls.constructor);
            abstractSerializedData.writeString(this.referer);
        }
    }
    
    public static class TL_help_getSupport extends TLObject
    {
        public static int constructor = -1663104819;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_help_support.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_help_getSupport.constructor);
        }
    }
    
    public static class TL_help_getSupportName extends TLObject
    {
        public static int constructor = -748624084;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_help_supportName.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_help_getSupportName.constructor);
        }
    }
    
    public static class TL_help_getTermsOfServiceUpdate extends TLObject
    {
        public static int constructor = 749019089;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return help_TermsOfServiceUpdate.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_help_getTermsOfServiceUpdate.constructor);
        }
    }
    
    public static class TL_help_getUserInfo extends TLObject
    {
        public static int constructor = 59377875;
        public InputUser user_id;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return help_UserInfo.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_help_getUserInfo.constructor);
            this.user_id.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_help_inviteText extends TLObject
    {
        public static int constructor = 415997816;
        public String message;
        
        public static TL_help_inviteText TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_help_inviteText.constructor == i) {
                final TL_help_inviteText tl_help_inviteText = new TL_help_inviteText();
                tl_help_inviteText.readParams(abstractSerializedData, b);
                return tl_help_inviteText;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_help_inviteText", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.message = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_help_inviteText.constructor);
            abstractSerializedData.writeString(this.message);
        }
    }
    
    public static class TL_help_noAppUpdate extends help_AppUpdate
    {
        public static int constructor = -1000708810;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_help_noAppUpdate.constructor);
        }
    }
    
    public static class TL_help_passportConfig extends help_PassportConfig
    {
        public static int constructor = -1600596305;
        public TL_dataJSON countries_langs;
        public int hash;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.hash = abstractSerializedData.readInt32(b);
            this.countries_langs = TL_dataJSON.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_help_passportConfig.constructor);
            abstractSerializedData.writeInt32(this.hash);
            this.countries_langs.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_help_passportConfigNotModified extends help_PassportConfig
    {
        public static int constructor = -1078332329;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_help_passportConfigNotModified.constructor);
        }
    }
    
    public static class TL_help_proxyDataEmpty extends help_ProxyData
    {
        public static int constructor = -526508104;
        public int expires;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.expires = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_help_proxyDataEmpty.constructor);
            abstractSerializedData.writeInt32(this.expires);
        }
    }
    
    public static class TL_help_proxyDataPromo extends help_ProxyData
    {
        public static int constructor = 737668643;
        public ArrayList<Chat> chats;
        public int expires;
        public Peer peer;
        public ArrayList<User> users;
        
        public TL_help_proxyDataPromo() {
            this.chats = new ArrayList<Chat>();
            this.users = new ArrayList<User>();
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.expires = abstractSerializedData.readInt32(b);
            this.peer = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            final int int32 = abstractSerializedData.readInt32(b);
            final int n = 0;
            if (int32 != 481674261) {
                if (!b) {
                    return;
                }
                throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
            }
            else {
                for (int int33 = abstractSerializedData.readInt32(b), i = 0; i < int33; ++i) {
                    final Chat tLdeserialize = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    this.chats.add(tLdeserialize);
                }
                final int int34 = abstractSerializedData.readInt32(b);
                if (int34 == 481674261) {
                    for (int int35 = abstractSerializedData.readInt32(b), j = n; j < int35; ++j) {
                        final User tLdeserialize2 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize2 == null) {
                            return;
                        }
                        this.users.add(tLdeserialize2);
                    }
                    return;
                }
                if (!b) {
                    return;
                }
                throw new RuntimeException(String.format("wrong Vector magic, got %x", int34));
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_help_proxyDataPromo.constructor);
            abstractSerializedData.writeInt32(this.expires);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.chats.size();
            abstractSerializedData.writeInt32(size);
            final int n = 0;
            for (int i = 0; i < size; ++i) {
                this.chats.get(i).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size2 = this.users.size();
            abstractSerializedData.writeInt32(size2);
            for (int j = n; j < size2; ++j) {
                this.users.get(j).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_help_recentMeUrls extends TLObject
    {
        public static int constructor = 235081943;
        public ArrayList<Chat> chats;
        public ArrayList<RecentMeUrl> urls;
        public ArrayList<User> users;
        
        public TL_help_recentMeUrls() {
            this.urls = new ArrayList<RecentMeUrl>();
            this.chats = new ArrayList<Chat>();
            this.users = new ArrayList<User>();
        }
        
        public static TL_help_recentMeUrls TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_help_recentMeUrls.constructor == i) {
                final TL_help_recentMeUrls tl_help_recentMeUrls = new TL_help_recentMeUrls();
                tl_help_recentMeUrls.readParams(abstractSerializedData, b);
                return tl_help_recentMeUrls;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_help_recentMeUrls", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            final int int32 = abstractSerializedData.readInt32(b);
            final int n = 0;
            if (int32 != 481674261) {
                if (!b) {
                    return;
                }
                throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
            }
            else {
                for (int int33 = abstractSerializedData.readInt32(b), i = 0; i < int33; ++i) {
                    final RecentMeUrl tLdeserialize = RecentMeUrl.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    this.urls.add(tLdeserialize);
                }
                final int int34 = abstractSerializedData.readInt32(b);
                if (int34 != 481674261) {
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int34));
                }
                else {
                    for (int int35 = abstractSerializedData.readInt32(b), j = 0; j < int35; ++j) {
                        final Chat tLdeserialize2 = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize2 == null) {
                            return;
                        }
                        this.chats.add(tLdeserialize2);
                    }
                    final int int36 = abstractSerializedData.readInt32(b);
                    if (int36 == 481674261) {
                        for (int int37 = abstractSerializedData.readInt32(b), k = n; k < int37; ++k) {
                            final User tLdeserialize3 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                            if (tLdeserialize3 == null) {
                                return;
                            }
                            this.users.add(tLdeserialize3);
                        }
                        return;
                    }
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int36));
                }
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_help_recentMeUrls.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.urls.size();
            abstractSerializedData.writeInt32(size);
            final int n = 0;
            for (int i = 0; i < size; ++i) {
                this.urls.get(i).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size2 = this.chats.size();
            abstractSerializedData.writeInt32(size2);
            for (int j = 0; j < size2; ++j) {
                this.chats.get(j).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size3 = this.users.size();
            abstractSerializedData.writeInt32(size3);
            for (int k = n; k < size3; ++k) {
                this.users.get(k).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_help_saveAppLog extends TLObject
    {
        public static int constructor = 1862465352;
        public ArrayList<TL_inputAppEvent> events;
        
        public TL_help_saveAppLog() {
            this.events = new ArrayList<TL_inputAppEvent>();
        }
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_help_saveAppLog.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.events.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                this.events.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_help_setBotUpdatesStatus extends TLObject
    {
        public static int constructor = -333262899;
        public String message;
        public int pending_updates_count;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_help_setBotUpdatesStatus.constructor);
            abstractSerializedData.writeInt32(this.pending_updates_count);
            abstractSerializedData.writeString(this.message);
        }
    }
    
    public static class TL_help_support extends TLObject
    {
        public static int constructor = 398898678;
        public String phone_number;
        public User user;
        
        public static TL_help_support TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_help_support.constructor == i) {
                final TL_help_support tl_help_support = new TL_help_support();
                tl_help_support.readParams(abstractSerializedData, b);
                return tl_help_support;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_help_support", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.phone_number = abstractSerializedData.readString(b);
            this.user = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_help_support.constructor);
            abstractSerializedData.writeString(this.phone_number);
            this.user.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_help_supportName extends TLObject
    {
        public static int constructor = -1945767479;
        public String name;
        
        public static TL_help_supportName TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_help_supportName.constructor == i) {
                final TL_help_supportName tl_help_supportName = new TL_help_supportName();
                tl_help_supportName.readParams(abstractSerializedData, b);
                return tl_help_supportName;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_help_supportName", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.name = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_help_supportName.constructor);
            abstractSerializedData.writeString(this.name);
        }
    }
    
    public static class TL_help_termsOfService extends TLObject
    {
        public static int constructor = 2013922064;
        public ArrayList<MessageEntity> entities;
        public int flags;
        public TL_dataJSON id;
        public int min_age_confirm;
        public boolean popup;
        public String text;
        
        public TL_help_termsOfService() {
            this.entities = new ArrayList<MessageEntity>();
        }
        
        public static TL_help_termsOfService TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_help_termsOfService.constructor == i) {
                final TL_help_termsOfService tl_help_termsOfService = new TL_help_termsOfService();
                tl_help_termsOfService.readParams(abstractSerializedData, b);
                return tl_help_termsOfService;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_help_termsOfService", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.flags = abstractSerializedData.readInt32(b);
            final int flags = this.flags;
            int i = 0;
            this.popup = ((flags & 0x1) != 0x0);
            this.id = TL_dataJSON.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            this.text = abstractSerializedData.readString(b);
            final int int32 = abstractSerializedData.readInt32(b);
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final MessageEntity tLdeserialize = MessageEntity.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    this.entities.add(tLdeserialize);
                    ++i;
                }
                if ((this.flags & 0x2) != 0x0) {
                    this.min_age_confirm = abstractSerializedData.readInt32(b);
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_help_termsOfService.constructor);
            int flags;
            if (this.popup) {
                flags = (this.flags | 0x1);
            }
            else {
                flags = (this.flags & 0xFFFFFFFE);
            }
            abstractSerializedData.writeInt32(this.flags = flags);
            this.id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(this.text);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.entities.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                this.entities.get(i).serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 0x2) != 0x0) {
                abstractSerializedData.writeInt32(this.min_age_confirm);
            }
        }
    }
    
    public static class TL_help_termsOfServiceUpdate extends help_TermsOfServiceUpdate
    {
        public static int constructor = 686618977;
        public int expires;
        public TL_help_termsOfService terms_of_service;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.expires = abstractSerializedData.readInt32(b);
            this.terms_of_service = TL_help_termsOfService.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_help_termsOfServiceUpdate.constructor);
            abstractSerializedData.writeInt32(this.expires);
            this.terms_of_service.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_help_termsOfServiceUpdateEmpty extends help_TermsOfServiceUpdate
    {
        public static int constructor = -483352705;
        public int expires;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.expires = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_help_termsOfServiceUpdateEmpty.constructor);
            abstractSerializedData.writeInt32(this.expires);
        }
    }
    
    public static class TL_help_userInfo extends help_UserInfo
    {
        public static int constructor = 32192344;
        public String author;
        public int date;
        public ArrayList<MessageEntity> entities;
        public String message;
        
        public TL_help_userInfo() {
            this.entities = new ArrayList<MessageEntity>();
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.message = abstractSerializedData.readString(b);
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final MessageEntity tLdeserialize = MessageEntity.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    this.entities.add(tLdeserialize);
                    ++i;
                }
                this.author = abstractSerializedData.readString(b);
                this.date = abstractSerializedData.readInt32(b);
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_help_userInfo.constructor);
            abstractSerializedData.writeString(this.message);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.entities.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                this.entities.get(i).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeString(this.author);
            abstractSerializedData.writeInt32(this.date);
        }
    }
    
    public static class TL_help_userInfoEmpty extends help_UserInfo
    {
        public static int constructor = -206688531;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_help_userInfoEmpty.constructor);
        }
    }
    
    public static class TL_highScore extends TLObject
    {
        public static int constructor = 1493171408;
        public int pos;
        public int score;
        public int user_id;
        
        public static TL_highScore TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_highScore.constructor == i) {
                final TL_highScore tl_highScore = new TL_highScore();
                tl_highScore.readParams(abstractSerializedData, b);
                return tl_highScore;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_highScore", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.pos = abstractSerializedData.readInt32(b);
            this.user_id = abstractSerializedData.readInt32(b);
            this.score = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_highScore.constructor);
            abstractSerializedData.writeInt32(this.pos);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeInt32(this.score);
        }
    }
    
    public static class TL_importedContact extends TLObject
    {
        public static int constructor = -805141448;
        public long client_id;
        public int user_id;
        
        public static TL_importedContact TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_importedContact.constructor == i) {
                final TL_importedContact tl_importedContact = new TL_importedContact();
                tl_importedContact.readParams(abstractSerializedData, b);
                return tl_importedContact;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_importedContact", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.user_id = abstractSerializedData.readInt32(b);
            this.client_id = abstractSerializedData.readInt64(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_importedContact.constructor);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeInt64(this.client_id);
        }
    }
    
    public static class TL_inlineBotSwitchPM extends TLObject
    {
        public static int constructor = 1008755359;
        public String start_param;
        public String text;
        
        public static TL_inlineBotSwitchPM TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_inlineBotSwitchPM.constructor == i) {
                final TL_inlineBotSwitchPM tl_inlineBotSwitchPM = new TL_inlineBotSwitchPM();
                tl_inlineBotSwitchPM.readParams(abstractSerializedData, b);
                return tl_inlineBotSwitchPM;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_inlineBotSwitchPM", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.text = abstractSerializedData.readString(b);
            this.start_param = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inlineBotSwitchPM.constructor);
            abstractSerializedData.writeString(this.text);
            abstractSerializedData.writeString(this.start_param);
        }
    }
    
    public static class TL_inputAppEvent extends TLObject
    {
        public static int constructor = 488313413;
        public JSONValue data;
        public long peer;
        public double time;
        public String type;
        
        public static TL_inputAppEvent TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_inputAppEvent.constructor == i) {
                final TL_inputAppEvent tl_inputAppEvent = new TL_inputAppEvent();
                tl_inputAppEvent.readParams(abstractSerializedData, b);
                return tl_inputAppEvent;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_inputAppEvent", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.time = abstractSerializedData.readDouble(b);
            this.type = abstractSerializedData.readString(b);
            this.peer = abstractSerializedData.readInt64(b);
            this.data = JSONValue.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputAppEvent.constructor);
            abstractSerializedData.writeDouble(this.time);
            abstractSerializedData.writeString(this.type);
            abstractSerializedData.writeInt64(this.peer);
            this.data.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_inputBotInlineMessageID extends TLObject
    {
        public static int constructor = -1995686519;
        public long access_hash;
        public int dc_id;
        public long id;
        
        public static TL_inputBotInlineMessageID TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_inputBotInlineMessageID.constructor == i) {
                final TL_inputBotInlineMessageID tl_inputBotInlineMessageID = new TL_inputBotInlineMessageID();
                tl_inputBotInlineMessageID.readParams(abstractSerializedData, b);
                return tl_inputBotInlineMessageID;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_inputBotInlineMessageID", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.dc_id = abstractSerializedData.readInt32(b);
            this.id = abstractSerializedData.readInt64(b);
            this.access_hash = abstractSerializedData.readInt64(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputBotInlineMessageID.constructor);
            abstractSerializedData.writeInt32(this.dc_id);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
        }
    }
    
    public static class TL_inputChannel extends InputChannel
    {
        public static int constructor = -1343524562;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.channel_id = abstractSerializedData.readInt32(b);
            super.access_hash = abstractSerializedData.readInt64(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputChannel.constructor);
            abstractSerializedData.writeInt32(super.channel_id);
            abstractSerializedData.writeInt64(super.access_hash);
        }
    }
    
    public static class TL_inputChannelEmpty extends InputChannel
    {
        public static int constructor = -292807034;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputChannelEmpty.constructor);
        }
    }
    
    public static class TL_inputChannelFromMessage extends InputChannel
    {
        public static int constructor = 707290417;
        public int msg_id;
        public InputPeer peer;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.peer = InputPeer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            this.msg_id = abstractSerializedData.readInt32(b);
            super.channel_id = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputChannelFromMessage.constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.msg_id);
            abstractSerializedData.writeInt32(super.channel_id);
        }
    }
    
    public static class TL_inputChatPhoto extends InputChatPhoto
    {
        public static int constructor = -1991004873;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = InputPhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputChatPhoto.constructor);
            super.id.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_inputChatPhotoEmpty extends InputChatPhoto
    {
        public static int constructor = 480546647;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputChatPhotoEmpty.constructor);
        }
    }
    
    public static class TL_inputChatUploadedPhoto extends InputChatPhoto
    {
        public static int constructor = -1837345356;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.file = InputFile.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputChatUploadedPhoto.constructor);
            super.file.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_inputCheckPasswordEmpty extends InputCheckPasswordSRP
    {
        public static int constructor = -1736378792;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputCheckPasswordEmpty.constructor);
        }
    }
    
    public static class TL_inputCheckPasswordSRP extends InputCheckPasswordSRP
    {
        public static int constructor = -763367294;
        public byte[] A;
        public byte[] M1;
        public long srp_id;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.srp_id = abstractSerializedData.readInt64(b);
            this.A = abstractSerializedData.readByteArray(b);
            this.M1 = abstractSerializedData.readByteArray(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputCheckPasswordSRP.constructor);
            abstractSerializedData.writeInt64(this.srp_id);
            abstractSerializedData.writeByteArray(this.A);
            abstractSerializedData.writeByteArray(this.M1);
        }
    }
    
    public static class TL_inputDialogPeer extends InputDialogPeer
    {
        public static int constructor = -55902537;
        public InputPeer peer;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.peer = InputPeer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputDialogPeer.constructor);
            this.peer.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_inputDialogPeerFolder extends InputDialogPeer
    {
        public static int constructor = 1684014375;
        public int folder_id;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.folder_id = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputDialogPeerFolder.constructor);
            abstractSerializedData.writeInt32(this.folder_id);
        }
    }
    
    public static class TL_inputDocument extends InputDocument
    {
        public static int constructor = 448771445;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt64(b);
            super.access_hash = abstractSerializedData.readInt64(b);
            super.file_reference = abstractSerializedData.readByteArray(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputDocument.constructor);
            abstractSerializedData.writeInt64(super.id);
            abstractSerializedData.writeInt64(super.access_hash);
            abstractSerializedData.writeByteArray(super.file_reference);
        }
    }
    
    public static class TL_inputDocumentEmpty extends InputDocument
    {
        public static int constructor = 1928391342;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputDocumentEmpty.constructor);
        }
    }
    
    public static class TL_inputDocumentFileLocation extends InputFileLocation
    {
        public static int constructor = -1160743548;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt64(b);
            super.access_hash = abstractSerializedData.readInt64(b);
            super.file_reference = abstractSerializedData.readByteArray(b);
            super.thumb_size = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputDocumentFileLocation.constructor);
            abstractSerializedData.writeInt64(super.id);
            abstractSerializedData.writeInt64(super.access_hash);
            abstractSerializedData.writeByteArray(super.file_reference);
            abstractSerializedData.writeString(super.thumb_size);
        }
    }
    
    public static class TL_inputEncryptedChat extends TLObject
    {
        public static int constructor = -247351839;
        public long access_hash;
        public int chat_id;
        
        public static TL_inputEncryptedChat TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_inputEncryptedChat.constructor == i) {
                final TL_inputEncryptedChat tl_inputEncryptedChat = new TL_inputEncryptedChat();
                tl_inputEncryptedChat.readParams(abstractSerializedData, b);
                return tl_inputEncryptedChat;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_inputEncryptedChat", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.chat_id = abstractSerializedData.readInt32(b);
            this.access_hash = abstractSerializedData.readInt64(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputEncryptedChat.constructor);
            abstractSerializedData.writeInt32(this.chat_id);
            abstractSerializedData.writeInt64(this.access_hash);
        }
    }
    
    public static class TL_inputEncryptedFile extends InputEncryptedFile
    {
        public static int constructor = 1511503333;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt64(b);
            super.access_hash = abstractSerializedData.readInt64(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputEncryptedFile.constructor);
            abstractSerializedData.writeInt64(super.id);
            abstractSerializedData.writeInt64(super.access_hash);
        }
    }
    
    public static class TL_inputEncryptedFileBigUploaded extends InputEncryptedFile
    {
        public static int constructor = 767652808;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt64(b);
            super.parts = abstractSerializedData.readInt32(b);
            super.key_fingerprint = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputEncryptedFileBigUploaded.constructor);
            abstractSerializedData.writeInt64(super.id);
            abstractSerializedData.writeInt32(super.parts);
            abstractSerializedData.writeInt32(super.key_fingerprint);
        }
    }
    
    public static class TL_inputEncryptedFileEmpty extends InputEncryptedFile
    {
        public static int constructor = 406307684;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputEncryptedFileEmpty.constructor);
        }
    }
    
    public static class TL_inputEncryptedFileLocation extends InputFileLocation
    {
        public static int constructor = -182231723;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt64(b);
            super.access_hash = abstractSerializedData.readInt64(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputEncryptedFileLocation.constructor);
            abstractSerializedData.writeInt64(super.id);
            abstractSerializedData.writeInt64(super.access_hash);
        }
    }
    
    public static class TL_inputEncryptedFileUploaded extends InputEncryptedFile
    {
        public static int constructor = 1690108678;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt64(b);
            super.parts = abstractSerializedData.readInt32(b);
            super.md5_checksum = abstractSerializedData.readString(b);
            super.key_fingerprint = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputEncryptedFileUploaded.constructor);
            abstractSerializedData.writeInt64(super.id);
            abstractSerializedData.writeInt32(super.parts);
            abstractSerializedData.writeString(super.md5_checksum);
            abstractSerializedData.writeInt32(super.key_fingerprint);
        }
    }
    
    public static class TL_inputFile extends InputFile
    {
        public static int constructor = -181407105;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt64(b);
            super.parts = abstractSerializedData.readInt32(b);
            super.name = abstractSerializedData.readString(b);
            super.md5_checksum = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputFile.constructor);
            abstractSerializedData.writeInt64(super.id);
            abstractSerializedData.writeInt32(super.parts);
            abstractSerializedData.writeString(super.name);
            abstractSerializedData.writeString(super.md5_checksum);
        }
    }
    
    public static class TL_inputFileBig extends InputFile
    {
        public static int constructor = -95482955;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt64(b);
            super.parts = abstractSerializedData.readInt32(b);
            super.name = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputFileBig.constructor);
            abstractSerializedData.writeInt64(super.id);
            abstractSerializedData.writeInt32(super.parts);
            abstractSerializedData.writeString(super.name);
        }
    }
    
    public static class TL_inputFileLocation extends InputFileLocation
    {
        public static int constructor = -539317279;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.volume_id = abstractSerializedData.readInt64(b);
            super.local_id = abstractSerializedData.readInt32(b);
            super.secret = abstractSerializedData.readInt64(b);
            super.file_reference = abstractSerializedData.readByteArray(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputFileLocation.constructor);
            abstractSerializedData.writeInt64(super.volume_id);
            abstractSerializedData.writeInt32(super.local_id);
            abstractSerializedData.writeInt64(super.secret);
            abstractSerializedData.writeByteArray(super.file_reference);
        }
    }
    
    public static class TL_inputFolderPeer extends TLObject
    {
        public static int constructor = -70073706;
        public int folder_id;
        public InputPeer peer;
        
        public static TL_inputFolderPeer TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_inputFolderPeer.constructor == i) {
                final TL_inputFolderPeer tl_inputFolderPeer = new TL_inputFolderPeer();
                tl_inputFolderPeer.readParams(abstractSerializedData, b);
                return tl_inputFolderPeer;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_inputFolderPeer", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.peer = InputPeer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            this.folder_id = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputFolderPeer.constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.folder_id);
        }
    }
    
    public static class TL_inputGameID extends InputGame
    {
        public static int constructor = 53231223;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt64(b);
            super.access_hash = abstractSerializedData.readInt64(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputGameID.constructor);
            abstractSerializedData.writeInt64(super.id);
            abstractSerializedData.writeInt64(super.access_hash);
        }
    }
    
    public static class TL_inputGameShortName extends InputGame
    {
        public static int constructor = -1020139510;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.bot_id = InputUser.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.short_name = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputGameShortName.constructor);
            super.bot_id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(super.short_name);
        }
    }
    
    public static class TL_inputGeoPoint extends InputGeoPoint
    {
        public static int constructor = -206066487;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.lat = abstractSerializedData.readDouble(b);
            super._long = abstractSerializedData.readDouble(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputGeoPoint.constructor);
            abstractSerializedData.writeDouble(super.lat);
            abstractSerializedData.writeDouble(super._long);
        }
    }
    
    public static class TL_inputGeoPointEmpty extends InputGeoPoint
    {
        public static int constructor = -457104426;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputGeoPointEmpty.constructor);
        }
    }
    
    public static class TL_inputGroupCall extends TLObject
    {
        public static int constructor = -659913713;
        public long access_hash;
        public long id;
        
        public static TL_inputGroupCall TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_inputGroupCall.constructor == i) {
                final TL_inputGroupCall tl_inputGroupCall = new TL_inputGroupCall();
                tl_inputGroupCall.readParams(abstractSerializedData, b);
                return tl_inputGroupCall;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_inputGroupCall", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.id = abstractSerializedData.readInt64(b);
            this.access_hash = abstractSerializedData.readInt64(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputGroupCall.constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
        }
    }
    
    public static class TL_inputKeyboardButtonUrlAuth extends KeyboardButton
    {
        public static int constructor = -802258988;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            boolean request_write_access = true;
            if ((flags & 0x1) == 0x0) {
                request_write_access = false;
            }
            super.request_write_access = request_write_access;
            super.text = abstractSerializedData.readString(b);
            if ((super.flags & 0x2) != 0x0) {
                super.fwd_text = abstractSerializedData.readString(b);
            }
            super.url = abstractSerializedData.readString(b);
            super.bot = InputUser.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputKeyboardButtonUrlAuth.constructor);
            int flags;
            if (super.request_write_access) {
                flags = (super.flags | 0x1);
            }
            else {
                flags = (super.flags & 0xFFFFFFFE);
            }
            abstractSerializedData.writeInt32(super.flags = flags);
            abstractSerializedData.writeString(super.text);
            if ((super.flags & 0x2) != 0x0) {
                abstractSerializedData.writeString(super.fwd_text);
            }
            abstractSerializedData.writeString(super.url);
            super.bot.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_inputMediaContact extends InputMedia
    {
        public static int constructor = -122978821;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.phone_number = abstractSerializedData.readString(b);
            super.first_name = abstractSerializedData.readString(b);
            super.last_name = abstractSerializedData.readString(b);
            super.vcard = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputMediaContact.constructor);
            abstractSerializedData.writeString(super.phone_number);
            abstractSerializedData.writeString(super.first_name);
            abstractSerializedData.writeString(super.last_name);
            abstractSerializedData.writeString(super.vcard);
        }
    }
    
    public static class TL_inputMediaDocument extends InputMedia
    {
        public static int constructor = 598418386;
        public InputDocument id;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            this.id = InputDocument.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            if ((super.flags & 0x1) != 0x0) {
                super.ttl_seconds = abstractSerializedData.readInt32(b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputMediaDocument.constructor);
            abstractSerializedData.writeInt32(super.flags);
            this.id.serializeToStream(abstractSerializedData);
            if ((super.flags & 0x1) != 0x0) {
                abstractSerializedData.writeInt32(super.ttl_seconds);
            }
        }
    }
    
    public static class TL_inputMediaDocumentExternal extends InputMedia
    {
        public static int constructor = -78455655;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            super.url = abstractSerializedData.readString(b);
            if ((super.flags & 0x1) != 0x0) {
                super.ttl_seconds = abstractSerializedData.readInt32(b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputMediaDocumentExternal.constructor);
            abstractSerializedData.writeInt32(super.flags);
            abstractSerializedData.writeString(super.url);
            if ((super.flags & 0x1) != 0x0) {
                abstractSerializedData.writeInt32(super.ttl_seconds);
            }
        }
    }
    
    public static class TL_inputMediaEmpty extends InputMedia
    {
        public static int constructor = -1771768449;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputMediaEmpty.constructor);
        }
    }
    
    public static class TL_inputMediaGame extends InputMedia
    {
        public static int constructor = -750828557;
        public InputGame id;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.id = InputGame.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputMediaGame.constructor);
            this.id.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_inputMediaGeoLive extends InputMedia
    {
        public static int constructor = -833715459;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            boolean stopped = true;
            if ((flags & 0x1) == 0x0) {
                stopped = false;
            }
            super.stopped = stopped;
            super.geo_point = InputGeoPoint.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            if ((super.flags & 0x2) != 0x0) {
                super.period = abstractSerializedData.readInt32(b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputMediaGeoLive.constructor);
            int flags;
            if (super.stopped) {
                flags = (super.flags | 0x1);
            }
            else {
                flags = (super.flags & 0xFFFFFFFE);
            }
            abstractSerializedData.writeInt32(super.flags = flags);
            super.geo_point.serializeToStream(abstractSerializedData);
            if ((super.flags & 0x2) != 0x0) {
                abstractSerializedData.writeInt32(super.period);
            }
        }
    }
    
    public static class TL_inputMediaGeoPoint extends InputMedia
    {
        public static int constructor = -104578748;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.geo_point = InputGeoPoint.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputMediaGeoPoint.constructor);
            super.geo_point.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_inputMediaGifExternal extends InputMedia
    {
        public static int constructor = 1212395773;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.url = abstractSerializedData.readString(b);
            super.q = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputMediaGifExternal.constructor);
            abstractSerializedData.writeString(super.url);
            abstractSerializedData.writeString(super.q);
        }
    }
    
    public static class TL_inputMediaPhoto extends InputMedia
    {
        public static int constructor = -1279654347;
        public InputPhoto id;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            this.id = InputPhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            if ((super.flags & 0x1) != 0x0) {
                super.ttl_seconds = abstractSerializedData.readInt32(b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputMediaPhoto.constructor);
            abstractSerializedData.writeInt32(super.flags);
            this.id.serializeToStream(abstractSerializedData);
            if ((super.flags & 0x1) != 0x0) {
                abstractSerializedData.writeInt32(super.ttl_seconds);
            }
        }
    }
    
    public static class TL_inputMediaPhotoExternal extends InputMedia
    {
        public static int constructor = -440664550;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            super.url = abstractSerializedData.readString(b);
            if ((super.flags & 0x1) != 0x0) {
                super.ttl_seconds = abstractSerializedData.readInt32(b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputMediaPhotoExternal.constructor);
            abstractSerializedData.writeInt32(super.flags);
            abstractSerializedData.writeString(super.url);
            if ((super.flags & 0x1) != 0x0) {
                abstractSerializedData.writeInt32(super.ttl_seconds);
            }
        }
    }
    
    public static class TL_inputMediaPoll extends InputMedia
    {
        public static int constructor = 112424539;
        public TL_poll poll;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.poll = TL_poll.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputMediaPoll.constructor);
            this.poll.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_inputMediaUploadedDocument extends InputMedia
    {
        public static int constructor = 1530447553;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            final int n = 0;
            super.nosound_video = ((flags & 0x8) != 0x0);
            super.file = InputFile.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            if ((super.flags & 0x4) != 0x0) {
                super.thumb = InputFile.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            super.mime_type = abstractSerializedData.readString(b);
            final int int32 = abstractSerializedData.readInt32(b);
            if (int32 == 481674261) {
                for (int int33 = abstractSerializedData.readInt32(b), i = 0; i < int33; ++i) {
                    final DocumentAttribute tLdeserialize = DocumentAttribute.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.attributes.add(tLdeserialize);
                }
                if ((super.flags & 0x1) != 0x0) {
                    final int int34 = abstractSerializedData.readInt32(b);
                    if (int34 != 481674261) {
                        if (!b) {
                            return;
                        }
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", int34));
                    }
                    else {
                        for (int int35 = abstractSerializedData.readInt32(b), j = n; j < int35; ++j) {
                            final InputDocument tLdeserialize2 = InputDocument.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                            if (tLdeserialize2 == null) {
                                return;
                            }
                            super.stickers.add(tLdeserialize2);
                        }
                    }
                }
                if ((super.flags & 0x2) != 0x0) {
                    super.ttl_seconds = abstractSerializedData.readInt32(b);
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputMediaUploadedDocument.constructor);
            int flags;
            if (super.nosound_video) {
                flags = (super.flags | 0x8);
            }
            else {
                flags = (super.flags & 0xFFFFFFF7);
            }
            abstractSerializedData.writeInt32(super.flags = flags);
            super.file.serializeToStream(abstractSerializedData);
            if ((super.flags & 0x4) != 0x0) {
                super.thumb.serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeString(super.mime_type);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.attributes.size();
            abstractSerializedData.writeInt32(size);
            final int n = 0;
            for (int i = 0; i < size; ++i) {
                super.attributes.get(i).serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x1) != 0x0) {
                abstractSerializedData.writeInt32(481674261);
                final int size2 = super.stickers.size();
                abstractSerializedData.writeInt32(size2);
                for (int j = n; j < size2; ++j) {
                    super.stickers.get(j).serializeToStream(abstractSerializedData);
                }
            }
            if ((super.flags & 0x2) != 0x0) {
                abstractSerializedData.writeInt32(super.ttl_seconds);
            }
        }
    }
    
    public static class TL_inputMediaUploadedPhoto extends InputMedia
    {
        public static int constructor = 505969924;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            super.file = InputFile.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            if ((super.flags & 0x1) != 0x0) {
                final int int32 = abstractSerializedData.readInt32(b);
                int i = 0;
                if (int32 != 481674261) {
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
                }
                else {
                    while (i < abstractSerializedData.readInt32(b)) {
                        final InputDocument tLdeserialize = InputDocument.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize == null) {
                            return;
                        }
                        super.stickers.add(tLdeserialize);
                        ++i;
                    }
                }
            }
            if ((super.flags & 0x2) != 0x0) {
                super.ttl_seconds = abstractSerializedData.readInt32(b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputMediaUploadedPhoto.constructor);
            abstractSerializedData.writeInt32(super.flags);
            super.file.serializeToStream(abstractSerializedData);
            if ((super.flags & 0x1) != 0x0) {
                abstractSerializedData.writeInt32(481674261);
                final int size = super.stickers.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; ++i) {
                    super.stickers.get(i).serializeToStream(abstractSerializedData);
                }
            }
            if ((super.flags & 0x2) != 0x0) {
                abstractSerializedData.writeInt32(super.ttl_seconds);
            }
        }
    }
    
    public static class TL_inputMediaVenue extends InputMedia
    {
        public static int constructor = -1052959727;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.geo_point = InputGeoPoint.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.title = abstractSerializedData.readString(b);
            super.address = abstractSerializedData.readString(b);
            super.provider = abstractSerializedData.readString(b);
            super.venue_id = abstractSerializedData.readString(b);
            super.venue_type = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputMediaVenue.constructor);
            super.geo_point.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(super.title);
            abstractSerializedData.writeString(super.address);
            abstractSerializedData.writeString(super.provider);
            abstractSerializedData.writeString(super.venue_id);
            abstractSerializedData.writeString(super.venue_type);
        }
    }
    
    public static class TL_inputMessageEntityMentionName extends MessageEntity
    {
        public static int constructor = 546203849;
        public InputUser user_id;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.offset = abstractSerializedData.readInt32(b);
            super.length = abstractSerializedData.readInt32(b);
            this.user_id = InputUser.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputMessageEntityMentionName.constructor);
            abstractSerializedData.writeInt32(super.offset);
            abstractSerializedData.writeInt32(super.length);
            this.user_id.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_inputMessagesFilterChatPhotos extends MessagesFilter
    {
        public static int constructor = 975236280;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputMessagesFilterChatPhotos.constructor);
        }
    }
    
    public static class TL_inputMessagesFilterContacts extends MessagesFilter
    {
        public static int constructor = -530392189;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputMessagesFilterContacts.constructor);
        }
    }
    
    public static class TL_inputMessagesFilterDocument extends MessagesFilter
    {
        public static int constructor = -1629621880;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputMessagesFilterDocument.constructor);
        }
    }
    
    public static class TL_inputMessagesFilterEmpty extends MessagesFilter
    {
        public static int constructor = 1474492012;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputMessagesFilterEmpty.constructor);
        }
    }
    
    public static class TL_inputMessagesFilterGeo extends MessagesFilter
    {
        public static int constructor = -419271411;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputMessagesFilterGeo.constructor);
        }
    }
    
    public static class TL_inputMessagesFilterGif extends MessagesFilter
    {
        public static int constructor = -3644025;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputMessagesFilterGif.constructor);
        }
    }
    
    public static class TL_inputMessagesFilterMusic extends MessagesFilter
    {
        public static int constructor = 928101534;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputMessagesFilterMusic.constructor);
        }
    }
    
    public static class TL_inputMessagesFilterMyMentions extends MessagesFilter
    {
        public static int constructor = -1040652646;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputMessagesFilterMyMentions.constructor);
        }
    }
    
    public static class TL_inputMessagesFilterPhoneCalls extends MessagesFilter
    {
        public static int constructor = -2134272152;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            boolean missed = true;
            if ((flags & 0x1) == 0x0) {
                missed = false;
            }
            super.missed = missed;
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputMessagesFilterPhoneCalls.constructor);
            int flags;
            if (super.missed) {
                flags = (super.flags | 0x1);
            }
            else {
                flags = (super.flags & 0xFFFFFFFE);
            }
            abstractSerializedData.writeInt32(super.flags = flags);
        }
    }
    
    public static class TL_inputMessagesFilterPhotoVideo extends MessagesFilter
    {
        public static int constructor = 1458172132;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputMessagesFilterPhotoVideo.constructor);
        }
    }
    
    public static class TL_inputMessagesFilterPhotoVideoDocuments extends MessagesFilter
    {
        public static int constructor = -648121413;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputMessagesFilterPhotoVideoDocuments.constructor);
        }
    }
    
    public static class TL_inputMessagesFilterPhotos extends MessagesFilter
    {
        public static int constructor = -1777752804;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputMessagesFilterPhotos.constructor);
        }
    }
    
    public static class TL_inputMessagesFilterRoundVideo extends MessagesFilter
    {
        public static int constructor = -1253451181;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputMessagesFilterRoundVideo.constructor);
        }
    }
    
    public static class TL_inputMessagesFilterRoundVoice extends MessagesFilter
    {
        public static int constructor = 2054952868;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputMessagesFilterRoundVoice.constructor);
        }
    }
    
    public static class TL_inputMessagesFilterUrl extends MessagesFilter
    {
        public static int constructor = 2129714567;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputMessagesFilterUrl.constructor);
        }
    }
    
    public static class TL_inputMessagesFilterVideo extends MessagesFilter
    {
        public static int constructor = -1614803355;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputMessagesFilterVideo.constructor);
        }
    }
    
    public static class TL_inputMessagesFilterVoice extends MessagesFilter
    {
        public static int constructor = 1358283666;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputMessagesFilterVoice.constructor);
        }
    }
    
    public static class TL_inputNotifyBroadcasts extends InputNotifyPeer
    {
        public static int constructor = -1311015810;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputNotifyBroadcasts.constructor);
        }
    }
    
    public static class TL_inputNotifyChats extends InputNotifyPeer
    {
        public static int constructor = 1251338318;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputNotifyChats.constructor);
        }
    }
    
    public static class TL_inputNotifyPeer extends InputNotifyPeer
    {
        public static int constructor = -1195615476;
        public InputPeer peer;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.peer = InputPeer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputNotifyPeer.constructor);
            this.peer.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_inputNotifyUsers extends InputNotifyPeer
    {
        public static int constructor = 423314455;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputNotifyUsers.constructor);
        }
    }
    
    public static class TL_inputPaymentCredentials extends InputPaymentCredentials
    {
        public static int constructor = 873977640;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            boolean save = true;
            if ((flags & 0x1) == 0x0) {
                save = false;
            }
            super.save = save;
            super.data = TL_dataJSON.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputPaymentCredentials.constructor);
            int flags;
            if (super.save) {
                flags = (super.flags | 0x1);
            }
            else {
                flags = (super.flags & 0xFFFFFFFE);
            }
            abstractSerializedData.writeInt32(super.flags = flags);
            super.data.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_inputPaymentCredentialsAndroidPay extends InputPaymentCredentials
    {
        public static int constructor = -905587442;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.payment_token = TL_dataJSON.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.google_transaction_id = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputPaymentCredentialsAndroidPay.constructor);
            super.payment_token.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(super.google_transaction_id);
        }
    }
    
    public static class TL_inputPaymentCredentialsSaved extends InputPaymentCredentials
    {
        public static int constructor = -1056001329;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readString(b);
            super.tmp_password = abstractSerializedData.readByteArray(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputPaymentCredentialsSaved.constructor);
            abstractSerializedData.writeString(super.id);
            abstractSerializedData.writeByteArray(super.tmp_password);
        }
    }
    
    public static class TL_inputPeerChannel extends InputPeer
    {
        public static int constructor = 548253432;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.channel_id = abstractSerializedData.readInt32(b);
            super.access_hash = abstractSerializedData.readInt64(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputPeerChannel.constructor);
            abstractSerializedData.writeInt32(super.channel_id);
            abstractSerializedData.writeInt64(super.access_hash);
        }
    }
    
    public static class TL_inputPeerChannelFromMessage extends InputPeer
    {
        public static int constructor = -1667893317;
        public int msg_id;
        public InputPeer peer;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.peer = InputPeer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            this.msg_id = abstractSerializedData.readInt32(b);
            super.channel_id = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputPeerChannelFromMessage.constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.msg_id);
            abstractSerializedData.writeInt32(super.channel_id);
        }
    }
    
    public static class TL_inputPeerChat extends InputPeer
    {
        public static int constructor = 396093539;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.chat_id = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputPeerChat.constructor);
            abstractSerializedData.writeInt32(super.chat_id);
        }
    }
    
    public static class TL_inputPeerEmpty extends InputPeer
    {
        public static int constructor = 2134579434;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputPeerEmpty.constructor);
        }
    }
    
    public static class TL_inputPeerNotifySettings extends TLObject
    {
        public static int constructor = -1673717362;
        public int flags;
        public int mute_until;
        public boolean show_previews;
        public boolean silent;
        public String sound;
        
        public static TL_inputPeerNotifySettings TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_inputPeerNotifySettings.constructor == i) {
                final TL_inputPeerNotifySettings tl_inputPeerNotifySettings = new TL_inputPeerNotifySettings();
                tl_inputPeerNotifySettings.readParams(abstractSerializedData, b);
                return tl_inputPeerNotifySettings;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_inputPeerNotifySettings", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.flags = abstractSerializedData.readInt32(b);
            if ((this.flags & 0x1) != 0x0) {
                this.show_previews = abstractSerializedData.readBool(b);
            }
            if ((this.flags & 0x2) != 0x0) {
                this.silent = abstractSerializedData.readBool(b);
            }
            if ((this.flags & 0x4) != 0x0) {
                this.mute_until = abstractSerializedData.readInt32(b);
            }
            if ((this.flags & 0x8) != 0x0) {
                this.sound = abstractSerializedData.readString(b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputPeerNotifySettings.constructor);
            abstractSerializedData.writeInt32(this.flags);
            if ((this.flags & 0x1) != 0x0) {
                abstractSerializedData.writeBool(this.show_previews);
            }
            if ((this.flags & 0x2) != 0x0) {
                abstractSerializedData.writeBool(this.silent);
            }
            if ((this.flags & 0x4) != 0x0) {
                abstractSerializedData.writeInt32(this.mute_until);
            }
            if ((this.flags & 0x8) != 0x0) {
                abstractSerializedData.writeString(this.sound);
            }
        }
    }
    
    public static class TL_inputPeerPhotoFileLocation extends InputFileLocation
    {
        public static int constructor = 668375447;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            boolean big = true;
            if ((flags & 0x1) == 0x0) {
                big = false;
            }
            super.big = big;
            super.peer = InputPeer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.volume_id = abstractSerializedData.readInt64(b);
            super.local_id = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputPeerPhotoFileLocation.constructor);
            int flags;
            if (super.big) {
                flags = (super.flags | 0x1);
            }
            else {
                flags = (super.flags & 0xFFFFFFFE);
            }
            abstractSerializedData.writeInt32(super.flags = flags);
            super.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt64(super.volume_id);
            abstractSerializedData.writeInt32(super.local_id);
        }
    }
    
    public static class TL_inputPeerSelf extends InputPeer
    {
        public static int constructor = 2107670217;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputPeerSelf.constructor);
        }
    }
    
    public static class TL_inputPeerUser extends InputPeer
    {
        public static int constructor = 2072935910;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.user_id = abstractSerializedData.readInt32(b);
            super.access_hash = abstractSerializedData.readInt64(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputPeerUser.constructor);
            abstractSerializedData.writeInt32(super.user_id);
            abstractSerializedData.writeInt64(super.access_hash);
        }
    }
    
    public static class TL_inputPeerUserFromMessage extends InputPeer
    {
        public static int constructor = 398123750;
        public int msg_id;
        public InputPeer peer;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.peer = InputPeer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            this.msg_id = abstractSerializedData.readInt32(b);
            super.user_id = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputPeerUserFromMessage.constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.msg_id);
            abstractSerializedData.writeInt32(super.user_id);
        }
    }
    
    public static class TL_inputPhoneCall extends TLObject
    {
        public static int constructor = 506920429;
        public long access_hash;
        public long id;
        
        public static TL_inputPhoneCall TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_inputPhoneCall.constructor == i) {
                final TL_inputPhoneCall tl_inputPhoneCall = new TL_inputPhoneCall();
                tl_inputPhoneCall.readParams(abstractSerializedData, b);
                return tl_inputPhoneCall;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_inputPhoneCall", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.id = abstractSerializedData.readInt64(b);
            this.access_hash = abstractSerializedData.readInt64(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputPhoneCall.constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
        }
    }
    
    public static class TL_inputPhoneContact extends TLObject
    {
        public static int constructor = -208488460;
        public long client_id;
        public String first_name;
        public String last_name;
        public String phone;
        
        public static TL_inputPhoneContact TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_inputPhoneContact.constructor == i) {
                final TL_inputPhoneContact tl_inputPhoneContact = new TL_inputPhoneContact();
                tl_inputPhoneContact.readParams(abstractSerializedData, b);
                return tl_inputPhoneContact;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_inputPhoneContact", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.client_id = abstractSerializedData.readInt64(b);
            this.phone = abstractSerializedData.readString(b);
            this.first_name = abstractSerializedData.readString(b);
            this.last_name = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputPhoneContact.constructor);
            abstractSerializedData.writeInt64(this.client_id);
            abstractSerializedData.writeString(this.phone);
            abstractSerializedData.writeString(this.first_name);
            abstractSerializedData.writeString(this.last_name);
        }
    }
    
    public static class TL_inputPhoto extends InputPhoto
    {
        public static int constructor = 1001634122;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt64(b);
            super.access_hash = abstractSerializedData.readInt64(b);
            super.file_reference = abstractSerializedData.readByteArray(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputPhoto.constructor);
            abstractSerializedData.writeInt64(super.id);
            abstractSerializedData.writeInt64(super.access_hash);
            abstractSerializedData.writeByteArray(super.file_reference);
        }
    }
    
    public static class TL_inputPhotoEmpty extends InputPhoto
    {
        public static int constructor = 483901197;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputPhotoEmpty.constructor);
        }
    }
    
    public static class TL_inputPhotoFileLocation extends InputFileLocation
    {
        public static int constructor = 1075322878;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt64(b);
            super.access_hash = abstractSerializedData.readInt64(b);
            super.file_reference = abstractSerializedData.readByteArray(b);
            super.thumb_size = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputPhotoFileLocation.constructor);
            abstractSerializedData.writeInt64(super.id);
            abstractSerializedData.writeInt64(super.access_hash);
            abstractSerializedData.writeByteArray(super.file_reference);
            abstractSerializedData.writeString(super.thumb_size);
        }
    }
    
    public static class TL_inputPrivacyKeyChatInvite extends InputPrivacyKey
    {
        public static int constructor = -1107622874;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputPrivacyKeyChatInvite.constructor);
        }
    }
    
    public static class TL_inputPrivacyKeyForwards extends InputPrivacyKey
    {
        public static int constructor = -1529000952;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputPrivacyKeyForwards.constructor);
        }
    }
    
    public static class TL_inputPrivacyKeyPhoneCall extends InputPrivacyKey
    {
        public static int constructor = -88417185;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputPrivacyKeyPhoneCall.constructor);
        }
    }
    
    public static class TL_inputPrivacyKeyPhoneNumber extends InputPrivacyKey
    {
        public static int constructor = 55761658;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputPrivacyKeyPhoneNumber.constructor);
        }
    }
    
    public static class TL_inputPrivacyKeyPhoneP2P extends InputPrivacyKey
    {
        public static int constructor = -610373422;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputPrivacyKeyPhoneP2P.constructor);
        }
    }
    
    public static class TL_inputPrivacyKeyProfilePhoto extends InputPrivacyKey
    {
        public static int constructor = 1461304012;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputPrivacyKeyProfilePhoto.constructor);
        }
    }
    
    public static class TL_inputPrivacyKeyStatusTimestamp extends InputPrivacyKey
    {
        public static int constructor = 1335282456;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputPrivacyKeyStatusTimestamp.constructor);
        }
    }
    
    public static class TL_inputPrivacyValueAllowAll extends InputPrivacyRule
    {
        public static int constructor = 407582158;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputPrivacyValueAllowAll.constructor);
        }
    }
    
    public static class TL_inputPrivacyValueAllowChatParticipants extends InputPrivacyRule
    {
        public static int constructor = 1283572154;
        public ArrayList<Integer> chats;
        
        public TL_inputPrivacyValueAllowChatParticipants() {
            this.chats = new ArrayList<Integer>();
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    this.chats.add(abstractSerializedData.readInt32(b));
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputPrivacyValueAllowChatParticipants.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.chats.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                abstractSerializedData.writeInt32(this.chats.get(i));
            }
        }
    }
    
    public static class TL_inputPrivacyValueAllowContacts extends InputPrivacyRule
    {
        public static int constructor = 218751099;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputPrivacyValueAllowContacts.constructor);
        }
    }
    
    public static class TL_inputPrivacyValueAllowUsers extends InputPrivacyRule
    {
        public static int constructor = 320652927;
        public ArrayList<InputUser> users;
        
        public TL_inputPrivacyValueAllowUsers() {
            this.users = new ArrayList<InputUser>();
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final InputUser tLdeserialize = InputUser.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    this.users.add(tLdeserialize);
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputPrivacyValueAllowUsers.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.users.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                this.users.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_inputPrivacyValueDisallowAll extends InputPrivacyRule
    {
        public static int constructor = -697604407;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputPrivacyValueDisallowAll.constructor);
        }
    }
    
    public static class TL_inputPrivacyValueDisallowChatParticipants extends InputPrivacyRule
    {
        public static int constructor = -668769361;
        public ArrayList<Integer> chats;
        
        public TL_inputPrivacyValueDisallowChatParticipants() {
            this.chats = new ArrayList<Integer>();
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    this.chats.add(abstractSerializedData.readInt32(b));
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputPrivacyValueDisallowChatParticipants.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.chats.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                abstractSerializedData.writeInt32(this.chats.get(i));
            }
        }
    }
    
    public static class TL_inputPrivacyValueDisallowContacts extends InputPrivacyRule
    {
        public static int constructor = 195371015;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputPrivacyValueDisallowContacts.constructor);
        }
    }
    
    public static class TL_inputPrivacyValueDisallowUsers extends InputPrivacyRule
    {
        public static int constructor = -1877932953;
        public ArrayList<InputUser> users;
        
        public TL_inputPrivacyValueDisallowUsers() {
            this.users = new ArrayList<InputUser>();
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final InputUser tLdeserialize = InputUser.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    this.users.add(tLdeserialize);
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputPrivacyValueDisallowUsers.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.users.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                this.users.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_inputReportReasonChildAbuse extends ReportReason
    {
        public static int constructor = -1376497949;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputReportReasonChildAbuse.constructor);
        }
    }
    
    public static class TL_inputReportReasonCopyright extends ReportReason
    {
        public static int constructor = -1685456582;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputReportReasonCopyright.constructor);
        }
    }
    
    public static class TL_inputReportReasonOther extends ReportReason
    {
        public static int constructor = -512463606;
        public String text;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.text = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputReportReasonOther.constructor);
            abstractSerializedData.writeString(this.text);
        }
    }
    
    public static class TL_inputReportReasonPornography extends ReportReason
    {
        public static int constructor = 777640226;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputReportReasonPornography.constructor);
        }
    }
    
    public static class TL_inputReportReasonSpam extends ReportReason
    {
        public static int constructor = 1490799288;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputReportReasonSpam.constructor);
        }
    }
    
    public static class TL_inputReportReasonViolence extends ReportReason
    {
        public static int constructor = 505595789;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputReportReasonViolence.constructor);
        }
    }
    
    public static class TL_inputSecureFile extends InputSecureFile
    {
        public static int constructor = 1399317950;
        public long access_hash;
        public long id;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.id = abstractSerializedData.readInt64(b);
            this.access_hash = abstractSerializedData.readInt64(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputSecureFile.constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
        }
    }
    
    public static class TL_inputSecureFileLocation extends InputFileLocation
    {
        public static int constructor = -876089816;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt64(b);
            super.access_hash = abstractSerializedData.readInt64(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputSecureFileLocation.constructor);
            abstractSerializedData.writeInt64(super.id);
            abstractSerializedData.writeInt64(super.access_hash);
        }
    }
    
    public static class TL_inputSecureFileUploaded extends InputSecureFile
    {
        public static int constructor = 859091184;
        public byte[] file_hash;
        public long id;
        public String md5_checksum;
        public int parts;
        public byte[] secret;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.id = abstractSerializedData.readInt64(b);
            this.parts = abstractSerializedData.readInt32(b);
            this.md5_checksum = abstractSerializedData.readString(b);
            this.file_hash = abstractSerializedData.readByteArray(b);
            this.secret = abstractSerializedData.readByteArray(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputSecureFileUploaded.constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt32(this.parts);
            abstractSerializedData.writeString(this.md5_checksum);
            abstractSerializedData.writeByteArray(this.file_hash);
            abstractSerializedData.writeByteArray(this.secret);
        }
    }
    
    public static class TL_inputSecureValue extends TLObject
    {
        public static int constructor = -618540889;
        public TL_secureData data;
        public ArrayList<InputSecureFile> files;
        public int flags;
        public InputSecureFile front_side;
        public SecurePlainData plain_data;
        public InputSecureFile reverse_side;
        public InputSecureFile selfie;
        public ArrayList<InputSecureFile> translation;
        public SecureValueType type;
        
        public TL_inputSecureValue() {
            this.translation = new ArrayList<InputSecureFile>();
            this.files = new ArrayList<InputSecureFile>();
        }
        
        public static TL_inputSecureValue TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_inputSecureValue.constructor == i) {
                final TL_inputSecureValue tl_inputSecureValue = new TL_inputSecureValue();
                tl_inputSecureValue.readParams(abstractSerializedData, b);
                return tl_inputSecureValue;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_inputSecureValue", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.flags = abstractSerializedData.readInt32(b);
            this.type = SecureValueType.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            if ((this.flags & 0x1) != 0x0) {
                this.data = TL_secureData.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            if ((this.flags & 0x2) != 0x0) {
                this.front_side = InputSecureFile.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            if ((this.flags & 0x4) != 0x0) {
                this.reverse_side = InputSecureFile.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            if ((this.flags & 0x8) != 0x0) {
                this.selfie = InputSecureFile.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            final int flags = this.flags;
            final int n = 0;
            if ((flags & 0x40) != 0x0) {
                final int int32 = abstractSerializedData.readInt32(b);
                if (int32 != 481674261) {
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
                }
                else {
                    for (int int33 = abstractSerializedData.readInt32(b), i = 0; i < int33; ++i) {
                        final InputSecureFile tLdeserialize = InputSecureFile.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize == null) {
                            return;
                        }
                        this.translation.add(tLdeserialize);
                    }
                }
            }
            if ((this.flags & 0x10) != 0x0) {
                final int int34 = abstractSerializedData.readInt32(b);
                if (int34 != 481674261) {
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int34));
                }
                else {
                    for (int int35 = abstractSerializedData.readInt32(b), j = n; j < int35; ++j) {
                        final InputSecureFile tLdeserialize2 = InputSecureFile.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize2 == null) {
                            return;
                        }
                        this.files.add(tLdeserialize2);
                    }
                }
            }
            if ((this.flags & 0x20) != 0x0) {
                this.plain_data = SecurePlainData.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputSecureValue.constructor);
            abstractSerializedData.writeInt32(this.flags);
            this.type.serializeToStream(abstractSerializedData);
            if ((this.flags & 0x1) != 0x0) {
                this.data.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 0x2) != 0x0) {
                this.front_side.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 0x4) != 0x0) {
                this.reverse_side.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 0x8) != 0x0) {
                this.selfie.serializeToStream(abstractSerializedData);
            }
            final int flags = this.flags;
            final int n = 0;
            if ((flags & 0x40) != 0x0) {
                abstractSerializedData.writeInt32(481674261);
                final int size = this.translation.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; ++i) {
                    this.translation.get(i).serializeToStream(abstractSerializedData);
                }
            }
            if ((this.flags & 0x10) != 0x0) {
                abstractSerializedData.writeInt32(481674261);
                final int size2 = this.files.size();
                abstractSerializedData.writeInt32(size2);
                for (int j = n; j < size2; ++j) {
                    this.files.get(j).serializeToStream(abstractSerializedData);
                }
            }
            if ((this.flags & 0x20) != 0x0) {
                this.plain_data.serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_inputSingleMedia extends TLObject
    {
        public static int constructor = 482797855;
        public ArrayList<MessageEntity> entities;
        public int flags;
        public InputMedia media;
        public String message;
        public long random_id;
        
        public TL_inputSingleMedia() {
            this.entities = new ArrayList<MessageEntity>();
        }
        
        public static TL_inputSingleMedia TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_inputSingleMedia.constructor == i) {
                final TL_inputSingleMedia tl_inputSingleMedia = new TL_inputSingleMedia();
                tl_inputSingleMedia.readParams(abstractSerializedData, b);
                return tl_inputSingleMedia;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_inputSingleMedia", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.flags = abstractSerializedData.readInt32(b);
            this.media = InputMedia.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            this.random_id = abstractSerializedData.readInt64(b);
            this.message = abstractSerializedData.readString(b);
            if ((this.flags & 0x1) != 0x0) {
                final int int32 = abstractSerializedData.readInt32(b);
                int i = 0;
                if (int32 != 481674261) {
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
                }
                else {
                    while (i < abstractSerializedData.readInt32(b)) {
                        final MessageEntity tLdeserialize = MessageEntity.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize == null) {
                            return;
                        }
                        this.entities.add(tLdeserialize);
                        ++i;
                    }
                }
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputSingleMedia.constructor);
            abstractSerializedData.writeInt32(this.flags);
            this.media.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt64(this.random_id);
            abstractSerializedData.writeString(this.message);
            if ((this.flags & 0x1) != 0x0) {
                abstractSerializedData.writeInt32(481674261);
                final int size = this.entities.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; ++i) {
                    this.entities.get(i).serializeToStream(abstractSerializedData);
                }
            }
        }
    }
    
    public static class TL_inputStickerSetEmpty extends InputStickerSet
    {
        public static int constructor = -4838507;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputStickerSetEmpty.constructor);
        }
    }
    
    public static class TL_inputStickerSetID extends InputStickerSet
    {
        public static int constructor = -1645763991;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt64(b);
            super.access_hash = abstractSerializedData.readInt64(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputStickerSetID.constructor);
            abstractSerializedData.writeInt64(super.id);
            abstractSerializedData.writeInt64(super.access_hash);
        }
    }
    
    public static class TL_inputStickerSetShortName extends InputStickerSet
    {
        public static int constructor = -2044933984;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.short_name = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputStickerSetShortName.constructor);
            abstractSerializedData.writeString(super.short_name);
        }
    }
    
    public static class TL_inputStickerSetThumb extends InputFileLocation
    {
        public static int constructor = 230353641;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.stickerset = InputStickerSet.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.volume_id = abstractSerializedData.readInt64(b);
            super.local_id = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputStickerSetThumb.constructor);
            super.stickerset.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt64(super.volume_id);
            abstractSerializedData.writeInt32(super.local_id);
        }
    }
    
    public static class TL_inputStickeredMediaDocument extends InputStickeredMedia
    {
        public static int constructor = 70813275;
        public InputDocument id;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.id = InputDocument.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputStickeredMediaDocument.constructor);
            this.id.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_inputStickeredMediaPhoto extends InputStickeredMedia
    {
        public static int constructor = 1251549527;
        public InputPhoto id;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.id = InputPhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputStickeredMediaPhoto.constructor);
            this.id.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_inputUser extends InputUser
    {
        public static int constructor = -668391402;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.user_id = abstractSerializedData.readInt32(b);
            super.access_hash = abstractSerializedData.readInt64(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputUser.constructor);
            abstractSerializedData.writeInt32(super.user_id);
            abstractSerializedData.writeInt64(super.access_hash);
        }
    }
    
    public static class TL_inputUserEmpty extends InputUser
    {
        public static int constructor = -1182234929;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputUserEmpty.constructor);
        }
    }
    
    public static class TL_inputUserFromMessage extends InputUser
    {
        public static int constructor = 756118935;
        public int msg_id;
        public InputPeer peer;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.peer = InputPeer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            this.msg_id = abstractSerializedData.readInt32(b);
            super.user_id = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputUserFromMessage.constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.msg_id);
            abstractSerializedData.writeInt32(super.user_id);
        }
    }
    
    public static class TL_inputUserSelf extends InputUser
    {
        public static int constructor = -138301121;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputUserSelf.constructor);
        }
    }
    
    public static class TL_inputWallPaper extends InputWallPaper
    {
        public static int constructor = -433014407;
        public long access_hash;
        public long id;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.id = abstractSerializedData.readInt64(b);
            this.access_hash = abstractSerializedData.readInt64(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputWallPaper.constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
        }
    }
    
    public static class TL_inputWallPaperSlug extends InputWallPaper
    {
        public static int constructor = 1913199744;
        public String slug;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.slug = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputWallPaperSlug.constructor);
            abstractSerializedData.writeString(this.slug);
        }
    }
    
    public static class TL_inputWebDocument extends TLObject
    {
        public static int constructor = -1678949555;
        public ArrayList<DocumentAttribute> attributes;
        public String mime_type;
        public int size;
        public String url;
        
        public TL_inputWebDocument() {
            this.attributes = new ArrayList<DocumentAttribute>();
        }
        
        public static TL_inputWebDocument TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_inputWebDocument.constructor == i) {
                final TL_inputWebDocument tl_inputWebDocument = new TL_inputWebDocument();
                tl_inputWebDocument.readParams(abstractSerializedData, b);
                return tl_inputWebDocument;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_inputWebDocument", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.url = abstractSerializedData.readString(b);
            this.size = abstractSerializedData.readInt32(b);
            this.mime_type = abstractSerializedData.readString(b);
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final DocumentAttribute tLdeserialize = DocumentAttribute.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    this.attributes.add(tLdeserialize);
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputWebDocument.constructor);
            abstractSerializedData.writeString(this.url);
            abstractSerializedData.writeInt32(this.size);
            abstractSerializedData.writeString(this.mime_type);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.attributes.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                this.attributes.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_inputWebFileGeoPointLocation extends InputWebFileLocation
    {
        public static int constructor = -1625153079;
        public long access_hash;
        public InputGeoPoint geo_point;
        public int h;
        public int scale;
        public int w;
        public int zoom;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.geo_point = InputGeoPoint.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            this.access_hash = abstractSerializedData.readInt64(b);
            this.w = abstractSerializedData.readInt32(b);
            this.h = abstractSerializedData.readInt32(b);
            this.zoom = abstractSerializedData.readInt32(b);
            this.scale = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputWebFileGeoPointLocation.constructor);
            this.geo_point.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeInt32(this.w);
            abstractSerializedData.writeInt32(this.h);
            abstractSerializedData.writeInt32(this.zoom);
            abstractSerializedData.writeInt32(this.scale);
        }
    }
    
    public static class TL_inputWebFileLocation extends InputWebFileLocation
    {
        public static int constructor = -1036396922;
        public long access_hash;
        public String url;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.url = abstractSerializedData.readString(b);
            this.access_hash = abstractSerializedData.readInt64(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_inputWebFileLocation.constructor);
            abstractSerializedData.writeString(this.url);
            abstractSerializedData.writeInt64(this.access_hash);
        }
    }
    
    public static class TL_invoice extends TLObject
    {
        public static int constructor = -1022713000;
        public String currency;
        public boolean email_requested;
        public boolean email_to_provider;
        public int flags;
        public boolean flexible;
        public boolean name_requested;
        public boolean phone_requested;
        public boolean phone_to_provider;
        public ArrayList<TL_labeledPrice> prices;
        public boolean shipping_address_requested;
        public boolean test;
        
        public TL_invoice() {
            this.prices = new ArrayList<TL_labeledPrice>();
        }
        
        public static TL_invoice TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_invoice.constructor == i) {
                final TL_invoice tl_invoice = new TL_invoice();
                tl_invoice.readParams(abstractSerializedData, b);
                return tl_invoice;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_invoice", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.flags = abstractSerializedData.readInt32(b);
            final int flags = this.flags;
            int i = 0;
            this.test = ((flags & 0x1) != 0x0);
            this.name_requested = ((this.flags & 0x2) != 0x0);
            this.phone_requested = ((this.flags & 0x4) != 0x0);
            this.email_requested = ((this.flags & 0x8) != 0x0);
            this.shipping_address_requested = ((this.flags & 0x10) != 0x0);
            this.flexible = ((this.flags & 0x20) != 0x0);
            this.phone_to_provider = ((this.flags & 0x40) != 0x0);
            this.email_to_provider = ((this.flags & 0x80) != 0x0);
            this.currency = abstractSerializedData.readString(b);
            final int int32 = abstractSerializedData.readInt32(b);
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final TL_labeledPrice tLdeserialize = TL_labeledPrice.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    this.prices.add(tLdeserialize);
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_invoice.constructor);
            int flags;
            if (this.test) {
                flags = (this.flags | 0x1);
            }
            else {
                flags = (this.flags & 0xFFFFFFFE);
            }
            this.flags = flags;
            int flags2;
            if (this.name_requested) {
                flags2 = (this.flags | 0x2);
            }
            else {
                flags2 = (this.flags & 0xFFFFFFFD);
            }
            this.flags = flags2;
            int flags3;
            if (this.phone_requested) {
                flags3 = (this.flags | 0x4);
            }
            else {
                flags3 = (this.flags & 0xFFFFFFFB);
            }
            this.flags = flags3;
            int flags4;
            if (this.email_requested) {
                flags4 = (this.flags | 0x8);
            }
            else {
                flags4 = (this.flags & 0xFFFFFFF7);
            }
            this.flags = flags4;
            int flags5;
            if (this.shipping_address_requested) {
                flags5 = (this.flags | 0x10);
            }
            else {
                flags5 = (this.flags & 0xFFFFFFEF);
            }
            this.flags = flags5;
            int flags6;
            if (this.flexible) {
                flags6 = (this.flags | 0x20);
            }
            else {
                flags6 = (this.flags & 0xFFFFFFDF);
            }
            this.flags = flags6;
            int flags7;
            if (this.phone_to_provider) {
                flags7 = (this.flags | 0x40);
            }
            else {
                flags7 = (this.flags & 0xFFFFFFBF);
            }
            this.flags = flags7;
            int flags8;
            if (this.email_to_provider) {
                flags8 = (this.flags | 0x80);
            }
            else {
                flags8 = (this.flags & 0xFFFFFF7F);
            }
            abstractSerializedData.writeInt32(this.flags = flags8);
            abstractSerializedData.writeString(this.currency);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.prices.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                this.prices.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_jsonArray extends JSONValue
    {
        public static int constructor = -146520221;
        public ArrayList<JSONValue> value;
        
        public TL_jsonArray() {
            this.value = new ArrayList<JSONValue>();
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final JSONValue tLdeserialize = JSONValue.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    this.value.add(tLdeserialize);
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_jsonArray.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.value.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                this.value.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_jsonBool extends JSONValue
    {
        public static int constructor = -952869270;
        public boolean value;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.value = abstractSerializedData.readBool(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_jsonBool.constructor);
            abstractSerializedData.writeBool(this.value);
        }
    }
    
    public static class TL_jsonNull extends JSONValue
    {
        public static int constructor = 1064139624;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_jsonNull.constructor);
        }
    }
    
    public static class TL_jsonNumber extends JSONValue
    {
        public static int constructor = 736157604;
        public double value;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.value = abstractSerializedData.readDouble(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_jsonNumber.constructor);
            abstractSerializedData.writeDouble(this.value);
        }
    }
    
    public static class TL_jsonObject extends JSONValue
    {
        public static int constructor = -1715350371;
        public ArrayList<TL_jsonObjectValue> value;
        
        public TL_jsonObject() {
            this.value = new ArrayList<TL_jsonObjectValue>();
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final TL_jsonObjectValue tLdeserialize = TL_jsonObjectValue.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    this.value.add(tLdeserialize);
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_jsonObject.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.value.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                this.value.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_jsonObjectValue extends TLObject
    {
        public static int constructor = -1059185703;
        public String key;
        public JSONValue value;
        
        public static TL_jsonObjectValue TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_jsonObjectValue.constructor == i) {
                final TL_jsonObjectValue tl_jsonObjectValue = new TL_jsonObjectValue();
                tl_jsonObjectValue.readParams(abstractSerializedData, b);
                return tl_jsonObjectValue;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_jsonObjectValue", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.key = abstractSerializedData.readString(b);
            this.value = JSONValue.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_jsonObjectValue.constructor);
            abstractSerializedData.writeString(this.key);
            this.value.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_jsonString extends JSONValue
    {
        public static int constructor = -1222740358;
        public String value;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.value = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_jsonString.constructor);
            abstractSerializedData.writeString(this.value);
        }
    }
    
    public static class TL_keyboardButton extends KeyboardButton
    {
        public static int constructor = -1560655744;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.text = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_keyboardButton.constructor);
            abstractSerializedData.writeString(super.text);
        }
    }
    
    public static class TL_keyboardButtonBuy extends KeyboardButton
    {
        public static int constructor = -1344716869;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.text = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_keyboardButtonBuy.constructor);
            abstractSerializedData.writeString(super.text);
        }
    }
    
    public static class TL_keyboardButtonCallback extends KeyboardButton
    {
        public static int constructor = 1748655686;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.text = abstractSerializedData.readString(b);
            super.data = abstractSerializedData.readByteArray(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_keyboardButtonCallback.constructor);
            abstractSerializedData.writeString(super.text);
            abstractSerializedData.writeByteArray(super.data);
        }
    }
    
    public static class TL_keyboardButtonGame extends KeyboardButton
    {
        public static int constructor = 1358175439;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.text = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_keyboardButtonGame.constructor);
            abstractSerializedData.writeString(super.text);
        }
    }
    
    public static class TL_keyboardButtonRequestGeoLocation extends KeyboardButton
    {
        public static int constructor = -59151553;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.text = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_keyboardButtonRequestGeoLocation.constructor);
            abstractSerializedData.writeString(super.text);
        }
    }
    
    public static class TL_keyboardButtonRequestPhone extends KeyboardButton
    {
        public static int constructor = -1318425559;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.text = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_keyboardButtonRequestPhone.constructor);
            abstractSerializedData.writeString(super.text);
        }
    }
    
    public static class TL_keyboardButtonRow extends TLObject
    {
        public static int constructor = 2002815875;
        public ArrayList<KeyboardButton> buttons;
        
        public TL_keyboardButtonRow() {
            this.buttons = new ArrayList<KeyboardButton>();
        }
        
        public static TL_keyboardButtonRow TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_keyboardButtonRow.constructor == i) {
                final TL_keyboardButtonRow tl_keyboardButtonRow = new TL_keyboardButtonRow();
                tl_keyboardButtonRow.readParams(abstractSerializedData, b);
                return tl_keyboardButtonRow;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_keyboardButtonRow", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final KeyboardButton tLdeserialize = KeyboardButton.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    this.buttons.add(tLdeserialize);
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_keyboardButtonRow.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.buttons.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                this.buttons.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_keyboardButtonSwitchInline extends KeyboardButton
    {
        public static int constructor = 90744648;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            boolean same_peer = true;
            if ((flags & 0x1) == 0x0) {
                same_peer = false;
            }
            super.same_peer = same_peer;
            super.text = abstractSerializedData.readString(b);
            super.query = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_keyboardButtonSwitchInline.constructor);
            int flags;
            if (super.same_peer) {
                flags = (super.flags | 0x1);
            }
            else {
                flags = (super.flags & 0xFFFFFFFE);
            }
            abstractSerializedData.writeInt32(super.flags = flags);
            abstractSerializedData.writeString(super.text);
            abstractSerializedData.writeString(super.query);
        }
    }
    
    public static class TL_keyboardButtonUrl extends KeyboardButton
    {
        public static int constructor = 629866245;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.text = abstractSerializedData.readString(b);
            super.url = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_keyboardButtonUrl.constructor);
            abstractSerializedData.writeString(super.text);
            abstractSerializedData.writeString(super.url);
        }
    }
    
    public static class TL_keyboardButtonUrlAuth extends KeyboardButton
    {
        public static int constructor = 280464681;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            super.text = abstractSerializedData.readString(b);
            if ((super.flags & 0x1) != 0x0) {
                super.fwd_text = abstractSerializedData.readString(b);
            }
            super.url = abstractSerializedData.readString(b);
            super.button_id = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_keyboardButtonUrlAuth.constructor);
            abstractSerializedData.writeInt32(super.flags);
            abstractSerializedData.writeString(super.text);
            if ((super.flags & 0x1) != 0x0) {
                abstractSerializedData.writeString(super.fwd_text);
            }
            abstractSerializedData.writeString(super.url);
            abstractSerializedData.writeInt32(super.button_id);
        }
    }
    
    public static class TL_labeledPrice extends TLObject
    {
        public static int constructor = -886477832;
        public long amount;
        public String label;
        
        public static TL_labeledPrice TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_labeledPrice.constructor == i) {
                final TL_labeledPrice tl_labeledPrice = new TL_labeledPrice();
                tl_labeledPrice.readParams(abstractSerializedData, b);
                return tl_labeledPrice;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_labeledPrice", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.label = abstractSerializedData.readString(b);
            this.amount = abstractSerializedData.readInt64(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_labeledPrice.constructor);
            abstractSerializedData.writeString(this.label);
            abstractSerializedData.writeInt64(this.amount);
        }
    }
    
    public static class TL_langPackDifference extends TLObject
    {
        public static int constructor = -209337866;
        public int from_version;
        public String lang_code;
        public ArrayList<LangPackString> strings;
        public int version;
        
        public TL_langPackDifference() {
            this.strings = new ArrayList<LangPackString>();
        }
        
        public static TL_langPackDifference TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_langPackDifference.constructor == i) {
                final TL_langPackDifference tl_langPackDifference = new TL_langPackDifference();
                tl_langPackDifference.readParams(abstractSerializedData, b);
                return tl_langPackDifference;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_langPackDifference", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.lang_code = abstractSerializedData.readString(b);
            this.from_version = abstractSerializedData.readInt32(b);
            this.version = abstractSerializedData.readInt32(b);
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final LangPackString tLdeserialize = LangPackString.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    this.strings.add(tLdeserialize);
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_langPackDifference.constructor);
            abstractSerializedData.writeString(this.lang_code);
            abstractSerializedData.writeInt32(this.from_version);
            abstractSerializedData.writeInt32(this.version);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.strings.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                this.strings.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_langPackLanguage extends TLObject
    {
        public static int constructor = -288727837;
        public String base_lang_code;
        public int flags;
        public String lang_code;
        public String name;
        public String native_name;
        public boolean official;
        public String plural_code;
        public boolean rtl;
        public int strings_count;
        public int translated_count;
        public String translations_url;
        
        public static TL_langPackLanguage TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_langPackLanguage.constructor == i) {
                final TL_langPackLanguage tl_langPackLanguage = new TL_langPackLanguage();
                tl_langPackLanguage.readParams(abstractSerializedData, b);
                return tl_langPackLanguage;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_langPackLanguage", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.flags = abstractSerializedData.readInt32(b);
            final int flags = this.flags;
            final boolean b2 = true;
            this.official = ((flags & 0x1) != 0x0);
            this.rtl = ((this.flags & 0x4) != 0x0 && b2);
            this.name = abstractSerializedData.readString(b);
            this.native_name = abstractSerializedData.readString(b);
            this.lang_code = abstractSerializedData.readString(b);
            if ((this.flags & 0x2) != 0x0) {
                this.base_lang_code = abstractSerializedData.readString(b);
            }
            this.plural_code = abstractSerializedData.readString(b);
            this.strings_count = abstractSerializedData.readInt32(b);
            this.translated_count = abstractSerializedData.readInt32(b);
            this.translations_url = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_langPackLanguage.constructor);
            int flags;
            if (this.official) {
                flags = (this.flags | 0x1);
            }
            else {
                flags = (this.flags & 0xFFFFFFFE);
            }
            this.flags = flags;
            int flags2;
            if (this.rtl) {
                flags2 = (this.flags | 0x4);
            }
            else {
                flags2 = (this.flags & 0xFFFFFFFB);
            }
            abstractSerializedData.writeInt32(this.flags = flags2);
            abstractSerializedData.writeString(this.name);
            abstractSerializedData.writeString(this.native_name);
            abstractSerializedData.writeString(this.lang_code);
            if ((this.flags & 0x2) != 0x0) {
                abstractSerializedData.writeString(this.base_lang_code);
            }
            abstractSerializedData.writeString(this.plural_code);
            abstractSerializedData.writeInt32(this.strings_count);
            abstractSerializedData.writeInt32(this.translated_count);
            abstractSerializedData.writeString(this.translations_url);
        }
    }
    
    public static class TL_langPackString extends LangPackString
    {
        public static int constructor = -892239370;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.key = abstractSerializedData.readString(b);
            super.value = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_langPackString.constructor);
            abstractSerializedData.writeString(super.key);
            abstractSerializedData.writeString(super.value);
        }
    }
    
    public static class TL_langPackStringDeleted extends LangPackString
    {
        public static int constructor = 695856818;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.key = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_langPackStringDeleted.constructor);
            abstractSerializedData.writeString(super.key);
        }
    }
    
    public static class TL_langPackStringPluralized extends LangPackString
    {
        public static int constructor = 1816636575;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            super.key = abstractSerializedData.readString(b);
            if ((super.flags & 0x1) != 0x0) {
                super.zero_value = abstractSerializedData.readString(b);
            }
            if ((super.flags & 0x2) != 0x0) {
                super.one_value = abstractSerializedData.readString(b);
            }
            if ((super.flags & 0x4) != 0x0) {
                super.two_value = abstractSerializedData.readString(b);
            }
            if ((super.flags & 0x8) != 0x0) {
                super.few_value = abstractSerializedData.readString(b);
            }
            if ((super.flags & 0x10) != 0x0) {
                super.many_value = abstractSerializedData.readString(b);
            }
            super.other_value = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_langPackStringPluralized.constructor);
            abstractSerializedData.writeInt32(super.flags);
            abstractSerializedData.writeString(super.key);
            if ((super.flags & 0x1) != 0x0) {
                abstractSerializedData.writeString(super.zero_value);
            }
            if ((super.flags & 0x2) != 0x0) {
                abstractSerializedData.writeString(super.one_value);
            }
            if ((super.flags & 0x4) != 0x0) {
                abstractSerializedData.writeString(super.two_value);
            }
            if ((super.flags & 0x8) != 0x0) {
                abstractSerializedData.writeString(super.few_value);
            }
            if ((super.flags & 0x10) != 0x0) {
                abstractSerializedData.writeString(super.many_value);
            }
            abstractSerializedData.writeString(super.other_value);
        }
    }
    
    public static class TL_langpack_getDifference extends TLObject
    {
        public static int constructor = -845657435;
        public int from_version;
        public String lang_code;
        public String lang_pack;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_langPackDifference.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_langpack_getDifference.constructor);
            abstractSerializedData.writeString(this.lang_pack);
            abstractSerializedData.writeString(this.lang_code);
            abstractSerializedData.writeInt32(this.from_version);
        }
    }
    
    public static class TL_langpack_getLangPack extends TLObject
    {
        public static int constructor = -1699363442;
        public String lang_code;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_langPackDifference.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_langpack_getLangPack.constructor);
            abstractSerializedData.writeString(this.lang_code);
        }
    }
    
    public static class TL_langpack_getLanguage extends TLObject
    {
        public static int constructor = 1784243458;
        public String lang_code;
        public String lang_pack;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_langPackLanguage.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_langpack_getLanguage.constructor);
            abstractSerializedData.writeString(this.lang_pack);
            abstractSerializedData.writeString(this.lang_code);
        }
    }
    
    public static class TL_langpack_getLanguages extends TLObject
    {
        public static int constructor = -2146445955;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, int i, final boolean b) {
            final Vector vector = new Vector();
            int int32;
            TL_langPackLanguage tLdeserialize;
            for (int32 = abstractSerializedData.readInt32(b), i = 0; i < int32; ++i) {
                tLdeserialize = TL_langPackLanguage.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                if (tLdeserialize == null) {
                    return vector;
                }
                vector.objects.add(tLdeserialize);
            }
            return vector;
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_langpack_getLanguages.constructor);
        }
    }
    
    public static class TL_langpack_getStrings extends TLObject
    {
        public static int constructor = 773776152;
        public ArrayList<String> keys;
        public String lang_code;
        
        public TL_langpack_getStrings() {
            this.keys = new ArrayList<String>();
        }
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, int i, final boolean b) {
            final Vector vector = new Vector();
            int int32;
            LangPackString tLdeserialize;
            for (int32 = abstractSerializedData.readInt32(b), i = 0; i < int32; ++i) {
                tLdeserialize = LangPackString.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                if (tLdeserialize == null) {
                    return vector;
                }
                vector.objects.add(tLdeserialize);
            }
            return vector;
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_langpack_getStrings.constructor);
            abstractSerializedData.writeString(this.lang_code);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.keys.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                abstractSerializedData.writeString(this.keys.get(i));
            }
        }
    }
    
    public static class TL_maskCoords extends TLObject
    {
        public static int constructor = -1361650766;
        public int n;
        public double x;
        public double y;
        public double zoom;
        
        public static TL_maskCoords TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_maskCoords.constructor == i) {
                final TL_maskCoords tl_maskCoords = new TL_maskCoords();
                tl_maskCoords.readParams(abstractSerializedData, b);
                return tl_maskCoords;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_maskCoords", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.n = abstractSerializedData.readInt32(b);
            this.x = abstractSerializedData.readDouble(b);
            this.y = abstractSerializedData.readDouble(b);
            this.zoom = abstractSerializedData.readDouble(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_maskCoords.constructor);
            abstractSerializedData.writeInt32(this.n);
            abstractSerializedData.writeDouble(this.x);
            abstractSerializedData.writeDouble(this.y);
            abstractSerializedData.writeDouble(this.zoom);
        }
    }
    
    public static class TL_message extends Message
    {
        public static int constructor = 1157215293;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            int i = 0;
            super.out = ((flags & 0x2) != 0x0);
            super.mentioned = ((super.flags & 0x10) != 0x0);
            super.media_unread = ((super.flags & 0x20) != 0x0);
            super.silent = ((super.flags & 0x2000) != 0x0);
            super.post = ((super.flags & 0x4000) != 0x0);
            super.from_scheduled = ((super.flags & 0x40000) != 0x0);
            super.legacy = ((super.flags & 0x80000) != 0x0);
            super.id = abstractSerializedData.readInt32(b);
            if ((super.flags & 0x100) != 0x0) {
                super.from_id = abstractSerializedData.readInt32(b);
            }
            super.to_id = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            if ((super.flags & 0x4) != 0x0) {
                super.fwd_from = MessageFwdHeader.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            if ((super.flags & 0x800) != 0x0) {
                super.via_bot_id = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x8) != 0x0) {
                super.reply_to_msg_id = abstractSerializedData.readInt32(b);
            }
            super.date = abstractSerializedData.readInt32(b);
            super.message = abstractSerializedData.readString(b);
            if ((super.flags & 0x200) != 0x0) {
                super.media = MessageMedia.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                final MessageMedia media = super.media;
                if (media != null) {
                    super.ttl = media.ttl_seconds;
                }
                final MessageMedia media2 = super.media;
                if (media2 != null && !TextUtils.isEmpty((CharSequence)media2.captionLegacy)) {
                    super.message = super.media.captionLegacy;
                }
            }
            if ((super.flags & 0x40) != 0x0) {
                super.reply_markup = ReplyMarkup.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            if ((super.flags & 0x80) != 0x0) {
                final int int32 = abstractSerializedData.readInt32(b);
                if (int32 != 481674261) {
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
                }
                else {
                    while (i < abstractSerializedData.readInt32(b)) {
                        final MessageEntity tLdeserialize = MessageEntity.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize == null) {
                            return;
                        }
                        super.entities.add(tLdeserialize);
                        ++i;
                    }
                }
            }
            if ((super.flags & 0x400) != 0x0) {
                super.views = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x8000) != 0x0) {
                super.edit_date = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x10000) != 0x0) {
                super.post_author = abstractSerializedData.readString(b);
            }
            if ((super.flags & 0x20000) != 0x0) {
                super.grouped_id = abstractSerializedData.readInt64(b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_message.constructor);
            int flags;
            if (super.out) {
                flags = (super.flags | 0x2);
            }
            else {
                flags = (super.flags & 0xFFFFFFFD);
            }
            super.flags = flags;
            int flags2;
            if (super.mentioned) {
                flags2 = (super.flags | 0x10);
            }
            else {
                flags2 = (super.flags & 0xFFFFFFEF);
            }
            super.flags = flags2;
            int flags3;
            if (super.media_unread) {
                flags3 = (super.flags | 0x20);
            }
            else {
                flags3 = (super.flags & 0xFFFFFFDF);
            }
            super.flags = flags3;
            int flags4;
            if (super.silent) {
                flags4 = (super.flags | 0x2000);
            }
            else {
                flags4 = (super.flags & 0xFFFFDFFF);
            }
            super.flags = flags4;
            int flags5;
            if (super.post) {
                flags5 = (super.flags | 0x4000);
            }
            else {
                flags5 = (super.flags & 0xFFFFBFFF);
            }
            super.flags = flags5;
            int flags6;
            if (super.from_scheduled) {
                flags6 = (super.flags | 0x40000);
            }
            else {
                flags6 = (super.flags & 0xFFFBFFFF);
            }
            super.flags = flags6;
            int flags7;
            if (super.legacy) {
                flags7 = (super.flags | 0x80000);
            }
            else {
                flags7 = (super.flags & 0xFFF7FFFF);
            }
            abstractSerializedData.writeInt32(super.flags = flags7);
            abstractSerializedData.writeInt32(super.id);
            if ((super.flags & 0x100) != 0x0) {
                abstractSerializedData.writeInt32(super.from_id);
            }
            super.to_id.serializeToStream(abstractSerializedData);
            if ((super.flags & 0x4) != 0x0) {
                super.fwd_from.serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x800) != 0x0) {
                abstractSerializedData.writeInt32(super.via_bot_id);
            }
            if ((super.flags & 0x8) != 0x0) {
                abstractSerializedData.writeInt32(super.reply_to_msg_id);
            }
            abstractSerializedData.writeInt32(super.date);
            abstractSerializedData.writeString(super.message);
            if ((super.flags & 0x200) != 0x0) {
                super.media.serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x40) != 0x0) {
                super.reply_markup.serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x80) != 0x0) {
                abstractSerializedData.writeInt32(481674261);
                final int size = super.entities.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; ++i) {
                    super.entities.get(i).serializeToStream(abstractSerializedData);
                }
            }
            if ((super.flags & 0x400) != 0x0) {
                abstractSerializedData.writeInt32(super.views);
            }
            if ((super.flags & 0x8000) != 0x0) {
                abstractSerializedData.writeInt32(super.edit_date);
            }
            if ((super.flags & 0x10000) != 0x0) {
                abstractSerializedData.writeString(super.post_author);
            }
            if ((super.flags & 0x20000) != 0x0) {
                abstractSerializedData.writeInt64(super.grouped_id);
            }
            ((Message)this).writeAttachPath(abstractSerializedData);
        }
    }
    
    public static class TL_messageActionBotAllowed extends MessageAction
    {
        public static int constructor = -1410748418;
        public String domain;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.domain = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageActionBotAllowed.constructor);
            abstractSerializedData.writeString(this.domain);
        }
    }
    
    public static class TL_messageActionChannelCreate extends MessageAction
    {
        public static int constructor = -1781355374;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.title = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageActionChannelCreate.constructor);
            abstractSerializedData.writeString(super.title);
        }
    }
    
    public static class TL_messageActionChannelMigrateFrom extends MessageAction
    {
        public static int constructor = -1336546578;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.title = abstractSerializedData.readString(b);
            super.chat_id = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageActionChannelMigrateFrom.constructor);
            abstractSerializedData.writeString(super.title);
            abstractSerializedData.writeInt32(super.chat_id);
        }
    }
    
    public static class TL_messageActionChatAddUser extends MessageAction
    {
        public static int constructor = 1217033015;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    super.users.add(abstractSerializedData.readInt32(b));
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageActionChatAddUser.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.users.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                abstractSerializedData.writeInt32(super.users.get(i));
            }
        }
    }
    
    public static class TL_messageActionChatAddUser_old extends TL_messageActionChatAddUser
    {
        public static int constructor = 1581055051;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.user_id = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageActionChatAddUser_old.constructor);
            abstractSerializedData.writeInt32(super.user_id);
        }
    }
    
    public static class TL_messageActionChatCreate extends MessageAction
    {
        public static int constructor = -1503425638;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.title = abstractSerializedData.readString(b);
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    super.users.add(abstractSerializedData.readInt32(b));
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageActionChatCreate.constructor);
            abstractSerializedData.writeString(super.title);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.users.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                abstractSerializedData.writeInt32(super.users.get(i));
            }
        }
    }
    
    public static class TL_messageActionChatDeletePhoto extends MessageAction
    {
        public static int constructor = -1780220945;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageActionChatDeletePhoto.constructor);
        }
    }
    
    public static class TL_messageActionChatDeleteUser extends MessageAction
    {
        public static int constructor = -1297179892;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.user_id = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageActionChatDeleteUser.constructor);
            abstractSerializedData.writeInt32(super.user_id);
        }
    }
    
    public static class TL_messageActionChatEditPhoto extends MessageAction
    {
        public static int constructor = 2144015272;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageActionChatEditPhoto.constructor);
            super.photo.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_messageActionChatEditTitle extends MessageAction
    {
        public static int constructor = -1247687078;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.title = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageActionChatEditTitle.constructor);
            abstractSerializedData.writeString(super.title);
        }
    }
    
    public static class TL_messageActionChatJoinedByLink extends MessageAction
    {
        public static int constructor = -123931160;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.inviter_id = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageActionChatJoinedByLink.constructor);
            abstractSerializedData.writeInt32(super.inviter_id);
        }
    }
    
    public static class TL_messageActionChatMigrateTo extends MessageAction
    {
        public static int constructor = 1371385889;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.channel_id = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageActionChatMigrateTo.constructor);
            abstractSerializedData.writeInt32(super.channel_id);
        }
    }
    
    public static class TL_messageActionContactSignUp extends MessageAction
    {
        public static int constructor = -202219658;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageActionContactSignUp.constructor);
        }
    }
    
    public static class TL_messageActionCreatedBroadcastList extends MessageAction
    {
        public static int constructor = 1431655767;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageActionCreatedBroadcastList.constructor);
        }
    }
    
    public static class TL_messageActionCustomAction extends MessageAction
    {
        public static int constructor = -85549226;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.message = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageActionCustomAction.constructor);
            abstractSerializedData.writeString(super.message);
        }
    }
    
    public static class TL_messageActionEmpty extends MessageAction
    {
        public static int constructor = -1230047312;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageActionEmpty.constructor);
        }
    }
    
    public static class TL_messageActionGameScore extends MessageAction
    {
        public static int constructor = -1834538890;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.game_id = abstractSerializedData.readInt64(b);
            super.score = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageActionGameScore.constructor);
            abstractSerializedData.writeInt64(super.game_id);
            abstractSerializedData.writeInt32(super.score);
        }
    }
    
    public static class TL_messageActionGroupCall extends MessageAction
    {
        public static int constructor = 2047704898;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            super.call = TL_inputGroupCall.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            if ((super.flags & 0x1) != 0x0) {
                super.duration = abstractSerializedData.readInt32(b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageActionGroupCall.constructor);
            abstractSerializedData.writeInt32(super.flags);
            super.call.serializeToStream(abstractSerializedData);
            if ((super.flags & 0x1) != 0x0) {
                abstractSerializedData.writeInt32(super.duration);
            }
        }
    }
    
    public static class TL_messageActionHistoryClear extends MessageAction
    {
        public static int constructor = -1615153660;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageActionHistoryClear.constructor);
        }
    }
    
    public static class TL_messageActionLoginUnknownLocation extends MessageAction
    {
        public static int constructor = 1431655925;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.title = abstractSerializedData.readString(b);
            super.address = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageActionLoginUnknownLocation.constructor);
            abstractSerializedData.writeString(super.title);
            abstractSerializedData.writeString(super.address);
        }
    }
    
    public static class TL_messageActionPaymentSent extends MessageAction
    {
        public static int constructor = 1080663248;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.currency = abstractSerializedData.readString(b);
            super.total_amount = abstractSerializedData.readInt64(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageActionPaymentSent.constructor);
            abstractSerializedData.writeString(super.currency);
            abstractSerializedData.writeInt64(super.total_amount);
        }
    }
    
    public static class TL_messageActionPhoneCall extends MessageAction
    {
        public static int constructor = -2132731265;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            super.video = ((super.flags & 0x4) != 0x0);
            super.call_id = abstractSerializedData.readInt64(b);
            if ((super.flags & 0x1) != 0x0) {
                super.reason = PhoneCallDiscardReason.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            if ((super.flags & 0x2) != 0x0) {
                super.duration = abstractSerializedData.readInt32(b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageActionPhoneCall.constructor);
            int flags;
            if (super.video) {
                flags = (super.flags | 0x4);
            }
            else {
                flags = (super.flags & 0xFFFFFFFB);
            }
            abstractSerializedData.writeInt32(super.flags = flags);
            abstractSerializedData.writeInt64(super.call_id);
            if ((super.flags & 0x1) != 0x0) {
                super.reason.serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x2) != 0x0) {
                abstractSerializedData.writeInt32(super.duration);
            }
        }
    }
    
    public static class TL_messageActionPinMessage extends MessageAction
    {
        public static int constructor = -1799538451;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageActionPinMessage.constructor);
        }
    }
    
    public static class TL_messageActionScreenshotTaken extends MessageAction
    {
        public static int constructor = 1200788123;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageActionScreenshotTaken.constructor);
        }
    }
    
    public static class TL_messageActionSecureValuesSent extends MessageAction
    {
        public static int constructor = -648257196;
        public ArrayList<SecureValueType> types;
        
        public TL_messageActionSecureValuesSent() {
            this.types = new ArrayList<SecureValueType>();
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final SecureValueType tLdeserialize = SecureValueType.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    this.types.add(tLdeserialize);
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageActionSecureValuesSent.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.types.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                this.types.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_messageActionTTLChange extends MessageAction
    {
        public static int constructor = 1431655762;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.ttl = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageActionTTLChange.constructor);
            abstractSerializedData.writeInt32(super.ttl);
        }
    }
    
    public static class TL_messageActionUserJoined extends MessageAction
    {
        public static int constructor = 1431655760;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageActionUserJoined.constructor);
        }
    }
    
    public static class TL_messageActionUserUpdatedPhoto extends MessageAction
    {
        public static int constructor = 1431655761;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.newUserPhoto = UserProfilePhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageActionUserUpdatedPhoto.constructor);
            super.newUserPhoto.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_messageEmpty extends Message
    {
        public static int constructor = -2082087340;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt32(b);
            super.to_id = new TL_peerUser();
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageEmpty.constructor);
            abstractSerializedData.writeInt32(super.id);
        }
    }
    
    public static class TL_messageEncryptedAction extends MessageAction
    {
        public static int constructor = 1431655927;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.encryptedAction = DecryptedMessageAction.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageEncryptedAction.constructor);
            super.encryptedAction.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_messageEntityBlockquote extends MessageEntity
    {
        public static int constructor = 34469328;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.offset = abstractSerializedData.readInt32(b);
            super.length = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageEntityBlockquote.constructor);
            abstractSerializedData.writeInt32(super.offset);
            abstractSerializedData.writeInt32(super.length);
        }
    }
    
    public static class TL_messageEntityBold extends MessageEntity
    {
        public static int constructor = -1117713463;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.offset = abstractSerializedData.readInt32(b);
            super.length = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageEntityBold.constructor);
            abstractSerializedData.writeInt32(super.offset);
            abstractSerializedData.writeInt32(super.length);
        }
    }
    
    public static class TL_messageEntityBotCommand extends MessageEntity
    {
        public static int constructor = 1827637959;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.offset = abstractSerializedData.readInt32(b);
            super.length = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageEntityBotCommand.constructor);
            abstractSerializedData.writeInt32(super.offset);
            abstractSerializedData.writeInt32(super.length);
        }
    }
    
    public static class TL_messageEntityCashtag extends MessageEntity
    {
        public static int constructor = 1280209983;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.offset = abstractSerializedData.readInt32(b);
            super.length = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageEntityCashtag.constructor);
            abstractSerializedData.writeInt32(super.offset);
            abstractSerializedData.writeInt32(super.length);
        }
    }
    
    public static class TL_messageEntityCode extends MessageEntity
    {
        public static int constructor = 681706865;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.offset = abstractSerializedData.readInt32(b);
            super.length = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageEntityCode.constructor);
            abstractSerializedData.writeInt32(super.offset);
            abstractSerializedData.writeInt32(super.length);
        }
    }
    
    public static class TL_messageEntityEmail extends MessageEntity
    {
        public static int constructor = 1692693954;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.offset = abstractSerializedData.readInt32(b);
            super.length = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageEntityEmail.constructor);
            abstractSerializedData.writeInt32(super.offset);
            abstractSerializedData.writeInt32(super.length);
        }
    }
    
    public static class TL_messageEntityHashtag extends MessageEntity
    {
        public static int constructor = 1868782349;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.offset = abstractSerializedData.readInt32(b);
            super.length = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageEntityHashtag.constructor);
            abstractSerializedData.writeInt32(super.offset);
            abstractSerializedData.writeInt32(super.length);
        }
    }
    
    public static class TL_messageEntityItalic extends MessageEntity
    {
        public static int constructor = -2106619040;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.offset = abstractSerializedData.readInt32(b);
            super.length = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageEntityItalic.constructor);
            abstractSerializedData.writeInt32(super.offset);
            abstractSerializedData.writeInt32(super.length);
        }
    }
    
    public static class TL_messageEntityMention extends MessageEntity
    {
        public static int constructor = -100378723;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.offset = abstractSerializedData.readInt32(b);
            super.length = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageEntityMention.constructor);
            abstractSerializedData.writeInt32(super.offset);
            abstractSerializedData.writeInt32(super.length);
        }
    }
    
    public static class TL_messageEntityMentionName extends MessageEntity
    {
        public static int constructor = 892193368;
        public int user_id;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.offset = abstractSerializedData.readInt32(b);
            super.length = abstractSerializedData.readInt32(b);
            this.user_id = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageEntityMentionName.constructor);
            abstractSerializedData.writeInt32(super.offset);
            abstractSerializedData.writeInt32(super.length);
            abstractSerializedData.writeInt32(this.user_id);
        }
    }
    
    public static class TL_messageEntityPhone extends MessageEntity
    {
        public static int constructor = -1687559349;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.offset = abstractSerializedData.readInt32(b);
            super.length = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageEntityPhone.constructor);
            abstractSerializedData.writeInt32(super.offset);
            abstractSerializedData.writeInt32(super.length);
        }
    }
    
    public static class TL_messageEntityPre extends MessageEntity
    {
        public static int constructor = 1938967520;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.offset = abstractSerializedData.readInt32(b);
            super.length = abstractSerializedData.readInt32(b);
            super.language = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageEntityPre.constructor);
            abstractSerializedData.writeInt32(super.offset);
            abstractSerializedData.writeInt32(super.length);
            abstractSerializedData.writeString(super.language);
        }
    }
    
    public static class TL_messageEntityStrike extends MessageEntity
    {
        public static int constructor = -1090087980;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.offset = abstractSerializedData.readInt32(b);
            super.length = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageEntityStrike.constructor);
            abstractSerializedData.writeInt32(super.offset);
            abstractSerializedData.writeInt32(super.length);
        }
    }
    
    public static class TL_messageEntityTextUrl extends MessageEntity
    {
        public static int constructor = 1990644519;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.offset = abstractSerializedData.readInt32(b);
            super.length = abstractSerializedData.readInt32(b);
            super.url = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageEntityTextUrl.constructor);
            abstractSerializedData.writeInt32(super.offset);
            abstractSerializedData.writeInt32(super.length);
            abstractSerializedData.writeString(super.url);
        }
    }
    
    public static class TL_messageEntityUnderline extends MessageEntity
    {
        public static int constructor = -1672577397;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.offset = abstractSerializedData.readInt32(b);
            super.length = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageEntityUnderline.constructor);
            abstractSerializedData.writeInt32(super.offset);
            abstractSerializedData.writeInt32(super.length);
        }
    }
    
    public static class TL_messageEntityUnknown extends MessageEntity
    {
        public static int constructor = -1148011883;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.offset = abstractSerializedData.readInt32(b);
            super.length = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageEntityUnknown.constructor);
            abstractSerializedData.writeInt32(super.offset);
            abstractSerializedData.writeInt32(super.length);
        }
    }
    
    public static class TL_messageEntityUrl extends MessageEntity
    {
        public static int constructor = 1859134776;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.offset = abstractSerializedData.readInt32(b);
            super.length = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageEntityUrl.constructor);
            abstractSerializedData.writeInt32(super.offset);
            abstractSerializedData.writeInt32(super.length);
        }
    }
    
    public static class TL_messageForwarded_old extends TL_messageForwarded_old2
    {
        public static int constructor = 99903492;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt32(b);
            super.fwd_from = new TL_messageFwdHeader();
            super.fwd_from.from_id = abstractSerializedData.readInt32(b);
            final MessageFwdHeader fwd_from = super.fwd_from;
            fwd_from.flags |= 0x1;
            fwd_from.date = abstractSerializedData.readInt32(b);
            super.from_id = abstractSerializedData.readInt32(b);
            super.to_id = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.out = abstractSerializedData.readBool(b);
            super.unread = abstractSerializedData.readBool(b);
            super.flags |= 0x304;
            super.date = abstractSerializedData.readInt32(b);
            super.message = abstractSerializedData.readString(b);
            super.media = MessageMedia.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            final MessageMedia media = super.media;
            if (media != null && !TextUtils.isEmpty((CharSequence)media.captionLegacy)) {
                super.message = super.media.captionLegacy;
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageForwarded_old.constructor);
            abstractSerializedData.writeInt32(super.id);
            abstractSerializedData.writeInt32(super.fwd_from.from_id);
            abstractSerializedData.writeInt32(super.fwd_from.date);
            abstractSerializedData.writeInt32(super.from_id);
            super.to_id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeBool(super.out);
            abstractSerializedData.writeBool(super.unread);
            abstractSerializedData.writeInt32(super.date);
            abstractSerializedData.writeString(super.message);
            super.media.serializeToStream(abstractSerializedData);
            ((Message)this).writeAttachPath(abstractSerializedData);
        }
    }
    
    public static class TL_messageForwarded_old2 extends Message
    {
        public static int constructor = -1553471722;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            final boolean b2 = false;
            super.unread = ((flags & 0x1) != 0x0);
            super.out = ((super.flags & 0x2) != 0x0);
            super.mentioned = ((super.flags & 0x10) != 0x0);
            boolean media_unread = b2;
            if ((super.flags & 0x20) != 0x0) {
                media_unread = true;
            }
            super.media_unread = media_unread;
            super.id = abstractSerializedData.readInt32(b);
            super.fwd_from = new TL_messageFwdHeader();
            super.fwd_from.from_id = abstractSerializedData.readInt32(b);
            final MessageFwdHeader fwd_from = super.fwd_from;
            fwd_from.flags |= 0x1;
            fwd_from.date = abstractSerializedData.readInt32(b);
            super.from_id = abstractSerializedData.readInt32(b);
            super.to_id = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.date = abstractSerializedData.readInt32(b);
            super.message = abstractSerializedData.readString(b);
            super.flags |= 0x304;
            super.media = MessageMedia.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            final MessageMedia media = super.media;
            if (media != null && !TextUtils.isEmpty((CharSequence)media.captionLegacy)) {
                super.message = super.media.captionLegacy;
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageForwarded_old2.constructor);
            int flags;
            if (super.unread) {
                flags = (super.flags | 0x1);
            }
            else {
                flags = (super.flags & 0xFFFFFFFE);
            }
            super.flags = flags;
            int flags2;
            if (super.out) {
                flags2 = (super.flags | 0x2);
            }
            else {
                flags2 = (super.flags & 0xFFFFFFFD);
            }
            super.flags = flags2;
            int flags3;
            if (super.mentioned) {
                flags3 = (super.flags | 0x10);
            }
            else {
                flags3 = (super.flags & 0xFFFFFFEF);
            }
            super.flags = flags3;
            int flags4;
            if (super.media_unread) {
                flags4 = (super.flags | 0x20);
            }
            else {
                flags4 = (super.flags & 0xFFFFFFDF);
            }
            abstractSerializedData.writeInt32(super.flags = flags4);
            abstractSerializedData.writeInt32(super.id);
            abstractSerializedData.writeInt32(super.fwd_from.from_id);
            abstractSerializedData.writeInt32(super.fwd_from.date);
            abstractSerializedData.writeInt32(super.from_id);
            super.to_id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(super.date);
            abstractSerializedData.writeString(super.message);
            super.media.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_messageFwdHeader extends MessageFwdHeader
    {
        public static int constructor = -332168592;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            if ((super.flags & 0x1) != 0x0) {
                super.from_id = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x20) != 0x0) {
                super.from_name = abstractSerializedData.readString(b);
            }
            super.date = abstractSerializedData.readInt32(b);
            if ((super.flags & 0x2) != 0x0) {
                super.channel_id = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x4) != 0x0) {
                super.channel_post = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x8) != 0x0) {
                super.post_author = abstractSerializedData.readString(b);
            }
            if ((super.flags & 0x10) != 0x0) {
                super.saved_from_peer = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            if ((super.flags & 0x10) != 0x0) {
                super.saved_from_msg_id = abstractSerializedData.readInt32(b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageFwdHeader.constructor);
            abstractSerializedData.writeInt32(super.flags);
            if ((super.flags & 0x1) != 0x0) {
                abstractSerializedData.writeInt32(super.from_id);
            }
            if ((super.flags & 0x20) != 0x0) {
                abstractSerializedData.writeString(super.from_name);
            }
            abstractSerializedData.writeInt32(super.date);
            if ((super.flags & 0x2) != 0x0) {
                abstractSerializedData.writeInt32(super.channel_id);
            }
            if ((super.flags & 0x4) != 0x0) {
                abstractSerializedData.writeInt32(super.channel_post);
            }
            if ((super.flags & 0x8) != 0x0) {
                abstractSerializedData.writeString(super.post_author);
            }
            if ((super.flags & 0x10) != 0x0) {
                super.saved_from_peer.serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x10) != 0x0) {
                abstractSerializedData.writeInt32(super.saved_from_msg_id);
            }
        }
    }
    
    public static class TL_messageFwdHeader_layer68 extends TL_messageFwdHeader
    {
        public static int constructor = -947462709;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            if ((super.flags & 0x1) != 0x0) {
                super.from_id = abstractSerializedData.readInt32(b);
            }
            super.date = abstractSerializedData.readInt32(b);
            if ((super.flags & 0x2) != 0x0) {
                super.channel_id = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x4) != 0x0) {
                super.channel_post = abstractSerializedData.readInt32(b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageFwdHeader_layer68.constructor);
            abstractSerializedData.writeInt32(super.flags);
            if ((super.flags & 0x1) != 0x0) {
                abstractSerializedData.writeInt32(super.from_id);
            }
            abstractSerializedData.writeInt32(super.date);
            if ((super.flags & 0x2) != 0x0) {
                abstractSerializedData.writeInt32(super.channel_id);
            }
            if ((super.flags & 0x4) != 0x0) {
                abstractSerializedData.writeInt32(super.channel_post);
            }
        }
    }
    
    public static class TL_messageFwdHeader_layer72 extends TL_messageFwdHeader
    {
        public static int constructor = -85986132;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            if ((super.flags & 0x1) != 0x0) {
                super.from_id = abstractSerializedData.readInt32(b);
            }
            super.date = abstractSerializedData.readInt32(b);
            if ((super.flags & 0x2) != 0x0) {
                super.channel_id = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x4) != 0x0) {
                super.channel_post = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x8) != 0x0) {
                super.post_author = abstractSerializedData.readString(b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageFwdHeader_layer72.constructor);
            abstractSerializedData.writeInt32(super.flags);
            if ((super.flags & 0x1) != 0x0) {
                abstractSerializedData.writeInt32(super.from_id);
            }
            abstractSerializedData.writeInt32(super.date);
            if ((super.flags & 0x2) != 0x0) {
                abstractSerializedData.writeInt32(super.channel_id);
            }
            if ((super.flags & 0x4) != 0x0) {
                abstractSerializedData.writeInt32(super.channel_post);
            }
            if ((super.flags & 0x8) != 0x0) {
                abstractSerializedData.writeString(super.post_author);
            }
        }
    }
    
    public static class TL_messageFwdHeader_layer96 extends TL_messageFwdHeader
    {
        public static int constructor = 1436466797;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            if ((super.flags & 0x1) != 0x0) {
                super.from_id = abstractSerializedData.readInt32(b);
            }
            super.date = abstractSerializedData.readInt32(b);
            if ((super.flags & 0x2) != 0x0) {
                super.channel_id = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x4) != 0x0) {
                super.channel_post = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x8) != 0x0) {
                super.post_author = abstractSerializedData.readString(b);
            }
            if ((super.flags & 0x10) != 0x0) {
                super.saved_from_peer = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            if ((super.flags & 0x10) != 0x0) {
                super.saved_from_msg_id = abstractSerializedData.readInt32(b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageFwdHeader_layer96.constructor);
            abstractSerializedData.writeInt32(super.flags);
            if ((super.flags & 0x1) != 0x0) {
                abstractSerializedData.writeInt32(super.from_id);
            }
            abstractSerializedData.writeInt32(super.date);
            if ((super.flags & 0x2) != 0x0) {
                abstractSerializedData.writeInt32(super.channel_id);
            }
            if ((super.flags & 0x4) != 0x0) {
                abstractSerializedData.writeInt32(super.channel_post);
            }
            if ((super.flags & 0x8) != 0x0) {
                abstractSerializedData.writeString(super.post_author);
            }
            if ((super.flags & 0x10) != 0x0) {
                super.saved_from_peer.serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x10) != 0x0) {
                abstractSerializedData.writeInt32(super.saved_from_msg_id);
            }
        }
    }
    
    public static class TL_messageMediaAudio_layer45 extends MessageMedia
    {
        public static int constructor = -961117440;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.audio_unused = Audio.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageMediaAudio_layer45.constructor);
            super.audio_unused.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_messageMediaContact extends MessageMedia
    {
        public static int constructor = -873313984;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.phone_number = abstractSerializedData.readString(b);
            super.first_name = abstractSerializedData.readString(b);
            super.last_name = abstractSerializedData.readString(b);
            super.vcard = abstractSerializedData.readString(b);
            super.user_id = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageMediaContact.constructor);
            abstractSerializedData.writeString(super.phone_number);
            abstractSerializedData.writeString(super.first_name);
            abstractSerializedData.writeString(super.last_name);
            abstractSerializedData.writeString(super.vcard);
            abstractSerializedData.writeInt32(super.user_id);
        }
    }
    
    public static class TL_messageMediaContact_layer81 extends TL_messageMediaContact
    {
        public static int constructor = 1585262393;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.phone_number = abstractSerializedData.readString(b);
            super.first_name = abstractSerializedData.readString(b);
            super.last_name = abstractSerializedData.readString(b);
            super.user_id = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageMediaContact_layer81.constructor);
            abstractSerializedData.writeString(super.phone_number);
            abstractSerializedData.writeString(super.first_name);
            abstractSerializedData.writeString(super.last_name);
            abstractSerializedData.writeInt32(super.user_id);
        }
    }
    
    public static class TL_messageMediaDocument extends MessageMedia
    {
        public static int constructor = -1666158377;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            if ((super.flags & 0x1) != 0x0) {
                super.document = Document.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            else {
                super.document = new TL_documentEmpty();
            }
            if ((super.flags & 0x4) != 0x0) {
                super.ttl_seconds = abstractSerializedData.readInt32(b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageMediaDocument.constructor);
            abstractSerializedData.writeInt32(super.flags);
            if ((super.flags & 0x1) != 0x0) {
                super.document.serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x4) != 0x0) {
                abstractSerializedData.writeInt32(super.ttl_seconds);
            }
        }
    }
    
    public static class TL_messageMediaDocument_layer68 extends TL_messageMediaDocument
    {
        public static int constructor = -203411800;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.document = Document.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.captionLegacy = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageMediaDocument_layer68.constructor);
            super.document.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(super.captionLegacy);
        }
    }
    
    public static class TL_messageMediaDocument_layer74 extends TL_messageMediaDocument
    {
        public static int constructor = 2084836563;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            if ((super.flags & 0x1) != 0x0) {
                super.document = Document.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            else {
                super.document = new TL_documentEmpty();
            }
            if ((super.flags & 0x2) != 0x0) {
                super.captionLegacy = abstractSerializedData.readString(b);
            }
            if ((super.flags & 0x4) != 0x0) {
                super.ttl_seconds = abstractSerializedData.readInt32(b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageMediaDocument_layer74.constructor);
            abstractSerializedData.writeInt32(super.flags);
            if ((super.flags & 0x1) != 0x0) {
                super.document.serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x2) != 0x0) {
                abstractSerializedData.writeString(super.captionLegacy);
            }
            if ((super.flags & 0x4) != 0x0) {
                abstractSerializedData.writeInt32(super.ttl_seconds);
            }
        }
    }
    
    public static class TL_messageMediaDocument_old extends TL_messageMediaDocument
    {
        public static int constructor = 802824708;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.document = Document.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageMediaDocument_old.constructor);
            super.document.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_messageMediaEmpty extends MessageMedia
    {
        public static int constructor = 1038967584;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageMediaEmpty.constructor);
        }
    }
    
    public static class TL_messageMediaGame extends MessageMedia
    {
        public static int constructor = -38694904;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.game = TL_game.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageMediaGame.constructor);
            super.game.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_messageMediaGeo extends MessageMedia
    {
        public static int constructor = 1457575028;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.geo = GeoPoint.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageMediaGeo.constructor);
            super.geo.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_messageMediaGeoLive extends MessageMedia
    {
        public static int constructor = 2084316681;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.geo = GeoPoint.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.period = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageMediaGeoLive.constructor);
            super.geo.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(super.period);
        }
    }
    
    public static class TL_messageMediaInvoice extends MessageMedia
    {
        public static int constructor = -2074799289;
        public WebDocument photo;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            final boolean b2 = false;
            super.shipping_address_requested = ((flags & 0x2) != 0x0);
            boolean test = b2;
            if ((super.flags & 0x8) != 0x0) {
                test = true;
            }
            super.test = test;
            super.title = abstractSerializedData.readString(b);
            super.description = abstractSerializedData.readString(b);
            if ((super.flags & 0x1) != 0x0) {
                this.photo = WebDocument.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            if ((super.flags & 0x4) != 0x0) {
                super.receipt_msg_id = abstractSerializedData.readInt32(b);
            }
            super.currency = abstractSerializedData.readString(b);
            super.total_amount = abstractSerializedData.readInt64(b);
            super.start_param = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageMediaInvoice.constructor);
            int flags;
            if (super.shipping_address_requested) {
                flags = (super.flags | 0x2);
            }
            else {
                flags = (super.flags & 0xFFFFFFFD);
            }
            super.flags = flags;
            int flags2;
            if (super.test) {
                flags2 = (super.flags | 0x8);
            }
            else {
                flags2 = (super.flags & 0xFFFFFFF7);
            }
            abstractSerializedData.writeInt32(super.flags = flags2);
            abstractSerializedData.writeString(super.title);
            abstractSerializedData.writeString(super.description);
            if ((super.flags & 0x1) != 0x0) {
                this.photo.serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x4) != 0x0) {
                abstractSerializedData.writeInt32(super.receipt_msg_id);
            }
            abstractSerializedData.writeString(super.currency);
            abstractSerializedData.writeInt64(super.total_amount);
            abstractSerializedData.writeString(super.start_param);
        }
    }
    
    public static class TL_messageMediaPhoto extends MessageMedia
    {
        public static int constructor = 1766936791;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            if ((super.flags & 0x1) != 0x0) {
                super.photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            else {
                super.photo = new TL_photoEmpty();
            }
            if ((super.flags & 0x4) != 0x0) {
                super.ttl_seconds = abstractSerializedData.readInt32(b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageMediaPhoto.constructor);
            abstractSerializedData.writeInt32(super.flags);
            if ((super.flags & 0x1) != 0x0) {
                super.photo.serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x4) != 0x0) {
                abstractSerializedData.writeInt32(super.ttl_seconds);
            }
        }
    }
    
    public static class TL_messageMediaPhoto_layer68 extends TL_messageMediaPhoto
    {
        public static int constructor = 1032643901;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.captionLegacy = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageMediaPhoto_layer68.constructor);
            super.photo.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(super.captionLegacy);
        }
    }
    
    public static class TL_messageMediaPhoto_layer74 extends TL_messageMediaPhoto
    {
        public static int constructor = -1256047857;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            if ((super.flags & 0x1) != 0x0) {
                super.photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            else {
                super.photo = new TL_photoEmpty();
            }
            if ((super.flags & 0x2) != 0x0) {
                super.captionLegacy = abstractSerializedData.readString(b);
            }
            if ((super.flags & 0x4) != 0x0) {
                super.ttl_seconds = abstractSerializedData.readInt32(b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageMediaPhoto_layer74.constructor);
            abstractSerializedData.writeInt32(super.flags);
            if ((super.flags & 0x1) != 0x0) {
                super.photo.serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x2) != 0x0) {
                abstractSerializedData.writeString(super.captionLegacy);
            }
            if ((super.flags & 0x4) != 0x0) {
                abstractSerializedData.writeInt32(super.ttl_seconds);
            }
        }
    }
    
    public static class TL_messageMediaPhoto_old extends TL_messageMediaPhoto
    {
        public static int constructor = -926655958;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageMediaPhoto_old.constructor);
            super.photo.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_messageMediaPoll extends MessageMedia
    {
        public static int constructor = 1272375192;
        public TL_poll poll;
        public TL_pollResults results;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.poll = TL_poll.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            this.results = TL_pollResults.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageMediaPoll.constructor);
            this.poll.serializeToStream(abstractSerializedData);
            this.results.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_messageMediaUnsupported extends MessageMedia
    {
        public static int constructor = -1618676578;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageMediaUnsupported.constructor);
        }
    }
    
    public static class TL_messageMediaUnsupported_old extends TL_messageMediaUnsupported
    {
        public static int constructor = 694364726;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.bytes = abstractSerializedData.readByteArray(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageMediaUnsupported_old.constructor);
            abstractSerializedData.writeByteArray(super.bytes);
        }
    }
    
    public static class TL_messageMediaVenue extends MessageMedia
    {
        public static int constructor = 784356159;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.geo = GeoPoint.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.title = abstractSerializedData.readString(b);
            super.address = abstractSerializedData.readString(b);
            super.provider = abstractSerializedData.readString(b);
            super.venue_id = abstractSerializedData.readString(b);
            super.venue_type = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageMediaVenue.constructor);
            super.geo.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(super.title);
            abstractSerializedData.writeString(super.address);
            abstractSerializedData.writeString(super.provider);
            abstractSerializedData.writeString(super.venue_id);
            abstractSerializedData.writeString(super.venue_type);
        }
    }
    
    public static class TL_messageMediaVenue_layer71 extends MessageMedia
    {
        public static int constructor = 2031269663;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.geo = GeoPoint.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.title = abstractSerializedData.readString(b);
            super.address = abstractSerializedData.readString(b);
            super.provider = abstractSerializedData.readString(b);
            super.venue_id = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageMediaVenue_layer71.constructor);
            super.geo.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(super.title);
            abstractSerializedData.writeString(super.address);
            abstractSerializedData.writeString(super.provider);
            abstractSerializedData.writeString(super.venue_id);
        }
    }
    
    public static class TL_messageMediaVideo_layer45 extends MessageMedia
    {
        public static int constructor = 1540298357;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.video_unused = Video.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.captionLegacy = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageMediaVideo_layer45.constructor);
            super.video_unused.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(super.captionLegacy);
        }
    }
    
    public static class TL_messageMediaVideo_old extends TL_messageMediaVideo_layer45
    {
        public static int constructor = -1563278704;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.video_unused = Video.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageMediaVideo_old.constructor);
            super.video_unused.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_messageMediaWebPage extends MessageMedia
    {
        public static int constructor = -1557277184;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.webpage = WebPage.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageMediaWebPage.constructor);
            super.webpage.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_messageRange extends TLObject
    {
        public static int constructor = 182649427;
        public int max_id;
        public int min_id;
        
        public static TL_messageRange TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_messageRange.constructor == i) {
                final TL_messageRange tl_messageRange = new TL_messageRange();
                tl_messageRange.readParams(abstractSerializedData, b);
                return tl_messageRange;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_messageRange", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.min_id = abstractSerializedData.readInt32(b);
            this.max_id = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageRange.constructor);
            abstractSerializedData.writeInt32(this.min_id);
            abstractSerializedData.writeInt32(this.max_id);
        }
    }
    
    public static class TL_messageService extends Message
    {
        public static int constructor = -1642487306;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            final boolean b2 = true;
            super.unread = ((flags & 0x1) != 0x0);
            super.out = ((super.flags & 0x2) != 0x0);
            super.mentioned = ((super.flags & 0x10) != 0x0);
            super.media_unread = ((super.flags & 0x20) != 0x0);
            super.silent = ((super.flags & 0x2000) != 0x0);
            super.post = ((super.flags & 0x4000) != 0x0);
            super.legacy = ((super.flags & 0x80000) != 0x0 && b2);
            super.id = abstractSerializedData.readInt32(b);
            if ((super.flags & 0x100) != 0x0) {
                super.from_id = abstractSerializedData.readInt32(b);
            }
            super.to_id = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            if ((super.flags & 0x8) != 0x0) {
                super.reply_to_msg_id = abstractSerializedData.readInt32(b);
            }
            super.date = abstractSerializedData.readInt32(b);
            super.action = MessageAction.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageService.constructor);
            int flags;
            if (super.unread) {
                flags = (super.flags | 0x1);
            }
            else {
                flags = (super.flags & 0xFFFFFFFE);
            }
            super.flags = flags;
            int flags2;
            if (super.out) {
                flags2 = (super.flags | 0x2);
            }
            else {
                flags2 = (super.flags & 0xFFFFFFFD);
            }
            super.flags = flags2;
            int flags3;
            if (super.mentioned) {
                flags3 = (super.flags | 0x10);
            }
            else {
                flags3 = (super.flags & 0xFFFFFFEF);
            }
            super.flags = flags3;
            int flags4;
            if (super.media_unread) {
                flags4 = (super.flags | 0x20);
            }
            else {
                flags4 = (super.flags & 0xFFFFFFDF);
            }
            super.flags = flags4;
            int flags5;
            if (super.silent) {
                flags5 = (super.flags | 0x2000);
            }
            else {
                flags5 = (super.flags & 0xFFFFDFFF);
            }
            super.flags = flags5;
            int flags6;
            if (super.post) {
                flags6 = (super.flags | 0x4000);
            }
            else {
                flags6 = (super.flags & 0xFFFFBFFF);
            }
            super.flags = flags6;
            int flags7;
            if (super.legacy) {
                flags7 = (super.flags | 0x80000);
            }
            else {
                flags7 = (super.flags & 0xFFF7FFFF);
            }
            abstractSerializedData.writeInt32(super.flags = flags7);
            abstractSerializedData.writeInt32(super.id);
            if ((super.flags & 0x100) != 0x0) {
                abstractSerializedData.writeInt32(super.from_id);
            }
            super.to_id.serializeToStream(abstractSerializedData);
            if ((super.flags & 0x8) != 0x0) {
                abstractSerializedData.writeInt32(super.reply_to_msg_id);
            }
            abstractSerializedData.writeInt32(super.date);
            super.action.serializeToStream(abstractSerializedData);
            ((Message)this).writeAttachPath(abstractSerializedData);
        }
    }
    
    public static class TL_messageService_layer48 extends TL_messageService
    {
        public static int constructor = -1066691065;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            final boolean b2 = true;
            super.unread = ((flags & 0x1) != 0x0);
            super.out = ((super.flags & 0x2) != 0x0);
            super.mentioned = ((super.flags & 0x10) != 0x0);
            super.media_unread = ((super.flags & 0x20) != 0x0);
            super.silent = ((super.flags & 0x2000) != 0x0);
            super.post = ((super.flags & 0x4000) != 0x0 && b2);
            super.id = abstractSerializedData.readInt32(b);
            if ((super.flags & 0x100) != 0x0) {
                super.from_id = abstractSerializedData.readInt32(b);
            }
            super.to_id = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            if (super.from_id == 0) {
                final Peer to_id = super.to_id;
                final int user_id = to_id.user_id;
                if (user_id != 0) {
                    super.from_id = user_id;
                }
                else {
                    super.from_id = -to_id.channel_id;
                }
            }
            super.date = abstractSerializedData.readInt32(b);
            super.action = MessageAction.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageService_layer48.constructor);
            int flags;
            if (super.unread) {
                flags = (super.flags | 0x1);
            }
            else {
                flags = (super.flags & 0xFFFFFFFE);
            }
            super.flags = flags;
            int flags2;
            if (super.out) {
                flags2 = (super.flags | 0x2);
            }
            else {
                flags2 = (super.flags & 0xFFFFFFFD);
            }
            super.flags = flags2;
            int flags3;
            if (super.mentioned) {
                flags3 = (super.flags | 0x10);
            }
            else {
                flags3 = (super.flags & 0xFFFFFFEF);
            }
            super.flags = flags3;
            int flags4;
            if (super.media_unread) {
                flags4 = (super.flags | 0x20);
            }
            else {
                flags4 = (super.flags & 0xFFFFFFDF);
            }
            super.flags = flags4;
            int flags5;
            if (super.silent) {
                flags5 = (super.flags | 0x2000);
            }
            else {
                flags5 = (super.flags & 0xFFFFDFFF);
            }
            super.flags = flags5;
            int flags6;
            if (super.post) {
                flags6 = (super.flags | 0x4000);
            }
            else {
                flags6 = (super.flags & 0xFFFFBFFF);
            }
            abstractSerializedData.writeInt32(super.flags = flags6);
            abstractSerializedData.writeInt32(super.id);
            if ((super.flags & 0x100) != 0x0) {
                abstractSerializedData.writeInt32(super.from_id);
            }
            super.to_id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(super.date);
            super.action.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_messageService_old extends TL_messageService
    {
        public static int constructor = -1618124613;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt32(b);
            super.from_id = abstractSerializedData.readInt32(b);
            super.to_id = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.out = abstractSerializedData.readBool(b);
            super.unread = abstractSerializedData.readBool(b);
            super.flags |= 0x100;
            super.date = abstractSerializedData.readInt32(b);
            super.action = MessageAction.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageService_old.constructor);
            abstractSerializedData.writeInt32(super.id);
            abstractSerializedData.writeInt32(super.from_id);
            super.to_id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeBool(super.out);
            abstractSerializedData.writeBool(super.unread);
            abstractSerializedData.writeInt32(super.date);
            super.action.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_messageService_old2 extends TL_messageService
    {
        public static int constructor = 495384334;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            final boolean b2 = true;
            super.unread = ((flags & 0x1) != 0x0);
            super.out = ((super.flags & 0x2) != 0x0);
            super.mentioned = ((super.flags & 0x10) != 0x0);
            super.media_unread = ((super.flags & 0x20) != 0x0 && b2);
            super.id = abstractSerializedData.readInt32(b);
            super.from_id = abstractSerializedData.readInt32(b);
            super.to_id = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.date = abstractSerializedData.readInt32(b);
            super.action = MessageAction.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.flags |= 0x100;
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messageService_old2.constructor);
            int flags;
            if (super.unread) {
                flags = (super.flags | 0x1);
            }
            else {
                flags = (super.flags & 0xFFFFFFFE);
            }
            super.flags = flags;
            int flags2;
            if (super.out) {
                flags2 = (super.flags | 0x2);
            }
            else {
                flags2 = (super.flags & 0xFFFFFFFD);
            }
            super.flags = flags2;
            int flags3;
            if (super.mentioned) {
                flags3 = (super.flags | 0x10);
            }
            else {
                flags3 = (super.flags & 0xFFFFFFEF);
            }
            super.flags = flags3;
            int flags4;
            if (super.media_unread) {
                flags4 = (super.flags | 0x20);
            }
            else {
                flags4 = (super.flags & 0xFFFFFFDF);
            }
            abstractSerializedData.writeInt32(super.flags = flags4);
            abstractSerializedData.writeInt32(super.id);
            abstractSerializedData.writeInt32(super.from_id);
            super.to_id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(super.date);
            super.action.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_message_layer47 extends TL_message
    {
        public static int constructor = -913120932;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            int i = 0;
            super.unread = ((flags & 0x1) != 0x0);
            super.out = ((super.flags & 0x2) != 0x0);
            super.mentioned = ((super.flags & 0x10) != 0x0);
            super.media_unread = ((super.flags & 0x20) != 0x0);
            super.id = abstractSerializedData.readInt32(b);
            if ((super.flags & 0x100) != 0x0) {
                super.from_id = abstractSerializedData.readInt32(b);
            }
            super.to_id = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            if (super.from_id == 0) {
                final Peer to_id = super.to_id;
                final int user_id = to_id.user_id;
                if (user_id != 0) {
                    super.from_id = user_id;
                }
                else {
                    super.from_id = -to_id.channel_id;
                }
            }
            if ((super.flags & 0x4) != 0x0) {
                super.fwd_from = new TL_messageFwdHeader();
                final Peer tLdeserialize = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                if (tLdeserialize instanceof TL_peerChannel) {
                    final MessageFwdHeader fwd_from = super.fwd_from;
                    fwd_from.channel_id = tLdeserialize.channel_id;
                    fwd_from.flags |= 0x2;
                }
                else if (tLdeserialize instanceof TL_peerUser) {
                    final MessageFwdHeader fwd_from2 = super.fwd_from;
                    fwd_from2.from_id = tLdeserialize.user_id;
                    fwd_from2.flags |= 0x1;
                }
                super.fwd_from.date = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x800) != 0x0) {
                super.via_bot_id = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x8) != 0x0) {
                super.reply_to_msg_id = abstractSerializedData.readInt32(b);
            }
            super.date = abstractSerializedData.readInt32(b);
            super.message = abstractSerializedData.readString(b);
            if ((super.flags & 0x200) != 0x0) {
                super.media = MessageMedia.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                final MessageMedia media = super.media;
                if (media != null && !TextUtils.isEmpty((CharSequence)media.captionLegacy)) {
                    super.message = super.media.captionLegacy;
                }
            }
            else {
                super.media = new TL_messageMediaEmpty();
            }
            if ((super.flags & 0x40) != 0x0) {
                super.reply_markup = ReplyMarkup.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            if ((super.flags & 0x80) != 0x0) {
                final int int32 = abstractSerializedData.readInt32(b);
                if (int32 != 481674261) {
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
                }
                else {
                    while (i < abstractSerializedData.readInt32(b)) {
                        final MessageEntity tLdeserialize2 = MessageEntity.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize2 == null) {
                            return;
                        }
                        super.entities.add(tLdeserialize2);
                        ++i;
                    }
                }
            }
            if ((super.flags & 0x400) != 0x0) {
                super.views = abstractSerializedData.readInt32(b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_message_layer47.constructor);
            int flags;
            if (super.unread) {
                flags = (super.flags | 0x1);
            }
            else {
                flags = (super.flags & 0xFFFFFFFE);
            }
            super.flags = flags;
            int flags2;
            if (super.out) {
                flags2 = (super.flags | 0x2);
            }
            else {
                flags2 = (super.flags & 0xFFFFFFFD);
            }
            super.flags = flags2;
            int flags3;
            if (super.mentioned) {
                flags3 = (super.flags | 0x10);
            }
            else {
                flags3 = (super.flags & 0xFFFFFFEF);
            }
            super.flags = flags3;
            int flags4;
            if (super.media_unread) {
                flags4 = (super.flags | 0x20);
            }
            else {
                flags4 = (super.flags & 0xFFFFFFDF);
            }
            abstractSerializedData.writeInt32(super.flags = flags4);
            abstractSerializedData.writeInt32(super.id);
            if ((super.flags & 0x100) != 0x0) {
                abstractSerializedData.writeInt32(super.from_id);
            }
            super.to_id.serializeToStream(abstractSerializedData);
            if ((super.flags & 0x4) != 0x0) {
                if (super.fwd_from.from_id != 0) {
                    final TL_peerUser tl_peerUser = new TL_peerUser();
                    tl_peerUser.user_id = super.fwd_from.from_id;
                    tl_peerUser.serializeToStream(abstractSerializedData);
                }
                else {
                    final TL_peerChannel tl_peerChannel = new TL_peerChannel();
                    tl_peerChannel.channel_id = super.fwd_from.channel_id;
                    tl_peerChannel.serializeToStream(abstractSerializedData);
                }
                abstractSerializedData.writeInt32(super.fwd_from.date);
            }
            if ((super.flags & 0x800) != 0x0) {
                abstractSerializedData.writeInt32(super.via_bot_id);
            }
            if ((super.flags & 0x8) != 0x0) {
                abstractSerializedData.writeInt32(super.reply_to_msg_id);
            }
            abstractSerializedData.writeInt32(super.date);
            abstractSerializedData.writeString(super.message);
            if ((super.flags & 0x200) != 0x0) {
                super.media.serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x40) != 0x0) {
                super.reply_markup.serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x80) != 0x0) {
                abstractSerializedData.writeInt32(481674261);
                final int size = super.entities.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; ++i) {
                    super.entities.get(i).serializeToStream(abstractSerializedData);
                }
            }
            if ((super.flags & 0x400) != 0x0) {
                abstractSerializedData.writeInt32(super.views);
            }
            ((Message)this).writeAttachPath(abstractSerializedData);
        }
    }
    
    public static class TL_message_layer68 extends TL_message
    {
        public static int constructor = -1063525281;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            int i = 0;
            super.unread = ((flags & 0x1) != 0x0);
            super.out = ((super.flags & 0x2) != 0x0);
            super.mentioned = ((super.flags & 0x10) != 0x0);
            super.media_unread = ((super.flags & 0x20) != 0x0);
            super.silent = ((super.flags & 0x2000) != 0x0);
            super.post = ((super.flags & 0x4000) != 0x0);
            super.with_my_score = ((super.flags & 0x40000000) != 0x0);
            super.id = abstractSerializedData.readInt32(b);
            if ((super.flags & 0x100) != 0x0) {
                super.from_id = abstractSerializedData.readInt32(b);
            }
            super.to_id = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            if (super.from_id == 0) {
                final Peer to_id = super.to_id;
                final int user_id = to_id.user_id;
                if (user_id != 0) {
                    super.from_id = user_id;
                }
                else {
                    super.from_id = -to_id.channel_id;
                }
            }
            if ((super.flags & 0x4) != 0x0) {
                super.fwd_from = MessageFwdHeader.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            if ((super.flags & 0x800) != 0x0) {
                super.via_bot_id = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x8) != 0x0) {
                super.reply_to_msg_id = abstractSerializedData.readInt32(b);
            }
            super.date = abstractSerializedData.readInt32(b);
            super.message = abstractSerializedData.readString(b);
            if ((super.flags & 0x200) != 0x0) {
                super.media = MessageMedia.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                final MessageMedia media = super.media;
                if (media != null && !TextUtils.isEmpty((CharSequence)media.captionLegacy)) {
                    super.message = super.media.captionLegacy;
                }
            }
            else {
                super.media = new TL_messageMediaEmpty();
            }
            if ((super.flags & 0x40) != 0x0) {
                super.reply_markup = ReplyMarkup.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            if ((super.flags & 0x80) != 0x0) {
                final int int32 = abstractSerializedData.readInt32(b);
                if (int32 != 481674261) {
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
                }
                else {
                    while (i < abstractSerializedData.readInt32(b)) {
                        final MessageEntity tLdeserialize = MessageEntity.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize == null) {
                            return;
                        }
                        super.entities.add(tLdeserialize);
                        ++i;
                    }
                }
            }
            if ((super.flags & 0x400) != 0x0) {
                super.views = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x8000) != 0x0) {
                super.edit_date = abstractSerializedData.readInt32(b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_message_layer68.constructor);
            int flags;
            if (super.unread) {
                flags = (super.flags | 0x1);
            }
            else {
                flags = (super.flags & 0xFFFFFFFE);
            }
            super.flags = flags;
            int flags2;
            if (super.out) {
                flags2 = (super.flags | 0x2);
            }
            else {
                flags2 = (super.flags & 0xFFFFFFFD);
            }
            super.flags = flags2;
            int flags3;
            if (super.mentioned) {
                flags3 = (super.flags | 0x10);
            }
            else {
                flags3 = (super.flags & 0xFFFFFFEF);
            }
            super.flags = flags3;
            int flags4;
            if (super.media_unread) {
                flags4 = (super.flags | 0x20);
            }
            else {
                flags4 = (super.flags & 0xFFFFFFDF);
            }
            super.flags = flags4;
            int flags5;
            if (super.silent) {
                flags5 = (super.flags | 0x2000);
            }
            else {
                flags5 = (super.flags & 0xFFFFDFFF);
            }
            super.flags = flags5;
            int flags6;
            if (super.post) {
                flags6 = (super.flags | 0x4000);
            }
            else {
                flags6 = (super.flags & 0xFFFFBFFF);
            }
            super.flags = flags6;
            int flags7;
            if (super.with_my_score) {
                flags7 = (super.flags | 0x40000000);
            }
            else {
                flags7 = (super.flags & 0xBFFFFFFF);
            }
            abstractSerializedData.writeInt32(super.flags = flags7);
            abstractSerializedData.writeInt32(super.id);
            if ((super.flags & 0x100) != 0x0) {
                abstractSerializedData.writeInt32(super.from_id);
            }
            super.to_id.serializeToStream(abstractSerializedData);
            if ((super.flags & 0x4) != 0x0) {
                super.fwd_from.serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x800) != 0x0) {
                abstractSerializedData.writeInt32(super.via_bot_id);
            }
            if ((super.flags & 0x8) != 0x0) {
                abstractSerializedData.writeInt32(super.reply_to_msg_id);
            }
            abstractSerializedData.writeInt32(super.date);
            abstractSerializedData.writeString(super.message);
            if ((super.flags & 0x200) != 0x0) {
                super.media.serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x40) != 0x0) {
                super.reply_markup.serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x80) != 0x0) {
                abstractSerializedData.writeInt32(481674261);
                final int size = super.entities.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; ++i) {
                    super.entities.get(i).serializeToStream(abstractSerializedData);
                }
            }
            if ((super.flags & 0x400) != 0x0) {
                abstractSerializedData.writeInt32(super.views);
            }
            if ((super.flags & 0x8000) != 0x0) {
                abstractSerializedData.writeInt32(super.edit_date);
            }
            ((Message)this).writeAttachPath(abstractSerializedData);
        }
    }
    
    public static class TL_message_layer72 extends TL_message
    {
        public static int constructor = -1864508399;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            int i = 0;
            super.out = ((flags & 0x2) != 0x0);
            super.mentioned = ((super.flags & 0x10) != 0x0);
            super.media_unread = ((super.flags & 0x20) != 0x0);
            super.silent = ((super.flags & 0x2000) != 0x0);
            super.post = ((super.flags & 0x4000) != 0x0);
            super.id = abstractSerializedData.readInt32(b);
            if ((super.flags & 0x100) != 0x0) {
                super.from_id = abstractSerializedData.readInt32(b);
            }
            super.to_id = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            if ((super.flags & 0x4) != 0x0) {
                super.fwd_from = MessageFwdHeader.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            if ((super.flags & 0x800) != 0x0) {
                super.via_bot_id = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x8) != 0x0) {
                super.reply_to_msg_id = abstractSerializedData.readInt32(b);
            }
            super.date = abstractSerializedData.readInt32(b);
            super.message = abstractSerializedData.readString(b);
            if ((super.flags & 0x200) != 0x0) {
                super.media = MessageMedia.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                final MessageMedia media = super.media;
                if (media != null) {
                    super.ttl = media.ttl_seconds;
                }
                final MessageMedia media2 = super.media;
                if (media2 != null && !TextUtils.isEmpty((CharSequence)media2.captionLegacy)) {
                    super.message = super.media.captionLegacy;
                }
            }
            if ((super.flags & 0x40) != 0x0) {
                super.reply_markup = ReplyMarkup.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            if ((super.flags & 0x80) != 0x0) {
                final int int32 = abstractSerializedData.readInt32(b);
                if (int32 != 481674261) {
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
                }
                else {
                    while (i < abstractSerializedData.readInt32(b)) {
                        final MessageEntity tLdeserialize = MessageEntity.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize == null) {
                            return;
                        }
                        super.entities.add(tLdeserialize);
                        ++i;
                    }
                }
            }
            if ((super.flags & 0x400) != 0x0) {
                super.views = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x8000) != 0x0) {
                super.edit_date = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x10000) != 0x0) {
                super.post_author = abstractSerializedData.readString(b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_message_layer72.constructor);
            int flags;
            if (super.out) {
                flags = (super.flags | 0x2);
            }
            else {
                flags = (super.flags & 0xFFFFFFFD);
            }
            super.flags = flags;
            int flags2;
            if (super.mentioned) {
                flags2 = (super.flags | 0x10);
            }
            else {
                flags2 = (super.flags & 0xFFFFFFEF);
            }
            super.flags = flags2;
            int flags3;
            if (super.media_unread) {
                flags3 = (super.flags | 0x20);
            }
            else {
                flags3 = (super.flags & 0xFFFFFFDF);
            }
            super.flags = flags3;
            int flags4;
            if (super.silent) {
                flags4 = (super.flags | 0x2000);
            }
            else {
                flags4 = (super.flags & 0xFFFFDFFF);
            }
            super.flags = flags4;
            int flags5;
            if (super.post) {
                flags5 = (super.flags | 0x4000);
            }
            else {
                flags5 = (super.flags & 0xFFFFBFFF);
            }
            abstractSerializedData.writeInt32(super.flags = flags5);
            abstractSerializedData.writeInt32(super.id);
            if ((super.flags & 0x100) != 0x0) {
                abstractSerializedData.writeInt32(super.from_id);
            }
            super.to_id.serializeToStream(abstractSerializedData);
            if ((super.flags & 0x4) != 0x0) {
                super.fwd_from.serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x800) != 0x0) {
                abstractSerializedData.writeInt32(super.via_bot_id);
            }
            if ((super.flags & 0x8) != 0x0) {
                abstractSerializedData.writeInt32(super.reply_to_msg_id);
            }
            abstractSerializedData.writeInt32(super.date);
            abstractSerializedData.writeString(super.message);
            if ((super.flags & 0x200) != 0x0) {
                super.media.serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x40) != 0x0) {
                super.reply_markup.serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x80) != 0x0) {
                abstractSerializedData.writeInt32(481674261);
                final int size = super.entities.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; ++i) {
                    super.entities.get(i).serializeToStream(abstractSerializedData);
                }
            }
            if ((super.flags & 0x400) != 0x0) {
                abstractSerializedData.writeInt32(super.views);
            }
            if ((super.flags & 0x8000) != 0x0) {
                abstractSerializedData.writeInt32(super.edit_date);
            }
            if ((super.flags & 0x10000) != 0x0) {
                abstractSerializedData.writeString(super.post_author);
            }
            ((Message)this).writeAttachPath(abstractSerializedData);
        }
    }
    
    public static class TL_message_old extends TL_message
    {
        public static int constructor = 585853626;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt32(b);
            super.from_id = abstractSerializedData.readInt32(b);
            super.to_id = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.out = abstractSerializedData.readBool(b);
            super.unread = abstractSerializedData.readBool(b);
            super.flags |= 0x300;
            super.date = abstractSerializedData.readInt32(b);
            super.message = abstractSerializedData.readString(b);
            super.media = MessageMedia.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            final MessageMedia media = super.media;
            if (media != null && !TextUtils.isEmpty((CharSequence)media.captionLegacy)) {
                super.message = super.media.captionLegacy;
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_message_old.constructor);
            abstractSerializedData.writeInt32(super.id);
            abstractSerializedData.writeInt32(super.from_id);
            super.to_id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeBool(super.out);
            abstractSerializedData.writeBool(super.unread);
            abstractSerializedData.writeInt32(super.date);
            abstractSerializedData.writeString(super.message);
            super.media.serializeToStream(abstractSerializedData);
            ((Message)this).writeAttachPath(abstractSerializedData);
        }
    }
    
    public static class TL_message_old2 extends TL_message
    {
        public static int constructor = 1450613171;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = (abstractSerializedData.readInt32(b) | 0x100 | 0x200);
            final int flags = super.flags;
            final boolean b2 = true;
            super.unread = ((flags & 0x1) != 0x0);
            super.out = ((super.flags & 0x2) != 0x0);
            super.mentioned = ((super.flags & 0x10) != 0x0);
            super.media_unread = ((super.flags & 0x20) != 0x0 && b2);
            super.id = abstractSerializedData.readInt32(b);
            super.from_id = abstractSerializedData.readInt32(b);
            super.to_id = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.date = abstractSerializedData.readInt32(b);
            super.message = abstractSerializedData.readString(b);
            super.media = MessageMedia.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            final MessageMedia media = super.media;
            if (media != null && !TextUtils.isEmpty((CharSequence)media.captionLegacy)) {
                super.message = super.media.captionLegacy;
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_message_old2.constructor);
            int flags;
            if (super.unread) {
                flags = (super.flags | 0x1);
            }
            else {
                flags = (super.flags & 0xFFFFFFFE);
            }
            super.flags = flags;
            int flags2;
            if (super.out) {
                flags2 = (super.flags | 0x2);
            }
            else {
                flags2 = (super.flags & 0xFFFFFFFD);
            }
            super.flags = flags2;
            int flags3;
            if (super.mentioned) {
                flags3 = (super.flags | 0x10);
            }
            else {
                flags3 = (super.flags & 0xFFFFFFEF);
            }
            super.flags = flags3;
            int flags4;
            if (super.media_unread) {
                flags4 = (super.flags | 0x20);
            }
            else {
                flags4 = (super.flags & 0xFFFFFFDF);
            }
            abstractSerializedData.writeInt32(super.flags = flags4);
            abstractSerializedData.writeInt32(super.id);
            abstractSerializedData.writeInt32(super.from_id);
            super.to_id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(super.date);
            abstractSerializedData.writeString(super.message);
            super.media.serializeToStream(abstractSerializedData);
            ((Message)this).writeAttachPath(abstractSerializedData);
        }
    }
    
    public static class TL_message_old3 extends TL_message
    {
        public static int constructor = -1481959023;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = (abstractSerializedData.readInt32(b) | 0x100 | 0x200);
            final int flags = super.flags;
            final boolean b2 = false;
            super.unread = ((flags & 0x1) != 0x0);
            super.out = ((super.flags & 0x2) != 0x0);
            super.mentioned = ((super.flags & 0x10) != 0x0);
            boolean media_unread = b2;
            if ((super.flags & 0x20) != 0x0) {
                media_unread = true;
            }
            super.media_unread = media_unread;
            super.id = abstractSerializedData.readInt32(b);
            super.from_id = abstractSerializedData.readInt32(b);
            super.to_id = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            if ((super.flags & 0x4) != 0x0) {
                super.fwd_from = new TL_messageFwdHeader();
                super.fwd_from.from_id = abstractSerializedData.readInt32(b);
                final MessageFwdHeader fwd_from = super.fwd_from;
                fwd_from.flags |= 0x1;
                fwd_from.date = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x8) != 0x0) {
                super.reply_to_msg_id = abstractSerializedData.readInt32(b);
            }
            super.date = abstractSerializedData.readInt32(b);
            super.message = abstractSerializedData.readString(b);
            super.media = MessageMedia.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            final MessageMedia media = super.media;
            if (media != null && !TextUtils.isEmpty((CharSequence)media.captionLegacy)) {
                super.message = super.media.captionLegacy;
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_message_old3.constructor);
            int flags;
            if (super.unread) {
                flags = (super.flags | 0x1);
            }
            else {
                flags = (super.flags & 0xFFFFFFFE);
            }
            super.flags = flags;
            int flags2;
            if (super.out) {
                flags2 = (super.flags | 0x2);
            }
            else {
                flags2 = (super.flags & 0xFFFFFFFD);
            }
            super.flags = flags2;
            int flags3;
            if (super.mentioned) {
                flags3 = (super.flags | 0x10);
            }
            else {
                flags3 = (super.flags & 0xFFFFFFEF);
            }
            super.flags = flags3;
            int flags4;
            if (super.media_unread) {
                flags4 = (super.flags | 0x20);
            }
            else {
                flags4 = (super.flags & 0xFFFFFFDF);
            }
            abstractSerializedData.writeInt32(super.flags = flags4);
            abstractSerializedData.writeInt32(super.id);
            abstractSerializedData.writeInt32(super.from_id);
            super.to_id.serializeToStream(abstractSerializedData);
            if ((super.flags & 0x4) != 0x0) {
                abstractSerializedData.writeInt32(super.fwd_from.from_id);
                abstractSerializedData.writeInt32(super.fwd_from.date);
            }
            if ((super.flags & 0x8) != 0x0) {
                abstractSerializedData.writeInt32(super.reply_to_msg_id);
            }
            abstractSerializedData.writeInt32(super.date);
            abstractSerializedData.writeString(super.message);
            super.media.serializeToStream(abstractSerializedData);
            ((Message)this).writeAttachPath(abstractSerializedData);
        }
    }
    
    public static class TL_message_old4 extends TL_message
    {
        public static int constructor = -1023016155;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = (abstractSerializedData.readInt32(b) | 0x100 | 0x200);
            final int flags = super.flags;
            final boolean b2 = false;
            super.unread = ((flags & 0x1) != 0x0);
            super.out = ((super.flags & 0x2) != 0x0);
            super.mentioned = ((super.flags & 0x10) != 0x0);
            boolean media_unread = b2;
            if ((super.flags & 0x20) != 0x0) {
                media_unread = true;
            }
            super.media_unread = media_unread;
            super.id = abstractSerializedData.readInt32(b);
            super.from_id = abstractSerializedData.readInt32(b);
            super.to_id = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            if ((super.flags & 0x4) != 0x0) {
                super.fwd_from = new TL_messageFwdHeader();
                super.fwd_from.from_id = abstractSerializedData.readInt32(b);
                final MessageFwdHeader fwd_from = super.fwd_from;
                fwd_from.flags |= 0x1;
                fwd_from.date = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x8) != 0x0) {
                super.reply_to_msg_id = abstractSerializedData.readInt32(b);
            }
            super.date = abstractSerializedData.readInt32(b);
            super.message = abstractSerializedData.readString(b);
            super.media = MessageMedia.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            final MessageMedia media = super.media;
            if (media != null && !TextUtils.isEmpty((CharSequence)media.captionLegacy)) {
                super.message = super.media.captionLegacy;
            }
            if ((super.flags & 0x40) != 0x0) {
                super.reply_markup = ReplyMarkup.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_message_old4.constructor);
            int flags;
            if (super.unread) {
                flags = (super.flags | 0x1);
            }
            else {
                flags = (super.flags & 0xFFFFFFFE);
            }
            super.flags = flags;
            int flags2;
            if (super.out) {
                flags2 = (super.flags | 0x2);
            }
            else {
                flags2 = (super.flags & 0xFFFFFFFD);
            }
            super.flags = flags2;
            int flags3;
            if (super.mentioned) {
                flags3 = (super.flags | 0x10);
            }
            else {
                flags3 = (super.flags & 0xFFFFFFEF);
            }
            super.flags = flags3;
            int flags4;
            if (super.media_unread) {
                flags4 = (super.flags | 0x20);
            }
            else {
                flags4 = (super.flags & 0xFFFFFFDF);
            }
            abstractSerializedData.writeInt32(super.flags = flags4);
            abstractSerializedData.writeInt32(super.id);
            abstractSerializedData.writeInt32(super.from_id);
            super.to_id.serializeToStream(abstractSerializedData);
            if ((super.flags & 0x4) != 0x0) {
                abstractSerializedData.writeInt32(super.fwd_from.from_id);
                abstractSerializedData.writeInt32(super.fwd_from.date);
            }
            if ((super.flags & 0x8) != 0x0) {
                abstractSerializedData.writeInt32(super.reply_to_msg_id);
            }
            abstractSerializedData.writeInt32(super.date);
            abstractSerializedData.writeString(super.message);
            super.media.serializeToStream(abstractSerializedData);
            if ((super.flags & 0x40) != 0x0) {
                super.reply_markup.serializeToStream(abstractSerializedData);
            }
            ((Message)this).writeAttachPath(abstractSerializedData);
        }
    }
    
    public static class TL_message_old5 extends TL_message
    {
        public static int constructor = -260565816;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = (abstractSerializedData.readInt32(b) | 0x100 | 0x200);
            final int flags = super.flags;
            int i = 0;
            super.unread = ((flags & 0x1) != 0x0);
            super.out = ((super.flags & 0x2) != 0x0);
            super.mentioned = ((super.flags & 0x10) != 0x0);
            super.media_unread = ((super.flags & 0x20) != 0x0);
            super.id = abstractSerializedData.readInt32(b);
            super.from_id = abstractSerializedData.readInt32(b);
            super.to_id = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            if ((super.flags & 0x4) != 0x0) {
                super.fwd_from = new TL_messageFwdHeader();
                super.fwd_from.from_id = abstractSerializedData.readInt32(b);
                final MessageFwdHeader fwd_from = super.fwd_from;
                fwd_from.flags |= 0x1;
                fwd_from.date = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x8) != 0x0) {
                super.reply_to_msg_id = abstractSerializedData.readInt32(b);
            }
            super.date = abstractSerializedData.readInt32(b);
            super.message = abstractSerializedData.readString(b);
            super.media = MessageMedia.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            final MessageMedia media = super.media;
            if (media != null && !TextUtils.isEmpty((CharSequence)media.captionLegacy)) {
                super.message = super.media.captionLegacy;
            }
            if ((super.flags & 0x40) != 0x0) {
                super.reply_markup = ReplyMarkup.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            if ((super.flags & 0x80) != 0x0) {
                final int int32 = abstractSerializedData.readInt32(b);
                if (int32 != 481674261) {
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
                }
                else {
                    while (i < abstractSerializedData.readInt32(b)) {
                        final MessageEntity tLdeserialize = MessageEntity.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize == null) {
                            return;
                        }
                        super.entities.add(tLdeserialize);
                        ++i;
                    }
                }
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_message_old5.constructor);
            int flags;
            if (super.unread) {
                flags = (super.flags | 0x1);
            }
            else {
                flags = (super.flags & 0xFFFFFFFE);
            }
            super.flags = flags;
            int flags2;
            if (super.out) {
                flags2 = (super.flags | 0x2);
            }
            else {
                flags2 = (super.flags & 0xFFFFFFFD);
            }
            super.flags = flags2;
            int flags3;
            if (super.mentioned) {
                flags3 = (super.flags | 0x10);
            }
            else {
                flags3 = (super.flags & 0xFFFFFFEF);
            }
            super.flags = flags3;
            int flags4;
            if (super.media_unread) {
                flags4 = (super.flags | 0x20);
            }
            else {
                flags4 = (super.flags & 0xFFFFFFDF);
            }
            abstractSerializedData.writeInt32(super.flags = flags4);
            abstractSerializedData.writeInt32(super.id);
            abstractSerializedData.writeInt32(super.from_id);
            super.to_id.serializeToStream(abstractSerializedData);
            if ((super.flags & 0x4) != 0x0) {
                abstractSerializedData.writeInt32(super.fwd_from.from_id);
                abstractSerializedData.writeInt32(super.fwd_from.date);
            }
            if ((super.flags & 0x8) != 0x0) {
                abstractSerializedData.writeInt32(super.reply_to_msg_id);
            }
            abstractSerializedData.writeInt32(super.date);
            abstractSerializedData.writeString(super.message);
            super.media.serializeToStream(abstractSerializedData);
            if ((super.flags & 0x40) != 0x0) {
                super.reply_markup.serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x80) != 0x0) {
                abstractSerializedData.writeInt32(481674261);
                final int size = super.entities.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; ++i) {
                    super.entities.get(i).serializeToStream(abstractSerializedData);
                }
            }
            ((Message)this).writeAttachPath(abstractSerializedData);
        }
    }
    
    public static class TL_message_old6 extends TL_message
    {
        public static int constructor = 736885382;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = (abstractSerializedData.readInt32(b) | 0x100);
            final int flags = super.flags;
            int i = 0;
            super.unread = ((flags & 0x1) != 0x0);
            super.out = ((super.flags & 0x2) != 0x0);
            super.mentioned = ((super.flags & 0x10) != 0x0);
            super.media_unread = ((super.flags & 0x20) != 0x0);
            super.id = abstractSerializedData.readInt32(b);
            super.from_id = abstractSerializedData.readInt32(b);
            super.to_id = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            if ((super.flags & 0x4) != 0x0) {
                super.fwd_from = new TL_messageFwdHeader();
                super.fwd_from.from_id = abstractSerializedData.readInt32(b);
                final MessageFwdHeader fwd_from = super.fwd_from;
                fwd_from.flags |= 0x1;
                fwd_from.date = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x8) != 0x0) {
                super.reply_to_msg_id = abstractSerializedData.readInt32(b);
            }
            super.date = abstractSerializedData.readInt32(b);
            super.message = abstractSerializedData.readString(b);
            if ((super.flags & 0x200) != 0x0) {
                super.media = MessageMedia.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                final MessageMedia media = super.media;
                if (media != null && !TextUtils.isEmpty((CharSequence)media.captionLegacy)) {
                    super.message = super.media.captionLegacy;
                }
            }
            else {
                super.media = new TL_messageMediaEmpty();
            }
            if ((super.flags & 0x40) != 0x0) {
                super.reply_markup = ReplyMarkup.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            if ((super.flags & 0x80) != 0x0) {
                final int int32 = abstractSerializedData.readInt32(b);
                if (int32 != 481674261) {
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
                }
                else {
                    while (i < abstractSerializedData.readInt32(b)) {
                        final MessageEntity tLdeserialize = MessageEntity.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize == null) {
                            return;
                        }
                        super.entities.add(tLdeserialize);
                        ++i;
                    }
                }
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_message_old6.constructor);
            int flags;
            if (super.unread) {
                flags = (super.flags | 0x1);
            }
            else {
                flags = (super.flags & 0xFFFFFFFE);
            }
            super.flags = flags;
            int flags2;
            if (super.out) {
                flags2 = (super.flags | 0x2);
            }
            else {
                flags2 = (super.flags & 0xFFFFFFFD);
            }
            super.flags = flags2;
            int flags3;
            if (super.mentioned) {
                flags3 = (super.flags | 0x10);
            }
            else {
                flags3 = (super.flags & 0xFFFFFFEF);
            }
            super.flags = flags3;
            int flags4;
            if (super.media_unread) {
                flags4 = (super.flags | 0x20);
            }
            else {
                flags4 = (super.flags & 0xFFFFFFDF);
            }
            abstractSerializedData.writeInt32(super.flags = flags4);
            abstractSerializedData.writeInt32(super.id);
            abstractSerializedData.writeInt32(super.from_id);
            super.to_id.serializeToStream(abstractSerializedData);
            if ((super.flags & 0x4) != 0x0) {
                abstractSerializedData.writeInt32(super.fwd_from.from_id);
                abstractSerializedData.writeInt32(super.fwd_from.date);
            }
            if ((super.flags & 0x8) != 0x0) {
                abstractSerializedData.writeInt32(super.reply_to_msg_id);
            }
            abstractSerializedData.writeInt32(super.date);
            abstractSerializedData.writeString(super.message);
            if ((super.flags & 0x200) != 0x0) {
                super.media.serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x40) != 0x0) {
                super.reply_markup.serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x80) != 0x0) {
                abstractSerializedData.writeInt32(481674261);
                final int size = super.entities.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; ++i) {
                    super.entities.get(i).serializeToStream(abstractSerializedData);
                }
            }
            ((Message)this).writeAttachPath(abstractSerializedData);
        }
    }
    
    public static class TL_message_old7 extends TL_message
    {
        public static int constructor = 1537633299;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            int i = 0;
            super.unread = ((flags & 0x1) != 0x0);
            super.out = ((super.flags & 0x2) != 0x0);
            super.mentioned = ((super.flags & 0x10) != 0x0);
            super.media_unread = ((super.flags & 0x20) != 0x0);
            super.id = abstractSerializedData.readInt32(b);
            if ((super.flags & 0x100) != 0x0) {
                super.from_id = abstractSerializedData.readInt32(b);
            }
            super.to_id = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            if (super.from_id == 0) {
                final Peer to_id = super.to_id;
                final int user_id = to_id.user_id;
                if (user_id != 0) {
                    super.from_id = user_id;
                }
                else {
                    super.from_id = -to_id.channel_id;
                }
            }
            if ((super.flags & 0x4) != 0x0) {
                super.fwd_from = new TL_messageFwdHeader();
                final Peer tLdeserialize = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                if (tLdeserialize instanceof TL_peerChannel) {
                    final MessageFwdHeader fwd_from = super.fwd_from;
                    fwd_from.channel_id = tLdeserialize.channel_id;
                    fwd_from.flags |= 0x2;
                }
                else if (tLdeserialize instanceof TL_peerUser) {
                    final MessageFwdHeader fwd_from2 = super.fwd_from;
                    fwd_from2.from_id = tLdeserialize.user_id;
                    fwd_from2.flags |= 0x1;
                }
                super.fwd_from.date = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x8) != 0x0) {
                super.reply_to_msg_id = abstractSerializedData.readInt32(b);
            }
            super.date = abstractSerializedData.readInt32(b);
            super.message = abstractSerializedData.readString(b);
            if ((super.flags & 0x200) != 0x0) {
                super.media = MessageMedia.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                final MessageMedia media = super.media;
                if (media != null && !TextUtils.isEmpty((CharSequence)media.captionLegacy)) {
                    super.message = super.media.captionLegacy;
                }
            }
            else {
                super.media = new TL_messageMediaEmpty();
            }
            if ((super.flags & 0x40) != 0x0) {
                super.reply_markup = ReplyMarkup.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            if ((super.flags & 0x80) != 0x0) {
                final int int32 = abstractSerializedData.readInt32(b);
                if (int32 != 481674261) {
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
                }
                else {
                    while (i < abstractSerializedData.readInt32(b)) {
                        final MessageEntity tLdeserialize2 = MessageEntity.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize2 == null) {
                            return;
                        }
                        super.entities.add(tLdeserialize2);
                        ++i;
                    }
                }
            }
            if ((super.flags & 0x400) != 0x0) {
                super.views = abstractSerializedData.readInt32(b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_message_old7.constructor);
            int flags;
            if (super.unread) {
                flags = (super.flags | 0x1);
            }
            else {
                flags = (super.flags & 0xFFFFFFFE);
            }
            super.flags = flags;
            int flags2;
            if (super.out) {
                flags2 = (super.flags | 0x2);
            }
            else {
                flags2 = (super.flags & 0xFFFFFFFD);
            }
            super.flags = flags2;
            int flags3;
            if (super.mentioned) {
                flags3 = (super.flags | 0x10);
            }
            else {
                flags3 = (super.flags & 0xFFFFFFEF);
            }
            super.flags = flags3;
            int flags4;
            if (super.media_unread) {
                flags4 = (super.flags | 0x20);
            }
            else {
                flags4 = (super.flags & 0xFFFFFFDF);
            }
            abstractSerializedData.writeInt32(super.flags = flags4);
            abstractSerializedData.writeInt32(super.id);
            if ((super.flags & 0x100) != 0x0) {
                abstractSerializedData.writeInt32(super.from_id);
            }
            super.to_id.serializeToStream(abstractSerializedData);
            if ((super.flags & 0x4) != 0x0) {
                if (super.fwd_from.from_id != 0) {
                    final TL_peerUser tl_peerUser = new TL_peerUser();
                    tl_peerUser.user_id = super.fwd_from.from_id;
                    tl_peerUser.serializeToStream(abstractSerializedData);
                }
                else {
                    final TL_peerChannel tl_peerChannel = new TL_peerChannel();
                    tl_peerChannel.channel_id = super.fwd_from.channel_id;
                    tl_peerChannel.serializeToStream(abstractSerializedData);
                }
                abstractSerializedData.writeInt32(super.fwd_from.date);
            }
            if ((super.flags & 0x8) != 0x0) {
                abstractSerializedData.writeInt32(super.reply_to_msg_id);
            }
            abstractSerializedData.writeInt32(super.date);
            abstractSerializedData.writeString(super.message);
            if ((super.flags & 0x200) != 0x0) {
                super.media.serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x40) != 0x0) {
                super.reply_markup.serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x80) != 0x0) {
                abstractSerializedData.writeInt32(481674261);
                final int size = super.entities.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; ++i) {
                    super.entities.get(i).serializeToStream(abstractSerializedData);
                }
            }
            if ((super.flags & 0x400) != 0x0) {
                abstractSerializedData.writeInt32(super.views);
            }
            ((Message)this).writeAttachPath(abstractSerializedData);
        }
    }
    
    public static class TL_message_secret extends TL_message
    {
        public static int constructor = 1431655930;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            int i = 0;
            super.unread = ((flags & 0x1) != 0x0);
            super.out = ((super.flags & 0x2) != 0x0);
            super.mentioned = ((super.flags & 0x10) != 0x0);
            super.media_unread = ((super.flags & 0x20) != 0x0);
            super.id = abstractSerializedData.readInt32(b);
            super.ttl = abstractSerializedData.readInt32(b);
            super.from_id = abstractSerializedData.readInt32(b);
            super.to_id = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.date = abstractSerializedData.readInt32(b);
            super.message = abstractSerializedData.readString(b);
            super.media = MessageMedia.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            final MessageMedia media = super.media;
            if (media != null && !TextUtils.isEmpty((CharSequence)media.captionLegacy)) {
                super.message = super.media.captionLegacy;
            }
            final int int32 = abstractSerializedData.readInt32(b);
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final MessageEntity tLdeserialize = MessageEntity.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.entities.add(tLdeserialize);
                    ++i;
                }
                if ((super.flags & 0x800) != 0x0) {
                    super.via_bot_name = abstractSerializedData.readString(b);
                }
                if ((super.flags & 0x8) != 0x0) {
                    super.reply_to_random_id = abstractSerializedData.readInt64(b);
                }
                if ((super.flags & 0x20000) != 0x0) {
                    super.grouped_id = abstractSerializedData.readInt64(b);
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_message_secret.constructor);
            int flags;
            if (super.unread) {
                flags = (super.flags | 0x1);
            }
            else {
                flags = (super.flags & 0xFFFFFFFE);
            }
            super.flags = flags;
            int flags2;
            if (super.out) {
                flags2 = (super.flags | 0x2);
            }
            else {
                flags2 = (super.flags & 0xFFFFFFFD);
            }
            super.flags = flags2;
            int flags3;
            if (super.mentioned) {
                flags3 = (super.flags | 0x10);
            }
            else {
                flags3 = (super.flags & 0xFFFFFFEF);
            }
            super.flags = flags3;
            int flags4;
            if (super.media_unread) {
                flags4 = (super.flags | 0x20);
            }
            else {
                flags4 = (super.flags & 0xFFFFFFDF);
            }
            abstractSerializedData.writeInt32(super.flags = flags4);
            abstractSerializedData.writeInt32(super.id);
            abstractSerializedData.writeInt32(super.ttl);
            abstractSerializedData.writeInt32(super.from_id);
            super.to_id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(super.date);
            abstractSerializedData.writeString(super.message);
            super.media.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.entities.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                super.entities.get(i).serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x800) != 0x0) {
                abstractSerializedData.writeString(super.via_bot_name);
            }
            if ((super.flags & 0x8) != 0x0) {
                abstractSerializedData.writeInt64(super.reply_to_random_id);
            }
            if ((super.flags & 0x20000) != 0x0) {
                abstractSerializedData.writeInt64(super.grouped_id);
            }
            ((Message)this).writeAttachPath(abstractSerializedData);
        }
    }
    
    public static class TL_message_secret_layer72 extends TL_message
    {
        public static int constructor = 1431655929;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            int i = 0;
            super.unread = ((flags & 0x1) != 0x0);
            super.out = ((super.flags & 0x2) != 0x0);
            super.mentioned = ((super.flags & 0x10) != 0x0);
            super.media_unread = ((super.flags & 0x20) != 0x0);
            super.id = abstractSerializedData.readInt32(b);
            super.ttl = abstractSerializedData.readInt32(b);
            super.from_id = abstractSerializedData.readInt32(b);
            super.to_id = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.date = abstractSerializedData.readInt32(b);
            super.message = abstractSerializedData.readString(b);
            super.media = MessageMedia.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            final MessageMedia media = super.media;
            if (media != null && !TextUtils.isEmpty((CharSequence)media.captionLegacy)) {
                super.message = super.media.captionLegacy;
            }
            final int int32 = abstractSerializedData.readInt32(b);
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final MessageEntity tLdeserialize = MessageEntity.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.entities.add(tLdeserialize);
                    ++i;
                }
                if ((super.flags & 0x800) != 0x0) {
                    super.via_bot_name = abstractSerializedData.readString(b);
                }
                if ((super.flags & 0x8) != 0x0) {
                    super.reply_to_random_id = abstractSerializedData.readInt64(b);
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_message_secret_layer72.constructor);
            int flags;
            if (super.unread) {
                flags = (super.flags | 0x1);
            }
            else {
                flags = (super.flags & 0xFFFFFFFE);
            }
            super.flags = flags;
            int flags2;
            if (super.out) {
                flags2 = (super.flags | 0x2);
            }
            else {
                flags2 = (super.flags & 0xFFFFFFFD);
            }
            super.flags = flags2;
            int flags3;
            if (super.mentioned) {
                flags3 = (super.flags | 0x10);
            }
            else {
                flags3 = (super.flags & 0xFFFFFFEF);
            }
            super.flags = flags3;
            int flags4;
            if (super.media_unread) {
                flags4 = (super.flags | 0x20);
            }
            else {
                flags4 = (super.flags & 0xFFFFFFDF);
            }
            abstractSerializedData.writeInt32(super.flags = flags4);
            abstractSerializedData.writeInt32(super.id);
            abstractSerializedData.writeInt32(super.ttl);
            abstractSerializedData.writeInt32(super.from_id);
            super.to_id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(super.date);
            abstractSerializedData.writeString(super.message);
            super.media.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.entities.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                super.entities.get(i).serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x800) != 0x0) {
                abstractSerializedData.writeString(super.via_bot_name);
            }
            if ((super.flags & 0x8) != 0x0) {
                abstractSerializedData.writeInt64(super.reply_to_random_id);
            }
            ((Message)this).writeAttachPath(abstractSerializedData);
        }
    }
    
    public static class TL_message_secret_old extends TL_message_secret
    {
        public static int constructor = 1431655928;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = (abstractSerializedData.readInt32(b) | 0x100 | 0x200);
            final int flags = super.flags;
            final boolean b2 = true;
            super.unread = ((flags & 0x1) != 0x0);
            super.out = ((super.flags & 0x2) != 0x0);
            super.mentioned = ((super.flags & 0x10) != 0x0);
            super.media_unread = ((super.flags & 0x20) != 0x0 && b2);
            super.id = abstractSerializedData.readInt32(b);
            super.ttl = abstractSerializedData.readInt32(b);
            super.from_id = abstractSerializedData.readInt32(b);
            super.to_id = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.date = abstractSerializedData.readInt32(b);
            super.message = abstractSerializedData.readString(b);
            super.media = MessageMedia.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            final MessageMedia media = super.media;
            if (media != null && !TextUtils.isEmpty((CharSequence)media.captionLegacy)) {
                super.message = super.media.captionLegacy;
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_message_secret_old.constructor);
            int flags;
            if (super.unread) {
                flags = (super.flags | 0x1);
            }
            else {
                flags = (super.flags & 0xFFFFFFFE);
            }
            super.flags = flags;
            int flags2;
            if (super.out) {
                flags2 = (super.flags | 0x2);
            }
            else {
                flags2 = (super.flags & 0xFFFFFFFD);
            }
            super.flags = flags2;
            int flags3;
            if (super.mentioned) {
                flags3 = (super.flags | 0x10);
            }
            else {
                flags3 = (super.flags & 0xFFFFFFEF);
            }
            super.flags = flags3;
            int flags4;
            if (super.media_unread) {
                flags4 = (super.flags | 0x20);
            }
            else {
                flags4 = (super.flags & 0xFFFFFFDF);
            }
            abstractSerializedData.writeInt32(super.flags = flags4);
            abstractSerializedData.writeInt32(super.id);
            abstractSerializedData.writeInt32(super.ttl);
            abstractSerializedData.writeInt32(super.from_id);
            super.to_id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(super.date);
            abstractSerializedData.writeString(super.message);
            super.media.serializeToStream(abstractSerializedData);
            ((Message)this).writeAttachPath(abstractSerializedData);
        }
    }
    
    public static class TL_messages_acceptEncryption extends TLObject
    {
        public static int constructor = 1035731989;
        public byte[] g_b;
        public long key_fingerprint;
        public TL_inputEncryptedChat peer;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return EncryptedChat.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_acceptEncryption.constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeByteArray(this.g_b);
            abstractSerializedData.writeInt64(this.key_fingerprint);
        }
    }
    
    public static class TL_messages_acceptUrlAuth extends TLObject
    {
        public static int constructor = -148247912;
        public int button_id;
        public int flags;
        public int msg_id;
        public InputPeer peer;
        public boolean write_allowed;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return UrlAuthResult.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_acceptUrlAuth.constructor);
            int flags;
            if (this.write_allowed) {
                flags = (this.flags | 0x1);
            }
            else {
                flags = (this.flags & 0xFFFFFFFE);
            }
            abstractSerializedData.writeInt32(this.flags = flags);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.msg_id);
            abstractSerializedData.writeInt32(this.button_id);
        }
    }
    
    public static class TL_messages_addChatUser extends TLObject
    {
        public static int constructor = -106911223;
        public int chat_id;
        public int fwd_limit;
        public InputUser user_id;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Updates.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_addChatUser.constructor);
            abstractSerializedData.writeInt32(this.chat_id);
            this.user_id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.fwd_limit);
        }
    }
    
    public static class TL_messages_affectedHistory extends TLObject
    {
        public static int constructor = -1269012015;
        public int offset;
        public int pts;
        public int pts_count;
        
        public static TL_messages_affectedHistory TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_messages_affectedHistory.constructor == i) {
                final TL_messages_affectedHistory tl_messages_affectedHistory = new TL_messages_affectedHistory();
                tl_messages_affectedHistory.readParams(abstractSerializedData, b);
                return tl_messages_affectedHistory;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_messages_affectedHistory", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.pts = abstractSerializedData.readInt32(b);
            this.pts_count = abstractSerializedData.readInt32(b);
            this.offset = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_affectedHistory.constructor);
            abstractSerializedData.writeInt32(this.pts);
            abstractSerializedData.writeInt32(this.pts_count);
            abstractSerializedData.writeInt32(this.offset);
        }
    }
    
    public static class TL_messages_affectedMessages extends TLObject
    {
        public static int constructor = -2066640507;
        public int pts;
        public int pts_count;
        
        public static TL_messages_affectedMessages TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_messages_affectedMessages.constructor == i) {
                final TL_messages_affectedMessages tl_messages_affectedMessages = new TL_messages_affectedMessages();
                tl_messages_affectedMessages.readParams(abstractSerializedData, b);
                return tl_messages_affectedMessages;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_messages_affectedMessages", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.pts = abstractSerializedData.readInt32(b);
            this.pts_count = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_affectedMessages.constructor);
            abstractSerializedData.writeInt32(this.pts);
            abstractSerializedData.writeInt32(this.pts_count);
        }
    }
    
    public static class TL_messages_allStickers extends messages_AllStickers
    {
        public static int constructor = -302170017;
        public int hash;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.hash = abstractSerializedData.readInt32(b);
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final StickerSet tLdeserialize = StickerSet.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.sets.add(tLdeserialize);
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_allStickers.constructor);
            abstractSerializedData.writeInt32(this.hash);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.sets.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                super.sets.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_messages_allStickersNotModified extends messages_AllStickers
    {
        public static int constructor = -395967805;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_allStickersNotModified.constructor);
        }
    }
    
    public static class TL_messages_archivedStickers extends TLObject
    {
        public static int constructor = 1338747336;
        public int count;
        public ArrayList<StickerSetCovered> sets;
        
        public TL_messages_archivedStickers() {
            this.sets = new ArrayList<StickerSetCovered>();
        }
        
        public static TL_messages_archivedStickers TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_messages_archivedStickers.constructor == i) {
                final TL_messages_archivedStickers tl_messages_archivedStickers = new TL_messages_archivedStickers();
                tl_messages_archivedStickers.readParams(abstractSerializedData, b);
                return tl_messages_archivedStickers;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_messages_archivedStickers", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.count = abstractSerializedData.readInt32(b);
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final StickerSetCovered tLdeserialize = StickerSetCovered.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    this.sets.add(tLdeserialize);
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_archivedStickers.constructor);
            abstractSerializedData.writeInt32(this.count);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.sets.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                this.sets.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_messages_botCallbackAnswer extends TLObject
    {
        public static int constructor = 911761060;
        public boolean alert;
        public int cache_time;
        public int flags;
        public boolean has_url;
        public String message;
        public boolean native_ui;
        public String url;
        
        public static TL_messages_botCallbackAnswer TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_messages_botCallbackAnswer.constructor == i) {
                final TL_messages_botCallbackAnswer tl_messages_botCallbackAnswer = new TL_messages_botCallbackAnswer();
                tl_messages_botCallbackAnswer.readParams(abstractSerializedData, b);
                return tl_messages_botCallbackAnswer;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_messages_botCallbackAnswer", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.flags = abstractSerializedData.readInt32(b);
            final int flags = this.flags;
            final boolean b2 = false;
            this.alert = ((flags & 0x2) != 0x0);
            this.has_url = ((this.flags & 0x8) != 0x0);
            boolean native_ui = b2;
            if ((this.flags & 0x10) != 0x0) {
                native_ui = true;
            }
            this.native_ui = native_ui;
            if ((this.flags & 0x1) != 0x0) {
                this.message = abstractSerializedData.readString(b);
            }
            if ((this.flags & 0x4) != 0x0) {
                this.url = abstractSerializedData.readString(b);
            }
            this.cache_time = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_botCallbackAnswer.constructor);
            int flags;
            if (this.alert) {
                flags = (this.flags | 0x2);
            }
            else {
                flags = (this.flags & 0xFFFFFFFD);
            }
            this.flags = flags;
            int flags2;
            if (this.has_url) {
                flags2 = (this.flags | 0x8);
            }
            else {
                flags2 = (this.flags & 0xFFFFFFF7);
            }
            this.flags = flags2;
            int flags3;
            if (this.native_ui) {
                flags3 = (this.flags | 0x10);
            }
            else {
                flags3 = (this.flags & 0xFFFFFFEF);
            }
            abstractSerializedData.writeInt32(this.flags = flags3);
            if ((this.flags & 0x1) != 0x0) {
                abstractSerializedData.writeString(this.message);
            }
            if ((this.flags & 0x4) != 0x0) {
                abstractSerializedData.writeString(this.url);
            }
            abstractSerializedData.writeInt32(this.cache_time);
        }
    }
    
    public static class TL_messages_botResults extends messages_BotResults
    {
        public static int constructor = -1803769784;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            final int n = 0;
            super.gallery = ((flags & 0x1) != 0x0);
            super.query_id = abstractSerializedData.readInt64(b);
            if ((super.flags & 0x2) != 0x0) {
                super.next_offset = abstractSerializedData.readString(b);
            }
            if ((super.flags & 0x4) != 0x0) {
                super.switch_pm = TL_inlineBotSwitchPM.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            final int int32 = abstractSerializedData.readInt32(b);
            if (int32 != 481674261) {
                if (!b) {
                    return;
                }
                throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
            }
            else {
                for (int int33 = abstractSerializedData.readInt32(b), i = 0; i < int33; ++i) {
                    final BotInlineResult tLdeserialize = BotInlineResult.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.results.add(tLdeserialize);
                }
                super.cache_time = abstractSerializedData.readInt32(b);
                final int int34 = abstractSerializedData.readInt32(b);
                if (int34 == 481674261) {
                    for (int int35 = abstractSerializedData.readInt32(b), j = n; j < int35; ++j) {
                        final User tLdeserialize2 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize2 == null) {
                            return;
                        }
                        super.users.add(tLdeserialize2);
                    }
                    return;
                }
                if (!b) {
                    return;
                }
                throw new RuntimeException(String.format("wrong Vector magic, got %x", int34));
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_botResults.constructor);
            int flags;
            if (super.gallery) {
                flags = (super.flags | 0x1);
            }
            else {
                flags = (super.flags & 0xFFFFFFFE);
            }
            abstractSerializedData.writeInt32(super.flags = flags);
            abstractSerializedData.writeInt64(super.query_id);
            if ((super.flags & 0x2) != 0x0) {
                abstractSerializedData.writeString(super.next_offset);
            }
            if ((super.flags & 0x4) != 0x0) {
                super.switch_pm.serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size = super.results.size();
            abstractSerializedData.writeInt32(size);
            final int n = 0;
            for (int i = 0; i < size; ++i) {
                super.results.get(i).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(super.cache_time);
            abstractSerializedData.writeInt32(481674261);
            final int size2 = super.users.size();
            abstractSerializedData.writeInt32(size2);
            for (int j = n; j < size2; ++j) {
                super.users.get(j).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_messages_botResults_layer71 extends TL_messages_botResults
    {
        public static int constructor = -858565059;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            int i = 0;
            super.gallery = ((flags & 0x1) != 0x0);
            super.query_id = abstractSerializedData.readInt64(b);
            if ((super.flags & 0x2) != 0x0) {
                super.next_offset = abstractSerializedData.readString(b);
            }
            if ((super.flags & 0x4) != 0x0) {
                super.switch_pm = TL_inlineBotSwitchPM.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            final int int32 = abstractSerializedData.readInt32(b);
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final BotInlineResult tLdeserialize = BotInlineResult.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.results.add(tLdeserialize);
                    ++i;
                }
                super.cache_time = abstractSerializedData.readInt32(b);
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_botResults_layer71.constructor);
            int flags;
            if (super.gallery) {
                flags = (super.flags | 0x1);
            }
            else {
                flags = (super.flags & 0xFFFFFFFE);
            }
            abstractSerializedData.writeInt32(super.flags = flags);
            abstractSerializedData.writeInt64(super.query_id);
            if ((super.flags & 0x2) != 0x0) {
                abstractSerializedData.writeString(super.next_offset);
            }
            if ((super.flags & 0x4) != 0x0) {
                super.switch_pm.serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size = super.results.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                super.results.get(i).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(super.cache_time);
        }
    }
    
    public static class TL_messages_channelMessages extends messages_Messages
    {
        public static int constructor = -1725551049;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            final int n = 0;
            super.inexact = ((flags & 0x2) != 0x0);
            super.pts = abstractSerializedData.readInt32(b);
            super.count = abstractSerializedData.readInt32(b);
            final int int32 = abstractSerializedData.readInt32(b);
            if (int32 != 481674261) {
                if (!b) {
                    return;
                }
                throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
            }
            else {
                for (int int33 = abstractSerializedData.readInt32(b), i = 0; i < int33; ++i) {
                    final Message tLdeserialize = Message.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.messages.add(tLdeserialize);
                }
                final int int34 = abstractSerializedData.readInt32(b);
                if (int34 != 481674261) {
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int34));
                }
                else {
                    for (int int35 = abstractSerializedData.readInt32(b), j = 0; j < int35; ++j) {
                        final Chat tLdeserialize2 = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize2 == null) {
                            return;
                        }
                        super.chats.add(tLdeserialize2);
                    }
                    final int int36 = abstractSerializedData.readInt32(b);
                    if (int36 == 481674261) {
                        for (int int37 = abstractSerializedData.readInt32(b), k = n; k < int37; ++k) {
                            final User tLdeserialize3 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                            if (tLdeserialize3 == null) {
                                return;
                            }
                            super.users.add(tLdeserialize3);
                        }
                        return;
                    }
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int36));
                }
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_channelMessages.constructor);
            int flags;
            if (super.inexact) {
                flags = (super.flags | 0x2);
            }
            else {
                flags = (super.flags & 0xFFFFFFFD);
            }
            abstractSerializedData.writeInt32(super.flags = flags);
            abstractSerializedData.writeInt32(super.pts);
            abstractSerializedData.writeInt32(super.count);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.messages.size();
            abstractSerializedData.writeInt32(size);
            final int n = 0;
            for (int i = 0; i < size; ++i) {
                super.messages.get(i).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size2 = super.chats.size();
            abstractSerializedData.writeInt32(size2);
            for (int j = 0; j < size2; ++j) {
                super.chats.get(j).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size3 = super.users.size();
            abstractSerializedData.writeInt32(size3);
            for (int k = n; k < size3; ++k) {
                super.users.get(k).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_messages_chatFull extends TLObject
    {
        public static int constructor = -438840932;
        public ArrayList<Chat> chats;
        public ChatFull full_chat;
        public ArrayList<User> users;
        
        public TL_messages_chatFull() {
            this.chats = new ArrayList<Chat>();
            this.users = new ArrayList<User>();
        }
        
        public static TL_messages_chatFull TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_messages_chatFull.constructor == i) {
                final TL_messages_chatFull tl_messages_chatFull = new TL_messages_chatFull();
                tl_messages_chatFull.readParams(abstractSerializedData, b);
                return tl_messages_chatFull;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_messages_chatFull", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.full_chat = ChatFull.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            final int int32 = abstractSerializedData.readInt32(b);
            final int n = 0;
            if (int32 != 481674261) {
                if (!b) {
                    return;
                }
                throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
            }
            else {
                for (int int33 = abstractSerializedData.readInt32(b), i = 0; i < int33; ++i) {
                    final Chat tLdeserialize = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    this.chats.add(tLdeserialize);
                }
                final int int34 = abstractSerializedData.readInt32(b);
                if (int34 == 481674261) {
                    for (int int35 = abstractSerializedData.readInt32(b), j = n; j < int35; ++j) {
                        final User tLdeserialize2 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize2 == null) {
                            return;
                        }
                        this.users.add(tLdeserialize2);
                    }
                    return;
                }
                if (!b) {
                    return;
                }
                throw new RuntimeException(String.format("wrong Vector magic, got %x", int34));
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_chatFull.constructor);
            this.full_chat.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.chats.size();
            abstractSerializedData.writeInt32(size);
            final int n = 0;
            for (int i = 0; i < size; ++i) {
                this.chats.get(i).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size2 = this.users.size();
            abstractSerializedData.writeInt32(size2);
            for (int j = n; j < size2; ++j) {
                this.users.get(j).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_messages_chats extends messages_Chats
    {
        public static int constructor = 1694474197;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final Chat tLdeserialize = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.chats.add(tLdeserialize);
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_chats.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.chats.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                super.chats.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_messages_chatsSlice extends messages_Chats
    {
        public static int constructor = -1663561404;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.count = abstractSerializedData.readInt32(b);
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final Chat tLdeserialize = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.chats.add(tLdeserialize);
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_chatsSlice.constructor);
            abstractSerializedData.writeInt32(super.count);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.chats.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                super.chats.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_messages_checkChatInvite extends TLObject
    {
        public static int constructor = 1051570619;
        public String hash;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return ChatInvite.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_checkChatInvite.constructor);
            abstractSerializedData.writeString(this.hash);
        }
    }
    
    public static class TL_messages_clearAllDrafts extends TLObject
    {
        public static int constructor = 2119757468;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_clearAllDrafts.constructor);
        }
    }
    
    public static class TL_messages_clearRecentStickers extends TLObject
    {
        public static int constructor = -1986437075;
        public boolean attached;
        public int flags;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_clearRecentStickers.constructor);
            int flags;
            if (this.attached) {
                flags = (this.flags | 0x1);
            }
            else {
                flags = (this.flags & 0xFFFFFFFE);
            }
            abstractSerializedData.writeInt32(this.flags = flags);
        }
    }
    
    public static class TL_messages_createChat extends TLObject
    {
        public static int constructor = 164303470;
        public String title;
        public ArrayList<InputUser> users;
        
        public TL_messages_createChat() {
            this.users = new ArrayList<InputUser>();
        }
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Updates.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_createChat.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.users.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                this.users.get(i).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeString(this.title);
        }
    }
    
    public static class TL_messages_deleteChatUser extends TLObject
    {
        public static int constructor = -530505962;
        public int chat_id;
        public InputUser user_id;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Updates.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_deleteChatUser.constructor);
            abstractSerializedData.writeInt32(this.chat_id);
            this.user_id.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_messages_deleteHistory extends TLObject
    {
        public static int constructor = 469850889;
        public int flags;
        public boolean just_clear;
        public int max_id;
        public InputPeer peer;
        public boolean revoke;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_messages_affectedHistory.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_deleteHistory.constructor);
            int flags;
            if (this.just_clear) {
                flags = (this.flags | 0x1);
            }
            else {
                flags = (this.flags & 0xFFFFFFFE);
            }
            this.flags = flags;
            int flags2;
            if (this.revoke) {
                flags2 = (this.flags | 0x2);
            }
            else {
                flags2 = (this.flags & 0xFFFFFFFD);
            }
            abstractSerializedData.writeInt32(this.flags = flags2);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.max_id);
        }
    }
    
    public static class TL_messages_deleteMessages extends TLObject
    {
        public static int constructor = -443640366;
        public int flags;
        public ArrayList<Integer> id;
        public boolean revoke;
        
        public TL_messages_deleteMessages() {
            this.id = new ArrayList<Integer>();
        }
        
        public static TL_messages_deleteMessages TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_messages_deleteMessages.constructor == i) {
                final TL_messages_deleteMessages tl_messages_deleteMessages = new TL_messages_deleteMessages();
                tl_messages_deleteMessages.readParams(abstractSerializedData, b);
                return tl_messages_deleteMessages;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_messages_deleteMessages", i));
        }
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_messages_affectedMessages.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.flags = abstractSerializedData.readInt32(b);
            final int flags = this.flags;
            int i = 0;
            this.revoke = ((flags & 0x1) != 0x0);
            final int int32 = abstractSerializedData.readInt32(b);
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    this.id.add(abstractSerializedData.readInt32(b));
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_deleteMessages.constructor);
            int flags;
            if (this.revoke) {
                flags = (this.flags | 0x1);
            }
            else {
                flags = (this.flags & 0xFFFFFFFE);
            }
            abstractSerializedData.writeInt32(this.flags = flags);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.id.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                abstractSerializedData.writeInt32(this.id.get(i));
            }
        }
    }
    
    public static class TL_messages_dhConfig extends messages_DhConfig
    {
        public static int constructor = 740433629;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.g = abstractSerializedData.readInt32(b);
            super.p = abstractSerializedData.readByteArray(b);
            super.version = abstractSerializedData.readInt32(b);
            super.random = abstractSerializedData.readByteArray(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_dhConfig.constructor);
            abstractSerializedData.writeInt32(super.g);
            abstractSerializedData.writeByteArray(super.p);
            abstractSerializedData.writeInt32(super.version);
            abstractSerializedData.writeByteArray(super.random);
        }
    }
    
    public static class TL_messages_dhConfigNotModified extends messages_DhConfig
    {
        public static int constructor = -1058912715;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.random = abstractSerializedData.readByteArray(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_dhConfigNotModified.constructor);
            abstractSerializedData.writeByteArray(super.random);
        }
    }
    
    public static class TL_messages_dialogs extends messages_Dialogs
    {
        public static int constructor = 364538944;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            final int int32 = abstractSerializedData.readInt32(b);
            final int n = 0;
            if (int32 != 481674261) {
                if (!b) {
                    return;
                }
                throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
            }
            else {
                for (int int33 = abstractSerializedData.readInt32(b), i = 0; i < int33; ++i) {
                    final Dialog tLdeserialize = Dialog.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.dialogs.add(tLdeserialize);
                }
                final int int34 = abstractSerializedData.readInt32(b);
                if (int34 != 481674261) {
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int34));
                }
                else {
                    for (int int35 = abstractSerializedData.readInt32(b), j = 0; j < int35; ++j) {
                        final Message tLdeserialize2 = Message.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize2 == null) {
                            return;
                        }
                        super.messages.add(tLdeserialize2);
                    }
                    final int int36 = abstractSerializedData.readInt32(b);
                    if (int36 != 481674261) {
                        if (!b) {
                            return;
                        }
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", int36));
                    }
                    else {
                        for (int int37 = abstractSerializedData.readInt32(b), k = 0; k < int37; ++k) {
                            final Chat tLdeserialize3 = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                            if (tLdeserialize3 == null) {
                                return;
                            }
                            super.chats.add(tLdeserialize3);
                        }
                        final int int38 = abstractSerializedData.readInt32(b);
                        if (int38 == 481674261) {
                            for (int int39 = abstractSerializedData.readInt32(b), l = n; l < int39; ++l) {
                                final User tLdeserialize4 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                                if (tLdeserialize4 == null) {
                                    return;
                                }
                                super.users.add(tLdeserialize4);
                            }
                            return;
                        }
                        if (!b) {
                            return;
                        }
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", int38));
                    }
                }
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_dialogs.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.dialogs.size();
            abstractSerializedData.writeInt32(size);
            final int n = 0;
            for (int i = 0; i < size; ++i) {
                super.dialogs.get(i).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size2 = super.messages.size();
            abstractSerializedData.writeInt32(size2);
            for (int j = 0; j < size2; ++j) {
                super.messages.get(j).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size3 = super.chats.size();
            abstractSerializedData.writeInt32(size3);
            for (int k = 0; k < size3; ++k) {
                super.chats.get(k).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size4 = super.users.size();
            abstractSerializedData.writeInt32(size4);
            for (int l = n; l < size4; ++l) {
                super.users.get(l).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_messages_dialogsNotModified extends messages_Dialogs
    {
        public static int constructor = -253500010;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.count = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_dialogsNotModified.constructor);
            abstractSerializedData.writeInt32(super.count);
        }
    }
    
    public static class TL_messages_dialogsSlice extends messages_Dialogs
    {
        public static int constructor = 1910543603;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.count = abstractSerializedData.readInt32(b);
            final int int32 = abstractSerializedData.readInt32(b);
            final int n = 0;
            if (int32 != 481674261) {
                if (!b) {
                    return;
                }
                throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
            }
            else {
                for (int int33 = abstractSerializedData.readInt32(b), i = 0; i < int33; ++i) {
                    final Dialog tLdeserialize = Dialog.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.dialogs.add(tLdeserialize);
                }
                final int int34 = abstractSerializedData.readInt32(b);
                if (int34 != 481674261) {
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int34));
                }
                else {
                    for (int int35 = abstractSerializedData.readInt32(b), j = 0; j < int35; ++j) {
                        final Message tLdeserialize2 = Message.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize2 == null) {
                            return;
                        }
                        super.messages.add(tLdeserialize2);
                    }
                    final int int36 = abstractSerializedData.readInt32(b);
                    if (int36 != 481674261) {
                        if (!b) {
                            return;
                        }
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", int36));
                    }
                    else {
                        for (int int37 = abstractSerializedData.readInt32(b), k = 0; k < int37; ++k) {
                            final Chat tLdeserialize3 = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                            if (tLdeserialize3 == null) {
                                return;
                            }
                            super.chats.add(tLdeserialize3);
                        }
                        final int int38 = abstractSerializedData.readInt32(b);
                        if (int38 == 481674261) {
                            for (int int39 = abstractSerializedData.readInt32(b), l = n; l < int39; ++l) {
                                final User tLdeserialize4 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                                if (tLdeserialize4 == null) {
                                    return;
                                }
                                super.users.add(tLdeserialize4);
                            }
                            return;
                        }
                        if (!b) {
                            return;
                        }
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", int38));
                    }
                }
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_dialogsSlice.constructor);
            abstractSerializedData.writeInt32(super.count);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.dialogs.size();
            abstractSerializedData.writeInt32(size);
            final int n = 0;
            for (int i = 0; i < size; ++i) {
                super.dialogs.get(i).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size2 = super.messages.size();
            abstractSerializedData.writeInt32(size2);
            for (int j = 0; j < size2; ++j) {
                super.messages.get(j).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size3 = super.chats.size();
            abstractSerializedData.writeInt32(size3);
            for (int k = 0; k < size3; ++k) {
                super.chats.get(k).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size4 = super.users.size();
            abstractSerializedData.writeInt32(size4);
            for (int l = n; l < size4; ++l) {
                super.users.get(l).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_messages_discardEncryption extends TLObject
    {
        public static int constructor = -304536635;
        public int chat_id;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_discardEncryption.constructor);
            abstractSerializedData.writeInt32(this.chat_id);
        }
    }
    
    public static class TL_messages_editChatAbout extends TLObject
    {
        public static int constructor = -554301545;
        public String about;
        public InputPeer peer;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_editChatAbout.constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(this.about);
        }
    }
    
    public static class TL_messages_editChatAdmin extends TLObject
    {
        public static int constructor = -1444503762;
        public int chat_id;
        public boolean is_admin;
        public InputUser user_id;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_editChatAdmin.constructor);
            abstractSerializedData.writeInt32(this.chat_id);
            this.user_id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeBool(this.is_admin);
        }
    }
    
    public static class TL_messages_editChatDefaultBannedRights extends TLObject
    {
        public static int constructor = -1517917375;
        public TL_chatBannedRights banned_rights;
        public InputPeer peer;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Updates.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_editChatDefaultBannedRights.constructor);
            this.peer.serializeToStream(abstractSerializedData);
            this.banned_rights.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_messages_editChatPhoto extends TLObject
    {
        public static int constructor = -900957736;
        public int chat_id;
        public InputChatPhoto photo;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Updates.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_editChatPhoto.constructor);
            abstractSerializedData.writeInt32(this.chat_id);
            this.photo.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_messages_editChatTitle extends TLObject
    {
        public static int constructor = -599447467;
        public int chat_id;
        public String title;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Updates.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_editChatTitle.constructor);
            abstractSerializedData.writeInt32(this.chat_id);
            abstractSerializedData.writeString(this.title);
        }
    }
    
    public static class TL_messages_editMessage extends TLObject
    {
        public static int constructor = -787025122;
        public ArrayList<MessageEntity> entities;
        public int flags;
        public int id;
        public InputMedia media;
        public String message;
        public boolean no_webpage;
        public InputPeer peer;
        public ReplyMarkup reply_markup;
        
        public TL_messages_editMessage() {
            this.entities = new ArrayList<MessageEntity>();
        }
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Updates.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_editMessage.constructor);
            int flags;
            if (this.no_webpage) {
                flags = (this.flags | 0x2);
            }
            else {
                flags = (this.flags & 0xFFFFFFFD);
            }
            abstractSerializedData.writeInt32(this.flags = flags);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.id);
            if ((this.flags & 0x800) != 0x0) {
                abstractSerializedData.writeString(this.message);
            }
            if ((this.flags & 0x4000) != 0x0) {
                this.media.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 0x4) != 0x0) {
                this.reply_markup.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 0x8) != 0x0) {
                abstractSerializedData.writeInt32(481674261);
                final int size = this.entities.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; ++i) {
                    this.entities.get(i).serializeToStream(abstractSerializedData);
                }
            }
        }
    }
    
    public static class TL_messages_exportChatInvite extends TLObject
    {
        public static int constructor = 234312524;
        public InputPeer peer;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return ExportedChatInvite.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_exportChatInvite.constructor);
            this.peer.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_messages_faveSticker extends TLObject
    {
        public static int constructor = -1174420133;
        public InputDocument id;
        public boolean unfave;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_faveSticker.constructor);
            this.id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeBool(this.unfave);
        }
    }
    
    public static class TL_messages_favedStickers extends messages_FavedStickers
    {
        public static int constructor = -209768682;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.hash = abstractSerializedData.readInt32(b);
            final int int32 = abstractSerializedData.readInt32(b);
            final int n = 0;
            if (int32 != 481674261) {
                if (!b) {
                    return;
                }
                throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
            }
            else {
                for (int int33 = abstractSerializedData.readInt32(b), i = 0; i < int33; ++i) {
                    final TL_stickerPack tLdeserialize = TL_stickerPack.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.packs.add(tLdeserialize);
                }
                final int int34 = abstractSerializedData.readInt32(b);
                if (int34 == 481674261) {
                    for (int int35 = abstractSerializedData.readInt32(b), j = n; j < int35; ++j) {
                        final Document tLdeserialize2 = Document.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize2 == null) {
                            return;
                        }
                        super.stickers.add(tLdeserialize2);
                    }
                    return;
                }
                if (!b) {
                    return;
                }
                throw new RuntimeException(String.format("wrong Vector magic, got %x", int34));
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_favedStickers.constructor);
            abstractSerializedData.writeInt32(super.hash);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.packs.size();
            abstractSerializedData.writeInt32(size);
            final int n = 0;
            for (int i = 0; i < size; ++i) {
                super.packs.get(i).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size2 = super.stickers.size();
            abstractSerializedData.writeInt32(size2);
            for (int j = n; j < size2; ++j) {
                super.stickers.get(j).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_messages_favedStickersNotModified extends messages_FavedStickers
    {
        public static int constructor = -1634752813;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_favedStickersNotModified.constructor);
        }
    }
    
    public static class TL_messages_featuredStickers extends messages_FeaturedStickers
    {
        public static int constructor = -123893531;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.hash = abstractSerializedData.readInt32(b);
            final int int32 = abstractSerializedData.readInt32(b);
            final int n = 0;
            if (int32 != 481674261) {
                if (!b) {
                    return;
                }
                throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
            }
            else {
                for (int int33 = abstractSerializedData.readInt32(b), i = 0; i < int33; ++i) {
                    final StickerSetCovered tLdeserialize = StickerSetCovered.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.sets.add(tLdeserialize);
                }
                final int int34 = abstractSerializedData.readInt32(b);
                if (int34 == 481674261) {
                    for (int int35 = abstractSerializedData.readInt32(b), j = n; j < int35; ++j) {
                        super.unread.add(abstractSerializedData.readInt64(b));
                    }
                    return;
                }
                if (!b) {
                    return;
                }
                throw new RuntimeException(String.format("wrong Vector magic, got %x", int34));
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_featuredStickers.constructor);
            abstractSerializedData.writeInt32(super.hash);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.sets.size();
            abstractSerializedData.writeInt32(size);
            final int n = 0;
            for (int i = 0; i < size; ++i) {
                super.sets.get(i).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size2 = super.unread.size();
            abstractSerializedData.writeInt32(size2);
            for (int j = n; j < size2; ++j) {
                abstractSerializedData.writeInt64(super.unread.get(j));
            }
        }
    }
    
    public static class TL_messages_featuredStickersNotModified extends messages_FeaturedStickers
    {
        public static int constructor = 82699215;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_featuredStickersNotModified.constructor);
        }
    }
    
    public static class TL_messages_forwardMessage extends TLObject
    {
        public static int constructor = 865483769;
        public int id;
        public InputPeer peer;
        public long random_id;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Updates.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_forwardMessage.constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeInt64(this.random_id);
        }
    }
    
    public static class TL_messages_forwardMessages extends TLObject
    {
        public static int constructor = 1888354709;
        public boolean background;
        public int flags;
        public InputPeer from_peer;
        public boolean grouped;
        public ArrayList<Integer> id;
        public ArrayList<Long> random_id;
        public boolean silent;
        public InputPeer to_peer;
        public boolean with_my_score;
        
        public TL_messages_forwardMessages() {
            this.id = new ArrayList<Integer>();
            this.random_id = new ArrayList<Long>();
        }
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Updates.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_forwardMessages.constructor);
            int flags;
            if (this.silent) {
                flags = (this.flags | 0x20);
            }
            else {
                flags = (this.flags & 0xFFFFFFDF);
            }
            this.flags = flags;
            int flags2;
            if (this.background) {
                flags2 = (this.flags | 0x40);
            }
            else {
                flags2 = (this.flags & 0xFFFFFFBF);
            }
            this.flags = flags2;
            int flags3;
            if (this.with_my_score) {
                flags3 = (this.flags | 0x100);
            }
            else {
                flags3 = (this.flags & 0xFFFFFEFF);
            }
            this.flags = flags3;
            int flags4;
            if (this.grouped) {
                flags4 = (this.flags | 0x200);
            }
            else {
                flags4 = (this.flags & 0xFFFFFDFF);
            }
            abstractSerializedData.writeInt32(this.flags = flags4);
            this.from_peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.id.size();
            abstractSerializedData.writeInt32(size);
            final int n = 0;
            for (int i = 0; i < size; ++i) {
                abstractSerializedData.writeInt32(this.id.get(i));
            }
            abstractSerializedData.writeInt32(481674261);
            final int size2 = this.random_id.size();
            abstractSerializedData.writeInt32(size2);
            for (int j = n; j < size2; ++j) {
                abstractSerializedData.writeInt64(this.random_id.get(j));
            }
            this.to_peer.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_messages_foundGifs extends TLObject
    {
        public static int constructor = 1158290442;
        public int next_offset;
        public ArrayList<FoundGif> results;
        
        public TL_messages_foundGifs() {
            this.results = new ArrayList<FoundGif>();
        }
        
        public static TL_messages_foundGifs TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_messages_foundGifs.constructor == i) {
                final TL_messages_foundGifs tl_messages_foundGifs = new TL_messages_foundGifs();
                tl_messages_foundGifs.readParams(abstractSerializedData, b);
                return tl_messages_foundGifs;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_messages_foundGifs", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.next_offset = abstractSerializedData.readInt32(b);
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final FoundGif tLdeserialize = FoundGif.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    this.results.add(tLdeserialize);
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_foundGifs.constructor);
            abstractSerializedData.writeInt32(this.next_offset);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.results.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                this.results.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_messages_foundStickerSets extends messages_FoundStickerSets
    {
        public static int constructor = 1359533640;
        public int hash;
        public ArrayList<StickerSetCovered> sets;
        
        public TL_messages_foundStickerSets() {
            this.sets = new ArrayList<StickerSetCovered>();
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.hash = abstractSerializedData.readInt32(b);
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final StickerSetCovered tLdeserialize = StickerSetCovered.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    this.sets.add(tLdeserialize);
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_foundStickerSets.constructor);
            abstractSerializedData.writeInt32(this.hash);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.sets.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                this.sets.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_messages_foundStickerSetsNotModified extends messages_FoundStickerSets
    {
        public static int constructor = 223655517;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_foundStickerSetsNotModified.constructor);
        }
    }
    
    public static class TL_messages_getAllChats extends TLObject
    {
        public static int constructor = -341307408;
        public ArrayList<Integer> except_ids;
        
        public TL_messages_getAllChats() {
            this.except_ids = new ArrayList<Integer>();
        }
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return messages_Chats.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_getAllChats.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.except_ids.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                abstractSerializedData.writeInt32(this.except_ids.get(i));
            }
        }
    }
    
    public static class TL_messages_getAllDrafts extends TLObject
    {
        public static int constructor = 1782549861;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Updates.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_getAllDrafts.constructor);
        }
    }
    
    public static class TL_messages_getAllStickers extends TLObject
    {
        public static int constructor = 479598769;
        public int hash;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return messages_AllStickers.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_getAllStickers.constructor);
            abstractSerializedData.writeInt32(this.hash);
        }
    }
    
    public static class TL_messages_getArchivedStickers extends TLObject
    {
        public static int constructor = 1475442322;
        public int flags;
        public int limit;
        public boolean masks;
        public long offset_id;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_messages_archivedStickers.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_getArchivedStickers.constructor);
            int flags;
            if (this.masks) {
                flags = (this.flags | 0x1);
            }
            else {
                flags = (this.flags & 0xFFFFFFFE);
            }
            abstractSerializedData.writeInt32(this.flags = flags);
            abstractSerializedData.writeInt64(this.offset_id);
            abstractSerializedData.writeInt32(this.limit);
        }
    }
    
    public static class TL_messages_getAttachedStickers extends TLObject
    {
        public static int constructor = -866424884;
        public InputStickeredMedia media;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, int i, final boolean b) {
            final Vector vector = new Vector();
            int int32;
            StickerSetCovered tLdeserialize;
            for (int32 = abstractSerializedData.readInt32(b), i = 0; i < int32; ++i) {
                tLdeserialize = StickerSetCovered.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                if (tLdeserialize == null) {
                    return vector;
                }
                vector.objects.add(tLdeserialize);
            }
            return vector;
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_getAttachedStickers.constructor);
            this.media.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_messages_getBotCallbackAnswer extends TLObject
    {
        public static int constructor = -2130010132;
        public byte[] data;
        public int flags;
        public boolean game;
        public int msg_id;
        public InputPeer peer;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_messages_botCallbackAnswer.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_getBotCallbackAnswer.constructor);
            int flags;
            if (this.game) {
                flags = (this.flags | 0x2);
            }
            else {
                flags = (this.flags & 0xFFFFFFFD);
            }
            abstractSerializedData.writeInt32(this.flags = flags);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.msg_id);
            if ((this.flags & 0x1) != 0x0) {
                abstractSerializedData.writeByteArray(this.data);
            }
        }
    }
    
    public static class TL_messages_getChats extends TLObject
    {
        public static int constructor = 1013621127;
        public ArrayList<Integer> id;
        
        public TL_messages_getChats() {
            this.id = new ArrayList<Integer>();
        }
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return messages_Chats.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_getChats.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.id.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                abstractSerializedData.writeInt32(this.id.get(i));
            }
        }
    }
    
    public static class TL_messages_getCommonChats extends TLObject
    {
        public static int constructor = 218777796;
        public int limit;
        public int max_id;
        public InputUser user_id;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return messages_Chats.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_getCommonChats.constructor);
            this.user_id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.max_id);
            abstractSerializedData.writeInt32(this.limit);
        }
    }
    
    public static class TL_messages_getDhConfig extends TLObject
    {
        public static int constructor = 651135312;
        public int random_length;
        public int version;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return messages_DhConfig.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_getDhConfig.constructor);
            abstractSerializedData.writeInt32(this.version);
            abstractSerializedData.writeInt32(this.random_length);
        }
    }
    
    public static class TL_messages_getDialogUnreadMarks extends TLObject
    {
        public static int constructor = 585256482;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, int i, final boolean b) {
            final Vector vector = new Vector();
            int int32;
            DialogPeer tLdeserialize;
            for (int32 = abstractSerializedData.readInt32(b), i = 0; i < int32; ++i) {
                tLdeserialize = DialogPeer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                if (tLdeserialize == null) {
                    return vector;
                }
                vector.objects.add(tLdeserialize);
            }
            return vector;
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_getDialogUnreadMarks.constructor);
        }
    }
    
    public static class TL_messages_getDialogs extends TLObject
    {
        public static int constructor = -1594999949;
        public boolean exclude_pinned;
        public int flags;
        public int folder_id;
        public int hash;
        public int limit;
        public int offset_date;
        public int offset_id;
        public InputPeer offset_peer;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return messages_Dialogs.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_getDialogs.constructor);
            int flags;
            if (this.exclude_pinned) {
                flags = (this.flags | 0x1);
            }
            else {
                flags = (this.flags & 0xFFFFFFFE);
            }
            abstractSerializedData.writeInt32(this.flags = flags);
            if ((this.flags & 0x2) != 0x0) {
                abstractSerializedData.writeInt32(this.folder_id);
            }
            abstractSerializedData.writeInt32(this.offset_date);
            abstractSerializedData.writeInt32(this.offset_id);
            this.offset_peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.limit);
            abstractSerializedData.writeInt32(this.hash);
        }
    }
    
    public static class TL_messages_getDocumentByHash extends TLObject
    {
        public static int constructor = 864953444;
        public String mime_type;
        public byte[] sha256;
        public int size;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Document.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_getDocumentByHash.constructor);
            abstractSerializedData.writeByteArray(this.sha256);
            abstractSerializedData.writeInt32(this.size);
            abstractSerializedData.writeString(this.mime_type);
        }
    }
    
    public static class TL_messages_getEmojiKeywords extends TLObject
    {
        public static int constructor = 899735650;
        public String lang_code;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_emojiKeywordsDifference.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_getEmojiKeywords.constructor);
            abstractSerializedData.writeString(this.lang_code);
        }
    }
    
    public static class TL_messages_getEmojiKeywordsDifference extends TLObject
    {
        public static int constructor = 352892591;
        public int from_version;
        public String lang_code;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_emojiKeywordsDifference.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_getEmojiKeywordsDifference.constructor);
            abstractSerializedData.writeString(this.lang_code);
            abstractSerializedData.writeInt32(this.from_version);
        }
    }
    
    public static class TL_messages_getEmojiKeywordsLanguages extends TLObject
    {
        public static int constructor = 1318675378;
        public ArrayList<String> lang_codes;
        
        public TL_messages_getEmojiKeywordsLanguages() {
            this.lang_codes = new ArrayList<String>();
        }
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, int i, final boolean b) {
            final Vector vector = new Vector();
            int int32;
            TL_emojiLanguage tLdeserialize;
            for (int32 = abstractSerializedData.readInt32(b), i = 0; i < int32; ++i) {
                tLdeserialize = TL_emojiLanguage.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                if (tLdeserialize == null) {
                    return vector;
                }
                vector.objects.add(tLdeserialize);
            }
            return vector;
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_getEmojiKeywordsLanguages.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.lang_codes.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                abstractSerializedData.writeString(this.lang_codes.get(i));
            }
        }
    }
    
    public static class TL_messages_getEmojiURL extends TLObject
    {
        public static int constructor = -709817306;
        public String lang_code;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_emojiURL.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_getEmojiURL.constructor);
            abstractSerializedData.writeString(this.lang_code);
        }
    }
    
    public static class TL_messages_getFavedStickers extends TLObject
    {
        public static int constructor = 567151374;
        public int hash;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return messages_FavedStickers.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_getFavedStickers.constructor);
            abstractSerializedData.writeInt32(this.hash);
        }
    }
    
    public static class TL_messages_getFeaturedStickers extends TLObject
    {
        public static int constructor = 766298703;
        public int hash;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return messages_FeaturedStickers.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_getFeaturedStickers.constructor);
            abstractSerializedData.writeInt32(this.hash);
        }
    }
    
    public static class TL_messages_getFullChat extends TLObject
    {
        public static int constructor = 998448230;
        public int chat_id;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_messages_chatFull.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_getFullChat.constructor);
            abstractSerializedData.writeInt32(this.chat_id);
        }
    }
    
    public static class TL_messages_getGameHighScores extends TLObject
    {
        public static int constructor = -400399203;
        public int id;
        public InputPeer peer;
        public InputUser user_id;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_messages_highScores.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_getGameHighScores.constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.id);
            this.user_id.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_messages_getHistory extends TLObject
    {
        public static int constructor = -1347868602;
        public int add_offset;
        public int limit;
        public int max_id;
        public int min_id;
        public int offset_date;
        public int offset_id;
        public InputPeer peer;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return messages_Messages.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_getHistory.constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.offset_id);
            abstractSerializedData.writeInt32(this.offset_date);
            abstractSerializedData.writeInt32(this.add_offset);
            abstractSerializedData.writeInt32(this.limit);
            abstractSerializedData.writeInt32(this.max_id);
            abstractSerializedData.writeInt32(this.min_id);
        }
    }
    
    public static class TL_messages_getInlineBotResults extends TLObject
    {
        public static int constructor = 1364105629;
        public InputUser bot;
        public int flags;
        public InputGeoPoint geo_point;
        public String offset;
        public InputPeer peer;
        public String query;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return messages_BotResults.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_getInlineBotResults.constructor);
            abstractSerializedData.writeInt32(this.flags);
            this.bot.serializeToStream(abstractSerializedData);
            this.peer.serializeToStream(abstractSerializedData);
            if ((this.flags & 0x1) != 0x0) {
                this.geo_point.serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeString(this.query);
            abstractSerializedData.writeString(this.offset);
        }
    }
    
    public static class TL_messages_getInlineGameHighScores extends TLObject
    {
        public static int constructor = 258170395;
        public TL_inputBotInlineMessageID id;
        public InputUser user_id;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_messages_highScores.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_getInlineGameHighScores.constructor);
            this.id.serializeToStream(abstractSerializedData);
            this.user_id.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_messages_getMaskStickers extends TLObject
    {
        public static int constructor = 1706608543;
        public int hash;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return messages_AllStickers.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_getMaskStickers.constructor);
            abstractSerializedData.writeInt32(this.hash);
        }
    }
    
    public static class TL_messages_getMessageEditData extends TLObject
    {
        public static int constructor = -39416522;
        public int id;
        public InputPeer peer;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_messages_messageEditData.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_getMessageEditData.constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.id);
        }
    }
    
    public static class TL_messages_getMessages extends TLObject
    {
        public static int constructor = 1109588596;
        public ArrayList<Integer> id;
        
        public TL_messages_getMessages() {
            this.id = new ArrayList<Integer>();
        }
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return messages_Messages.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_getMessages.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.id.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                abstractSerializedData.writeInt32(this.id.get(i));
            }
        }
    }
    
    public static class TL_messages_getMessagesViews extends TLObject
    {
        public static int constructor = -993483427;
        public ArrayList<Integer> id;
        public boolean increment;
        public InputPeer peer;
        
        public TL_messages_getMessagesViews() {
            this.id = new ArrayList<Integer>();
        }
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, int i, final boolean b) {
            final Vector vector = new Vector();
            int int32;
            for (int32 = abstractSerializedData.readInt32(b), i = 0; i < int32; ++i) {
                vector.objects.add(abstractSerializedData.readInt32(b));
            }
            return vector;
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_getMessagesViews.constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.id.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                abstractSerializedData.writeInt32(this.id.get(i));
            }
            abstractSerializedData.writeBool(this.increment);
        }
    }
    
    public static class TL_messages_getOnlines extends TLObject
    {
        public static int constructor = 1848369232;
        public InputPeer peer;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_chatOnlines.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_getOnlines.constructor);
            this.peer.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_messages_getPeerDialogs extends TLObject
    {
        public static int constructor = -462373635;
        public ArrayList<InputDialogPeer> peers;
        
        public TL_messages_getPeerDialogs() {
            this.peers = new ArrayList<InputDialogPeer>();
        }
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_messages_peerDialogs.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_getPeerDialogs.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.peers.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                this.peers.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_messages_getPeerSettings extends TLObject
    {
        public static int constructor = 913498268;
        public InputPeer peer;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_peerSettings.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_getPeerSettings.constructor);
            this.peer.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_messages_getPinnedDialogs extends TLObject
    {
        public static int constructor = -692498958;
        public int folder_id;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_messages_peerDialogs.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_getPinnedDialogs.constructor);
            abstractSerializedData.writeInt32(this.folder_id);
        }
    }
    
    public static class TL_messages_getPollResults extends TLObject
    {
        public static int constructor = 1941660731;
        public int msg_id;
        public InputPeer peer;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Updates.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_getPollResults.constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.msg_id);
        }
    }
    
    public static class TL_messages_getRecentLocations extends TLObject
    {
        public static int constructor = -1144759543;
        public int hash;
        public int limit;
        public InputPeer peer;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return messages_Messages.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_getRecentLocations.constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.limit);
            abstractSerializedData.writeInt32(this.hash);
        }
    }
    
    public static class TL_messages_getRecentStickers extends TLObject
    {
        public static int constructor = 1587647177;
        public boolean attached;
        public int flags;
        public int hash;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return messages_RecentStickers.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_getRecentStickers.constructor);
            int flags;
            if (this.attached) {
                flags = (this.flags | 0x1);
            }
            else {
                flags = (this.flags & 0xFFFFFFFE);
            }
            abstractSerializedData.writeInt32(this.flags = flags);
            abstractSerializedData.writeInt32(this.hash);
        }
    }
    
    public static class TL_messages_getSavedGifs extends TLObject
    {
        public static int constructor = -2084618926;
        public int hash;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return messages_SavedGifs.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_getSavedGifs.constructor);
            abstractSerializedData.writeInt32(this.hash);
        }
    }
    
    public static class TL_messages_getSearchCounters extends TLObject
    {
        public static int constructor = 1932455680;
        public ArrayList<MessagesFilter> filters;
        public InputPeer peer;
        
        public TL_messages_getSearchCounters() {
            this.filters = new ArrayList<MessagesFilter>();
        }
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, int i, final boolean b) {
            final Vector vector = new Vector();
            int int32;
            TL_messages_searchCounter tLdeserialize;
            for (int32 = abstractSerializedData.readInt32(b), i = 0; i < int32; ++i) {
                tLdeserialize = TL_messages_searchCounter.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                if (tLdeserialize == null) {
                    return vector;
                }
                vector.objects.add(tLdeserialize);
            }
            return vector;
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_getSearchCounters.constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.filters.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                this.filters.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_messages_getStatsURL extends TLObject
    {
        public static int constructor = -2127811866;
        public boolean dark;
        public int flags;
        public String params;
        public InputPeer peer;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_statsURL.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_getStatsURL.constructor);
            int flags;
            if (this.dark) {
                flags = (this.flags | 0x1);
            }
            else {
                flags = (this.flags & 0xFFFFFFFE);
            }
            abstractSerializedData.writeInt32(this.flags = flags);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(this.params);
        }
    }
    
    public static class TL_messages_getStickerSet extends TLObject
    {
        public static int constructor = 639215886;
        public InputStickerSet stickerset;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_messages_stickerSet.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_getStickerSet.constructor);
            this.stickerset.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_messages_getStickers extends TLObject
    {
        public static int constructor = 71126828;
        public String emoticon;
        public int hash;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return messages_Stickers.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_getStickers.constructor);
            abstractSerializedData.writeString(this.emoticon);
            abstractSerializedData.writeInt32(this.hash);
        }
    }
    
    public static class TL_messages_getUnreadMentions extends TLObject
    {
        public static int constructor = 1180140658;
        public int add_offset;
        public int limit;
        public int max_id;
        public int min_id;
        public int offset_id;
        public InputPeer peer;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return messages_Messages.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_getUnreadMentions.constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.offset_id);
            abstractSerializedData.writeInt32(this.add_offset);
            abstractSerializedData.writeInt32(this.limit);
            abstractSerializedData.writeInt32(this.max_id);
            abstractSerializedData.writeInt32(this.min_id);
        }
    }
    
    public static class TL_messages_getWebPage extends TLObject
    {
        public static int constructor = 852135825;
        public int hash;
        public String url;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return WebPage.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_getWebPage.constructor);
            abstractSerializedData.writeString(this.url);
            abstractSerializedData.writeInt32(this.hash);
        }
    }
    
    public static class TL_messages_getWebPagePreview extends TLObject
    {
        public static int constructor = -1956073268;
        public ArrayList<MessageEntity> entities;
        public int flags;
        public String message;
        
        public TL_messages_getWebPagePreview() {
            this.entities = new ArrayList<MessageEntity>();
        }
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return MessageMedia.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_getWebPagePreview.constructor);
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeString(this.message);
            if ((this.flags & 0x8) != 0x0) {
                abstractSerializedData.writeInt32(481674261);
                final int size = this.entities.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; ++i) {
                    this.entities.get(i).serializeToStream(abstractSerializedData);
                }
            }
        }
    }
    
    public static class TL_messages_hideReportSpam extends TLObject
    {
        public static int constructor = -1460572005;
        public InputPeer peer;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_hideReportSpam.constructor);
            this.peer.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_messages_highScores extends TLObject
    {
        public static int constructor = -1707344487;
        public ArrayList<TL_highScore> scores;
        public ArrayList<User> users;
        
        public TL_messages_highScores() {
            this.scores = new ArrayList<TL_highScore>();
            this.users = new ArrayList<User>();
        }
        
        public static TL_messages_highScores TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_messages_highScores.constructor == i) {
                final TL_messages_highScores tl_messages_highScores = new TL_messages_highScores();
                tl_messages_highScores.readParams(abstractSerializedData, b);
                return tl_messages_highScores;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_messages_highScores", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            final int int32 = abstractSerializedData.readInt32(b);
            final int n = 0;
            if (int32 != 481674261) {
                if (!b) {
                    return;
                }
                throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
            }
            else {
                for (int int33 = abstractSerializedData.readInt32(b), i = 0; i < int33; ++i) {
                    final TL_highScore tLdeserialize = TL_highScore.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    this.scores.add(tLdeserialize);
                }
                final int int34 = abstractSerializedData.readInt32(b);
                if (int34 == 481674261) {
                    for (int int35 = abstractSerializedData.readInt32(b), j = n; j < int35; ++j) {
                        final User tLdeserialize2 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize2 == null) {
                            return;
                        }
                        this.users.add(tLdeserialize2);
                    }
                    return;
                }
                if (!b) {
                    return;
                }
                throw new RuntimeException(String.format("wrong Vector magic, got %x", int34));
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_highScores.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.scores.size();
            abstractSerializedData.writeInt32(size);
            final int n = 0;
            for (int i = 0; i < size; ++i) {
                this.scores.get(i).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size2 = this.users.size();
            abstractSerializedData.writeInt32(size2);
            for (int j = n; j < size2; ++j) {
                this.users.get(j).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_messages_importChatInvite extends TLObject
    {
        public static int constructor = 1817183516;
        public String hash;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Updates.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_importChatInvite.constructor);
            abstractSerializedData.writeString(this.hash);
        }
    }
    
    public static class TL_messages_installStickerSet extends TLObject
    {
        public static int constructor = -946871200;
        public boolean archived;
        public InputStickerSet stickerset;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return messages_StickerSetInstallResult.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_installStickerSet.constructor);
            this.stickerset.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeBool(this.archived);
        }
    }
    
    public static class TL_messages_markDialogUnread extends TLObject
    {
        public static int constructor = -1031349873;
        public int flags;
        public InputDialogPeer peer;
        public boolean unread;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_markDialogUnread.constructor);
            int flags;
            if (this.unread) {
                flags = (this.flags | 0x1);
            }
            else {
                flags = (this.flags & 0xFFFFFFFE);
            }
            abstractSerializedData.writeInt32(this.flags = flags);
            this.peer.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_messages_messageEditData extends TLObject
    {
        public static int constructor = 649453030;
        public boolean caption;
        public int flags;
        
        public static TL_messages_messageEditData TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_messages_messageEditData.constructor == i) {
                final TL_messages_messageEditData tl_messages_messageEditData = new TL_messages_messageEditData();
                tl_messages_messageEditData.readParams(abstractSerializedData, b);
                return tl_messages_messageEditData;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_messages_messageEditData", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.flags = abstractSerializedData.readInt32(b);
            final int flags = this.flags;
            boolean caption = true;
            if ((flags & 0x1) == 0x0) {
                caption = false;
            }
            this.caption = caption;
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_messageEditData.constructor);
            int flags;
            if (this.caption) {
                flags = (this.flags | 0x1);
            }
            else {
                flags = (this.flags & 0xFFFFFFFE);
            }
            abstractSerializedData.writeInt32(this.flags = flags);
        }
    }
    
    public static class TL_messages_messageEmpty extends TLObject
    {
        public static int constructor = 1062078024;
        
        public static TL_messages_messageEmpty TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_messages_messageEmpty.constructor == i) {
                final TL_messages_messageEmpty tl_messages_messageEmpty = new TL_messages_messageEmpty();
                tl_messages_messageEmpty.readParams(abstractSerializedData, b);
                return tl_messages_messageEmpty;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_messages_messageEmpty", i));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_messageEmpty.constructor);
        }
    }
    
    public static class TL_messages_messages extends messages_Messages
    {
        public static int constructor = -1938715001;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            final int int32 = abstractSerializedData.readInt32(b);
            final int n = 0;
            if (int32 != 481674261) {
                if (!b) {
                    return;
                }
                throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
            }
            else {
                for (int int33 = abstractSerializedData.readInt32(b), i = 0; i < int33; ++i) {
                    final Message tLdeserialize = Message.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.messages.add(tLdeserialize);
                }
                final int int34 = abstractSerializedData.readInt32(b);
                if (int34 != 481674261) {
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int34));
                }
                else {
                    for (int int35 = abstractSerializedData.readInt32(b), j = 0; j < int35; ++j) {
                        final Chat tLdeserialize2 = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize2 == null) {
                            return;
                        }
                        super.chats.add(tLdeserialize2);
                    }
                    final int int36 = abstractSerializedData.readInt32(b);
                    if (int36 == 481674261) {
                        for (int int37 = abstractSerializedData.readInt32(b), k = n; k < int37; ++k) {
                            final User tLdeserialize3 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                            if (tLdeserialize3 == null) {
                                return;
                            }
                            super.users.add(tLdeserialize3);
                        }
                        return;
                    }
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int36));
                }
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_messages.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.messages.size();
            abstractSerializedData.writeInt32(size);
            final int n = 0;
            for (int i = 0; i < size; ++i) {
                super.messages.get(i).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size2 = super.chats.size();
            abstractSerializedData.writeInt32(size2);
            for (int j = 0; j < size2; ++j) {
                super.chats.get(j).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size3 = super.users.size();
            abstractSerializedData.writeInt32(size3);
            for (int k = n; k < size3; ++k) {
                super.users.get(k).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_messages_messagesSlice extends messages_Messages
    {
        public static int constructor = -923939298;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            final int n = 0;
            super.inexact = ((flags & 0x2) != 0x0);
            super.count = abstractSerializedData.readInt32(b);
            if ((super.flags & 0x1) != 0x0) {
                super.next_rate = abstractSerializedData.readInt32(b);
            }
            final int int32 = abstractSerializedData.readInt32(b);
            if (int32 != 481674261) {
                if (!b) {
                    return;
                }
                throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
            }
            else {
                for (int int33 = abstractSerializedData.readInt32(b), i = 0; i < int33; ++i) {
                    final Message tLdeserialize = Message.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.messages.add(tLdeserialize);
                }
                final int int34 = abstractSerializedData.readInt32(b);
                if (int34 != 481674261) {
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int34));
                }
                else {
                    for (int int35 = abstractSerializedData.readInt32(b), j = 0; j < int35; ++j) {
                        final Chat tLdeserialize2 = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize2 == null) {
                            return;
                        }
                        super.chats.add(tLdeserialize2);
                    }
                    final int int36 = abstractSerializedData.readInt32(b);
                    if (int36 == 481674261) {
                        for (int int37 = abstractSerializedData.readInt32(b), k = n; k < int37; ++k) {
                            final User tLdeserialize3 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                            if (tLdeserialize3 == null) {
                                return;
                            }
                            super.users.add(tLdeserialize3);
                        }
                        return;
                    }
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int36));
                }
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_messagesSlice.constructor);
            int flags;
            if (super.inexact) {
                flags = (super.flags | 0x2);
            }
            else {
                flags = (super.flags & 0xFFFFFFFD);
            }
            abstractSerializedData.writeInt32(super.flags = flags);
            abstractSerializedData.writeInt32(super.count);
            if ((super.flags & 0x1) != 0x0) {
                abstractSerializedData.writeInt32(super.next_rate);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size = super.messages.size();
            abstractSerializedData.writeInt32(size);
            final int n = 0;
            for (int i = 0; i < size; ++i) {
                super.messages.get(i).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size2 = super.chats.size();
            abstractSerializedData.writeInt32(size2);
            for (int j = 0; j < size2; ++j) {
                super.chats.get(j).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size3 = super.users.size();
            abstractSerializedData.writeInt32(size3);
            for (int k = n; k < size3; ++k) {
                super.users.get(k).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_messages_migrateChat extends TLObject
    {
        public static int constructor = 363051235;
        public int chat_id;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Updates.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_migrateChat.constructor);
            abstractSerializedData.writeInt32(this.chat_id);
        }
    }
    
    public static class TL_messages_peerDialogs extends TLObject
    {
        public static int constructor = 863093588;
        public ArrayList<Chat> chats;
        public ArrayList<Dialog> dialogs;
        public ArrayList<Message> messages;
        public TL_updates_state state;
        public ArrayList<User> users;
        
        public TL_messages_peerDialogs() {
            this.dialogs = new ArrayList<Dialog>();
            this.messages = new ArrayList<Message>();
            this.chats = new ArrayList<Chat>();
            this.users = new ArrayList<User>();
        }
        
        public static TL_messages_peerDialogs TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_messages_peerDialogs.constructor == i) {
                final TL_messages_peerDialogs tl_messages_peerDialogs = new TL_messages_peerDialogs();
                tl_messages_peerDialogs.readParams(abstractSerializedData, b);
                return tl_messages_peerDialogs;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_messages_peerDialogs", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            final int int32 = abstractSerializedData.readInt32(b);
            final int n = 0;
            if (int32 != 481674261) {
                if (!b) {
                    return;
                }
                throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
            }
            else {
                for (int int33 = abstractSerializedData.readInt32(b), i = 0; i < int33; ++i) {
                    final Dialog tLdeserialize = Dialog.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    this.dialogs.add(tLdeserialize);
                }
                final int int34 = abstractSerializedData.readInt32(b);
                if (int34 != 481674261) {
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int34));
                }
                else {
                    for (int int35 = abstractSerializedData.readInt32(b), j = 0; j < int35; ++j) {
                        final Message tLdeserialize2 = Message.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize2 == null) {
                            return;
                        }
                        this.messages.add(tLdeserialize2);
                    }
                    final int int36 = abstractSerializedData.readInt32(b);
                    if (int36 != 481674261) {
                        if (!b) {
                            return;
                        }
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", int36));
                    }
                    else {
                        for (int int37 = abstractSerializedData.readInt32(b), k = 0; k < int37; ++k) {
                            final Chat tLdeserialize3 = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                            if (tLdeserialize3 == null) {
                                return;
                            }
                            this.chats.add(tLdeserialize3);
                        }
                        final int int38 = abstractSerializedData.readInt32(b);
                        if (int38 == 481674261) {
                            for (int int39 = abstractSerializedData.readInt32(b), l = n; l < int39; ++l) {
                                final User tLdeserialize4 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                                if (tLdeserialize4 == null) {
                                    return;
                                }
                                this.users.add(tLdeserialize4);
                            }
                            this.state = TL_updates_state.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                            return;
                        }
                        if (!b) {
                            return;
                        }
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", int38));
                    }
                }
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_peerDialogs.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.dialogs.size();
            abstractSerializedData.writeInt32(size);
            final int n = 0;
            for (int i = 0; i < size; ++i) {
                this.dialogs.get(i).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size2 = this.messages.size();
            abstractSerializedData.writeInt32(size2);
            for (int j = 0; j < size2; ++j) {
                this.messages.get(j).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size3 = this.chats.size();
            abstractSerializedData.writeInt32(size3);
            for (int k = 0; k < size3; ++k) {
                this.chats.get(k).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size4 = this.users.size();
            abstractSerializedData.writeInt32(size4);
            for (int l = n; l < size4; ++l) {
                this.users.get(l).serializeToStream(abstractSerializedData);
            }
            this.state.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_messages_readEncryptedHistory extends TLObject
    {
        public static int constructor = 2135648522;
        public int max_date;
        public TL_inputEncryptedChat peer;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_readEncryptedHistory.constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.max_date);
        }
    }
    
    public static class TL_messages_readFeaturedStickers extends TLObject
    {
        public static int constructor = 1527873830;
        public ArrayList<Long> id;
        
        public TL_messages_readFeaturedStickers() {
            this.id = new ArrayList<Long>();
        }
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_readFeaturedStickers.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.id.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                abstractSerializedData.writeInt64(this.id.get(i));
            }
        }
    }
    
    public static class TL_messages_readHistory extends TLObject
    {
        public static int constructor = 238054714;
        public int max_id;
        public InputPeer peer;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_messages_affectedMessages.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_readHistory.constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.max_id);
        }
    }
    
    public static class TL_messages_readMentions extends TLObject
    {
        public static int constructor = 251759059;
        public InputPeer peer;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_messages_affectedHistory.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_readMentions.constructor);
            this.peer.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_messages_readMessageContents extends TLObject
    {
        public static int constructor = 916930423;
        public ArrayList<Integer> id;
        
        public TL_messages_readMessageContents() {
            this.id = new ArrayList<Integer>();
        }
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_messages_affectedMessages.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_readMessageContents.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.id.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                abstractSerializedData.writeInt32(this.id.get(i));
            }
        }
    }
    
    public static class TL_messages_receivedMessages extends TLObject
    {
        public static int constructor = 94983360;
        public int max_id;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, int i, final boolean b) {
            final Vector vector = new Vector();
            int int32;
            TL_receivedNotifyMessage tLdeserialize;
            for (int32 = abstractSerializedData.readInt32(b), i = 0; i < int32; ++i) {
                tLdeserialize = TL_receivedNotifyMessage.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                if (tLdeserialize == null) {
                    return vector;
                }
                vector.objects.add(tLdeserialize);
            }
            return vector;
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_receivedMessages.constructor);
            abstractSerializedData.writeInt32(this.max_id);
        }
    }
    
    public static class TL_messages_receivedQueue extends TLObject
    {
        public static int constructor = 1436924774;
        public int max_qts;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, int i, final boolean b) {
            final Vector vector = new Vector();
            int int32;
            for (int32 = abstractSerializedData.readInt32(b), i = 0; i < int32; ++i) {
                vector.objects.add(abstractSerializedData.readInt64(b));
            }
            return vector;
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_receivedQueue.constructor);
            abstractSerializedData.writeInt32(this.max_qts);
        }
    }
    
    public static class TL_messages_recentStickers extends messages_RecentStickers
    {
        public static int constructor = 586395571;
        public ArrayList<Integer> dates;
        public int hash;
        public ArrayList<TL_stickerPack> packs;
        public ArrayList<Document> stickers;
        
        public TL_messages_recentStickers() {
            this.packs = new ArrayList<TL_stickerPack>();
            this.stickers = new ArrayList<Document>();
            this.dates = new ArrayList<Integer>();
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.hash = abstractSerializedData.readInt32(b);
            final int int32 = abstractSerializedData.readInt32(b);
            final int n = 0;
            if (int32 != 481674261) {
                if (!b) {
                    return;
                }
                throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
            }
            else {
                for (int int33 = abstractSerializedData.readInt32(b), i = 0; i < int33; ++i) {
                    final TL_stickerPack tLdeserialize = TL_stickerPack.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    this.packs.add(tLdeserialize);
                }
                final int int34 = abstractSerializedData.readInt32(b);
                if (int34 != 481674261) {
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int34));
                }
                else {
                    for (int int35 = abstractSerializedData.readInt32(b), j = 0; j < int35; ++j) {
                        final Document tLdeserialize2 = Document.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize2 == null) {
                            return;
                        }
                        this.stickers.add(tLdeserialize2);
                    }
                    final int int36 = abstractSerializedData.readInt32(b);
                    if (int36 == 481674261) {
                        for (int int37 = abstractSerializedData.readInt32(b), k = n; k < int37; ++k) {
                            this.dates.add(abstractSerializedData.readInt32(b));
                        }
                        return;
                    }
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int36));
                }
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_recentStickers.constructor);
            abstractSerializedData.writeInt32(this.hash);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.packs.size();
            abstractSerializedData.writeInt32(size);
            final int n = 0;
            for (int i = 0; i < size; ++i) {
                this.packs.get(i).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size2 = this.stickers.size();
            abstractSerializedData.writeInt32(size2);
            for (int j = 0; j < size2; ++j) {
                this.stickers.get(j).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size3 = this.dates.size();
            abstractSerializedData.writeInt32(size3);
            for (int k = n; k < size3; ++k) {
                abstractSerializedData.writeInt32(this.dates.get(k));
            }
        }
    }
    
    public static class TL_messages_recentStickersNotModified extends messages_RecentStickers
    {
        public static int constructor = 186120336;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_recentStickersNotModified.constructor);
        }
    }
    
    public static class TL_messages_reorderPinnedDialogs extends TLObject
    {
        public static int constructor = 991616823;
        public int flags;
        public int folder_id;
        public boolean force;
        public ArrayList<InputDialogPeer> order;
        
        public TL_messages_reorderPinnedDialogs() {
            this.order = new ArrayList<InputDialogPeer>();
        }
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_reorderPinnedDialogs.constructor);
            int flags;
            if (this.force) {
                flags = (this.flags | 0x1);
            }
            else {
                flags = (this.flags & 0xFFFFFFFE);
            }
            abstractSerializedData.writeInt32(this.flags = flags);
            abstractSerializedData.writeInt32(this.folder_id);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.order.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                this.order.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_messages_reorderStickerSets extends TLObject
    {
        public static int constructor = 2016638777;
        public int flags;
        public boolean masks;
        public ArrayList<Long> order;
        
        public TL_messages_reorderStickerSets() {
            this.order = new ArrayList<Long>();
        }
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_reorderStickerSets.constructor);
            int flags;
            if (this.masks) {
                flags = (this.flags | 0x1);
            }
            else {
                flags = (this.flags & 0xFFFFFFFE);
            }
            abstractSerializedData.writeInt32(this.flags = flags);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.order.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                abstractSerializedData.writeInt64(this.order.get(i));
            }
        }
    }
    
    public static class TL_messages_report extends TLObject
    {
        public static int constructor = -1115507112;
        public ArrayList<Integer> id;
        public InputPeer peer;
        public ReportReason reason;
        
        public TL_messages_report() {
            this.id = new ArrayList<Integer>();
        }
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_report.constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.id.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                abstractSerializedData.writeInt32(this.id.get(i));
            }
            this.reason.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_messages_reportEncryptedSpam extends TLObject
    {
        public static int constructor = 1259113487;
        public TL_inputEncryptedChat peer;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_reportEncryptedSpam.constructor);
            this.peer.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_messages_reportSpam extends TLObject
    {
        public static int constructor = -820669733;
        public InputPeer peer;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_reportSpam.constructor);
            this.peer.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_messages_requestEncryption extends TLObject
    {
        public static int constructor = -162681021;
        public byte[] g_a;
        public int random_id;
        public InputUser user_id;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return EncryptedChat.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_requestEncryption.constructor);
            this.user_id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.random_id);
            abstractSerializedData.writeByteArray(this.g_a);
        }
    }
    
    public static class TL_messages_requestUrlAuth extends TLObject
    {
        public static int constructor = -482388461;
        public int button_id;
        public int msg_id;
        public InputPeer peer;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return UrlAuthResult.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_requestUrlAuth.constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.msg_id);
            abstractSerializedData.writeInt32(this.button_id);
        }
    }
    
    public static class TL_messages_saveDraft extends TLObject
    {
        public static int constructor = -1137057461;
        public ArrayList<MessageEntity> entities;
        public int flags;
        public String message;
        public boolean no_webpage;
        public InputPeer peer;
        public int reply_to_msg_id;
        
        public TL_messages_saveDraft() {
            this.entities = new ArrayList<MessageEntity>();
        }
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_saveDraft.constructor);
            int flags;
            if (this.no_webpage) {
                flags = (this.flags | 0x2);
            }
            else {
                flags = (this.flags & 0xFFFFFFFD);
            }
            abstractSerializedData.writeInt32(this.flags = flags);
            if ((this.flags & 0x1) != 0x0) {
                abstractSerializedData.writeInt32(this.reply_to_msg_id);
            }
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(this.message);
            if ((this.flags & 0x8) != 0x0) {
                abstractSerializedData.writeInt32(481674261);
                final int size = this.entities.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; ++i) {
                    this.entities.get(i).serializeToStream(abstractSerializedData);
                }
            }
        }
    }
    
    public static class TL_messages_saveGif extends TLObject
    {
        public static int constructor = 846868683;
        public InputDocument id;
        public boolean unsave;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_saveGif.constructor);
            this.id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeBool(this.unsave);
        }
    }
    
    public static class TL_messages_saveRecentSticker extends TLObject
    {
        public static int constructor = 958863608;
        public boolean attached;
        public int flags;
        public InputDocument id;
        public boolean unsave;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_saveRecentSticker.constructor);
            int flags;
            if (this.attached) {
                flags = (this.flags | 0x1);
            }
            else {
                flags = (this.flags & 0xFFFFFFFE);
            }
            abstractSerializedData.writeInt32(this.flags = flags);
            this.id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeBool(this.unsave);
        }
    }
    
    public static class TL_messages_savedGifs extends messages_SavedGifs
    {
        public static int constructor = 772213157;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.hash = abstractSerializedData.readInt32(b);
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final Document tLdeserialize = Document.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.gifs.add(tLdeserialize);
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_savedGifs.constructor);
            abstractSerializedData.writeInt32(super.hash);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.gifs.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                super.gifs.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_messages_savedGifsNotModified extends messages_SavedGifs
    {
        public static int constructor = -402498398;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_savedGifsNotModified.constructor);
        }
    }
    
    public static class TL_messages_search extends TLObject
    {
        public static int constructor = -2045448344;
        public int add_offset;
        public MessagesFilter filter;
        public int flags;
        public InputUser from_id;
        public int hash;
        public int limit;
        public int max_date;
        public int max_id;
        public int min_date;
        public int min_id;
        public int offset_id;
        public InputPeer peer;
        public String q;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return messages_Messages.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_search.constructor);
            abstractSerializedData.writeInt32(this.flags);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(this.q);
            if ((this.flags & 0x1) != 0x0) {
                this.from_id.serializeToStream(abstractSerializedData);
            }
            this.filter.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.min_date);
            abstractSerializedData.writeInt32(this.max_date);
            abstractSerializedData.writeInt32(this.offset_id);
            abstractSerializedData.writeInt32(this.add_offset);
            abstractSerializedData.writeInt32(this.limit);
            abstractSerializedData.writeInt32(this.max_id);
            abstractSerializedData.writeInt32(this.min_id);
            abstractSerializedData.writeInt32(this.hash);
        }
    }
    
    public static class TL_messages_searchCounter extends TLObject
    {
        public static int constructor = -398136321;
        public int count;
        public MessagesFilter filter;
        public int flags;
        public boolean inexact;
        
        public static TL_messages_searchCounter TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_messages_searchCounter.constructor == i) {
                final TL_messages_searchCounter tl_messages_searchCounter = new TL_messages_searchCounter();
                tl_messages_searchCounter.readParams(abstractSerializedData, b);
                return tl_messages_searchCounter;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_messages_searchCounter", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.flags = abstractSerializedData.readInt32(b);
            this.inexact = ((this.flags & 0x2) != 0x0);
            this.filter = MessagesFilter.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            this.count = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_searchCounter.constructor);
            int flags;
            if (this.inexact) {
                flags = (this.flags | 0x2);
            }
            else {
                flags = (this.flags & 0xFFFFFFFD);
            }
            abstractSerializedData.writeInt32(this.flags = flags);
            this.filter.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.count);
        }
    }
    
    public static class TL_messages_searchGifs extends TLObject
    {
        public static int constructor = -1080395925;
        public int offset;
        public String q;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_messages_foundGifs.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_searchGifs.constructor);
            abstractSerializedData.writeString(this.q);
            abstractSerializedData.writeInt32(this.offset);
        }
    }
    
    public static class TL_messages_searchGlobal extends TLObject
    {
        public static int constructor = 259638801;
        public int limit;
        public int offset_id;
        public InputPeer offset_peer;
        public int offset_rate;
        public String q;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return messages_Messages.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_searchGlobal.constructor);
            abstractSerializedData.writeString(this.q);
            abstractSerializedData.writeInt32(this.offset_rate);
            this.offset_peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.offset_id);
            abstractSerializedData.writeInt32(this.limit);
        }
    }
    
    public static class TL_messages_searchStickerSets extends TLObject
    {
        public static int constructor = -1028140917;
        public boolean exclude_featured;
        public int flags;
        public int hash;
        public String q;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return messages_FoundStickerSets.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_searchStickerSets.constructor);
            int flags;
            if (this.exclude_featured) {
                flags = (this.flags | 0x1);
            }
            else {
                flags = (this.flags & 0xFFFFFFFE);
            }
            abstractSerializedData.writeInt32(this.flags = flags);
            abstractSerializedData.writeString(this.q);
            abstractSerializedData.writeInt32(this.hash);
        }
    }
    
    public static class TL_messages_sendBroadcast extends TLObject
    {
        public static int constructor = -1082919718;
        public ArrayList<InputUser> contacts;
        public InputMedia media;
        public String message;
        public ArrayList<Long> random_id;
        
        public TL_messages_sendBroadcast() {
            this.contacts = new ArrayList<InputUser>();
            this.random_id = new ArrayList<Long>();
        }
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Updates.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_sendBroadcast.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.contacts.size();
            abstractSerializedData.writeInt32(size);
            final int n = 0;
            for (int i = 0; i < size; ++i) {
                this.contacts.get(i).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size2 = this.random_id.size();
            abstractSerializedData.writeInt32(size2);
            for (int j = n; j < size2; ++j) {
                abstractSerializedData.writeInt64(this.random_id.get(j));
            }
            abstractSerializedData.writeString(this.message);
            this.media.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_messages_sendEncrypted extends TLObject
    {
        public static int constructor = -1451792525;
        public NativeByteBuffer data;
        public TL_inputEncryptedChat peer;
        public long random_id;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return messages_SentEncryptedMessage.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void freeResources() {
            final NativeByteBuffer data = this.data;
            if (data != null) {
                data.reuse();
                this.data = null;
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_sendEncrypted.constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt64(this.random_id);
            abstractSerializedData.writeByteBuffer(this.data);
        }
    }
    
    public static class TL_messages_sendEncryptedFile extends TLObject
    {
        public static int constructor = -1701831834;
        public NativeByteBuffer data;
        public InputEncryptedFile file;
        public TL_inputEncryptedChat peer;
        public long random_id;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return messages_SentEncryptedMessage.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void freeResources() {
            final NativeByteBuffer data = this.data;
            if (data != null) {
                data.reuse();
                this.data = null;
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_sendEncryptedFile.constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt64(this.random_id);
            abstractSerializedData.writeByteBuffer(this.data);
            this.file.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_messages_sendEncryptedMultiMedia extends TLObject
    {
        public static int constructor = -892679478;
        public ArrayList<InputEncryptedFile> files;
        public ArrayList<TL_decryptedMessage> messages;
        
        public TL_messages_sendEncryptedMultiMedia() {
            this.messages = new ArrayList<TL_decryptedMessage>();
            this.files = new ArrayList<InputEncryptedFile>();
        }
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return messages_SentEncryptedMessage.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void freeResources() {
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
        }
    }
    
    public static class TL_messages_sendEncryptedService extends TLObject
    {
        public static int constructor = 852769188;
        public NativeByteBuffer data;
        public TL_inputEncryptedChat peer;
        public long random_id;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return messages_SentEncryptedMessage.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void freeResources() {
            final NativeByteBuffer data = this.data;
            if (data != null) {
                data.reuse();
                this.data = null;
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_sendEncryptedService.constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt64(this.random_id);
            abstractSerializedData.writeByteBuffer(this.data);
        }
    }
    
    public static class TL_messages_sendInlineBotResult extends TLObject
    {
        public static int constructor = -1318189314;
        public boolean background;
        public boolean clear_draft;
        public int flags;
        public boolean hide_via;
        public String id;
        public InputPeer peer;
        public long query_id;
        public long random_id;
        public int reply_to_msg_id;
        public boolean silent;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Updates.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_sendInlineBotResult.constructor);
            int flags;
            if (this.silent) {
                flags = (this.flags | 0x20);
            }
            else {
                flags = (this.flags & 0xFFFFFFDF);
            }
            this.flags = flags;
            int flags2;
            if (this.background) {
                flags2 = (this.flags | 0x40);
            }
            else {
                flags2 = (this.flags & 0xFFFFFFBF);
            }
            this.flags = flags2;
            int flags3;
            if (this.clear_draft) {
                flags3 = (this.flags | 0x80);
            }
            else {
                flags3 = (this.flags & 0xFFFFFF7F);
            }
            this.flags = flags3;
            int flags4;
            if (this.hide_via) {
                flags4 = (this.flags | 0x800);
            }
            else {
                flags4 = (this.flags & 0xFFFFF7FF);
            }
            abstractSerializedData.writeInt32(this.flags = flags4);
            this.peer.serializeToStream(abstractSerializedData);
            if ((this.flags & 0x1) != 0x0) {
                abstractSerializedData.writeInt32(this.reply_to_msg_id);
            }
            abstractSerializedData.writeInt64(this.random_id);
            abstractSerializedData.writeInt64(this.query_id);
            abstractSerializedData.writeString(this.id);
        }
    }
    
    public static class TL_messages_sendMedia extends TLObject
    {
        public static int constructor = -1194252757;
        public boolean background;
        public boolean clear_draft;
        public ArrayList<MessageEntity> entities;
        public int flags;
        public InputMedia media;
        public String message;
        public InputPeer peer;
        public long random_id;
        public ReplyMarkup reply_markup;
        public int reply_to_msg_id;
        public boolean silent;
        
        public TL_messages_sendMedia() {
            this.entities = new ArrayList<MessageEntity>();
        }
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Updates.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_sendMedia.constructor);
            int flags;
            if (this.silent) {
                flags = (this.flags | 0x20);
            }
            else {
                flags = (this.flags & 0xFFFFFFDF);
            }
            this.flags = flags;
            int flags2;
            if (this.background) {
                flags2 = (this.flags | 0x40);
            }
            else {
                flags2 = (this.flags & 0xFFFFFFBF);
            }
            this.flags = flags2;
            int flags3;
            if (this.clear_draft) {
                flags3 = (this.flags | 0x80);
            }
            else {
                flags3 = (this.flags & 0xFFFFFF7F);
            }
            abstractSerializedData.writeInt32(this.flags = flags3);
            this.peer.serializeToStream(abstractSerializedData);
            if ((this.flags & 0x1) != 0x0) {
                abstractSerializedData.writeInt32(this.reply_to_msg_id);
            }
            this.media.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(this.message);
            abstractSerializedData.writeInt64(this.random_id);
            if ((this.flags & 0x4) != 0x0) {
                this.reply_markup.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 0x8) != 0x0) {
                abstractSerializedData.writeInt32(481674261);
                final int size = this.entities.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; ++i) {
                    this.entities.get(i).serializeToStream(abstractSerializedData);
                }
            }
        }
    }
    
    public static class TL_messages_sendMessage extends TLObject
    {
        public static int constructor = -91733382;
        public boolean background;
        public boolean clear_draft;
        public ArrayList<MessageEntity> entities;
        public int flags;
        public String message;
        public boolean no_webpage;
        public InputPeer peer;
        public long random_id;
        public ReplyMarkup reply_markup;
        public int reply_to_msg_id;
        public boolean silent;
        
        public TL_messages_sendMessage() {
            this.entities = new ArrayList<MessageEntity>();
        }
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Updates.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_sendMessage.constructor);
            int flags;
            if (this.no_webpage) {
                flags = (this.flags | 0x2);
            }
            else {
                flags = (this.flags & 0xFFFFFFFD);
            }
            this.flags = flags;
            int flags2;
            if (this.silent) {
                flags2 = (this.flags | 0x20);
            }
            else {
                flags2 = (this.flags & 0xFFFFFFDF);
            }
            this.flags = flags2;
            int flags3;
            if (this.background) {
                flags3 = (this.flags | 0x40);
            }
            else {
                flags3 = (this.flags & 0xFFFFFFBF);
            }
            this.flags = flags3;
            int flags4;
            if (this.clear_draft) {
                flags4 = (this.flags | 0x80);
            }
            else {
                flags4 = (this.flags & 0xFFFFFF7F);
            }
            abstractSerializedData.writeInt32(this.flags = flags4);
            this.peer.serializeToStream(abstractSerializedData);
            if ((this.flags & 0x1) != 0x0) {
                abstractSerializedData.writeInt32(this.reply_to_msg_id);
            }
            abstractSerializedData.writeString(this.message);
            abstractSerializedData.writeInt64(this.random_id);
            if ((this.flags & 0x4) != 0x0) {
                this.reply_markup.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 0x8) != 0x0) {
                abstractSerializedData.writeInt32(481674261);
                final int size = this.entities.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; ++i) {
                    this.entities.get(i).serializeToStream(abstractSerializedData);
                }
            }
        }
    }
    
    public static class TL_messages_sendMultiMedia extends TLObject
    {
        public static int constructor = 546656559;
        public boolean background;
        public boolean clear_draft;
        public int flags;
        public ArrayList<TL_inputSingleMedia> multi_media;
        public InputPeer peer;
        public int reply_to_msg_id;
        public boolean silent;
        
        public TL_messages_sendMultiMedia() {
            this.multi_media = new ArrayList<TL_inputSingleMedia>();
        }
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Updates.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_sendMultiMedia.constructor);
            int flags;
            if (this.silent) {
                flags = (this.flags | 0x20);
            }
            else {
                flags = (this.flags & 0xFFFFFFDF);
            }
            this.flags = flags;
            int flags2;
            if (this.background) {
                flags2 = (this.flags | 0x40);
            }
            else {
                flags2 = (this.flags & 0xFFFFFFBF);
            }
            this.flags = flags2;
            int flags3;
            if (this.clear_draft) {
                flags3 = (this.flags | 0x80);
            }
            else {
                flags3 = (this.flags & 0xFFFFFF7F);
            }
            abstractSerializedData.writeInt32(this.flags = flags3);
            this.peer.serializeToStream(abstractSerializedData);
            if ((this.flags & 0x1) != 0x0) {
                abstractSerializedData.writeInt32(this.reply_to_msg_id);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size = this.multi_media.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                this.multi_media.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_messages_sendScreenshotNotification extends TLObject
    {
        public static int constructor = -914493408;
        public InputPeer peer;
        public long random_id;
        public int reply_to_msg_id;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Updates.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_sendScreenshotNotification.constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.reply_to_msg_id);
            abstractSerializedData.writeInt64(this.random_id);
        }
    }
    
    public static class TL_messages_sendVote extends TLObject
    {
        public static int constructor = 283795844;
        public int msg_id;
        public ArrayList<byte[]> options;
        public InputPeer peer;
        
        public TL_messages_sendVote() {
            this.options = new ArrayList<byte[]>();
        }
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Updates.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_sendVote.constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.msg_id);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.options.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                abstractSerializedData.writeByteArray(this.options.get(i));
            }
        }
    }
    
    public static class TL_messages_sentEncryptedFile extends messages_SentEncryptedMessage
    {
        public static int constructor = -1802240206;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.date = abstractSerializedData.readInt32(b);
            super.file = EncryptedFile.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_sentEncryptedFile.constructor);
            abstractSerializedData.writeInt32(super.date);
            super.file.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_messages_sentEncryptedMessage extends messages_SentEncryptedMessage
    {
        public static int constructor = 1443858741;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.date = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_sentEncryptedMessage.constructor);
            abstractSerializedData.writeInt32(super.date);
        }
    }
    
    public static class TL_messages_setBotCallbackAnswer extends TLObject
    {
        public static int constructor = -712043766;
        public boolean alert;
        public int cache_time;
        public int flags;
        public String message;
        public long query_id;
        public String url;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_setBotCallbackAnswer.constructor);
            int flags;
            if (this.alert) {
                flags = (this.flags | 0x2);
            }
            else {
                flags = (this.flags & 0xFFFFFFFD);
            }
            abstractSerializedData.writeInt32(this.flags = flags);
            abstractSerializedData.writeInt64(this.query_id);
            if ((this.flags & 0x1) != 0x0) {
                abstractSerializedData.writeString(this.message);
            }
            if ((this.flags & 0x4) != 0x0) {
                abstractSerializedData.writeString(this.url);
            }
            abstractSerializedData.writeInt32(this.cache_time);
        }
    }
    
    public static class TL_messages_setEncryptedTyping extends TLObject
    {
        public static int constructor = 2031374829;
        public TL_inputEncryptedChat peer;
        public boolean typing;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_setEncryptedTyping.constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeBool(this.typing);
        }
    }
    
    public static class TL_messages_setGameScore extends TLObject
    {
        public static int constructor = -1896289088;
        public boolean edit_message;
        public int flags;
        public boolean force;
        public int id;
        public InputPeer peer;
        public int score;
        public InputUser user_id;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Updates.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_setGameScore.constructor);
            int flags;
            if (this.edit_message) {
                flags = (this.flags | 0x1);
            }
            else {
                flags = (this.flags & 0xFFFFFFFE);
            }
            this.flags = flags;
            int flags2;
            if (this.force) {
                flags2 = (this.flags | 0x2);
            }
            else {
                flags2 = (this.flags & 0xFFFFFFFD);
            }
            abstractSerializedData.writeInt32(this.flags = flags2);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.id);
            this.user_id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.score);
        }
    }
    
    public static class TL_messages_setInlineGameScore extends TLObject
    {
        public static int constructor = 363700068;
        public boolean edit_message;
        public int flags;
        public boolean force;
        public TL_inputBotInlineMessageID id;
        public int score;
        public InputUser user_id;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_setInlineGameScore.constructor);
            int flags;
            if (this.edit_message) {
                flags = (this.flags | 0x1);
            }
            else {
                flags = (this.flags & 0xFFFFFFFE);
            }
            this.flags = flags;
            int flags2;
            if (this.force) {
                flags2 = (this.flags | 0x2);
            }
            else {
                flags2 = (this.flags & 0xFFFFFFFD);
            }
            abstractSerializedData.writeInt32(this.flags = flags2);
            this.id.serializeToStream(abstractSerializedData);
            this.user_id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.score);
        }
    }
    
    public static class TL_messages_setTyping extends TLObject
    {
        public static int constructor = -1551737264;
        public SendMessageAction action;
        public InputPeer peer;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_setTyping.constructor);
            this.peer.serializeToStream(abstractSerializedData);
            this.action.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_messages_startBot extends TLObject
    {
        public static int constructor = -421563528;
        public InputUser bot;
        public InputPeer peer;
        public long random_id;
        public String start_param;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Updates.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_startBot.constructor);
            this.bot.serializeToStream(abstractSerializedData);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt64(this.random_id);
            abstractSerializedData.writeString(this.start_param);
        }
    }
    
    public static class TL_messages_stickerSet extends TLObject
    {
        public static int constructor = -1240849242;
        public ArrayList<Document> documents;
        public ArrayList<TL_stickerPack> packs;
        public StickerSet set;
        
        public TL_messages_stickerSet() {
            this.packs = new ArrayList<TL_stickerPack>();
            this.documents = new ArrayList<Document>();
        }
        
        public static TL_messages_stickerSet TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_messages_stickerSet.constructor == i) {
                final TL_messages_stickerSet set = new TL_messages_stickerSet();
                set.readParams(abstractSerializedData, b);
                return set;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_messages_stickerSet", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.set = StickerSet.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            final int int32 = abstractSerializedData.readInt32(b);
            final int n = 0;
            if (int32 != 481674261) {
                if (!b) {
                    return;
                }
                throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
            }
            else {
                for (int int33 = abstractSerializedData.readInt32(b), i = 0; i < int33; ++i) {
                    final TL_stickerPack tLdeserialize = TL_stickerPack.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    this.packs.add(tLdeserialize);
                }
                final int int34 = abstractSerializedData.readInt32(b);
                if (int34 == 481674261) {
                    for (int int35 = abstractSerializedData.readInt32(b), j = n; j < int35; ++j) {
                        final Document tLdeserialize2 = Document.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize2 == null) {
                            return;
                        }
                        this.documents.add(tLdeserialize2);
                    }
                    return;
                }
                if (!b) {
                    return;
                }
                throw new RuntimeException(String.format("wrong Vector magic, got %x", int34));
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_stickerSet.constructor);
            this.set.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.packs.size();
            abstractSerializedData.writeInt32(size);
            final int n = 0;
            for (int i = 0; i < size; ++i) {
                this.packs.get(i).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size2 = this.documents.size();
            abstractSerializedData.writeInt32(size2);
            for (int j = n; j < size2; ++j) {
                this.documents.get(j).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_messages_stickerSetInstallResultArchive extends messages_StickerSetInstallResult
    {
        public static int constructor = 904138920;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final StickerSetCovered tLdeserialize = StickerSetCovered.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.sets.add(tLdeserialize);
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_stickerSetInstallResultArchive.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.sets.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                super.sets.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_messages_stickerSetInstallResultSuccess extends messages_StickerSetInstallResult
    {
        public static int constructor = 946083368;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_stickerSetInstallResultSuccess.constructor);
        }
    }
    
    public static class TL_messages_stickers extends messages_Stickers
    {
        public static int constructor = -463889475;
        public int hash;
        public ArrayList<Document> stickers;
        
        public TL_messages_stickers() {
            this.stickers = new ArrayList<Document>();
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.hash = abstractSerializedData.readInt32(b);
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final Document tLdeserialize = Document.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    this.stickers.add(tLdeserialize);
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_stickers.constructor);
            abstractSerializedData.writeInt32(this.hash);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.stickers.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                this.stickers.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_messages_stickersNotModified extends messages_Stickers
    {
        public static int constructor = -244016606;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_stickersNotModified.constructor);
        }
    }
    
    public static class TL_messages_toggleDialogPin extends TLObject
    {
        public static int constructor = -1489903017;
        public int flags;
        public InputDialogPeer peer;
        public boolean pinned;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_toggleDialogPin.constructor);
            int flags;
            if (this.pinned) {
                flags = (this.flags | 0x1);
            }
            else {
                flags = (this.flags & 0xFFFFFFFE);
            }
            abstractSerializedData.writeInt32(this.flags = flags);
            this.peer.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_messages_uninstallStickerSet extends TLObject
    {
        public static int constructor = -110209570;
        public InputStickerSet stickerset;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_uninstallStickerSet.constructor);
            this.stickerset.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_messages_updatePinnedMessage extends TLObject
    {
        public static int constructor = -760547348;
        public int flags;
        public int id;
        public InputPeer peer;
        public boolean silent;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Updates.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_updatePinnedMessage.constructor);
            int flags;
            if (this.silent) {
                flags = (this.flags | 0x1);
            }
            else {
                flags = (this.flags & 0xFFFFFFFE);
            }
            abstractSerializedData.writeInt32(this.flags = flags);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.id);
        }
    }
    
    public static class TL_messages_uploadEncryptedFile extends TLObject
    {
        public static int constructor = 1347929239;
        public InputEncryptedFile file;
        public TL_inputEncryptedChat peer;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return EncryptedFile.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_uploadEncryptedFile.constructor);
            this.peer.serializeToStream(abstractSerializedData);
            this.file.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_messages_uploadMedia extends TLObject
    {
        public static int constructor = 1369162417;
        public InputMedia media;
        public InputPeer peer;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return MessageMedia.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_messages_uploadMedia.constructor);
            this.peer.serializeToStream(abstractSerializedData);
            this.media.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_nearestDc extends TLObject
    {
        public static int constructor = -1910892683;
        public String country;
        public int nearest_dc;
        public int this_dc;
        
        public static TL_nearestDc TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_nearestDc.constructor == i) {
                final TL_nearestDc tl_nearestDc = new TL_nearestDc();
                tl_nearestDc.readParams(abstractSerializedData, b);
                return tl_nearestDc;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_nearestDc", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.country = abstractSerializedData.readString(b);
            this.this_dc = abstractSerializedData.readInt32(b);
            this.nearest_dc = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_nearestDc.constructor);
            abstractSerializedData.writeString(this.country);
            abstractSerializedData.writeInt32(this.this_dc);
            abstractSerializedData.writeInt32(this.nearest_dc);
        }
    }
    
    public static class TL_notifyBroadcasts extends NotifyPeer
    {
        public static int constructor = -703403793;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_notifyBroadcasts.constructor);
        }
    }
    
    public static class TL_notifyChats extends NotifyPeer
    {
        public static int constructor = -1073230141;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_notifyChats.constructor);
        }
    }
    
    public static class TL_notifyPeer extends NotifyPeer
    {
        public static int constructor = -1613493288;
        public Peer peer;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.peer = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_notifyPeer.constructor);
            this.peer.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_notifyUsers extends NotifyPeer
    {
        public static int constructor = -1261946036;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_notifyUsers.constructor);
        }
    }
    
    public static class TL_null extends TLObject
    {
        public static int constructor = 1450380236;
        
        public static TL_null TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_null.constructor == i) {
                final TL_null tl_null = new TL_null();
                tl_null.readParams(abstractSerializedData, b);
                return tl_null;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_null", i));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_null.constructor);
        }
    }
    
    public static class TL_page extends Page
    {
        public static int constructor = -1366746132;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            final int n = 0;
            super.part = ((flags & 0x1) != 0x0);
            super.rtl = ((super.flags & 0x2) != 0x0);
            super.url = abstractSerializedData.readString(b);
            final int int32 = abstractSerializedData.readInt32(b);
            if (int32 != 481674261) {
                if (!b) {
                    return;
                }
                throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
            }
            else {
                for (int int33 = abstractSerializedData.readInt32(b), i = 0; i < int33; ++i) {
                    final PageBlock tLdeserialize = PageBlock.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.blocks.add(tLdeserialize);
                }
                final int int34 = abstractSerializedData.readInt32(b);
                if (int34 != 481674261) {
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int34));
                }
                else {
                    for (int int35 = abstractSerializedData.readInt32(b), j = 0; j < int35; ++j) {
                        final Photo tLdeserialize2 = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize2 == null) {
                            return;
                        }
                        super.photos.add(tLdeserialize2);
                    }
                    final int int36 = abstractSerializedData.readInt32(b);
                    if (int36 == 481674261) {
                        for (int int37 = abstractSerializedData.readInt32(b), k = n; k < int37; ++k) {
                            final Document tLdeserialize3 = Document.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                            if (tLdeserialize3 == null) {
                                return;
                            }
                            super.documents.add(tLdeserialize3);
                        }
                        return;
                    }
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int36));
                }
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_page.constructor);
            int flags;
            if (super.part) {
                flags = (super.flags | 0x1);
            }
            else {
                flags = (super.flags & 0xFFFFFFFE);
            }
            super.flags = flags;
            int flags2;
            if (super.rtl) {
                flags2 = (super.flags | 0x2);
            }
            else {
                flags2 = (super.flags & 0xFFFFFFFD);
            }
            abstractSerializedData.writeInt32(super.flags = flags2);
            abstractSerializedData.writeString(super.url);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.blocks.size();
            abstractSerializedData.writeInt32(size);
            final int n = 0;
            for (int i = 0; i < size; ++i) {
                super.blocks.get(i).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size2 = super.photos.size();
            abstractSerializedData.writeInt32(size2);
            for (int j = 0; j < size2; ++j) {
                super.photos.get(j).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size3 = super.documents.size();
            abstractSerializedData.writeInt32(size3);
            for (int k = n; k < size3; ++k) {
                super.documents.get(k).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_pageBlockAnchor extends PageBlock
    {
        public static int constructor = -837994576;
        public String name;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.name = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_pageBlockAnchor.constructor);
            abstractSerializedData.writeString(this.name);
        }
    }
    
    public static class TL_pageBlockAudio extends PageBlock
    {
        public static int constructor = -2143067670;
        public long audio_id;
        public TL_pageCaption caption;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.audio_id = abstractSerializedData.readInt64(b);
            this.caption = TL_pageCaption.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_pageBlockAudio.constructor);
            abstractSerializedData.writeInt64(this.audio_id);
            this.caption.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_pageBlockAudio_layer82 extends TL_pageBlockAudio
    {
        public static int constructor = 834148991;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.audio_id = abstractSerializedData.readInt64(b);
            super.caption = new TL_pageCaption();
            super.caption.text = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.caption.credit = new TL_textEmpty();
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_pageBlockAudio_layer82.constructor);
            abstractSerializedData.writeInt64(super.audio_id);
            super.caption.text.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_pageBlockAuthorDate extends PageBlock
    {
        public static int constructor = -1162877472;
        public RichText author;
        public int published_date;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.author = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            this.published_date = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_pageBlockAuthorDate.constructor);
            this.author.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.published_date);
        }
    }
    
    public static class TL_pageBlockAuthorDate_layer60 extends TL_pageBlockAuthorDate
    {
        public static int constructor = 1029399794;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            final String string = abstractSerializedData.readString(b);
            super.author = new TL_textPlain();
            ((TL_textPlain)super.author).text = string;
            super.published_date = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_pageBlockAuthorDate_layer60.constructor);
            abstractSerializedData.writeString(((TL_textPlain)super.author).text);
            abstractSerializedData.writeInt32(super.published_date);
        }
    }
    
    public static class TL_pageBlockBlockquote extends PageBlock
    {
        public static int constructor = 641563686;
        public RichText caption;
        public RichText text;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.text = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            this.caption = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_pageBlockBlockquote.constructor);
            this.text.serializeToStream(abstractSerializedData);
            this.caption.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_pageBlockChannel extends PageBlock
    {
        public static int constructor = -283684427;
        public Chat channel;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.channel = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_pageBlockChannel.constructor);
            this.channel.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_pageBlockCollage extends PageBlock
    {
        public static int constructor = 1705048653;
        public TL_pageCaption caption;
        public ArrayList<PageBlock> items;
        
        public TL_pageBlockCollage() {
            this.items = new ArrayList<PageBlock>();
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final PageBlock tLdeserialize = PageBlock.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    this.items.add(tLdeserialize);
                    ++i;
                }
                this.caption = TL_pageCaption.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_pageBlockCollage.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.items.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                this.items.get(i).serializeToStream(abstractSerializedData);
            }
            this.caption.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_pageBlockCollage_layer82 extends TL_pageBlockCollage
    {
        public static int constructor = 145955919;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final PageBlock tLdeserialize = PageBlock.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.items.add(tLdeserialize);
                    ++i;
                }
                super.caption = new TL_pageCaption();
                super.caption.text = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                super.caption.credit = new TL_textEmpty();
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_pageBlockCollage_layer82.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.items.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                super.items.get(i).serializeToStream(abstractSerializedData);
            }
            super.caption.text.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_pageBlockCover extends PageBlock
    {
        public static int constructor = 972174080;
        public PageBlock cover;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.cover = PageBlock.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_pageBlockCover.constructor);
            this.cover.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_pageBlockDetails extends PageBlock
    {
        public static int constructor = 1987480557;
        public ArrayList<PageBlock> blocks;
        public int flags;
        public boolean open;
        public RichText title;
        
        public TL_pageBlockDetails() {
            this.blocks = new ArrayList<PageBlock>();
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.flags = abstractSerializedData.readInt32(b);
            final int flags = this.flags;
            int i = 0;
            this.open = ((flags & 0x1) != 0x0);
            final int int32 = abstractSerializedData.readInt32(b);
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final PageBlock tLdeserialize = PageBlock.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    this.blocks.add(tLdeserialize);
                    ++i;
                }
                this.title = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_pageBlockDetails.constructor);
            int flags;
            if (this.open) {
                flags = (this.flags | 0x1);
            }
            else {
                flags = (this.flags & 0xFFFFFFFE);
            }
            abstractSerializedData.writeInt32(this.flags = flags);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.blocks.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                this.blocks.get(i).serializeToStream(abstractSerializedData);
            }
            this.title.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_pageBlockDivider extends PageBlock
    {
        public static int constructor = -618614392;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_pageBlockDivider.constructor);
        }
    }
    
    public static class TL_pageBlockEmbed extends PageBlock
    {
        public static int constructor = -1468953147;
        public boolean allow_scrolling;
        public TL_pageCaption caption;
        public int flags;
        public boolean full_width;
        public int h;
        public String html;
        public long poster_photo_id;
        public String url;
        public int w;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.flags = abstractSerializedData.readInt32(b);
            final int flags = this.flags;
            final boolean b2 = true;
            this.full_width = ((flags & 0x1) != 0x0);
            this.allow_scrolling = ((this.flags & 0x8) != 0x0 && b2);
            if ((this.flags & 0x2) != 0x0) {
                this.url = abstractSerializedData.readString(b);
            }
            if ((this.flags & 0x4) != 0x0) {
                this.html = abstractSerializedData.readString(b);
            }
            if ((this.flags & 0x10) != 0x0) {
                this.poster_photo_id = abstractSerializedData.readInt64(b);
            }
            if ((this.flags & 0x20) != 0x0) {
                this.w = abstractSerializedData.readInt32(b);
            }
            if ((this.flags & 0x20) != 0x0) {
                this.h = abstractSerializedData.readInt32(b);
            }
            this.caption = TL_pageCaption.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_pageBlockEmbed.constructor);
            int flags;
            if (this.full_width) {
                flags = (this.flags | 0x1);
            }
            else {
                flags = (this.flags & 0xFFFFFFFE);
            }
            this.flags = flags;
            int flags2;
            if (this.allow_scrolling) {
                flags2 = (this.flags | 0x8);
            }
            else {
                flags2 = (this.flags & 0xFFFFFFF7);
            }
            abstractSerializedData.writeInt32(this.flags = flags2);
            if ((this.flags & 0x2) != 0x0) {
                abstractSerializedData.writeString(this.url);
            }
            if ((this.flags & 0x4) != 0x0) {
                abstractSerializedData.writeString(this.html);
            }
            if ((this.flags & 0x10) != 0x0) {
                abstractSerializedData.writeInt64(this.poster_photo_id);
            }
            if ((this.flags & 0x20) != 0x0) {
                abstractSerializedData.writeInt32(this.w);
            }
            if ((this.flags & 0x20) != 0x0) {
                abstractSerializedData.writeInt32(this.h);
            }
            this.caption.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_pageBlockEmbedPost extends PageBlock
    {
        public static int constructor = -229005301;
        public String author;
        public long author_photo_id;
        public ArrayList<PageBlock> blocks;
        public TL_pageCaption caption;
        public int date;
        public String url;
        public long webpage_id;
        
        public TL_pageBlockEmbedPost() {
            this.blocks = new ArrayList<PageBlock>();
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.url = abstractSerializedData.readString(b);
            this.webpage_id = abstractSerializedData.readInt64(b);
            this.author_photo_id = abstractSerializedData.readInt64(b);
            this.author = abstractSerializedData.readString(b);
            this.date = abstractSerializedData.readInt32(b);
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final PageBlock tLdeserialize = PageBlock.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    this.blocks.add(tLdeserialize);
                    ++i;
                }
                this.caption = TL_pageCaption.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_pageBlockEmbedPost.constructor);
            abstractSerializedData.writeString(this.url);
            abstractSerializedData.writeInt64(this.webpage_id);
            abstractSerializedData.writeInt64(this.author_photo_id);
            abstractSerializedData.writeString(this.author);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.blocks.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                this.blocks.get(i).serializeToStream(abstractSerializedData);
            }
            this.caption.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_pageBlockEmbedPost_layer82 extends TL_pageBlockEmbedPost
    {
        public static int constructor = 690781161;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.url = abstractSerializedData.readString(b);
            super.webpage_id = abstractSerializedData.readInt64(b);
            super.author_photo_id = abstractSerializedData.readInt64(b);
            super.author = abstractSerializedData.readString(b);
            super.date = abstractSerializedData.readInt32(b);
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final PageBlock tLdeserialize = PageBlock.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.blocks.add(tLdeserialize);
                    ++i;
                }
                super.caption = new TL_pageCaption();
                super.caption.text = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                super.caption.credit = new TL_textEmpty();
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_pageBlockEmbedPost_layer82.constructor);
            abstractSerializedData.writeString(super.url);
            abstractSerializedData.writeInt64(super.webpage_id);
            abstractSerializedData.writeInt64(super.author_photo_id);
            abstractSerializedData.writeString(super.author);
            abstractSerializedData.writeInt32(super.date);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.blocks.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                super.blocks.get(i).serializeToStream(abstractSerializedData);
            }
            super.caption.text.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_pageBlockEmbed_layer60 extends TL_pageBlockEmbed
    {
        public static int constructor = -650782469;
        public boolean allow_scrolling;
        public RichText caption;
        public int flags;
        public boolean full_width;
        public int h;
        public String html;
        public String url;
        public int w;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.flags = abstractSerializedData.readInt32(b);
            final int flags = this.flags;
            final boolean b2 = true;
            this.full_width = ((flags & 0x1) != 0x0);
            this.allow_scrolling = ((this.flags & 0x8) != 0x0 && b2);
            if ((this.flags & 0x2) != 0x0) {
                this.url = abstractSerializedData.readString(b);
            }
            if ((this.flags & 0x4) != 0x0) {
                this.html = abstractSerializedData.readString(b);
            }
            this.w = abstractSerializedData.readInt32(b);
            this.h = abstractSerializedData.readInt32(b);
            this.caption = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_pageBlockEmbed_layer60.constructor);
            int flags;
            if (this.full_width) {
                flags = (this.flags | 0x1);
            }
            else {
                flags = (this.flags & 0xFFFFFFFE);
            }
            this.flags = flags;
            int flags2;
            if (this.allow_scrolling) {
                flags2 = (this.flags | 0x8);
            }
            else {
                flags2 = (this.flags & 0xFFFFFFF7);
            }
            abstractSerializedData.writeInt32(this.flags = flags2);
            if ((this.flags & 0x2) != 0x0) {
                abstractSerializedData.writeString(this.url);
            }
            if ((this.flags & 0x4) != 0x0) {
                abstractSerializedData.writeString(this.html);
            }
            abstractSerializedData.writeInt32(this.w);
            abstractSerializedData.writeInt32(this.h);
            this.caption.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_pageBlockEmbed_layer82 extends TL_pageBlockEmbed
    {
        public static int constructor = -840826671;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            final boolean b2 = true;
            super.full_width = ((flags & 0x1) != 0x0);
            super.allow_scrolling = ((super.flags & 0x8) != 0x0 && b2);
            if ((super.flags & 0x2) != 0x0) {
                super.url = abstractSerializedData.readString(b);
            }
            if ((super.flags & 0x4) != 0x0) {
                super.html = abstractSerializedData.readString(b);
            }
            if ((super.flags & 0x10) != 0x0) {
                super.poster_photo_id = abstractSerializedData.readInt64(b);
            }
            super.w = abstractSerializedData.readInt32(b);
            super.h = abstractSerializedData.readInt32(b);
            super.caption = new TL_pageCaption();
            super.caption.text = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.caption.credit = new TL_textEmpty();
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_pageBlockEmbed_layer82.constructor);
            int flags;
            if (super.full_width) {
                flags = (super.flags | 0x1);
            }
            else {
                flags = (super.flags & 0xFFFFFFFE);
            }
            super.flags = flags;
            int flags2;
            if (super.allow_scrolling) {
                flags2 = (super.flags | 0x8);
            }
            else {
                flags2 = (super.flags & 0xFFFFFFF7);
            }
            abstractSerializedData.writeInt32(super.flags = flags2);
            if ((super.flags & 0x2) != 0x0) {
                abstractSerializedData.writeString(super.url);
            }
            if ((super.flags & 0x4) != 0x0) {
                abstractSerializedData.writeString(super.html);
            }
            if ((super.flags & 0x10) != 0x0) {
                abstractSerializedData.writeInt64(super.poster_photo_id);
            }
            abstractSerializedData.writeInt32(super.w);
            abstractSerializedData.writeInt32(super.h);
            super.caption.text.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_pageBlockFooter extends PageBlock
    {
        public static int constructor = 1216809369;
        public RichText text;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.text = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_pageBlockFooter.constructor);
            this.text.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_pageBlockHeader extends PageBlock
    {
        public static int constructor = -1076861716;
        public RichText text;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.text = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_pageBlockHeader.constructor);
            this.text.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_pageBlockKicker extends PageBlock
    {
        public static int constructor = 504660880;
        public RichText text;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.text = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_pageBlockKicker.constructor);
            this.text.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_pageBlockList extends PageBlock
    {
        public static int constructor = -454524911;
        public ArrayList<PageListItem> items;
        public boolean ordered;
        
        public TL_pageBlockList() {
            this.items = new ArrayList<PageListItem>();
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final PageListItem tLdeserialize = PageListItem.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    this.items.add(tLdeserialize);
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_pageBlockList.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.items.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                this.items.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_pageBlockList_layer82 extends TL_pageBlockList
    {
        public static int constructor = 978896884;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.ordered = abstractSerializedData.readBool(b);
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final RichText tLdeserialize = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    final TL_pageListItemText e = new TL_pageListItemText();
                    e.text = tLdeserialize;
                    super.items.add(e);
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_pageBlockList_layer82.constructor);
            abstractSerializedData.writeBool(super.ordered);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.items.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                ((TL_pageListItemText)super.items.get(i)).text.serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_pageBlockMap extends PageBlock
    {
        public static int constructor = -1538310410;
        public TL_pageCaption caption;
        public GeoPoint geo;
        public int h;
        public int w;
        public int zoom;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.geo = GeoPoint.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            this.zoom = abstractSerializedData.readInt32(b);
            this.w = abstractSerializedData.readInt32(b);
            this.h = abstractSerializedData.readInt32(b);
            this.caption = TL_pageCaption.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_pageBlockMap.constructor);
            this.geo.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.zoom);
            abstractSerializedData.writeInt32(this.w);
            abstractSerializedData.writeInt32(this.h);
            this.caption.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_pageBlockOrderedList extends PageBlock
    {
        public static int constructor = -1702174239;
        public ArrayList<PageListOrderedItem> items;
        
        public TL_pageBlockOrderedList() {
            this.items = new ArrayList<PageListOrderedItem>();
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final PageListOrderedItem tLdeserialize = PageListOrderedItem.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    this.items.add(tLdeserialize);
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_pageBlockOrderedList.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.items.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                this.items.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_pageBlockParagraph extends PageBlock
    {
        public static int constructor = 1182402406;
        public RichText text;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.text = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_pageBlockParagraph.constructor);
            this.text.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_pageBlockPhoto extends PageBlock
    {
        public static int constructor = 391759200;
        public TL_pageCaption caption;
        public int flags;
        public long photo_id;
        public String url;
        public long webpage_id;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.flags = abstractSerializedData.readInt32(b);
            this.photo_id = abstractSerializedData.readInt64(b);
            this.caption = TL_pageCaption.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            if ((this.flags & 0x1) != 0x0) {
                this.url = abstractSerializedData.readString(b);
            }
            if ((this.flags & 0x1) != 0x0) {
                this.webpage_id = abstractSerializedData.readInt64(b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_pageBlockPhoto.constructor);
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt64(this.photo_id);
            this.caption.serializeToStream(abstractSerializedData);
            if ((this.flags & 0x1) != 0x0) {
                abstractSerializedData.writeString(this.url);
            }
            if ((this.flags & 0x1) != 0x0) {
                abstractSerializedData.writeInt64(this.webpage_id);
            }
        }
    }
    
    public static class TL_pageBlockPhoto_layer82 extends TL_pageBlockPhoto
    {
        public static int constructor = -372860542;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.photo_id = abstractSerializedData.readInt64(b);
            super.caption = new TL_pageCaption();
            super.caption.text = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.caption.credit = new TL_textEmpty();
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_pageBlockPhoto_layer82.constructor);
            abstractSerializedData.writeInt64(super.photo_id);
            super.caption.text.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_pageBlockPreformatted extends PageBlock
    {
        public static int constructor = -1066346178;
        public String language;
        public RichText text;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.text = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            this.language = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_pageBlockPreformatted.constructor);
            this.text.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(this.language);
        }
    }
    
    public static class TL_pageBlockPullquote extends PageBlock
    {
        public static int constructor = 1329878739;
        public RichText caption;
        public RichText text;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.text = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            this.caption = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_pageBlockPullquote.constructor);
            this.text.serializeToStream(abstractSerializedData);
            this.caption.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_pageBlockRelatedArticles extends PageBlock
    {
        public static int constructor = 370236054;
        public ArrayList<TL_pageRelatedArticle> articles;
        public RichText title;
        
        public TL_pageBlockRelatedArticles() {
            this.articles = new ArrayList<TL_pageRelatedArticle>();
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.title = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final TL_pageRelatedArticle tLdeserialize = TL_pageRelatedArticle.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    this.articles.add(tLdeserialize);
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_pageBlockRelatedArticles.constructor);
            this.title.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.articles.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                this.articles.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_pageBlockSlideshow extends PageBlock
    {
        public static int constructor = 52401552;
        public TL_pageCaption caption;
        public ArrayList<PageBlock> items;
        
        public TL_pageBlockSlideshow() {
            this.items = new ArrayList<PageBlock>();
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final PageBlock tLdeserialize = PageBlock.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    this.items.add(tLdeserialize);
                    ++i;
                }
                this.caption = TL_pageCaption.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_pageBlockSlideshow.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.items.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                this.items.get(i).serializeToStream(abstractSerializedData);
            }
            this.caption.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_pageBlockSlideshow_layer82 extends TL_pageBlockSlideshow
    {
        public static int constructor = 319588707;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final PageBlock tLdeserialize = PageBlock.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.items.add(tLdeserialize);
                    ++i;
                }
                super.caption = new TL_pageCaption();
                super.caption.text = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                super.caption.credit = new TL_textEmpty();
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_pageBlockSlideshow_layer82.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.items.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                super.items.get(i).serializeToStream(abstractSerializedData);
            }
            super.caption.text.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_pageBlockSubheader extends PageBlock
    {
        public static int constructor = -248793375;
        public RichText text;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.text = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_pageBlockSubheader.constructor);
            this.text.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_pageBlockSubtitle extends PageBlock
    {
        public static int constructor = -1879401953;
        public RichText text;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.text = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_pageBlockSubtitle.constructor);
            this.text.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_pageBlockTable extends PageBlock
    {
        public static int constructor = -1085412734;
        public boolean bordered;
        public int flags;
        public ArrayList<TL_pageTableRow> rows;
        public boolean striped;
        public RichText title;
        
        public TL_pageBlockTable() {
            this.rows = new ArrayList<TL_pageTableRow>();
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.flags = abstractSerializedData.readInt32(b);
            final int flags = this.flags;
            int i = 0;
            this.bordered = ((flags & 0x1) != 0x0);
            this.striped = ((this.flags & 0x2) != 0x0);
            this.title = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            final int int32 = abstractSerializedData.readInt32(b);
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final TL_pageTableRow tLdeserialize = TL_pageTableRow.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    this.rows.add(tLdeserialize);
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_pageBlockTable.constructor);
            int flags;
            if (this.bordered) {
                flags = (this.flags | 0x1);
            }
            else {
                flags = (this.flags & 0xFFFFFFFE);
            }
            this.flags = flags;
            int flags2;
            if (this.striped) {
                flags2 = (this.flags | 0x2);
            }
            else {
                flags2 = (this.flags & 0xFFFFFFFD);
            }
            abstractSerializedData.writeInt32(this.flags = flags2);
            this.title.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.rows.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                this.rows.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_pageBlockTitle extends PageBlock
    {
        public static int constructor = 1890305021;
        public RichText text;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.text = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_pageBlockTitle.constructor);
            this.text.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_pageBlockUnsupported extends PageBlock
    {
        public static int constructor = 324435594;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_pageBlockUnsupported.constructor);
        }
    }
    
    public static class TL_pageBlockVideo extends PageBlock
    {
        public static int constructor = 2089805750;
        public boolean autoplay;
        public TL_pageCaption caption;
        public int flags;
        public boolean loop;
        public long video_id;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.flags = abstractSerializedData.readInt32(b);
            final int flags = this.flags;
            final boolean b2 = true;
            this.autoplay = ((flags & 0x1) != 0x0);
            this.loop = ((this.flags & 0x2) != 0x0 && b2);
            this.video_id = abstractSerializedData.readInt64(b);
            this.caption = TL_pageCaption.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_pageBlockVideo.constructor);
            int flags;
            if (this.autoplay) {
                flags = (this.flags | 0x1);
            }
            else {
                flags = (this.flags & 0xFFFFFFFE);
            }
            this.flags = flags;
            int flags2;
            if (this.loop) {
                flags2 = (this.flags | 0x2);
            }
            else {
                flags2 = (this.flags & 0xFFFFFFFD);
            }
            abstractSerializedData.writeInt32(this.flags = flags2);
            abstractSerializedData.writeInt64(this.video_id);
            this.caption.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_pageBlockVideo_layer82 extends TL_pageBlockVideo
    {
        public static int constructor = -640214938;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            final boolean b2 = true;
            super.autoplay = ((flags & 0x1) != 0x0);
            super.loop = ((super.flags & 0x2) != 0x0 && b2);
            super.video_id = abstractSerializedData.readInt64(b);
            super.caption = new TL_pageCaption();
            super.caption.text = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.caption.credit = new TL_textEmpty();
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_pageBlockVideo_layer82.constructor);
            int flags;
            if (super.autoplay) {
                flags = (super.flags | 0x1);
            }
            else {
                flags = (super.flags & 0xFFFFFFFE);
            }
            super.flags = flags;
            int flags2;
            if (super.loop) {
                flags2 = (super.flags | 0x2);
            }
            else {
                flags2 = (super.flags & 0xFFFFFFFD);
            }
            abstractSerializedData.writeInt32(super.flags = flags2);
            abstractSerializedData.writeInt64(super.video_id);
            super.caption.text.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_pageCaption extends TLObject
    {
        public static int constructor = 1869903447;
        public RichText credit;
        public RichText text;
        
        public static TL_pageCaption TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_pageCaption.constructor == i) {
                final TL_pageCaption tl_pageCaption = new TL_pageCaption();
                tl_pageCaption.readParams(abstractSerializedData, b);
                return tl_pageCaption;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_pageCaption", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.text = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            this.credit = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_pageCaption.constructor);
            this.text.serializeToStream(abstractSerializedData);
            this.credit.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_pageFull_layer67 extends TL_page
    {
        public static int constructor = -677274263;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            final int int32 = abstractSerializedData.readInt32(b);
            final int n = 0;
            if (int32 != 481674261) {
                if (!b) {
                    return;
                }
                throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
            }
            else {
                for (int int33 = abstractSerializedData.readInt32(b), i = 0; i < int33; ++i) {
                    final PageBlock tLdeserialize = PageBlock.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.blocks.add(tLdeserialize);
                }
                final int int34 = abstractSerializedData.readInt32(b);
                if (int34 != 481674261) {
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int34));
                }
                else {
                    for (int int35 = abstractSerializedData.readInt32(b), j = 0; j < int35; ++j) {
                        final Photo tLdeserialize2 = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize2 == null) {
                            return;
                        }
                        super.photos.add(tLdeserialize2);
                    }
                    final int int36 = abstractSerializedData.readInt32(b);
                    if (int36 == 481674261) {
                        for (int int37 = abstractSerializedData.readInt32(b), k = n; k < int37; ++k) {
                            final Document tLdeserialize3 = Document.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                            if (tLdeserialize3 == null) {
                                return;
                            }
                            super.documents.add(tLdeserialize3);
                        }
                        return;
                    }
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int36));
                }
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_pageFull_layer67.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.blocks.size();
            abstractSerializedData.writeInt32(size);
            final int n = 0;
            for (int i = 0; i < size; ++i) {
                super.blocks.get(i).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size2 = super.photos.size();
            abstractSerializedData.writeInt32(size2);
            for (int j = 0; j < size2; ++j) {
                super.photos.get(j).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size3 = super.documents.size();
            abstractSerializedData.writeInt32(size3);
            for (int k = n; k < size3; ++k) {
                super.documents.get(k).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_pageFull_layer82 extends TL_page
    {
        public static int constructor = 1433323434;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            final int int32 = abstractSerializedData.readInt32(b);
            final int n = 0;
            if (int32 != 481674261) {
                if (!b) {
                    return;
                }
                throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
            }
            else {
                for (int int33 = abstractSerializedData.readInt32(b), i = 0; i < int33; ++i) {
                    final PageBlock tLdeserialize = PageBlock.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.blocks.add(tLdeserialize);
                }
                final int int34 = abstractSerializedData.readInt32(b);
                if (int34 != 481674261) {
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int34));
                }
                else {
                    for (int int35 = abstractSerializedData.readInt32(b), j = 0; j < int35; ++j) {
                        final Photo tLdeserialize2 = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize2 == null) {
                            return;
                        }
                        super.photos.add(tLdeserialize2);
                    }
                    final int int36 = abstractSerializedData.readInt32(b);
                    if (int36 == 481674261) {
                        for (int int37 = abstractSerializedData.readInt32(b), k = n; k < int37; ++k) {
                            final Document tLdeserialize3 = Document.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                            if (tLdeserialize3 == null) {
                                return;
                            }
                            super.documents.add(tLdeserialize3);
                        }
                        return;
                    }
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int36));
                }
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_pageFull_layer82.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.blocks.size();
            abstractSerializedData.writeInt32(size);
            final int n = 0;
            for (int i = 0; i < size; ++i) {
                super.blocks.get(i).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size2 = super.photos.size();
            abstractSerializedData.writeInt32(size2);
            for (int j = 0; j < size2; ++j) {
                super.photos.get(j).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size3 = super.documents.size();
            abstractSerializedData.writeInt32(size3);
            for (int k = n; k < size3; ++k) {
                super.documents.get(k).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_pageListItemBlocks extends PageListItem
    {
        public static int constructor = 635466748;
        public ArrayList<PageBlock> blocks;
        
        public TL_pageListItemBlocks() {
            this.blocks = new ArrayList<PageBlock>();
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final PageBlock tLdeserialize = PageBlock.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    this.blocks.add(tLdeserialize);
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_pageListItemBlocks.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.blocks.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                this.blocks.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_pageListItemText extends PageListItem
    {
        public static int constructor = -1188055347;
        public RichText text;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.text = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_pageListItemText.constructor);
            this.text.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_pageListOrderedItemBlocks extends PageListOrderedItem
    {
        public static int constructor = -1730311882;
        public ArrayList<PageBlock> blocks;
        public String num;
        
        public TL_pageListOrderedItemBlocks() {
            this.blocks = new ArrayList<PageBlock>();
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.num = abstractSerializedData.readString(b);
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final PageBlock tLdeserialize = PageBlock.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    this.blocks.add(tLdeserialize);
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_pageListOrderedItemBlocks.constructor);
            abstractSerializedData.writeString(this.num);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.blocks.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                this.blocks.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_pageListOrderedItemText extends PageListOrderedItem
    {
        public static int constructor = 1577484359;
        public String num;
        public RichText text;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.num = abstractSerializedData.readString(b);
            this.text = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_pageListOrderedItemText.constructor);
            abstractSerializedData.writeString(this.num);
            this.text.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_pagePart_layer67 extends TL_pagePart_layer82
    {
        public static int constructor = -1913754556;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            final int int32 = abstractSerializedData.readInt32(b);
            final int n = 0;
            if (int32 != 481674261) {
                if (!b) {
                    return;
                }
                throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
            }
            else {
                for (int int33 = abstractSerializedData.readInt32(b), i = 0; i < int33; ++i) {
                    final PageBlock tLdeserialize = PageBlock.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.blocks.add(tLdeserialize);
                }
                final int int34 = abstractSerializedData.readInt32(b);
                if (int34 != 481674261) {
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int34));
                }
                else {
                    for (int int35 = abstractSerializedData.readInt32(b), j = 0; j < int35; ++j) {
                        final Photo tLdeserialize2 = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize2 == null) {
                            return;
                        }
                        super.photos.add(tLdeserialize2);
                    }
                    final int int36 = abstractSerializedData.readInt32(b);
                    if (int36 == 481674261) {
                        for (int int37 = abstractSerializedData.readInt32(b), k = n; k < int37; ++k) {
                            final Document tLdeserialize3 = Document.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                            if (tLdeserialize3 == null) {
                                return;
                            }
                            super.documents.add(tLdeserialize3);
                        }
                        return;
                    }
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int36));
                }
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_pagePart_layer67.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.blocks.size();
            abstractSerializedData.writeInt32(size);
            final int n = 0;
            for (int i = 0; i < size; ++i) {
                super.blocks.get(i).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size2 = super.photos.size();
            abstractSerializedData.writeInt32(size2);
            for (int j = 0; j < size2; ++j) {
                super.photos.get(j).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size3 = super.documents.size();
            abstractSerializedData.writeInt32(size3);
            for (int k = n; k < size3; ++k) {
                super.documents.get(k).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_pagePart_layer82 extends Page
    {
        public static int constructor = -1908433218;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            final int int32 = abstractSerializedData.readInt32(b);
            final int n = 0;
            if (int32 != 481674261) {
                if (!b) {
                    return;
                }
                throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
            }
            else {
                for (int int33 = abstractSerializedData.readInt32(b), i = 0; i < int33; ++i) {
                    final PageBlock tLdeserialize = PageBlock.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.blocks.add(tLdeserialize);
                }
                final int int34 = abstractSerializedData.readInt32(b);
                if (int34 != 481674261) {
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int34));
                }
                else {
                    for (int int35 = abstractSerializedData.readInt32(b), j = 0; j < int35; ++j) {
                        final Photo tLdeserialize2 = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize2 == null) {
                            return;
                        }
                        super.photos.add(tLdeserialize2);
                    }
                    final int int36 = abstractSerializedData.readInt32(b);
                    if (int36 == 481674261) {
                        for (int int37 = abstractSerializedData.readInt32(b), k = n; k < int37; ++k) {
                            final Document tLdeserialize3 = Document.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                            if (tLdeserialize3 == null) {
                                return;
                            }
                            super.documents.add(tLdeserialize3);
                        }
                        return;
                    }
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int36));
                }
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_pagePart_layer82.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.blocks.size();
            abstractSerializedData.writeInt32(size);
            final int n = 0;
            for (int i = 0; i < size; ++i) {
                super.blocks.get(i).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size2 = super.photos.size();
            abstractSerializedData.writeInt32(size2);
            for (int j = 0; j < size2; ++j) {
                super.photos.get(j).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size3 = super.documents.size();
            abstractSerializedData.writeInt32(size3);
            for (int k = n; k < size3; ++k) {
                super.documents.get(k).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_pageRelatedArticle extends TLObject
    {
        public static int constructor = -1282352120;
        public String author;
        public String description;
        public int flags;
        public long photo_id;
        public int published_date;
        public String title;
        public String url;
        public long webpage_id;
        
        public static TL_pageRelatedArticle TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_pageRelatedArticle.constructor == i) {
                final TL_pageRelatedArticle tl_pageRelatedArticle = new TL_pageRelatedArticle();
                tl_pageRelatedArticle.readParams(abstractSerializedData, b);
                return tl_pageRelatedArticle;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_pageRelatedArticle", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.flags = abstractSerializedData.readInt32(b);
            this.url = abstractSerializedData.readString(b);
            this.webpage_id = abstractSerializedData.readInt64(b);
            if ((this.flags & 0x1) != 0x0) {
                this.title = abstractSerializedData.readString(b);
            }
            if ((this.flags & 0x2) != 0x0) {
                this.description = abstractSerializedData.readString(b);
            }
            if ((this.flags & 0x4) != 0x0) {
                this.photo_id = abstractSerializedData.readInt64(b);
            }
            if ((this.flags & 0x8) != 0x0) {
                this.author = abstractSerializedData.readString(b);
            }
            if ((this.flags & 0x10) != 0x0) {
                this.published_date = abstractSerializedData.readInt32(b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_pageRelatedArticle.constructor);
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeString(this.url);
            abstractSerializedData.writeInt64(this.webpage_id);
            if ((this.flags & 0x1) != 0x0) {
                abstractSerializedData.writeString(this.title);
            }
            if ((this.flags & 0x2) != 0x0) {
                abstractSerializedData.writeString(this.description);
            }
            if ((this.flags & 0x4) != 0x0) {
                abstractSerializedData.writeInt64(this.photo_id);
            }
            if ((this.flags & 0x8) != 0x0) {
                abstractSerializedData.writeString(this.author);
            }
            if ((this.flags & 0x10) != 0x0) {
                abstractSerializedData.writeInt32(this.published_date);
            }
        }
    }
    
    public static class TL_pageTableCell extends TLObject
    {
        public static int constructor = 878078826;
        public boolean align_center;
        public boolean align_right;
        public int colspan;
        public int flags;
        public boolean header;
        public int rowspan;
        public RichText text;
        public boolean valign_bottom;
        public boolean valign_middle;
        
        public static TL_pageTableCell TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_pageTableCell.constructor == i) {
                final TL_pageTableCell tl_pageTableCell = new TL_pageTableCell();
                tl_pageTableCell.readParams(abstractSerializedData, b);
                return tl_pageTableCell;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_pageTableCell", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.flags = abstractSerializedData.readInt32(b);
            final int flags = this.flags;
            final boolean b2 = true;
            this.header = ((flags & 0x1) != 0x0);
            this.align_center = ((this.flags & 0x8) != 0x0);
            this.align_right = ((this.flags & 0x10) != 0x0);
            this.valign_middle = ((this.flags & 0x20) != 0x0);
            this.valign_bottom = ((this.flags & 0x40) != 0x0 && b2);
            if ((this.flags & 0x80) != 0x0) {
                this.text = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            if ((this.flags & 0x2) != 0x0) {
                this.colspan = abstractSerializedData.readInt32(b);
            }
            if ((this.flags & 0x4) != 0x0) {
                this.rowspan = abstractSerializedData.readInt32(b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_pageTableCell.constructor);
            int flags;
            if (this.header) {
                flags = (this.flags | 0x1);
            }
            else {
                flags = (this.flags & 0xFFFFFFFE);
            }
            this.flags = flags;
            int flags2;
            if (this.align_center) {
                flags2 = (this.flags | 0x8);
            }
            else {
                flags2 = (this.flags & 0xFFFFFFF7);
            }
            this.flags = flags2;
            int flags3;
            if (this.align_right) {
                flags3 = (this.flags | 0x10);
            }
            else {
                flags3 = (this.flags & 0xFFFFFFEF);
            }
            this.flags = flags3;
            int flags4;
            if (this.valign_middle) {
                flags4 = (this.flags | 0x20);
            }
            else {
                flags4 = (this.flags & 0xFFFFFFDF);
            }
            this.flags = flags4;
            int flags5;
            if (this.valign_bottom) {
                flags5 = (this.flags | 0x40);
            }
            else {
                flags5 = (this.flags & 0xFFFFFFBF);
            }
            abstractSerializedData.writeInt32(this.flags = flags5);
            if ((this.flags & 0x80) != 0x0) {
                this.text.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 0x2) != 0x0) {
                abstractSerializedData.writeInt32(this.colspan);
            }
            if ((this.flags & 0x4) != 0x0) {
                abstractSerializedData.writeInt32(this.rowspan);
            }
        }
    }
    
    public static class TL_pageTableRow extends TLObject
    {
        public static int constructor = -524237339;
        public ArrayList<TL_pageTableCell> cells;
        
        public TL_pageTableRow() {
            this.cells = new ArrayList<TL_pageTableCell>();
        }
        
        public static TL_pageTableRow TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_pageTableRow.constructor == i) {
                final TL_pageTableRow tl_pageTableRow = new TL_pageTableRow();
                tl_pageTableRow.readParams(abstractSerializedData, b);
                return tl_pageTableRow;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_pageTableRow", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final TL_pageTableCell tLdeserialize = TL_pageTableCell.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    this.cells.add(tLdeserialize);
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_pageTableRow.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.cells.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                this.cells.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow extends PasswordKdfAlgo
    {
        public static int constructor = 982592842;
        public int g;
        public byte[] p;
        public byte[] salt1;
        public byte[] salt2;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.salt1 = abstractSerializedData.readByteArray(b);
            this.salt2 = abstractSerializedData.readByteArray(b);
            this.g = abstractSerializedData.readInt32(b);
            this.p = abstractSerializedData.readByteArray(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_passwordKdfAlgoSHA256SHA256PBKDF2HMACSHA512iter100000SHA256ModPow.constructor);
            abstractSerializedData.writeByteArray(this.salt1);
            abstractSerializedData.writeByteArray(this.salt2);
            abstractSerializedData.writeInt32(this.g);
            abstractSerializedData.writeByteArray(this.p);
        }
    }
    
    public static class TL_passwordKdfAlgoUnknown extends PasswordKdfAlgo
    {
        public static int constructor = -732254058;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_passwordKdfAlgoUnknown.constructor);
        }
    }
    
    public static class TL_paymentRequestedInfo extends TLObject
    {
        public static int constructor = -1868808300;
        public String email;
        public int flags;
        public String name;
        public String phone;
        public TL_postAddress shipping_address;
        
        public static TL_paymentRequestedInfo TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_paymentRequestedInfo.constructor == i) {
                final TL_paymentRequestedInfo tl_paymentRequestedInfo = new TL_paymentRequestedInfo();
                tl_paymentRequestedInfo.readParams(abstractSerializedData, b);
                return tl_paymentRequestedInfo;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_paymentRequestedInfo", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.flags = abstractSerializedData.readInt32(b);
            if ((this.flags & 0x1) != 0x0) {
                this.name = abstractSerializedData.readString(b);
            }
            if ((this.flags & 0x2) != 0x0) {
                this.phone = abstractSerializedData.readString(b);
            }
            if ((this.flags & 0x4) != 0x0) {
                this.email = abstractSerializedData.readString(b);
            }
            if ((this.flags & 0x8) != 0x0) {
                this.shipping_address = TL_postAddress.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_paymentRequestedInfo.constructor);
            abstractSerializedData.writeInt32(this.flags);
            if ((this.flags & 0x1) != 0x0) {
                abstractSerializedData.writeString(this.name);
            }
            if ((this.flags & 0x2) != 0x0) {
                abstractSerializedData.writeString(this.phone);
            }
            if ((this.flags & 0x4) != 0x0) {
                abstractSerializedData.writeString(this.email);
            }
            if ((this.flags & 0x8) != 0x0) {
                this.shipping_address.serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_paymentSavedCredentialsCard extends TLObject
    {
        public static int constructor = -842892769;
        public String id;
        public String title;
        
        public static TL_paymentSavedCredentialsCard TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_paymentSavedCredentialsCard.constructor == i) {
                final TL_paymentSavedCredentialsCard tl_paymentSavedCredentialsCard = new TL_paymentSavedCredentialsCard();
                tl_paymentSavedCredentialsCard.readParams(abstractSerializedData, b);
                return tl_paymentSavedCredentialsCard;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_paymentSavedCredentialsCard", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.id = abstractSerializedData.readString(b);
            this.title = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_paymentSavedCredentialsCard.constructor);
            abstractSerializedData.writeString(this.id);
            abstractSerializedData.writeString(this.title);
        }
    }
    
    public static class TL_payments_clearSavedInfo extends TLObject
    {
        public static int constructor = -667062079;
        public boolean credentials;
        public int flags;
        public boolean info;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_payments_clearSavedInfo.constructor);
            int flags;
            if (this.credentials) {
                flags = (this.flags | 0x1);
            }
            else {
                flags = (this.flags & 0xFFFFFFFE);
            }
            this.flags = flags;
            int flags2;
            if (this.info) {
                flags2 = (this.flags | 0x2);
            }
            else {
                flags2 = (this.flags & 0xFFFFFFFD);
            }
            abstractSerializedData.writeInt32(this.flags = flags2);
        }
    }
    
    public static class TL_payments_getPaymentForm extends TLObject
    {
        public static int constructor = -1712285883;
        public int msg_id;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_payments_paymentForm.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_payments_getPaymentForm.constructor);
            abstractSerializedData.writeInt32(this.msg_id);
        }
    }
    
    public static class TL_payments_getPaymentReceipt extends TLObject
    {
        public static int constructor = -1601001088;
        public int msg_id;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_payments_paymentReceipt.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_payments_getPaymentReceipt.constructor);
            abstractSerializedData.writeInt32(this.msg_id);
        }
    }
    
    public static class TL_payments_getSavedInfo extends TLObject
    {
        public static int constructor = 578650699;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_payments_savedInfo.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_payments_getSavedInfo.constructor);
        }
    }
    
    public static class TL_payments_paymentForm extends TLObject
    {
        public static int constructor = 1062645411;
        public int bot_id;
        public boolean can_save_credentials;
        public int flags;
        public TL_invoice invoice;
        public TL_dataJSON native_params;
        public String native_provider;
        public boolean password_missing;
        public int provider_id;
        public TL_paymentSavedCredentialsCard saved_credentials;
        public TL_paymentRequestedInfo saved_info;
        public String url;
        public ArrayList<User> users;
        
        public TL_payments_paymentForm() {
            this.users = new ArrayList<User>();
        }
        
        public static TL_payments_paymentForm TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_payments_paymentForm.constructor == i) {
                final TL_payments_paymentForm tl_payments_paymentForm = new TL_payments_paymentForm();
                tl_payments_paymentForm.readParams(abstractSerializedData, b);
                return tl_payments_paymentForm;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_payments_paymentForm", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.flags = abstractSerializedData.readInt32(b);
            final int flags = this.flags;
            int i = 0;
            this.can_save_credentials = ((flags & 0x4) != 0x0);
            this.password_missing = ((this.flags & 0x8) != 0x0);
            this.bot_id = abstractSerializedData.readInt32(b);
            this.invoice = TL_invoice.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            this.provider_id = abstractSerializedData.readInt32(b);
            this.url = abstractSerializedData.readString(b);
            if ((this.flags & 0x10) != 0x0) {
                this.native_provider = abstractSerializedData.readString(b);
            }
            if ((this.flags & 0x10) != 0x0) {
                this.native_params = TL_dataJSON.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            if ((this.flags & 0x1) != 0x0) {
                this.saved_info = TL_paymentRequestedInfo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            if ((this.flags & 0x2) != 0x0) {
                this.saved_credentials = TL_paymentSavedCredentialsCard.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            final int int32 = abstractSerializedData.readInt32(b);
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final User tLdeserialize = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    this.users.add(tLdeserialize);
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_payments_paymentForm.constructor);
            int flags;
            if (this.can_save_credentials) {
                flags = (this.flags | 0x4);
            }
            else {
                flags = (this.flags & 0xFFFFFFFB);
            }
            this.flags = flags;
            int flags2;
            if (this.password_missing) {
                flags2 = (this.flags | 0x8);
            }
            else {
                flags2 = (this.flags & 0xFFFFFFF7);
            }
            abstractSerializedData.writeInt32(this.flags = flags2);
            abstractSerializedData.writeInt32(this.bot_id);
            this.invoice.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.provider_id);
            abstractSerializedData.writeString(this.url);
            if ((this.flags & 0x10) != 0x0) {
                abstractSerializedData.writeString(this.native_provider);
            }
            if ((this.flags & 0x10) != 0x0) {
                this.native_params.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 0x1) != 0x0) {
                this.saved_info.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 0x2) != 0x0) {
                this.saved_credentials.serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size = this.users.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                this.users.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_payments_paymentReceipt extends TLObject
    {
        public static int constructor = 1342771681;
        public int bot_id;
        public String credentials_title;
        public String currency;
        public int date;
        public int flags;
        public TL_paymentRequestedInfo info;
        public TL_invoice invoice;
        public int provider_id;
        public TL_shippingOption shipping;
        public long total_amount;
        public ArrayList<User> users;
        
        public TL_payments_paymentReceipt() {
            this.users = new ArrayList<User>();
        }
        
        public static TL_payments_paymentReceipt TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_payments_paymentReceipt.constructor == i) {
                final TL_payments_paymentReceipt tl_payments_paymentReceipt = new TL_payments_paymentReceipt();
                tl_payments_paymentReceipt.readParams(abstractSerializedData, b);
                return tl_payments_paymentReceipt;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_payments_paymentReceipt", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.flags = abstractSerializedData.readInt32(b);
            this.date = abstractSerializedData.readInt32(b);
            this.bot_id = abstractSerializedData.readInt32(b);
            this.invoice = TL_invoice.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            this.provider_id = abstractSerializedData.readInt32(b);
            if ((this.flags & 0x1) != 0x0) {
                this.info = TL_paymentRequestedInfo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            if ((this.flags & 0x2) != 0x0) {
                this.shipping = TL_shippingOption.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            this.currency = abstractSerializedData.readString(b);
            this.total_amount = abstractSerializedData.readInt64(b);
            this.credentials_title = abstractSerializedData.readString(b);
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final User tLdeserialize = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    this.users.add(tLdeserialize);
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_payments_paymentReceipt.constructor);
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeInt32(this.bot_id);
            this.invoice.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.provider_id);
            if ((this.flags & 0x1) != 0x0) {
                this.info.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 0x2) != 0x0) {
                this.shipping.serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeString(this.currency);
            abstractSerializedData.writeInt64(this.total_amount);
            abstractSerializedData.writeString(this.credentials_title);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.users.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                this.users.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_payments_paymentResult extends payments_PaymentResult
    {
        public static int constructor = 1314881805;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.updates = Updates.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_payments_paymentResult.constructor);
            super.updates.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_payments_paymentVerficationNeeded extends payments_PaymentResult
    {
        public static int constructor = 1800845601;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.url = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_payments_paymentVerficationNeeded.constructor);
            abstractSerializedData.writeString(super.url);
        }
    }
    
    public static class TL_payments_savedInfo extends TLObject
    {
        public static int constructor = -74456004;
        public int flags;
        public boolean has_saved_credentials;
        public TL_paymentRequestedInfo saved_info;
        
        public static TL_payments_savedInfo TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_payments_savedInfo.constructor == i) {
                final TL_payments_savedInfo tl_payments_savedInfo = new TL_payments_savedInfo();
                tl_payments_savedInfo.readParams(abstractSerializedData, b);
                return tl_payments_savedInfo;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_payments_savedInfo", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.flags = abstractSerializedData.readInt32(b);
            this.has_saved_credentials = ((this.flags & 0x2) != 0x0);
            if ((this.flags & 0x1) != 0x0) {
                this.saved_info = TL_paymentRequestedInfo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_payments_savedInfo.constructor);
            int flags;
            if (this.has_saved_credentials) {
                flags = (this.flags | 0x2);
            }
            else {
                flags = (this.flags & 0xFFFFFFFD);
            }
            abstractSerializedData.writeInt32(this.flags = flags);
            if ((this.flags & 0x1) != 0x0) {
                this.saved_info.serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_payments_sendPaymentForm extends TLObject
    {
        public static int constructor = 730364339;
        public InputPaymentCredentials credentials;
        public int flags;
        public int msg_id;
        public String requested_info_id;
        public String shipping_option_id;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return payments_PaymentResult.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_payments_sendPaymentForm.constructor);
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.msg_id);
            if ((this.flags & 0x1) != 0x0) {
                abstractSerializedData.writeString(this.requested_info_id);
            }
            if ((this.flags & 0x2) != 0x0) {
                abstractSerializedData.writeString(this.shipping_option_id);
            }
            this.credentials.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_payments_validateRequestedInfo extends TLObject
    {
        public static int constructor = 1997180532;
        public int flags;
        public TL_paymentRequestedInfo info;
        public int msg_id;
        public boolean save;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_payments_validatedRequestedInfo.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_payments_validateRequestedInfo.constructor);
            int flags;
            if (this.save) {
                flags = (this.flags | 0x1);
            }
            else {
                flags = (this.flags & 0xFFFFFFFE);
            }
            abstractSerializedData.writeInt32(this.flags = flags);
            abstractSerializedData.writeInt32(this.msg_id);
            this.info.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_payments_validatedRequestedInfo extends TLObject
    {
        public static int constructor = -784000893;
        public int flags;
        public String id;
        public ArrayList<TL_shippingOption> shipping_options;
        
        public TL_payments_validatedRequestedInfo() {
            this.shipping_options = new ArrayList<TL_shippingOption>();
        }
        
        public static TL_payments_validatedRequestedInfo TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_payments_validatedRequestedInfo.constructor == i) {
                final TL_payments_validatedRequestedInfo tl_payments_validatedRequestedInfo = new TL_payments_validatedRequestedInfo();
                tl_payments_validatedRequestedInfo.readParams(abstractSerializedData, b);
                return tl_payments_validatedRequestedInfo;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_payments_validatedRequestedInfo", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.flags = abstractSerializedData.readInt32(b);
            if ((this.flags & 0x1) != 0x0) {
                this.id = abstractSerializedData.readString(b);
            }
            if ((this.flags & 0x2) != 0x0) {
                final int int32 = abstractSerializedData.readInt32(b);
                int i = 0;
                if (int32 != 481674261) {
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
                }
                else {
                    while (i < abstractSerializedData.readInt32(b)) {
                        final TL_shippingOption tLdeserialize = TL_shippingOption.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize == null) {
                            return;
                        }
                        this.shipping_options.add(tLdeserialize);
                        ++i;
                    }
                }
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_payments_validatedRequestedInfo.constructor);
            abstractSerializedData.writeInt32(this.flags);
            if ((this.flags & 0x1) != 0x0) {
                abstractSerializedData.writeString(this.id);
            }
            if ((this.flags & 0x2) != 0x0) {
                abstractSerializedData.writeInt32(481674261);
                final int size = this.shipping_options.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; ++i) {
                    this.shipping_options.get(i).serializeToStream(abstractSerializedData);
                }
            }
        }
    }
    
    public static class TL_peerChannel extends Peer
    {
        public static int constructor = -1109531342;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.channel_id = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_peerChannel.constructor);
            abstractSerializedData.writeInt32(super.channel_id);
        }
    }
    
    public static class TL_peerChat extends Peer
    {
        public static int constructor = -1160714821;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.chat_id = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_peerChat.constructor);
            abstractSerializedData.writeInt32(super.chat_id);
        }
    }
    
    public static class TL_peerNotifySettings extends PeerNotifySettings
    {
        public static int constructor = -1353671392;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            if ((super.flags & 0x1) != 0x0) {
                super.show_previews = abstractSerializedData.readBool(b);
            }
            if ((super.flags & 0x2) != 0x0) {
                super.silent = abstractSerializedData.readBool(b);
            }
            if ((super.flags & 0x4) != 0x0) {
                super.mute_until = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x8) != 0x0) {
                super.sound = abstractSerializedData.readString(b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_peerNotifySettings.constructor);
            abstractSerializedData.writeInt32(super.flags);
            if ((super.flags & 0x1) != 0x0) {
                abstractSerializedData.writeBool(super.show_previews);
            }
            if ((super.flags & 0x2) != 0x0) {
                abstractSerializedData.writeBool(super.silent);
            }
            if ((super.flags & 0x4) != 0x0) {
                abstractSerializedData.writeInt32(super.mute_until);
            }
            if ((super.flags & 0x8) != 0x0) {
                abstractSerializedData.writeString(super.sound);
            }
        }
    }
    
    public static class TL_peerNotifySettingsEmpty_layer77 extends PeerNotifySettings
    {
        public static int constructor = 1889961234;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_peerNotifySettingsEmpty_layer77.constructor);
        }
    }
    
    public static class TL_peerNotifySettings_layer47 extends TL_peerNotifySettings
    {
        public static int constructor = -1923214866;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.mute_until = abstractSerializedData.readInt32(b);
            super.sound = abstractSerializedData.readString(b);
            super.show_previews = abstractSerializedData.readBool(b);
            super.events_mask = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_peerNotifySettings_layer47.constructor);
            abstractSerializedData.writeInt32(super.mute_until);
            abstractSerializedData.writeString(super.sound);
            abstractSerializedData.writeBool(super.show_previews);
            abstractSerializedData.writeInt32(super.events_mask);
        }
    }
    
    public static class TL_peerNotifySettings_layer77 extends TL_peerNotifySettings
    {
        public static int constructor = -1697798976;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            final boolean b2 = true;
            super.show_previews = ((flags & 0x1) != 0x0);
            super.silent = ((super.flags & 0x2) != 0x0 && b2);
            super.mute_until = abstractSerializedData.readInt32(b);
            super.sound = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_peerNotifySettings_layer77.constructor);
            int flags;
            if (super.show_previews) {
                flags = (super.flags | 0x1);
            }
            else {
                flags = (super.flags & 0xFFFFFFFE);
            }
            super.flags = flags;
            int flags2;
            if (super.silent) {
                flags2 = (super.flags | 0x2);
            }
            else {
                flags2 = (super.flags & 0xFFFFFFFD);
            }
            abstractSerializedData.writeInt32(super.flags = flags2);
            abstractSerializedData.writeInt32(super.mute_until);
            abstractSerializedData.writeString(super.sound);
        }
    }
    
    public static class TL_peerSettings extends TLObject
    {
        public static int constructor = -2122045747;
        public int flags;
        public boolean report_spam;
        
        public static TL_peerSettings TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_peerSettings.constructor == i) {
                final TL_peerSettings tl_peerSettings = new TL_peerSettings();
                tl_peerSettings.readParams(abstractSerializedData, b);
                return tl_peerSettings;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_peerSettings", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.flags = abstractSerializedData.readInt32(b);
            final int flags = this.flags;
            boolean report_spam = true;
            if ((flags & 0x1) == 0x0) {
                report_spam = false;
            }
            this.report_spam = report_spam;
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_peerSettings.constructor);
            int flags;
            if (this.report_spam) {
                flags = (this.flags | 0x1);
            }
            else {
                flags = (this.flags & 0xFFFFFFFE);
            }
            abstractSerializedData.writeInt32(this.flags = flags);
        }
    }
    
    public static class TL_peerUser extends Peer
    {
        public static int constructor = -1649296275;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.user_id = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_peerUser.constructor);
            abstractSerializedData.writeInt32(super.user_id);
        }
    }
    
    public static class TL_phoneCall extends PhoneCall
    {
        public static int constructor = -2025673089;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            int i = 0;
            super.p2p_allowed = ((flags & 0x20) != 0x0);
            super.id = abstractSerializedData.readInt64(b);
            super.access_hash = abstractSerializedData.readInt64(b);
            super.date = abstractSerializedData.readInt32(b);
            super.admin_id = abstractSerializedData.readInt32(b);
            super.participant_id = abstractSerializedData.readInt32(b);
            super.g_a_or_b = abstractSerializedData.readByteArray(b);
            super.key_fingerprint = abstractSerializedData.readInt64(b);
            super.protocol = TL_phoneCallProtocol.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            final int int32 = abstractSerializedData.readInt32(b);
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final TL_phoneConnection tLdeserialize = TL_phoneConnection.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.connections.add(tLdeserialize);
                    ++i;
                }
                super.start_date = abstractSerializedData.readInt32(b);
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_phoneCall.constructor);
            int flags;
            if (super.p2p_allowed) {
                flags = (super.flags | 0x20);
            }
            else {
                flags = (super.flags & 0xFFFFFFDF);
            }
            abstractSerializedData.writeInt32(super.flags = flags);
            abstractSerializedData.writeInt64(super.id);
            abstractSerializedData.writeInt64(super.access_hash);
            abstractSerializedData.writeInt32(super.date);
            abstractSerializedData.writeInt32(super.admin_id);
            abstractSerializedData.writeInt32(super.participant_id);
            abstractSerializedData.writeByteArray(super.g_a_or_b);
            abstractSerializedData.writeInt64(super.key_fingerprint);
            super.protocol.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.connections.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                super.connections.get(i).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(super.start_date);
        }
    }
    
    public static class TL_phoneCallAccepted extends PhoneCall
    {
        public static int constructor = -1719909046;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            super.video = ((super.flags & 0x20) != 0x0);
            super.id = abstractSerializedData.readInt64(b);
            super.access_hash = abstractSerializedData.readInt64(b);
            super.date = abstractSerializedData.readInt32(b);
            super.admin_id = abstractSerializedData.readInt32(b);
            super.participant_id = abstractSerializedData.readInt32(b);
            super.g_b = abstractSerializedData.readByteArray(b);
            super.protocol = TL_phoneCallProtocol.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_phoneCallAccepted.constructor);
            int flags;
            if (super.video) {
                flags = (super.flags | 0x20);
            }
            else {
                flags = (super.flags & 0xFFFFFFDF);
            }
            abstractSerializedData.writeInt32(super.flags = flags);
            abstractSerializedData.writeInt64(super.id);
            abstractSerializedData.writeInt64(super.access_hash);
            abstractSerializedData.writeInt32(super.date);
            abstractSerializedData.writeInt32(super.admin_id);
            abstractSerializedData.writeInt32(super.participant_id);
            abstractSerializedData.writeByteArray(super.g_b);
            super.protocol.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_phoneCallDiscardReasonAllowGroupCall extends PhoneCallDiscardReason
    {
        public static int constructor = -1344096199;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.encrypted_key = abstractSerializedData.readByteArray(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_phoneCallDiscardReasonAllowGroupCall.constructor);
            abstractSerializedData.writeByteArray(super.encrypted_key);
        }
    }
    
    public static class TL_phoneCallDiscardReasonBusy extends PhoneCallDiscardReason
    {
        public static int constructor = -84416311;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_phoneCallDiscardReasonBusy.constructor);
        }
    }
    
    public static class TL_phoneCallDiscardReasonDisconnect extends PhoneCallDiscardReason
    {
        public static int constructor = -527056480;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_phoneCallDiscardReasonDisconnect.constructor);
        }
    }
    
    public static class TL_phoneCallDiscardReasonHangup extends PhoneCallDiscardReason
    {
        public static int constructor = 1471006352;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_phoneCallDiscardReasonHangup.constructor);
        }
    }
    
    public static class TL_phoneCallDiscardReasonMissed extends PhoneCallDiscardReason
    {
        public static int constructor = -2048646399;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_phoneCallDiscardReasonMissed.constructor);
        }
    }
    
    public static class TL_phoneCallDiscarded extends PhoneCall
    {
        public static int constructor = 1355435489;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            final boolean b2 = false;
            super.need_rating = ((flags & 0x4) != 0x0);
            super.need_debug = ((super.flags & 0x8) != 0x0);
            boolean video = b2;
            if ((super.flags & 0x20) != 0x0) {
                video = true;
            }
            super.video = video;
            super.id = abstractSerializedData.readInt64(b);
            if ((super.flags & 0x1) != 0x0) {
                super.reason = PhoneCallDiscardReason.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            if ((super.flags & 0x2) != 0x0) {
                super.duration = abstractSerializedData.readInt32(b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_phoneCallDiscarded.constructor);
            int flags;
            if (super.need_rating) {
                flags = (super.flags | 0x4);
            }
            else {
                flags = (super.flags & 0xFFFFFFFB);
            }
            super.flags = flags;
            int flags2;
            if (super.need_debug) {
                flags2 = (super.flags | 0x8);
            }
            else {
                flags2 = (super.flags & 0xFFFFFFF7);
            }
            super.flags = flags2;
            int flags3;
            if (super.video) {
                flags3 = (super.flags | 0x20);
            }
            else {
                flags3 = (super.flags & 0xFFFFFFDF);
            }
            abstractSerializedData.writeInt32(super.flags = flags3);
            abstractSerializedData.writeInt64(super.id);
            if ((super.flags & 0x1) != 0x0) {
                super.reason.serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x2) != 0x0) {
                abstractSerializedData.writeInt32(super.duration);
            }
        }
    }
    
    public static class TL_phoneCallEmpty extends PhoneCall
    {
        public static int constructor = 1399245077;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt64(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_phoneCallEmpty.constructor);
            abstractSerializedData.writeInt64(super.id);
        }
    }
    
    public static class TL_phoneCallProtocol extends TLObject
    {
        public static int constructor = -1564789301;
        public int flags;
        public int max_layer;
        public int min_layer;
        public boolean udp_p2p;
        public boolean udp_reflector;
        
        public static TL_phoneCallProtocol TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_phoneCallProtocol.constructor == i) {
                final TL_phoneCallProtocol tl_phoneCallProtocol = new TL_phoneCallProtocol();
                tl_phoneCallProtocol.readParams(abstractSerializedData, b);
                return tl_phoneCallProtocol;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_phoneCallProtocol", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.flags = abstractSerializedData.readInt32(b);
            final int flags = this.flags;
            final boolean b2 = true;
            this.udp_p2p = ((flags & 0x1) != 0x0);
            this.udp_reflector = ((this.flags & 0x2) != 0x0 && b2);
            this.min_layer = abstractSerializedData.readInt32(b);
            this.max_layer = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_phoneCallProtocol.constructor);
            int flags;
            if (this.udp_p2p) {
                flags = (this.flags | 0x1);
            }
            else {
                flags = (this.flags & 0xFFFFFFFE);
            }
            this.flags = flags;
            int flags2;
            if (this.udp_reflector) {
                flags2 = (this.flags | 0x2);
            }
            else {
                flags2 = (this.flags & 0xFFFFFFFD);
            }
            abstractSerializedData.writeInt32(this.flags = flags2);
            abstractSerializedData.writeInt32(this.min_layer);
            abstractSerializedData.writeInt32(this.max_layer);
        }
    }
    
    public static class TL_phoneCallRequested extends PhoneCall
    {
        public static int constructor = -2014659757;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            super.video = ((super.flags & 0x20) != 0x0);
            super.id = abstractSerializedData.readInt64(b);
            super.access_hash = abstractSerializedData.readInt64(b);
            super.date = abstractSerializedData.readInt32(b);
            super.admin_id = abstractSerializedData.readInt32(b);
            super.participant_id = abstractSerializedData.readInt32(b);
            super.g_a_hash = abstractSerializedData.readByteArray(b);
            super.protocol = TL_phoneCallProtocol.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_phoneCallRequested.constructor);
            int flags;
            if (super.video) {
                flags = (super.flags | 0x20);
            }
            else {
                flags = (super.flags & 0xFFFFFFDF);
            }
            abstractSerializedData.writeInt32(super.flags = flags);
            abstractSerializedData.writeInt64(super.id);
            abstractSerializedData.writeInt64(super.access_hash);
            abstractSerializedData.writeInt32(super.date);
            abstractSerializedData.writeInt32(super.admin_id);
            abstractSerializedData.writeInt32(super.participant_id);
            abstractSerializedData.writeByteArray(super.g_a_hash);
            super.protocol.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_phoneCallWaiting extends PhoneCall
    {
        public static int constructor = 462375633;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            super.video = ((super.flags & 0x20) != 0x0);
            super.id = abstractSerializedData.readInt64(b);
            super.access_hash = abstractSerializedData.readInt64(b);
            super.date = abstractSerializedData.readInt32(b);
            super.admin_id = abstractSerializedData.readInt32(b);
            super.participant_id = abstractSerializedData.readInt32(b);
            super.protocol = TL_phoneCallProtocol.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            if ((super.flags & 0x1) != 0x0) {
                super.receive_date = abstractSerializedData.readInt32(b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_phoneCallWaiting.constructor);
            int flags;
            if (super.video) {
                flags = (super.flags | 0x20);
            }
            else {
                flags = (super.flags & 0xFFFFFFDF);
            }
            abstractSerializedData.writeInt32(super.flags = flags);
            abstractSerializedData.writeInt64(super.id);
            abstractSerializedData.writeInt64(super.access_hash);
            abstractSerializedData.writeInt32(super.date);
            abstractSerializedData.writeInt32(super.admin_id);
            abstractSerializedData.writeInt32(super.participant_id);
            super.protocol.serializeToStream(abstractSerializedData);
            if ((super.flags & 0x1) != 0x0) {
                abstractSerializedData.writeInt32(super.receive_date);
            }
        }
    }
    
    public static class TL_phoneConnection extends TLObject
    {
        public static int constructor = -1655957568;
        public long id;
        public String ip;
        public String ipv6;
        public byte[] peer_tag;
        public int port;
        
        public static TL_phoneConnection TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_phoneConnection.constructor == i) {
                final TL_phoneConnection tl_phoneConnection = new TL_phoneConnection();
                tl_phoneConnection.readParams(abstractSerializedData, b);
                return tl_phoneConnection;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_phoneConnection", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.id = abstractSerializedData.readInt64(b);
            this.ip = abstractSerializedData.readString(b);
            this.ipv6 = abstractSerializedData.readString(b);
            this.port = abstractSerializedData.readInt32(b);
            this.peer_tag = abstractSerializedData.readByteArray(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_phoneConnection.constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeString(this.ip);
            abstractSerializedData.writeString(this.ipv6);
            abstractSerializedData.writeInt32(this.port);
            abstractSerializedData.writeByteArray(this.peer_tag);
        }
    }
    
    public static class TL_phone_acceptCall extends TLObject
    {
        public static int constructor = 1003664544;
        public byte[] g_b;
        public TL_inputPhoneCall peer;
        public TL_phoneCallProtocol protocol;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_phone_phoneCall.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_phone_acceptCall.constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeByteArray(this.g_b);
            this.protocol.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_phone_confirmCall extends TLObject
    {
        public static int constructor = 788404002;
        public byte[] g_a;
        public long key_fingerprint;
        public TL_inputPhoneCall peer;
        public TL_phoneCallProtocol protocol;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_phone_phoneCall.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_phone_confirmCall.constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeByteArray(this.g_a);
            abstractSerializedData.writeInt64(this.key_fingerprint);
            this.protocol.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_phone_createGroupCall extends TLObject
    {
        public static int constructor = -2063276618;
        public InputChannel channel;
        public byte[] encryption_key;
        public int flags;
        public long key_fingerprint;
        public TL_phoneCallProtocol protocol;
        public int random_id;
        public byte[] streams;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Updates.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_phone_createGroupCall.constructor);
            abstractSerializedData.writeInt32(this.flags);
            this.channel.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.random_id);
            this.protocol.serializeToStream(abstractSerializedData);
            if ((this.flags & 0x1) != 0x0) {
                abstractSerializedData.writeByteArray(this.encryption_key);
            }
            abstractSerializedData.writeInt64(this.key_fingerprint);
            abstractSerializedData.writeByteArray(this.streams);
        }
    }
    
    public static class TL_phone_discardCall extends TLObject
    {
        public static int constructor = -1295269440;
        public long connection_id;
        public int duration;
        public int flags;
        public TL_inputPhoneCall peer;
        public PhoneCallDiscardReason reason;
        public boolean video;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Updates.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_phone_discardCall.constructor);
            int flags;
            if (this.video) {
                flags = (this.flags | 0x1);
            }
            else {
                flags = (this.flags & 0xFFFFFFFE);
            }
            abstractSerializedData.writeInt32(this.flags = flags);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.duration);
            this.reason.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt64(this.connection_id);
        }
    }
    
    public static class TL_phone_discardGroupCall extends TLObject
    {
        public static int constructor = 2054648117;
        public TL_inputGroupCall call;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Updates.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_phone_discardGroupCall.constructor);
            this.call.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_phone_editGroupCallMember extends TLObject
    {
        public static int constructor = 1181064164;
        public TL_inputGroupCall call;
        public int flags;
        public boolean kicked;
        public boolean readonly;
        public byte[] streams;
        public InputUser user_id;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Updates.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_phone_editGroupCallMember.constructor);
            int flags;
            if (this.readonly) {
                flags = (this.flags | 0x1);
            }
            else {
                flags = (this.flags & 0xFFFFFFFE);
            }
            this.flags = flags;
            int flags2;
            if (this.kicked) {
                flags2 = (this.flags | 0x2);
            }
            else {
                flags2 = (this.flags & 0xFFFFFFFD);
            }
            abstractSerializedData.writeInt32(this.flags = flags2);
            this.call.serializeToStream(abstractSerializedData);
            this.user_id.serializeToStream(abstractSerializedData);
            if ((this.flags & 0x4) != 0x0) {
                abstractSerializedData.writeByteArray(this.streams);
            }
        }
    }
    
    public static class TL_phone_getCall extends TLObject
    {
        public static int constructor = -1965338759;
        public TL_inputPhoneCall peer;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_phone_phoneCall.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_phone_getCall.constructor);
            this.peer.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_phone_getCallConfig extends TLObject
    {
        public static int constructor = 1430593449;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_dataJSON.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_phone_getCallConfig.constructor);
        }
    }
    
    public static class TL_phone_getGroupCall extends TLObject
    {
        public static int constructor = 209498135;
        public TL_inputGroupCall call;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_phone_groupCall.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_phone_getGroupCall.constructor);
            this.call.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_phone_groupCall extends TLObject
    {
        public static int constructor = 1731723191;
        public GroupCall call;
        public ArrayList<Chat> chats;
        public ArrayList<GroupCallParticipant> participants;
        public ArrayList<User> users;
        
        public TL_phone_groupCall() {
            this.participants = new ArrayList<GroupCallParticipant>();
            this.chats = new ArrayList<Chat>();
            this.users = new ArrayList<User>();
        }
        
        public static TL_phone_groupCall TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_phone_groupCall.constructor == i) {
                final TL_phone_groupCall tl_phone_groupCall = new TL_phone_groupCall();
                tl_phone_groupCall.readParams(abstractSerializedData, b);
                return tl_phone_groupCall;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_phone_groupCall", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.call = GroupCall.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            final int int32 = abstractSerializedData.readInt32(b);
            final int n = 0;
            if (int32 != 481674261) {
                if (!b) {
                    return;
                }
                throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
            }
            else {
                for (int int33 = abstractSerializedData.readInt32(b), i = 0; i < int33; ++i) {
                    final GroupCallParticipant tLdeserialize = GroupCallParticipant.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    this.participants.add(tLdeserialize);
                }
                final int int34 = abstractSerializedData.readInt32(b);
                if (int34 != 481674261) {
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int34));
                }
                else {
                    for (int int35 = abstractSerializedData.readInt32(b), j = 0; j < int35; ++j) {
                        final Chat tLdeserialize2 = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize2 == null) {
                            return;
                        }
                        this.chats.add(tLdeserialize2);
                    }
                    final int int36 = abstractSerializedData.readInt32(b);
                    if (int36 == 481674261) {
                        for (int int37 = abstractSerializedData.readInt32(b), k = n; k < int37; ++k) {
                            final User tLdeserialize3 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                            if (tLdeserialize3 == null) {
                                return;
                            }
                            this.users.add(tLdeserialize3);
                        }
                        return;
                    }
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int36));
                }
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_phone_groupCall.constructor);
            this.call.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.participants.size();
            abstractSerializedData.writeInt32(size);
            final int n = 0;
            for (int i = 0; i < size; ++i) {
                this.participants.get(i).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size2 = this.chats.size();
            abstractSerializedData.writeInt32(size2);
            for (int j = 0; j < size2; ++j) {
                this.chats.get(j).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size3 = this.users.size();
            abstractSerializedData.writeInt32(size3);
            for (int k = n; k < size3; ++k) {
                this.users.get(k).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_phone_inviteGroupCallMembers extends TLObject
    {
        public static int constructor = -862804260;
        public TL_inputGroupCall call;
        public int flags;
        public boolean uninvite;
        public ArrayList<InputUser> users;
        
        public TL_phone_inviteGroupCallMembers() {
            this.users = new ArrayList<InputUser>();
        }
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_phone_inviteGroupCallMembers.constructor);
            int flags;
            if (this.uninvite) {
                flags = (this.flags | 0x1);
            }
            else {
                flags = (this.flags & 0xFFFFFFFE);
            }
            abstractSerializedData.writeInt32(this.flags = flags);
            this.call.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.users.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                this.users.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_phone_joinGroupCall extends TLObject
    {
        public static int constructor = 165360343;
        public TL_inputGroupCall call;
        public long key_fingerprint;
        public byte[] streams;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Updates.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_phone_joinGroupCall.constructor);
            this.call.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeByteArray(this.streams);
            abstractSerializedData.writeInt64(this.key_fingerprint);
        }
    }
    
    public static class TL_phone_leaveGroupCall extends TLObject
    {
        public static int constructor = 1625919071;
        public TL_inputGroupCall call;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Updates.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_phone_leaveGroupCall.constructor);
            this.call.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_phone_phoneCall extends TLObject
    {
        public static int constructor = -326966976;
        public PhoneCall phone_call;
        public ArrayList<User> users;
        
        public TL_phone_phoneCall() {
            this.users = new ArrayList<User>();
        }
        
        public static TL_phone_phoneCall TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_phone_phoneCall.constructor == i) {
                final TL_phone_phoneCall tl_phone_phoneCall = new TL_phone_phoneCall();
                tl_phone_phoneCall.readParams(abstractSerializedData, b);
                return tl_phone_phoneCall;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_phone_phoneCall", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.phone_call = PhoneCall.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final User tLdeserialize = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    this.users.add(tLdeserialize);
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_phone_phoneCall.constructor);
            this.phone_call.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.users.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                this.users.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_phone_receivedCall extends TLObject
    {
        public static int constructor = 399855457;
        public TL_inputPhoneCall peer;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_phone_receivedCall.constructor);
            this.peer.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_phone_requestCall extends TLObject
    {
        public static int constructor = 1124046573;
        public int flags;
        public byte[] g_a_hash;
        public TL_phoneCallProtocol protocol;
        public int random_id;
        public InputUser user_id;
        public boolean video;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_phone_phoneCall.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_phone_requestCall.constructor);
            int flags;
            if (this.video) {
                flags = (this.flags | 0x1);
            }
            else {
                flags = (this.flags & 0xFFFFFFFE);
            }
            abstractSerializedData.writeInt32(this.flags = flags);
            this.user_id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.random_id);
            abstractSerializedData.writeByteArray(this.g_a_hash);
            this.protocol.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_phone_saveCallDebug extends TLObject
    {
        public static int constructor = 662363518;
        public TL_dataJSON debug;
        public TL_inputPhoneCall peer;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_phone_saveCallDebug.constructor);
            this.peer.serializeToStream(abstractSerializedData);
            this.debug.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_phone_setCallRating extends TLObject
    {
        public static int constructor = 1508562471;
        public String comment;
        public int flags;
        public TL_inputPhoneCall peer;
        public int rating;
        public boolean user_initiative;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Updates.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_phone_setCallRating.constructor);
            int flags;
            if (this.user_initiative) {
                flags = (this.flags | 0x1);
            }
            else {
                flags = (this.flags & 0xFFFFFFFE);
            }
            abstractSerializedData.writeInt32(this.flags = flags);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.rating);
            abstractSerializedData.writeString(this.comment);
        }
    }
    
    public static class TL_phone_upgradePhoneCall extends TLObject
    {
        public static int constructor = -1729901126;
        public byte[] encryption_key;
        public int flags;
        public long key_fingerprint;
        public TL_inputPhoneCall peer;
        public byte[] streams;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_phone_groupCall.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_phone_upgradePhoneCall.constructor);
            abstractSerializedData.writeInt32(this.flags);
            this.peer.serializeToStream(abstractSerializedData);
            if ((this.flags & 0x1) != 0x0) {
                abstractSerializedData.writeByteArray(this.encryption_key);
            }
            abstractSerializedData.writeInt64(this.key_fingerprint);
            abstractSerializedData.writeByteArray(this.streams);
        }
    }
    
    public static class TL_photo extends Photo
    {
        public static int constructor = -797637467;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            int i = 0;
            super.has_stickers = ((flags & 0x1) != 0x0);
            super.id = abstractSerializedData.readInt64(b);
            super.access_hash = abstractSerializedData.readInt64(b);
            super.file_reference = abstractSerializedData.readByteArray(b);
            super.date = abstractSerializedData.readInt32(b);
            final int int32 = abstractSerializedData.readInt32(b);
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final PhotoSize tLdeserialize = PhotoSize.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.sizes.add(tLdeserialize);
                    ++i;
                }
                super.dc_id = abstractSerializedData.readInt32(b);
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_photo.constructor);
            int flags;
            if (super.has_stickers) {
                flags = (super.flags | 0x1);
            }
            else {
                flags = (super.flags & 0xFFFFFFFE);
            }
            abstractSerializedData.writeInt32(super.flags = flags);
            abstractSerializedData.writeInt64(super.id);
            abstractSerializedData.writeInt64(super.access_hash);
            abstractSerializedData.writeByteArray(super.file_reference);
            abstractSerializedData.writeInt32(super.date);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.sizes.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                super.sizes.get(i).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(super.dc_id);
        }
    }
    
    public static class TL_photoCachedSize extends PhotoSize
    {
        public static int constructor = -374917894;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.type = abstractSerializedData.readString(b);
            super.location = FileLocation.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.w = abstractSerializedData.readInt32(b);
            super.h = abstractSerializedData.readInt32(b);
            super.bytes = abstractSerializedData.readByteArray(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_photoCachedSize.constructor);
            abstractSerializedData.writeString(super.type);
            super.location.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(super.w);
            abstractSerializedData.writeInt32(super.h);
            abstractSerializedData.writeByteArray(super.bytes);
        }
    }
    
    public static class TL_photoEmpty extends Photo
    {
        public static int constructor = 590459437;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt64(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_photoEmpty.constructor);
            abstractSerializedData.writeInt64(super.id);
        }
    }
    
    public static class TL_photoSize extends PhotoSize
    {
        public static int constructor = 2009052699;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.type = abstractSerializedData.readString(b);
            super.location = FileLocation.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.w = abstractSerializedData.readInt32(b);
            super.h = abstractSerializedData.readInt32(b);
            super.size = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_photoSize.constructor);
            abstractSerializedData.writeString(super.type);
            super.location.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(super.w);
            abstractSerializedData.writeInt32(super.h);
            abstractSerializedData.writeInt32(super.size);
        }
    }
    
    public static class TL_photoSizeEmpty extends PhotoSize
    {
        public static int constructor = 236446268;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.type = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_photoSizeEmpty.constructor);
            abstractSerializedData.writeString(super.type);
        }
    }
    
    public static class TL_photoStrippedSize extends PhotoSize
    {
        public static int constructor = -525288402;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.type = abstractSerializedData.readString(b);
            super.bytes = abstractSerializedData.readByteArray(b);
            super.h = 50;
            super.w = 50;
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_photoStrippedSize.constructor);
            abstractSerializedData.writeString(super.type);
            abstractSerializedData.writeByteArray(super.bytes);
        }
    }
    
    public static class TL_photo_layer55 extends TL_photo
    {
        public static int constructor = -840088834;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt64(b);
            super.access_hash = abstractSerializedData.readInt64(b);
            super.date = abstractSerializedData.readInt32(b);
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final PhotoSize tLdeserialize = PhotoSize.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.sizes.add(tLdeserialize);
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_photo_layer55.constructor);
            abstractSerializedData.writeInt64(super.id);
            abstractSerializedData.writeInt64(super.access_hash);
            abstractSerializedData.writeInt32(super.date);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.sizes.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                super.sizes.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_photo_layer82 extends TL_photo
    {
        public static int constructor = -1836524247;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            int i = 0;
            super.has_stickers = ((flags & 0x1) != 0x0);
            super.id = abstractSerializedData.readInt64(b);
            super.access_hash = abstractSerializedData.readInt64(b);
            super.date = abstractSerializedData.readInt32(b);
            final int int32 = abstractSerializedData.readInt32(b);
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final PhotoSize tLdeserialize = PhotoSize.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.sizes.add(tLdeserialize);
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_photo_layer82.constructor);
            int flags;
            if (super.has_stickers) {
                flags = (super.flags | 0x1);
            }
            else {
                flags = (super.flags & 0xFFFFFFFE);
            }
            abstractSerializedData.writeInt32(super.flags = flags);
            abstractSerializedData.writeInt64(super.id);
            abstractSerializedData.writeInt64(super.access_hash);
            abstractSerializedData.writeInt32(super.date);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.sizes.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                super.sizes.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_photo_layer97 extends TL_photo
    {
        public static int constructor = -1673036328;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            int i = 0;
            super.has_stickers = ((flags & 0x1) != 0x0);
            super.id = abstractSerializedData.readInt64(b);
            super.access_hash = abstractSerializedData.readInt64(b);
            super.file_reference = abstractSerializedData.readByteArray(b);
            super.date = abstractSerializedData.readInt32(b);
            final int int32 = abstractSerializedData.readInt32(b);
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final PhotoSize tLdeserialize = PhotoSize.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.sizes.add(tLdeserialize);
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_photo_layer97.constructor);
            int flags;
            if (super.has_stickers) {
                flags = (super.flags | 0x1);
            }
            else {
                flags = (super.flags & 0xFFFFFFFE);
            }
            abstractSerializedData.writeInt32(super.flags = flags);
            abstractSerializedData.writeInt64(super.id);
            abstractSerializedData.writeInt64(super.access_hash);
            abstractSerializedData.writeByteArray(super.file_reference);
            abstractSerializedData.writeInt32(super.date);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.sizes.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                super.sizes.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_photo_old extends TL_photo
    {
        public static int constructor = 582313809;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt64(b);
            super.access_hash = abstractSerializedData.readInt64(b);
            super.user_id = abstractSerializedData.readInt32(b);
            super.date = abstractSerializedData.readInt32(b);
            super.caption = abstractSerializedData.readString(b);
            super.geo = GeoPoint.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final PhotoSize tLdeserialize = PhotoSize.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.sizes.add(tLdeserialize);
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_photo_old.constructor);
            abstractSerializedData.writeInt64(super.id);
            abstractSerializedData.writeInt64(super.access_hash);
            abstractSerializedData.writeInt32(super.user_id);
            abstractSerializedData.writeInt32(super.date);
            abstractSerializedData.writeString(super.caption);
            super.geo.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.sizes.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                super.sizes.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_photo_old2 extends TL_photo
    {
        public static int constructor = -1014792074;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt64(b);
            super.access_hash = abstractSerializedData.readInt64(b);
            super.user_id = abstractSerializedData.readInt32(b);
            super.date = abstractSerializedData.readInt32(b);
            super.geo = GeoPoint.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final PhotoSize tLdeserialize = PhotoSize.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.sizes.add(tLdeserialize);
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_photo_old2.constructor);
            abstractSerializedData.writeInt64(super.id);
            abstractSerializedData.writeInt64(super.access_hash);
            abstractSerializedData.writeInt32(super.user_id);
            abstractSerializedData.writeInt32(super.date);
            super.geo.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.sizes.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                super.sizes.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_photos_deletePhotos extends TLObject
    {
        public static int constructor = -2016444625;
        public ArrayList<InputPhoto> id;
        
        public TL_photos_deletePhotos() {
            this.id = new ArrayList<InputPhoto>();
        }
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, int i, final boolean b) {
            final Vector vector = new Vector();
            int int32;
            for (int32 = abstractSerializedData.readInt32(b), i = 0; i < int32; ++i) {
                vector.objects.add(abstractSerializedData.readInt64(b));
            }
            return vector;
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_photos_deletePhotos.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.id.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                this.id.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_photos_getUserPhotos extends TLObject
    {
        public static int constructor = -1848823128;
        public int limit;
        public long max_id;
        public int offset;
        public InputUser user_id;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return photos_Photos.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_photos_getUserPhotos.constructor);
            this.user_id.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.offset);
            abstractSerializedData.writeInt64(this.max_id);
            abstractSerializedData.writeInt32(this.limit);
        }
    }
    
    public static class TL_photos_photo extends TLObject
    {
        public static int constructor = 539045032;
        public Photo photo;
        public ArrayList<User> users;
        
        public TL_photos_photo() {
            this.users = new ArrayList<User>();
        }
        
        public static TL_photos_photo TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_photos_photo.constructor == i) {
                final TL_photos_photo tl_photos_photo = new TL_photos_photo();
                tl_photos_photo.readParams(abstractSerializedData, b);
                return tl_photos_photo;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_photos_photo", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final User tLdeserialize = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    this.users.add(tLdeserialize);
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_photos_photo.constructor);
            this.photo.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.users.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                this.users.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_photos_photos extends photos_Photos
    {
        public static int constructor = -1916114267;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            final int int32 = abstractSerializedData.readInt32(b);
            final int n = 0;
            if (int32 != 481674261) {
                if (!b) {
                    return;
                }
                throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
            }
            else {
                for (int int33 = abstractSerializedData.readInt32(b), i = 0; i < int33; ++i) {
                    final Photo tLdeserialize = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.photos.add(tLdeserialize);
                }
                final int int34 = abstractSerializedData.readInt32(b);
                if (int34 == 481674261) {
                    for (int int35 = abstractSerializedData.readInt32(b), j = n; j < int35; ++j) {
                        final User tLdeserialize2 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize2 == null) {
                            return;
                        }
                        super.users.add(tLdeserialize2);
                    }
                    return;
                }
                if (!b) {
                    return;
                }
                throw new RuntimeException(String.format("wrong Vector magic, got %x", int34));
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_photos_photos.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.photos.size();
            abstractSerializedData.writeInt32(size);
            final int n = 0;
            for (int i = 0; i < size; ++i) {
                super.photos.get(i).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size2 = super.users.size();
            abstractSerializedData.writeInt32(size2);
            for (int j = n; j < size2; ++j) {
                super.users.get(j).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_photos_photosSlice extends photos_Photos
    {
        public static int constructor = 352657236;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.count = abstractSerializedData.readInt32(b);
            final int int32 = abstractSerializedData.readInt32(b);
            final int n = 0;
            if (int32 != 481674261) {
                if (!b) {
                    return;
                }
                throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
            }
            else {
                for (int int33 = abstractSerializedData.readInt32(b), i = 0; i < int33; ++i) {
                    final Photo tLdeserialize = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.photos.add(tLdeserialize);
                }
                final int int34 = abstractSerializedData.readInt32(b);
                if (int34 == 481674261) {
                    for (int int35 = abstractSerializedData.readInt32(b), j = n; j < int35; ++j) {
                        final User tLdeserialize2 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize2 == null) {
                            return;
                        }
                        super.users.add(tLdeserialize2);
                    }
                    return;
                }
                if (!b) {
                    return;
                }
                throw new RuntimeException(String.format("wrong Vector magic, got %x", int34));
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_photos_photosSlice.constructor);
            abstractSerializedData.writeInt32(super.count);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.photos.size();
            abstractSerializedData.writeInt32(size);
            final int n = 0;
            for (int i = 0; i < size; ++i) {
                super.photos.get(i).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size2 = super.users.size();
            abstractSerializedData.writeInt32(size2);
            for (int j = n; j < size2; ++j) {
                super.users.get(j).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_photos_updateProfilePhoto extends TLObject
    {
        public static int constructor = -256159406;
        public InputPhoto id;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return UserProfilePhoto.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_photos_updateProfilePhoto.constructor);
            this.id.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_photos_uploadProfilePhoto extends TLObject
    {
        public static int constructor = 1328726168;
        public InputFile file;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_photos_photo.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_photos_uploadProfilePhoto.constructor);
            this.file.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_poll extends TLObject
    {
        public static int constructor = -716006138;
        public ArrayList<TL_pollAnswer> answers;
        public boolean closed;
        public int flags;
        public long id;
        public String question;
        
        public TL_poll() {
            this.answers = new ArrayList<TL_pollAnswer>();
        }
        
        public static TL_poll TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_poll.constructor == i) {
                final TL_poll tl_poll = new TL_poll();
                tl_poll.readParams(abstractSerializedData, b);
                return tl_poll;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_poll", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.id = abstractSerializedData.readInt64(b);
            this.flags = abstractSerializedData.readInt32(b);
            final int flags = this.flags;
            int i = 0;
            this.closed = ((flags & 0x1) != 0x0);
            this.question = abstractSerializedData.readString(b);
            final int int32 = abstractSerializedData.readInt32(b);
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final TL_pollAnswer tLdeserialize = TL_pollAnswer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    this.answers.add(tLdeserialize);
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_poll.constructor);
            abstractSerializedData.writeInt64(this.id);
            int flags;
            if (this.closed) {
                flags = (this.flags | 0x1);
            }
            else {
                flags = (this.flags & 0xFFFFFFFE);
            }
            abstractSerializedData.writeInt32(this.flags = flags);
            abstractSerializedData.writeString(this.question);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.answers.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                this.answers.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_pollAnswer extends TLObject
    {
        public static int constructor = 1823064809;
        public byte[] option;
        public String text;
        
        public static TL_pollAnswer TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_pollAnswer.constructor == i) {
                final TL_pollAnswer tl_pollAnswer = new TL_pollAnswer();
                tl_pollAnswer.readParams(abstractSerializedData, b);
                return tl_pollAnswer;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_pollAnswer", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.text = abstractSerializedData.readString(b);
            this.option = abstractSerializedData.readByteArray(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_pollAnswer.constructor);
            abstractSerializedData.writeString(this.text);
            abstractSerializedData.writeByteArray(this.option);
        }
    }
    
    public static class TL_pollAnswerVoters extends TLObject
    {
        public static int constructor = 997055186;
        public boolean chosen;
        public int flags;
        public byte[] option;
        public int voters;
        
        public static TL_pollAnswerVoters TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_pollAnswerVoters.constructor == i) {
                final TL_pollAnswerVoters tl_pollAnswerVoters = new TL_pollAnswerVoters();
                tl_pollAnswerVoters.readParams(abstractSerializedData, b);
                return tl_pollAnswerVoters;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_pollAnswerVoters", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.flags = abstractSerializedData.readInt32(b);
            final int flags = this.flags;
            boolean chosen = true;
            if ((flags & 0x1) == 0x0) {
                chosen = false;
            }
            this.chosen = chosen;
            this.option = abstractSerializedData.readByteArray(b);
            this.voters = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_pollAnswerVoters.constructor);
            int flags;
            if (this.chosen) {
                flags = (this.flags | 0x1);
            }
            else {
                flags = (this.flags & 0xFFFFFFFE);
            }
            abstractSerializedData.writeInt32(this.flags = flags);
            abstractSerializedData.writeByteArray(this.option);
            abstractSerializedData.writeInt32(this.voters);
        }
    }
    
    public static class TL_pollResults extends TLObject
    {
        public static int constructor = 1465219162;
        public int flags;
        public boolean min;
        public ArrayList<TL_pollAnswerVoters> results;
        public int total_voters;
        
        public TL_pollResults() {
            this.results = new ArrayList<TL_pollAnswerVoters>();
        }
        
        public static TL_pollResults TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_pollResults.constructor == i) {
                final TL_pollResults tl_pollResults = new TL_pollResults();
                tl_pollResults.readParams(abstractSerializedData, b);
                return tl_pollResults;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_pollResults", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.flags = abstractSerializedData.readInt32(b);
            final int flags = this.flags;
            int i = 0;
            this.min = ((flags & 0x1) != 0x0);
            if ((this.flags & 0x2) != 0x0) {
                final int int32 = abstractSerializedData.readInt32(b);
                if (int32 != 481674261) {
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
                }
                else {
                    while (i < abstractSerializedData.readInt32(b)) {
                        final TL_pollAnswerVoters tLdeserialize = TL_pollAnswerVoters.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize == null) {
                            return;
                        }
                        this.results.add(tLdeserialize);
                        ++i;
                    }
                }
            }
            if ((this.flags & 0x4) != 0x0) {
                this.total_voters = abstractSerializedData.readInt32(b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_pollResults.constructor);
            int flags;
            if (this.min) {
                flags = (this.flags | 0x1);
            }
            else {
                flags = (this.flags & 0xFFFFFFFE);
            }
            abstractSerializedData.writeInt32(this.flags = flags);
            if ((this.flags & 0x2) != 0x0) {
                abstractSerializedData.writeInt32(481674261);
                final int size = this.results.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; ++i) {
                    this.results.get(i).serializeToStream(abstractSerializedData);
                }
            }
            if ((this.flags & 0x4) != 0x0) {
                abstractSerializedData.writeInt32(this.total_voters);
            }
        }
    }
    
    public static class TL_popularContact extends TLObject
    {
        public static int constructor = 1558266229;
        public long client_id;
        public int importers;
        
        public static TL_popularContact TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_popularContact.constructor == i) {
                final TL_popularContact tl_popularContact = new TL_popularContact();
                tl_popularContact.readParams(abstractSerializedData, b);
                return tl_popularContact;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_popularContact", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.client_id = abstractSerializedData.readInt64(b);
            this.importers = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_popularContact.constructor);
            abstractSerializedData.writeInt64(this.client_id);
            abstractSerializedData.writeInt32(this.importers);
        }
    }
    
    public static class TL_postAddress extends TLObject
    {
        public static int constructor = 512535275;
        public String city;
        public String country_iso2;
        public String post_code;
        public String state;
        public String street_line1;
        public String street_line2;
        
        public static TL_postAddress TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_postAddress.constructor == i) {
                final TL_postAddress tl_postAddress = new TL_postAddress();
                tl_postAddress.readParams(abstractSerializedData, b);
                return tl_postAddress;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_postAddress", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.street_line1 = abstractSerializedData.readString(b);
            this.street_line2 = abstractSerializedData.readString(b);
            this.city = abstractSerializedData.readString(b);
            this.state = abstractSerializedData.readString(b);
            this.country_iso2 = abstractSerializedData.readString(b);
            this.post_code = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_postAddress.constructor);
            abstractSerializedData.writeString(this.street_line1);
            abstractSerializedData.writeString(this.street_line2);
            abstractSerializedData.writeString(this.city);
            abstractSerializedData.writeString(this.state);
            abstractSerializedData.writeString(this.country_iso2);
            abstractSerializedData.writeString(this.post_code);
        }
    }
    
    public static class TL_privacyKeyChatInvite extends PrivacyKey
    {
        public static int constructor = 1343122938;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_privacyKeyChatInvite.constructor);
        }
    }
    
    public static class TL_privacyKeyForwards extends PrivacyKey
    {
        public static int constructor = 1777096355;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_privacyKeyForwards.constructor);
        }
    }
    
    public static class TL_privacyKeyPhoneCall extends PrivacyKey
    {
        public static int constructor = 1030105979;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_privacyKeyPhoneCall.constructor);
        }
    }
    
    public static class TL_privacyKeyPhoneNumber extends PrivacyKey
    {
        public static int constructor = -778378131;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_privacyKeyPhoneNumber.constructor);
        }
    }
    
    public static class TL_privacyKeyPhoneP2P extends PrivacyKey
    {
        public static int constructor = 961092808;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_privacyKeyPhoneP2P.constructor);
        }
    }
    
    public static class TL_privacyKeyProfilePhoto extends PrivacyKey
    {
        public static int constructor = -1777000467;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_privacyKeyProfilePhoto.constructor);
        }
    }
    
    public static class TL_privacyKeyStatusTimestamp extends PrivacyKey
    {
        public static int constructor = -1137792208;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_privacyKeyStatusTimestamp.constructor);
        }
    }
    
    public static class TL_privacyValueAllowAll extends PrivacyRule
    {
        public static int constructor = 1698855810;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_privacyValueAllowAll.constructor);
        }
    }
    
    public static class TL_privacyValueAllowChatParticipants extends PrivacyRule
    {
        public static int constructor = 415136107;
        public ArrayList<Integer> chats;
        
        public TL_privacyValueAllowChatParticipants() {
            this.chats = new ArrayList<Integer>();
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    this.chats.add(abstractSerializedData.readInt32(b));
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_privacyValueAllowChatParticipants.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.chats.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                abstractSerializedData.writeInt32(this.chats.get(i));
            }
        }
    }
    
    public static class TL_privacyValueAllowContacts extends PrivacyRule
    {
        public static int constructor = -123988;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_privacyValueAllowContacts.constructor);
        }
    }
    
    public static class TL_privacyValueAllowUsers extends PrivacyRule
    {
        public static int constructor = 1297858060;
        public ArrayList<Integer> users;
        
        public TL_privacyValueAllowUsers() {
            this.users = new ArrayList<Integer>();
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    this.users.add(abstractSerializedData.readInt32(b));
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_privacyValueAllowUsers.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.users.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                abstractSerializedData.writeInt32(this.users.get(i));
            }
        }
    }
    
    public static class TL_privacyValueDisallowAll extends PrivacyRule
    {
        public static int constructor = -1955338397;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_privacyValueDisallowAll.constructor);
        }
    }
    
    public static class TL_privacyValueDisallowChatParticipants extends PrivacyRule
    {
        public static int constructor = -1397881200;
        public ArrayList<Integer> chats;
        
        public TL_privacyValueDisallowChatParticipants() {
            this.chats = new ArrayList<Integer>();
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    this.chats.add(abstractSerializedData.readInt32(b));
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_privacyValueDisallowChatParticipants.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.chats.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                abstractSerializedData.writeInt32(this.chats.get(i));
            }
        }
    }
    
    public static class TL_privacyValueDisallowContacts extends PrivacyRule
    {
        public static int constructor = -125240806;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_privacyValueDisallowContacts.constructor);
        }
    }
    
    public static class TL_privacyValueDisallowUsers extends PrivacyRule
    {
        public static int constructor = 209668535;
        public ArrayList<Integer> users;
        
        public TL_privacyValueDisallowUsers() {
            this.users = new ArrayList<Integer>();
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    this.users.add(abstractSerializedData.readInt32(b));
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_privacyValueDisallowUsers.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.users.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                abstractSerializedData.writeInt32(this.users.get(i));
            }
        }
    }
    
    public static class TL_receivedNotifyMessage extends TLObject
    {
        public static int constructor = -1551583367;
        public int flags;
        public int id;
        
        public static TL_receivedNotifyMessage TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_receivedNotifyMessage.constructor == i) {
                final TL_receivedNotifyMessage tl_receivedNotifyMessage = new TL_receivedNotifyMessage();
                tl_receivedNotifyMessage.readParams(abstractSerializedData, b);
                return tl_receivedNotifyMessage;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_receivedNotifyMessage", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.id = abstractSerializedData.readInt32(b);
            this.flags = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_receivedNotifyMessage.constructor);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeInt32(this.flags);
        }
    }
    
    public static class TL_recentMeUrlChat extends RecentMeUrl
    {
        public static int constructor = -1608834311;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.url = abstractSerializedData.readString(b);
            super.chat_id = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_recentMeUrlChat.constructor);
            abstractSerializedData.writeString(super.url);
            abstractSerializedData.writeInt32(super.chat_id);
        }
    }
    
    public static class TL_recentMeUrlChatInvite extends RecentMeUrl
    {
        public static int constructor = -347535331;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.url = abstractSerializedData.readString(b);
            super.chat_invite = ChatInvite.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_recentMeUrlChatInvite.constructor);
            abstractSerializedData.writeString(super.url);
            super.chat_invite.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_recentMeUrlStickerSet extends RecentMeUrl
    {
        public static int constructor = -1140172836;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.url = abstractSerializedData.readString(b);
            super.set = StickerSetCovered.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_recentMeUrlStickerSet.constructor);
            abstractSerializedData.writeString(super.url);
            super.set.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_recentMeUrlUnknown extends RecentMeUrl
    {
        public static int constructor = 1189204285;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.url = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_recentMeUrlUnknown.constructor);
            abstractSerializedData.writeString(super.url);
        }
    }
    
    public static class TL_recentMeUrlUser extends RecentMeUrl
    {
        public static int constructor = -1917045962;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.url = abstractSerializedData.readString(b);
            super.user_id = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_recentMeUrlUser.constructor);
            abstractSerializedData.writeString(super.url);
            abstractSerializedData.writeInt32(super.user_id);
        }
    }
    
    public static class TL_replyInlineMarkup extends ReplyMarkup
    {
        public static int constructor = 1218642516;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final TL_keyboardButtonRow tLdeserialize = TL_keyboardButtonRow.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.rows.add(tLdeserialize);
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_replyInlineMarkup.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.rows.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                super.rows.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_replyKeyboardForceReply extends ReplyMarkup
    {
        public static int constructor = -200242528;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            final boolean b2 = true;
            super.single_use = ((flags & 0x2) != 0x0);
            super.selective = ((super.flags & 0x4) != 0x0 && b2);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_replyKeyboardForceReply.constructor);
            int flags;
            if (super.single_use) {
                flags = (super.flags | 0x2);
            }
            else {
                flags = (super.flags & 0xFFFFFFFD);
            }
            super.flags = flags;
            int flags2;
            if (super.selective) {
                flags2 = (super.flags | 0x4);
            }
            else {
                flags2 = (super.flags & 0xFFFFFFFB);
            }
            abstractSerializedData.writeInt32(super.flags = flags2);
        }
    }
    
    public static class TL_replyKeyboardHide extends ReplyMarkup
    {
        public static int constructor = -1606526075;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            super.selective = ((super.flags & 0x4) != 0x0);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_replyKeyboardHide.constructor);
            int flags;
            if (super.selective) {
                flags = (super.flags | 0x4);
            }
            else {
                flags = (super.flags & 0xFFFFFFFB);
            }
            abstractSerializedData.writeInt32(super.flags = flags);
        }
    }
    
    public static class TL_replyKeyboardMarkup extends ReplyMarkup
    {
        public static int constructor = 889353612;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            int i = 0;
            super.resize = ((flags & 0x1) != 0x0);
            super.single_use = ((super.flags & 0x2) != 0x0);
            super.selective = ((super.flags & 0x4) != 0x0);
            final int int32 = abstractSerializedData.readInt32(b);
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final TL_keyboardButtonRow tLdeserialize = TL_keyboardButtonRow.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.rows.add(tLdeserialize);
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_replyKeyboardMarkup.constructor);
            int flags;
            if (super.resize) {
                flags = (super.flags | 0x1);
            }
            else {
                flags = (super.flags & 0xFFFFFFFE);
            }
            super.flags = flags;
            int flags2;
            if (super.single_use) {
                flags2 = (super.flags | 0x2);
            }
            else {
                flags2 = (super.flags & 0xFFFFFFFD);
            }
            super.flags = flags2;
            int flags3;
            if (super.selective) {
                flags3 = (super.flags | 0x4);
            }
            else {
                flags3 = (super.flags & 0xFFFFFFFB);
            }
            abstractSerializedData.writeInt32(super.flags = flags3);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.rows.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                super.rows.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_secureCredentialsEncrypted extends TLObject
    {
        public static int constructor = 871426631;
        public byte[] data;
        public byte[] hash;
        public byte[] secret;
        
        public static TL_secureCredentialsEncrypted TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_secureCredentialsEncrypted.constructor == i) {
                final TL_secureCredentialsEncrypted tl_secureCredentialsEncrypted = new TL_secureCredentialsEncrypted();
                tl_secureCredentialsEncrypted.readParams(abstractSerializedData, b);
                return tl_secureCredentialsEncrypted;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_secureCredentialsEncrypted", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.data = abstractSerializedData.readByteArray(b);
            this.hash = abstractSerializedData.readByteArray(b);
            this.secret = abstractSerializedData.readByteArray(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_secureCredentialsEncrypted.constructor);
            abstractSerializedData.writeByteArray(this.data);
            abstractSerializedData.writeByteArray(this.hash);
            abstractSerializedData.writeByteArray(this.secret);
        }
    }
    
    public static class TL_secureData extends TLObject
    {
        public static int constructor = -1964327229;
        public byte[] data;
        public byte[] data_hash;
        public byte[] secret;
        
        public static TL_secureData TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_secureData.constructor == i) {
                final TL_secureData tl_secureData = new TL_secureData();
                tl_secureData.readParams(abstractSerializedData, b);
                return tl_secureData;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_secureData", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.data = abstractSerializedData.readByteArray(b);
            this.data_hash = abstractSerializedData.readByteArray(b);
            this.secret = abstractSerializedData.readByteArray(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_secureData.constructor);
            abstractSerializedData.writeByteArray(this.data);
            abstractSerializedData.writeByteArray(this.data_hash);
            abstractSerializedData.writeByteArray(this.secret);
        }
    }
    
    public static class TL_secureFile extends SecureFile
    {
        public static int constructor = -534283678;
        public long access_hash;
        public int date;
        public int dc_id;
        public byte[] file_hash;
        public long id;
        public byte[] secret;
        public int size;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.id = abstractSerializedData.readInt64(b);
            this.access_hash = abstractSerializedData.readInt64(b);
            this.size = abstractSerializedData.readInt32(b);
            this.dc_id = abstractSerializedData.readInt32(b);
            this.date = abstractSerializedData.readInt32(b);
            this.file_hash = abstractSerializedData.readByteArray(b);
            this.secret = abstractSerializedData.readByteArray(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_secureFile.constructor);
            abstractSerializedData.writeInt64(this.id);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeInt32(this.size);
            abstractSerializedData.writeInt32(this.dc_id);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeByteArray(this.file_hash);
            abstractSerializedData.writeByteArray(this.secret);
        }
    }
    
    public static class TL_secureFileEmpty extends SecureFile
    {
        public static int constructor = 1679398724;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_secureFileEmpty.constructor);
        }
    }
    
    public static class TL_securePasswordKdfAlgoPBKDF2HMACSHA512iter100000 extends SecurePasswordKdfAlgo
    {
        public static int constructor = -1141711456;
        public byte[] salt;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.salt = abstractSerializedData.readByteArray(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_securePasswordKdfAlgoPBKDF2HMACSHA512iter100000.constructor);
            abstractSerializedData.writeByteArray(this.salt);
        }
    }
    
    public static class TL_securePasswordKdfAlgoSHA512 extends SecurePasswordKdfAlgo
    {
        public static int constructor = -2042159726;
        public byte[] salt;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.salt = abstractSerializedData.readByteArray(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_securePasswordKdfAlgoSHA512.constructor);
            abstractSerializedData.writeByteArray(this.salt);
        }
    }
    
    public static class TL_securePasswordKdfAlgoUnknown extends SecurePasswordKdfAlgo
    {
        public static int constructor = 4883767;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_securePasswordKdfAlgoUnknown.constructor);
        }
    }
    
    public static class TL_securePlainEmail extends SecurePlainData
    {
        public static int constructor = 569137759;
        public String email;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.email = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_securePlainEmail.constructor);
            abstractSerializedData.writeString(this.email);
        }
    }
    
    public static class TL_securePlainPhone extends SecurePlainData
    {
        public static int constructor = 2103482845;
        public String phone;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.phone = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_securePlainPhone.constructor);
            abstractSerializedData.writeString(this.phone);
        }
    }
    
    public static class TL_secureRequiredType extends SecureRequiredType
    {
        public static int constructor = -2103600678;
        public int flags;
        public boolean native_names;
        public boolean selfie_required;
        public boolean translation_required;
        public SecureValueType type;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.flags = abstractSerializedData.readInt32(b);
            final int flags = this.flags;
            final boolean b2 = true;
            this.native_names = ((flags & 0x1) != 0x0);
            this.selfie_required = ((this.flags & 0x2) != 0x0);
            this.translation_required = ((this.flags & 0x4) != 0x0 && b2);
            this.type = SecureValueType.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_secureRequiredType.constructor);
            int flags;
            if (this.native_names) {
                flags = (this.flags | 0x1);
            }
            else {
                flags = (this.flags & 0xFFFFFFFE);
            }
            this.flags = flags;
            int flags2;
            if (this.selfie_required) {
                flags2 = (this.flags | 0x2);
            }
            else {
                flags2 = (this.flags & 0xFFFFFFFD);
            }
            this.flags = flags2;
            int flags3;
            if (this.translation_required) {
                flags3 = (this.flags | 0x4);
            }
            else {
                flags3 = (this.flags & 0xFFFFFFFB);
            }
            abstractSerializedData.writeInt32(this.flags = flags3);
            this.type.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_secureRequiredTypeOneOf extends SecureRequiredType
    {
        public static int constructor = 41187252;
        public ArrayList<SecureRequiredType> types;
        
        public TL_secureRequiredTypeOneOf() {
            this.types = new ArrayList<SecureRequiredType>();
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final SecureRequiredType tLdeserialize = SecureRequiredType.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    this.types.add(tLdeserialize);
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_secureRequiredTypeOneOf.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.types.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                this.types.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_secureSecretSettings extends TLObject
    {
        public static int constructor = 354925740;
        public SecurePasswordKdfAlgo secure_algo;
        public byte[] secure_secret;
        public long secure_secret_id;
        
        public static TL_secureSecretSettings TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_secureSecretSettings.constructor == i) {
                final TL_secureSecretSettings tl_secureSecretSettings = new TL_secureSecretSettings();
                tl_secureSecretSettings.readParams(abstractSerializedData, b);
                return tl_secureSecretSettings;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_secureSecretSettings", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.secure_algo = SecurePasswordKdfAlgo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            this.secure_secret = abstractSerializedData.readByteArray(b);
            this.secure_secret_id = abstractSerializedData.readInt64(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_secureSecretSettings.constructor);
            this.secure_algo.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeByteArray(this.secure_secret);
            abstractSerializedData.writeInt64(this.secure_secret_id);
        }
    }
    
    public static class TL_secureValue extends TLObject
    {
        public static int constructor = 411017418;
        public TL_secureData data;
        public ArrayList<SecureFile> files;
        public int flags;
        public SecureFile front_side;
        public byte[] hash;
        public SecurePlainData plain_data;
        public SecureFile reverse_side;
        public SecureFile selfie;
        public ArrayList<SecureFile> translation;
        public SecureValueType type;
        
        public TL_secureValue() {
            this.translation = new ArrayList<SecureFile>();
            this.files = new ArrayList<SecureFile>();
        }
        
        public static TL_secureValue TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_secureValue.constructor == i) {
                final TL_secureValue tl_secureValue = new TL_secureValue();
                tl_secureValue.readParams(abstractSerializedData, b);
                return tl_secureValue;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_secureValue", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.flags = abstractSerializedData.readInt32(b);
            this.type = SecureValueType.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            if ((this.flags & 0x1) != 0x0) {
                this.data = TL_secureData.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            if ((this.flags & 0x2) != 0x0) {
                this.front_side = SecureFile.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            if ((this.flags & 0x4) != 0x0) {
                this.reverse_side = SecureFile.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            if ((this.flags & 0x8) != 0x0) {
                this.selfie = SecureFile.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            final int flags = this.flags;
            final int n = 0;
            if ((flags & 0x40) != 0x0) {
                final int int32 = abstractSerializedData.readInt32(b);
                if (int32 != 481674261) {
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
                }
                else {
                    for (int int33 = abstractSerializedData.readInt32(b), i = 0; i < int33; ++i) {
                        final SecureFile tLdeserialize = SecureFile.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize == null) {
                            return;
                        }
                        this.translation.add(tLdeserialize);
                    }
                }
            }
            if ((this.flags & 0x10) != 0x0) {
                final int int34 = abstractSerializedData.readInt32(b);
                if (int34 != 481674261) {
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int34));
                }
                else {
                    for (int int35 = abstractSerializedData.readInt32(b), j = n; j < int35; ++j) {
                        final SecureFile tLdeserialize2 = SecureFile.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize2 == null) {
                            return;
                        }
                        this.files.add(tLdeserialize2);
                    }
                }
            }
            if ((this.flags & 0x20) != 0x0) {
                this.plain_data = SecurePlainData.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            this.hash = abstractSerializedData.readByteArray(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_secureValue.constructor);
            abstractSerializedData.writeInt32(this.flags);
            this.type.serializeToStream(abstractSerializedData);
            if ((this.flags & 0x1) != 0x0) {
                this.data.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 0x2) != 0x0) {
                this.front_side.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 0x4) != 0x0) {
                this.reverse_side.serializeToStream(abstractSerializedData);
            }
            if ((this.flags & 0x8) != 0x0) {
                this.selfie.serializeToStream(abstractSerializedData);
            }
            final int flags = this.flags;
            final int n = 0;
            if ((flags & 0x40) != 0x0) {
                abstractSerializedData.writeInt32(481674261);
                final int size = this.translation.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; ++i) {
                    this.translation.get(i).serializeToStream(abstractSerializedData);
                }
            }
            if ((this.flags & 0x10) != 0x0) {
                abstractSerializedData.writeInt32(481674261);
                final int size2 = this.files.size();
                abstractSerializedData.writeInt32(size2);
                for (int j = n; j < size2; ++j) {
                    this.files.get(j).serializeToStream(abstractSerializedData);
                }
            }
            if ((this.flags & 0x20) != 0x0) {
                this.plain_data.serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeByteArray(this.hash);
        }
    }
    
    public static class TL_secureValueError extends SecureValueError
    {
        public static int constructor = -2036501105;
        public byte[] hash;
        public String text;
        public SecureValueType type;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.type = SecureValueType.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            this.hash = abstractSerializedData.readByteArray(b);
            this.text = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_secureValueError.constructor);
            this.type.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeByteArray(this.hash);
            abstractSerializedData.writeString(this.text);
        }
    }
    
    public static class TL_secureValueErrorData extends SecureValueError
    {
        public static int constructor = -391902247;
        public byte[] data_hash;
        public String field;
        public String text;
        public SecureValueType type;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.type = SecureValueType.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            this.data_hash = abstractSerializedData.readByteArray(b);
            this.field = abstractSerializedData.readString(b);
            this.text = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_secureValueErrorData.constructor);
            this.type.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeByteArray(this.data_hash);
            abstractSerializedData.writeString(this.field);
            abstractSerializedData.writeString(this.text);
        }
    }
    
    public static class TL_secureValueErrorFile extends SecureValueError
    {
        public static int constructor = 2054162547;
        public byte[] file_hash;
        public String text;
        public SecureValueType type;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.type = SecureValueType.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            this.file_hash = abstractSerializedData.readByteArray(b);
            this.text = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_secureValueErrorFile.constructor);
            this.type.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeByteArray(this.file_hash);
            abstractSerializedData.writeString(this.text);
        }
    }
    
    public static class TL_secureValueErrorFiles extends SecureValueError
    {
        public static int constructor = 1717706985;
        public ArrayList<byte[]> file_hash;
        public String text;
        public SecureValueType type;
        
        public TL_secureValueErrorFiles() {
            this.file_hash = new ArrayList<byte[]>();
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.type = SecureValueType.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    this.file_hash.add(abstractSerializedData.readByteArray(b));
                    ++i;
                }
                this.text = abstractSerializedData.readString(b);
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_secureValueErrorFiles.constructor);
            this.type.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.file_hash.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                abstractSerializedData.writeByteArray(this.file_hash.get(i));
            }
            abstractSerializedData.writeString(this.text);
        }
    }
    
    public static class TL_secureValueErrorFrontSide extends SecureValueError
    {
        public static int constructor = 12467706;
        public byte[] file_hash;
        public String text;
        public SecureValueType type;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.type = SecureValueType.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            this.file_hash = abstractSerializedData.readByteArray(b);
            this.text = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_secureValueErrorFrontSide.constructor);
            this.type.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeByteArray(this.file_hash);
            abstractSerializedData.writeString(this.text);
        }
    }
    
    public static class TL_secureValueErrorReverseSide extends SecureValueError
    {
        public static int constructor = -2037765467;
        public byte[] file_hash;
        public String text;
        public SecureValueType type;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.type = SecureValueType.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            this.file_hash = abstractSerializedData.readByteArray(b);
            this.text = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_secureValueErrorReverseSide.constructor);
            this.type.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeByteArray(this.file_hash);
            abstractSerializedData.writeString(this.text);
        }
    }
    
    public static class TL_secureValueErrorSelfie extends SecureValueError
    {
        public static int constructor = -449327402;
        public byte[] file_hash;
        public String text;
        public SecureValueType type;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.type = SecureValueType.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            this.file_hash = abstractSerializedData.readByteArray(b);
            this.text = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_secureValueErrorSelfie.constructor);
            this.type.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeByteArray(this.file_hash);
            abstractSerializedData.writeString(this.text);
        }
    }
    
    public static class TL_secureValueErrorTranslationFile extends SecureValueError
    {
        public static int constructor = -1592506512;
        public byte[] file_hash;
        public String text;
        public SecureValueType type;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.type = SecureValueType.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            this.file_hash = abstractSerializedData.readByteArray(b);
            this.text = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_secureValueErrorTranslationFile.constructor);
            this.type.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeByteArray(this.file_hash);
            abstractSerializedData.writeString(this.text);
        }
    }
    
    public static class TL_secureValueErrorTranslationFiles extends SecureValueError
    {
        public static int constructor = 878931416;
        public ArrayList<byte[]> file_hash;
        public String text;
        public SecureValueType type;
        
        public TL_secureValueErrorTranslationFiles() {
            this.file_hash = new ArrayList<byte[]>();
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.type = SecureValueType.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    this.file_hash.add(abstractSerializedData.readByteArray(b));
                    ++i;
                }
                this.text = abstractSerializedData.readString(b);
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_secureValueErrorTranslationFiles.constructor);
            this.type.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.file_hash.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                abstractSerializedData.writeByteArray(this.file_hash.get(i));
            }
            abstractSerializedData.writeString(this.text);
        }
    }
    
    public static class TL_secureValueHash extends TLObject
    {
        public static int constructor = -316748368;
        public byte[] hash;
        public SecureValueType type;
        
        public static TL_secureValueHash TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_secureValueHash.constructor == i) {
                final TL_secureValueHash tl_secureValueHash = new TL_secureValueHash();
                tl_secureValueHash.readParams(abstractSerializedData, b);
                return tl_secureValueHash;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_secureValueHash", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.type = SecureValueType.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            this.hash = abstractSerializedData.readByteArray(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_secureValueHash.constructor);
            this.type.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeByteArray(this.hash);
        }
    }
    
    public static class TL_secureValueTypeAddress extends SecureValueType
    {
        public static int constructor = -874308058;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_secureValueTypeAddress.constructor);
        }
    }
    
    public static class TL_secureValueTypeBankStatement extends SecureValueType
    {
        public static int constructor = -1995211763;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_secureValueTypeBankStatement.constructor);
        }
    }
    
    public static class TL_secureValueTypeDriverLicense extends SecureValueType
    {
        public static int constructor = 115615172;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_secureValueTypeDriverLicense.constructor);
        }
    }
    
    public static class TL_secureValueTypeEmail extends SecureValueType
    {
        public static int constructor = -1908627474;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_secureValueTypeEmail.constructor);
        }
    }
    
    public static class TL_secureValueTypeIdentityCard extends SecureValueType
    {
        public static int constructor = -1596951477;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_secureValueTypeIdentityCard.constructor);
        }
    }
    
    public static class TL_secureValueTypeInternalPassport extends SecureValueType
    {
        public static int constructor = -1717268701;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_secureValueTypeInternalPassport.constructor);
        }
    }
    
    public static class TL_secureValueTypePassport extends SecureValueType
    {
        public static int constructor = 1034709504;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_secureValueTypePassport.constructor);
        }
    }
    
    public static class TL_secureValueTypePassportRegistration extends SecureValueType
    {
        public static int constructor = -1713143702;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_secureValueTypePassportRegistration.constructor);
        }
    }
    
    public static class TL_secureValueTypePersonalDetails extends SecureValueType
    {
        public static int constructor = -1658158621;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_secureValueTypePersonalDetails.constructor);
        }
    }
    
    public static class TL_secureValueTypePhone extends SecureValueType
    {
        public static int constructor = -1289704741;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_secureValueTypePhone.constructor);
        }
    }
    
    public static class TL_secureValueTypeRentalAgreement extends SecureValueType
    {
        public static int constructor = -1954007928;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_secureValueTypeRentalAgreement.constructor);
        }
    }
    
    public static class TL_secureValueTypeTemporaryRegistration extends SecureValueType
    {
        public static int constructor = -368907213;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_secureValueTypeTemporaryRegistration.constructor);
        }
    }
    
    public static class TL_secureValueTypeUtilityBill extends SecureValueType
    {
        public static int constructor = -63531698;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_secureValueTypeUtilityBill.constructor);
        }
    }
    
    public static class TL_sendMessageCancelAction extends SendMessageAction
    {
        public static int constructor = -44119819;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_sendMessageCancelAction.constructor);
        }
    }
    
    public static class TL_sendMessageChooseContactAction extends SendMessageAction
    {
        public static int constructor = 1653390447;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_sendMessageChooseContactAction.constructor);
        }
    }
    
    public static class TL_sendMessageGamePlayAction extends SendMessageAction
    {
        public static int constructor = -580219064;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_sendMessageGamePlayAction.constructor);
        }
    }
    
    public static class TL_sendMessageGeoLocationAction extends SendMessageAction
    {
        public static int constructor = 393186209;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_sendMessageGeoLocationAction.constructor);
        }
    }
    
    public static class TL_sendMessageRecordAudioAction extends SendMessageAction
    {
        public static int constructor = -718310409;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_sendMessageRecordAudioAction.constructor);
        }
    }
    
    public static class TL_sendMessageRecordRoundAction extends SendMessageAction
    {
        public static int constructor = -1997373508;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_sendMessageRecordRoundAction.constructor);
        }
    }
    
    public static class TL_sendMessageRecordVideoAction extends SendMessageAction
    {
        public static int constructor = -1584933265;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_sendMessageRecordVideoAction.constructor);
        }
    }
    
    public static class TL_sendMessageTypingAction extends SendMessageAction
    {
        public static int constructor = 381645902;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_sendMessageTypingAction.constructor);
        }
    }
    
    public static class TL_sendMessageUploadAudioAction extends SendMessageAction
    {
        public static int constructor = -212740181;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.progress = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_sendMessageUploadAudioAction.constructor);
            abstractSerializedData.writeInt32(super.progress);
        }
    }
    
    public static class TL_sendMessageUploadAudioAction_old extends TL_sendMessageUploadAudioAction
    {
        public static int constructor = -424899985;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_sendMessageUploadAudioAction_old.constructor);
        }
    }
    
    public static class TL_sendMessageUploadDocumentAction extends SendMessageAction
    {
        public static int constructor = -1441998364;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.progress = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_sendMessageUploadDocumentAction.constructor);
            abstractSerializedData.writeInt32(super.progress);
        }
    }
    
    public static class TL_sendMessageUploadDocumentAction_old extends TL_sendMessageUploadDocumentAction
    {
        public static int constructor = -1884362354;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_sendMessageUploadDocumentAction_old.constructor);
        }
    }
    
    public static class TL_sendMessageUploadPhotoAction extends SendMessageAction
    {
        public static int constructor = -774682074;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.progress = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_sendMessageUploadPhotoAction.constructor);
            abstractSerializedData.writeInt32(super.progress);
        }
    }
    
    public static class TL_sendMessageUploadPhotoAction_old extends TL_sendMessageUploadPhotoAction
    {
        public static int constructor = -1727382502;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_sendMessageUploadPhotoAction_old.constructor);
        }
    }
    
    public static class TL_sendMessageUploadRoundAction extends SendMessageAction
    {
        public static int constructor = 608050278;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.progress = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_sendMessageUploadRoundAction.constructor);
            abstractSerializedData.writeInt32(super.progress);
        }
    }
    
    public static class TL_sendMessageUploadVideoAction extends SendMessageAction
    {
        public static int constructor = -378127636;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.progress = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_sendMessageUploadVideoAction.constructor);
            abstractSerializedData.writeInt32(super.progress);
        }
    }
    
    public static class TL_sendMessageUploadVideoAction_old extends TL_sendMessageUploadVideoAction
    {
        public static int constructor = -1845219337;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_sendMessageUploadVideoAction_old.constructor);
        }
    }
    
    public static class TL_shippingOption extends TLObject
    {
        public static int constructor = -1239335713;
        public String id;
        public ArrayList<TL_labeledPrice> prices;
        public String title;
        
        public TL_shippingOption() {
            this.prices = new ArrayList<TL_labeledPrice>();
        }
        
        public static TL_shippingOption TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_shippingOption.constructor == i) {
                final TL_shippingOption tl_shippingOption = new TL_shippingOption();
                tl_shippingOption.readParams(abstractSerializedData, b);
                return tl_shippingOption;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_shippingOption", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.id = abstractSerializedData.readString(b);
            this.title = abstractSerializedData.readString(b);
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final TL_labeledPrice tLdeserialize = TL_labeledPrice.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    this.prices.add(tLdeserialize);
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_shippingOption.constructor);
            abstractSerializedData.writeString(this.id);
            abstractSerializedData.writeString(this.title);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.prices.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                this.prices.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_statsURL extends TLObject
    {
        public static int constructor = 1202287072;
        public String url;
        
        public static TL_statsURL TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_statsURL.constructor == i) {
                final TL_statsURL tl_statsURL = new TL_statsURL();
                tl_statsURL.readParams(abstractSerializedData, b);
                return tl_statsURL;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_statsURL", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.url = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_statsURL.constructor);
            abstractSerializedData.writeString(this.url);
        }
    }
    
    public static class TL_stickerPack extends TLObject
    {
        public static int constructor = 313694676;
        public ArrayList<Long> documents;
        public String emoticon;
        
        public TL_stickerPack() {
            this.documents = new ArrayList<Long>();
        }
        
        public static TL_stickerPack TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_stickerPack.constructor == i) {
                final TL_stickerPack tl_stickerPack = new TL_stickerPack();
                tl_stickerPack.readParams(abstractSerializedData, b);
                return tl_stickerPack;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_stickerPack", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.emoticon = abstractSerializedData.readString(b);
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    this.documents.add(abstractSerializedData.readInt64(b));
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_stickerPack.constructor);
            abstractSerializedData.writeString(this.emoticon);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.documents.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                abstractSerializedData.writeInt64(this.documents.get(i));
            }
        }
    }
    
    public static class TL_stickerSet extends StickerSet
    {
        public static int constructor = -290164953;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            final boolean b2 = false;
            super.archived = ((flags & 0x2) != 0x0);
            super.official = ((super.flags & 0x4) != 0x0);
            boolean masks = b2;
            if ((super.flags & 0x8) != 0x0) {
                masks = true;
            }
            super.masks = masks;
            if ((super.flags & 0x1) != 0x0) {
                super.installed_date = abstractSerializedData.readInt32(b);
            }
            super.id = abstractSerializedData.readInt64(b);
            super.access_hash = abstractSerializedData.readInt64(b);
            super.title = abstractSerializedData.readString(b);
            super.short_name = abstractSerializedData.readString(b);
            if ((super.flags & 0x10) != 0x0) {
                super.thumb = PhotoSize.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            if ((super.flags & 0x10) != 0x0) {
                super.thumb_dc_id = abstractSerializedData.readInt32(b);
            }
            super.count = abstractSerializedData.readInt32(b);
            super.hash = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_stickerSet.constructor);
            int flags;
            if (super.archived) {
                flags = (super.flags | 0x2);
            }
            else {
                flags = (super.flags & 0xFFFFFFFD);
            }
            super.flags = flags;
            int flags2;
            if (super.official) {
                flags2 = (super.flags | 0x4);
            }
            else {
                flags2 = (super.flags & 0xFFFFFFFB);
            }
            super.flags = flags2;
            int flags3;
            if (super.masks) {
                flags3 = (super.flags | 0x8);
            }
            else {
                flags3 = (super.flags & 0xFFFFFFF7);
            }
            abstractSerializedData.writeInt32(super.flags = flags3);
            if ((super.flags & 0x1) != 0x0) {
                abstractSerializedData.writeInt32(super.installed_date);
            }
            abstractSerializedData.writeInt64(super.id);
            abstractSerializedData.writeInt64(super.access_hash);
            abstractSerializedData.writeString(super.title);
            abstractSerializedData.writeString(super.short_name);
            if ((super.flags & 0x10) != 0x0) {
                super.thumb.serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x10) != 0x0) {
                abstractSerializedData.writeInt32(super.thumb_dc_id);
            }
            abstractSerializedData.writeInt32(super.count);
            abstractSerializedData.writeInt32(super.hash);
        }
    }
    
    public static class TL_stickerSetCovered extends StickerSetCovered
    {
        public static int constructor = 1678812626;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.set = StickerSet.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.cover = Document.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_stickerSetCovered.constructor);
            super.set.serializeToStream(abstractSerializedData);
            super.cover.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_stickerSetMultiCovered extends StickerSetCovered
    {
        public static int constructor = 872932635;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.set = StickerSet.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final Document tLdeserialize = Document.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.covers.add(tLdeserialize);
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_stickerSetMultiCovered.constructor);
            super.set.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.covers.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                super.covers.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_stickerSet_layer75 extends TL_stickerSet
    {
        public static int constructor = -852477119;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            final boolean b2 = true;
            super.installed = ((flags & 0x1) != 0x0);
            super.archived = ((super.flags & 0x2) != 0x0);
            super.official = ((super.flags & 0x4) != 0x0);
            super.masks = ((super.flags & 0x8) != 0x0 && b2);
            super.id = abstractSerializedData.readInt64(b);
            super.access_hash = abstractSerializedData.readInt64(b);
            super.title = abstractSerializedData.readString(b);
            super.short_name = abstractSerializedData.readString(b);
            super.count = abstractSerializedData.readInt32(b);
            super.hash = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_stickerSet_layer75.constructor);
            int flags;
            if (super.installed) {
                flags = (super.flags | 0x1);
            }
            else {
                flags = (super.flags & 0xFFFFFFFE);
            }
            super.flags = flags;
            int flags2;
            if (super.archived) {
                flags2 = (super.flags | 0x2);
            }
            else {
                flags2 = (super.flags & 0xFFFFFFFD);
            }
            super.flags = flags2;
            int flags3;
            if (super.official) {
                flags3 = (super.flags | 0x4);
            }
            else {
                flags3 = (super.flags & 0xFFFFFFFB);
            }
            super.flags = flags3;
            int flags4;
            if (super.masks) {
                flags4 = (super.flags | 0x8);
            }
            else {
                flags4 = (super.flags & 0xFFFFFFF7);
            }
            abstractSerializedData.writeInt32(super.flags = flags4);
            abstractSerializedData.writeInt64(super.id);
            abstractSerializedData.writeInt64(super.access_hash);
            abstractSerializedData.writeString(super.title);
            abstractSerializedData.writeString(super.short_name);
            abstractSerializedData.writeInt32(super.count);
            abstractSerializedData.writeInt32(super.hash);
        }
    }
    
    public static class TL_stickerSet_layer96 extends TL_stickerSet
    {
        public static int constructor = 1434820921;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            final boolean b2 = false;
            super.archived = ((flags & 0x2) != 0x0);
            super.official = ((super.flags & 0x4) != 0x0);
            boolean masks = b2;
            if ((super.flags & 0x8) != 0x0) {
                masks = true;
            }
            super.masks = masks;
            if ((super.flags & 0x1) != 0x0) {
                super.installed_date = abstractSerializedData.readInt32(b);
            }
            super.id = abstractSerializedData.readInt64(b);
            super.access_hash = abstractSerializedData.readInt64(b);
            super.title = abstractSerializedData.readString(b);
            super.short_name = abstractSerializedData.readString(b);
            super.count = abstractSerializedData.readInt32(b);
            super.hash = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_stickerSet_layer96.constructor);
            int flags;
            if (super.archived) {
                flags = (super.flags | 0x2);
            }
            else {
                flags = (super.flags & 0xFFFFFFFD);
            }
            super.flags = flags;
            int flags2;
            if (super.official) {
                flags2 = (super.flags | 0x4);
            }
            else {
                flags2 = (super.flags & 0xFFFFFFFB);
            }
            super.flags = flags2;
            int flags3;
            if (super.masks) {
                flags3 = (super.flags | 0x8);
            }
            else {
                flags3 = (super.flags & 0xFFFFFFF7);
            }
            abstractSerializedData.writeInt32(super.flags = flags3);
            if ((super.flags & 0x1) != 0x0) {
                abstractSerializedData.writeInt32(super.installed_date);
            }
            abstractSerializedData.writeInt64(super.id);
            abstractSerializedData.writeInt64(super.access_hash);
            abstractSerializedData.writeString(super.title);
            abstractSerializedData.writeString(super.short_name);
            abstractSerializedData.writeInt32(super.count);
            abstractSerializedData.writeInt32(super.hash);
        }
    }
    
    public static class TL_stickerSet_layer97 extends TL_stickerSet
    {
        public static int constructor = 1787870391;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            final boolean b2 = false;
            super.archived = ((flags & 0x2) != 0x0);
            super.official = ((super.flags & 0x4) != 0x0);
            boolean masks = b2;
            if ((super.flags & 0x8) != 0x0) {
                masks = true;
            }
            super.masks = masks;
            if ((super.flags & 0x1) != 0x0) {
                super.installed_date = abstractSerializedData.readInt32(b);
            }
            super.id = abstractSerializedData.readInt64(b);
            super.access_hash = abstractSerializedData.readInt64(b);
            super.title = abstractSerializedData.readString(b);
            super.short_name = abstractSerializedData.readString(b);
            if ((super.flags & 0x10) != 0x0) {
                super.thumb = PhotoSize.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            super.count = abstractSerializedData.readInt32(b);
            super.hash = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_stickerSet_layer97.constructor);
            int flags;
            if (super.archived) {
                flags = (super.flags | 0x2);
            }
            else {
                flags = (super.flags & 0xFFFFFFFD);
            }
            super.flags = flags;
            int flags2;
            if (super.official) {
                flags2 = (super.flags | 0x4);
            }
            else {
                flags2 = (super.flags & 0xFFFFFFFB);
            }
            super.flags = flags2;
            int flags3;
            if (super.masks) {
                flags3 = (super.flags | 0x8);
            }
            else {
                flags3 = (super.flags & 0xFFFFFFF7);
            }
            abstractSerializedData.writeInt32(super.flags = flags3);
            if ((super.flags & 0x1) != 0x0) {
                abstractSerializedData.writeInt32(super.installed_date);
            }
            abstractSerializedData.writeInt64(super.id);
            abstractSerializedData.writeInt64(super.access_hash);
            abstractSerializedData.writeString(super.title);
            abstractSerializedData.writeString(super.short_name);
            if ((super.flags & 0x10) != 0x0) {
                super.thumb.serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(super.count);
            abstractSerializedData.writeInt32(super.hash);
        }
    }
    
    public static class TL_stickerSet_old extends TL_stickerSet
    {
        public static int constructor = -1482409193;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt64(b);
            super.access_hash = abstractSerializedData.readInt64(b);
            super.title = abstractSerializedData.readString(b);
            super.short_name = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_stickerSet_old.constructor);
            abstractSerializedData.writeInt64(super.id);
            abstractSerializedData.writeInt64(super.access_hash);
            abstractSerializedData.writeString(super.title);
            abstractSerializedData.writeString(super.short_name);
        }
    }
    
    public static class TL_storage_fileGif extends storage_FileType
    {
        public static int constructor = -891180321;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_storage_fileGif.constructor);
        }
    }
    
    public static class TL_storage_fileJpeg extends storage_FileType
    {
        public static int constructor = 8322574;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_storage_fileJpeg.constructor);
        }
    }
    
    public static class TL_storage_fileMov extends storage_FileType
    {
        public static int constructor = 1258941372;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_storage_fileMov.constructor);
        }
    }
    
    public static class TL_storage_fileMp3 extends storage_FileType
    {
        public static int constructor = 1384777335;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_storage_fileMp3.constructor);
        }
    }
    
    public static class TL_storage_fileMp4 extends storage_FileType
    {
        public static int constructor = -1278304028;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_storage_fileMp4.constructor);
        }
    }
    
    public static class TL_storage_filePartial extends storage_FileType
    {
        public static int constructor = 1086091090;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_storage_filePartial.constructor);
        }
    }
    
    public static class TL_storage_filePdf extends storage_FileType
    {
        public static int constructor = -1373745011;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_storage_filePdf.constructor);
        }
    }
    
    public static class TL_storage_filePng extends storage_FileType
    {
        public static int constructor = 172975040;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_storage_filePng.constructor);
        }
    }
    
    public static class TL_storage_fileUnknown extends storage_FileType
    {
        public static int constructor = -1432995067;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_storage_fileUnknown.constructor);
        }
    }
    
    public static class TL_storage_fileWebp extends storage_FileType
    {
        public static int constructor = 276907596;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_storage_fileWebp.constructor);
        }
    }
    
    public static class TL_textAnchor extends RichText
    {
        public static int constructor = 894777186;
        public String name;
        public RichText text;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.text = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            this.name = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_textAnchor.constructor);
            this.text.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(this.name);
        }
    }
    
    public static class TL_textBold extends RichText
    {
        public static int constructor = 1730456516;
        public RichText text;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.text = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_textBold.constructor);
            this.text.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_textConcat extends RichText
    {
        public static int constructor = 2120376535;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final RichText tLdeserialize = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.texts.add(tLdeserialize);
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_textConcat.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.texts.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                ((RichText)super.texts.get(i)).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_textEmail extends RichText
    {
        public static int constructor = -564523562;
        public RichText text;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.text = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.email = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_textEmail.constructor);
            this.text.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(super.email);
        }
    }
    
    public static class TL_textEmpty extends RichText
    {
        public static int constructor = -599948721;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_textEmpty.constructor);
        }
    }
    
    public static class TL_textFixed extends RichText
    {
        public static int constructor = 1816074681;
        public RichText text;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.text = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_textFixed.constructor);
            this.text.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_textImage extends RichText
    {
        public static int constructor = 136105807;
        public long document_id;
        public int h;
        public int w;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.document_id = abstractSerializedData.readInt64(b);
            this.w = abstractSerializedData.readInt32(b);
            this.h = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_textImage.constructor);
            abstractSerializedData.writeInt64(this.document_id);
            abstractSerializedData.writeInt32(this.w);
            abstractSerializedData.writeInt32(this.h);
        }
    }
    
    public static class TL_textItalic extends RichText
    {
        public static int constructor = -653089380;
        public RichText text;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.text = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_textItalic.constructor);
            this.text.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_textMarked extends RichText
    {
        public static int constructor = 55281185;
        public RichText text;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.text = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_textMarked.constructor);
            this.text.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_textPhone extends RichText
    {
        public static int constructor = 483104362;
        public String phone;
        public RichText text;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.text = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            this.phone = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_textPhone.constructor);
            this.text.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(this.phone);
        }
    }
    
    public static class TL_textPlain extends RichText
    {
        public static int constructor = 1950782688;
        public String text;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.text = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_textPlain.constructor);
            abstractSerializedData.writeString(this.text);
        }
    }
    
    public static class TL_textStrike extends RichText
    {
        public static int constructor = -1678197867;
        public RichText text;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.text = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_textStrike.constructor);
            this.text.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_textSubscript extends RichText
    {
        public static int constructor = -311786236;
        public RichText text;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.text = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_textSubscript.constructor);
            this.text.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_textSuperscript extends RichText
    {
        public static int constructor = -939827711;
        public RichText text;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.text = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_textSuperscript.constructor);
            this.text.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_textUnderline extends RichText
    {
        public static int constructor = -1054465340;
        public RichText text;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.text = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_textUnderline.constructor);
            this.text.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_textUrl extends RichText
    {
        public static int constructor = 1009288385;
        public RichText text;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.text = RichText.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.url = abstractSerializedData.readString(b);
            super.webpage_id = abstractSerializedData.readInt64(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_textUrl.constructor);
            this.text.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(super.url);
            abstractSerializedData.writeInt64(super.webpage_id);
        }
    }
    
    public static class TL_topPeer extends TLObject
    {
        public static int constructor = -305282981;
        public Peer peer;
        public double rating;
        
        public static TL_topPeer TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_topPeer.constructor == i) {
                final TL_topPeer tl_topPeer = new TL_topPeer();
                tl_topPeer.readParams(abstractSerializedData, b);
                return tl_topPeer;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_topPeer", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.peer = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            this.rating = abstractSerializedData.readDouble(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_topPeer.constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeDouble(this.rating);
        }
    }
    
    public static class TL_topPeerCategoryBotsInline extends TopPeerCategory
    {
        public static int constructor = 344356834;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_topPeerCategoryBotsInline.constructor);
        }
    }
    
    public static class TL_topPeerCategoryBotsPM extends TopPeerCategory
    {
        public static int constructor = -1419371685;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_topPeerCategoryBotsPM.constructor);
        }
    }
    
    public static class TL_topPeerCategoryChannels extends TopPeerCategory
    {
        public static int constructor = 371037736;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_topPeerCategoryChannels.constructor);
        }
    }
    
    public static class TL_topPeerCategoryCorrespondents extends TopPeerCategory
    {
        public static int constructor = 104314861;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_topPeerCategoryCorrespondents.constructor);
        }
    }
    
    public static class TL_topPeerCategoryForwardChats extends TopPeerCategory
    {
        public static int constructor = -68239120;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_topPeerCategoryForwardChats.constructor);
        }
    }
    
    public static class TL_topPeerCategoryForwardUsers extends TopPeerCategory
    {
        public static int constructor = -1472172887;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_topPeerCategoryForwardUsers.constructor);
        }
    }
    
    public static class TL_topPeerCategoryGroups extends TopPeerCategory
    {
        public static int constructor = -1122524854;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_topPeerCategoryGroups.constructor);
        }
    }
    
    public static class TL_topPeerCategoryPeers extends TLObject
    {
        public static int constructor = -75283823;
        public TopPeerCategory category;
        public int count;
        public ArrayList<TL_topPeer> peers;
        
        public TL_topPeerCategoryPeers() {
            this.peers = new ArrayList<TL_topPeer>();
        }
        
        public static TL_topPeerCategoryPeers TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_topPeerCategoryPeers.constructor == i) {
                final TL_topPeerCategoryPeers tl_topPeerCategoryPeers = new TL_topPeerCategoryPeers();
                tl_topPeerCategoryPeers.readParams(abstractSerializedData, b);
                return tl_topPeerCategoryPeers;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_topPeerCategoryPeers", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.category = TopPeerCategory.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            this.count = abstractSerializedData.readInt32(b);
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final TL_topPeer tLdeserialize = TL_topPeer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    this.peers.add(tLdeserialize);
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_topPeerCategoryPeers.constructor);
            this.category.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.count);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.peers.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                this.peers.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_topPeerCategoryPhoneCalls extends TopPeerCategory
    {
        public static int constructor = 511092620;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_topPeerCategoryPhoneCalls.constructor);
        }
    }
    
    public static class TL_updateChannel extends Update
    {
        public static int constructor = -1227598250;
        public int channel_id;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.channel_id = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updateChannel.constructor);
            abstractSerializedData.writeInt32(this.channel_id);
        }
    }
    
    public static class TL_updateChannelAvailableMessages extends Update
    {
        public static int constructor = 1893427255;
        public int available_min_id;
        public int channel_id;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.channel_id = abstractSerializedData.readInt32(b);
            this.available_min_id = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updateChannelAvailableMessages.constructor);
            abstractSerializedData.writeInt32(this.channel_id);
            abstractSerializedData.writeInt32(this.available_min_id);
        }
    }
    
    public static class TL_updateChannelMessageViews extends Update
    {
        public static int constructor = -1734268085;
        public int channel_id;
        public int id;
        public int views;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.channel_id = abstractSerializedData.readInt32(b);
            this.id = abstractSerializedData.readInt32(b);
            this.views = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updateChannelMessageViews.constructor);
            abstractSerializedData.writeInt32(this.channel_id);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeInt32(this.views);
        }
    }
    
    public static class TL_updateChannelPinnedMessage extends Update
    {
        public static int constructor = -1738988427;
        public int channel_id;
        public int id;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.channel_id = abstractSerializedData.readInt32(b);
            this.id = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updateChannelPinnedMessage.constructor);
            abstractSerializedData.writeInt32(this.channel_id);
            abstractSerializedData.writeInt32(this.id);
        }
    }
    
    public static class TL_updateChannelReadMessagesContents extends Update
    {
        public static int constructor = -1987495099;
        public int channel_id;
        public ArrayList<Integer> messages;
        
        public TL_updateChannelReadMessagesContents() {
            this.messages = new ArrayList<Integer>();
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.channel_id = abstractSerializedData.readInt32(b);
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    this.messages.add(abstractSerializedData.readInt32(b));
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updateChannelReadMessagesContents.constructor);
            abstractSerializedData.writeInt32(this.channel_id);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.messages.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                abstractSerializedData.writeInt32(this.messages.get(i));
            }
        }
    }
    
    public static class TL_updateChannelTooLong extends Update
    {
        public static int constructor = -352032773;
        public int channel_id;
        public int flags;
        public int pts;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.flags = abstractSerializedData.readInt32(b);
            this.channel_id = abstractSerializedData.readInt32(b);
            if ((this.flags & 0x1) != 0x0) {
                this.pts = abstractSerializedData.readInt32(b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updateChannelTooLong.constructor);
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.channel_id);
            if ((this.flags & 0x1) != 0x0) {
                abstractSerializedData.writeInt32(this.pts);
            }
        }
    }
    
    public static class TL_updateChannelWebPage extends Update
    {
        public static int constructor = 1081547008;
        public int channel_id;
        public int pts;
        public int pts_count;
        public WebPage webpage;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.channel_id = abstractSerializedData.readInt32(b);
            this.webpage = WebPage.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            this.pts = abstractSerializedData.readInt32(b);
            this.pts_count = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updateChannelWebPage.constructor);
            abstractSerializedData.writeInt32(this.channel_id);
            this.webpage.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.pts);
            abstractSerializedData.writeInt32(this.pts_count);
        }
    }
    
    public static class TL_updateChatDefaultBannedRights extends Update
    {
        public static int constructor = 1421875280;
        public TL_chatBannedRights default_banned_rights;
        public Peer peer;
        public int version;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.peer = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            this.default_banned_rights = TL_chatBannedRights.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            this.version = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updateChatDefaultBannedRights.constructor);
            this.peer.serializeToStream(abstractSerializedData);
            this.default_banned_rights.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.version);
        }
    }
    
    public static class TL_updateChatParticipantAdd extends Update
    {
        public static int constructor = -364179876;
        public int chat_id;
        public int date;
        public int inviter_id;
        public int user_id;
        public int version;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.chat_id = abstractSerializedData.readInt32(b);
            this.user_id = abstractSerializedData.readInt32(b);
            this.inviter_id = abstractSerializedData.readInt32(b);
            this.date = abstractSerializedData.readInt32(b);
            this.version = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updateChatParticipantAdd.constructor);
            abstractSerializedData.writeInt32(this.chat_id);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeInt32(this.inviter_id);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeInt32(this.version);
        }
    }
    
    public static class TL_updateChatParticipantAdmin extends Update
    {
        public static int constructor = -1232070311;
        public int chat_id;
        public boolean is_admin;
        public int user_id;
        public int version;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.chat_id = abstractSerializedData.readInt32(b);
            this.user_id = abstractSerializedData.readInt32(b);
            this.is_admin = abstractSerializedData.readBool(b);
            this.version = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updateChatParticipantAdmin.constructor);
            abstractSerializedData.writeInt32(this.chat_id);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeBool(this.is_admin);
            abstractSerializedData.writeInt32(this.version);
        }
    }
    
    public static class TL_updateChatParticipantDelete extends Update
    {
        public static int constructor = 1851755554;
        public int chat_id;
        public int user_id;
        public int version;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.chat_id = abstractSerializedData.readInt32(b);
            this.user_id = abstractSerializedData.readInt32(b);
            this.version = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updateChatParticipantDelete.constructor);
            abstractSerializedData.writeInt32(this.chat_id);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeInt32(this.version);
        }
    }
    
    public static class TL_updateChatParticipants extends Update
    {
        public static int constructor = 125178264;
        public ChatParticipants participants;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.participants = ChatParticipants.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updateChatParticipants.constructor);
            this.participants.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_updateChatPinnedMessage extends Update
    {
        public static int constructor = -519195831;
        public int chat_id;
        public int id;
        public int version;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.chat_id = abstractSerializedData.readInt32(b);
            this.id = abstractSerializedData.readInt32(b);
            this.version = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updateChatPinnedMessage.constructor);
            abstractSerializedData.writeInt32(this.chat_id);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeInt32(this.version);
        }
    }
    
    public static class TL_updateChatUserTyping extends Update
    {
        public static int constructor = -1704596961;
        public SendMessageAction action;
        public int chat_id;
        public int user_id;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.chat_id = abstractSerializedData.readInt32(b);
            this.user_id = abstractSerializedData.readInt32(b);
            this.action = SendMessageAction.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updateChatUserTyping.constructor);
            abstractSerializedData.writeInt32(this.chat_id);
            abstractSerializedData.writeInt32(this.user_id);
            this.action.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_updateConfig extends Update
    {
        public static int constructor = -1574314746;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updateConfig.constructor);
        }
    }
    
    public static class TL_updateContactLink extends Update
    {
        public static int constructor = -1657903163;
        public ContactLink foreign_link;
        public ContactLink my_link;
        public int user_id;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.user_id = abstractSerializedData.readInt32(b);
            this.my_link = ContactLink.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            this.foreign_link = ContactLink.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updateContactLink.constructor);
            abstractSerializedData.writeInt32(this.user_id);
            this.my_link.serializeToStream(abstractSerializedData);
            this.foreign_link.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_updateContactsReset extends Update
    {
        public static int constructor = 1887741886;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updateContactsReset.constructor);
        }
    }
    
    public static class TL_updateDcOptions extends Update
    {
        public static int constructor = -1906403213;
        public ArrayList<TL_dcOption> dc_options;
        
        public TL_updateDcOptions() {
            this.dc_options = new ArrayList<TL_dcOption>();
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final TL_dcOption tLdeserialize = TL_dcOption.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    this.dc_options.add(tLdeserialize);
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updateDcOptions.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.dc_options.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                this.dc_options.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_updateDeleteChannelMessages extends Update
    {
        public static int constructor = -1015733815;
        public int channel_id;
        public ArrayList<Integer> messages;
        public int pts;
        public int pts_count;
        
        public TL_updateDeleteChannelMessages() {
            this.messages = new ArrayList<Integer>();
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.channel_id = abstractSerializedData.readInt32(b);
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    this.messages.add(abstractSerializedData.readInt32(b));
                    ++i;
                }
                this.pts = abstractSerializedData.readInt32(b);
                this.pts_count = abstractSerializedData.readInt32(b);
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updateDeleteChannelMessages.constructor);
            abstractSerializedData.writeInt32(this.channel_id);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.messages.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                abstractSerializedData.writeInt32(this.messages.get(i));
            }
            abstractSerializedData.writeInt32(this.pts);
            abstractSerializedData.writeInt32(this.pts_count);
        }
    }
    
    public static class TL_updateDeleteMessages extends Update
    {
        public static int constructor = -1576161051;
        public ArrayList<Integer> messages;
        public int pts;
        public int pts_count;
        
        public TL_updateDeleteMessages() {
            this.messages = new ArrayList<Integer>();
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    this.messages.add(abstractSerializedData.readInt32(b));
                    ++i;
                }
                this.pts = abstractSerializedData.readInt32(b);
                this.pts_count = abstractSerializedData.readInt32(b);
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updateDeleteMessages.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.messages.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                abstractSerializedData.writeInt32(this.messages.get(i));
            }
            abstractSerializedData.writeInt32(this.pts);
            abstractSerializedData.writeInt32(this.pts_count);
        }
    }
    
    public static class TL_updateDialogPinned extends Update
    {
        public static int constructor = 1852826908;
        public int flags;
        public int folder_id;
        public DialogPeer peer;
        public boolean pinned;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.flags = abstractSerializedData.readInt32(b);
            final int flags = this.flags;
            boolean pinned = true;
            if ((flags & 0x1) == 0x0) {
                pinned = false;
            }
            this.pinned = pinned;
            if ((this.flags & 0x2) != 0x0) {
                this.folder_id = abstractSerializedData.readInt32(b);
            }
            this.peer = DialogPeer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updateDialogPinned.constructor);
            int flags;
            if (this.pinned) {
                flags = (this.flags | 0x1);
            }
            else {
                flags = (this.flags & 0xFFFFFFFE);
            }
            abstractSerializedData.writeInt32(this.flags = flags);
            if ((this.flags & 0x2) != 0x0) {
                abstractSerializedData.writeInt32(this.folder_id);
            }
            this.peer.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_updateDialogUnreadMark extends Update
    {
        public static int constructor = -513517117;
        public int flags;
        public DialogPeer peer;
        public boolean unread;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.flags = abstractSerializedData.readInt32(b);
            final int flags = this.flags;
            boolean unread = true;
            if ((flags & 0x1) == 0x0) {
                unread = false;
            }
            this.unread = unread;
            this.peer = DialogPeer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updateDialogUnreadMark.constructor);
            int flags;
            if (this.unread) {
                flags = (this.flags | 0x1);
            }
            else {
                flags = (this.flags & 0xFFFFFFFE);
            }
            abstractSerializedData.writeInt32(this.flags = flags);
            this.peer.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_updateDraftMessage extends Update
    {
        public static int constructor = -299124375;
        public DraftMessage draft;
        public Peer peer;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.peer = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            this.draft = DraftMessage.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updateDraftMessage.constructor);
            this.peer.serializeToStream(abstractSerializedData);
            this.draft.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_updateEditChannelMessage extends Update
    {
        public static int constructor = 457133559;
        public Message message;
        public int pts;
        public int pts_count;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.message = Message.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            this.pts = abstractSerializedData.readInt32(b);
            this.pts_count = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updateEditChannelMessage.constructor);
            this.message.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.pts);
            abstractSerializedData.writeInt32(this.pts_count);
        }
    }
    
    public static class TL_updateEditMessage extends Update
    {
        public static int constructor = -469536605;
        public Message message;
        public int pts;
        public int pts_count;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.message = Message.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            this.pts = abstractSerializedData.readInt32(b);
            this.pts_count = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updateEditMessage.constructor);
            this.message.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.pts);
            abstractSerializedData.writeInt32(this.pts_count);
        }
    }
    
    public static class TL_updateEncryptedChatTyping extends Update
    {
        public static int constructor = 386986326;
        public int chat_id;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.chat_id = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updateEncryptedChatTyping.constructor);
            abstractSerializedData.writeInt32(this.chat_id);
        }
    }
    
    public static class TL_updateEncryptedMessagesRead extends Update
    {
        public static int constructor = 956179895;
        public int chat_id;
        public int date;
        public int max_date;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.chat_id = abstractSerializedData.readInt32(b);
            this.max_date = abstractSerializedData.readInt32(b);
            this.date = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updateEncryptedMessagesRead.constructor);
            abstractSerializedData.writeInt32(this.chat_id);
            abstractSerializedData.writeInt32(this.max_date);
            abstractSerializedData.writeInt32(this.date);
        }
    }
    
    public static class TL_updateEncryption extends Update
    {
        public static int constructor = -1264392051;
        public EncryptedChat chat;
        public int date;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.chat = EncryptedChat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            this.date = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updateEncryption.constructor);
            this.chat.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.date);
        }
    }
    
    public static class TL_updateFavedStickers extends Update
    {
        public static int constructor = -451831443;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updateFavedStickers.constructor);
        }
    }
    
    public static class TL_updateFolderPeers extends Update
    {
        public static int constructor = 422972864;
        public ArrayList<TL_folderPeer> folder_peers;
        public int pts;
        public int pts_count;
        
        public TL_updateFolderPeers() {
            this.folder_peers = new ArrayList<TL_folderPeer>();
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final TL_folderPeer tLdeserialize = TL_folderPeer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    this.folder_peers.add(tLdeserialize);
                    ++i;
                }
                this.pts = abstractSerializedData.readInt32(b);
                this.pts_count = abstractSerializedData.readInt32(b);
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updateFolderPeers.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.folder_peers.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                this.folder_peers.get(i).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(this.pts);
            abstractSerializedData.writeInt32(this.pts_count);
        }
    }
    
    public static class TL_updateGroupCall extends Update
    {
        public static int constructor = -2046916883;
        public GroupCall call;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.call = GroupCall.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updateGroupCall.constructor);
            this.call.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_updateGroupCallParticipant extends Update
    {
        public static int constructor = 92188360;
        public TL_inputGroupCall call;
        public GroupCallParticipant participant;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.call = TL_inputGroupCall.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            this.participant = GroupCallParticipant.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updateGroupCallParticipant.constructor);
            this.call.serializeToStream(abstractSerializedData);
            this.participant.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_updateLangPack extends Update
    {
        public static int constructor = 1442983757;
        public TL_langPackDifference difference;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.difference = TL_langPackDifference.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updateLangPack.constructor);
            this.difference.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_updateLangPackTooLong extends Update
    {
        public static int constructor = 1180041828;
        public String lang_code;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.lang_code = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updateLangPackTooLong.constructor);
            abstractSerializedData.writeString(this.lang_code);
        }
    }
    
    public static class TL_updateMessageID extends Update
    {
        public static int constructor = 1318109142;
        public int id;
        public long random_id;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.id = abstractSerializedData.readInt32(b);
            this.random_id = abstractSerializedData.readInt64(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updateMessageID.constructor);
            abstractSerializedData.writeInt32(this.id);
            abstractSerializedData.writeInt64(this.random_id);
        }
    }
    
    public static class TL_updateMessagePoll extends Update
    {
        public static int constructor = -1398708869;
        public int flags;
        public TL_poll poll;
        public long poll_id;
        public TL_pollResults results;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.flags = abstractSerializedData.readInt32(b);
            this.poll_id = abstractSerializedData.readInt64(b);
            if ((this.flags & 0x1) != 0x0) {
                this.poll = TL_poll.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            this.results = TL_pollResults.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updateMessagePoll.constructor);
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt64(this.poll_id);
            if ((this.flags & 0x1) != 0x0) {
                this.poll.serializeToStream(abstractSerializedData);
            }
            this.results.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_updateNewChannelMessage extends Update
    {
        public static int constructor = 1656358105;
        public Message message;
        public int pts;
        public int pts_count;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.message = Message.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            this.pts = abstractSerializedData.readInt32(b);
            this.pts_count = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updateNewChannelMessage.constructor);
            this.message.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.pts);
            abstractSerializedData.writeInt32(this.pts_count);
        }
    }
    
    public static class TL_updateNewEncryptedMessage extends Update
    {
        public static int constructor = 314359194;
        public EncryptedMessage message;
        public int qts;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.message = EncryptedMessage.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            this.qts = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updateNewEncryptedMessage.constructor);
            this.message.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.qts);
        }
    }
    
    public static class TL_updateNewMessage extends Update
    {
        public static int constructor = 522914557;
        public Message message;
        public int pts;
        public int pts_count;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.message = Message.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            this.pts = abstractSerializedData.readInt32(b);
            this.pts_count = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updateNewMessage.constructor);
            this.message.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.pts);
            abstractSerializedData.writeInt32(this.pts_count);
        }
    }
    
    public static class TL_updateNewStickerSet extends Update
    {
        public static int constructor = 1753886890;
        public TL_messages_stickerSet stickerset;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.stickerset = TL_messages_stickerSet.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updateNewStickerSet.constructor);
            this.stickerset.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_updateNotifySettings extends Update
    {
        public static int constructor = -1094555409;
        public PeerNotifySettings notify_settings;
        public NotifyPeer peer;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.peer = NotifyPeer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            this.notify_settings = PeerNotifySettings.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updateNotifySettings.constructor);
            this.peer.serializeToStream(abstractSerializedData);
            this.notify_settings.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_updatePhoneCall extends Update
    {
        public static int constructor = -1425052898;
        public PhoneCall phone_call;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.phone_call = PhoneCall.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updatePhoneCall.constructor);
            this.phone_call.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_updatePinnedDialogs extends Update
    {
        public static int constructor = -99664734;
        public int flags;
        public int folder_id;
        public ArrayList<DialogPeer> order;
        
        public TL_updatePinnedDialogs() {
            this.order = new ArrayList<DialogPeer>();
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.flags = abstractSerializedData.readInt32(b);
            if ((this.flags & 0x2) != 0x0) {
                this.folder_id = abstractSerializedData.readInt32(b);
            }
            if ((this.flags & 0x1) != 0x0) {
                final int int32 = abstractSerializedData.readInt32(b);
                int i = 0;
                if (int32 != 481674261) {
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
                }
                else {
                    while (i < abstractSerializedData.readInt32(b)) {
                        final DialogPeer tLdeserialize = DialogPeer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize == null) {
                            return;
                        }
                        this.order.add(tLdeserialize);
                        ++i;
                    }
                }
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updatePinnedDialogs.constructor);
            abstractSerializedData.writeInt32(this.flags);
            if ((this.flags & 0x2) != 0x0) {
                abstractSerializedData.writeInt32(this.folder_id);
            }
            if ((this.flags & 0x1) != 0x0) {
                abstractSerializedData.writeInt32(481674261);
                final int size = this.order.size();
                abstractSerializedData.writeInt32(size);
                for (int i = 0; i < size; ++i) {
                    this.order.get(i).serializeToStream(abstractSerializedData);
                }
            }
        }
    }
    
    public static class TL_updatePrivacy extends Update
    {
        public static int constructor = -298113238;
        public PrivacyKey key;
        public ArrayList<PrivacyRule> rules;
        
        public TL_updatePrivacy() {
            this.rules = new ArrayList<PrivacyRule>();
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.key = PrivacyKey.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final PrivacyRule tLdeserialize = PrivacyRule.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    this.rules.add(tLdeserialize);
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updatePrivacy.constructor);
            this.key.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.rules.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                this.rules.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_updateReadChannelInbox extends Update
    {
        public static int constructor = 856380452;
        public int channel_id;
        public int flags;
        public int folder_id;
        public int max_id;
        public int pts;
        public int still_unread_count;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.flags = abstractSerializedData.readInt32(b);
            if ((this.flags & 0x1) != 0x0) {
                this.folder_id = abstractSerializedData.readInt32(b);
            }
            this.channel_id = abstractSerializedData.readInt32(b);
            this.max_id = abstractSerializedData.readInt32(b);
            this.still_unread_count = abstractSerializedData.readInt32(b);
            this.pts = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updateReadChannelInbox.constructor);
            abstractSerializedData.writeInt32(this.flags);
            if ((this.flags & 0x1) != 0x0) {
                abstractSerializedData.writeInt32(this.folder_id);
            }
            abstractSerializedData.writeInt32(this.channel_id);
            abstractSerializedData.writeInt32(this.max_id);
            abstractSerializedData.writeInt32(this.still_unread_count);
            abstractSerializedData.writeInt32(this.pts);
        }
    }
    
    public static class TL_updateReadChannelOutbox extends Update
    {
        public static int constructor = 634833351;
        public int channel_id;
        public int max_id;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.channel_id = abstractSerializedData.readInt32(b);
            this.max_id = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updateReadChannelOutbox.constructor);
            abstractSerializedData.writeInt32(this.channel_id);
            abstractSerializedData.writeInt32(this.max_id);
        }
    }
    
    public static class TL_updateReadFeaturedStickers extends Update
    {
        public static int constructor = 1461528386;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updateReadFeaturedStickers.constructor);
        }
    }
    
    public static class TL_updateReadHistoryInbox extends Update
    {
        public static int constructor = -1667805217;
        public int flags;
        public int folder_id;
        public int max_id;
        public Peer peer;
        public int pts;
        public int pts_count;
        public int still_unread_count;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.flags = abstractSerializedData.readInt32(b);
            if ((this.flags & 0x1) != 0x0) {
                this.folder_id = abstractSerializedData.readInt32(b);
            }
            this.peer = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            this.max_id = abstractSerializedData.readInt32(b);
            this.still_unread_count = abstractSerializedData.readInt32(b);
            this.pts = abstractSerializedData.readInt32(b);
            this.pts_count = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updateReadHistoryInbox.constructor);
            abstractSerializedData.writeInt32(this.flags);
            if ((this.flags & 0x1) != 0x0) {
                abstractSerializedData.writeInt32(this.folder_id);
            }
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.max_id);
            abstractSerializedData.writeInt32(this.still_unread_count);
            abstractSerializedData.writeInt32(this.pts);
            abstractSerializedData.writeInt32(this.pts_count);
        }
    }
    
    public static class TL_updateReadHistoryOutbox extends Update
    {
        public static int constructor = 791617983;
        public int max_id;
        public Peer peer;
        public int pts;
        public int pts_count;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.peer = Peer.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            this.max_id = abstractSerializedData.readInt32(b);
            this.pts = abstractSerializedData.readInt32(b);
            this.pts_count = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updateReadHistoryOutbox.constructor);
            this.peer.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.max_id);
            abstractSerializedData.writeInt32(this.pts);
            abstractSerializedData.writeInt32(this.pts_count);
        }
    }
    
    public static class TL_updateReadMessagesContents extends Update
    {
        public static int constructor = 1757493555;
        public ArrayList<Integer> messages;
        public int pts;
        public int pts_count;
        
        public TL_updateReadMessagesContents() {
            this.messages = new ArrayList<Integer>();
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    this.messages.add(abstractSerializedData.readInt32(b));
                    ++i;
                }
                this.pts = abstractSerializedData.readInt32(b);
                this.pts_count = abstractSerializedData.readInt32(b);
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updateReadMessagesContents.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.messages.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                abstractSerializedData.writeInt32(this.messages.get(i));
            }
            abstractSerializedData.writeInt32(this.pts);
            abstractSerializedData.writeInt32(this.pts_count);
        }
    }
    
    public static class TL_updateRecentStickers extends Update
    {
        public static int constructor = -1706939360;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updateRecentStickers.constructor);
        }
    }
    
    public static class TL_updateSavedGifs extends Update
    {
        public static int constructor = -1821035490;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updateSavedGifs.constructor);
        }
    }
    
    public static class TL_updateServiceNotification extends Update
    {
        public static int constructor = -337352679;
        public ArrayList<MessageEntity> entities;
        public int flags;
        public int inbox_date;
        public MessageMedia media;
        public String message;
        public boolean popup;
        public String type;
        
        public TL_updateServiceNotification() {
            this.entities = new ArrayList<MessageEntity>();
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.flags = abstractSerializedData.readInt32(b);
            final int flags = this.flags;
            int i = 0;
            this.popup = ((flags & 0x1) != 0x0);
            if ((this.flags & 0x2) != 0x0) {
                this.inbox_date = abstractSerializedData.readInt32(b);
            }
            this.type = abstractSerializedData.readString(b);
            this.message = abstractSerializedData.readString(b);
            this.media = MessageMedia.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            final int int32 = abstractSerializedData.readInt32(b);
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final MessageEntity tLdeserialize = MessageEntity.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    this.entities.add(tLdeserialize);
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updateServiceNotification.constructor);
            int flags;
            if (this.popup) {
                flags = (this.flags | 0x1);
            }
            else {
                flags = (this.flags & 0xFFFFFFFE);
            }
            abstractSerializedData.writeInt32(this.flags = flags);
            if ((this.flags & 0x2) != 0x0) {
                abstractSerializedData.writeInt32(this.inbox_date);
            }
            abstractSerializedData.writeString(this.type);
            abstractSerializedData.writeString(this.message);
            this.media.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.entities.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                this.entities.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_updateShort extends Updates
    {
        public static int constructor = 2027216577;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.update = Update.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.date = abstractSerializedData.readInt32(b);
        }
    }
    
    public static class TL_updateShortChatMessage extends Updates
    {
        public static int constructor = 377562760;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            int i = 0;
            super.out = ((flags & 0x2) != 0x0);
            super.mentioned = ((super.flags & 0x10) != 0x0);
            super.media_unread = ((super.flags & 0x20) != 0x0);
            super.silent = ((super.flags & 0x2000) != 0x0);
            super.id = abstractSerializedData.readInt32(b);
            super.from_id = abstractSerializedData.readInt32(b);
            super.chat_id = abstractSerializedData.readInt32(b);
            super.message = abstractSerializedData.readString(b);
            super.pts = abstractSerializedData.readInt32(b);
            super.pts_count = abstractSerializedData.readInt32(b);
            super.date = abstractSerializedData.readInt32(b);
            if ((super.flags & 0x4) != 0x0) {
                super.fwd_from = MessageFwdHeader.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            if ((super.flags & 0x800) != 0x0) {
                super.via_bot_id = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x8) != 0x0) {
                super.reply_to_msg_id = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x80) != 0x0) {
                final int int32 = abstractSerializedData.readInt32(b);
                if (int32 != 481674261) {
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
                }
                else {
                    while (i < abstractSerializedData.readInt32(b)) {
                        final MessageEntity tLdeserialize = MessageEntity.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize == null) {
                            return;
                        }
                        super.entities.add(tLdeserialize);
                        ++i;
                    }
                }
            }
        }
    }
    
    public static class TL_updateShortMessage extends Updates
    {
        public static int constructor = -1857044719;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            int i = 0;
            super.out = ((flags & 0x2) != 0x0);
            super.mentioned = ((super.flags & 0x10) != 0x0);
            super.media_unread = ((super.flags & 0x20) != 0x0);
            super.silent = ((super.flags & 0x2000) != 0x0);
            super.id = abstractSerializedData.readInt32(b);
            super.user_id = abstractSerializedData.readInt32(b);
            super.message = abstractSerializedData.readString(b);
            super.pts = abstractSerializedData.readInt32(b);
            super.pts_count = abstractSerializedData.readInt32(b);
            super.date = abstractSerializedData.readInt32(b);
            if ((super.flags & 0x4) != 0x0) {
                super.fwd_from = MessageFwdHeader.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            if ((super.flags & 0x800) != 0x0) {
                super.via_bot_id = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x8) != 0x0) {
                super.reply_to_msg_id = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x80) != 0x0) {
                final int int32 = abstractSerializedData.readInt32(b);
                if (int32 != 481674261) {
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
                }
                else {
                    while (i < abstractSerializedData.readInt32(b)) {
                        final MessageEntity tLdeserialize = MessageEntity.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize == null) {
                            return;
                        }
                        super.entities.add(tLdeserialize);
                        ++i;
                    }
                }
            }
        }
    }
    
    public static class TL_updateShortSentMessage extends Updates
    {
        public static int constructor = 301019932;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            int i = 0;
            super.out = ((flags & 0x2) != 0x0);
            super.id = abstractSerializedData.readInt32(b);
            super.pts = abstractSerializedData.readInt32(b);
            super.pts_count = abstractSerializedData.readInt32(b);
            super.date = abstractSerializedData.readInt32(b);
            if ((super.flags & 0x200) != 0x0) {
                super.media = MessageMedia.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            if ((super.flags & 0x80) != 0x0) {
                final int int32 = abstractSerializedData.readInt32(b);
                if (int32 != 481674261) {
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
                }
                else {
                    while (i < abstractSerializedData.readInt32(b)) {
                        final MessageEntity tLdeserialize = MessageEntity.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize == null) {
                            return;
                        }
                        super.entities.add(tLdeserialize);
                        ++i;
                    }
                }
            }
        }
    }
    
    public static class TL_updateStickerSets extends Update
    {
        public static int constructor = 1135492588;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updateStickerSets.constructor);
        }
    }
    
    public static class TL_updateStickerSetsOrder extends Update
    {
        public static int constructor = 196268545;
        public int flags;
        public boolean masks;
        public ArrayList<Long> order;
        
        public TL_updateStickerSetsOrder() {
            this.order = new ArrayList<Long>();
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.flags = abstractSerializedData.readInt32(b);
            final int flags = this.flags;
            int i = 0;
            this.masks = ((flags & 0x1) != 0x0);
            final int int32 = abstractSerializedData.readInt32(b);
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    this.order.add(abstractSerializedData.readInt64(b));
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updateStickerSetsOrder.constructor);
            int flags;
            if (this.masks) {
                flags = (this.flags | 0x1);
            }
            else {
                flags = (this.flags & 0xFFFFFFFE);
            }
            abstractSerializedData.writeInt32(this.flags = flags);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.order.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                abstractSerializedData.writeInt64(this.order.get(i));
            }
        }
    }
    
    public static class TL_updateUserBlocked extends Update
    {
        public static int constructor = -2131957734;
        public boolean blocked;
        public int user_id;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.user_id = abstractSerializedData.readInt32(b);
            this.blocked = abstractSerializedData.readBool(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updateUserBlocked.constructor);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeBool(this.blocked);
        }
    }
    
    public static class TL_updateUserName extends Update
    {
        public static int constructor = -1489818765;
        public String first_name;
        public String last_name;
        public int user_id;
        public String username;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.user_id = abstractSerializedData.readInt32(b);
            this.first_name = abstractSerializedData.readString(b);
            this.last_name = abstractSerializedData.readString(b);
            this.username = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updateUserName.constructor);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeString(this.first_name);
            abstractSerializedData.writeString(this.last_name);
            abstractSerializedData.writeString(this.username);
        }
    }
    
    public static class TL_updateUserPhone extends Update
    {
        public static int constructor = 314130811;
        public String phone;
        public int user_id;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.user_id = abstractSerializedData.readInt32(b);
            this.phone = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updateUserPhone.constructor);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeString(this.phone);
        }
    }
    
    public static class TL_updateUserPhoto extends Update
    {
        public static int constructor = -1791935732;
        public int date;
        public UserProfilePhoto photo;
        public boolean previous;
        public int user_id;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.user_id = abstractSerializedData.readInt32(b);
            this.date = abstractSerializedData.readInt32(b);
            this.photo = UserProfilePhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            this.previous = abstractSerializedData.readBool(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updateUserPhoto.constructor);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeInt32(this.date);
            this.photo.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeBool(this.previous);
        }
    }
    
    public static class TL_updateUserPinnedMessage extends Update
    {
        public static int constructor = 1279515160;
        public int id;
        public int user_id;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.user_id = abstractSerializedData.readInt32(b);
            this.id = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updateUserPinnedMessage.constructor);
            abstractSerializedData.writeInt32(this.user_id);
            abstractSerializedData.writeInt32(this.id);
        }
    }
    
    public static class TL_updateUserStatus extends Update
    {
        public static int constructor = 469489699;
        public UserStatus status;
        public int user_id;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.user_id = abstractSerializedData.readInt32(b);
            this.status = UserStatus.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updateUserStatus.constructor);
            abstractSerializedData.writeInt32(this.user_id);
            this.status.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_updateUserTyping extends Update
    {
        public static int constructor = 1548249383;
        public SendMessageAction action;
        public int user_id;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.user_id = abstractSerializedData.readInt32(b);
            this.action = SendMessageAction.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updateUserTyping.constructor);
            abstractSerializedData.writeInt32(this.user_id);
            this.action.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_updateWebPage extends Update
    {
        public static int constructor = 2139689491;
        public int pts;
        public int pts_count;
        public WebPage webpage;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.webpage = WebPage.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            this.pts = abstractSerializedData.readInt32(b);
            this.pts_count = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updateWebPage.constructor);
            this.webpage.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.pts);
            abstractSerializedData.writeInt32(this.pts_count);
        }
    }
    
    public static class TL_updates extends Updates
    {
        public static int constructor = 1957577280;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            final int int32 = abstractSerializedData.readInt32(b);
            final int n = 0;
            if (int32 != 481674261) {
                if (!b) {
                    return;
                }
                throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
            }
            else {
                for (int int33 = abstractSerializedData.readInt32(b), i = 0; i < int33; ++i) {
                    final Update tLdeserialize = Update.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.updates.add(tLdeserialize);
                }
                final int int34 = abstractSerializedData.readInt32(b);
                if (int34 != 481674261) {
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int34));
                }
                else {
                    for (int int35 = abstractSerializedData.readInt32(b), j = 0; j < int35; ++j) {
                        final User tLdeserialize2 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize2 == null) {
                            return;
                        }
                        super.users.add(tLdeserialize2);
                    }
                    final int int36 = abstractSerializedData.readInt32(b);
                    if (int36 == 481674261) {
                        for (int int37 = abstractSerializedData.readInt32(b), k = n; k < int37; ++k) {
                            final Chat tLdeserialize3 = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                            if (tLdeserialize3 == null) {
                                return;
                            }
                            super.chats.add(tLdeserialize3);
                        }
                        super.date = abstractSerializedData.readInt32(b);
                        super.seq = abstractSerializedData.readInt32(b);
                        return;
                    }
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int36));
                }
            }
        }
    }
    
    public static class TL_updatesCombined extends Updates
    {
        public static int constructor = 1918567619;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            final int int32 = abstractSerializedData.readInt32(b);
            final int n = 0;
            if (int32 != 481674261) {
                if (!b) {
                    return;
                }
                throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
            }
            else {
                for (int int33 = abstractSerializedData.readInt32(b), i = 0; i < int33; ++i) {
                    final Update tLdeserialize = Update.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.updates.add(tLdeserialize);
                }
                final int int34 = abstractSerializedData.readInt32(b);
                if (int34 != 481674261) {
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int34));
                }
                else {
                    for (int int35 = abstractSerializedData.readInt32(b), j = 0; j < int35; ++j) {
                        final User tLdeserialize2 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize2 == null) {
                            return;
                        }
                        super.users.add(tLdeserialize2);
                    }
                    final int int36 = abstractSerializedData.readInt32(b);
                    if (int36 == 481674261) {
                        for (int int37 = abstractSerializedData.readInt32(b), k = n; k < int37; ++k) {
                            final Chat tLdeserialize3 = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                            if (tLdeserialize3 == null) {
                                return;
                            }
                            super.chats.add(tLdeserialize3);
                        }
                        super.date = abstractSerializedData.readInt32(b);
                        super.seq_start = abstractSerializedData.readInt32(b);
                        super.seq = abstractSerializedData.readInt32(b);
                        return;
                    }
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int36));
                }
            }
        }
    }
    
    public static class TL_updatesTooLong extends Updates
    {
        public static int constructor = -484987010;
    }
    
    public static class TL_updates_channelDifference extends updates_ChannelDifference
    {
        public static int constructor = 543450958;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            final int n = 0;
            super.isFinal = ((flags & 0x1) != 0x0);
            super.pts = abstractSerializedData.readInt32(b);
            if ((super.flags & 0x2) != 0x0) {
                super.timeout = abstractSerializedData.readInt32(b);
            }
            final int int32 = abstractSerializedData.readInt32(b);
            if (int32 != 481674261) {
                if (!b) {
                    return;
                }
                throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
            }
            else {
                for (int int33 = abstractSerializedData.readInt32(b), i = 0; i < int33; ++i) {
                    final Message tLdeserialize = Message.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.new_messages.add(tLdeserialize);
                }
                final int int34 = abstractSerializedData.readInt32(b);
                if (int34 != 481674261) {
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int34));
                }
                else {
                    for (int int35 = abstractSerializedData.readInt32(b), j = 0; j < int35; ++j) {
                        final Update tLdeserialize2 = Update.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize2 == null) {
                            return;
                        }
                        super.other_updates.add(tLdeserialize2);
                    }
                    final int int36 = abstractSerializedData.readInt32(b);
                    if (int36 != 481674261) {
                        if (!b) {
                            return;
                        }
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", int36));
                    }
                    else {
                        for (int int37 = abstractSerializedData.readInt32(b), k = 0; k < int37; ++k) {
                            final Chat tLdeserialize3 = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                            if (tLdeserialize3 == null) {
                                return;
                            }
                            super.chats.add(tLdeserialize3);
                        }
                        final int int38 = abstractSerializedData.readInt32(b);
                        if (int38 == 481674261) {
                            for (int int39 = abstractSerializedData.readInt32(b), l = n; l < int39; ++l) {
                                final User tLdeserialize4 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                                if (tLdeserialize4 == null) {
                                    return;
                                }
                                super.users.add(tLdeserialize4);
                            }
                            return;
                        }
                        if (!b) {
                            return;
                        }
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", int38));
                    }
                }
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updates_channelDifference.constructor);
            int flags;
            if (super.isFinal) {
                flags = (super.flags | 0x1);
            }
            else {
                flags = (super.flags & 0xFFFFFFFE);
            }
            abstractSerializedData.writeInt32(super.flags = flags);
            abstractSerializedData.writeInt32(super.pts);
            if ((super.flags & 0x2) != 0x0) {
                abstractSerializedData.writeInt32(super.timeout);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size = super.new_messages.size();
            abstractSerializedData.writeInt32(size);
            final int n = 0;
            for (int i = 0; i < size; ++i) {
                super.new_messages.get(i).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size2 = super.other_updates.size();
            abstractSerializedData.writeInt32(size2);
            for (int j = 0; j < size2; ++j) {
                super.other_updates.get(j).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size3 = super.chats.size();
            abstractSerializedData.writeInt32(size3);
            for (int k = 0; k < size3; ++k) {
                super.chats.get(k).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size4 = super.users.size();
            abstractSerializedData.writeInt32(size4);
            for (int l = n; l < size4; ++l) {
                super.users.get(l).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_updates_channelDifferenceEmpty extends updates_ChannelDifference
    {
        public static int constructor = 1041346555;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            boolean isFinal = true;
            if ((flags & 0x1) == 0x0) {
                isFinal = false;
            }
            super.isFinal = isFinal;
            super.pts = abstractSerializedData.readInt32(b);
            if ((super.flags & 0x2) != 0x0) {
                super.timeout = abstractSerializedData.readInt32(b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updates_channelDifferenceEmpty.constructor);
            int flags;
            if (super.isFinal) {
                flags = (super.flags | 0x1);
            }
            else {
                flags = (super.flags & 0xFFFFFFFE);
            }
            abstractSerializedData.writeInt32(super.flags = flags);
            abstractSerializedData.writeInt32(super.pts);
            if ((super.flags & 0x2) != 0x0) {
                abstractSerializedData.writeInt32(super.timeout);
            }
        }
    }
    
    public static class TL_updates_channelDifferenceTooLong extends updates_ChannelDifference
    {
        public static int constructor = -1531132162;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            final int n = 0;
            super.isFinal = ((flags & 0x1) != 0x0);
            if ((super.flags & 0x2) != 0x0) {
                super.timeout = abstractSerializedData.readInt32(b);
            }
            super.dialog = Dialog.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            final int int32 = abstractSerializedData.readInt32(b);
            if (int32 != 481674261) {
                if (!b) {
                    return;
                }
                throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
            }
            else {
                for (int int33 = abstractSerializedData.readInt32(b), i = 0; i < int33; ++i) {
                    final Message tLdeserialize = Message.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.messages.add(tLdeserialize);
                }
                final int int34 = abstractSerializedData.readInt32(b);
                if (int34 != 481674261) {
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int34));
                }
                else {
                    for (int int35 = abstractSerializedData.readInt32(b), j = 0; j < int35; ++j) {
                        final Chat tLdeserialize2 = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize2 == null) {
                            return;
                        }
                        super.chats.add(tLdeserialize2);
                    }
                    final int int36 = abstractSerializedData.readInt32(b);
                    if (int36 == 481674261) {
                        for (int int37 = abstractSerializedData.readInt32(b), k = n; k < int37; ++k) {
                            final User tLdeserialize3 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                            if (tLdeserialize3 == null) {
                                return;
                            }
                            super.users.add(tLdeserialize3);
                        }
                        return;
                    }
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int36));
                }
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updates_channelDifferenceTooLong.constructor);
            int flags;
            if (super.isFinal) {
                flags = (super.flags | 0x1);
            }
            else {
                flags = (super.flags & 0xFFFFFFFE);
            }
            abstractSerializedData.writeInt32(super.flags = flags);
            if ((super.flags & 0x2) != 0x0) {
                abstractSerializedData.writeInt32(super.timeout);
            }
            super.dialog.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.messages.size();
            abstractSerializedData.writeInt32(size);
            final int n = 0;
            for (int i = 0; i < size; ++i) {
                super.messages.get(i).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size2 = super.chats.size();
            abstractSerializedData.writeInt32(size2);
            for (int j = 0; j < size2; ++j) {
                super.chats.get(j).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size3 = super.users.size();
            abstractSerializedData.writeInt32(size3);
            for (int k = n; k < size3; ++k) {
                super.users.get(k).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_updates_difference extends updates_Difference
    {
        public static int constructor = 16030880;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            final int int32 = abstractSerializedData.readInt32(b);
            final int n = 0;
            if (int32 != 481674261) {
                if (!b) {
                    return;
                }
                throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
            }
            else {
                for (int int33 = abstractSerializedData.readInt32(b), i = 0; i < int33; ++i) {
                    final Message tLdeserialize = Message.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.new_messages.add(tLdeserialize);
                }
                final int int34 = abstractSerializedData.readInt32(b);
                if (int34 != 481674261) {
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int34));
                }
                else {
                    for (int int35 = abstractSerializedData.readInt32(b), j = 0; j < int35; ++j) {
                        final EncryptedMessage tLdeserialize2 = EncryptedMessage.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize2 == null) {
                            return;
                        }
                        super.new_encrypted_messages.add(tLdeserialize2);
                    }
                    final int int36 = abstractSerializedData.readInt32(b);
                    if (int36 != 481674261) {
                        if (!b) {
                            return;
                        }
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", int36));
                    }
                    else {
                        for (int int37 = abstractSerializedData.readInt32(b), k = 0; k < int37; ++k) {
                            final Update tLdeserialize3 = Update.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                            if (tLdeserialize3 == null) {
                                return;
                            }
                            super.other_updates.add(tLdeserialize3);
                        }
                        final int int38 = abstractSerializedData.readInt32(b);
                        if (int38 != 481674261) {
                            if (!b) {
                                return;
                            }
                            throw new RuntimeException(String.format("wrong Vector magic, got %x", int38));
                        }
                        else {
                            for (int int39 = abstractSerializedData.readInt32(b), l = 0; l < int39; ++l) {
                                final Chat tLdeserialize4 = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                                if (tLdeserialize4 == null) {
                                    return;
                                }
                                super.chats.add(tLdeserialize4);
                            }
                            final int int40 = abstractSerializedData.readInt32(b);
                            if (int40 == 481674261) {
                                for (int int41 = abstractSerializedData.readInt32(b), n2 = n; n2 < int41; ++n2) {
                                    final User tLdeserialize5 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                                    if (tLdeserialize5 == null) {
                                        return;
                                    }
                                    super.users.add(tLdeserialize5);
                                }
                                super.state = TL_updates_state.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                                return;
                            }
                            if (!b) {
                                return;
                            }
                            throw new RuntimeException(String.format("wrong Vector magic, got %x", int40));
                        }
                    }
                }
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updates_difference.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.new_messages.size();
            abstractSerializedData.writeInt32(size);
            final int n = 0;
            for (int i = 0; i < size; ++i) {
                super.new_messages.get(i).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size2 = super.new_encrypted_messages.size();
            abstractSerializedData.writeInt32(size2);
            for (int j = 0; j < size2; ++j) {
                super.new_encrypted_messages.get(j).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size3 = super.other_updates.size();
            abstractSerializedData.writeInt32(size3);
            for (int k = 0; k < size3; ++k) {
                super.other_updates.get(k).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size4 = super.chats.size();
            abstractSerializedData.writeInt32(size4);
            for (int l = 0; l < size4; ++l) {
                super.chats.get(l).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size5 = super.users.size();
            abstractSerializedData.writeInt32(size5);
            for (int index = n; index < size5; ++index) {
                super.users.get(index).serializeToStream(abstractSerializedData);
            }
            super.state.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_updates_differenceEmpty extends updates_Difference
    {
        public static int constructor = 1567990072;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.date = abstractSerializedData.readInt32(b);
            super.seq = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updates_differenceEmpty.constructor);
            abstractSerializedData.writeInt32(super.date);
            abstractSerializedData.writeInt32(super.seq);
        }
    }
    
    public static class TL_updates_differenceSlice extends updates_Difference
    {
        public static int constructor = -1459938943;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            final int int32 = abstractSerializedData.readInt32(b);
            final int n = 0;
            if (int32 != 481674261) {
                if (!b) {
                    return;
                }
                throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
            }
            else {
                for (int int33 = abstractSerializedData.readInt32(b), i = 0; i < int33; ++i) {
                    final Message tLdeserialize = Message.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.new_messages.add(tLdeserialize);
                }
                final int int34 = abstractSerializedData.readInt32(b);
                if (int34 != 481674261) {
                    if (!b) {
                        return;
                    }
                    throw new RuntimeException(String.format("wrong Vector magic, got %x", int34));
                }
                else {
                    for (int int35 = abstractSerializedData.readInt32(b), j = 0; j < int35; ++j) {
                        final EncryptedMessage tLdeserialize2 = EncryptedMessage.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                        if (tLdeserialize2 == null) {
                            return;
                        }
                        super.new_encrypted_messages.add(tLdeserialize2);
                    }
                    final int int36 = abstractSerializedData.readInt32(b);
                    if (int36 != 481674261) {
                        if (!b) {
                            return;
                        }
                        throw new RuntimeException(String.format("wrong Vector magic, got %x", int36));
                    }
                    else {
                        for (int int37 = abstractSerializedData.readInt32(b), k = 0; k < int37; ++k) {
                            final Update tLdeserialize3 = Update.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                            if (tLdeserialize3 == null) {
                                return;
                            }
                            super.other_updates.add(tLdeserialize3);
                        }
                        final int int38 = abstractSerializedData.readInt32(b);
                        if (int38 != 481674261) {
                            if (!b) {
                                return;
                            }
                            throw new RuntimeException(String.format("wrong Vector magic, got %x", int38));
                        }
                        else {
                            for (int int39 = abstractSerializedData.readInt32(b), l = 0; l < int39; ++l) {
                                final Chat tLdeserialize4 = Chat.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                                if (tLdeserialize4 == null) {
                                    return;
                                }
                                super.chats.add(tLdeserialize4);
                            }
                            final int int40 = abstractSerializedData.readInt32(b);
                            if (int40 == 481674261) {
                                for (int int41 = abstractSerializedData.readInt32(b), n2 = n; n2 < int41; ++n2) {
                                    final User tLdeserialize5 = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                                    if (tLdeserialize5 == null) {
                                        return;
                                    }
                                    super.users.add(tLdeserialize5);
                                }
                                super.intermediate_state = TL_updates_state.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                                return;
                            }
                            if (!b) {
                                return;
                            }
                            throw new RuntimeException(String.format("wrong Vector magic, got %x", int40));
                        }
                    }
                }
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updates_differenceSlice.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.new_messages.size();
            abstractSerializedData.writeInt32(size);
            final int n = 0;
            for (int i = 0; i < size; ++i) {
                super.new_messages.get(i).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size2 = super.new_encrypted_messages.size();
            abstractSerializedData.writeInt32(size2);
            for (int j = 0; j < size2; ++j) {
                super.new_encrypted_messages.get(j).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size3 = super.other_updates.size();
            abstractSerializedData.writeInt32(size3);
            for (int k = 0; k < size3; ++k) {
                super.other_updates.get(k).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size4 = super.chats.size();
            abstractSerializedData.writeInt32(size4);
            for (int l = 0; l < size4; ++l) {
                super.chats.get(l).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(481674261);
            final int size5 = super.users.size();
            abstractSerializedData.writeInt32(size5);
            for (int index = n; index < size5; ++index) {
                super.users.get(index).serializeToStream(abstractSerializedData);
            }
            super.intermediate_state.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_updates_differenceTooLong extends updates_Difference
    {
        public static int constructor = 1258196845;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.pts = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updates_differenceTooLong.constructor);
            abstractSerializedData.writeInt32(super.pts);
        }
    }
    
    public static class TL_updates_getChannelDifference extends TLObject
    {
        public static int constructor = 51854712;
        public InputChannel channel;
        public ChannelMessagesFilter filter;
        public int flags;
        public boolean force;
        public int limit;
        public int pts;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return updates_ChannelDifference.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updates_getChannelDifference.constructor);
            int flags;
            if (this.force) {
                flags = (this.flags | 0x1);
            }
            else {
                flags = (this.flags & 0xFFFFFFFE);
            }
            abstractSerializedData.writeInt32(this.flags = flags);
            this.channel.serializeToStream(abstractSerializedData);
            this.filter.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.pts);
            abstractSerializedData.writeInt32(this.limit);
        }
    }
    
    public static class TL_updates_getDifference extends TLObject
    {
        public static int constructor = 630429265;
        public int date;
        public int flags;
        public int pts;
        public int pts_total_limit;
        public int qts;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return updates_Difference.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updates_getDifference.constructor);
            abstractSerializedData.writeInt32(this.flags);
            abstractSerializedData.writeInt32(this.pts);
            if ((this.flags & 0x1) != 0x0) {
                abstractSerializedData.writeInt32(this.pts_total_limit);
            }
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeInt32(this.qts);
        }
    }
    
    public static class TL_updates_getState extends TLObject
    {
        public static int constructor = -304838614;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_updates_state.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updates_getState.constructor);
        }
    }
    
    public static class TL_updates_state extends TLObject
    {
        public static int constructor = -1519637954;
        public int date;
        public int pts;
        public int qts;
        public int seq;
        public int unread_count;
        
        public static TL_updates_state TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_updates_state.constructor == i) {
                final TL_updates_state tl_updates_state = new TL_updates_state();
                tl_updates_state.readParams(abstractSerializedData, b);
                return tl_updates_state;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_updates_state", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.pts = abstractSerializedData.readInt32(b);
            this.qts = abstractSerializedData.readInt32(b);
            this.date = abstractSerializedData.readInt32(b);
            this.seq = abstractSerializedData.readInt32(b);
            this.unread_count = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_updates_state.constructor);
            abstractSerializedData.writeInt32(this.pts);
            abstractSerializedData.writeInt32(this.qts);
            abstractSerializedData.writeInt32(this.date);
            abstractSerializedData.writeInt32(this.seq);
            abstractSerializedData.writeInt32(this.unread_count);
        }
    }
    
    public static class TL_upload_cdnFile extends upload_CdnFile
    {
        public static int constructor = -1449145777;
        
        @Override
        public void freeResources() {
            if (super.disableFree) {
                return;
            }
            final NativeByteBuffer bytes = super.bytes;
            if (bytes != null) {
                bytes.reuse();
                super.bytes = null;
            }
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.bytes = abstractSerializedData.readByteBuffer(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_upload_cdnFile.constructor);
            abstractSerializedData.writeByteBuffer(super.bytes);
        }
    }
    
    public static class TL_upload_cdnFileReuploadNeeded extends upload_CdnFile
    {
        public static int constructor = -290921362;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.request_token = abstractSerializedData.readByteArray(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_upload_cdnFileReuploadNeeded.constructor);
            abstractSerializedData.writeByteArray(super.request_token);
        }
    }
    
    public static class TL_upload_file extends upload_File
    {
        public static int constructor = 157948117;
        
        @Override
        public void freeResources() {
            if (super.disableFree) {
                return;
            }
            final NativeByteBuffer bytes = super.bytes;
            if (bytes != null) {
                bytes.reuse();
                super.bytes = null;
            }
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.type = storage_FileType.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.mtime = abstractSerializedData.readInt32(b);
            super.bytes = abstractSerializedData.readByteBuffer(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_upload_file.constructor);
            super.type.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(super.mtime);
            abstractSerializedData.writeByteBuffer(super.bytes);
        }
    }
    
    public static class TL_upload_fileCdnRedirect extends upload_File
    {
        public static int constructor = -242427324;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.dc_id = abstractSerializedData.readInt32(b);
            super.file_token = abstractSerializedData.readByteArray(b);
            super.encryption_key = abstractSerializedData.readByteArray(b);
            super.encryption_iv = abstractSerializedData.readByteArray(b);
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final TL_fileHash tLdeserialize = TL_fileHash.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.file_hashes.add(tLdeserialize);
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_upload_fileCdnRedirect.constructor);
            abstractSerializedData.writeInt32(super.dc_id);
            abstractSerializedData.writeByteArray(super.file_token);
            abstractSerializedData.writeByteArray(super.encryption_key);
            abstractSerializedData.writeByteArray(super.encryption_iv);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.file_hashes.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                super.file_hashes.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_upload_getCdnFile extends TLObject
    {
        public static int constructor = 536919235;
        public byte[] file_token;
        public int limit;
        public int offset;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return upload_CdnFile.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_upload_getCdnFile.constructor);
            abstractSerializedData.writeByteArray(this.file_token);
            abstractSerializedData.writeInt32(this.offset);
            abstractSerializedData.writeInt32(this.limit);
        }
    }
    
    public static class TL_upload_getCdnFileHashes extends TLObject
    {
        public static int constructor = 1302676017;
        public byte[] file_token;
        public int offset;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, int i, final boolean b) {
            final Vector vector = new Vector();
            int int32;
            TL_fileHash tLdeserialize;
            for (int32 = abstractSerializedData.readInt32(b), i = 0; i < int32; ++i) {
                tLdeserialize = TL_fileHash.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                if (tLdeserialize == null) {
                    return vector;
                }
                vector.objects.add(tLdeserialize);
            }
            return vector;
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_upload_getCdnFileHashes.constructor);
            abstractSerializedData.writeByteArray(this.file_token);
            abstractSerializedData.writeInt32(this.offset);
        }
    }
    
    public static class TL_upload_getFile extends TLObject
    {
        public static int constructor = -475607115;
        public int limit;
        public InputFileLocation location;
        public int offset;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return upload_File.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_upload_getFile.constructor);
            this.location.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.offset);
            abstractSerializedData.writeInt32(this.limit);
        }
    }
    
    public static class TL_upload_getFileHashes extends TLObject
    {
        public static int constructor = -956147407;
        public InputFileLocation location;
        public int offset;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, int i, final boolean b) {
            final Vector vector = new Vector();
            int int32;
            TL_fileHash tLdeserialize;
            for (int32 = abstractSerializedData.readInt32(b), i = 0; i < int32; ++i) {
                tLdeserialize = TL_fileHash.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                if (tLdeserialize == null) {
                    return vector;
                }
                vector.objects.add(tLdeserialize);
            }
            return vector;
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_upload_getFileHashes.constructor);
            this.location.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.offset);
        }
    }
    
    public static class TL_upload_getWebFile extends TLObject
    {
        public static int constructor = 619086221;
        public int limit;
        public InputWebFileLocation location;
        public int offset;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return TL_upload_webFile.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_upload_getWebFile.constructor);
            this.location.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.offset);
            abstractSerializedData.writeInt32(this.limit);
        }
    }
    
    public static class TL_upload_reuploadCdnFile extends TLObject
    {
        public static int constructor = -1691921240;
        public byte[] file_token;
        public byte[] request_token;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, int i, final boolean b) {
            final Vector vector = new Vector();
            int int32;
            TL_fileHash tLdeserialize;
            for (int32 = abstractSerializedData.readInt32(b), i = 0; i < int32; ++i) {
                tLdeserialize = TL_fileHash.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                if (tLdeserialize == null) {
                    return vector;
                }
                vector.objects.add(tLdeserialize);
            }
            return vector;
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_upload_reuploadCdnFile.constructor);
            abstractSerializedData.writeByteArray(this.file_token);
            abstractSerializedData.writeByteArray(this.request_token);
        }
    }
    
    public static class TL_upload_saveBigFilePart extends TLObject
    {
        public static int constructor = -562337987;
        public NativeByteBuffer bytes;
        public long file_id;
        public int file_part;
        public int file_total_parts;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void freeResources() {
            if (super.disableFree) {
                return;
            }
            final NativeByteBuffer bytes = this.bytes;
            if (bytes != null) {
                bytes.reuse();
                this.bytes = null;
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_upload_saveBigFilePart.constructor);
            abstractSerializedData.writeInt64(this.file_id);
            abstractSerializedData.writeInt32(this.file_part);
            abstractSerializedData.writeInt32(this.file_total_parts);
            abstractSerializedData.writeByteBuffer(this.bytes);
        }
    }
    
    public static class TL_upload_saveFilePart extends TLObject
    {
        public static int constructor = -1291540959;
        public NativeByteBuffer bytes;
        public long file_id;
        public int file_part;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return Bool.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void freeResources() {
            if (super.disableFree) {
                return;
            }
            final NativeByteBuffer bytes = this.bytes;
            if (bytes != null) {
                bytes.reuse();
                this.bytes = null;
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_upload_saveFilePart.constructor);
            abstractSerializedData.writeInt64(this.file_id);
            abstractSerializedData.writeInt32(this.file_part);
            abstractSerializedData.writeByteBuffer(this.bytes);
        }
    }
    
    public static class TL_upload_webFile extends TLObject
    {
        public static int constructor = 568808380;
        public NativeByteBuffer bytes;
        public storage_FileType file_type;
        public String mime_type;
        public int mtime;
        public int size;
        
        public static TL_upload_webFile TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_upload_webFile.constructor == i) {
                final TL_upload_webFile tl_upload_webFile = new TL_upload_webFile();
                tl_upload_webFile.readParams(abstractSerializedData, b);
                return tl_upload_webFile;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_upload_webFile", i));
        }
        
        @Override
        public void freeResources() {
            if (super.disableFree) {
                return;
            }
            final NativeByteBuffer bytes = this.bytes;
            if (bytes != null) {
                bytes.reuse();
                this.bytes = null;
            }
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.size = abstractSerializedData.readInt32(b);
            this.mime_type = abstractSerializedData.readString(b);
            this.file_type = storage_FileType.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            this.mtime = abstractSerializedData.readInt32(b);
            this.bytes = abstractSerializedData.readByteBuffer(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_upload_webFile.constructor);
            abstractSerializedData.writeInt32(this.size);
            abstractSerializedData.writeString(this.mime_type);
            this.file_type.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(this.mtime);
            abstractSerializedData.writeByteBuffer(this.bytes);
        }
    }
    
    public static class TL_urlAuthResultAccepted extends UrlAuthResult
    {
        public static int constructor = -1886646706;
        public String url;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.url = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_urlAuthResultAccepted.constructor);
            abstractSerializedData.writeString(this.url);
        }
    }
    
    public static class TL_urlAuthResultDefault extends UrlAuthResult
    {
        public static int constructor = -1445536993;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_urlAuthResultDefault.constructor);
        }
    }
    
    public static class TL_urlAuthResultRequest extends UrlAuthResult
    {
        public static int constructor = -1831650802;
        public User bot;
        public String domain;
        public int flags;
        public boolean request_write_access;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.flags = abstractSerializedData.readInt32(b);
            final int flags = this.flags;
            boolean request_write_access = true;
            if ((flags & 0x1) == 0x0) {
                request_write_access = false;
            }
            this.request_write_access = request_write_access;
            this.bot = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            this.domain = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_urlAuthResultRequest.constructor);
            int flags;
            if (this.request_write_access) {
                flags = (this.flags | 0x1);
            }
            else {
                flags = (this.flags & 0xFFFFFFFE);
            }
            abstractSerializedData.writeInt32(this.flags = flags);
            this.bot.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeString(this.domain);
        }
    }
    
    public static class TL_user extends User
    {
        public static int constructor = 773059779;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            final boolean b2 = false;
            super.self = ((flags & 0x400) != 0x0);
            super.contact = ((super.flags & 0x800) != 0x0);
            super.mutual_contact = ((super.flags & 0x1000) != 0x0);
            super.deleted = ((super.flags & 0x2000) != 0x0);
            super.bot = ((super.flags & 0x4000) != 0x0);
            super.bot_chat_history = ((super.flags & 0x8000) != 0x0);
            super.bot_nochats = ((super.flags & 0x10000) != 0x0);
            super.verified = ((super.flags & 0x20000) != 0x0);
            super.restricted = ((super.flags & 0x40000) != 0x0);
            super.min = ((super.flags & 0x100000) != 0x0);
            super.bot_inline_geo = ((super.flags & 0x200000) != 0x0);
            super.support = ((super.flags & 0x800000) != 0x0);
            boolean scam = b2;
            if ((super.flags & 0x1000000) != 0x0) {
                scam = true;
            }
            super.scam = scam;
            super.id = abstractSerializedData.readInt32(b);
            if ((super.flags & 0x1) != 0x0) {
                super.access_hash = abstractSerializedData.readInt64(b);
            }
            if ((super.flags & 0x2) != 0x0) {
                super.first_name = abstractSerializedData.readString(b);
            }
            if ((super.flags & 0x4) != 0x0) {
                super.last_name = abstractSerializedData.readString(b);
            }
            if ((super.flags & 0x8) != 0x0) {
                super.username = abstractSerializedData.readString(b);
            }
            if ((super.flags & 0x10) != 0x0) {
                super.phone = abstractSerializedData.readString(b);
            }
            if ((super.flags & 0x20) != 0x0) {
                super.photo = UserProfilePhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            if ((super.flags & 0x40) != 0x0) {
                super.status = UserStatus.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            if ((super.flags & 0x4000) != 0x0) {
                super.bot_info_version = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x40000) != 0x0) {
                super.restriction_reason = abstractSerializedData.readString(b);
            }
            if ((super.flags & 0x80000) != 0x0) {
                super.bot_inline_placeholder = abstractSerializedData.readString(b);
            }
            if ((super.flags & 0x400000) != 0x0) {
                super.lang_code = abstractSerializedData.readString(b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_user.constructor);
            int flags;
            if (super.self) {
                flags = (super.flags | 0x400);
            }
            else {
                flags = (super.flags & 0xFFFFFBFF);
            }
            super.flags = flags;
            int flags2;
            if (super.contact) {
                flags2 = (super.flags | 0x800);
            }
            else {
                flags2 = (super.flags & 0xFFFFF7FF);
            }
            super.flags = flags2;
            int flags3;
            if (super.mutual_contact) {
                flags3 = (super.flags | 0x1000);
            }
            else {
                flags3 = (super.flags & 0xFFFFEFFF);
            }
            super.flags = flags3;
            int flags4;
            if (super.deleted) {
                flags4 = (super.flags | 0x2000);
            }
            else {
                flags4 = (super.flags & 0xFFFFDFFF);
            }
            super.flags = flags4;
            int flags5;
            if (super.bot) {
                flags5 = (super.flags | 0x4000);
            }
            else {
                flags5 = (super.flags & 0xFFFFBFFF);
            }
            super.flags = flags5;
            int flags6;
            if (super.bot_chat_history) {
                flags6 = (super.flags | 0x8000);
            }
            else {
                flags6 = (super.flags & 0xFFFF7FFF);
            }
            super.flags = flags6;
            int flags7;
            if (super.bot_nochats) {
                flags7 = (super.flags | 0x10000);
            }
            else {
                flags7 = (super.flags & 0xFFFEFFFF);
            }
            super.flags = flags7;
            int flags8;
            if (super.verified) {
                flags8 = (super.flags | 0x20000);
            }
            else {
                flags8 = (super.flags & 0xFFFDFFFF);
            }
            super.flags = flags8;
            int flags9;
            if (super.restricted) {
                flags9 = (super.flags | 0x40000);
            }
            else {
                flags9 = (super.flags & 0xFFFBFFFF);
            }
            super.flags = flags9;
            int flags10;
            if (super.min) {
                flags10 = (super.flags | 0x100000);
            }
            else {
                flags10 = (super.flags & 0xFFEFFFFF);
            }
            super.flags = flags10;
            int flags11;
            if (super.bot_inline_geo) {
                flags11 = (super.flags | 0x200000);
            }
            else {
                flags11 = (super.flags & 0xFFDFFFFF);
            }
            super.flags = flags11;
            int flags12;
            if (super.support) {
                flags12 = (super.flags | 0x800000);
            }
            else {
                flags12 = (super.flags & 0xFF7FFFFF);
            }
            super.flags = flags12;
            int flags13;
            if (super.scam) {
                flags13 = (super.flags | 0x1000000);
            }
            else {
                flags13 = (super.flags & 0xFEFFFFFF);
            }
            abstractSerializedData.writeInt32(super.flags = flags13);
            abstractSerializedData.writeInt32(super.id);
            if ((super.flags & 0x1) != 0x0) {
                abstractSerializedData.writeInt64(super.access_hash);
            }
            if ((super.flags & 0x2) != 0x0) {
                abstractSerializedData.writeString(super.first_name);
            }
            if ((super.flags & 0x4) != 0x0) {
                abstractSerializedData.writeString(super.last_name);
            }
            if ((super.flags & 0x8) != 0x0) {
                abstractSerializedData.writeString(super.username);
            }
            if ((super.flags & 0x10) != 0x0) {
                abstractSerializedData.writeString(super.phone);
            }
            if ((super.flags & 0x20) != 0x0) {
                super.photo.serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x40) != 0x0) {
                super.status.serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x4000) != 0x0) {
                abstractSerializedData.writeInt32(super.bot_info_version);
            }
            if ((super.flags & 0x40000) != 0x0) {
                abstractSerializedData.writeString(super.restriction_reason);
            }
            if ((super.flags & 0x80000) != 0x0) {
                abstractSerializedData.writeString(super.bot_inline_placeholder);
            }
            if ((super.flags & 0x400000) != 0x0) {
                abstractSerializedData.writeString(super.lang_code);
            }
        }
    }
    
    public static class TL_userContact_old extends TL_userContact_old2
    {
        public static int constructor = -218397927;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt32(b);
            super.first_name = abstractSerializedData.readString(b);
            super.last_name = abstractSerializedData.readString(b);
            super.access_hash = abstractSerializedData.readInt64(b);
            super.phone = abstractSerializedData.readString(b);
            super.photo = UserProfilePhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.status = UserStatus.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_userContact_old.constructor);
            abstractSerializedData.writeInt32(super.id);
            abstractSerializedData.writeString(super.first_name);
            abstractSerializedData.writeString(super.last_name);
            abstractSerializedData.writeInt64(super.access_hash);
            abstractSerializedData.writeString(super.phone);
            super.photo.serializeToStream(abstractSerializedData);
            super.status.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_userContact_old2 extends User
    {
        public static int constructor = -894214632;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt32(b);
            super.first_name = abstractSerializedData.readString(b);
            super.last_name = abstractSerializedData.readString(b);
            super.username = abstractSerializedData.readString(b);
            super.access_hash = abstractSerializedData.readInt64(b);
            super.phone = abstractSerializedData.readString(b);
            super.photo = UserProfilePhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.status = UserStatus.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_userContact_old2.constructor);
            abstractSerializedData.writeInt32(super.id);
            abstractSerializedData.writeString(super.first_name);
            abstractSerializedData.writeString(super.last_name);
            abstractSerializedData.writeString(super.username);
            abstractSerializedData.writeInt64(super.access_hash);
            abstractSerializedData.writeString(super.phone);
            super.photo.serializeToStream(abstractSerializedData);
            super.status.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_userDeleted_old extends TL_userDeleted_old2
    {
        public static int constructor = -1298475060;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt32(b);
            super.first_name = abstractSerializedData.readString(b);
            super.last_name = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_userDeleted_old.constructor);
            abstractSerializedData.writeInt32(super.id);
            abstractSerializedData.writeString(super.first_name);
            abstractSerializedData.writeString(super.last_name);
        }
    }
    
    public static class TL_userDeleted_old2 extends User
    {
        public static int constructor = -704549510;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt32(b);
            super.first_name = abstractSerializedData.readString(b);
            super.last_name = abstractSerializedData.readString(b);
            super.username = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_userDeleted_old2.constructor);
            abstractSerializedData.writeInt32(super.id);
            abstractSerializedData.writeString(super.first_name);
            abstractSerializedData.writeString(super.last_name);
            abstractSerializedData.writeString(super.username);
        }
    }
    
    public static class TL_userEmpty extends User
    {
        public static int constructor = 537022650;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_userEmpty.constructor);
            abstractSerializedData.writeInt32(super.id);
        }
    }
    
    public static class TL_userForeign_old extends TL_userForeign_old2
    {
        public static int constructor = 1377093789;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt32(b);
            super.first_name = abstractSerializedData.readString(b);
            super.last_name = abstractSerializedData.readString(b);
            super.access_hash = abstractSerializedData.readInt64(b);
            super.photo = UserProfilePhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.status = UserStatus.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_userForeign_old.constructor);
            abstractSerializedData.writeInt32(super.id);
            abstractSerializedData.writeString(super.first_name);
            abstractSerializedData.writeString(super.last_name);
            abstractSerializedData.writeInt64(super.access_hash);
            super.photo.serializeToStream(abstractSerializedData);
            super.status.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_userForeign_old2 extends User
    {
        public static int constructor = 123533224;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt32(b);
            super.first_name = abstractSerializedData.readString(b);
            super.last_name = abstractSerializedData.readString(b);
            super.username = abstractSerializedData.readString(b);
            super.access_hash = abstractSerializedData.readInt64(b);
            super.photo = UserProfilePhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.status = UserStatus.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_userForeign_old2.constructor);
            abstractSerializedData.writeInt32(super.id);
            abstractSerializedData.writeString(super.first_name);
            abstractSerializedData.writeString(super.last_name);
            abstractSerializedData.writeString(super.username);
            abstractSerializedData.writeInt64(super.access_hash);
            super.photo.serializeToStream(abstractSerializedData);
            super.status.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_userFull extends UserFull
    {
        public static int constructor = 1951750604;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            final boolean b2 = true;
            super.blocked = ((flags & 0x1) != 0x0);
            super.phone_calls_available = ((super.flags & 0x10) != 0x0);
            super.phone_calls_private = ((super.flags & 0x20) != 0x0);
            super.can_pin_message = ((super.flags & 0x80) != 0x0 && b2);
            super.user = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            if ((super.flags & 0x2) != 0x0) {
                super.about = abstractSerializedData.readString(b);
            }
            super.link = TL_contacts_link.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            if ((super.flags & 0x4) != 0x0) {
                super.profile_photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            super.notify_settings = PeerNotifySettings.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            if ((super.flags & 0x8) != 0x0) {
                super.bot_info = BotInfo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            if ((super.flags & 0x40) != 0x0) {
                super.pinned_msg_id = abstractSerializedData.readInt32(b);
            }
            super.common_chats_count = abstractSerializedData.readInt32(b);
            if ((super.flags & 0x800) != 0x0) {
                super.folder_id = abstractSerializedData.readInt32(b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_userFull.constructor);
            int flags;
            if (super.blocked) {
                flags = (super.flags | 0x1);
            }
            else {
                flags = (super.flags & 0xFFFFFFFE);
            }
            super.flags = flags;
            int flags2;
            if (super.phone_calls_available) {
                flags2 = (super.flags | 0x10);
            }
            else {
                flags2 = (super.flags & 0xFFFFFFEF);
            }
            super.flags = flags2;
            int flags3;
            if (super.phone_calls_private) {
                flags3 = (super.flags | 0x20);
            }
            else {
                flags3 = (super.flags & 0xFFFFFFDF);
            }
            super.flags = flags3;
            int flags4;
            if (super.can_pin_message) {
                flags4 = (super.flags | 0x80);
            }
            else {
                flags4 = (super.flags & 0xFFFFFF7F);
            }
            abstractSerializedData.writeInt32(super.flags = flags4);
            super.user.serializeToStream(abstractSerializedData);
            if ((super.flags & 0x2) != 0x0) {
                abstractSerializedData.writeString(super.about);
            }
            super.link.serializeToStream(abstractSerializedData);
            if ((super.flags & 0x4) != 0x0) {
                super.profile_photo.serializeToStream(abstractSerializedData);
            }
            super.notify_settings.serializeToStream(abstractSerializedData);
            if ((super.flags & 0x8) != 0x0) {
                super.bot_info.serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x40) != 0x0) {
                abstractSerializedData.writeInt32(super.pinned_msg_id);
            }
            abstractSerializedData.writeInt32(super.common_chats_count);
            if ((super.flags & 0x800) != 0x0) {
                abstractSerializedData.writeInt32(super.folder_id);
            }
        }
    }
    
    public static class TL_userFull_layer98 extends TL_userFull
    {
        public static int constructor = -1901811583;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            final boolean b2 = true;
            super.blocked = ((flags & 0x1) != 0x0);
            super.phone_calls_available = ((super.flags & 0x10) != 0x0);
            super.phone_calls_private = ((super.flags & 0x20) != 0x0);
            super.can_pin_message = ((super.flags & 0x80) != 0x0 && b2);
            super.user = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            if ((super.flags & 0x2) != 0x0) {
                super.about = abstractSerializedData.readString(b);
            }
            super.link = TL_contacts_link.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            if ((super.flags & 0x4) != 0x0) {
                super.profile_photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            super.notify_settings = PeerNotifySettings.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            if ((super.flags & 0x8) != 0x0) {
                super.bot_info = BotInfo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            if ((super.flags & 0x40) != 0x0) {
                super.pinned_msg_id = abstractSerializedData.readInt32(b);
            }
            super.common_chats_count = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_userFull_layer98.constructor);
            int flags;
            if (super.blocked) {
                flags = (super.flags | 0x1);
            }
            else {
                flags = (super.flags & 0xFFFFFFFE);
            }
            super.flags = flags;
            int flags2;
            if (super.phone_calls_available) {
                flags2 = (super.flags | 0x10);
            }
            else {
                flags2 = (super.flags & 0xFFFFFFEF);
            }
            super.flags = flags2;
            int flags3;
            if (super.phone_calls_private) {
                flags3 = (super.flags | 0x20);
            }
            else {
                flags3 = (super.flags & 0xFFFFFFDF);
            }
            super.flags = flags3;
            int flags4;
            if (super.can_pin_message) {
                flags4 = (super.flags | 0x80);
            }
            else {
                flags4 = (super.flags & 0xFFFFFF7F);
            }
            abstractSerializedData.writeInt32(super.flags = flags4);
            super.user.serializeToStream(abstractSerializedData);
            if ((super.flags & 0x2) != 0x0) {
                abstractSerializedData.writeString(super.about);
            }
            super.link.serializeToStream(abstractSerializedData);
            if ((super.flags & 0x4) != 0x0) {
                super.profile_photo.serializeToStream(abstractSerializedData);
            }
            super.notify_settings.serializeToStream(abstractSerializedData);
            if ((super.flags & 0x8) != 0x0) {
                super.bot_info.serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x40) != 0x0) {
                abstractSerializedData.writeInt32(super.pinned_msg_id);
            }
            abstractSerializedData.writeInt32(super.common_chats_count);
        }
    }
    
    public static class TL_userProfilePhoto extends UserProfilePhoto
    {
        public static int constructor = -321430132;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.photo_id = abstractSerializedData.readInt64(b);
            super.photo_small = FileLocation.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.photo_big = FileLocation.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.dc_id = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_userProfilePhoto.constructor);
            abstractSerializedData.writeInt64(super.photo_id);
            super.photo_small.serializeToStream(abstractSerializedData);
            super.photo_big.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(super.dc_id);
        }
    }
    
    public static class TL_userProfilePhotoEmpty extends UserProfilePhoto
    {
        public static int constructor = 1326562017;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_userProfilePhotoEmpty.constructor);
        }
    }
    
    public static class TL_userProfilePhoto_layer97 extends TL_userProfilePhoto
    {
        public static int constructor = -715532088;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.photo_id = abstractSerializedData.readInt64(b);
            super.photo_small = FileLocation.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.photo_big = FileLocation.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_userProfilePhoto_layer97.constructor);
            abstractSerializedData.writeInt64(super.photo_id);
            super.photo_small.serializeToStream(abstractSerializedData);
            super.photo_big.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_userProfilePhoto_old extends TL_userProfilePhoto
    {
        public static int constructor = -1727196013;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.photo_small = FileLocation.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.photo_big = FileLocation.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_userProfilePhoto_old.constructor);
            super.photo_small.serializeToStream(abstractSerializedData);
            super.photo_big.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_userRequest_old extends TL_userRequest_old2
    {
        public static int constructor = 585682608;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt32(b);
            super.first_name = abstractSerializedData.readString(b);
            super.last_name = abstractSerializedData.readString(b);
            super.access_hash = abstractSerializedData.readInt64(b);
            super.phone = abstractSerializedData.readString(b);
            super.photo = UserProfilePhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.status = UserStatus.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_userRequest_old.constructor);
            abstractSerializedData.writeInt32(super.id);
            abstractSerializedData.writeString(super.first_name);
            abstractSerializedData.writeString(super.last_name);
            abstractSerializedData.writeInt64(super.access_hash);
            abstractSerializedData.writeString(super.phone);
            super.photo.serializeToStream(abstractSerializedData);
            super.status.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_userRequest_old2 extends User
    {
        public static int constructor = -640891665;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt32(b);
            super.first_name = abstractSerializedData.readString(b);
            super.last_name = abstractSerializedData.readString(b);
            super.username = abstractSerializedData.readString(b);
            super.access_hash = abstractSerializedData.readInt64(b);
            super.phone = abstractSerializedData.readString(b);
            super.photo = UserProfilePhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.status = UserStatus.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_userRequest_old2.constructor);
            abstractSerializedData.writeInt32(super.id);
            abstractSerializedData.writeString(super.first_name);
            abstractSerializedData.writeString(super.last_name);
            abstractSerializedData.writeString(super.username);
            abstractSerializedData.writeInt64(super.access_hash);
            abstractSerializedData.writeString(super.phone);
            super.photo.serializeToStream(abstractSerializedData);
            super.status.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_userSelf_old extends TL_userSelf_old3
    {
        public static int constructor = 1912944108;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt32(b);
            super.first_name = abstractSerializedData.readString(b);
            super.last_name = abstractSerializedData.readString(b);
            super.phone = abstractSerializedData.readString(b);
            super.photo = UserProfilePhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.status = UserStatus.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.inactive = abstractSerializedData.readBool(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_userSelf_old.constructor);
            abstractSerializedData.writeInt32(super.id);
            abstractSerializedData.writeString(super.first_name);
            abstractSerializedData.writeString(super.last_name);
            abstractSerializedData.writeString(super.phone);
            super.photo.serializeToStream(abstractSerializedData);
            super.status.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeBool(super.inactive);
        }
    }
    
    public static class TL_userSelf_old2 extends TL_userSelf_old3
    {
        public static int constructor = 1879553105;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt32(b);
            super.first_name = abstractSerializedData.readString(b);
            super.last_name = abstractSerializedData.readString(b);
            super.username = abstractSerializedData.readString(b);
            super.phone = abstractSerializedData.readString(b);
            super.photo = UserProfilePhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.status = UserStatus.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.inactive = abstractSerializedData.readBool(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_userSelf_old2.constructor);
            abstractSerializedData.writeInt32(super.id);
            abstractSerializedData.writeString(super.first_name);
            abstractSerializedData.writeString(super.last_name);
            abstractSerializedData.writeString(super.username);
            abstractSerializedData.writeString(super.phone);
            super.photo.serializeToStream(abstractSerializedData);
            super.status.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeBool(super.inactive);
        }
    }
    
    public static class TL_userSelf_old3 extends User
    {
        public static int constructor = 476112392;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt32(b);
            super.first_name = abstractSerializedData.readString(b);
            super.last_name = abstractSerializedData.readString(b);
            super.username = abstractSerializedData.readString(b);
            super.phone = abstractSerializedData.readString(b);
            super.photo = UserProfilePhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.status = UserStatus.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_userSelf_old3.constructor);
            abstractSerializedData.writeInt32(super.id);
            abstractSerializedData.writeString(super.first_name);
            abstractSerializedData.writeString(super.last_name);
            abstractSerializedData.writeString(super.username);
            abstractSerializedData.writeString(super.phone);
            super.photo.serializeToStream(abstractSerializedData);
            super.status.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_userStatusEmpty extends UserStatus
    {
        public static int constructor = 164646985;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_userStatusEmpty.constructor);
        }
    }
    
    public static class TL_userStatusLastMonth extends UserStatus
    {
        public static int constructor = 2011940674;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_userStatusLastMonth.constructor);
        }
    }
    
    public static class TL_userStatusLastWeek extends UserStatus
    {
        public static int constructor = 129960444;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_userStatusLastWeek.constructor);
        }
    }
    
    public static class TL_userStatusOffline extends UserStatus
    {
        public static int constructor = 9203775;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.expires = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_userStatusOffline.constructor);
            abstractSerializedData.writeInt32(super.expires);
        }
    }
    
    public static class TL_userStatusOnline extends UserStatus
    {
        public static int constructor = -306628279;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.expires = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_userStatusOnline.constructor);
            abstractSerializedData.writeInt32(super.expires);
        }
    }
    
    public static class TL_userStatusRecently extends UserStatus
    {
        public static int constructor = -496024847;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_userStatusRecently.constructor);
        }
    }
    
    public static class TL_user_layer65 extends TL_user
    {
        public static int constructor = -787638374;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            final boolean b2 = false;
            super.self = ((flags & 0x400) != 0x0);
            super.contact = ((super.flags & 0x800) != 0x0);
            super.mutual_contact = ((super.flags & 0x1000) != 0x0);
            super.deleted = ((super.flags & 0x2000) != 0x0);
            super.bot = ((super.flags & 0x4000) != 0x0);
            super.bot_chat_history = ((super.flags & 0x8000) != 0x0);
            super.bot_nochats = ((super.flags & 0x10000) != 0x0);
            super.verified = ((super.flags & 0x20000) != 0x0);
            super.restricted = ((super.flags & 0x40000) != 0x0);
            super.min = ((super.flags & 0x100000) != 0x0);
            boolean bot_inline_geo = b2;
            if ((super.flags & 0x200000) != 0x0) {
                bot_inline_geo = true;
            }
            super.bot_inline_geo = bot_inline_geo;
            super.id = abstractSerializedData.readInt32(b);
            if ((super.flags & 0x1) != 0x0) {
                super.access_hash = abstractSerializedData.readInt64(b);
            }
            if ((super.flags & 0x2) != 0x0) {
                super.first_name = abstractSerializedData.readString(b);
            }
            if ((super.flags & 0x4) != 0x0) {
                super.last_name = abstractSerializedData.readString(b);
            }
            if ((super.flags & 0x8) != 0x0) {
                super.username = abstractSerializedData.readString(b);
            }
            if ((super.flags & 0x10) != 0x0) {
                super.phone = abstractSerializedData.readString(b);
            }
            if ((super.flags & 0x20) != 0x0) {
                super.photo = UserProfilePhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            if ((super.flags & 0x40) != 0x0) {
                super.status = UserStatus.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            if ((super.flags & 0x4000) != 0x0) {
                super.bot_info_version = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x40000) != 0x0) {
                super.restriction_reason = abstractSerializedData.readString(b);
            }
            if ((super.flags & 0x80000) != 0x0) {
                super.bot_inline_placeholder = abstractSerializedData.readString(b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_user_layer65.constructor);
            int flags;
            if (super.self) {
                flags = (super.flags | 0x400);
            }
            else {
                flags = (super.flags & 0xFFFFFBFF);
            }
            super.flags = flags;
            int flags2;
            if (super.contact) {
                flags2 = (super.flags | 0x800);
            }
            else {
                flags2 = (super.flags & 0xFFFFF7FF);
            }
            super.flags = flags2;
            int flags3;
            if (super.mutual_contact) {
                flags3 = (super.flags | 0x1000);
            }
            else {
                flags3 = (super.flags & 0xFFFFEFFF);
            }
            super.flags = flags3;
            int flags4;
            if (super.deleted) {
                flags4 = (super.flags | 0x2000);
            }
            else {
                flags4 = (super.flags & 0xFFFFDFFF);
            }
            super.flags = flags4;
            int flags5;
            if (super.bot) {
                flags5 = (super.flags | 0x4000);
            }
            else {
                flags5 = (super.flags & 0xFFFFBFFF);
            }
            super.flags = flags5;
            int flags6;
            if (super.bot_chat_history) {
                flags6 = (super.flags | 0x8000);
            }
            else {
                flags6 = (super.flags & 0xFFFF7FFF);
            }
            super.flags = flags6;
            int flags7;
            if (super.bot_nochats) {
                flags7 = (super.flags | 0x10000);
            }
            else {
                flags7 = (super.flags & 0xFFFEFFFF);
            }
            super.flags = flags7;
            int flags8;
            if (super.verified) {
                flags8 = (super.flags | 0x20000);
            }
            else {
                flags8 = (super.flags & 0xFFFDFFFF);
            }
            super.flags = flags8;
            int flags9;
            if (super.restricted) {
                flags9 = (super.flags | 0x40000);
            }
            else {
                flags9 = (super.flags & 0xFFFBFFFF);
            }
            super.flags = flags9;
            int flags10;
            if (super.min) {
                flags10 = (super.flags | 0x100000);
            }
            else {
                flags10 = (super.flags & 0xFFEFFFFF);
            }
            super.flags = flags10;
            int flags11;
            if (super.bot_inline_geo) {
                flags11 = (super.flags | 0x200000);
            }
            else {
                flags11 = (super.flags & 0xFFDFFFFF);
            }
            abstractSerializedData.writeInt32(super.flags = flags11);
            abstractSerializedData.writeInt32(super.id);
            if ((super.flags & 0x1) != 0x0) {
                abstractSerializedData.writeInt64(super.access_hash);
            }
            if ((super.flags & 0x2) != 0x0) {
                abstractSerializedData.writeString(super.first_name);
            }
            if ((super.flags & 0x4) != 0x0) {
                abstractSerializedData.writeString(super.last_name);
            }
            if ((super.flags & 0x8) != 0x0) {
                abstractSerializedData.writeString(super.username);
            }
            if ((super.flags & 0x10) != 0x0) {
                abstractSerializedData.writeString(super.phone);
            }
            if ((super.flags & 0x20) != 0x0) {
                super.photo.serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x40) != 0x0) {
                super.status.serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x4000) != 0x0) {
                abstractSerializedData.writeInt32(super.bot_info_version);
            }
            if ((super.flags & 0x40000) != 0x0) {
                abstractSerializedData.writeString(super.restriction_reason);
            }
            if ((super.flags & 0x80000) != 0x0) {
                abstractSerializedData.writeString(super.bot_inline_placeholder);
            }
        }
    }
    
    public static class TL_user_old extends TL_user
    {
        public static int constructor = 585404530;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            final boolean b2 = false;
            super.self = ((flags & 0x400) != 0x0);
            super.contact = ((super.flags & 0x800) != 0x0);
            super.mutual_contact = ((super.flags & 0x1000) != 0x0);
            super.deleted = ((super.flags & 0x2000) != 0x0);
            super.bot = ((super.flags & 0x4000) != 0x0);
            super.bot_chat_history = ((super.flags & 0x8000) != 0x0);
            super.bot_nochats = ((super.flags & 0x10000) != 0x0);
            super.verified = ((super.flags & 0x20000) != 0x0);
            boolean explicit_content = b2;
            if ((super.flags & 0x40000) != 0x0) {
                explicit_content = true;
            }
            super.explicit_content = explicit_content;
            super.id = abstractSerializedData.readInt32(b);
            if ((super.flags & 0x1) != 0x0) {
                super.access_hash = abstractSerializedData.readInt64(b);
            }
            if ((super.flags & 0x2) != 0x0) {
                super.first_name = abstractSerializedData.readString(b);
            }
            if ((super.flags & 0x4) != 0x0) {
                super.last_name = abstractSerializedData.readString(b);
            }
            if ((super.flags & 0x8) != 0x0) {
                super.username = abstractSerializedData.readString(b);
            }
            if ((super.flags & 0x10) != 0x0) {
                super.phone = abstractSerializedData.readString(b);
            }
            if ((super.flags & 0x20) != 0x0) {
                super.photo = UserProfilePhoto.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            if ((super.flags & 0x40) != 0x0) {
                super.status = UserStatus.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            if ((super.flags & 0x4000) != 0x0) {
                super.bot_info_version = abstractSerializedData.readInt32(b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_user_old.constructor);
            int flags;
            if (super.self) {
                flags = (super.flags | 0x400);
            }
            else {
                flags = (super.flags & 0xFFFFFBFF);
            }
            super.flags = flags;
            int flags2;
            if (super.contact) {
                flags2 = (super.flags | 0x800);
            }
            else {
                flags2 = (super.flags & 0xFFFFF7FF);
            }
            super.flags = flags2;
            int flags3;
            if (super.mutual_contact) {
                flags3 = (super.flags | 0x1000);
            }
            else {
                flags3 = (super.flags & 0xFFFFEFFF);
            }
            super.flags = flags3;
            int flags4;
            if (super.deleted) {
                flags4 = (super.flags | 0x2000);
            }
            else {
                flags4 = (super.flags & 0xFFFFDFFF);
            }
            super.flags = flags4;
            int flags5;
            if (super.bot) {
                flags5 = (super.flags | 0x4000);
            }
            else {
                flags5 = (super.flags & 0xFFFFBFFF);
            }
            super.flags = flags5;
            int flags6;
            if (super.bot_chat_history) {
                flags6 = (super.flags | 0x8000);
            }
            else {
                flags6 = (super.flags & 0xFFFF7FFF);
            }
            super.flags = flags6;
            int flags7;
            if (super.bot_nochats) {
                flags7 = (super.flags | 0x10000);
            }
            else {
                flags7 = (super.flags & 0xFFFEFFFF);
            }
            super.flags = flags7;
            int flags8;
            if (super.verified) {
                flags8 = (super.flags | 0x20000);
            }
            else {
                flags8 = (super.flags & 0xFFFDFFFF);
            }
            super.flags = flags8;
            int flags9;
            if (super.explicit_content) {
                flags9 = (super.flags | 0x40000);
            }
            else {
                flags9 = (super.flags & 0xFFFBFFFF);
            }
            abstractSerializedData.writeInt32(super.flags = flags9);
            abstractSerializedData.writeInt32(super.id);
            if ((super.flags & 0x1) != 0x0) {
                abstractSerializedData.writeInt64(super.access_hash);
            }
            if ((super.flags & 0x2) != 0x0) {
                abstractSerializedData.writeString(super.first_name);
            }
            if ((super.flags & 0x4) != 0x0) {
                abstractSerializedData.writeString(super.last_name);
            }
            if ((super.flags & 0x8) != 0x0) {
                abstractSerializedData.writeString(super.username);
            }
            if ((super.flags & 0x10) != 0x0) {
                abstractSerializedData.writeString(super.phone);
            }
            if ((super.flags & 0x20) != 0x0) {
                super.photo.serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x40) != 0x0) {
                super.status.serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x4000) != 0x0) {
                abstractSerializedData.writeInt32(super.bot_info_version);
            }
        }
    }
    
    public static class TL_users_getFullUser extends TLObject
    {
        public static int constructor = -902781519;
        public InputUser id;
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, final int n, final boolean b) {
            return UserFull.TLdeserialize(abstractSerializedData, n, b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_users_getFullUser.constructor);
            this.id.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_users_getUsers extends TLObject
    {
        public static int constructor = 227648840;
        public ArrayList<InputUser> id;
        
        public TL_users_getUsers() {
            this.id = new ArrayList<InputUser>();
        }
        
        @Override
        public TLObject deserializeResponse(final AbstractSerializedData abstractSerializedData, int i, final boolean b) {
            final Vector vector = new Vector();
            int int32;
            User tLdeserialize;
            for (int32 = abstractSerializedData.readInt32(b), i = 0; i < int32; ++i) {
                tLdeserialize = User.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                if (tLdeserialize == null) {
                    return vector;
                }
                vector.objects.add(tLdeserialize);
            }
            return vector;
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_users_getUsers.constructor);
            abstractSerializedData.writeInt32(481674261);
            final int size = this.id.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                this.id.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_videoEmpty_layer45 extends Video
    {
        public static int constructor = -1056548696;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt64(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_videoEmpty_layer45.constructor);
            abstractSerializedData.writeInt64(super.id);
        }
    }
    
    public static class TL_videoEncrypted extends TL_video_layer45
    {
        public static int constructor = 1431655763;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt64(b);
            super.access_hash = abstractSerializedData.readInt64(b);
            super.user_id = abstractSerializedData.readInt32(b);
            super.date = abstractSerializedData.readInt32(b);
            super.caption = abstractSerializedData.readString(b);
            super.duration = abstractSerializedData.readInt32(b);
            super.size = abstractSerializedData.readInt32(b);
            super.thumb = PhotoSize.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.dc_id = abstractSerializedData.readInt32(b);
            super.w = abstractSerializedData.readInt32(b);
            super.h = abstractSerializedData.readInt32(b);
            super.key = abstractSerializedData.readByteArray(b);
            super.iv = abstractSerializedData.readByteArray(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_videoEncrypted.constructor);
            abstractSerializedData.writeInt64(super.id);
            abstractSerializedData.writeInt64(super.access_hash);
            abstractSerializedData.writeInt32(super.user_id);
            abstractSerializedData.writeInt32(super.date);
            abstractSerializedData.writeString(super.caption);
            abstractSerializedData.writeInt32(super.duration);
            abstractSerializedData.writeInt32(super.size);
            super.thumb.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(super.dc_id);
            abstractSerializedData.writeInt32(super.w);
            abstractSerializedData.writeInt32(super.h);
            abstractSerializedData.writeByteArray(super.key);
            abstractSerializedData.writeByteArray(super.iv);
        }
    }
    
    public static class TL_video_layer45 extends Video
    {
        public static int constructor = -148338733;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt64(b);
            super.access_hash = abstractSerializedData.readInt64(b);
            super.date = abstractSerializedData.readInt32(b);
            super.duration = abstractSerializedData.readInt32(b);
            super.mime_type = abstractSerializedData.readString(b);
            super.size = abstractSerializedData.readInt32(b);
            super.thumb = PhotoSize.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.dc_id = abstractSerializedData.readInt32(b);
            super.w = abstractSerializedData.readInt32(b);
            super.h = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_video_layer45.constructor);
            abstractSerializedData.writeInt64(super.id);
            abstractSerializedData.writeInt64(super.access_hash);
            abstractSerializedData.writeInt32(super.date);
            abstractSerializedData.writeInt32(super.duration);
            abstractSerializedData.writeString(super.mime_type);
            abstractSerializedData.writeInt32(super.size);
            super.thumb.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(super.dc_id);
            abstractSerializedData.writeInt32(super.w);
            abstractSerializedData.writeInt32(super.h);
        }
    }
    
    public static class TL_video_old extends TL_video_layer45
    {
        public static int constructor = 1510253727;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt64(b);
            super.access_hash = abstractSerializedData.readInt64(b);
            super.user_id = abstractSerializedData.readInt32(b);
            super.date = abstractSerializedData.readInt32(b);
            super.caption = abstractSerializedData.readString(b);
            super.duration = abstractSerializedData.readInt32(b);
            super.size = abstractSerializedData.readInt32(b);
            super.thumb = PhotoSize.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.dc_id = abstractSerializedData.readInt32(b);
            super.w = abstractSerializedData.readInt32(b);
            super.h = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_video_old.constructor);
            abstractSerializedData.writeInt64(super.id);
            abstractSerializedData.writeInt64(super.access_hash);
            abstractSerializedData.writeInt32(super.user_id);
            abstractSerializedData.writeInt32(super.date);
            abstractSerializedData.writeString(super.caption);
            abstractSerializedData.writeInt32(super.duration);
            abstractSerializedData.writeInt32(super.size);
            super.thumb.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(super.dc_id);
            abstractSerializedData.writeInt32(super.w);
            abstractSerializedData.writeInt32(super.h);
        }
    }
    
    public static class TL_video_old2 extends TL_video_layer45
    {
        public static int constructor = 948937617;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt64(b);
            super.access_hash = abstractSerializedData.readInt64(b);
            super.user_id = abstractSerializedData.readInt32(b);
            super.date = abstractSerializedData.readInt32(b);
            super.caption = abstractSerializedData.readString(b);
            super.duration = abstractSerializedData.readInt32(b);
            super.mime_type = abstractSerializedData.readString(b);
            super.size = abstractSerializedData.readInt32(b);
            super.thumb = PhotoSize.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.dc_id = abstractSerializedData.readInt32(b);
            super.w = abstractSerializedData.readInt32(b);
            super.h = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_video_old2.constructor);
            abstractSerializedData.writeInt64(super.id);
            abstractSerializedData.writeInt64(super.access_hash);
            abstractSerializedData.writeInt32(super.user_id);
            abstractSerializedData.writeInt32(super.date);
            abstractSerializedData.writeString(super.caption);
            abstractSerializedData.writeInt32(super.duration);
            abstractSerializedData.writeString(super.mime_type);
            abstractSerializedData.writeInt32(super.size);
            super.thumb.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(super.dc_id);
            abstractSerializedData.writeInt32(super.w);
            abstractSerializedData.writeInt32(super.h);
        }
    }
    
    public static class TL_video_old3 extends TL_video_layer45
    {
        public static int constructor = -291550643;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt64(b);
            super.access_hash = abstractSerializedData.readInt64(b);
            super.user_id = abstractSerializedData.readInt32(b);
            super.date = abstractSerializedData.readInt32(b);
            super.duration = abstractSerializedData.readInt32(b);
            super.size = abstractSerializedData.readInt32(b);
            super.thumb = PhotoSize.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            super.dc_id = abstractSerializedData.readInt32(b);
            super.w = abstractSerializedData.readInt32(b);
            super.h = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_video_old3.constructor);
            abstractSerializedData.writeInt64(super.id);
            abstractSerializedData.writeInt64(super.access_hash);
            abstractSerializedData.writeInt32(super.user_id);
            abstractSerializedData.writeInt32(super.date);
            abstractSerializedData.writeInt32(super.duration);
            abstractSerializedData.writeInt32(super.size);
            super.thumb.serializeToStream(abstractSerializedData);
            abstractSerializedData.writeInt32(super.dc_id);
            abstractSerializedData.writeInt32(super.w);
            abstractSerializedData.writeInt32(super.h);
        }
    }
    
    public static class TL_wallPaper extends WallPaper
    {
        public static int constructor = -1539849235;
        public long access_hash;
        public boolean creator;
        public boolean dark;
        public Document document;
        public int flags;
        public long id;
        public boolean isDefault;
        public boolean pattern;
        public TL_wallPaperSettings settings;
        public String slug;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.id = abstractSerializedData.readInt64(b);
            this.flags = abstractSerializedData.readInt32(b);
            final int flags = this.flags;
            final boolean b2 = true;
            this.creator = ((flags & 0x1) != 0x0);
            this.isDefault = ((this.flags & 0x2) != 0x0);
            this.pattern = ((this.flags & 0x8) != 0x0);
            this.dark = ((this.flags & 0x10) != 0x0 && b2);
            this.access_hash = abstractSerializedData.readInt64(b);
            this.slug = abstractSerializedData.readString(b);
            this.document = Document.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            if ((this.flags & 0x4) != 0x0) {
                this.settings = TL_wallPaperSettings.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_wallPaper.constructor);
            abstractSerializedData.writeInt64(this.id);
            int flags;
            if (this.creator) {
                flags = (this.flags | 0x1);
            }
            else {
                flags = (this.flags & 0xFFFFFFFE);
            }
            this.flags = flags;
            int flags2;
            if (this.isDefault) {
                flags2 = (this.flags | 0x2);
            }
            else {
                flags2 = (this.flags & 0xFFFFFFFD);
            }
            this.flags = flags2;
            int flags3;
            if (this.pattern) {
                flags3 = (this.flags | 0x8);
            }
            else {
                flags3 = (this.flags & 0xFFFFFFF7);
            }
            this.flags = flags3;
            int flags4;
            if (this.dark) {
                flags4 = (this.flags | 0x10);
            }
            else {
                flags4 = (this.flags & 0xFFFFFFEF);
            }
            abstractSerializedData.writeInt32(this.flags = flags4);
            abstractSerializedData.writeInt64(this.access_hash);
            abstractSerializedData.writeString(this.slug);
            this.document.serializeToStream(abstractSerializedData);
            if ((this.flags & 0x4) != 0x0) {
                this.settings.serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_wallPaperSettings extends TLObject
    {
        public static int constructor = -1590738760;
        public int background_color;
        public boolean blur;
        public int flags;
        public int intensity;
        public boolean motion;
        
        public static TL_wallPaperSettings TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_wallPaperSettings.constructor == i) {
                final TL_wallPaperSettings tl_wallPaperSettings = new TL_wallPaperSettings();
                tl_wallPaperSettings.readParams(abstractSerializedData, b);
                return tl_wallPaperSettings;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_wallPaperSettings", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.flags = abstractSerializedData.readInt32(b);
            final int flags = this.flags;
            final boolean b2 = false;
            this.blur = ((flags & 0x2) != 0x0);
            boolean motion = b2;
            if ((this.flags & 0x4) != 0x0) {
                motion = true;
            }
            this.motion = motion;
            if ((this.flags & 0x1) != 0x0) {
                this.background_color = abstractSerializedData.readInt32(b);
            }
            if ((this.flags & 0x8) != 0x0) {
                this.intensity = abstractSerializedData.readInt32(b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_wallPaperSettings.constructor);
            int flags;
            if (this.blur) {
                flags = (this.flags | 0x2);
            }
            else {
                flags = (this.flags & 0xFFFFFFFD);
            }
            this.flags = flags;
            int flags2;
            if (this.motion) {
                flags2 = (this.flags | 0x4);
            }
            else {
                flags2 = (this.flags & 0xFFFFFFFB);
            }
            abstractSerializedData.writeInt32(this.flags = flags2);
            if ((this.flags & 0x1) != 0x0) {
                abstractSerializedData.writeInt32(this.background_color);
            }
            if ((this.flags & 0x8) != 0x0) {
                abstractSerializedData.writeInt32(this.intensity);
            }
        }
    }
    
    public static class TL_wallPaper_layer94 extends TL_wallPaper
    {
        public static int constructor = -263220756;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt64(b);
            super.flags = abstractSerializedData.readInt32(b);
            final int flags = super.flags;
            final boolean b2 = true;
            super.creator = ((flags & 0x1) != 0x0);
            super.isDefault = ((super.flags & 0x2) != 0x0 && b2);
            super.access_hash = abstractSerializedData.readInt64(b);
            super.slug = abstractSerializedData.readString(b);
            super.document = Document.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_wallPaper_layer94.constructor);
            abstractSerializedData.writeInt64(super.id);
            int flags;
            if (super.creator) {
                flags = (super.flags | 0x1);
            }
            else {
                flags = (super.flags & 0xFFFFFFFE);
            }
            super.flags = flags;
            int flags2;
            if (super.isDefault) {
                flags2 = (super.flags | 0x2);
            }
            else {
                flags2 = (super.flags & 0xFFFFFFFD);
            }
            abstractSerializedData.writeInt32(super.flags = flags2);
            abstractSerializedData.writeInt64(super.access_hash);
            abstractSerializedData.writeString(super.slug);
            super.document.serializeToStream(abstractSerializedData);
        }
    }
    
    public static class TL_webAuthorization extends TLObject
    {
        public static int constructor = -892779534;
        public int bot_id;
        public String browser;
        public int date_active;
        public int date_created;
        public String domain;
        public long hash;
        public String ip;
        public String platform;
        public String region;
        
        public static TL_webAuthorization TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            if (TL_webAuthorization.constructor == i) {
                final TL_webAuthorization tl_webAuthorization = new TL_webAuthorization();
                tl_webAuthorization.readParams(abstractSerializedData, b);
                return tl_webAuthorization;
            }
            if (!b) {
                return null;
            }
            throw new RuntimeException(String.format("can't parse magic %x in TL_webAuthorization", i));
        }
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            this.hash = abstractSerializedData.readInt64(b);
            this.bot_id = abstractSerializedData.readInt32(b);
            this.domain = abstractSerializedData.readString(b);
            this.browser = abstractSerializedData.readString(b);
            this.platform = abstractSerializedData.readString(b);
            this.date_created = abstractSerializedData.readInt32(b);
            this.date_active = abstractSerializedData.readInt32(b);
            this.ip = abstractSerializedData.readString(b);
            this.region = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_webAuthorization.constructor);
            abstractSerializedData.writeInt64(this.hash);
            abstractSerializedData.writeInt32(this.bot_id);
            abstractSerializedData.writeString(this.domain);
            abstractSerializedData.writeString(this.browser);
            abstractSerializedData.writeString(this.platform);
            abstractSerializedData.writeInt32(this.date_created);
            abstractSerializedData.writeInt32(this.date_active);
            abstractSerializedData.writeString(this.ip);
            abstractSerializedData.writeString(this.region);
        }
    }
    
    public static class TL_webDocument extends WebDocument
    {
        public static int constructor = 475467473;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.url = abstractSerializedData.readString(b);
            super.access_hash = abstractSerializedData.readInt64(b);
            super.size = abstractSerializedData.readInt32(b);
            super.mime_type = abstractSerializedData.readString(b);
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final DocumentAttribute tLdeserialize = DocumentAttribute.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.attributes.add(tLdeserialize);
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_webDocument.constructor);
            abstractSerializedData.writeString(super.url);
            abstractSerializedData.writeInt64(super.access_hash);
            abstractSerializedData.writeInt32(super.size);
            abstractSerializedData.writeString(super.mime_type);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.attributes.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                super.attributes.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_webDocumentNoProxy extends WebDocument
    {
        public static int constructor = -104284986;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.url = abstractSerializedData.readString(b);
            super.size = abstractSerializedData.readInt32(b);
            super.mime_type = abstractSerializedData.readString(b);
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final DocumentAttribute tLdeserialize = DocumentAttribute.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.attributes.add(tLdeserialize);
                    ++i;
                }
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_webDocumentNoProxy.constructor);
            abstractSerializedData.writeString(super.url);
            abstractSerializedData.writeInt32(super.size);
            abstractSerializedData.writeString(super.mime_type);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.attributes.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                super.attributes.get(i).serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_webDocument_layer81 extends TL_webDocument
    {
        public static int constructor = -971322408;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.url = abstractSerializedData.readString(b);
            super.access_hash = abstractSerializedData.readInt64(b);
            super.size = abstractSerializedData.readInt32(b);
            super.mime_type = abstractSerializedData.readString(b);
            final int int32 = abstractSerializedData.readInt32(b);
            int i = 0;
            if (int32 == 481674261) {
                while (i < abstractSerializedData.readInt32(b)) {
                    final DocumentAttribute tLdeserialize = DocumentAttribute.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
                    if (tLdeserialize == null) {
                        return;
                    }
                    super.attributes.add(tLdeserialize);
                    ++i;
                }
                abstractSerializedData.readInt32(b);
                return;
            }
            if (!b) {
                return;
            }
            throw new RuntimeException(String.format("wrong Vector magic, got %x", int32));
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_webDocument_layer81.constructor);
            abstractSerializedData.writeString(super.url);
            abstractSerializedData.writeInt64(super.access_hash);
            abstractSerializedData.writeInt32(super.size);
            abstractSerializedData.writeString(super.mime_type);
            abstractSerializedData.writeInt32(481674261);
            final int size = super.attributes.size();
            abstractSerializedData.writeInt32(size);
            for (int i = 0; i < size; ++i) {
                super.attributes.get(i).serializeToStream(abstractSerializedData);
            }
            abstractSerializedData.writeInt32(0);
        }
    }
    
    public static class TL_webPage extends WebPage
    {
        public static int constructor = 1594340540;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            super.id = abstractSerializedData.readInt64(b);
            super.url = abstractSerializedData.readString(b);
            super.display_url = abstractSerializedData.readString(b);
            super.hash = abstractSerializedData.readInt32(b);
            if ((super.flags & 0x1) != 0x0) {
                super.type = abstractSerializedData.readString(b);
            }
            if ((super.flags & 0x2) != 0x0) {
                super.site_name = abstractSerializedData.readString(b);
            }
            if ((super.flags & 0x4) != 0x0) {
                super.title = abstractSerializedData.readString(b);
            }
            if ((super.flags & 0x8) != 0x0) {
                super.description = abstractSerializedData.readString(b);
            }
            if ((super.flags & 0x10) != 0x0) {
                super.photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            if ((super.flags & 0x20) != 0x0) {
                super.embed_url = abstractSerializedData.readString(b);
            }
            if ((super.flags & 0x20) != 0x0) {
                super.embed_type = abstractSerializedData.readString(b);
            }
            if ((super.flags & 0x40) != 0x0) {
                super.embed_width = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x40) != 0x0) {
                super.embed_height = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x80) != 0x0) {
                super.duration = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x100) != 0x0) {
                super.author = abstractSerializedData.readString(b);
            }
            if ((super.flags & 0x200) != 0x0) {
                super.document = Document.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            if ((super.flags & 0x400) != 0x0) {
                super.cached_page = Page.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_webPage.constructor);
            abstractSerializedData.writeInt32(super.flags);
            abstractSerializedData.writeInt64(super.id);
            abstractSerializedData.writeString(super.url);
            abstractSerializedData.writeString(super.display_url);
            abstractSerializedData.writeInt32(super.hash);
            if ((super.flags & 0x1) != 0x0) {
                abstractSerializedData.writeString(super.type);
            }
            if ((super.flags & 0x2) != 0x0) {
                abstractSerializedData.writeString(super.site_name);
            }
            if ((super.flags & 0x4) != 0x0) {
                abstractSerializedData.writeString(super.title);
            }
            if ((super.flags & 0x8) != 0x0) {
                abstractSerializedData.writeString(super.description);
            }
            if ((super.flags & 0x10) != 0x0) {
                super.photo.serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x20) != 0x0) {
                abstractSerializedData.writeString(super.embed_url);
            }
            if ((super.flags & 0x20) != 0x0) {
                abstractSerializedData.writeString(super.embed_type);
            }
            if ((super.flags & 0x40) != 0x0) {
                abstractSerializedData.writeInt32(super.embed_width);
            }
            if ((super.flags & 0x40) != 0x0) {
                abstractSerializedData.writeInt32(super.embed_height);
            }
            if ((super.flags & 0x80) != 0x0) {
                abstractSerializedData.writeInt32(super.duration);
            }
            if ((super.flags & 0x100) != 0x0) {
                abstractSerializedData.writeString(super.author);
            }
            if ((super.flags & 0x200) != 0x0) {
                super.document.serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x400) != 0x0) {
                super.cached_page.serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_webPageEmpty extends WebPage
    {
        public static int constructor = -350980120;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt64(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_webPageEmpty.constructor);
            abstractSerializedData.writeInt64(super.id);
        }
    }
    
    public static class TL_webPageNotModified extends WebPage
    {
        public static int constructor = -2054908813;
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_webPageNotModified.constructor);
        }
    }
    
    public static class TL_webPagePending extends WebPage
    {
        public static int constructor = -981018084;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.id = abstractSerializedData.readInt64(b);
            super.date = abstractSerializedData.readInt32(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_webPagePending.constructor);
            abstractSerializedData.writeInt64(super.id);
            abstractSerializedData.writeInt32(super.date);
        }
    }
    
    public static class TL_webPageUrlPending extends WebPage
    {
        public static int constructor = -736472729;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.url = abstractSerializedData.readString(b);
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_webPageUrlPending.constructor);
            abstractSerializedData.writeString(super.url);
        }
    }
    
    public static class TL_webPage_layer58 extends TL_webPage
    {
        public static int constructor = -897446185;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            super.id = abstractSerializedData.readInt64(b);
            super.url = abstractSerializedData.readString(b);
            super.display_url = abstractSerializedData.readString(b);
            if ((super.flags & 0x1) != 0x0) {
                super.type = abstractSerializedData.readString(b);
            }
            if ((super.flags & 0x2) != 0x0) {
                super.site_name = abstractSerializedData.readString(b);
            }
            if ((super.flags & 0x4) != 0x0) {
                super.title = abstractSerializedData.readString(b);
            }
            if ((super.flags & 0x8) != 0x0) {
                super.description = abstractSerializedData.readString(b);
            }
            if ((super.flags & 0x10) != 0x0) {
                super.photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            if ((super.flags & 0x20) != 0x0) {
                super.embed_url = abstractSerializedData.readString(b);
            }
            if ((super.flags & 0x20) != 0x0) {
                super.embed_type = abstractSerializedData.readString(b);
            }
            if ((super.flags & 0x40) != 0x0) {
                super.embed_width = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x40) != 0x0) {
                super.embed_height = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x80) != 0x0) {
                super.duration = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x100) != 0x0) {
                super.author = abstractSerializedData.readString(b);
            }
            if ((super.flags & 0x200) != 0x0) {
                super.document = Document.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_webPage_layer58.constructor);
            abstractSerializedData.writeInt32(super.flags);
            abstractSerializedData.writeInt64(super.id);
            abstractSerializedData.writeString(super.url);
            abstractSerializedData.writeString(super.display_url);
            if ((super.flags & 0x1) != 0x0) {
                abstractSerializedData.writeString(super.type);
            }
            if ((super.flags & 0x2) != 0x0) {
                abstractSerializedData.writeString(super.site_name);
            }
            if ((super.flags & 0x4) != 0x0) {
                abstractSerializedData.writeString(super.title);
            }
            if ((super.flags & 0x8) != 0x0) {
                abstractSerializedData.writeString(super.description);
            }
            if ((super.flags & 0x10) != 0x0) {
                super.photo.serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x20) != 0x0) {
                abstractSerializedData.writeString(super.embed_url);
            }
            if ((super.flags & 0x20) != 0x0) {
                abstractSerializedData.writeString(super.embed_type);
            }
            if ((super.flags & 0x40) != 0x0) {
                abstractSerializedData.writeInt32(super.embed_width);
            }
            if ((super.flags & 0x40) != 0x0) {
                abstractSerializedData.writeInt32(super.embed_height);
            }
            if ((super.flags & 0x80) != 0x0) {
                abstractSerializedData.writeInt32(super.duration);
            }
            if ((super.flags & 0x100) != 0x0) {
                abstractSerializedData.writeString(super.author);
            }
            if ((super.flags & 0x200) != 0x0) {
                super.document.serializeToStream(abstractSerializedData);
            }
        }
    }
    
    public static class TL_webPage_old extends TL_webPage
    {
        public static int constructor = -1558273867;
        
        @Override
        public void readParams(final AbstractSerializedData abstractSerializedData, final boolean b) {
            super.flags = abstractSerializedData.readInt32(b);
            super.id = abstractSerializedData.readInt64(b);
            super.url = abstractSerializedData.readString(b);
            super.display_url = abstractSerializedData.readString(b);
            if ((super.flags & 0x1) != 0x0) {
                super.type = abstractSerializedData.readString(b);
            }
            if ((super.flags & 0x2) != 0x0) {
                super.site_name = abstractSerializedData.readString(b);
            }
            if ((super.flags & 0x4) != 0x0) {
                super.title = abstractSerializedData.readString(b);
            }
            if ((super.flags & 0x8) != 0x0) {
                super.description = abstractSerializedData.readString(b);
            }
            if ((super.flags & 0x10) != 0x0) {
                super.photo = Photo.TLdeserialize(abstractSerializedData, abstractSerializedData.readInt32(b), b);
            }
            if ((super.flags & 0x20) != 0x0) {
                super.embed_url = abstractSerializedData.readString(b);
            }
            if ((super.flags & 0x20) != 0x0) {
                super.embed_type = abstractSerializedData.readString(b);
            }
            if ((super.flags & 0x40) != 0x0) {
                super.embed_width = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x40) != 0x0) {
                super.embed_height = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x80) != 0x0) {
                super.duration = abstractSerializedData.readInt32(b);
            }
            if ((super.flags & 0x100) != 0x0) {
                super.author = abstractSerializedData.readString(b);
            }
        }
        
        @Override
        public void serializeToStream(final AbstractSerializedData abstractSerializedData) {
            abstractSerializedData.writeInt32(TL_webPage_old.constructor);
            abstractSerializedData.writeInt32(super.flags);
            abstractSerializedData.writeInt64(super.id);
            abstractSerializedData.writeString(super.url);
            abstractSerializedData.writeString(super.display_url);
            if ((super.flags & 0x1) != 0x0) {
                abstractSerializedData.writeString(super.type);
            }
            if ((super.flags & 0x2) != 0x0) {
                abstractSerializedData.writeString(super.site_name);
            }
            if ((super.flags & 0x4) != 0x0) {
                abstractSerializedData.writeString(super.title);
            }
            if ((super.flags & 0x8) != 0x0) {
                abstractSerializedData.writeString(super.description);
            }
            if ((super.flags & 0x10) != 0x0) {
                super.photo.serializeToStream(abstractSerializedData);
            }
            if ((super.flags & 0x20) != 0x0) {
                abstractSerializedData.writeString(super.embed_url);
            }
            if ((super.flags & 0x20) != 0x0) {
                abstractSerializedData.writeString(super.embed_type);
            }
            if ((super.flags & 0x40) != 0x0) {
                abstractSerializedData.writeInt32(super.embed_width);
            }
            if ((super.flags & 0x40) != 0x0) {
                abstractSerializedData.writeInt32(super.embed_height);
            }
            if ((super.flags & 0x80) != 0x0) {
                abstractSerializedData.writeInt32(super.duration);
            }
            if ((super.flags & 0x100) != 0x0) {
                abstractSerializedData.writeString(super.author);
            }
        }
    }
    
    public abstract static class TopPeerCategory extends TLObject
    {
        public static TopPeerCategory TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject = null;
            switch (i) {
                default: {
                    tlObject = null;
                    break;
                }
                case 511092620: {
                    tlObject = new TL_topPeerCategoryPhoneCalls();
                    break;
                }
                case 371037736: {
                    tlObject = new TL_topPeerCategoryChannels();
                    break;
                }
                case 344356834: {
                    tlObject = new TL_topPeerCategoryBotsInline();
                    break;
                }
                case 104314861: {
                    tlObject = new TL_topPeerCategoryCorrespondents();
                    break;
                }
                case -68239120: {
                    tlObject = new TL_topPeerCategoryForwardChats();
                    break;
                }
                case -1122524854: {
                    tlObject = new TL_topPeerCategoryGroups();
                    break;
                }
                case -1419371685: {
                    tlObject = new TL_topPeerCategoryBotsPM();
                    break;
                }
                case -1472172887: {
                    tlObject = new TL_topPeerCategoryForwardUsers();
                    break;
                }
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in TopPeerCategory", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (TopPeerCategory)tlObject;
        }
    }
    
    public abstract static class Update extends TLObject
    {
        public static Update TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject = null;
            switch (i) {
                default: {
                    tlObject = null;
                    break;
                }
                case 2139689491: {
                    tlObject = new TL_updateWebPage();
                    break;
                }
                case 1893427255: {
                    tlObject = new TL_updateChannelAvailableMessages();
                    break;
                }
                case 1887741886: {
                    tlObject = new TL_updateContactsReset();
                    break;
                }
                case 1852826908: {
                    tlObject = new TL_updateDialogPinned();
                    break;
                }
                case 1851755554: {
                    tlObject = new TL_updateChatParticipantDelete();
                    break;
                }
                case 1757493555: {
                    tlObject = new TL_updateReadMessagesContents();
                    break;
                }
                case 1753886890: {
                    tlObject = new TL_updateNewStickerSet();
                    break;
                }
                case 1656358105: {
                    tlObject = new TL_updateNewChannelMessage();
                    break;
                }
                case 1548249383: {
                    tlObject = new TL_updateUserTyping();
                    break;
                }
                case 1461528386: {
                    tlObject = new TL_updateReadFeaturedStickers();
                    break;
                }
                case 1442983757: {
                    tlObject = new TL_updateLangPack();
                    break;
                }
                case 1421875280: {
                    tlObject = new TL_updateChatDefaultBannedRights();
                    break;
                }
                case 1318109142: {
                    tlObject = new TL_updateMessageID();
                    break;
                }
                case 1279515160: {
                    tlObject = new TL_updateUserPinnedMessage();
                    break;
                }
                case 1180041828: {
                    tlObject = new TL_updateLangPackTooLong();
                    break;
                }
                case 1135492588: {
                    tlObject = new TL_updateStickerSets();
                    break;
                }
                case 1081547008: {
                    tlObject = new TL_updateChannelWebPage();
                    break;
                }
                case 956179895: {
                    tlObject = new TL_updateEncryptedMessagesRead();
                    break;
                }
                case 856380452: {
                    tlObject = new TL_updateReadChannelInbox();
                    break;
                }
                case 791617983: {
                    tlObject = new TL_updateReadHistoryOutbox();
                    break;
                }
                case 634833351: {
                    tlObject = new TL_updateReadChannelOutbox();
                    break;
                }
                case 522914557: {
                    tlObject = new TL_updateNewMessage();
                    break;
                }
                case 469489699: {
                    tlObject = new TL_updateUserStatus();
                    break;
                }
                case 457133559: {
                    tlObject = new TL_updateEditChannelMessage();
                    break;
                }
                case 422972864: {
                    tlObject = new TL_updateFolderPeers();
                    break;
                }
                case 386986326: {
                    tlObject = new TL_updateEncryptedChatTyping();
                    break;
                }
                case 314359194: {
                    tlObject = new TL_updateNewEncryptedMessage();
                    break;
                }
                case 314130811: {
                    tlObject = new TL_updateUserPhone();
                    break;
                }
                case 196268545: {
                    tlObject = new TL_updateStickerSetsOrder();
                    break;
                }
                case 125178264: {
                    tlObject = new TL_updateChatParticipants();
                    break;
                }
                case 92188360: {
                    tlObject = new TL_updateGroupCallParticipant();
                    break;
                }
                case -99664734: {
                    tlObject = new TL_updatePinnedDialogs();
                    break;
                }
                case -298113238: {
                    tlObject = new TL_updatePrivacy();
                    break;
                }
                case -299124375: {
                    tlObject = new TL_updateDraftMessage();
                    break;
                }
                case -337352679: {
                    tlObject = new TL_updateServiceNotification();
                    break;
                }
                case -352032773: {
                    tlObject = new TL_updateChannelTooLong();
                    break;
                }
                case -364179876: {
                    tlObject = new TL_updateChatParticipantAdd();
                    break;
                }
                case -451831443: {
                    tlObject = new TL_updateFavedStickers();
                    break;
                }
                case -469536605: {
                    tlObject = new TL_updateEditMessage();
                    break;
                }
                case -513517117: {
                    tlObject = new TL_updateDialogUnreadMark();
                    break;
                }
                case -519195831: {
                    tlObject = new TL_updateChatPinnedMessage();
                    break;
                }
                case -1015733815: {
                    tlObject = new TL_updateDeleteChannelMessages();
                    break;
                }
                case -1094555409: {
                    tlObject = new TL_updateNotifySettings();
                    break;
                }
                case -1227598250: {
                    tlObject = new TL_updateChannel();
                    break;
                }
                case -1232070311: {
                    tlObject = new TL_updateChatParticipantAdmin();
                    break;
                }
                case -1264392051: {
                    tlObject = new TL_updateEncryption();
                    break;
                }
                case -1398708869: {
                    tlObject = new TL_updateMessagePoll();
                    break;
                }
                case -1425052898: {
                    tlObject = new TL_updatePhoneCall();
                    break;
                }
                case -1489818765: {
                    tlObject = new TL_updateUserName();
                    break;
                }
                case -1574314746: {
                    tlObject = new TL_updateConfig();
                    break;
                }
                case -1576161051: {
                    tlObject = new TL_updateDeleteMessages();
                    break;
                }
                case -1657903163: {
                    tlObject = new TL_updateContactLink();
                    break;
                }
                case -1667805217: {
                    tlObject = new TL_updateReadHistoryInbox();
                    break;
                }
                case -1704596961: {
                    tlObject = new TL_updateChatUserTyping();
                    break;
                }
                case -1706939360: {
                    tlObject = new TL_updateRecentStickers();
                    break;
                }
                case -1734268085: {
                    tlObject = new TL_updateChannelMessageViews();
                    break;
                }
                case -1738988427: {
                    tlObject = new TL_updateChannelPinnedMessage();
                    break;
                }
                case -1791935732: {
                    tlObject = new TL_updateUserPhoto();
                    break;
                }
                case -1821035490: {
                    tlObject = new TL_updateSavedGifs();
                    break;
                }
                case -1906403213: {
                    tlObject = new TL_updateDcOptions();
                    break;
                }
                case -1987495099: {
                    tlObject = new TL_updateChannelReadMessagesContents();
                    break;
                }
                case -2046916883: {
                    tlObject = new TL_updateGroupCall();
                    break;
                }
                case -2131957734: {
                    tlObject = new TL_updateUserBlocked();
                    break;
                }
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in Update", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (Update)tlObject;
        }
    }
    
    public abstract static class Updates extends TLObject
    {
        public int chat_id;
        public ArrayList<Chat> chats;
        public int date;
        public ArrayList<MessageEntity> entities;
        public int flags;
        public int from_id;
        public MessageFwdHeader fwd_from;
        public int id;
        public MessageMedia media;
        public boolean media_unread;
        public boolean mentioned;
        public String message;
        public boolean out;
        public int pts;
        public int pts_count;
        public int reply_to_msg_id;
        public int seq;
        public int seq_start;
        public boolean silent;
        public Update update;
        public ArrayList<Update> updates;
        public int user_id;
        public ArrayList<User> users;
        public int via_bot_id;
        
        public Updates() {
            this.updates = new ArrayList<Update>();
            this.users = new ArrayList<User>();
            this.chats = new ArrayList<Chat>();
            this.entities = new ArrayList<MessageEntity>();
        }
        
        public static Updates TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject = null;
            switch (i) {
                default: {
                    tlObject = null;
                    break;
                }
                case 2027216577: {
                    tlObject = new TL_updateShort();
                    break;
                }
                case 1957577280: {
                    tlObject = new TL_updates();
                    break;
                }
                case 1918567619: {
                    tlObject = new TL_updatesCombined();
                    break;
                }
                case 377562760: {
                    tlObject = new TL_updateShortChatMessage();
                    break;
                }
                case 301019932: {
                    tlObject = new TL_updateShortSentMessage();
                    break;
                }
                case -484987010: {
                    tlObject = new TL_updatesTooLong();
                    break;
                }
                case -1857044719: {
                    tlObject = new TL_updateShortMessage();
                    break;
                }
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in Updates", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (Updates)tlObject;
        }
    }
    
    public abstract static class UrlAuthResult extends TLObject
    {
        public static UrlAuthResult TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != -1886646706) {
                if (i != -1831650802) {
                    if (i != -1445536993) {
                        tlObject = null;
                    }
                    else {
                        tlObject = new TL_urlAuthResultDefault();
                    }
                }
                else {
                    tlObject = new TL_urlAuthResultRequest();
                }
            }
            else {
                tlObject = new TL_urlAuthResultAccepted();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in UrlAuthResult", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (UrlAuthResult)tlObject;
        }
    }
    
    public abstract static class User extends TLObject
    {
        public long access_hash;
        public boolean bot;
        public boolean bot_chat_history;
        public int bot_info_version;
        public boolean bot_inline_geo;
        public String bot_inline_placeholder;
        public boolean bot_nochats;
        public boolean contact;
        public boolean deleted;
        public boolean explicit_content;
        public String first_name;
        public int flags;
        public int id;
        public boolean inactive;
        public String lang_code;
        public String last_name;
        public boolean min;
        public boolean mutual_contact;
        public String phone;
        public UserProfilePhoto photo;
        public boolean restricted;
        public String restriction_reason;
        public boolean scam;
        public boolean self;
        public UserStatus status;
        public boolean support;
        public String username;
        public boolean verified;
        
        public static User TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject = null;
            switch (i) {
                default: {
                    tlObject = null;
                    break;
                }
                case 1912944108: {
                    tlObject = new TL_userSelf_old();
                    break;
                }
                case 1879553105: {
                    tlObject = new TL_userSelf_old2();
                    break;
                }
                case 1377093789: {
                    tlObject = new TL_userForeign_old();
                    break;
                }
                case 773059779: {
                    tlObject = new TL_user();
                    break;
                }
                case 585682608: {
                    tlObject = new TL_userRequest_old();
                    break;
                }
                case 585404530: {
                    tlObject = new TL_user_old();
                    break;
                }
                case 537022650: {
                    tlObject = new TL_userEmpty();
                    break;
                }
                case 476112392: {
                    tlObject = new TL_userSelf_old3();
                    break;
                }
                case 123533224: {
                    tlObject = new TL_userForeign_old2();
                    break;
                }
                case -218397927: {
                    tlObject = new TL_userContact_old();
                    break;
                }
                case -640891665: {
                    tlObject = new TL_userRequest_old2();
                    break;
                }
                case -704549510: {
                    tlObject = new TL_userDeleted_old2();
                    break;
                }
                case -787638374: {
                    tlObject = new TL_user_layer65();
                    break;
                }
                case -894214632: {
                    tlObject = new TL_userContact_old2();
                    break;
                }
                case -1298475060: {
                    tlObject = new TL_userDeleted_old();
                    break;
                }
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in User", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (User)tlObject;
        }
    }
    
    public abstract static class UserFull extends TLObject
    {
        public String about;
        public boolean blocked;
        public BotInfo bot_info;
        public boolean can_pin_message;
        public int common_chats_count;
        public int flags;
        public int folder_id;
        public TL_contacts_link link;
        public PeerNotifySettings notify_settings;
        public boolean phone_calls_available;
        public boolean phone_calls_private;
        public int pinned_msg_id;
        public Photo profile_photo;
        public User user;
        
        public static UserFull TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            UserFull userFull;
            if (i != -1901811583) {
                if (i != 1951750604) {
                    userFull = null;
                }
                else {
                    userFull = new TL_userFull();
                }
            }
            else {
                userFull = new TL_userFull_layer98();
            }
            if (userFull == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in UserFull", i));
            }
            if (userFull != null) {
                ((TL_userFull)userFull).readParams(abstractSerializedData, b);
            }
            return userFull;
        }
    }
    
    public abstract static class UserProfilePhoto extends TLObject
    {
        public int dc_id;
        public FileLocation photo_big;
        public long photo_id;
        public FileLocation photo_small;
        
        public static UserProfilePhoto TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject = null;
            switch (i) {
                default: {
                    tlObject = null;
                    break;
                }
                case 1326562017: {
                    tlObject = new TL_userProfilePhotoEmpty();
                    break;
                }
                case -321430132: {
                    tlObject = new TL_userProfilePhoto();
                    break;
                }
                case -715532088: {
                    tlObject = new TL_userProfilePhoto_layer97();
                    break;
                }
                case -1727196013: {
                    tlObject = new TL_userProfilePhoto_old();
                    break;
                }
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in UserProfilePhoto", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (UserProfilePhoto)tlObject;
        }
    }
    
    public abstract static class UserStatus extends TLObject
    {
        public int expires;
        
        public static UserStatus TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject = null;
            switch (i) {
                default: {
                    tlObject = null;
                    break;
                }
                case 2011940674: {
                    tlObject = new TL_userStatusLastMonth();
                    break;
                }
                case 164646985: {
                    tlObject = new TL_userStatusEmpty();
                    break;
                }
                case 129960444: {
                    tlObject = new TL_userStatusLastWeek();
                    break;
                }
                case 9203775: {
                    tlObject = new TL_userStatusOffline();
                    break;
                }
                case -306628279: {
                    tlObject = new TL_userStatusOnline();
                    break;
                }
                case -496024847: {
                    tlObject = new TL_userStatusRecently();
                    break;
                }
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in UserStatus", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (UserStatus)tlObject;
        }
    }
    
    public static class Vector extends TLObject
    {
        public static int constructor = 481674261;
        public ArrayList<Object> objects;
        
        public Vector() {
            this.objects = new ArrayList<Object>();
        }
    }
    
    public abstract static class Video extends TLObject
    {
        public long access_hash;
        public String caption;
        public int date;
        public int dc_id;
        public int duration;
        public int h;
        public long id;
        public byte[] iv;
        public byte[] key;
        public String mime_type;
        public int size;
        public PhotoSize thumb;
        public int user_id;
        public int w;
        
        public static Video TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject = null;
            switch (i) {
                default: {
                    tlObject = null;
                    break;
                }
                case 1510253727: {
                    tlObject = new TL_video_old();
                    break;
                }
                case 1431655763: {
                    tlObject = new TL_videoEncrypted();
                    break;
                }
                case 948937617: {
                    tlObject = new TL_video_old2();
                    break;
                }
                case -148338733: {
                    tlObject = new TL_video_layer45();
                    break;
                }
                case -291550643: {
                    tlObject = new TL_video_old3();
                    break;
                }
                case -1056548696: {
                    tlObject = new TL_videoEmpty_layer45();
                    break;
                }
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in Video", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (Video)tlObject;
        }
    }
    
    public abstract static class WallPaper extends TLObject
    {
        public static WallPaper TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            WallPaper wallPaper;
            if (i != -1539849235) {
                if (i != -263220756) {
                    wallPaper = null;
                }
                else {
                    wallPaper = new TL_wallPaper_layer94();
                }
            }
            else {
                wallPaper = new TL_wallPaper();
            }
            if (wallPaper == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in WallPaper", i));
            }
            if (wallPaper != null) {
                ((TL_wallPaper)wallPaper).readParams(abstractSerializedData, b);
            }
            return wallPaper;
        }
    }
    
    public abstract static class WebDocument extends TLObject
    {
        public long access_hash;
        public ArrayList<DocumentAttribute> attributes;
        public String mime_type;
        public int size;
        public String url;
        
        public WebDocument() {
            this.attributes = new ArrayList<DocumentAttribute>();
        }
        
        public static WebDocument TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != -971322408) {
                if (i != -104284986) {
                    if (i != 475467473) {
                        tlObject = null;
                    }
                    else {
                        tlObject = new TL_webDocument();
                    }
                }
                else {
                    tlObject = new TL_webDocumentNoProxy();
                }
            }
            else {
                tlObject = new TL_webDocument_layer81();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in WebDocument", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (WebDocument)tlObject;
        }
    }
    
    public abstract static class WebPage extends TLObject
    {
        public String author;
        public Page cached_page;
        public int date;
        public String description;
        public String display_url;
        public Document document;
        public int duration;
        public int embed_height;
        public String embed_type;
        public String embed_url;
        public int embed_width;
        public int flags;
        public int hash;
        public long id;
        public Photo photo;
        public String site_name;
        public String title;
        public String type;
        public String url;
        
        public static WebPage TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject = null;
            switch (i) {
                default: {
                    tlObject = null;
                    break;
                }
                case 1594340540: {
                    tlObject = new TL_webPage();
                    break;
                }
                case -350980120: {
                    tlObject = new TL_webPageEmpty();
                    break;
                }
                case -736472729: {
                    tlObject = new TL_webPageUrlPending();
                    break;
                }
                case -897446185: {
                    tlObject = new TL_webPage_layer58();
                    break;
                }
                case -981018084: {
                    tlObject = new TL_webPagePending();
                    break;
                }
                case -1558273867: {
                    tlObject = new TL_webPage_old();
                    break;
                }
                case -2054908813: {
                    tlObject = new TL_webPageNotModified();
                    break;
                }
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in WebPage", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (WebPage)tlObject;
        }
    }
    
    public abstract static class account_WallPapers extends TLObject
    {
        public static account_WallPapers TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != 471437699) {
                if (i != 1881892265) {
                    tlObject = null;
                }
                else {
                    tlObject = new TL_account_wallPapers();
                }
            }
            else {
                tlObject = new TL_account_wallPapersNotModified();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in account_WallPapers", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (account_WallPapers)tlObject;
        }
    }
    
    public abstract static class auth_CodeType extends TLObject
    {
        public static auth_CodeType TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != 577556219) {
                if (i != 1923290508) {
                    if (i != 1948046307) {
                        tlObject = null;
                    }
                    else {
                        tlObject = new TL_auth_codeTypeCall();
                    }
                }
                else {
                    tlObject = new TL_auth_codeTypeSms();
                }
            }
            else {
                tlObject = new TL_auth_codeTypeFlashCall();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in auth_CodeType", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (auth_CodeType)tlObject;
        }
    }
    
    public abstract static class auth_SentCodeType extends TLObject
    {
        public int length;
        public String pattern;
        
        public static auth_SentCodeType TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject = null;
            switch (i) {
                default: {
                    tlObject = null;
                    break;
                }
                case 1398007207: {
                    tlObject = new TL_auth_sentCodeTypeCall();
                    break;
                }
                case 1035688326: {
                    tlObject = new TL_auth_sentCodeTypeApp();
                    break;
                }
                case -1073693790: {
                    tlObject = new TL_auth_sentCodeTypeSms();
                    break;
                }
                case -1425815847: {
                    tlObject = new TL_auth_sentCodeTypeFlashCall();
                    break;
                }
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in auth_SentCodeType", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (auth_SentCodeType)tlObject;
        }
    }
    
    public abstract static class channels_ChannelParticipants extends TLObject
    {
        public int count;
        public ArrayList<ChannelParticipant> participants;
        public ArrayList<User> users;
        
        public channels_ChannelParticipants() {
            this.participants = new ArrayList<ChannelParticipant>();
            this.users = new ArrayList<User>();
        }
        
        public static channels_ChannelParticipants TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != -266911767) {
                if (i != -177282392) {
                    tlObject = null;
                }
                else {
                    tlObject = new TL_channels_channelParticipants();
                }
            }
            else {
                tlObject = new TL_channels_channelParticipantsNotModified();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in channels_ChannelParticipants", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (channels_ChannelParticipants)tlObject;
        }
    }
    
    public abstract static class contacts_Blocked extends TLObject
    {
        public ArrayList<TL_contactBlocked> blocked;
        public int count;
        public ArrayList<User> users;
        
        public contacts_Blocked() {
            this.blocked = new ArrayList<TL_contactBlocked>();
            this.users = new ArrayList<User>();
        }
        
        public static contacts_Blocked TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != -1878523231) {
                if (i != 471043349) {
                    tlObject = null;
                }
                else {
                    tlObject = new TL_contacts_blocked();
                }
            }
            else {
                tlObject = new TL_contacts_blockedSlice();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in contacts_Blocked", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (contacts_Blocked)tlObject;
        }
    }
    
    public abstract static class contacts_Contacts extends TLObject
    {
        public ArrayList<TL_contact> contacts;
        public int saved_count;
        public ArrayList<User> users;
        
        public contacts_Contacts() {
            this.contacts = new ArrayList<TL_contact>();
            this.users = new ArrayList<User>();
        }
        
        public static contacts_Contacts TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != -1219778094) {
                if (i != -353862078) {
                    tlObject = null;
                }
                else {
                    tlObject = new TL_contacts_contacts();
                }
            }
            else {
                tlObject = new TL_contacts_contactsNotModified();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in contacts_Contacts", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (contacts_Contacts)tlObject;
        }
    }
    
    public abstract static class contacts_TopPeers extends TLObject
    {
        public static contacts_TopPeers TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != -1255369827) {
                if (i != -567906571) {
                    if (i != 1891070632) {
                        tlObject = null;
                    }
                    else {
                        tlObject = new TL_contacts_topPeers();
                    }
                }
                else {
                    tlObject = new TL_contacts_topPeersNotModified();
                }
            }
            else {
                tlObject = new TL_contacts_topPeersDisabled();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in contacts_TopPeers", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (contacts_TopPeers)tlObject;
        }
    }
    
    public abstract static class help_AppUpdate extends TLObject
    {
        public static help_AppUpdate TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != -1000708810) {
                if (i != 497489295) {
                    tlObject = null;
                }
                else {
                    tlObject = new TL_help_appUpdate();
                }
            }
            else {
                tlObject = new TL_help_noAppUpdate();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in help_AppUpdate", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (help_AppUpdate)tlObject;
        }
    }
    
    public abstract static class help_DeepLinkInfo extends TLObject
    {
        public static help_DeepLinkInfo TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != 1722786150) {
                if (i != 1783556146) {
                    tlObject = null;
                }
                else {
                    tlObject = new TL_help_deepLinkInfo();
                }
            }
            else {
                tlObject = new TL_help_deepLinkInfoEmpty();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in help_DeepLinkInfo", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (help_DeepLinkInfo)tlObject;
        }
    }
    
    public abstract static class help_PassportConfig extends TLObject
    {
        public static help_PassportConfig TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != -1600596305) {
                if (i != -1078332329) {
                    tlObject = null;
                }
                else {
                    tlObject = new TL_help_passportConfigNotModified();
                }
            }
            else {
                tlObject = new TL_help_passportConfig();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in help_PassportConfig", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (help_PassportConfig)tlObject;
        }
    }
    
    public abstract static class help_ProxyData extends TLObject
    {
        public static help_ProxyData TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != -526508104) {
                if (i != 737668643) {
                    tlObject = null;
                }
                else {
                    tlObject = new TL_help_proxyDataPromo();
                }
            }
            else {
                tlObject = new TL_help_proxyDataEmpty();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in help_ProxyData", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (help_ProxyData)tlObject;
        }
    }
    
    public abstract static class help_TermsOfServiceUpdate extends TLObject
    {
        public static help_TermsOfServiceUpdate TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != -483352705) {
                if (i != 686618977) {
                    tlObject = null;
                }
                else {
                    tlObject = new TL_help_termsOfServiceUpdate();
                }
            }
            else {
                tlObject = new TL_help_termsOfServiceUpdateEmpty();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in help_TermsOfServiceUpdate", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (help_TermsOfServiceUpdate)tlObject;
        }
    }
    
    public abstract static class help_UserInfo extends TLObject
    {
        public static help_UserInfo TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != -206688531) {
                if (i != 32192344) {
                    tlObject = null;
                }
                else {
                    tlObject = new TL_help_userInfo();
                }
            }
            else {
                tlObject = new TL_help_userInfoEmpty();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in help_UserInfo", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (help_UserInfo)tlObject;
        }
    }
    
    public abstract static class messages_AllStickers extends TLObject
    {
        public ArrayList<Document> documents;
        public String hash;
        public ArrayList<TL_stickerPack> packs;
        public ArrayList<StickerSet> sets;
        
        public messages_AllStickers() {
            this.sets = new ArrayList<StickerSet>();
            this.packs = new ArrayList<TL_stickerPack>();
            this.documents = new ArrayList<Document>();
        }
        
        public static messages_AllStickers TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != -395967805) {
                if (i != -302170017) {
                    tlObject = null;
                }
                else {
                    tlObject = new TL_messages_allStickers();
                }
            }
            else {
                tlObject = new TL_messages_allStickersNotModified();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in messages_AllStickers", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (messages_AllStickers)tlObject;
        }
    }
    
    public abstract static class messages_BotResults extends TLObject
    {
        public int cache_time;
        public int flags;
        public boolean gallery;
        public String next_offset;
        public long query_id;
        public ArrayList<BotInlineResult> results;
        public TL_inlineBotSwitchPM switch_pm;
        public ArrayList<User> users;
        
        public messages_BotResults() {
            this.results = new ArrayList<BotInlineResult>();
            this.users = new ArrayList<User>();
        }
        
        public static messages_BotResults TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            messages_BotResults messages_BotResults;
            if (i != -1803769784) {
                if (i != -858565059) {
                    messages_BotResults = null;
                }
                else {
                    messages_BotResults = new TL_messages_botResults_layer71();
                }
            }
            else {
                messages_BotResults = new TL_messages_botResults();
            }
            if (messages_BotResults == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in messages_BotResults", i));
            }
            if (messages_BotResults != null) {
                ((TL_messages_botResults)messages_BotResults).readParams(abstractSerializedData, b);
            }
            return messages_BotResults;
        }
    }
    
    public abstract static class messages_Chats extends TLObject
    {
        public ArrayList<Chat> chats;
        public int count;
        
        public messages_Chats() {
            this.chats = new ArrayList<Chat>();
        }
        
        public static messages_Chats TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != -1663561404) {
                if (i != 1694474197) {
                    tlObject = null;
                }
                else {
                    tlObject = new TL_messages_chats();
                }
            }
            else {
                tlObject = new TL_messages_chatsSlice();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in messages_Chats", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (messages_Chats)tlObject;
        }
    }
    
    public abstract static class messages_DhConfig extends TLObject
    {
        public int g;
        public byte[] p;
        public byte[] random;
        public int version;
        
        public static messages_DhConfig TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != -1058912715) {
                if (i != 740433629) {
                    tlObject = null;
                }
                else {
                    tlObject = new TL_messages_dhConfig();
                }
            }
            else {
                tlObject = new TL_messages_dhConfigNotModified();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in messages_DhConfig", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (messages_DhConfig)tlObject;
        }
    }
    
    public abstract static class messages_Dialogs extends TLObject
    {
        public ArrayList<Chat> chats;
        public int count;
        public ArrayList<Dialog> dialogs;
        public ArrayList<Message> messages;
        public ArrayList<User> users;
        
        public messages_Dialogs() {
            this.dialogs = new ArrayList<Dialog>();
            this.messages = new ArrayList<Message>();
            this.chats = new ArrayList<Chat>();
            this.users = new ArrayList<User>();
        }
        
        public static messages_Dialogs TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != -253500010) {
                if (i != 364538944) {
                    if (i != 1910543603) {
                        tlObject = null;
                    }
                    else {
                        tlObject = new TL_messages_dialogsSlice();
                    }
                }
                else {
                    tlObject = new TL_messages_dialogs();
                }
            }
            else {
                tlObject = new TL_messages_dialogsNotModified();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in messages_Dialogs", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (messages_Dialogs)tlObject;
        }
    }
    
    public abstract static class messages_FavedStickers extends TLObject
    {
        public int hash;
        public ArrayList<TL_stickerPack> packs;
        public ArrayList<Document> stickers;
        
        public messages_FavedStickers() {
            this.packs = new ArrayList<TL_stickerPack>();
            this.stickers = new ArrayList<Document>();
        }
        
        public static messages_FavedStickers TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != -1634752813) {
                if (i != -209768682) {
                    tlObject = null;
                }
                else {
                    tlObject = new TL_messages_favedStickers();
                }
            }
            else {
                tlObject = new TL_messages_favedStickersNotModified();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in messages_FavedStickers", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (messages_FavedStickers)tlObject;
        }
    }
    
    public abstract static class messages_FeaturedStickers extends TLObject
    {
        public int hash;
        public ArrayList<StickerSetCovered> sets;
        public ArrayList<Long> unread;
        
        public messages_FeaturedStickers() {
            this.sets = new ArrayList<StickerSetCovered>();
            this.unread = new ArrayList<Long>();
        }
        
        public static messages_FeaturedStickers TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != -123893531) {
                if (i != 82699215) {
                    tlObject = null;
                }
                else {
                    tlObject = new TL_messages_featuredStickersNotModified();
                }
            }
            else {
                tlObject = new TL_messages_featuredStickers();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in messages_FeaturedStickers", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (messages_FeaturedStickers)tlObject;
        }
    }
    
    public abstract static class messages_FoundStickerSets extends TLObject
    {
        public static messages_FoundStickerSets TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != 223655517) {
                if (i != 1359533640) {
                    tlObject = null;
                }
                else {
                    tlObject = new TL_messages_foundStickerSets();
                }
            }
            else {
                tlObject = new TL_messages_foundStickerSetsNotModified();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in messages_FoundStickerSets", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (messages_FoundStickerSets)tlObject;
        }
    }
    
    public abstract static class messages_Messages extends TLObject
    {
        public ArrayList<Chat> chats;
        public int count;
        public int flags;
        public boolean inexact;
        public ArrayList<Message> messages;
        public int next_rate;
        public int pts;
        public ArrayList<User> users;
        
        public messages_Messages() {
            this.messages = new ArrayList<Message>();
            this.chats = new ArrayList<Chat>();
            this.users = new ArrayList<User>();
        }
        
        public static messages_Messages TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != -1938715001) {
                if (i != -1725551049) {
                    if (i != -923939298) {
                        tlObject = null;
                    }
                    else {
                        tlObject = new TL_messages_messagesSlice();
                    }
                }
                else {
                    tlObject = new TL_messages_channelMessages();
                }
            }
            else {
                tlObject = new TL_messages_messages();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in messages_Messages", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (messages_Messages)tlObject;
        }
    }
    
    public abstract static class messages_RecentStickers extends TLObject
    {
        public static messages_RecentStickers TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != 186120336) {
                if (i != 586395571) {
                    tlObject = null;
                }
                else {
                    tlObject = new TL_messages_recentStickers();
                }
            }
            else {
                tlObject = new TL_messages_recentStickersNotModified();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in messages_RecentStickers", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (messages_RecentStickers)tlObject;
        }
    }
    
    public abstract static class messages_SavedGifs extends TLObject
    {
        public ArrayList<Document> gifs;
        public int hash;
        
        public messages_SavedGifs() {
            this.gifs = new ArrayList<Document>();
        }
        
        public static messages_SavedGifs TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != -402498398) {
                if (i != 772213157) {
                    tlObject = null;
                }
                else {
                    tlObject = new TL_messages_savedGifs();
                }
            }
            else {
                tlObject = new TL_messages_savedGifsNotModified();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in messages_SavedGifs", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (messages_SavedGifs)tlObject;
        }
    }
    
    public abstract static class messages_SentEncryptedMessage extends TLObject
    {
        public int date;
        public EncryptedFile file;
        
        public static messages_SentEncryptedMessage TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != -1802240206) {
                if (i != 1443858741) {
                    tlObject = null;
                }
                else {
                    tlObject = new TL_messages_sentEncryptedMessage();
                }
            }
            else {
                tlObject = new TL_messages_sentEncryptedFile();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in messages_SentEncryptedMessage", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (messages_SentEncryptedMessage)tlObject;
        }
    }
    
    public abstract static class messages_StickerSetInstallResult extends TLObject
    {
        public ArrayList<StickerSetCovered> sets;
        
        public messages_StickerSetInstallResult() {
            this.sets = new ArrayList<StickerSetCovered>();
        }
        
        public static messages_StickerSetInstallResult TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != 904138920) {
                if (i != 946083368) {
                    tlObject = null;
                }
                else {
                    tlObject = new TL_messages_stickerSetInstallResultSuccess();
                }
            }
            else {
                tlObject = new TL_messages_stickerSetInstallResultArchive();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in messages_StickerSetInstallResult", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (messages_StickerSetInstallResult)tlObject;
        }
    }
    
    public abstract static class messages_Stickers extends TLObject
    {
        public static messages_Stickers TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != -463889475) {
                if (i != -244016606) {
                    tlObject = null;
                }
                else {
                    tlObject = new TL_messages_stickersNotModified();
                }
            }
            else {
                tlObject = new TL_messages_stickers();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in messages_Stickers", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (messages_Stickers)tlObject;
        }
    }
    
    public abstract static class payments_PaymentResult extends TLObject
    {
        public Updates updates;
        public String url;
        
        public static payments_PaymentResult TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != 1314881805) {
                if (i != 1800845601) {
                    tlObject = null;
                }
                else {
                    tlObject = new TL_payments_paymentVerficationNeeded();
                }
            }
            else {
                tlObject = new TL_payments_paymentResult();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in payments_PaymentResult", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (payments_PaymentResult)tlObject;
        }
    }
    
    public abstract static class photos_Photos extends TLObject
    {
        public int count;
        public ArrayList<Photo> photos;
        public ArrayList<User> users;
        
        public photos_Photos() {
            this.photos = new ArrayList<Photo>();
            this.users = new ArrayList<User>();
        }
        
        public static photos_Photos TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != -1916114267) {
                if (i != 352657236) {
                    tlObject = null;
                }
                else {
                    tlObject = new TL_photos_photosSlice();
                }
            }
            else {
                tlObject = new TL_photos_photos();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in photos_Photos", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (photos_Photos)tlObject;
        }
    }
    
    public abstract static class storage_FileType extends TLObject
    {
        public static storage_FileType TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject = null;
            switch (i) {
                default: {
                    tlObject = null;
                    break;
                }
                case 1384777335: {
                    tlObject = new TL_storage_fileMp3();
                    break;
                }
                case 1258941372: {
                    tlObject = new TL_storage_fileMov();
                    break;
                }
                case 1086091090: {
                    tlObject = new TL_storage_filePartial();
                    break;
                }
                case 276907596: {
                    tlObject = new TL_storage_fileWebp();
                    break;
                }
                case 172975040: {
                    tlObject = new TL_storage_filePng();
                    break;
                }
                case 8322574: {
                    tlObject = new TL_storage_fileJpeg();
                    break;
                }
                case -891180321: {
                    tlObject = new TL_storage_fileGif();
                    break;
                }
                case -1278304028: {
                    tlObject = new TL_storage_fileMp4();
                    break;
                }
                case -1373745011: {
                    tlObject = new TL_storage_filePdf();
                    break;
                }
                case -1432995067: {
                    tlObject = new TL_storage_fileUnknown();
                    break;
                }
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in storage_FileType", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (storage_FileType)tlObject;
        }
    }
    
    public abstract static class updates_ChannelDifference extends TLObject
    {
        public ArrayList<Chat> chats;
        public Dialog dialog;
        public int flags;
        public boolean isFinal;
        public ArrayList<Message> messages;
        public ArrayList<Message> new_messages;
        public ArrayList<Update> other_updates;
        public int pts;
        public int timeout;
        public ArrayList<User> users;
        
        public updates_ChannelDifference() {
            this.new_messages = new ArrayList<Message>();
            this.other_updates = new ArrayList<Update>();
            this.chats = new ArrayList<Chat>();
            this.users = new ArrayList<User>();
            this.messages = new ArrayList<Message>();
        }
        
        public static updates_ChannelDifference TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != -1531132162) {
                if (i != 543450958) {
                    if (i != 1041346555) {
                        tlObject = null;
                    }
                    else {
                        tlObject = new TL_updates_channelDifferenceEmpty();
                    }
                }
                else {
                    tlObject = new TL_updates_channelDifference();
                }
            }
            else {
                tlObject = new TL_updates_channelDifferenceTooLong();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in updates_ChannelDifference", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (updates_ChannelDifference)tlObject;
        }
    }
    
    public abstract static class updates_Difference extends TLObject
    {
        public ArrayList<Chat> chats;
        public int date;
        public TL_updates_state intermediate_state;
        public ArrayList<EncryptedMessage> new_encrypted_messages;
        public ArrayList<Message> new_messages;
        public ArrayList<Update> other_updates;
        public int pts;
        public int seq;
        public TL_updates_state state;
        public ArrayList<User> users;
        
        public updates_Difference() {
            this.new_messages = new ArrayList<Message>();
            this.new_encrypted_messages = new ArrayList<EncryptedMessage>();
            this.other_updates = new ArrayList<Update>();
            this.chats = new ArrayList<Chat>();
            this.users = new ArrayList<User>();
        }
        
        public static updates_Difference TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject = null;
            switch (i) {
                default: {
                    tlObject = null;
                    break;
                }
                case 1567990072: {
                    tlObject = new TL_updates_differenceEmpty();
                    break;
                }
                case 1258196845: {
                    tlObject = new TL_updates_differenceTooLong();
                    break;
                }
                case 16030880: {
                    tlObject = new TL_updates_difference();
                    break;
                }
                case -1459938943: {
                    tlObject = new TL_updates_differenceSlice();
                    break;
                }
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in updates_Difference", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (updates_Difference)tlObject;
        }
    }
    
    public abstract static class upload_CdnFile extends TLObject
    {
        public NativeByteBuffer bytes;
        public byte[] request_token;
        
        public static upload_CdnFile TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != -1449145777) {
                if (i != -290921362) {
                    tlObject = null;
                }
                else {
                    tlObject = new TL_upload_cdnFileReuploadNeeded();
                }
            }
            else {
                tlObject = new TL_upload_cdnFile();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in upload_CdnFile", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (upload_CdnFile)tlObject;
        }
    }
    
    public abstract static class upload_File extends TLObject
    {
        public NativeByteBuffer bytes;
        public int dc_id;
        public byte[] encryption_iv;
        public byte[] encryption_key;
        public ArrayList<TL_fileHash> file_hashes;
        public byte[] file_token;
        public int mtime;
        public storage_FileType type;
        
        public upload_File() {
            this.file_hashes = new ArrayList<TL_fileHash>();
        }
        
        public static upload_File TLdeserialize(final AbstractSerializedData abstractSerializedData, final int i, final boolean b) {
            TLObject tlObject;
            if (i != -242427324) {
                if (i != 157948117) {
                    tlObject = null;
                }
                else {
                    tlObject = new TL_upload_file();
                }
            }
            else {
                tlObject = new TL_upload_fileCdnRedirect();
            }
            if (tlObject == null && b) {
                throw new RuntimeException(String.format("can't parse magic %x in upload_File", i));
            }
            if (tlObject != null) {
                tlObject.readParams(abstractSerializedData, b);
            }
            return (upload_File)tlObject;
        }
    }
}
