// 
// Decompiled by Procyon v0.5.34
// 

package org.telegram.ui;

import android.text.Layout;
import android.text.TextPaint;
import android.text.style.ClickableSpan;
import org.telegram.ui.ActionBar.BottomSheet;
import org.telegram.ui.Components.URLSpanNoUnderline;
import org.telegram.ui.Components.URLSpanMono;
import android.text.style.CharacterStyle;
import org.telegram.ui.Components.ShareAlert;
import android.animation.TimeInterpolator;
import android.view.animation.DecelerateInterpolator;
import org.telegram.ui.Components.PipRoundVideoView;
import android.text.style.URLSpan;
import android.media.ThumbnailUtils;
import java.io.Writer;
import java.io.BufferedWriter;
import java.io.FileWriter;
import org.telegram.messenger.SecretChatHelper;
import android.content.res.Configuration;
import java.util.regex.Matcher;
import android.text.Spannable;
import java.util.concurrent.CountDownLatch;
import android.content.DialogInterface$OnCancelListener;
import android.content.DialogInterface$OnShowListener;
import android.app.DatePickerDialog$OnDateSetListener;
import android.app.DatePickerDialog;
import java.util.Calendar;
import android.text.style.ForegroundColorSpan;
import android.text.SpannableString;
import android.view.KeyEvent;
import org.telegram.ui.Cells.MentionCell;
import org.telegram.ui.Cells.BotSwitchCell;
import org.telegram.ui.Cells.ChatLoadingCell;
import org.telegram.ui.Cells.ChatUnreadCell;
import org.telegram.ui.Cells.StickerCell;
import org.telegram.ui.Components.EmojiView;
import org.telegram.ui.ActionBar.ThemeDescription;
import android.view.Menu;
import android.util.SparseIntArray;
import org.telegram.messenger.support.SparseLongArray;
import org.telegram.ui.ActionBar.ActionBarMenu;
import org.telegram.ui.Components.CombinedDrawable;
import org.telegram.ui.Components.EmbedBottomSheet;
import org.telegram.messenger.browser.Browser;
import org.telegram.ui.Components.Size;
import android.view.View$OnLongClickListener;
import android.text.TextUtils$TruncateAt;
import android.widget.ImageView$ScaleType;
import androidx.recyclerview.widget.GridLayoutManager;
import androidx.recyclerview.widget.LinearSmoothScrollerMiddle;
import android.view.animation.LayoutAnimationController;
import org.telegram.ui.Cells.BotHelpCell;
import android.view.accessibility.AccessibilityNodeInfo$CollectionInfo;
import android.graphics.Color;
import android.view.accessibility.AccessibilityNodeInfo;
import android.os.SystemClock;
import android.graphics.Typeface;
import android.widget.EditText;
import java.util.List;
import java.util.Collections;
import org.telegram.PhoneFormat.PhoneFormat;
import org.telegram.messenger.BuildVars;
import org.telegram.messenger.Emoji;
import android.graphics.Bitmap;
import android.content.SharedPreferences$Editor;
import org.telegram.messenger.NotificationsController;
import org.telegram.messenger.MessagesStorage;
import org.telegram.ui.Components.AnimatedFileDrawable;
import org.telegram.ui.Components.CorrectlyMeasuringTextView;
import java.net.URLDecoder;
import org.telegram.messenger.Utilities;
import android.app.Activity;
import android.os.Parcelable;
import androidx.core.content.FileProvider;
import org.telegram.ui.Components.StickersAlert;
import android.content.Intent;
import android.net.Uri;
import org.telegram.tgnet.RequestDelegate;
import org.telegram.ui.Cells.CheckBoxCell;
import android.widget.Toast;
import android.content.ClipData;
import android.content.ClipboardManager;
import android.widget.DatePicker;
import android.content.DialogInterface;
import android.view.MotionEvent;
import org.telegram.ui.Components.EditTextCaption;
import android.graphics.Point;
import android.util.SparseBooleanArray;
import java.io.File;
import java.util.Iterator;
import org.telegram.ui.ActionBar.BackDrawable;
import android.view.ViewTreeObserver$OnPreDrawListener;
import android.view.ViewGroup;
import android.graphics.Xfermode;
import android.graphics.PorterDuffXfermode;
import android.graphics.Path$Direction;
import android.graphics.Canvas;
import android.graphics.RectF;
import android.annotation.TargetApi;
import android.graphics.Outline;
import android.view.ViewOutlineProvider;
import android.graphics.drawable.Drawable;
import android.view.View$MeasureSpec;
import org.telegram.ui.Components.AnimationProperties;
import android.view.View$OnClickListener;
import org.telegram.ui.Components.LayoutHelper;
import android.util.AttributeSet;
import android.widget.ScrollView;
import android.graphics.ColorFilter;
import android.graphics.PorterDuffColorFilter;
import android.graphics.PorterDuff$Mode;
import org.telegram.ui.ActionBar.Theme;
import android.view.View$OnTouchListener;
import android.graphics.Rect;
import org.telegram.messenger.ContactsController;
import org.telegram.messenger.UserConfig;
import org.telegram.ui.Components.voip.VoIPHelper;
import android.text.TextUtils;
import androidx.core.view.inputmethod.InputContentInfoCompat;
import org.telegram.messenger.SendMessagesHelper;
import org.telegram.ui.Components.AlertsCreator;
import org.telegram.messenger.SharedConfig;
import org.telegram.messenger.ApplicationLoader;
import org.telegram.messenger.MediaController;
import org.telegram.messenger.FileLog;
import android.view.ViewGroup$LayoutParams;
import android.widget.FrameLayout$LayoutParams;
import org.telegram.tgnet.ConnectionsManager;
import android.content.SharedPreferences;
import org.telegram.ui.Components.URLSpanBotCommand;
import androidx.recyclerview.widget.RecyclerView;
import org.telegram.messenger.ImageLocation;
import org.telegram.messenger.FileLoader;
import org.telegram.messenger.DownloadController;
import org.telegram.messenger.UserObject;
import java.util.AbstractMap;
import org.telegram.ui.Components.URLSpanUserMention;
import org.telegram.ui.Components.URLSpanReplacement;
import org.telegram.ui.Components.TypefaceSpan;
import android.text.SpannableStringBuilder;
import android.content.DialogInterface$OnClickListener;
import org.telegram.messenger.LocaleController;
import android.content.Context;
import org.telegram.ui.ActionBar.AlertDialog;
import android.util.Property;
import org.telegram.messenger.ChatObject;
import org.telegram.messenger.DataQuery;
import android.animation.Animator$AnimatorListener;
import android.animation.Animator;
import android.animation.AnimatorListenerAdapter;
import java.util.Collection;
import org.telegram.ui.ActionBar.ActionBarLayout;
import org.telegram.ui.ActionBar.ActionBar;
import org.telegram.messenger.MessagesController;
import org.telegram.messenger.VideoEditedInfo;
import org.telegram.ui.Cells.ContextLinkCell;
import org.telegram.messenger.ImageReceiver;
import org.telegram.messenger.AndroidUtilities;
import android.os.Build$VERSION;
import android.os.Bundle;
import android.view.TextureView;
import org.telegram.ui.Components.UndoView;
import org.telegram.ui.Adapters.StickersAdapter;
import org.telegram.ui.Components.NumberTextView;
import org.telegram.ui.ActionBar.ActionBarPopupWindow;
import android.widget.LinearLayout;
import org.telegram.ui.ActionBar.SimpleTextView;
import org.telegram.ui.Components.BackupImageView;
import org.telegram.tgnet.TLObject;
import java.util.HashMap;
import org.telegram.ui.Adapters.MentionsAdapter;
import android.animation.ObjectAnimator;
import androidx.recyclerview.widget.LinearLayoutManager;
import org.telegram.ui.Components.ExtendedGridLayoutManager;
import org.telegram.ui.Components.InstantCameraView;
import android.util.LongSparseArray;
import org.telegram.ui.Components.FragmentContextView;
import org.telegram.ui.Components.HintView;
import org.telegram.ui.Cells.ChatActionCell;
import org.telegram.ui.Components.SizeNotifierFrameLayout;
import android.widget.ImageView;
import android.app.Dialog;
import org.telegram.ui.Cells.ChatMessageCell;
import org.telegram.ui.Components.RecyclerListView;
import androidx.recyclerview.widget.GridLayoutManagerFixed;
import org.telegram.ui.Components.ChatAttachAlert;
import org.telegram.ui.Components.ChatActivityEnterView;
import org.telegram.ui.Components.RadialProgressView;
import org.telegram.tgnet.TLRPC;
import android.util.SparseArray;
import org.telegram.ui.Components.ChatBigEmptyView;
import org.telegram.ui.Components.ChatAvatarContainer;
import org.telegram.ui.ActionBar.ActionBarMenuItem;
import com.google.android.exoplayer2.ui.AspectRatioFrameLayout;
import android.graphics.Path;
import android.graphics.Paint;
import org.telegram.messenger.MessageObject;
import android.animation.AnimatorSet;
import android.widget.FrameLayout;
import android.widget.TextView;
import org.telegram.ui.ActionBar.ActionBarMenuSubItem;
import android.view.View;
import java.util.ArrayList;
import org.telegram.messenger.NotificationCenter;
import org.telegram.ui.ActionBar.BaseFragment;

public class ChatActivity extends BaseFragment implements NotificationCenterDelegate, DialogsActivityDelegate, LocationActivityDelegate
{
    private static final int add_shortcut = 24;
    private static final int attach_audio = 3;
    private static final int attach_contact = 5;
    private static final int attach_document = 4;
    private static final int attach_gallery = 1;
    private static final int attach_location = 6;
    private static final int attach_photo = 0;
    private static final int attach_poll = 9;
    private static final int attach_video = 2;
    private static final int bot_help = 30;
    private static final int bot_settings = 31;
    private static final int call = 32;
    private static final int chat_enc_timer = 13;
    private static final int chat_menu_attach = 14;
    private static final int clear_history = 15;
    private static final int copy = 10;
    private static final int delete = 12;
    private static final int delete_chat = 16;
    private static final int edit = 23;
    private static final int forward = 11;
    private static final int id_chat_compose_panel = 1000;
    private static final int mute = 18;
    private static final int report = 21;
    private static final int search = 40;
    private static final int share_contact = 17;
    private static final int star = 22;
    private static final int text_bold = 50;
    private static final int text_italic = 51;
    private static final int text_link = 53;
    private static final int text_mono = 52;
    private static final int text_regular = 54;
    private ArrayList<View> actionModeViews;
    private ActionBarMenuSubItem addContactItem;
    private TextView addToContactsButton;
    private TextView alertNameTextView;
    private TextView alertTextView;
    private FrameLayout alertView;
    private AnimatorSet alertViewAnimator;
    private boolean allowContextBotPanel;
    private boolean allowContextBotPanelSecond;
    private boolean allowStickersPanel;
    private ArrayList<MessageObject> animatingMessageObjects;
    private Paint aspectPaint;
    private Path aspectPath;
    private AspectRatioFrameLayout aspectRatioFrameLayout;
    private ActionBarMenuItem attachItem;
    private ChatAvatarContainer avatarContainer;
    private ChatBigEmptyView bigEmptyView;
    private MessageObject botButtons;
    private PhotoViewer.PhotoViewerProvider botContextProvider;
    private ArrayList<Object> botContextResults;
    private SparseArray<TLRPC.BotInfo> botInfo;
    private MessageObject botReplyButtons;
    private String botUser;
    private int botsCount;
    private FrameLayout bottomMessagesActionContainer;
    private FrameLayout bottomOverlay;
    private AnimatorSet bottomOverlayAnimation;
    private FrameLayout bottomOverlayChat;
    private TextView bottomOverlayChatText;
    private UnreadCounterTextView bottomOverlayChatText2;
    private RadialProgressView bottomOverlayProgress;
    private TextView bottomOverlayText;
    private boolean[] cacheEndReached;
    private int canEditMessagesCount;
    private int cantDeleteMessagesCount;
    private int cantForwardMessagesCount;
    protected ChatActivityEnterView chatActivityEnterView;
    private ChatActivityAdapter chatAdapter;
    private ChatAttachAlert chatAttachAlert;
    private long chatEnterTime;
    protected TLRPC.ChatFull chatInfo;
    private GridLayoutManagerFixed chatLayoutManager;
    private long chatLeaveTime;
    private RecyclerListView chatListView;
    private int chatListViewClipTop;
    private ArrayList<ChatMessageCell> chatMessageCellsCache;
    private boolean checkTextureViewPosition;
    private boolean clearingHistory;
    private Dialog closeChatDialog;
    private ImageView closePinned;
    private ImageView closeReportSpam;
    private SizeNotifierFrameLayout contentView;
    private int createUnreadMessageAfterId;
    private boolean createUnreadMessageAfterIdLoading;
    protected TLRPC.Chat currentChat;
    protected TLRPC.EncryptedChat currentEncryptedChat;
    private boolean currentFloatingDateOnScreen;
    private boolean currentFloatingTopIsNotMessage;
    private String currentPicturePath;
    protected TLRPC.User currentUser;
    private long dialog_id;
    private ChatMessageCell drawLaterRoundProgressCell;
    private AnimatorSet editButtonAnimation;
    private int editTextEnd;
    private ActionBarMenuItem editTextItem;
    private int editTextStart;
    private MessageObject editingMessageObject;
    private int editingMessageObjectReqId;
    private View emojiButtonRed;
    private TextView emptyView;
    private FrameLayout emptyViewContainer;
    private boolean[] endReached;
    private boolean first;
    private boolean firstLoading;
    boolean firstOpen;
    private boolean firstUnreadSent;
    private int first_unread_id;
    private boolean fixPaddingsInLayout;
    private AnimatorSet floatingDateAnimation;
    private ChatActionCell floatingDateView;
    private boolean forceScrollToTop;
    private TextView forwardButton;
    private AnimatorSet forwardButtonAnimation;
    private boolean[] forwardEndReached;
    private HintView forwardHintView;
    private MessageObject forwardingMessage;
    private MessageObject.GroupedMessages forwardingMessageGroup;
    private ArrayList<MessageObject> forwardingMessages;
    private ArrayList<CharSequence> foundUrls;
    private TLRPC.WebPage foundWebPage;
    private FragmentContextView fragmentContextView;
    private TextView gifHintTextView;
    private boolean globalIgnoreLayout;
    private LongSparseArray<MessageObject.GroupedMessages> groupedMessagesMap;
    private boolean hasAllMentionsLocal;
    private boolean hasBotsCommands;
    private boolean hasUnfavedSelected;
    private ActionBarMenuItem headerItem;
    private Runnable hideAlertViewRunnable;
    private int hideDateDelay;
    private int highlightMessageId;
    private boolean ignoreAttachOnPause;
    private long inlineReturn;
    private InstantCameraView instantCameraView;
    private boolean isBroadcast;
    private int lastLoadIndex;
    private int last_message_id;
    private int linkSearchRequestId;
    private boolean loading;
    private boolean loadingForward;
    private boolean loadingFromOldPosition;
    private int loadingPinnedMessage;
    private int loadsCount;
    private boolean locationAlertShown;
    private int[] maxDate;
    private int[] maxMessageId;
    private TextView mediaBanTooltip;
    private FrameLayout mentionContainer;
    private ExtendedGridLayoutManager mentionGridLayoutManager;
    private LinearLayoutManager mentionLayoutManager;
    private AnimatorSet mentionListAnimation;
    private RecyclerListView mentionListView;
    private boolean mentionListViewIgnoreLayout;
    private boolean mentionListViewIsScrolling;
    private int mentionListViewLastViewPosition;
    private int mentionListViewLastViewTop;
    private int mentionListViewScrollOffsetY;
    private FrameLayout mentiondownButton;
    private ObjectAnimator mentiondownButtonAnimation;
    private TextView mentiondownButtonCounter;
    private ImageView mentiondownButtonImage;
    private MentionsAdapter mentionsAdapter;
    private RecyclerListView.OnItemClickListener mentionsOnItemClickListener;
    private long mergeDialogId;
    protected ArrayList<MessageObject> messages;
    private HashMap<String, ArrayList<MessageObject>> messagesByDays;
    private SparseArray<MessageObject>[] messagesDict;
    private int[] minDate;
    private int[] minMessageId;
    private ActionBarMenuSubItem muteItem;
    private MessageObject needAnimateToMessage;
    private boolean needSelectFromMessageId;
    private int newMentionsCount;
    private int newUnreadMessageCount;
    private HintView noSoundHintView;
    RecyclerListView.OnItemClickListenerExtended onItemClickListener;
    RecyclerListView.OnItemLongClickListenerExtended onItemLongClickListener;
    private boolean openAnimationEnded;
    private boolean openSearchKeyboard;
    private View overlayView;
    private FrameLayout pagedownButton;
    private AnimatorSet pagedownButtonAnimation;
    private TextView pagedownButtonCounter;
    private ImageView pagedownButtonImage;
    private boolean pagedownButtonShowedByScroll;
    private boolean paused;
    private boolean pausedOnLastMessage;
    private String pendingLinkSearchString;
    private Runnable pendingWebPageTimeoutRunnable;
    private PhotoViewer.PhotoViewerProvider photoViewerProvider;
    private int pinnedImageCacheType;
    private TLRPC.PhotoSize pinnedImageLocation;
    private TLObject pinnedImageLocationObject;
    private int pinnedImageSize;
    private TLRPC.PhotoSize pinnedImageThumbLocation;
    private View pinnedLineView;
    private BackupImageView pinnedMessageImageView;
    private SimpleTextView pinnedMessageNameTextView;
    private MessageObject pinnedMessageObject;
    private SimpleTextView pinnedMessageTextView;
    private FrameLayout pinnedMessageView;
    private AnimatorSet pinnedMessageViewAnimator;
    private LongSparseArray<ArrayList<MessageObject>> polls;
    ArrayList<MessageObject> pollsToCheck;
    private int prevSetUnreadCount;
    private RadialProgressView progressBar;
    private FrameLayout progressView;
    private View progressView2;
    private TextView replyButton;
    private AnimatorSet replyButtonAnimation;
    private ImageView replyCloseImageView;
    private ImageView replyIconImageView;
    private int replyImageCacheType;
    private TLRPC.PhotoSize replyImageLocation;
    private TLObject replyImageLocationObject;
    private int replyImageSize;
    private TLRPC.PhotoSize replyImageThumbLocation;
    private BackupImageView replyImageView;
    private View replyLineView;
    private SimpleTextView replyNameTextView;
    private SimpleTextView replyObjectTextView;
    private MessageObject replyingMessageObject;
    private TextView reportSpamButton;
    private FrameLayout reportSpamContainer;
    private LinearLayout reportSpamView;
    private AnimatorSet reportSpamViewAnimator;
    private int returnToLoadIndex;
    private int returnToMessageId;
    private AnimatorSet runningAnimation;
    private AnimatorSet scrimAnimatorSet;
    private Paint scrimPaint;
    private ActionBarPopupWindow scrimPopupWindow;
    private View scrimView;
    private MessageObject scrollToMessage;
    private int scrollToMessagePosition;
    private int scrollToOffsetOnRecreate;
    private int scrollToPositionOnRecreate;
    private boolean scrollToTopOnResume;
    private boolean scrollToTopUnReadOnResume;
    private boolean scrollToVideo;
    private boolean scrollingChatListView;
    private boolean scrollingFloatingDate;
    private ImageView searchCalendarButton;
    private FrameLayout searchContainer;
    private SimpleTextView searchCountText;
    private ImageView searchDownButton;
    private ActionBarMenuItem searchItem;
    private ImageView searchUpButton;
    private ImageView searchUserButton;
    private boolean searchingForUser;
    private TLRPC.User searchingUserMessages;
    private SparseArray<MessageObject>[] selectedMessagesCanCopyIds;
    private SparseArray<MessageObject>[] selectedMessagesCanStarIds;
    private NumberTextView selectedMessagesCountTextView;
    private SparseArray<MessageObject>[] selectedMessagesIds;
    private MessageObject selectedObject;
    private MessageObject.GroupedMessages selectedObjectGroup;
    private int startLoadFromMessageId;
    private int startLoadFromMessageOffset;
    private String startVideoEdit;
    private StickersAdapter stickersAdapter;
    private RecyclerListView stickersListView;
    private RecyclerListView.OnItemClickListener stickersOnItemClickListener;
    private FrameLayout stickersPanel;
    private ImageView stickersPanelArrow;
    private View timeItem2;
    private int topViewWasVisible;
    private UndoView undoView;
    private MessageObject unreadMessageObject;
    private Runnable unselectRunnable;
    private boolean userBlocked;
    protected TLRPC.UserFull userInfo;
    private FrameLayout videoPlayerContainer;
    private TextureView videoTextureView;
    private AnimatorSet voiceHintAnimation;
    private Runnable voiceHintHideRunnable;
    private TextView voiceHintTextView;
    private Runnable waitingForCharaterEnterRunnable;
    private ArrayList<Integer> waitingForLoad;
    private boolean waitingForReplyMessageLoad;
    private boolean wasManualScroll;
    private boolean wasPaused;
    
    public ChatActivity(final Bundle bundle) {
        super(bundle);
        this.userBlocked = false;
        this.chatMessageCellsCache = new ArrayList<ChatMessageCell>();
        this.actionModeViews = new ArrayList<View>();
        this.hideDateDelay = 500;
        this.animatingMessageObjects = new ArrayList<MessageObject>();
        this.scrollToPositionOnRecreate = -1;
        this.scrollToOffsetOnRecreate = 0;
        this.pollsToCheck = new ArrayList<MessageObject>(10);
        this.allowContextBotPanelSecond = true;
        this.paused = true;
        this.firstOpen = true;
        this.selectedMessagesIds = (SparseArray<MessageObject>[])new SparseArray[] { new SparseArray(), new SparseArray() };
        this.selectedMessagesCanCopyIds = (SparseArray<MessageObject>[])new SparseArray[] { new SparseArray(), new SparseArray() };
        this.selectedMessagesCanStarIds = (SparseArray<MessageObject>[])new SparseArray[] { new SparseArray(), new SparseArray() };
        this.waitingForLoad = new ArrayList<Integer>();
        this.prevSetUnreadCount = Integer.MIN_VALUE;
        this.messagesDict = (SparseArray<MessageObject>[])new SparseArray[] { new SparseArray(), new SparseArray() };
        this.messagesByDays = new HashMap<String, ArrayList<MessageObject>>();
        this.messages = new ArrayList<MessageObject>();
        this.polls = (LongSparseArray<ArrayList<MessageObject>>)new LongSparseArray();
        this.groupedMessagesMap = (LongSparseArray<MessageObject.GroupedMessages>)new LongSparseArray();
        this.maxMessageId = new int[] { Integer.MAX_VALUE, Integer.MAX_VALUE };
        this.minMessageId = new int[] { Integer.MIN_VALUE, Integer.MIN_VALUE };
        this.maxDate = new int[] { Integer.MIN_VALUE, Integer.MIN_VALUE };
        this.minDate = new int[2];
        this.endReached = new boolean[2];
        this.cacheEndReached = new boolean[2];
        this.forwardEndReached = new boolean[] { true, true };
        this.firstLoading = true;
        this.firstUnreadSent = false;
        this.last_message_id = 0;
        this.startLoadFromMessageOffset = Integer.MAX_VALUE;
        this.first = true;
        this.highlightMessageId = Integer.MAX_VALUE;
        this.scrollToMessagePosition = -10000;
        this.botInfo = (SparseArray<TLRPC.BotInfo>)new SparseArray();
        this.photoViewerProvider = new PhotoViewer.EmptyPhotoViewerProvider() {
            @Override
            public PlaceProviderObject getPlaceForPhoto(final MessageObject messageObject, final TLRPC.FileLocation fileLocation, int statusBarHeight, final boolean b) {
                final int childCount = ChatActivity.this.chatListView.getChildCount();
                final int n = 0;
                statusBarHeight = 0;
                while (true) {
                    final ImageReceiver imageReceiver = null;
                    if (statusBarHeight >= childCount) {
                        return null;
                    }
                    final View child = ChatActivity.this.chatListView.getChildAt(statusBarHeight);
                    ImageReceiver imageReceiver2;
                    if (child instanceof ChatMessageCell) {
                        imageReceiver2 = imageReceiver;
                        if (messageObject != null) {
                            final ChatMessageCell chatMessageCell = (ChatMessageCell)child;
                            final MessageObject messageObject2 = chatMessageCell.getMessageObject();
                            imageReceiver2 = imageReceiver;
                            if (messageObject2 != null) {
                                imageReceiver2 = imageReceiver;
                                if (messageObject2.getId() == messageObject.getId()) {
                                    imageReceiver2 = chatMessageCell.getPhotoImage();
                                }
                            }
                        }
                    }
                    else {
                        imageReceiver2 = imageReceiver;
                        if (child instanceof ChatActionCell) {
                            final ChatActionCell chatActionCell = (ChatActionCell)child;
                            final MessageObject messageObject3 = chatActionCell.getMessageObject();
                            imageReceiver2 = imageReceiver;
                            if (messageObject3 != null) {
                                if (messageObject != null) {
                                    imageReceiver2 = imageReceiver;
                                    if (messageObject3.getId() == messageObject.getId()) {
                                        imageReceiver2 = chatActionCell.getPhotoImage();
                                    }
                                }
                                else {
                                    imageReceiver2 = imageReceiver;
                                    if (fileLocation != null) {
                                        imageReceiver2 = imageReceiver;
                                        if (messageObject3.photoThumbs != null) {
                                            int index = 0;
                                            while (true) {
                                                imageReceiver2 = imageReceiver;
                                                if (index >= messageObject3.photoThumbs.size()) {
                                                    break;
                                                }
                                                final TLRPC.FileLocation location = messageObject3.photoThumbs.get(index).location;
                                                if (location.volume_id == fileLocation.volume_id && location.local_id == fileLocation.local_id) {
                                                    imageReceiver2 = chatActionCell.getPhotoImage();
                                                    break;
                                                }
                                                ++index;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    if (imageReceiver2 != null) {
                        final int[] array = new int[2];
                        child.getLocationInWindow(array);
                        final PlaceProviderObject placeProviderObject = new PhotoViewer.PlaceProviderObject();
                        placeProviderObject.viewX = array[0];
                        final int n2 = array[1];
                        if (Build$VERSION.SDK_INT >= 21) {
                            statusBarHeight = n;
                        }
                        else {
                            statusBarHeight = AndroidUtilities.statusBarHeight;
                        }
                        placeProviderObject.viewY = n2 - statusBarHeight;
                        placeProviderObject.parentView = (View)ChatActivity.this.chatListView;
                        placeProviderObject.imageReceiver = imageReceiver2;
                        if (b) {
                            placeProviderObject.thumb = imageReceiver2.getBitmapSafe();
                        }
                        placeProviderObject.radius = imageReceiver2.getRoundRadius();
                        if (child instanceof ChatActionCell) {
                            final TLRPC.Chat currentChat = ChatActivity.this.currentChat;
                            if (currentChat != null) {
                                placeProviderObject.dialogId = -currentChat.id;
                            }
                        }
                        if ((ChatActivity.this.pinnedMessageView != null && ChatActivity.this.pinnedMessageView.getTag() == null) || (ChatActivity.this.reportSpamView != null && ChatActivity.this.reportSpamView.getTag() == null)) {
                            placeProviderObject.clipTopAddition = AndroidUtilities.dp(48.0f);
                        }
                        placeProviderObject.clipTopAddition += ChatActivity.this.chatListViewClipTop;
                        return placeProviderObject;
                    }
                    ++statusBarHeight;
                }
            }
        };
        this.botContextProvider = new PhotoViewer.EmptyPhotoViewerProvider() {
            @Override
            public PlaceProviderObject getPlaceForPhoto(final MessageObject messageObject, final TLRPC.FileLocation fileLocation, int i, final boolean b) {
                if (i >= 0) {
                    if (i < ChatActivity.this.botContextResults.size()) {
                        final int childCount = ChatActivity.this.mentionListView.getChildCount();
                        final TLRPC.BotInlineResult value = ChatActivity.this.botContextResults.get(i);
                        final int n = 0;
                        View child;
                        ContextLinkCell contextLinkCell;
                        ImageReceiver photoImage = null;
                        int[] array;
                        PlaceProviderObject placeProviderObject;
                        int n2;
                        for (i = 0; i < childCount; ++i) {
                            child = ChatActivity.this.mentionListView.getChildAt(i);
                            Label_0100: {
                                if (child instanceof ContextLinkCell) {
                                    contextLinkCell = (ContextLinkCell)child;
                                    if (contextLinkCell.getResult() == value) {
                                        photoImage = contextLinkCell.getPhotoImage();
                                        break Label_0100;
                                    }
                                }
                                photoImage = null;
                            }
                            if (photoImage != null) {
                                array = new int[2];
                                child.getLocationInWindow(array);
                                placeProviderObject = new PhotoViewer.PlaceProviderObject();
                                placeProviderObject.viewX = array[0];
                                n2 = array[1];
                                if (Build$VERSION.SDK_INT >= 21) {
                                    i = n;
                                }
                                else {
                                    i = AndroidUtilities.statusBarHeight;
                                }
                                placeProviderObject.viewY = n2 - i;
                                placeProviderObject.parentView = (View)ChatActivity.this.mentionListView;
                                placeProviderObject.imageReceiver = photoImage;
                                placeProviderObject.thumb = photoImage.getBitmapSafe();
                                placeProviderObject.radius = photoImage.getRoundRadius();
                                return placeProviderObject;
                            }
                        }
                    }
                }
                return null;
            }
            
            @Override
            public void sendButtonPressed(final int index, final VideoEditedInfo videoEditedInfo) {
                if (index >= 0) {
                    if (index < ChatActivity.this.botContextResults.size()) {
                        final ChatActivity this$0 = ChatActivity.this;
                        this$0.sendBotInlineResult((TLRPC.BotInlineResult)this$0.botContextResults.get(index));
                    }
                }
            }
        };
        this.onItemLongClickListener = new RecyclerListView.OnItemLongClickListenerExtended() {
            @Override
            public boolean onItemClick(final View view, final int n, final float n2, final float n3) {
                ChatActivity.this.wasManualScroll = true;
                if (!ChatActivity.this.actionBar.isActionModeShowed()) {
                    ChatActivity.this.createMenu(view, false, true, n2, n3);
                }
                else {
                    boolean b = false;
                    if (view instanceof ChatMessageCell) {
                        b = (((ChatMessageCell)view).isInsideBackground(n2, n3) ^ true);
                    }
                    ChatActivity.this.processRowSelect(view, b, n2, n3);
                }
                return true;
            }
            
            @Override
            public void onLongClickRelease() {
            }
            
            @Override
            public void onMove(final float n, final float n2) {
            }
        };
        this.onItemClickListener = new RecyclerListView.OnItemClickListenerExtended() {
            @Override
            public void onItemClick(final View view, final int n, final float n2, final float n3) {
                ChatActivity.this.wasManualScroll = true;
                if (ChatActivity.this.actionBar.isActionModeShowed()) {
                    boolean b = false;
                    if (view instanceof ChatMessageCell) {
                        b = (((ChatMessageCell)view).isInsideBackground(n2, n3) ^ true);
                    }
                    ChatActivity.this.processRowSelect(view, b, n2, n3);
                    return;
                }
                ChatActivity.this.createMenu(view, true, false, n2, n3);
            }
        };
    }
    
    private void addToPolls(final MessageObject e, final MessageObject o) {
        final long pollId = e.getPollId();
        if (pollId != 0L) {
            ArrayList<MessageObject> list;
            if ((list = (ArrayList<MessageObject>)this.polls.get(pollId)) == null) {
                list = new ArrayList<MessageObject>();
                this.polls.put(pollId, (Object)list);
            }
            list.add(e);
            if (o != null) {
                list.remove(o);
            }
        }
    }
    
    private void addToSelectedMessages(final MessageObject messageObject, final boolean b) {
        this.addToSelectedMessages(messageObject, b, true);
    }
    
    private void addToSelectedMessages(final MessageObject messageObject, final boolean b, final boolean b2) {
        final int cantForwardMessagesCount = this.cantForwardMessagesCount;
        if (messageObject != null) {
            int n;
            if (messageObject.getDialogId() == this.dialog_id) {
                n = 0;
            }
            else {
                n = 1;
            }
            if (b && messageObject.getGroupId() != 0L) {
                final MessageObject.GroupedMessages groupedMessages = (MessageObject.GroupedMessages)this.groupedMessagesMap.get(messageObject.getGroupId());
                if (groupedMessages != null) {
                    int i = 0;
                    boolean b3 = false;
                    int n2 = 0;
                    while (i < groupedMessages.messages.size()) {
                        if (this.selectedMessagesIds[n].indexOfKey(groupedMessages.messages.get(i).getId()) < 0) {
                            n2 = i;
                            b3 = true;
                        }
                        ++i;
                    }
                    for (int j = 0; j < groupedMessages.messages.size(); ++j) {
                        final MessageObject messageObject2 = groupedMessages.messages.get(j);
                        if (b3) {
                            if (this.selectedMessagesIds[n].indexOfKey(messageObject2.getId()) < 0) {
                                this.addToSelectedMessages(messageObject2, false, j == n2);
                            }
                        }
                        else {
                            this.addToSelectedMessages(messageObject2, false, j == groupedMessages.messages.size() - 1);
                        }
                    }
                }
                return;
            }
            if (this.selectedMessagesIds[n].indexOfKey(messageObject.getId()) >= 0) {
                this.selectedMessagesIds[n].remove(messageObject.getId());
                if (messageObject.type == 0 || messageObject.caption != null) {
                    this.selectedMessagesCanCopyIds[n].remove(messageObject.getId());
                }
                if (messageObject.isSticker()) {
                    this.selectedMessagesCanStarIds[n].remove(messageObject.getId());
                }
                if (messageObject.canEditMessage(this.currentChat)) {
                    --this.canEditMessagesCount;
                }
                if (!messageObject.canDeleteMessage(this.currentChat)) {
                    --this.cantDeleteMessagesCount;
                }
                if (!messageObject.canForwardMessage()) {
                    --this.cantForwardMessagesCount;
                }
            }
            else {
                if (this.selectedMessagesIds[0].size() + this.selectedMessagesIds[1].size() >= 100) {
                    return;
                }
                this.selectedMessagesIds[n].put(messageObject.getId(), (Object)messageObject);
                if (messageObject.type == 0 || messageObject.caption != null) {
                    this.selectedMessagesCanCopyIds[n].put(messageObject.getId(), (Object)messageObject);
                }
                if (messageObject.isSticker()) {
                    this.selectedMessagesCanStarIds[n].put(messageObject.getId(), (Object)messageObject);
                }
                if (messageObject.canEditMessage(this.currentChat)) {
                    ++this.canEditMessagesCount;
                }
                if (!messageObject.canDeleteMessage(this.currentChat)) {
                    ++this.cantDeleteMessagesCount;
                }
                if (!messageObject.canForwardMessage()) {
                    ++this.cantForwardMessagesCount;
                }
            }
        }
        final AnimatorSet forwardButtonAnimation = this.forwardButtonAnimation;
        if (forwardButtonAnimation != null) {
            forwardButtonAnimation.cancel();
            this.forwardButtonAnimation = null;
        }
        if (b2 && super.actionBar.isActionModeShowed()) {
            final int n3 = this.selectedMessagesIds[0].size() + this.selectedMessagesIds[1].size();
            if (n3 == 0) {
                this.hideActionMode();
                this.updatePinnedMessageView(true);
            }
            else {
                final ActionBarMenuItem item = super.actionBar.createActionMode().getItem(10);
                final ActionBarMenuItem item2 = super.actionBar.createActionMode().getItem(22);
                final ActionBarMenuItem item3 = super.actionBar.createActionMode().getItem(23);
                final ActionBarMenuItem item4 = super.actionBar.createActionMode().getItem(11);
                if ((cantForwardMessagesCount == 0 && this.cantForwardMessagesCount != 0) || (cantForwardMessagesCount != 0 && this.cantForwardMessagesCount == 0)) {
                    this.forwardButtonAnimation = new AnimatorSet();
                    final ArrayList<ObjectAnimator> list = new ArrayList<ObjectAnimator>();
                    if (item4 != null) {
                        item4.setEnabled(this.cantForwardMessagesCount == 0);
                        final Property alpha = View.ALPHA;
                        float n4;
                        if (this.cantForwardMessagesCount == 0) {
                            n4 = 1.0f;
                        }
                        else {
                            n4 = 0.5f;
                        }
                        list.add(ObjectAnimator.ofFloat((Object)item4, alpha, new float[] { n4 }));
                    }
                    final TextView forwardButton = this.forwardButton;
                    if (forwardButton != null) {
                        forwardButton.setEnabled(this.cantForwardMessagesCount == 0);
                        final TextView forwardButton2 = this.forwardButton;
                        final Property alpha2 = View.ALPHA;
                        float n5;
                        if (this.cantForwardMessagesCount == 0) {
                            n5 = 1.0f;
                        }
                        else {
                            n5 = 0.5f;
                        }
                        list.add(ObjectAnimator.ofFloat((Object)forwardButton2, alpha2, new float[] { n5 }));
                    }
                    this.forwardButtonAnimation.playTogether((Collection)list);
                    this.forwardButtonAnimation.setDuration(100L);
                    this.forwardButtonAnimation.addListener((Animator$AnimatorListener)new AnimatorListenerAdapter() {
                        public void onAnimationEnd(final Animator animator) {
                            ChatActivity.this.forwardButtonAnimation = null;
                        }
                    });
                    this.forwardButtonAnimation.start();
                }
                else {
                    if (item4 != null) {
                        item4.setEnabled(this.cantForwardMessagesCount == 0);
                        float alpha3;
                        if (this.cantForwardMessagesCount == 0) {
                            alpha3 = 1.0f;
                        }
                        else {
                            alpha3 = 0.5f;
                        }
                        item4.setAlpha(alpha3);
                    }
                    final TextView forwardButton3 = this.forwardButton;
                    if (forwardButton3 != null) {
                        forwardButton3.setEnabled(this.cantForwardMessagesCount == 0);
                        final TextView forwardButton4 = this.forwardButton;
                        float alpha4;
                        if (this.cantForwardMessagesCount == 0) {
                            alpha4 = 1.0f;
                        }
                        else {
                            alpha4 = 0.5f;
                        }
                        forwardButton4.setAlpha(alpha4);
                    }
                }
                final int visibility = item.getVisibility();
                final int visibility2 = item2.getVisibility();
                int visibility3;
                if (this.selectedMessagesCanCopyIds[0].size() + this.selectedMessagesCanCopyIds[1].size() != 0) {
                    visibility3 = 0;
                }
                else {
                    visibility3 = 8;
                }
                item.setVisibility(visibility3);
                int visibility4;
                if (DataQuery.getInstance(super.currentAccount).canAddStickerToFavorites() && this.selectedMessagesCanStarIds[0].size() + this.selectedMessagesCanStarIds[1].size() == n3) {
                    visibility4 = 0;
                }
                else {
                    visibility4 = 8;
                }
                item2.setVisibility(visibility4);
                final int visibility5 = item.getVisibility();
                final int visibility6 = item2.getVisibility();
                final ActionBarMenuItem item5 = super.actionBar.createActionMode().getItem(12);
                int visibility7;
                if (this.cantDeleteMessagesCount == 0) {
                    visibility7 = 0;
                }
                else {
                    visibility7 = 8;
                }
                item5.setVisibility(visibility7);
                this.hasUnfavedSelected = false;
                for (int k = 0; k < 2; ++k) {
                    for (int l = 0; l < this.selectedMessagesCanStarIds[k].size(); ++l) {
                        if (!DataQuery.getInstance(super.currentAccount).isStickerInFavorites(((MessageObject)this.selectedMessagesCanStarIds[k].valueAt(l)).getDocument())) {
                            this.hasUnfavedSelected = true;
                            break;
                        }
                    }
                    if (this.hasUnfavedSelected) {
                        break;
                    }
                }
                int icon;
                if (this.hasUnfavedSelected) {
                    icon = 2131165626;
                }
                else {
                    icon = 2131165677;
                }
                item2.setIcon(icon);
                int n6;
                if (this.canEditMessagesCount == 1 && n3 == 1) {
                    n6 = 0;
                }
                else {
                    n6 = 8;
                }
                if (this.replyButton != null) {
                    final TLRPC.EncryptedChat currentEncryptedChat = this.currentEncryptedChat;
                    boolean b4 = false;
                    Label_1445: {
                        Label_1442: {
                            if ((currentEncryptedChat == null || AndroidUtilities.getPeerLayerVersion(currentEncryptedChat.layer) >= 46) && !this.isBroadcast) {
                                final FrameLayout bottomOverlayChat = this.bottomOverlayChat;
                                if (bottomOverlayChat == null || bottomOverlayChat.getVisibility() != 0) {
                                    final TLRPC.Chat currentChat = this.currentChat;
                                    if (currentChat != null) {
                                        if (ChatObject.isNotInChat(currentChat) || (ChatObject.isChannel(this.currentChat) && !ChatObject.canPost(this.currentChat) && !this.currentChat.megagroup)) {
                                            break Label_1442;
                                        }
                                        if (!ChatObject.canSendMessages(this.currentChat)) {
                                            break Label_1442;
                                        }
                                    }
                                    b4 = true;
                                    break Label_1445;
                                }
                            }
                        }
                        b4 = false;
                    }
                    int visibility8 = 0;
                    Label_1625: {
                        if (b4 && n3 != 0 && (this.selectedMessagesIds[0].size() == 0 || this.selectedMessagesIds[1].size() == 0)) {
                            if (n3 == 1) {
                                visibility8 = 0;
                            }
                            else {
                                int n7 = 0;
                                int n8 = 0;
                                long n9 = 0L;
                            Label_1503:
                                while (true) {
                                    visibility8 = n8;
                                    if (n7 < 2) {
                                        final int size = this.selectedMessagesIds[n7].size();
                                        int n10 = 0;
                                        while (true) {
                                            while (n10 < size) {
                                                final long groupId = ((MessageObject)this.selectedMessagesIds[n7].valueAt(n10)).getGroupId();
                                                if (groupId != 0L && (n9 == 0L || n9 == groupId)) {
                                                    ++n10;
                                                    n9 = groupId;
                                                }
                                                else {
                                                    visibility8 = 8;
                                                    if (visibility8 == 8) {
                                                        break Label_1625;
                                                    }
                                                    ++n7;
                                                    n8 = visibility8;
                                                    continue Label_1503;
                                                }
                                            }
                                            visibility8 = n8;
                                            continue;
                                        }
                                    }
                                    break;
                                }
                            }
                        }
                        else {
                            visibility8 = 8;
                        }
                    }
                    if (this.replyButton.getVisibility() != visibility8) {
                        final AnimatorSet replyButtonAnimation = this.replyButtonAnimation;
                        if (replyButtonAnimation != null) {
                            replyButtonAnimation.cancel();
                        }
                        this.replyButtonAnimation = new AnimatorSet();
                        if (visibility8 == 0) {
                            this.replyButton.setVisibility(visibility8);
                            this.replyButtonAnimation.playTogether(new Animator[] { (Animator)ObjectAnimator.ofFloat((Object)this.replyButton, View.ALPHA, new float[] { 1.0f }), (Animator)ObjectAnimator.ofFloat((Object)this.replyButton, View.SCALE_Y, new float[] { 1.0f }) });
                        }
                        else {
                            this.replyButtonAnimation.playTogether(new Animator[] { (Animator)ObjectAnimator.ofFloat((Object)this.replyButton, View.ALPHA, new float[] { 0.0f }), (Animator)ObjectAnimator.ofFloat((Object)this.replyButton, View.SCALE_Y, new float[] { 0.0f }) });
                        }
                        this.replyButtonAnimation.setDuration(100L);
                        this.replyButtonAnimation.addListener((Animator$AnimatorListener)new AnimatorListenerAdapter() {
                            public void onAnimationCancel(final Animator obj) {
                                if (ChatActivity.this.replyButtonAnimation != null && ChatActivity.this.replyButtonAnimation.equals(obj)) {
                                    ChatActivity.this.replyButtonAnimation = null;
                                }
                            }
                            
                            public void onAnimationEnd(final Animator obj) {
                                if (ChatActivity.this.replyButtonAnimation != null && ChatActivity.this.replyButtonAnimation.equals(obj) && visibility8 == 8) {
                                    ChatActivity.this.replyButton.setVisibility(8);
                                }
                            }
                        });
                        this.replyButtonAnimation.start();
                    }
                }
                if (item3 != null) {
                    if (visibility == visibility5 && visibility2 == visibility6) {
                        if (item3.getVisibility() != n6) {
                            final AnimatorSet editButtonAnimation = this.editButtonAnimation;
                            if (editButtonAnimation != null) {
                                editButtonAnimation.cancel();
                            }
                            this.editButtonAnimation = new AnimatorSet();
                            item3.setPivotX((float)AndroidUtilities.dp(54.0f));
                            item3.setPivotX((float)AndroidUtilities.dp(54.0f));
                            if (n6 == 0) {
                                item3.setVisibility(n6);
                                this.editButtonAnimation.playTogether(new Animator[] { (Animator)ObjectAnimator.ofFloat((Object)item3, View.ALPHA, new float[] { 1.0f }), (Animator)ObjectAnimator.ofFloat((Object)item3, View.SCALE_X, new float[] { 1.0f }) });
                            }
                            else {
                                this.editButtonAnimation.playTogether(new Animator[] { (Animator)ObjectAnimator.ofFloat((Object)item3, View.ALPHA, new float[] { 0.0f }), (Animator)ObjectAnimator.ofFloat((Object)item3, View.SCALE_X, new float[] { 0.0f }) });
                            }
                            this.editButtonAnimation.setDuration(100L);
                            this.editButtonAnimation.addListener((Animator$AnimatorListener)new AnimatorListenerAdapter() {
                                public void onAnimationCancel(final Animator obj) {
                                    if (ChatActivity.this.editButtonAnimation != null && ChatActivity.this.editButtonAnimation.equals(obj)) {
                                        ChatActivity.this.editButtonAnimation = null;
                                    }
                                }
                                
                                public void onAnimationEnd(final Animator obj) {
                                    if (ChatActivity.this.editButtonAnimation != null && ChatActivity.this.editButtonAnimation.equals(obj) && n6 == 8) {
                                        item3.setVisibility(8);
                                    }
                                }
                            });
                            this.editButtonAnimation.start();
                        }
                    }
                    else {
                        if (n6 == 0) {
                            item3.setAlpha(1.0f);
                            item3.setScaleX(1.0f);
                        }
                        else {
                            item3.setAlpha(0.0f);
                            item3.setScaleX(0.0f);
                        }
                        item3.setVisibility(n6);
                    }
                }
            }
        }
    }
    
    private void alertUserOpenError(final MessageObject messageObject) {
        if (this.getParentActivity() == null) {
            return;
        }
        final AlertDialog.Builder builder = new AlertDialog.Builder((Context)this.getParentActivity());
        builder.setTitle(LocaleController.getString("AppName", 2131558635));
        builder.setPositiveButton(LocaleController.getString("OK", 2131560097), null);
        if (messageObject.type == 3) {
            builder.setMessage(LocaleController.getString("NoPlayerInstalled", 2131559938));
        }
        else {
            builder.setMessage(LocaleController.formatString("NoHandleAppInstalled", 2131559926, messageObject.getDocument().mime_type));
        }
        this.showDialog(builder.create());
    }
    
    private void applyDraftMaybe(final boolean b) {
        if (this.chatActivityEnterView == null) {
            return;
        }
        final TLRPC.DraftMessage draft = DataQuery.getInstance(super.currentAccount).getDraft(this.dialog_id);
        TLRPC.Message draftMessage;
        if (draft != null && draft.reply_to_msg_id != 0) {
            draftMessage = DataQuery.getInstance(super.currentAccount).getDraftMessage(this.dialog_id);
        }
        else {
            draftMessage = null;
        }
        if (this.chatActivityEnterView.getFieldText() == null) {
            if (draft != null) {
                this.chatActivityEnterView.setWebPage(null, draft.no_webpage ^ true);
                CharSequence message;
                if (!draft.entities.isEmpty()) {
                    final SpannableStringBuilder value = SpannableStringBuilder.valueOf((CharSequence)draft.message);
                    DataQuery.sortEntities(draft.entities);
                    int index = 0;
                    int n = 0;
                    while (true) {
                        message = (CharSequence)value;
                        if (index >= draft.entities.size()) {
                            break;
                        }
                        final TLRPC.MessageEntity messageEntity = draft.entities.get(index);
                        final boolean b2 = messageEntity instanceof TLRPC.TL_inputMessageEntityMentionName;
                        int n2;
                        if (!b2 && !(messageEntity instanceof TLRPC.TL_messageEntityMentionName)) {
                            if (messageEntity instanceof TLRPC.TL_messageEntityCode) {
                                value.insert(messageEntity.offset + messageEntity.length + n, (CharSequence)"`");
                                value.insert(messageEntity.offset + n, (CharSequence)"`");
                                n2 = n + 2;
                            }
                            else if (messageEntity instanceof TLRPC.TL_messageEntityPre) {
                                value.insert(messageEntity.offset + messageEntity.length + n, (CharSequence)"```");
                                value.insert(messageEntity.offset + n, (CharSequence)"```");
                                n2 = n + 6;
                            }
                            else if (messageEntity instanceof TLRPC.TL_messageEntityBold) {
                                final TypefaceSpan typefaceSpan = new TypefaceSpan(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                                final int offset = messageEntity.offset;
                                value.setSpan((Object)typefaceSpan, offset + n, offset + messageEntity.length + n, 33);
                                n2 = n;
                            }
                            else if (messageEntity instanceof TLRPC.TL_messageEntityItalic) {
                                final TypefaceSpan typefaceSpan2 = new TypefaceSpan(AndroidUtilities.getTypeface("fonts/ritalic.ttf"));
                                final int offset2 = messageEntity.offset;
                                value.setSpan((Object)typefaceSpan2, offset2 + n, offset2 + messageEntity.length + n, 33);
                                n2 = n;
                            }
                            else {
                                n2 = n;
                                if (messageEntity instanceof TLRPC.TL_messageEntityTextUrl) {
                                    final URLSpanReplacement urlSpanReplacement = new URLSpanReplacement(messageEntity.url);
                                    final int offset3 = messageEntity.offset;
                                    value.setSpan((Object)urlSpanReplacement, offset3 + n, offset3 + messageEntity.length + n, 33);
                                    n2 = n;
                                }
                            }
                        }
                        else {
                            int i;
                            if (b2) {
                                i = ((TLRPC.TL_inputMessageEntityMentionName)messageEntity).user_id.user_id;
                            }
                            else {
                                i = ((TLRPC.TL_messageEntityMentionName)messageEntity).user_id;
                            }
                            if (messageEntity.offset + n + messageEntity.length < value.length() && value.charAt(messageEntity.offset + n + messageEntity.length) == ' ') {
                                ++messageEntity.length;
                            }
                            final StringBuilder sb = new StringBuilder();
                            sb.append("");
                            sb.append(i);
                            final URLSpanUserMention urlSpanUserMention = new URLSpanUserMention(sb.toString(), 1);
                            final int offset4 = messageEntity.offset;
                            value.setSpan((Object)urlSpanUserMention, offset4 + n, offset4 + n + messageEntity.length, 33);
                            n2 = n;
                        }
                        ++index;
                        n = n2;
                    }
                }
                else {
                    message = draft.message;
                }
                this.chatActivityEnterView.setFieldText(message);
                if (this.getArguments().getBoolean("hasUrl", false)) {
                    this.chatActivityEnterView.setSelection(draft.message.indexOf(10) + 1);
                    AndroidUtilities.runOnUIThread(new _$$Lambda$ChatActivity$ZJ9XtdLbm_762OgSj36cLqEdhaw(this), 700L);
                }
            }
        }
        else if (b && draft == null) {
            this.chatActivityEnterView.setFieldText("");
            this.hideFieldPanel(true);
        }
        if (this.replyingMessageObject == null && draftMessage != null) {
            final int currentAccount = super.currentAccount;
            this.showFieldPanelForReply(this.replyingMessageObject = new MessageObject(currentAccount, draftMessage, MessagesController.getInstance(currentAccount).getUsers(), false));
        }
    }
    
    private void checkActionBarMenu() {
        final TLRPC.EncryptedChat currentEncryptedChat = this.currentEncryptedChat;
        Label_0106: {
            if (currentEncryptedChat == null || currentEncryptedChat instanceof TLRPC.TL_encryptedChat) {
                final TLRPC.Chat currentChat = this.currentChat;
                if (currentChat == null || !ChatObject.isNotInChat(currentChat)) {
                    final TLRPC.User currentUser = this.currentUser;
                    if (currentUser == null || !UserObject.isDeleted(currentUser)) {
                        final View timeItem2 = this.timeItem2;
                        if (timeItem2 != null) {
                            timeItem2.setVisibility(0);
                        }
                        final ChatAvatarContainer avatarContainer = this.avatarContainer;
                        if (avatarContainer != null) {
                            avatarContainer.showTimeItem();
                        }
                        break Label_0106;
                    }
                }
            }
            final View timeItem3 = this.timeItem2;
            if (timeItem3 != null) {
                timeItem3.setVisibility(8);
            }
            final ChatAvatarContainer avatarContainer2 = this.avatarContainer;
            if (avatarContainer2 != null) {
                avatarContainer2.hideTimeItem();
            }
        }
        final ChatAvatarContainer avatarContainer3 = this.avatarContainer;
        if (avatarContainer3 != null) {
            final TLRPC.EncryptedChat currentEncryptedChat2 = this.currentEncryptedChat;
            if (currentEncryptedChat2 != null) {
                avatarContainer3.setTime(currentEncryptedChat2.ttl);
            }
        }
        this.checkAndUpdateAvatar();
    }
    
    private void checkAndUpdateAvatar() {
        if (this.currentUser != null) {
            final TLRPC.User user = MessagesController.getInstance(super.currentAccount).getUser(this.currentUser.id);
            if (user == null) {
                return;
            }
            this.currentUser = user;
        }
        else if (this.currentChat != null) {
            final TLRPC.Chat chat = MessagesController.getInstance(super.currentAccount).getChat(this.currentChat.id);
            if (chat == null) {
                return;
            }
            this.currentChat = chat;
        }
        final ChatAvatarContainer avatarContainer = this.avatarContainer;
        if (avatarContainer != null) {
            avatarContainer.checkAndUpdateAvatar();
        }
    }
    
    private void checkAutoDownloadMessage(final MessageObject messageObject) {
        if (messageObject.mediaExists) {
            return;
        }
        final int canDownloadMedia = DownloadController.getInstance(super.currentAccount).canDownloadMedia(messageObject.messageOwner);
        if (canDownloadMedia == 0) {
            return;
        }
        final TLRPC.Document document = messageObject.getDocument();
        TLRPC.PhotoSize closestPhotoSizeWithSize;
        if (document == null) {
            closestPhotoSizeWithSize = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, AndroidUtilities.getPhotoSize());
        }
        else {
            closestPhotoSizeWithSize = null;
        }
        if (document == null && closestPhotoSizeWithSize == null) {
            return;
        }
        int n = 2;
        if (canDownloadMedia != 2 && (canDownloadMedia != 1 || !messageObject.isVideo())) {
            if (document != null) {
                final FileLoader instance = FileLoader.getInstance(super.currentAccount);
                if (!MessageObject.isVideoDocument(document) || !messageObject.shouldEncryptPhotoOrVideo()) {
                    n = 0;
                }
                instance.loadFile(document, messageObject, 0, n);
            }
            else {
                final FileLoader instance2 = FileLoader.getInstance(super.currentAccount);
                final ImageLocation forObject = ImageLocation.getForObject(closestPhotoSizeWithSize, messageObject.photoThumbsObject);
                int n2;
                if (messageObject.shouldEncryptPhotoOrVideo()) {
                    n2 = 2;
                }
                else {
                    n2 = 0;
                }
                instance2.loadFile(forObject, messageObject, null, 0, n2);
            }
        }
        else if (document != null && this.currentEncryptedChat == null && !messageObject.shouldEncryptPhotoOrVideo() && messageObject.canStreamVideo()) {
            FileLoader.getInstance(super.currentAccount).loadFile(document, messageObject, 0, 10);
        }
    }
    
    private void checkAutoDownloadMessages(final boolean b) {
        final RecyclerListView chatListView = this.chatListView;
        if (chatListView == null) {
            return;
        }
        final int childCount = chatListView.getChildCount();
        int i = 0;
        int n = -1;
        int j = -1;
        while (i < childCount) {
            final View child = this.chatListView.getChildAt(i);
            int n2;
            if (!(child instanceof ChatMessageCell)) {
                n2 = j;
            }
            else {
                final RecyclerView.ViewHolder containingViewHolder = this.chatListView.findContainingViewHolder(child);
                int n3 = n;
                if (containingViewHolder != null) {
                    final int adapterPosition = containingViewHolder.getAdapterPosition();
                    n3 = n;
                    j = adapterPosition;
                    if (n == -1) {
                        n3 = adapterPosition;
                        j = adapterPosition;
                    }
                }
                final ChatMessageCell chatMessageCell = (ChatMessageCell)child;
                final MessageObject messageObject = chatMessageCell.getMessageObject();
                n = n3;
                n2 = j;
                if (messageObject != null) {
                    n = n3;
                    n2 = j;
                    if (!messageObject.mediaExists) {
                        if (!messageObject.isSent()) {
                            n = n3;
                            n2 = j;
                        }
                        else {
                            final TLRPC.Document document = messageObject.getDocument();
                            if (document == null) {
                                n = n3;
                                n2 = j;
                            }
                            else {
                                n = n3;
                                n2 = j;
                                if (!MessageObject.isStickerDocument(document)) {
                                    n = n3;
                                    n2 = j;
                                    if (!MessageObject.isGifDocument(document)) {
                                        n = n3;
                                        n2 = j;
                                        if (!MessageObject.isRoundVideoDocument(document)) {
                                            final int canDownloadMedia = DownloadController.getInstance(super.currentAccount).canDownloadMedia(messageObject.messageOwner);
                                            n = n3;
                                            n2 = j;
                                            if (canDownloadMedia != 0) {
                                                int n4 = 2;
                                                if (canDownloadMedia == 2) {
                                                    n = n3;
                                                    n2 = j;
                                                    if (this.currentEncryptedChat == null) {
                                                        n = n3;
                                                        n2 = j;
                                                        if (!messageObject.shouldEncryptPhotoOrVideo()) {
                                                            n = n3;
                                                            n2 = j;
                                                            if (messageObject.canStreamVideo()) {
                                                                FileLoader.getInstance(super.currentAccount).loadFile(document, messageObject, 0, 10);
                                                                n = n3;
                                                                n2 = j;
                                                            }
                                                        }
                                                    }
                                                }
                                                else {
                                                    final FileLoader instance = FileLoader.getInstance(super.currentAccount);
                                                    if (!MessageObject.isVideoDocument(document) || !messageObject.shouldEncryptPhotoOrVideo()) {
                                                        n4 = 0;
                                                    }
                                                    instance.loadFile(document, messageObject, 0, n4);
                                                    chatMessageCell.updateButtonState(false, true, false);
                                                    n2 = j;
                                                    n = n3;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            ++i;
            j = n2;
        }
        if (n != -1) {
            if (b) {
                int access$14500;
                if ((access$14500 = j + 10) >= this.chatAdapter.messagesEndRow) {
                    access$14500 = this.chatAdapter.messagesEndRow;
                }
                final int size = this.messages.size();
                while (j < access$14500) {
                    final int index = j - this.chatAdapter.messagesStartRow;
                    if (index >= 0) {
                        if (index < size) {
                            this.checkAutoDownloadMessage(this.messages.get(index));
                        }
                    }
                    ++j;
                }
            }
            else {
                int access$14501;
                if ((access$14501 = n - 20) <= this.chatAdapter.messagesStartRow) {
                    access$14501 = this.chatAdapter.messagesStartRow;
                }
                int k = n - 1;
                final int size2 = this.messages.size();
                while (k >= access$14501) {
                    final int index2 = k - this.chatAdapter.messagesStartRow;
                    if (index2 >= 0) {
                        if (index2 < size2) {
                            this.checkAutoDownloadMessage(this.messages.get(index2));
                        }
                    }
                    --k;
                }
            }
        }
        this.showNoSoundHint();
    }
    
    private void checkBotCommands() {
        final boolean b = false;
        int i = 0;
        URLSpanBotCommand.enabled = false;
        final TLRPC.User currentUser = this.currentUser;
        if (currentUser != null && currentUser.bot) {
            URLSpanBotCommand.enabled = true;
        }
        else {
            final TLRPC.ChatFull chatInfo = this.chatInfo;
            if (chatInfo instanceof TLRPC.TL_chatFull) {
                while (i < this.chatInfo.participants.participants.size()) {
                    final TLRPC.User user = MessagesController.getInstance(super.currentAccount).getUser(this.chatInfo.participants.participants.get(i).user_id);
                    if (user != null && user.bot) {
                        URLSpanBotCommand.enabled = true;
                        break;
                    }
                    ++i;
                }
            }
            else if (chatInfo instanceof TLRPC.TL_channelFull) {
                boolean enabled = b;
                if (!chatInfo.bot_info.isEmpty()) {
                    final TLRPC.Chat currentChat = this.currentChat;
                    enabled = b;
                    if (currentChat != null) {
                        enabled = b;
                        if (currentChat.megagroup) {
                            enabled = true;
                        }
                    }
                }
                URLSpanBotCommand.enabled = enabled;
            }
        }
    }
    
    private void checkBotKeyboard() {
        if (this.chatActivityEnterView != null) {
            final MessageObject botButtons = this.botButtons;
            if (botButtons != null) {
                if (!this.userBlocked) {
                    if (botButtons.messageOwner.reply_markup instanceof TLRPC.TL_replyKeyboardForceReply) {
                        final SharedPreferences mainSettings = MessagesController.getMainSettings(super.currentAccount);
                        final StringBuilder sb = new StringBuilder();
                        sb.append("answered_");
                        sb.append(this.dialog_id);
                        if (mainSettings.getInt(sb.toString(), 0) != this.botButtons.getId() && (this.replyingMessageObject == null || this.chatActivityEnterView.getFieldText() == null)) {
                            final MessageObject botButtons2 = this.botButtons;
                            this.botReplyButtons = botButtons2;
                            this.chatActivityEnterView.setButtons(botButtons2);
                            this.showFieldPanelForReply(this.botButtons);
                        }
                    }
                    else {
                        final MessageObject replyingMessageObject = this.replyingMessageObject;
                        if (replyingMessageObject != null && this.botReplyButtons == replyingMessageObject) {
                            this.botReplyButtons = null;
                            this.hideFieldPanel(true);
                        }
                        this.chatActivityEnterView.setButtons(this.botButtons);
                    }
                }
            }
        }
    }
    
    private void checkContextBotPanel() {
        if (this.allowStickersPanel) {
            final MentionsAdapter mentionsAdapter = this.mentionsAdapter;
            if (mentionsAdapter != null && mentionsAdapter.isBotContext()) {
                if (!this.allowContextBotPanel && !this.allowContextBotPanelSecond) {
                    if (this.mentionContainer.getVisibility() == 0 && this.mentionContainer.getTag() == null) {
                        final AnimatorSet mentionListAnimation = this.mentionListAnimation;
                        if (mentionListAnimation != null) {
                            mentionListAnimation.cancel();
                        }
                        this.mentionContainer.setTag((Object)1);
                        (this.mentionListAnimation = new AnimatorSet()).playTogether(new Animator[] { (Animator)ObjectAnimator.ofFloat((Object)this.mentionContainer, View.ALPHA, new float[] { 0.0f }) });
                        this.mentionListAnimation.addListener((Animator$AnimatorListener)new AnimatorListenerAdapter() {
                            public void onAnimationCancel(final Animator obj) {
                                if (ChatActivity.this.mentionListAnimation != null && ChatActivity.this.mentionListAnimation.equals(obj)) {
                                    ChatActivity.this.mentionListAnimation = null;
                                }
                            }
                            
                            public void onAnimationEnd(final Animator obj) {
                                if (ChatActivity.this.mentionListAnimation != null && ChatActivity.this.mentionListAnimation.equals(obj)) {
                                    ChatActivity.this.mentionContainer.setVisibility(4);
                                    ChatActivity.this.mentionListAnimation = null;
                                    ChatActivity.this.updateMessageListAccessibilityVisibility();
                                }
                            }
                        });
                        this.mentionListAnimation.setDuration(200L);
                        this.mentionListAnimation.start();
                    }
                }
                else if (this.mentionContainer.getVisibility() == 4 || this.mentionContainer.getTag() != null) {
                    final AnimatorSet mentionListAnimation2 = this.mentionListAnimation;
                    if (mentionListAnimation2 != null) {
                        mentionListAnimation2.cancel();
                    }
                    this.mentionContainer.setTag((Object)null);
                    this.mentionContainer.setVisibility(0);
                    this.updateMessageListAccessibilityVisibility();
                    (this.mentionListAnimation = new AnimatorSet()).playTogether(new Animator[] { (Animator)ObjectAnimator.ofFloat((Object)this.mentionContainer, View.ALPHA, new float[] { 0.0f, 1.0f }) });
                    this.mentionListAnimation.addListener((Animator$AnimatorListener)new AnimatorListenerAdapter() {
                        public void onAnimationCancel(final Animator obj) {
                            if (ChatActivity.this.mentionListAnimation != null && ChatActivity.this.mentionListAnimation.equals(obj)) {
                                ChatActivity.this.mentionListAnimation = null;
                            }
                        }
                        
                        public void onAnimationEnd(final Animator obj) {
                            if (ChatActivity.this.mentionListAnimation != null && ChatActivity.this.mentionListAnimation.equals(obj)) {
                                ChatActivity.this.mentionListAnimation = null;
                            }
                        }
                    });
                    this.mentionListAnimation.setDuration(200L);
                    this.mentionListAnimation.start();
                }
            }
        }
    }
    
    private void checkEditTimer() {
        final ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView == null) {
            return;
        }
        final MessageObject editingMessageObject = chatActivityEnterView.getEditingMessageObject();
        if (editingMessageObject == null) {
            return;
        }
        final TLRPC.User currentUser = this.currentUser;
        if (currentUser != null && currentUser.self) {
            return;
        }
        int n;
        if (editingMessageObject.canEditMessageAnytime(this.currentChat)) {
            n = 360;
        }
        else {
            n = MessagesController.getInstance(super.currentAccount).maxEditTime + 300 - Math.abs(ConnectionsManager.getInstance(super.currentAccount).getCurrentTime() - editingMessageObject.messageOwner.date);
        }
        if (n > 0) {
            if (n <= 300) {
                this.replyObjectTextView.setText(LocaleController.formatString("TimeToEdit", 2131560897, String.format("%d:%02d", n / 60, n % 60)));
            }
            AndroidUtilities.runOnUIThread(new _$$Lambda$ChatActivity$BhRjZmtnKKyPZ5cOcgFDHcn6z6c(this), 1000L);
        }
        else {
            this.chatActivityEnterView.onEditTimeExpired();
            this.replyObjectTextView.setText(LocaleController.formatString("TimeToEditExpired", 2131560898, new Object[0]));
        }
    }
    
    private void checkListViewPaddings() {
        if (!this.wasManualScroll) {
            final MessageObject unreadMessageObject = this.unreadMessageObject;
            if (unreadMessageObject != null) {
                if (this.messages.indexOf(unreadMessageObject) < 0) {
                    return;
                }
                this.fixPaddingsInLayout = true;
                final View fragmentView = super.fragmentView;
                if (fragmentView != null) {
                    fragmentView.requestLayout();
                }
                return;
            }
        }
        AndroidUtilities.runOnUIThread(new _$$Lambda$ChatActivity$qjQM5B3y6VBtwKZMKbvAeLv3zzQ(this));
    }
    
    private void checkListViewPaddingsInternal() {
        final GridLayoutManagerFixed chatLayoutManager = this.chatLayoutManager;
        if (chatLayoutManager == null) {
            return;
        }
        try {
            int firstVisibleItemPosition = chatLayoutManager.findFirstVisibleItemPosition();
            int n = 0;
            Label_0062: {
                if (!this.wasManualScroll && this.unreadMessageObject != null) {
                    final int index = this.messages.indexOf(this.unreadMessageObject);
                    if (index >= 0) {
                        n = this.chatAdapter.messagesStartRow + index;
                        firstVisibleItemPosition = -1;
                        break Label_0062;
                    }
                }
                n = -1;
            }
            int n2 = 0;
            Label_0111: {
                if (firstVisibleItemPosition != -1) {
                    final View viewByPosition = this.chatLayoutManager.findViewByPosition(firstVisibleItemPosition);
                    if (viewByPosition != null) {
                        n2 = this.chatListView.getMeasuredHeight() - viewByPosition.getBottom() - this.chatListView.getPaddingBottom();
                        break Label_0111;
                    }
                }
                n2 = 0;
            }
            if (this.chatListView.getPaddingTop() != AndroidUtilities.dp(52.0f) && ((this.pinnedMessageView != null && this.pinnedMessageView.getTag() == null) || (this.reportSpamView != null && this.reportSpamView.getTag() == null))) {
                this.chatListView.setPadding(0, AndroidUtilities.dp(52.0f), 0, AndroidUtilities.dp(3.0f));
                final FrameLayout$LayoutParams layoutParams = (FrameLayout$LayoutParams)this.floatingDateView.getLayoutParams();
                layoutParams.topMargin = AndroidUtilities.dp(52.0f);
                this.floatingDateView.setLayoutParams((ViewGroup$LayoutParams)layoutParams);
                this.chatListView.setTopGlowOffset(AndroidUtilities.dp(48.0f));
            }
            else if (this.chatListView.getPaddingTop() != AndroidUtilities.dp(4.0f) && (this.pinnedMessageView == null || this.pinnedMessageView.getTag() != null) && (this.reportSpamView == null || this.reportSpamView.getTag() != null)) {
                this.chatListView.setPadding(0, AndroidUtilities.dp(4.0f), 0, AndroidUtilities.dp(3.0f));
                final FrameLayout$LayoutParams layoutParams2 = (FrameLayout$LayoutParams)this.floatingDateView.getLayoutParams();
                layoutParams2.topMargin = AndroidUtilities.dp(4.0f);
                this.floatingDateView.setLayoutParams((ViewGroup$LayoutParams)layoutParams2);
                this.chatListView.setTopGlowOffset(0);
            }
            else {
                firstVisibleItemPosition = -1;
            }
            if (firstVisibleItemPosition != -1) {
                this.chatLayoutManager.scrollToPositionWithOffset(firstVisibleItemPosition, n2);
            }
            else if (n != -1) {
                this.chatLayoutManager.scrollToPositionWithOffset(n, this.chatListView.getMeasuredHeight() - this.chatListView.getPaddingBottom() - this.chatListView.getPaddingTop() - AndroidUtilities.dp(29.0f));
            }
        }
        catch (Exception ex) {
            FileLog.e(ex);
        }
    }
    
    private void checkRaiseSensors() {
        final ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null && chatActivityEnterView.isStickersExpanded()) {
            MediaController.getInstance().setAllowStartRecord(false);
        }
        else {
            final TLRPC.Chat currentChat = this.currentChat;
            if (currentChat != null && !ChatObject.canSendMedia(currentChat)) {
                MediaController.getInstance().setAllowStartRecord(false);
            }
            else {
                if (!ApplicationLoader.mainInterfacePaused) {
                    final FrameLayout bottomOverlayChat = this.bottomOverlayChat;
                    if (bottomOverlayChat == null || bottomOverlayChat.getVisibility() != 0) {
                        final FrameLayout bottomOverlay = this.bottomOverlay;
                        if (bottomOverlay == null || bottomOverlay.getVisibility() != 0) {
                            final FrameLayout searchContainer = this.searchContainer;
                            if (searchContainer == null || searchContainer.getVisibility() != 0) {
                                MediaController.getInstance().setAllowStartRecord(true);
                                return;
                            }
                        }
                    }
                }
                MediaController.getInstance().setAllowStartRecord(false);
            }
        }
    }
    
    private void checkScrollForLoad(final boolean b) {
        final GridLayoutManagerFixed chatLayoutManager = this.chatLayoutManager;
        if (chatLayoutManager != null) {
            if (!this.paused) {
                final int firstVisibleItemPosition = chatLayoutManager.findFirstVisibleItemPosition();
                int n;
                if (firstVisibleItemPosition == -1) {
                    n = 0;
                }
                else {
                    n = Math.abs(this.chatLayoutManager.findLastVisibleItemPosition() - firstVisibleItemPosition) + 1;
                }
                final int itemCount = this.chatAdapter.getItemCount();
                int n2;
                if (b) {
                    n2 = 25;
                }
                else {
                    n2 = 5;
                }
                if (itemCount - firstVisibleItemPosition - n <= n2 && !this.loading) {
                    final boolean[] endReached = this.endReached;
                    if (!endReached[0]) {
                        this.loading = true;
                        this.waitingForLoad.add(this.lastLoadIndex);
                        if (this.messagesByDays.size() != 0) {
                            MessagesController.getInstance(super.currentAccount).loadMessages(this.dialog_id, 50, this.maxMessageId[0], 0, this.cacheEndReached[0] ^ true, this.minDate[0], super.classGuid, 0, 0, ChatObject.isChannel(this.currentChat), this.lastLoadIndex++);
                        }
                        else {
                            MessagesController.getInstance(super.currentAccount).loadMessages(this.dialog_id, 50, 0, 0, this.cacheEndReached[0] ^ true, this.minDate[0], super.classGuid, 0, 0, ChatObject.isChannel(this.currentChat), this.lastLoadIndex++);
                        }
                    }
                    else if (this.mergeDialogId != 0L && !endReached[1]) {
                        this.loading = true;
                        this.waitingForLoad.add(this.lastLoadIndex);
                        MessagesController.getInstance(super.currentAccount).loadMessages(this.mergeDialogId, 50, this.maxMessageId[1], 0, this.cacheEndReached[1] ^ true, this.minDate[1], super.classGuid, 0, 0, ChatObject.isChannel(this.currentChat), this.lastLoadIndex++);
                    }
                }
                if (n > 0 && !this.loadingForward && firstVisibleItemPosition <= 10) {
                    if (this.mergeDialogId != 0L && !this.forwardEndReached[1]) {
                        this.waitingForLoad.add(this.lastLoadIndex);
                        MessagesController.getInstance(super.currentAccount).loadMessages(this.mergeDialogId, 50, this.minMessageId[1], 0, true, this.maxDate[1], super.classGuid, 1, 0, ChatObject.isChannel(this.currentChat), this.lastLoadIndex++);
                        this.loadingForward = true;
                    }
                    else if (!this.forwardEndReached[0]) {
                        this.waitingForLoad.add(this.lastLoadIndex);
                        MessagesController.getInstance(super.currentAccount).loadMessages(this.dialog_id, 50, this.minMessageId[0], 0, true, this.maxDate[0], super.classGuid, 1, 0, ChatObject.isChannel(this.currentChat), this.lastLoadIndex++);
                        this.loadingForward = true;
                    }
                }
            }
        }
    }
    
    private void checkSecretMessageForLocation(final MessageObject messageObject) {
        if (messageObject.type == 4 && !this.locationAlertShown) {
            if (!SharedConfig.isSecretMapPreviewSet()) {
                this.locationAlertShown = true;
                AlertsCreator.showSecretLocationAlert((Context)this.getParentActivity(), super.currentAccount, new _$$Lambda$ChatActivity$rniBJnXJmm7mozZMYIVZclwqFuA(this), true);
            }
        }
    }
    
    private void clearChatData() {
        this.messages.clear();
        this.messagesByDays.clear();
        this.waitingForLoad.clear();
        this.groupedMessagesMap.clear();
        final FrameLayout progressView = this.progressView;
        int visibility;
        if (this.chatAdapter.botInfoRow == -1) {
            visibility = 0;
        }
        else {
            visibility = 4;
        }
        progressView.setVisibility(visibility);
        this.chatListView.setEmptyView(null);
        for (int i = 0; i < 2; ++i) {
            this.messagesDict[i].clear();
            if (this.currentEncryptedChat == null) {
                this.maxMessageId[i] = Integer.MAX_VALUE;
                this.minMessageId[i] = Integer.MIN_VALUE;
            }
            else {
                this.maxMessageId[i] = Integer.MIN_VALUE;
                this.minMessageId[i] = Integer.MAX_VALUE;
            }
            this.maxDate[i] = Integer.MIN_VALUE;
            this.minDate[i] = 0;
            this.endReached[i] = false;
            this.cacheEndReached[i] = false;
            this.forwardEndReached[i] = true;
        }
        this.first = true;
        this.firstLoading = true;
        this.loading = true;
        this.loadingForward = false;
        this.waitingForReplyMessageLoad = false;
        this.startLoadFromMessageId = 0;
        this.last_message_id = 0;
        this.unreadMessageObject = null;
        this.createUnreadMessageAfterId = 0;
        this.createUnreadMessageAfterIdLoading = false;
        this.needSelectFromMessageId = false;
        this.chatAdapter.notifyDataSetChanged();
    }
    
    private void clearHistory(final boolean b) {
        this.messages.clear();
        this.waitingForLoad.clear();
        this.messagesByDays.clear();
        this.groupedMessagesMap.clear();
        for (int i = 1; i >= 0; --i) {
            this.messagesDict[i].clear();
            if (this.currentEncryptedChat == null) {
                this.maxMessageId[i] = Integer.MAX_VALUE;
                this.minMessageId[i] = Integer.MIN_VALUE;
            }
            else {
                this.maxMessageId[i] = Integer.MIN_VALUE;
                this.minMessageId[i] = Integer.MAX_VALUE;
            }
            this.maxDate[i] = Integer.MIN_VALUE;
            this.minDate[i] = 0;
            this.selectedMessagesIds[i].clear();
            this.selectedMessagesCanCopyIds[i].clear();
            this.selectedMessagesCanStarIds[i].clear();
        }
        this.hideActionMode();
        this.updatePinnedMessageView(true);
        if (this.botButtons != null) {
            this.botButtons = null;
            final ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
            if (chatActivityEnterView != null) {
                chatActivityEnterView.setButtons(null, false);
            }
        }
        int visibility = 4;
        if (b) {
            final ChatActivityAdapter chatAdapter = this.chatAdapter;
            if (chatAdapter != null) {
                final FrameLayout progressView = this.progressView;
                if (chatAdapter.botInfoRow == -1) {
                    visibility = 0;
                }
                progressView.setVisibility(visibility);
                this.chatListView.setEmptyView(null);
            }
            for (int j = 0; j < 2; ++j) {
                this.endReached[j] = false;
                this.cacheEndReached[j] = false;
                this.forwardEndReached[j] = true;
            }
            this.first = true;
            this.firstLoading = true;
            this.loading = true;
            this.startLoadFromMessageId = 0;
            this.needSelectFromMessageId = false;
            this.waitingForLoad.add(this.lastLoadIndex);
            final MessagesController instance = MessagesController.getInstance(super.currentAccount);
            final long dialog_id = this.dialog_id;
            int n;
            if (AndroidUtilities.isTablet()) {
                n = 30;
            }
            else {
                n = 20;
            }
            instance.loadMessages(dialog_id, n, 0, 0, true, 0, super.classGuid, 2, 0, ChatObject.isChannel(this.currentChat), this.lastLoadIndex++);
        }
        else {
            final FrameLayout progressView2 = this.progressView;
            if (progressView2 != null) {
                progressView2.setVisibility(4);
                this.chatListView.setEmptyView((View)this.emptyViewContainer);
            }
        }
        final ChatActivityAdapter chatAdapter2 = this.chatAdapter;
        if (chatAdapter2 != null) {
            chatAdapter2.notifyDataSetChanged();
        }
        if (this.currentEncryptedChat == null) {
            final TLRPC.User currentUser = this.currentUser;
            if (currentUser != null && currentUser.bot && this.botUser == null) {
                this.botUser = "";
                this.updateBottomOverlay();
            }
        }
    }
    
    private void createChatAttachView() {
        if (this.getParentActivity() == null) {
            return;
        }
        if (this.chatAttachAlert == null) {
            (this.chatAttachAlert = new ChatAttachAlert((Context)this.getParentActivity(), this)).setDelegate((ChatAttachAlert.ChatAttachViewDelegate)new ChatAttachAlert.ChatAttachViewDelegate() {
                @Override
                public boolean allowGroupPhotos() {
                    return ChatActivity.this.allowGroupPhotos();
                }
                
                @Override
                public void didPressedButton(final int n) {
                    if (ChatActivity.this.getParentActivity() != null) {
                        if (ChatActivity.this.chatAttachAlert != null) {
                            if (ChatActivity.this.chatAttachAlert != null) {
                                final ChatActivity this$0 = ChatActivity.this;
                                this$0.editingMessageObject = this$0.chatAttachAlert.getEditingMessageObject();
                            }
                            else {
                                ChatActivity.this.editingMessageObject = null;
                            }
                            if (n != 8 && n != 7 && (n != 4 || ChatActivity.this.chatAttachAlert.getSelectedPhotos().isEmpty())) {
                                if (ChatActivity.this.chatAttachAlert != null) {
                                    ChatActivity.this.chatAttachAlert.dismissWithButtonClick(n);
                                }
                                ChatActivity.this.processSelectedAttach(n);
                                return;
                            }
                            if (n != 8) {
                                ChatActivity.this.chatAttachAlert.dismiss();
                            }
                            final HashMap<Object, Object> selectedPhotos = ChatActivity.this.chatAttachAlert.getSelectedPhotos();
                            final ArrayList<Object> selectedPhotosOrder = ChatActivity.this.chatAttachAlert.getSelectedPhotosOrder();
                            if (!selectedPhotos.isEmpty()) {
                                final ArrayList<SendMessagesHelper.SendingMediaInfo> list = new ArrayList<SendMessagesHelper.SendingMediaInfo>();
                                for (int i = 0; i < selectedPhotosOrder.size(); ++i) {
                                    final MediaController.PhotoEntry photoEntry = selectedPhotos.get(selectedPhotosOrder.get(i));
                                    final SendMessagesHelper.SendingMediaInfo e = new SendMessagesHelper.SendingMediaInfo();
                                    final String imagePath = photoEntry.imagePath;
                                    if (imagePath != null) {
                                        e.path = imagePath;
                                    }
                                    else {
                                        final String path = photoEntry.path;
                                        if (path != null) {
                                            e.path = path;
                                        }
                                    }
                                    e.isVideo = photoEntry.isVideo;
                                    final CharSequence caption = photoEntry.caption;
                                    String string;
                                    if (caption != null) {
                                        string = caption.toString();
                                    }
                                    else {
                                        string = null;
                                    }
                                    e.caption = string;
                                    e.entities = photoEntry.entities;
                                    ArrayList<TLRPC.InputDocument> masks;
                                    if (!photoEntry.stickers.isEmpty()) {
                                        masks = new ArrayList<TLRPC.InputDocument>(photoEntry.stickers);
                                    }
                                    else {
                                        masks = null;
                                    }
                                    e.masks = masks;
                                    e.ttl = photoEntry.ttl;
                                    e.videoEditedInfo = photoEntry.editedInfo;
                                    e.canDeleteAfter = photoEntry.canDeleteAfter;
                                    list.add(e);
                                    photoEntry.reset();
                                }
                                ChatActivity.this.fillEditingMediaWithCaption(list.get(0).caption, list.get(0).entities);
                                SendMessagesHelper.prepareSendingMedia(list, ChatActivity.this.dialog_id, ChatActivity.this.replyingMessageObject, null, n == 4, SharedConfig.groupPhotosEnabled, ChatActivity.this.editingMessageObject);
                                ChatActivity.this.hideFieldPanel(false);
                                DataQuery.getInstance(ChatActivity.this.currentAccount).cleanDraft(ChatActivity.this.dialog_id, true);
                            }
                        }
                    }
                }
                
                @Override
                public void didSelectBot(final TLRPC.User user) {
                    if (ChatActivity.this.chatActivityEnterView != null) {
                        if (!TextUtils.isEmpty((CharSequence)user.username)) {
                            final ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                            final StringBuilder sb = new StringBuilder();
                            sb.append("@");
                            sb.append(user.username);
                            sb.append(" ");
                            chatActivityEnterView.setFieldText(sb.toString());
                            ChatActivity.this.chatActivityEnterView.openKeyboard();
                        }
                    }
                }
                
                @Override
                public View getRevealView() {
                    return (View)ChatActivity.this.chatActivityEnterView.getAttachButton();
                }
                
                @Override
                public void onCameraOpened() {
                    ChatActivity.this.chatActivityEnterView.closeKeyboard();
                }
            });
        }
    }
    
    private void createDeleteMessagesAlert(final MessageObject messageObject, final MessageObject.GroupedMessages groupedMessages) {
        this.createDeleteMessagesAlert(messageObject, groupedMessages, 1);
    }
    
    private void createDeleteMessagesAlert(final MessageObject messageObject, final MessageObject.GroupedMessages groupedMessages, final int n) {
        AlertsCreator.createDeleteMessagesAlert(this, this.currentUser, this.currentChat, this.currentEncryptedChat, this.chatInfo, this.mergeDialogId, messageObject, this.selectedMessagesIds, groupedMessages, n, new _$$Lambda$ChatActivity$Mp1WuH9ZS6bsX0nFDxDD37tKOe8(this));
    }
    
    private void createMenu(final View view, final boolean b, final boolean b2, final float n, final float n2) {
        this.createMenu(view, b, b2, n, n2, true);
    }
    
    private void createMenu(View scrimView, final boolean b, final boolean b2, final float n, final float n2, final boolean b3) {
        if (super.actionBar.isActionModeShowed()) {
            return;
        }
        MessageObject selectedObject;
        if (scrimView instanceof ChatMessageCell) {
            selectedObject = ((ChatMessageCell)scrimView).getMessageObject();
        }
        else if (scrimView instanceof ChatActionCell) {
            selectedObject = ((ChatActionCell)scrimView).getMessageObject();
        }
        else {
            selectedObject = null;
        }
        if (selectedObject == null) {
            return;
        }
        final int messageType = this.getMessageType(selectedObject);
        if (b) {
            final TLRPC.Message messageOwner = selectedObject.messageOwner;
            if (messageOwner.action instanceof TLRPC.TL_messageActionPinMessage) {
                this.scrollToMessageId(messageOwner.reply_to_msg_id, messageOwner.id, true, 0, false);
                return;
            }
        }
        this.selectedObject = null;
        this.selectedObjectGroup = null;
        this.forwardingMessage = null;
        this.forwardingMessageGroup = null;
        for (int i = 1; i >= 0; --i) {
            this.selectedMessagesCanCopyIds[i].clear();
            this.selectedMessagesCanStarIds[i].clear();
            this.selectedMessagesIds[i].clear();
        }
        this.hideActionMode();
        this.updatePinnedMessageView(true);
        MessageObject.GroupedMessages validGroupedMessage;
        if (b3) {
            validGroupedMessage = this.getValidGroupedMessage(selectedObject);
        }
        else {
            validGroupedMessage = null;
        }
        boolean can_pin_message = (this.currentChat == null) ? (this.currentEncryptedChat == null) : (selectedObject.getDialogId() != this.mergeDialogId && ChatObject.canPinMessages(this.currentChat));
        while (true) {
            boolean b4 = false;
            Label_0310: {
                if (can_pin_message && selectedObject.getId() > 0) {
                    final TLRPC.MessageAction action = selectedObject.messageOwner.action;
                    if (action == null || action instanceof TLRPC.TL_messageActionEmpty) {
                        b4 = true;
                        break Label_0310;
                    }
                }
                b4 = false;
            }
            boolean b5 = false;
            Label_0385: {
                Label_0382: {
                    if (selectedObject.getDialogId() != this.mergeDialogId && b4) {
                        final TLRPC.ChatFull chatInfo = this.chatInfo;
                        if (chatInfo == null || chatInfo.pinned_msg_id != selectedObject.getId()) {
                            final TLRPC.UserFull userInfo = this.userInfo;
                            if (userInfo == null || userInfo.pinned_msg_id != selectedObject.getId()) {
                                break Label_0382;
                            }
                        }
                        b5 = true;
                        break Label_0385;
                    }
                }
                b5 = false;
            }
            final boolean b6 = validGroupedMessage == null && selectedObject.canEditMessage(this.currentChat) && !this.chatActivityEnterView.hasAudioToSend() && selectedObject.getDialogId() != this.mergeDialogId;
            final TLRPC.EncryptedChat currentEncryptedChat = this.currentEncryptedChat;
            boolean b7 = false;
            Label_0611: {
                Label_0608: {
                    if ((currentEncryptedChat == null || AndroidUtilities.getPeerLayerVersion(currentEncryptedChat.layer) >= 46) && (messageType != 1 || (selectedObject.getDialogId() != this.mergeDialogId && !selectedObject.needDrawBluredPreview())) && !(selectedObject.messageOwner.action instanceof TLRPC.TL_messageActionSecureValuesSent) && (this.currentEncryptedChat != null || selectedObject.getId() >= 0)) {
                        final FrameLayout bottomOverlayChat = this.bottomOverlayChat;
                        if ((bottomOverlayChat == null || bottomOverlayChat.getVisibility() != 0) && !this.isBroadcast) {
                            final TLRPC.Chat currentChat = this.currentChat;
                            if (currentChat != null) {
                                if (ChatObject.isNotInChat(currentChat) || (ChatObject.isChannel(this.currentChat) && !ChatObject.canPost(this.currentChat) && !this.currentChat.megagroup)) {
                                    break Label_0608;
                                }
                                if (!ChatObject.canSendMessages(this.currentChat)) {
                                    break Label_0608;
                                }
                            }
                            b7 = true;
                            break Label_0611;
                        }
                    }
                }
                b7 = false;
            }
            if (!b && messageType >= 2 && messageType != 20) {
                final ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
                if (chatActivityEnterView != null && (chatActivityEnterView.isRecordingAudioVideo() || this.chatActivityEnterView.isRecordLocked())) {
                    return;
                }
                final ActionBarMenuItem item = super.actionBar.createActionMode().getItem(12);
                if (item != null) {
                    ((View)item).setVisibility(0);
                }
                this.bottomMessagesActionContainer.setVisibility(0);
                final int n3 = this.chatActivityEnterView.getMeasuredHeight() - AndroidUtilities.dp(51.0f);
                if (this.chatActivityEnterView.getVisibility() == 0) {
                    final ArrayList<ChatActivityEnterView> list = new ArrayList<ChatActivityEnterView>();
                    list.add(this.chatActivityEnterView);
                    final FrameLayout mentionContainer = this.mentionContainer;
                    if (mentionContainer != null && mentionContainer.getVisibility() == 0) {
                        list.add((ChatActivityEnterView)this.mentionContainer);
                    }
                    final FrameLayout stickersPanel = this.stickersPanel;
                    if (stickersPanel != null && stickersPanel.getVisibility() == 0) {
                        list.add((ChatActivityEnterView)this.stickersPanel);
                    }
                    super.actionBar.showActionMode((View)this.bottomMessagesActionContainer, null, list.toArray(new View[0]), new boolean[] { false, true, true }, (View)this.chatListView, n3);
                    if (this.getParentActivity() != null) {
                        ((LaunchActivity)this.getParentActivity()).hideVisibleActionMode();
                    }
                    this.chatActivityEnterView.getEditField().setAllowDrawCursor(false);
                }
                else if (this.bottomOverlayChat.getVisibility() == 0) {
                    super.actionBar.showActionMode((View)this.bottomMessagesActionContainer, null, new View[] { (View)this.bottomOverlayChat }, new boolean[] { true }, (View)this.chatListView, n3);
                }
                else if (this.searchContainer.getVisibility() == 0) {
                    super.actionBar.showActionMode((View)this.bottomMessagesActionContainer, null, new View[] { (View)this.searchContainer }, new boolean[] { true }, (View)this.chatListView, n3);
                }
                else {
                    super.actionBar.showActionMode((View)this.bottomMessagesActionContainer, null, null, null, (View)this.chatListView, n3);
                }
                final ActionBarPopupWindow scrimPopupWindow = this.scrimPopupWindow;
                if (scrimPopupWindow != null) {
                    scrimPopupWindow.dismiss();
                }
                this.chatLayoutManager.setCanScrollVertically(true);
                this.updatePinnedMessageView(true);
                final AnimatorSet set = new AnimatorSet();
                final ArrayList<ObjectAnimator> list2 = new ArrayList<ObjectAnimator>();
                for (int j = 0; j < this.actionModeViews.size(); ++j) {
                    scrimView = this.actionModeViews.get(j);
                    scrimView.setPivotY((float)(ActionBar.getCurrentActionBarHeight() / 2));
                    AndroidUtilities.clearDrawableAnimation(scrimView);
                    list2.add(ObjectAnimator.ofFloat((Object)scrimView, View.SCALE_Y, new float[] { 0.1f, 1.0f }));
                }
                set.playTogether((Collection)list2);
                set.setDuration(250L);
                set.start();
                this.addToSelectedMessages(selectedObject, b2);
                this.selectedMessagesCountTextView.setNumber(this.selectedMessagesIds[0].size() + this.selectedMessagesIds[1].size(), false);
                this.updateVisibleRows();
                return;
            }
            else {
                if (this.getParentActivity() == null) {
                    return;
                }
                final ArrayList<Integer> list3 = new ArrayList<Integer>();
                final ArrayList<String> list4 = new ArrayList<String>();
                final ArrayList<Integer> list5 = new ArrayList<Integer>();
                if (messageType >= 0 || (messageType == -1 && b && (selectedObject.isSending() || selectedObject.isEditing()) && this.currentEncryptedChat == null)) {
                    this.selectedObject = selectedObject;
                    this.selectedObjectGroup = validGroupedMessage;
                    if (messageType == -1) {
                        final MessageObject selectedObject2 = this.selectedObject;
                        if (selectedObject2.type == 0 || selectedObject2.caption != null) {
                            list4.add(LocaleController.getString("Copy", 2131559163));
                            list5.add(3);
                            list3.add(2131165622);
                        }
                        list4.add(LocaleController.getString("CancelSending", 2131558901));
                        list5.add(24);
                        list3.add(2131165623);
                    }
                    else if (messageType == 0) {
                        list4.add(LocaleController.getString("Retry", 2131560614));
                        list5.add(0);
                        list3.add(2131165661);
                        list4.add(LocaleController.getString("Delete", 2131559227));
                        list5.add(1);
                        list3.add(2131165623);
                    }
                    else if (messageType == 1) {
                        if (this.currentChat != null && !this.isBroadcast) {
                            if (b7) {
                                list4.add(LocaleController.getString("Reply", 2131560565));
                                list5.add(8);
                                list3.add(2131165659);
                            }
                            if (b5) {
                                list4.add(LocaleController.getString("UnpinMessage", 2131560942));
                                list5.add(14);
                                list3.add(2131165679);
                            }
                            else if (b4) {
                                list4.add(LocaleController.getString("PinMessage", 2131560441));
                                list5.add(13);
                                list3.add(2131165657);
                            }
                            if (b6) {
                                list4.add(LocaleController.getString("Edit", 2131559301));
                                list5.add(12);
                                list3.add(2131165625);
                            }
                            final MessageObject selectedObject3 = this.selectedObject;
                            Label_1782: {
                                if (selectedObject3.contentType == 0 && !selectedObject3.isMediaEmptyWebpage() && this.selectedObject.getId() > 0 && !this.selectedObject.isOut()) {
                                    if (this.currentChat == null) {
                                        final TLRPC.User currentUser = this.currentUser;
                                        if (currentUser == null || !currentUser.bot) {
                                            break Label_1782;
                                        }
                                    }
                                    list4.add(LocaleController.getString("ReportChat", 2131560568));
                                    list5.add(23);
                                    list3.add(2131165660);
                                }
                            }
                            if (selectedObject.canDeleteMessage(this.currentChat)) {
                                list4.add(LocaleController.getString("Delete", 2131559227));
                                list5.add(1);
                                list3.add(2131165623);
                            }
                        }
                        else {
                            if (this.selectedObject.getId() > 0 && b7) {
                                list4.add(LocaleController.getString("Reply", 2131560565));
                                list5.add(8);
                                list3.add(2131165659);
                            }
                            if (selectedObject.canDeleteMessage(this.currentChat)) {
                                list4.add(LocaleController.getString("Delete", 2131559227));
                                list5.add(1);
                                list3.add(2131165623);
                            }
                        }
                    }
                    else if (messageType == 20) {
                        list4.add(LocaleController.getString("Retry", 2131560614));
                        list5.add(0);
                        list3.add(2131165661);
                        list4.add(LocaleController.getString("Copy", 2131559163));
                        list5.add(3);
                        list3.add(2131165622);
                        list4.add(LocaleController.getString("Delete", 2131559227));
                        list5.add(1);
                        list3.add(2131165623);
                    }
                    else if (this.currentEncryptedChat == null) {
                        if (this.selectedObject.messageOwner.action instanceof TLRPC.TL_messageActionPhoneCall) {
                            final TLRPC.TL_messageActionPhoneCall tl_messageActionPhoneCall = (TLRPC.TL_messageActionPhoneCall)selectedObject.messageOwner.action;
                            final TLRPC.PhoneCallDiscardReason reason = tl_messageActionPhoneCall.reason;
                            int n4;
                            String s;
                            if ((reason instanceof TLRPC.TL_phoneCallDiscardReasonMissed || reason instanceof TLRPC.TL_phoneCallDiscardReasonBusy) && !selectedObject.isOutOwner()) {
                                n4 = 2131558871;
                                s = "CallBack";
                            }
                            else {
                                n4 = 2131558870;
                                s = "CallAgain";
                            }
                            list4.add(LocaleController.getString(s, n4));
                            list5.add(18);
                            list3.add(2131165616);
                            if (VoIPHelper.canRateCall(tl_messageActionPhoneCall)) {
                                list4.add(LocaleController.getString("CallMessageReportProblem", 2131558878));
                                list5.add(19);
                                list3.add(2131165626);
                            }
                        }
                        if (b7) {
                            list4.add(LocaleController.getString("Reply", 2131560565));
                            list5.add(8);
                            list3.add(2131165659);
                        }
                        final MessageObject selectedObject4 = this.selectedObject;
                        if (selectedObject4.type == 0 || selectedObject4.caption != null) {
                            list4.add(LocaleController.getString("Copy", 2131559163));
                            list5.add(3);
                            list3.add(2131165622);
                        }
                        if (ChatObject.isChannel(this.currentChat) && this.currentChat.megagroup) {
                            list4.add(LocaleController.getString("CopyLink", 2131559164));
                            list5.add(22);
                            list3.add(2131165640);
                        }
                        Label_3961: {
                            if (messageType == 2) {
                                if (this.selectedObject.type == 17 && !selectedObject.isPollClosed()) {
                                    if (selectedObject.isVoted()) {
                                        list4.add(LocaleController.getString("Unvote", 2131560948));
                                        list5.add(25);
                                        list3.add(2131165680);
                                    }
                                    if (!selectedObject.isForwarded()) {
                                        if (!selectedObject.isOut() || (ChatObject.isChannel(this.currentChat) && !this.currentChat.megagroup)) {
                                            if (!ChatObject.isChannel(this.currentChat)) {
                                                break Label_3961;
                                            }
                                            final TLRPC.Chat currentChat2 = this.currentChat;
                                            if (currentChat2.megagroup) {
                                                break Label_3961;
                                            }
                                            if (!currentChat2.creator) {
                                                final TLRPC.TL_chatAdminRights admin_rights = currentChat2.admin_rights;
                                                if (admin_rights == null || !admin_rights.edit_messages) {
                                                    break Label_3961;
                                                }
                                            }
                                        }
                                        list4.add(LocaleController.getString("StopPoll", 2131560828));
                                        list5.add(26);
                                        list3.add(2131165658);
                                    }
                                }
                            }
                            else if (messageType == 3) {
                                final TLRPC.MessageMedia media = this.selectedObject.messageOwner.media;
                                if (media instanceof TLRPC.TL_messageMediaWebPage && MessageObject.isNewGifDocument(media.webpage.document)) {
                                    list4.add(LocaleController.getString("SaveToGIFs", 2131560629));
                                    list5.add(11);
                                    list3.add(2131165629);
                                }
                            }
                            else if (messageType == 4) {
                                if (this.selectedObject.isVideo()) {
                                    if (!this.selectedObject.needDrawBluredPreview()) {
                                        list4.add(LocaleController.getString("SaveToGallery", 2131560630));
                                        list5.add(4);
                                        list3.add(2131165628);
                                        list4.add(LocaleController.getString("ShareFile", 2131560748));
                                        list5.add(6);
                                        list3.add(2131165671);
                                    }
                                }
                                else if (this.selectedObject.isMusic()) {
                                    list4.add(LocaleController.getString("SaveToMusic", 2131560632));
                                    list5.add(10);
                                    list3.add(2131165624);
                                    list4.add(LocaleController.getString("ShareFile", 2131560748));
                                    list5.add(6);
                                    list3.add(2131165671);
                                }
                                else if (this.selectedObject.getDocument() != null) {
                                    if (MessageObject.isNewGifDocument(this.selectedObject.getDocument())) {
                                        list4.add(LocaleController.getString("SaveToGIFs", 2131560629));
                                        list5.add(11);
                                        list3.add(2131165629);
                                    }
                                    list4.add(LocaleController.getString("SaveToDownloads", 2131560628));
                                    list5.add(10);
                                    list3.add(2131165624);
                                    list4.add(LocaleController.getString("ShareFile", 2131560748));
                                    list5.add(6);
                                    list3.add(2131165671);
                                }
                                else if (!this.selectedObject.needDrawBluredPreview()) {
                                    list4.add(LocaleController.getString("SaveToGallery", 2131560630));
                                    list5.add(4);
                                    list3.add(2131165628);
                                }
                            }
                            else if (messageType == 5) {
                                list4.add(LocaleController.getString("ApplyLocalizationFile", 2131558638));
                                list5.add(5);
                                list3.add(2131165638);
                                list4.add(LocaleController.getString("SaveToDownloads", 2131560628));
                                list5.add(10);
                                list3.add(2131165624);
                                list4.add(LocaleController.getString("ShareFile", 2131560748));
                                list5.add(6);
                                list3.add(2131165671);
                            }
                            else if (messageType == 10) {
                                list4.add(LocaleController.getString("ApplyThemeFile", 2131558640));
                                list5.add(5);
                                list3.add(2131165674);
                                list4.add(LocaleController.getString("SaveToDownloads", 2131560628));
                                list5.add(10);
                                list3.add(2131165624);
                                list4.add(LocaleController.getString("ShareFile", 2131560748));
                                list5.add(6);
                                list3.add(2131165671);
                            }
                            else if (messageType == 6) {
                                list4.add(LocaleController.getString("SaveToGallery", 2131560630));
                                list5.add(7);
                                list3.add(2131165628);
                                list4.add(LocaleController.getString("SaveToDownloads", 2131560628));
                                list5.add(10);
                                list3.add(2131165624);
                                list4.add(LocaleController.getString("ShareFile", 2131560748));
                                list5.add(6);
                                list3.add(2131165671);
                            }
                            else if (messageType == 7) {
                                if (this.selectedObject.isMask()) {
                                    list4.add(LocaleController.getString("AddToMasks", 2131558592));
                                    list5.add(9);
                                    list3.add(2131165673);
                                }
                                else {
                                    list4.add(LocaleController.getString("AddToStickers", 2131558593));
                                    list5.add(9);
                                    list3.add(2131165673);
                                    if (!DataQuery.getInstance(super.currentAccount).isStickerInFavorites(this.selectedObject.getDocument())) {
                                        if (DataQuery.getInstance(super.currentAccount).canAddStickerToFavorites()) {
                                            list4.add(LocaleController.getString("AddToFavorites", 2131558591));
                                            list5.add(20);
                                            list3.add(2131165626);
                                        }
                                    }
                                    else {
                                        list4.add(LocaleController.getString("DeleteFromFavorites", 2131559245));
                                        list5.add(21);
                                        list3.add(2131165677);
                                    }
                                }
                            }
                            else if (messageType == 8) {
                                final TLRPC.User user = MessagesController.getInstance(super.currentAccount).getUser(this.selectedObject.messageOwner.media.user_id);
                                if (user != null && user.id != UserConfig.getInstance(super.currentAccount).getClientUserId() && ContactsController.getInstance(super.currentAccount).contactsDict.get(user.id) == null) {
                                    list4.add(LocaleController.getString("AddContactTitle", 2131558569));
                                    list5.add(15);
                                    list3.add(2131165612);
                                }
                                if (!TextUtils.isEmpty((CharSequence)this.selectedObject.messageOwner.media.phone_number)) {
                                    list4.add(LocaleController.getString("Copy", 2131559163));
                                    list5.add(16);
                                    list3.add(2131165622);
                                    list4.add(LocaleController.getString("Call", 2131558869));
                                    list5.add(17);
                                    list3.add(2131165616);
                                }
                            }
                            else if (messageType == 9) {
                                if (!DataQuery.getInstance(super.currentAccount).isStickerInFavorites(this.selectedObject.getDocument())) {
                                    list4.add(LocaleController.getString("AddToFavorites", 2131558591));
                                    list5.add(20);
                                    list3.add(2131165626);
                                }
                                else {
                                    list4.add(LocaleController.getString("DeleteFromFavorites", 2131559245));
                                    list5.add(21);
                                    list3.add(2131165677);
                                }
                            }
                        }
                        if (!this.selectedObject.needDrawBluredPreview() && !this.selectedObject.isLiveLocation() && this.selectedObject.type != 16) {
                            list4.add(LocaleController.getString("Forward", 2131559504));
                            list5.add(2);
                            list3.add(2131165627);
                        }
                        if (b5) {
                            list4.add(LocaleController.getString("UnpinMessage", 2131560942));
                            list5.add(14);
                            list3.add(2131165679);
                        }
                        else if (b4) {
                            list4.add(LocaleController.getString("PinMessage", 2131560441));
                            list5.add(13);
                            list3.add(2131165657);
                        }
                        if (b6) {
                            list4.add(LocaleController.getString("Edit", 2131559301));
                            list5.add(12);
                            list3.add(2131165625);
                        }
                        final MessageObject selectedObject5 = this.selectedObject;
                        Label_4258: {
                            if (selectedObject5.contentType == 0 && selectedObject5.getId() > 0 && !this.selectedObject.isOut()) {
                                if (this.currentChat == null) {
                                    final TLRPC.User currentUser2 = this.currentUser;
                                    if (currentUser2 == null || !currentUser2.bot) {
                                        break Label_4258;
                                    }
                                }
                                list4.add(LocaleController.getString("ReportChat", 2131560568));
                                list5.add(23);
                                list3.add(2131165660);
                            }
                        }
                        if (selectedObject.canDeleteMessage(this.currentChat)) {
                            list4.add(LocaleController.getString("Delete", 2131559227));
                            list5.add(1);
                            list3.add(2131165623);
                        }
                    }
                    else {
                        if (b7) {
                            list4.add(LocaleController.getString("Reply", 2131560565));
                            list5.add(8);
                            list3.add(2131165659);
                        }
                        final MessageObject selectedObject6 = this.selectedObject;
                        if (selectedObject6.type == 0 || selectedObject6.caption != null) {
                            list4.add(LocaleController.getString("Copy", 2131559163));
                            list5.add(3);
                            list3.add(2131165622);
                        }
                        if (messageType == 4) {
                            if (this.selectedObject.isVideo()) {
                                list4.add(LocaleController.getString("SaveToGallery", 2131560630));
                                list5.add(4);
                                list3.add(2131165628);
                                list4.add(LocaleController.getString("ShareFile", 2131560748));
                                list5.add(6);
                                list3.add(2131165671);
                            }
                            else if (this.selectedObject.isMusic()) {
                                list4.add(LocaleController.getString("SaveToMusic", 2131560632));
                                list5.add(10);
                                list3.add(2131165624);
                                list4.add(LocaleController.getString("ShareFile", 2131560748));
                                list5.add(6);
                                list3.add(2131165671);
                            }
                            else if (!this.selectedObject.isVideo() && this.selectedObject.getDocument() != null) {
                                list4.add(LocaleController.getString("SaveToDownloads", 2131560628));
                                list5.add(10);
                                list3.add(2131165624);
                                list4.add(LocaleController.getString("ShareFile", 2131560748));
                                list5.add(6);
                                list3.add(2131165671);
                            }
                            else {
                                list4.add(LocaleController.getString("SaveToGallery", 2131560630));
                                list5.add(4);
                                list3.add(2131165628);
                            }
                        }
                        else if (messageType == 5) {
                            list4.add(LocaleController.getString("ApplyLocalizationFile", 2131558638));
                            list5.add(5);
                            list3.add(2131165638);
                        }
                        else if (messageType == 10) {
                            list4.add(LocaleController.getString("ApplyThemeFile", 2131558640));
                            list5.add(5);
                            list3.add(2131165674);
                        }
                        else if (messageType == 7) {
                            list4.add(LocaleController.getString("AddToStickers", 2131558593));
                            list5.add(9);
                            list3.add(2131165673);
                        }
                        else if (messageType == 8) {
                            final TLRPC.User user2 = MessagesController.getInstance(super.currentAccount).getUser(this.selectedObject.messageOwner.media.user_id);
                            if (user2 != null && user2.id != UserConfig.getInstance(super.currentAccount).getClientUserId() && ContactsController.getInstance(super.currentAccount).contactsDict.get(user2.id) == null) {
                                list4.add(LocaleController.getString("AddContactTitle", 2131558569));
                                list5.add(15);
                                list3.add(2131165612);
                            }
                            if (!TextUtils.isEmpty((CharSequence)this.selectedObject.messageOwner.media.phone_number)) {
                                list4.add(LocaleController.getString("Copy", 2131559163));
                                list5.add(16);
                                list3.add(2131165622);
                                list4.add(LocaleController.getString("Call", 2131558869));
                                list5.add(17);
                                list3.add(2131165616);
                            }
                        }
                        list4.add(LocaleController.getString("Delete", 2131559227));
                        list5.add(1);
                        list3.add(2131165623);
                    }
                }
                if (list5.isEmpty()) {
                    return;
                }
                final ActionBarPopupWindow scrimPopupWindow2 = this.scrimPopupWindow;
                if (scrimPopupWindow2 != null) {
                    scrimPopupWindow2.dismiss();
                    this.scrimPopupWindow = null;
                    return;
                }
                final Rect rect = new Rect();
                final ActionBarPopupWindow.ActionBarPopupWindowLayout actionBarPopupWindowLayout = new ActionBarPopupWindow.ActionBarPopupWindowLayout((Context)this.getParentActivity());
                actionBarPopupWindowLayout.setOnTouchListener((View$OnTouchListener)new _$$Lambda$ChatActivity$CEhm1bQtDKMk2cXFBAUuQQ2gPRM(this, scrimView, rect));
                actionBarPopupWindowLayout.setDispatchKeyEventListener(new _$$Lambda$ChatActivity$_KW4AK5fE610BLV8sUy5JH_4l2w(this));
                final Rect rect2 = new Rect();
                final Drawable mutate = this.getParentActivity().getResources().getDrawable(2131165776).mutate();
                mutate.setColorFilter((ColorFilter)new PorterDuffColorFilter(Theme.getColor("dialogBackground"), PorterDuff$Mode.MULTIPLY));
                mutate.getPadding(rect2);
                actionBarPopupWindowLayout.setBackgroundDrawable(mutate);
                final LinearLayout linearLayout = new LinearLayout((Context)this.getParentActivity());
                ScrollView scrollView;
                if (Build$VERSION.SDK_INT >= 21) {
                    scrollView = new ScrollView(this.getParentActivity(), null, 0, 2131624301) {
                        protected void onMeasure(final int n, final int n2) {
                            super.onMeasure(n, n2);
                            this.setMeasuredDimension(linearLayout.getMeasuredWidth(), this.getMeasuredHeight());
                        }
                    };
                }
                else {
                    scrollView = new ScrollView((Context)this.getParentActivity());
                }
                scrollView.setClipToPadding(false);
                actionBarPopupWindowLayout.addView((View)scrollView, (ViewGroup$LayoutParams)LayoutHelper.createFrame(-2, -2.0f));
                linearLayout.setMinimumWidth(AndroidUtilities.dp(200.0f));
                linearLayout.setOrientation(1);
                for (int size = list4.size(), k = 0; k < size; ++k) {
                    final ActionBarMenuSubItem actionBarMenuSubItem = new ActionBarMenuSubItem((Context)this.getParentActivity());
                    actionBarMenuSubItem.setTextAndIcon(list4.get(k), list3.get(k));
                    linearLayout.addView((View)actionBarMenuSubItem);
                    actionBarMenuSubItem.setOnClickListener((View$OnClickListener)new _$$Lambda$ChatActivity$6kUU2Td1F8LPLCyB8TheH4pRhp8(this, k, list5));
                }
                scrollView.addView((View)linearLayout, (ViewGroup$LayoutParams)LayoutHelper.createScroll(-2, -2, 51));
                (this.scrimPopupWindow = new ActionBarPopupWindow(actionBarPopupWindowLayout, -2, -2) {
                    @Override
                    public void dismiss() {
                        super.dismiss();
                        if (ChatActivity.this.scrimPopupWindow != this) {
                            return;
                        }
                        ChatActivity.this.scrimPopupWindow = null;
                        if (ChatActivity.this.scrimAnimatorSet != null) {
                            ChatActivity.this.scrimAnimatorSet.cancel();
                            ChatActivity.this.scrimAnimatorSet = null;
                        }
                        if (ChatActivity.this.scrimView instanceof ChatMessageCell) {
                            ((ChatMessageCell)ChatActivity.this.scrimView).setInvalidatesParent(false);
                        }
                        ChatActivity.this.chatLayoutManager.setCanScrollVertically(true);
                        ChatActivity.this.scrimAnimatorSet = new AnimatorSet();
                        final ArrayList<ObjectAnimator> list = new ArrayList<ObjectAnimator>();
                        list.add(ObjectAnimator.ofInt((Object)ChatActivity.this.scrimPaint, (Property)AnimationProperties.PAINT_ALPHA, new int[] { 0 }));
                        if (ChatActivity.this.pagedownButton.getTag() != null) {
                            list.add(ObjectAnimator.ofFloat((Object)ChatActivity.this.pagedownButton, View.ALPHA, new float[] { 1.0f }));
                        }
                        if (ChatActivity.this.mentiondownButton.getTag() != null) {
                            list.add(ObjectAnimator.ofFloat((Object)ChatActivity.this.mentiondownButton, View.ALPHA, new float[] { 1.0f }));
                        }
                        ChatActivity.this.scrimAnimatorSet.playTogether((Collection)list);
                        ChatActivity.this.scrimAnimatorSet.setDuration(220L);
                        ChatActivity.this.scrimAnimatorSet.addListener((Animator$AnimatorListener)new AnimatorListenerAdapter() {
                            public void onAnimationEnd(final Animator animator) {
                                ChatActivity.this.scrimView = null;
                                ChatActivity.this.contentView.invalidate();
                                ChatActivity.this.chatListView.invalidate();
                            }
                        });
                        ChatActivity.this.scrimAnimatorSet.start();
                        final ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                        if (chatActivityEnterView != null) {
                            chatActivityEnterView.getEditField().setAllowDrawCursor(true);
                        }
                        if (Build$VERSION.SDK_INT >= 19) {
                            ChatActivity.this.getParentActivity().getWindow().getDecorView().setImportantForAccessibility(0);
                        }
                    }
                }).setDismissAnimationDuration(220);
                this.scrimPopupWindow.setOutsideTouchable(true);
                this.scrimPopupWindow.setClippingEnabled(true);
                this.scrimPopupWindow.setAnimationStyle(2131624111);
                this.scrimPopupWindow.setFocusable(true);
                actionBarPopupWindowLayout.measure(View$MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(1000.0f), Integer.MIN_VALUE), View$MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(1000.0f), Integer.MIN_VALUE));
                this.scrimPopupWindow.setInputMethodMode(2);
                this.scrimPopupWindow.setSoftInputMode(0);
                this.scrimPopupWindow.getContentView().setFocusableInTouchMode(true);
                final int n5 = scrimView.getLeft() + (int)n - actionBarPopupWindowLayout.getMeasuredWidth() + rect2.left - AndroidUtilities.dp(28.0f);
                int dp;
                if (n5 < AndroidUtilities.dp(6.0f)) {
                    dp = AndroidUtilities.dp(6.0f);
                }
                else if ((dp = n5) > this.chatListView.getMeasuredWidth() - AndroidUtilities.dp(6.0f) - actionBarPopupWindowLayout.getMeasuredWidth()) {
                    dp = this.chatListView.getMeasuredWidth() - AndroidUtilities.dp(6.0f) - actionBarPopupWindowLayout.getMeasuredWidth();
                }
                int n6 = dp;
                if (AndroidUtilities.isTablet()) {
                    final int[] array = new int[2];
                    super.fragmentView.getLocationInWindow(array);
                    n6 = dp + array[0];
                }
                final int height = this.contentView.getHeight();
                final int measuredHeight = actionBarPopupWindowLayout.getMeasuredHeight();
                final int keyboardHeight = this.contentView.getKeyboardHeight();
                int n7 = height;
                if (keyboardHeight > AndroidUtilities.dp(20.0f)) {
                    n7 = height + keyboardHeight;
                }
                int statusBarHeight;
                if (measuredHeight < n7) {
                    int n9;
                    final int n8 = n9 = (int)(this.chatListView.getY() + scrimView.getTop() + n2);
                    if (measuredHeight - rect2.top - rect2.bottom > AndroidUtilities.dp(240.0f)) {
                        n9 = n8 + (AndroidUtilities.dp(240.0f) - measuredHeight);
                    }
                    if (n9 < this.chatListView.getY() + AndroidUtilities.dp(24.0f)) {
                        statusBarHeight = (int)(this.chatListView.getY() + AndroidUtilities.dp(24.0f));
                    }
                    else {
                        final int n10 = n7 - measuredHeight;
                        if ((statusBarHeight = n9) > n10 - AndroidUtilities.dp(8.0f)) {
                            statusBarHeight = n10 - AndroidUtilities.dp(8.0f);
                        }
                    }
                }
                else {
                    statusBarHeight = AndroidUtilities.statusBarHeight;
                }
                this.scrimPopupWindow.showAtLocation((View)this.chatListView, 51, n6, statusBarHeight);
                this.chatListView.stopScroll();
                this.chatLayoutManager.setCanScrollVertically(false);
                this.scrimView = scrimView;
                scrimView = this.scrimView;
                if (scrimView instanceof ChatMessageCell) {
                    ((ChatMessageCell)scrimView).setInvalidatesParent(true);
                }
                this.contentView.invalidate();
                this.chatListView.invalidate();
                final AnimatorSet scrimAnimatorSet = this.scrimAnimatorSet;
                if (scrimAnimatorSet != null) {
                    scrimAnimatorSet.cancel();
                }
                this.scrimAnimatorSet = new AnimatorSet();
                final ArrayList<ObjectAnimator> list6 = new ArrayList<ObjectAnimator>();
                list6.add(ObjectAnimator.ofInt((Object)this.scrimPaint, (Property)AnimationProperties.PAINT_ALPHA, new int[] { 0, 50 }));
                if (this.pagedownButton.getTag() != null) {
                    list6.add(ObjectAnimator.ofFloat((Object)this.pagedownButton, View.ALPHA, new float[] { 0.0f }));
                }
                if (this.mentiondownButton.getTag() != null) {
                    list6.add(ObjectAnimator.ofFloat((Object)this.mentiondownButton, View.ALPHA, new float[] { 0.0f }));
                }
                this.scrimAnimatorSet.playTogether((Collection)list6);
                this.scrimAnimatorSet.setDuration(150L);
                this.scrimAnimatorSet.start();
                final HintView forwardHintView = this.forwardHintView;
                if (forwardHintView != null) {
                    forwardHintView.hide();
                }
                final HintView noSoundHintView = this.noSoundHintView;
                if (noSoundHintView != null) {
                    noSoundHintView.hide();
                }
                final ChatActivityEnterView chatActivityEnterView2 = this.chatActivityEnterView;
                if (chatActivityEnterView2 != null) {
                    chatActivityEnterView2.getEditField().setAllowDrawCursor(false);
                }
                if (Build$VERSION.SDK_INT >= 19) {
                    this.getParentActivity().getWindow().getDecorView().setImportantForAccessibility(4);
                }
                return;
            }
            final TLRPC.UserFull userFull;
            can_pin_message = userFull.can_pin_message;
            continue;
        }
    }
    
    private TextureView createTextureView(final boolean b) {
        if (super.parentLayout == null) {
            return null;
        }
        if (this.videoPlayerContainer == null) {
            if (Build$VERSION.SDK_INT >= 21) {
                (this.videoPlayerContainer = new FrameLayout(this.getParentActivity()) {
                    public void setTranslationY(final float translationY) {
                        super.setTranslationY(translationY);
                        ChatActivity.this.contentView.invalidate();
                    }
                }).setOutlineProvider((ViewOutlineProvider)new ViewOutlineProvider() {
                    @TargetApi(21)
                    public void getOutline(final View view, final Outline outline) {
                        if (view.getTag(2131230860) != null) {
                            outline.setRoundRect(0, 0, view.getMeasuredWidth(), view.getMeasuredHeight(), (float)AndroidUtilities.dp(4.0f));
                        }
                        else {
                            final int roundMessageSize = AndroidUtilities.roundMessageSize;
                            outline.setOval(0, 0, roundMessageSize, roundMessageSize);
                        }
                    }
                });
                this.videoPlayerContainer.setClipToOutline(true);
            }
            else {
                this.videoPlayerContainer = new FrameLayout(this.getParentActivity()) {
                    RectF rect = new RectF();
                    
                    protected void dispatchDraw(final Canvas canvas) {
                        super.dispatchDraw(canvas);
                        if (this.getTag() == null) {
                            canvas.drawPath(ChatActivity.this.aspectPath, ChatActivity.this.aspectPaint);
                        }
                    }
                    
                    protected void onSizeChanged(final int n, final int n2, final int n3, final int n4) {
                        super.onSizeChanged(n, n2, n3, n4);
                        ChatActivity.this.aspectPath.reset();
                        if (this.getTag(2131230860) != null) {
                            this.rect.set(0.0f, 0.0f, (float)n, (float)n2);
                            ChatActivity.this.aspectPath.addRoundRect(this.rect, (float)AndroidUtilities.dp(4.0f), (float)AndroidUtilities.dp(4.0f), Path$Direction.CW);
                        }
                        else {
                            final Path access$20100 = ChatActivity.this.aspectPath;
                            final float n5 = (float)(n / 2);
                            access$20100.addCircle(n5, (float)(n2 / 2), n5, Path$Direction.CW);
                        }
                        ChatActivity.this.aspectPath.toggleInverseFillType();
                    }
                    
                    public void setTranslationY(final float translationY) {
                        super.setTranslationY(translationY);
                        ChatActivity.this.contentView.invalidate();
                    }
                    
                    public void setVisibility(final int visibility) {
                        super.setVisibility(visibility);
                        if (visibility == 0) {
                            this.setLayerType(2, (Paint)null);
                        }
                    }
                };
                this.aspectPath = new Path();
                (this.aspectPaint = new Paint(1)).setColor(-16777216);
                this.aspectPaint.setXfermode((Xfermode)new PorterDuffXfermode(PorterDuff$Mode.CLEAR));
            }
            this.videoPlayerContainer.setWillNotDraw(false);
            (this.aspectRatioFrameLayout = new AspectRatioFrameLayout((Context)this.getParentActivity())).setBackgroundColor(0);
            if (b) {
                this.videoPlayerContainer.addView((View)this.aspectRatioFrameLayout, (ViewGroup$LayoutParams)LayoutHelper.createFrame(-1, -1, 17));
            }
            (this.videoTextureView = new TextureView((Context)this.getParentActivity())).setOpaque(false);
            this.aspectRatioFrameLayout.addView((View)this.videoTextureView, (ViewGroup$LayoutParams)LayoutHelper.createFrame(-1, -1.0f));
        }
        ViewGroup viewGroup2;
        final ViewGroup viewGroup = viewGroup2 = (ViewGroup)this.videoPlayerContainer.getParent();
        if (viewGroup != null && (viewGroup2 = viewGroup) != this.contentView) {
            viewGroup.removeView((View)this.videoPlayerContainer);
            viewGroup2 = null;
        }
        if (viewGroup2 == null) {
            final SizeNotifierFrameLayout contentView = this.contentView;
            final FrameLayout videoPlayerContainer = this.videoPlayerContainer;
            final int roundMessageSize = AndroidUtilities.roundMessageSize;
            contentView.addView((View)videoPlayerContainer, 1, (ViewGroup$LayoutParams)new FrameLayout$LayoutParams(roundMessageSize, roundMessageSize));
        }
        this.videoPlayerContainer.setTag((Object)null);
        this.aspectRatioFrameLayout.setDrawingReady(false);
        return this.videoTextureView;
    }
    
    private ArrayList<MessageObject> createVoiceMessagesPlaylist(final MessageObject e, final boolean b) {
        final ArrayList<MessageObject> list = new ArrayList<MessageObject>();
        list.add(e);
        final int id = e.getId();
        e.getDialogId();
        if (id != 0) {
            for (int i = this.messages.size() - 1; i >= 0; --i) {
                final MessageObject e2 = this.messages.get(i);
                if (e2.getDialogId() != this.mergeDialogId || e.getDialogId() == this.mergeDialogId) {
                    if (((this.currentEncryptedChat == null && e2.getId() > id) || (this.currentEncryptedChat != null && e2.getId() < id)) && (e2.isVoice() || e2.isRoundVideo()) && (!b || (e2.isContentUnread() && !e2.isOut()))) {
                        list.add(e2);
                    }
                }
            }
        }
        return list;
    }
    
    private void destroyTextureView() {
        final FrameLayout videoPlayerContainer = this.videoPlayerContainer;
        if (videoPlayerContainer != null) {
            if (videoPlayerContainer.getParent() != null) {
                this.contentView.removeView((View)this.videoPlayerContainer);
                this.aspectRatioFrameLayout.setDrawingReady(false);
                this.videoPlayerContainer.setTag((Object)null);
                if (Build$VERSION.SDK_INT < 21) {
                    this.videoPlayerContainer.setLayerType(0, (Paint)null);
                }
            }
        }
    }
    
    private void fillEditingMediaWithCaption(final CharSequence editingMessage, final ArrayList<TLRPC.MessageEntity> editingMessageEntities) {
        if (this.editingMessageObject == null) {
            return;
        }
        if (!TextUtils.isEmpty(editingMessage)) {
            final MessageObject editingMessageObject = this.editingMessageObject;
            editingMessageObject.editingMessage = editingMessage;
            editingMessageObject.editingMessageEntities = editingMessageEntities;
        }
        else {
            final ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
            if (chatActivityEnterView != null) {
                this.editingMessageObject.editingMessage = chatActivityEnterView.getFieldText();
                final MessageObject editingMessageObject2 = this.editingMessageObject;
                if (editingMessageObject2.editingMessage == null && !TextUtils.isEmpty((CharSequence)editingMessageObject2.messageOwner.message)) {
                    this.editingMessageObject.editingMessage = "";
                }
            }
        }
    }
    
    private void fixLayout() {
        final ChatAvatarContainer avatarContainer = this.avatarContainer;
        if (avatarContainer != null) {
            avatarContainer.getViewTreeObserver().addOnPreDrawListener((ViewTreeObserver$OnPreDrawListener)new ViewTreeObserver$OnPreDrawListener() {
                public boolean onPreDraw() {
                    if (ChatActivity.this.avatarContainer != null) {
                        ChatActivity.this.avatarContainer.getViewTreeObserver().removeOnPreDrawListener((ViewTreeObserver$OnPreDrawListener)this);
                    }
                    return ChatActivity.this.fixLayoutInternal();
                }
            });
        }
    }
    
    private boolean fixLayoutInternal() {
        if (!AndroidUtilities.isTablet() && ApplicationLoader.applicationContext.getResources().getConfiguration().orientation == 2) {
            this.selectedMessagesCountTextView.setTextSize(18);
        }
        else {
            this.selectedMessagesCountTextView.setTextSize(20);
        }
        final int childCount = this.chatListView.getChildCount();
        HashMap<Long, MessageObject.GroupedMessages> hashMap = null;
        int n = 0;
        boolean b;
        while (true) {
            b = true;
            if (n >= childCount) {
                break;
            }
            final View child = this.chatListView.getChildAt(n);
            HashMap<Long, MessageObject.GroupedMessages> hashMap2 = hashMap;
            if (child instanceof ChatMessageCell) {
                final MessageObject.GroupedMessages currentMessagesGroup = ((ChatMessageCell)child).getCurrentMessagesGroup();
                hashMap2 = hashMap;
                if (currentMessagesGroup != null) {
                    hashMap2 = hashMap;
                    if (currentMessagesGroup.hasSibling) {
                        HashMap<Long, MessageObject.GroupedMessages> hashMap3;
                        if ((hashMap3 = hashMap) == null) {
                            hashMap3 = new HashMap<Long, MessageObject.GroupedMessages>();
                        }
                        hashMap2 = hashMap3;
                        if (!hashMap3.containsKey(currentMessagesGroup.groupId)) {
                            hashMap3.put(currentMessagesGroup.groupId, currentMessagesGroup);
                            final ArrayList<MessageObject> messages = currentMessagesGroup.messages;
                            final int index = this.messages.indexOf(messages.get(messages.size() - 1));
                            hashMap2 = hashMap3;
                            if (index >= 0) {
                                final ChatActivityAdapter chatAdapter = this.chatAdapter;
                                chatAdapter.notifyItemRangeChanged(index + chatAdapter.messagesStartRow, currentMessagesGroup.messages.size());
                                hashMap2 = hashMap3;
                            }
                        }
                    }
                }
            }
            ++n;
            hashMap = hashMap2;
        }
        if (AndroidUtilities.isTablet()) {
            if (AndroidUtilities.isSmallTablet() && ApplicationLoader.applicationContext.getResources().getConfiguration().orientation == 1) {
                super.actionBar.setBackButtonDrawable(new BackDrawable(false));
                final FragmentContextView fragmentContextView = this.fragmentContextView;
                if (fragmentContextView != null && fragmentContextView.getParent() == null) {
                    ((ViewGroup)super.fragmentView).addView((View)this.fragmentContextView, (ViewGroup$LayoutParams)LayoutHelper.createFrame(-1, 39.0f, 51, 0.0f, -36.0f, 0.0f, 0.0f));
                }
            }
            else {
                final ActionBar actionBar = super.actionBar;
                final ActionBarLayout parentLayout = super.parentLayout;
                boolean b2 = b;
                if (parentLayout != null) {
                    b2 = b;
                    if (!parentLayout.fragmentsStack.isEmpty()) {
                        b2 = b;
                        if (super.parentLayout.fragmentsStack.get(0) != this) {
                            b2 = (super.parentLayout.fragmentsStack.size() == 1 && b);
                        }
                    }
                }
                actionBar.setBackButtonDrawable(new BackDrawable(b2));
                final FragmentContextView fragmentContextView2 = this.fragmentContextView;
                if (fragmentContextView2 != null && fragmentContextView2.getParent() != null) {
                    super.fragmentView.setPadding(0, 0, 0, 0);
                    ((ViewGroup)super.fragmentView).removeView((View)this.fragmentContextView);
                }
            }
            return false;
        }
        return true;
    }
    
    private void forwardMessages(final ArrayList<MessageObject> list, final boolean b) {
        if (list != null) {
            if (!list.isEmpty()) {
                if (!b) {
                    AlertsCreator.showSendMediaAlert(SendMessagesHelper.getInstance(super.currentAccount).sendMessage(list, this.dialog_id), this);
                }
                else {
                    final Iterator<MessageObject> iterator = list.iterator();
                    while (iterator.hasNext()) {
                        SendMessagesHelper.getInstance(super.currentAccount).processForwardFromMyName(iterator.next(), this.dialog_id);
                    }
                }
            }
        }
    }
    
    private String getMessageContent(final MessageObject messageObject, final int n, final boolean b) {
        String str;
        final String s = str = "";
        if (b) {
            final int from_id = messageObject.messageOwner.from_id;
            str = s;
            if (n != from_id) {
                if (from_id > 0) {
                    final TLRPC.User user = MessagesController.getInstance(super.currentAccount).getUser(messageObject.messageOwner.from_id);
                    str = s;
                    if (user != null) {
                        final StringBuilder sb = new StringBuilder();
                        sb.append(ContactsController.formatName(user.first_name, user.last_name));
                        sb.append(":\n");
                        str = sb.toString();
                    }
                }
                else {
                    str = s;
                    if (from_id < 0) {
                        final TLRPC.Chat chat = MessagesController.getInstance(super.currentAccount).getChat(-messageObject.messageOwner.from_id);
                        str = s;
                        if (chat != null) {
                            final StringBuilder sb2 = new StringBuilder();
                            sb2.append(chat.title);
                            sb2.append(":\n");
                            str = sb2.toString();
                        }
                    }
                }
            }
        }
        String s2;
        if (messageObject.type == 0 && messageObject.messageOwner.message != null) {
            final StringBuilder sb3 = new StringBuilder();
            sb3.append(str);
            sb3.append(messageObject.messageOwner.message);
            s2 = sb3.toString();
        }
        else {
            final TLRPC.Message messageOwner = messageObject.messageOwner;
            if (messageOwner.media != null && messageOwner.message != null) {
                final StringBuilder sb4 = new StringBuilder();
                sb4.append(str);
                sb4.append(messageObject.messageOwner.message);
                s2 = sb4.toString();
            }
            else {
                final StringBuilder sb5 = new StringBuilder();
                sb5.append(str);
                sb5.append((Object)messageObject.messageText);
                s2 = sb5.toString();
            }
        }
        return s2;
    }
    
    private int getMessageType(final MessageObject messageObject) {
        if (messageObject == null) {
            return -1;
        }
        final TLRPC.EncryptedChat currentEncryptedChat = this.currentEncryptedChat;
        final int n = 0;
        final int n2 = 0;
        if (currentEncryptedChat == null) {
            final boolean b = this.isBroadcast && messageObject.getId() <= 0 && messageObject.isSendError();
            if (messageObject.isEditing()) {
                return -1;
            }
            if ((!this.isBroadcast && messageObject.getId() <= 0 && messageObject.isOut()) || b) {
                if (!messageObject.isSendError()) {
                    return -1;
                }
                if (!messageObject.isMediaEmpty()) {
                    return 0;
                }
                return 20;
            }
            else {
                final int type = messageObject.type;
                if (type == 6) {
                    return -1;
                }
                if (type != 10 && type != 11) {
                    if (messageObject.isVoice()) {
                        return 2;
                    }
                    if (messageObject.isSticker()) {
                        final TLRPC.InputStickerSet inputStickerSet = messageObject.getInputStickerSet();
                        if (inputStickerSet instanceof TLRPC.TL_inputStickerSetID) {
                            if (!DataQuery.getInstance(super.currentAccount).isStickerPackInstalled(inputStickerSet.id)) {
                                return 7;
                            }
                        }
                        else if (inputStickerSet instanceof TLRPC.TL_inputStickerSetShortName && !DataQuery.getInstance(super.currentAccount).isStickerPackInstalled(inputStickerSet.short_name)) {
                            return 7;
                        }
                        return 9;
                    }
                    if (!messageObject.isRoundVideo() && (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaPhoto || messageObject.getDocument() != null || messageObject.isMusic() || messageObject.isVideo())) {
                        int n3 = n2;
                        if (!TextUtils.isEmpty((CharSequence)messageObject.messageOwner.attachPath)) {
                            n3 = n2;
                            if (new File(messageObject.messageOwner.attachPath).exists()) {
                                n3 = 1;
                            }
                        }
                        int n4;
                        if ((n4 = n3) == 0) {
                            n4 = n3;
                            if (FileLoader.getPathToMessage(messageObject.messageOwner).exists()) {
                                n4 = 1;
                            }
                        }
                        if (n4 != 0) {
                            if (messageObject.getDocument() != null) {
                                final String mime_type = messageObject.getDocument().mime_type;
                                if (mime_type != null) {
                                    if (messageObject.getDocumentName().toLowerCase().endsWith("attheme")) {
                                        return 10;
                                    }
                                    if (mime_type.endsWith("/xml")) {
                                        return 5;
                                    }
                                    if (mime_type.endsWith("/png") || mime_type.endsWith("/jpg") || mime_type.endsWith("/jpeg")) {
                                        return 6;
                                    }
                                }
                            }
                            return 4;
                        }
                    }
                    else {
                        if (messageObject.type == 12) {
                            return 8;
                        }
                        if (messageObject.isMediaEmpty()) {
                            return 3;
                        }
                    }
                    return 2;
                }
                else {
                    if (messageObject.getId() == 0) {
                        return -1;
                    }
                    return 1;
                }
            }
        }
        else {
            if (messageObject.isSending()) {
                return -1;
            }
            if (messageObject.type == 6) {
                return -1;
            }
            if (messageObject.isSendError()) {
                if (!messageObject.isMediaEmpty()) {
                    return 0;
                }
                return 20;
            }
            else {
                final int type2 = messageObject.type;
                if (type2 != 10 && type2 != 11) {
                    if (messageObject.isVoice()) {
                        return 2;
                    }
                    if (messageObject.isSticker()) {
                        final TLRPC.InputStickerSet inputStickerSet2 = messageObject.getInputStickerSet();
                        if (inputStickerSet2 instanceof TLRPC.TL_inputStickerSetShortName && !DataQuery.getInstance(super.currentAccount).isStickerPackInstalled(inputStickerSet2.short_name)) {
                            return 7;
                        }
                    }
                    else if (!messageObject.isRoundVideo() && (messageObject.messageOwner.media instanceof TLRPC.TL_messageMediaPhoto || messageObject.getDocument() != null || messageObject.isMusic() || messageObject.isVideo())) {
                        int n5 = n;
                        if (!TextUtils.isEmpty((CharSequence)messageObject.messageOwner.attachPath)) {
                            n5 = n;
                            if (new File(messageObject.messageOwner.attachPath).exists()) {
                                n5 = 1;
                            }
                        }
                        int n6;
                        if ((n6 = n5) == 0) {
                            n6 = n5;
                            if (FileLoader.getPathToMessage(messageObject.messageOwner).exists()) {
                                n6 = 1;
                            }
                        }
                        if (n6 != 0) {
                            if (messageObject.getDocument() != null) {
                                final String mime_type2 = messageObject.getDocument().mime_type;
                                if (mime_type2 != null && mime_type2.endsWith("text/xml")) {
                                    return 5;
                                }
                            }
                            if (messageObject.messageOwner.ttl <= 0) {
                                return 4;
                            }
                        }
                    }
                    else {
                        if (messageObject.type == 12) {
                            return 8;
                        }
                        if (messageObject.isMediaEmpty()) {
                            return 3;
                        }
                    }
                    return 2;
                }
                else {
                    if (messageObject.getId() != 0 && !messageObject.isSending()) {
                        return 1;
                    }
                    return -1;
                }
            }
        }
    }
    
    private int getScrollOffsetForMessage(final MessageObject key) {
        final MessageObject.GroupedMessages validGroupedMessage = this.getValidGroupedMessage(key);
        int n8;
        if (validGroupedMessage != null) {
            final MessageObject.GroupedMessagePosition groupedMessagePosition = validGroupedMessage.positions.get(key);
            final Point displaySize = AndroidUtilities.displaySize;
            final float n = Math.max(displaySize.x, displaySize.y) * 0.5f;
            final float[] siblingHeights = groupedMessagePosition.siblingHeights;
            float ph;
            if (siblingHeights != null) {
                ph = siblingHeights[0];
            }
            else {
                ph = groupedMessagePosition.ph;
            }
            final SparseBooleanArray sparseBooleanArray = new SparseBooleanArray();
            int i = 0;
            float n2 = 0.0f;
            float n3 = 0.0f;
            while (i < validGroupedMessage.posArray.size()) {
                final MessageObject.GroupedMessagePosition groupedMessagePosition2 = validGroupedMessage.posArray.get(i);
                float n4 = n2;
                float n5 = n3;
                if (sparseBooleanArray.indexOfKey((int)groupedMessagePosition2.minY) < 0) {
                    n4 = n2;
                    n5 = n3;
                    if (groupedMessagePosition2.siblingHeights == null) {
                        sparseBooleanArray.put((int)groupedMessagePosition2.minY, true);
                        final byte minY = groupedMessagePosition2.minY;
                        final byte minY2 = groupedMessagePosition.minY;
                        if (minY < minY2) {
                            n5 = n3 - groupedMessagePosition2.ph;
                        }
                        else {
                            n5 = n3;
                            if (minY > minY2) {
                                n5 = n3 + groupedMessagePosition2.ph;
                            }
                        }
                        n4 = n2 + groupedMessagePosition2.ph;
                    }
                }
                ++i;
                n2 = n4;
                n3 = n5;
            }
            int n6;
            int n7;
            if (Math.abs(n2 - ph) < 0.02f) {
                n6 = (int)(this.chatListView.getMeasuredHeight() - n2 * n) / 2 - this.chatListView.getPaddingTop();
                n7 = AndroidUtilities.dp(7.0f);
            }
            else {
                n6 = (int)(this.chatListView.getMeasuredHeight() - (ph + n3) * n) / 2 - this.chatListView.getPaddingTop();
                n7 = AndroidUtilities.dp(7.0f);
            }
            n8 = n6 - n7;
        }
        else {
            n8 = Integer.MAX_VALUE;
        }
        int b = n8;
        if (n8 == Integer.MAX_VALUE) {
            b = (this.chatListView.getMeasuredHeight() - key.getApproximateHeight()) / 2;
        }
        return Math.max(0, b);
    }
    
    private MessageObject.GroupedMessages getValidGroupedMessage(final MessageObject key) {
        final long groupId = key.getGroupId();
        MessageObject.GroupedMessages groupedMessages2;
        final MessageObject.GroupedMessages groupedMessages = groupedMessages2 = null;
        if (groupId != 0L) {
            final MessageObject.GroupedMessages groupedMessages3 = (MessageObject.GroupedMessages)this.groupedMessagesMap.get(key.getGroupId());
            if (groupedMessages3 != null) {
                groupedMessages2 = groupedMessages;
                if (groupedMessages3.messages.size() <= 1) {
                    return groupedMessages2;
                }
                if (groupedMessages3.positions.get(key) == null) {
                    groupedMessages2 = groupedMessages;
                    return groupedMessages2;
                }
            }
            groupedMessages2 = groupedMessages3;
        }
        return groupedMessages2;
    }
    
    private void hideActionMode() {
        if (!super.actionBar.isActionModeShowed()) {
            return;
        }
        final ActionBar actionBar = super.actionBar;
        if (actionBar != null) {
            actionBar.hideActionMode();
        }
        this.cantDeleteMessagesCount = 0;
        this.canEditMessagesCount = 0;
        this.cantForwardMessagesCount = 0;
        final ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            final EditTextCaption editField = chatActivityEnterView.getEditField();
            editField.requestFocus();
            editField.setAllowDrawCursor(true);
        }
    }
    
    private void hideFloatingDateView(final boolean b) {
        if (this.floatingDateView.getTag() != null && !this.currentFloatingDateOnScreen && (!this.scrollingFloatingDate || this.currentFloatingTopIsNotMessage)) {
            this.floatingDateView.setTag((Object)null);
            if (b) {
                (this.floatingDateAnimation = new AnimatorSet()).setDuration(150L);
                this.floatingDateAnimation.playTogether(new Animator[] { (Animator)ObjectAnimator.ofFloat((Object)this.floatingDateView, View.ALPHA, new float[] { 0.0f }) });
                this.floatingDateAnimation.addListener((Animator$AnimatorListener)new AnimatorListenerAdapter() {
                    public void onAnimationEnd(final Animator animator) {
                        if (animator.equals(ChatActivity.this.floatingDateAnimation)) {
                            ChatActivity.this.floatingDateAnimation = null;
                        }
                    }
                });
                this.floatingDateAnimation.setStartDelay((long)this.hideDateDelay);
                this.floatingDateAnimation.start();
            }
            else {
                final AnimatorSet floatingDateAnimation = this.floatingDateAnimation;
                if (floatingDateAnimation != null) {
                    floatingDateAnimation.cancel();
                    this.floatingDateAnimation = null;
                }
                this.floatingDateView.setAlpha(0.0f);
            }
            this.hideDateDelay = 500;
        }
    }
    
    private void hidePinnedMessageView(final boolean b) {
        if (this.pinnedMessageView.getTag() == null) {
            this.pinnedMessageView.setTag((Object)1);
            final AnimatorSet pinnedMessageViewAnimator = this.pinnedMessageViewAnimator;
            if (pinnedMessageViewAnimator != null) {
                pinnedMessageViewAnimator.cancel();
                this.pinnedMessageViewAnimator = null;
            }
            if (b) {
                (this.pinnedMessageViewAnimator = new AnimatorSet()).playTogether(new Animator[] { (Animator)ObjectAnimator.ofFloat((Object)this.pinnedMessageView, View.TRANSLATION_Y, new float[] { (float)(-AndroidUtilities.dp(50.0f)) }) });
                this.pinnedMessageViewAnimator.setDuration(200L);
                this.pinnedMessageViewAnimator.addListener((Animator$AnimatorListener)new AnimatorListenerAdapter() {
                    public void onAnimationCancel(final Animator obj) {
                        if (ChatActivity.this.pinnedMessageViewAnimator != null && ChatActivity.this.pinnedMessageViewAnimator.equals(obj)) {
                            ChatActivity.this.pinnedMessageViewAnimator = null;
                        }
                    }
                    
                    public void onAnimationEnd(final Animator obj) {
                        if (ChatActivity.this.pinnedMessageViewAnimator != null && ChatActivity.this.pinnedMessageViewAnimator.equals(obj)) {
                            ChatActivity.this.pinnedMessageView.setVisibility(8);
                            ChatActivity.this.pinnedMessageViewAnimator = null;
                        }
                    }
                });
                this.pinnedMessageViewAnimator.start();
            }
            else {
                this.pinnedMessageView.setTranslationY((float)(-AndroidUtilities.dp(50.0f)));
                this.pinnedMessageView.setVisibility(8);
            }
        }
    }
    
    private void hideVoiceHint() {
        (this.voiceHintAnimation = new AnimatorSet()).playTogether(new Animator[] { (Animator)ObjectAnimator.ofFloat((Object)this.voiceHintTextView, View.ALPHA, new float[] { 0.0f }) });
        this.voiceHintAnimation.addListener((Animator$AnimatorListener)new AnimatorListenerAdapter() {
            public void onAnimationCancel(final Animator animator) {
                if (animator.equals(ChatActivity.this.voiceHintAnimation)) {
                    ChatActivity.this.voiceHintHideRunnable = null;
                    ChatActivity.this.voiceHintHideRunnable = null;
                }
            }
            
            public void onAnimationEnd(final Animator animator) {
                if (animator.equals(ChatActivity.this.voiceHintAnimation)) {
                    ChatActivity.this.voiceHintAnimation = null;
                    ChatActivity.this.voiceHintHideRunnable = null;
                    if (ChatActivity.this.voiceHintTextView != null) {
                        ChatActivity.this.voiceHintTextView.setVisibility(8);
                    }
                }
            }
        });
        this.voiceHintAnimation.setDuration(300L);
        this.voiceHintAnimation.start();
    }
    
    private void initStickers() {
        if (this.chatActivityEnterView != null && this.getParentActivity() != null && this.stickersAdapter == null) {
            final TLRPC.EncryptedChat currentEncryptedChat = this.currentEncryptedChat;
            if (currentEncryptedChat == null || AndroidUtilities.getPeerLayerVersion(currentEncryptedChat.layer) >= 23) {
                this.stickersListView.setPadding(AndroidUtilities.dp(18.0f), 0, AndroidUtilities.dp(18.0f), 0);
                this.stickersListView.setAdapter(this.stickersAdapter = new StickersAdapter((Context)this.getParentActivity(), (StickersAdapter.StickersAdapterDelegate)new _$$Lambda$ChatActivity$7VE3MzWCKlHZpFIQk1J_LXU_uCw(this)));
                this.stickersListView.setOnItemClickListener(this.stickersOnItemClickListener = new _$$Lambda$ChatActivity$JFKm62r6AhP3PumFHedSQFi2J48(this));
            }
        }
    }
    
    private void inlineUpdate1() {
        final int prevSetUnreadCount = this.prevSetUnreadCount;
        final int newUnreadMessageCount = this.newUnreadMessageCount;
        if (prevSetUnreadCount != newUnreadMessageCount) {
            this.prevSetUnreadCount = newUnreadMessageCount;
            this.pagedownButtonCounter.setText((CharSequence)String.format("%d", newUnreadMessageCount));
        }
        if (this.newUnreadMessageCount <= 0) {
            if (this.pagedownButtonCounter.getVisibility() != 4) {
                this.pagedownButtonCounter.setVisibility(4);
            }
        }
        else if (this.pagedownButtonCounter.getVisibility() != 0) {
            this.pagedownButtonCounter.setVisibility(0);
        }
    }
    
    private void inlineUpdate2() {
        final int prevSetUnreadCount = this.prevSetUnreadCount;
        final int newUnreadMessageCount = this.newUnreadMessageCount;
        if (prevSetUnreadCount != newUnreadMessageCount) {
            this.prevSetUnreadCount = newUnreadMessageCount;
            this.pagedownButtonCounter.setText((CharSequence)String.format("%d", newUnreadMessageCount));
        }
        if (this.pagedownButtonCounter.getVisibility() != 4) {
            this.pagedownButtonCounter.setVisibility(4);
        }
    }
    
    private void jumpToDate(int n) {
        if (this.messages.isEmpty()) {
            return;
        }
        final MessageObject messageObject = this.messages.get(0);
        final ArrayList<MessageObject> messages = this.messages;
        final MessageObject messageObject2 = messages.get(messages.size() - 1);
        if (messageObject.messageOwner.date >= n && messageObject2.messageOwner.date <= n) {
            for (int i = this.messages.size() - 1; i >= 0; --i) {
                final MessageObject messageObject3 = this.messages.get(i);
                if (messageObject3.messageOwner.date >= n && messageObject3.getId() != 0) {
                    final int id = messageObject3.getId();
                    if (messageObject3.getDialogId() == this.mergeDialogId) {
                        n = 1;
                    }
                    else {
                        n = 0;
                    }
                    this.scrollToMessageId(id, 0, false, n, false);
                    break;
                }
            }
        }
        else if ((int)this.dialog_id != 0) {
            this.clearChatData();
            this.waitingForLoad.add(this.lastLoadIndex);
            MessagesController.getInstance(super.currentAccount).loadMessages(this.dialog_id, 30, 0, n, true, 0, super.classGuid, 4, 0, ChatObject.isChannel(this.currentChat), this.lastLoadIndex++);
            this.floatingDateView.setAlpha(0.0f);
            this.floatingDateView.setTag((Object)null);
        }
    }
    
    private void mentionListViewUpdateLayout() {
        if (this.mentionListView.getChildCount() <= 0) {
            this.mentionListViewScrollOffsetY = 0;
            this.mentionListViewLastViewPosition = -1;
            return;
        }
        final RecyclerListView mentionListView = this.mentionListView;
        final View child = mentionListView.getChildAt(mentionListView.getChildCount() - 1);
        final RecyclerListView.Holder holder = (RecyclerListView.Holder)this.mentionListView.findContainingViewHolder(child);
        if (this.mentionLayoutManager.getReverseLayout()) {
            if (holder != null) {
                this.mentionListViewLastViewPosition = ((RecyclerView.ViewHolder)holder).getAdapterPosition();
                this.mentionListViewLastViewTop = child.getBottom();
            }
            else {
                this.mentionListViewLastViewPosition = -1;
            }
            final View child2 = this.mentionListView.getChildAt(0);
            final RecyclerListView.Holder holder2 = (RecyclerListView.Holder)this.mentionListView.findContainingViewHolder(child2);
            int mentionListViewScrollOffsetY;
            if (child2.getBottom() < this.mentionListView.getMeasuredHeight() && holder2 != null && ((RecyclerView.ViewHolder)holder2).getAdapterPosition() == 0) {
                mentionListViewScrollOffsetY = child2.getBottom();
            }
            else {
                mentionListViewScrollOffsetY = this.mentionListView.getMeasuredHeight();
            }
            if (this.mentionListViewScrollOffsetY != mentionListViewScrollOffsetY) {
                this.mentionListView.setBottomGlowOffset(this.mentionListViewScrollOffsetY = mentionListViewScrollOffsetY);
                this.mentionListView.setTopGlowOffset(0);
                this.mentionListView.invalidate();
                this.mentionContainer.invalidate();
            }
        }
        else {
            if (holder != null) {
                this.mentionListViewLastViewPosition = ((RecyclerView.ViewHolder)holder).getAdapterPosition();
                this.mentionListViewLastViewTop = child.getTop();
            }
            else {
                this.mentionListViewLastViewPosition = -1;
            }
            final View child3 = this.mentionListView.getChildAt(0);
            final RecyclerListView.Holder holder3 = (RecyclerListView.Holder)this.mentionListView.findContainingViewHolder(child3);
            int top;
            if (child3.getTop() > 0 && holder3 != null && ((RecyclerView.ViewHolder)holder3).getAdapterPosition() == 0) {
                top = child3.getTop();
            }
            else {
                top = 0;
            }
            if (this.mentionListViewScrollOffsetY != top) {
                this.mentionListView.setTopGlowOffset(this.mentionListViewScrollOffsetY = top);
                this.mentionListView.setBottomGlowOffset(0);
                this.mentionListView.invalidate();
                this.mentionContainer.invalidate();
            }
        }
    }
    
    private void migrateToNewChat(final MessageObject messageObject) {
        final ActionBarLayout parentLayout = super.parentLayout;
        if (parentLayout == null) {
            return;
        }
        final int channel_id = messageObject.messageOwner.action.channel_id;
        BaseFragment baseFragment;
        if (parentLayout.fragmentsStack.size() > 0) {
            final ArrayList<BaseFragment> fragmentsStack = super.parentLayout.fragmentsStack;
            baseFragment = fragmentsStack.get(fragmentsStack.size() - 1);
        }
        else {
            baseFragment = null;
        }
        int i = super.parentLayout.fragmentsStack.indexOf(this);
        final ActionBarLayout parentLayout2 = super.parentLayout;
        if (i > 0 && !(baseFragment instanceof ChatActivity) && !(baseFragment instanceof ProfileActivity) && this.currentChat.creator) {
            while (i < parentLayout2.fragmentsStack.size() - 1) {
                final BaseFragment baseFragment2 = parentLayout2.fragmentsStack.get(i);
                if (baseFragment2 instanceof ChatActivity) {
                    final Bundle bundle = new Bundle();
                    bundle.putInt("chat_id", channel_id);
                    parentLayout2.addFragmentToStack(new ChatActivity(bundle), i);
                    baseFragment2.removeSelfFromStack();
                }
                else if (baseFragment2 instanceof ProfileActivity) {
                    final Bundle bundle2 = new Bundle();
                    bundle2.putInt("chat_id", channel_id);
                    parentLayout2.addFragmentToStack(new ProfileActivity(bundle2), i);
                    baseFragment2.removeSelfFromStack();
                }
                else if (baseFragment2 instanceof ChatEditActivity) {
                    final Bundle bundle3 = new Bundle();
                    bundle3.putInt("chat_id", channel_id);
                    parentLayout2.addFragmentToStack(new ChatEditActivity(bundle3), i);
                    baseFragment2.removeSelfFromStack();
                }
                else if (baseFragment2 instanceof ChatUsersActivity) {
                    if (!((ChatUsersActivity)baseFragment2).hasSelectType()) {
                        final Bundle arguments = baseFragment2.getArguments();
                        arguments.putInt("chat_id", channel_id);
                        parentLayout2.addFragmentToStack(new ChatUsersActivity(arguments), i);
                    }
                    baseFragment2.removeSelfFromStack();
                }
                ++i;
            }
        }
        else {
            AndroidUtilities.runOnUIThread(new _$$Lambda$ChatActivity$_Jr_ok0MSGPrIGitTcXqooeLzyo(this, baseFragment, messageObject, parentLayout2));
        }
        AndroidUtilities.runOnUIThread(new _$$Lambda$ChatActivity$WCzw_OEKcApLglsMwvn0_jTRDc8(this, channel_id), 1000L);
    }
    
    private void moveScrollToLastMessage() {
        if (this.chatListView != null && !this.messages.isEmpty()) {
            this.chatLayoutManager.scrollToPositionWithOffset(0, 0);
        }
    }
    
    private void openAttachMenu() {
        if (this.getParentActivity() == null) {
            return;
        }
        this.createChatAttachView();
        this.chatAttachAlert.loadGalleryPhotos();
        final int sdk_INT = Build$VERSION.SDK_INT;
        if (sdk_INT == 21 || sdk_INT == 22) {
            this.chatActivityEnterView.closeKeyboard();
        }
        this.chatAttachAlert.init();
        this.showDialog(this.chatAttachAlert);
    }
    
    private void openForward() {
        final Bundle bundle = new Bundle();
        bundle.putBoolean("onlySelect", true);
        bundle.putInt("dialogsType", 3);
        final DialogsActivity dialogsActivity = new DialogsActivity(bundle);
        dialogsActivity.setDelegate((DialogsActivity.DialogsActivityDelegate)this);
        this.presentFragment(dialogsActivity);
    }
    
    private void openSearchWithText(final String s) {
        if (!super.actionBar.isSearchFieldVisible()) {
            this.avatarContainer.setVisibility(8);
            this.headerItem.setVisibility(8);
            this.attachItem.setVisibility(8);
            this.editTextItem.setVisibility(8);
            this.searchItem.setVisibility(0);
            this.updateSearchButtons(0, 0, -1);
            this.updateBottomOverlay();
        }
        this.openSearchKeyboard = (s == null);
        this.searchItem.openSearch(this.openSearchKeyboard);
        if (s != null) {
            this.searchItem.setSearchFieldText(s, false);
            DataQuery.getInstance(super.currentAccount).searchMessagesInChat(s, this.dialog_id, this.mergeDialogId, super.classGuid, 0, this.searchingUserMessages);
        }
        this.updatePinnedMessageView(true);
    }
    
    private void processRowSelect(final View view, final boolean b, final float n, final float n2) {
        MessageObject messageObject;
        if (view instanceof ChatMessageCell) {
            messageObject = ((ChatMessageCell)view).getMessageObject();
        }
        else if (view instanceof ChatActionCell) {
            messageObject = ((ChatActionCell)view).getMessageObject();
        }
        else {
            messageObject = null;
        }
        final int messageType = this.getMessageType(messageObject);
        if (messageType >= 2) {
            if (messageType != 20) {
                this.addToSelectedMessages(messageObject, b);
                this.updateActionModeTitle();
                this.updateVisibleRows();
            }
        }
    }
    
    private void processSelectedAttach(final int p0) {
        // 
        // This method could not be decompiled.
        // 
        // Original Bytecode:
        // 
        //     1: istore_2       
        //     2: iconst_0       
        //     3: istore_3       
        //     4: iconst_1       
        //     5: istore          4
        //     7: iload_1        
        //     8: ifne            164
        //    11: getstatic       android/os/Build$VERSION.SDK_INT:I
        //    14: bipush          23
        //    16: if_icmplt       52
        //    19: aload_0        
        //    20: invokevirtual   org/telegram/ui/ActionBar/BaseFragment.getParentActivity:()Landroid/app/Activity;
        //    23: ldc_w           "android.permission.CAMERA"
        //    26: invokevirtual   android/app/Activity.checkSelfPermission:(Ljava/lang/String;)I
        //    29: ifeq            52
        //    32: aload_0        
        //    33: invokevirtual   org/telegram/ui/ActionBar/BaseFragment.getParentActivity:()Landroid/app/Activity;
        //    36: iconst_1       
        //    37: anewarray       Ljava/lang/String;
        //    40: dup            
        //    41: iconst_0       
        //    42: ldc_w           "android.permission.CAMERA"
        //    45: aastore        
        //    46: bipush          19
        //    48: invokevirtual   android/app/Activity.requestPermissions:([Ljava/lang/String;I)V
        //    51: return         
        //    52: new             Landroid/content/Intent;
        //    55: astore          5
        //    57: aload           5
        //    59: ldc_w           "android.media.action.IMAGE_CAPTURE"
        //    62: invokespecial   android/content/Intent.<init>:(Ljava/lang/String;)V
        //    65: invokestatic    org/telegram/messenger/AndroidUtilities.generatePicturePath:()Ljava/io/File;
        //    68: astore          6
        //    70: aload           6
        //    72: ifnull          144
        //    75: getstatic       android/os/Build$VERSION.SDK_INT:I
        //    78: bipush          24
        //    80: if_icmplt       121
        //    83: aload           5
        //    85: ldc_w           "output"
        //    88: aload_0        
        //    89: invokevirtual   org/telegram/ui/ActionBar/BaseFragment.getParentActivity:()Landroid/app/Activity;
        //    92: ldc_w           "org.telegram.messenger.provider"
        //    95: aload           6
        //    97: invokestatic    androidx/core/content/FileProvider.getUriForFile:(Landroid/content/Context;Ljava/lang/String;Ljava/io/File;)Landroid/net/Uri;
        //   100: invokevirtual   android/content/Intent.putExtra:(Ljava/lang/String;Landroid/os/Parcelable;)Landroid/content/Intent;
        //   103: pop            
        //   104: aload           5
        //   106: iconst_2       
        //   107: invokevirtual   android/content/Intent.addFlags:(I)Landroid/content/Intent;
        //   110: pop            
        //   111: aload           5
        //   113: iconst_1       
        //   114: invokevirtual   android/content/Intent.addFlags:(I)Landroid/content/Intent;
        //   117: pop            
        //   118: goto            135
        //   121: aload           5
        //   123: ldc_w           "output"
        //   126: aload           6
        //   128: invokestatic    android/net/Uri.fromFile:(Ljava/io/File;)Landroid/net/Uri;
        //   131: invokevirtual   android/content/Intent.putExtra:(Ljava/lang/String;Landroid/os/Parcelable;)Landroid/content/Intent;
        //   134: pop            
        //   135: aload_0        
        //   136: aload           6
        //   138: invokevirtual   java/io/File.getAbsolutePath:()Ljava/lang/String;
        //   141: putfield        org/telegram/ui/ChatActivity.currentPicturePath:Ljava/lang/String;
        //   144: aload_0        
        //   145: aload           5
        //   147: iconst_0       
        //   148: invokevirtual   org/telegram/ui/ActionBar/BaseFragment.startActivityForResult:(Landroid/content/Intent;I)V
        //   151: goto            876
        //   154: astore          5
        //   156: aload           5
        //   158: invokestatic    org/telegram/messenger/FileLog.e:(Ljava/lang/Throwable;)V
        //   161: goto            876
        //   164: iload_1        
        //   165: iconst_1       
        //   166: if_icmpne       328
        //   169: getstatic       android/os/Build$VERSION.SDK_INT:I
        //   172: bipush          23
        //   174: if_icmplt       209
        //   177: aload_0        
        //   178: invokevirtual   org/telegram/ui/ActionBar/BaseFragment.getParentActivity:()Landroid/app/Activity;
        //   181: ldc_w           "android.permission.READ_EXTERNAL_STORAGE"
        //   184: invokevirtual   android/app/Activity.checkSelfPermission:(Ljava/lang/String;)I
        //   187: ifeq            209
        //   190: aload_0        
        //   191: invokevirtual   org/telegram/ui/ActionBar/BaseFragment.getParentActivity:()Landroid/app/Activity;
        //   194: iconst_1       
        //   195: anewarray       Ljava/lang/String;
        //   198: dup            
        //   199: iconst_0       
        //   200: ldc_w           "android.permission.READ_EXTERNAL_STORAGE"
        //   203: aastore        
        //   204: iconst_4       
        //   205: invokevirtual   android/app/Activity.requestPermissions:([Ljava/lang/String;I)V
        //   208: return         
        //   209: aload_0        
        //   210: getfield        org/telegram/ui/ChatActivity.currentChat:Lorg/telegram/tgnet/TLRPC$Chat;
        //   213: invokestatic    org/telegram/messenger/ChatObject.isChannel:(Lorg/telegram/tgnet/TLRPC$Chat;)Z
        //   216: ifeq            247
        //   219: aload_0        
        //   220: getfield        org/telegram/ui/ChatActivity.currentChat:Lorg/telegram/tgnet/TLRPC$Chat;
        //   223: getfield        org/telegram/tgnet/TLRPC$Chat.banned_rights:Lorg/telegram/tgnet/TLRPC$TL_chatBannedRights;
        //   226: astore          5
        //   228: aload           5
        //   230: ifnull          247
        //   233: aload           5
        //   235: getfield        org/telegram/tgnet/TLRPC$TL_chatBannedRights.send_gifs:Z
        //   238: ifeq            247
        //   241: iconst_0       
        //   242: istore          7
        //   244: goto            274
        //   247: aload_0        
        //   248: getfield        org/telegram/ui/ChatActivity.currentEncryptedChat:Lorg/telegram/tgnet/TLRPC$EncryptedChat;
        //   251: astore          5
        //   253: aload           5
        //   255: ifnull          271
        //   258: aload           5
        //   260: getfield        org/telegram/tgnet/TLRPC$EncryptedChat.layer:I
        //   263: invokestatic    org/telegram/messenger/AndroidUtilities.getPeerLayerVersion:(I)I
        //   266: bipush          46
        //   268: if_icmplt       241
        //   271: iconst_1       
        //   272: istore          7
        //   274: new             Lorg/telegram/ui/PhotoAlbumPickerActivity;
        //   277: dup            
        //   278: iconst_0       
        //   279: iload           7
        //   281: iconst_1       
        //   282: aload_0        
        //   283: invokespecial   org/telegram/ui/PhotoAlbumPickerActivity.<init>:(IZZLorg/telegram/ui/ChatActivity;)V
        //   286: astore          5
        //   288: iload_3        
        //   289: istore_1       
        //   290: aload_0        
        //   291: getfield        org/telegram/ui/ChatActivity.editingMessageObject:Lorg/telegram/messenger/MessageObject;
        //   294: ifnull          299
        //   297: iconst_1       
        //   298: istore_1       
        //   299: aload           5
        //   301: iload_1        
        //   302: invokevirtual   org/telegram/ui/PhotoAlbumPickerActivity.setMaxSelectedPhotos:(I)V
        //   305: aload           5
        //   307: new             Lorg/telegram/ui/ChatActivity$47;
        //   310: dup            
        //   311: aload_0        
        //   312: invokespecial   org/telegram/ui/ChatActivity$47.<init>:(Lorg/telegram/ui/ChatActivity;)V
        //   315: invokevirtual   org/telegram/ui/PhotoAlbumPickerActivity.setDelegate:(Lorg/telegram/ui/PhotoAlbumPickerActivity$PhotoAlbumPickerActivityDelegate;)V
        //   318: aload_0        
        //   319: aload           5
        //   321: invokevirtual   org/telegram/ui/ActionBar/BaseFragment.presentFragment:(Lorg/telegram/ui/ActionBar/BaseFragment;)Z
        //   324: pop            
        //   325: goto            876
        //   328: iload_1        
        //   329: iconst_2       
        //   330: if_icmpne       506
        //   333: getstatic       android/os/Build$VERSION.SDK_INT:I
        //   336: bipush          23
        //   338: if_icmplt       374
        //   341: aload_0        
        //   342: invokevirtual   org/telegram/ui/ActionBar/BaseFragment.getParentActivity:()Landroid/app/Activity;
        //   345: ldc_w           "android.permission.CAMERA"
        //   348: invokevirtual   android/app/Activity.checkSelfPermission:(Ljava/lang/String;)I
        //   351: ifeq            374
        //   354: aload_0        
        //   355: invokevirtual   org/telegram/ui/ActionBar/BaseFragment.getParentActivity:()Landroid/app/Activity;
        //   358: iconst_1       
        //   359: anewarray       Ljava/lang/String;
        //   362: dup            
        //   363: iconst_0       
        //   364: ldc_w           "android.permission.CAMERA"
        //   367: aastore        
        //   368: bipush          20
        //   370: invokevirtual   android/app/Activity.requestPermissions:([Ljava/lang/String;I)V
        //   373: return         
        //   374: new             Landroid/content/Intent;
        //   377: astore          6
        //   379: aload           6
        //   381: ldc_w           "android.media.action.VIDEO_CAPTURE"
        //   384: invokespecial   android/content/Intent.<init>:(Ljava/lang/String;)V
        //   387: invokestatic    org/telegram/messenger/AndroidUtilities.generateVideoPath:()Ljava/io/File;
        //   390: astore          5
        //   392: aload           5
        //   394: ifnull          486
        //   397: getstatic       android/os/Build$VERSION.SDK_INT:I
        //   400: bipush          24
        //   402: if_icmplt       443
        //   405: aload           6
        //   407: ldc_w           "output"
        //   410: aload_0        
        //   411: invokevirtual   org/telegram/ui/ActionBar/BaseFragment.getParentActivity:()Landroid/app/Activity;
        //   414: ldc_w           "org.telegram.messenger.provider"
        //   417: aload           5
        //   419: invokestatic    androidx/core/content/FileProvider.getUriForFile:(Landroid/content/Context;Ljava/lang/String;Ljava/io/File;)Landroid/net/Uri;
        //   422: invokevirtual   android/content/Intent.putExtra:(Ljava/lang/String;Landroid/os/Parcelable;)Landroid/content/Intent;
        //   425: pop            
        //   426: aload           6
        //   428: iconst_2       
        //   429: invokevirtual   android/content/Intent.addFlags:(I)Landroid/content/Intent;
        //   432: pop            
        //   433: aload           6
        //   435: iconst_1       
        //   436: invokevirtual   android/content/Intent.addFlags:(I)Landroid/content/Intent;
        //   439: pop            
        //   440: goto            465
        //   443: getstatic       android/os/Build$VERSION.SDK_INT:I
        //   446: bipush          18
        //   448: if_icmplt       465
        //   451: aload           6
        //   453: ldc_w           "output"
        //   456: aload           5
        //   458: invokestatic    android/net/Uri.fromFile:(Ljava/io/File;)Landroid/net/Uri;
        //   461: invokevirtual   android/content/Intent.putExtra:(Ljava/lang/String;Landroid/os/Parcelable;)Landroid/content/Intent;
        //   464: pop            
        //   465: aload           6
        //   467: ldc_w           "android.intent.extra.sizeLimit"
        //   470: ldc2_w          1610612736
        //   473: invokevirtual   android/content/Intent.putExtra:(Ljava/lang/String;J)Landroid/content/Intent;
        //   476: pop            
        //   477: aload_0        
        //   478: aload           5
        //   480: invokevirtual   java/io/File.getAbsolutePath:()Ljava/lang/String;
        //   483: putfield        org/telegram/ui/ChatActivity.currentPicturePath:Ljava/lang/String;
        //   486: aload_0        
        //   487: aload           6
        //   489: iconst_2       
        //   490: invokevirtual   org/telegram/ui/ActionBar/BaseFragment.startActivityForResult:(Landroid/content/Intent;I)V
        //   493: goto            876
        //   496: astore          5
        //   498: aload           5
        //   500: invokestatic    org/telegram/messenger/FileLog.e:(Ljava/lang/Throwable;)V
        //   503: goto            876
        //   506: iload_1        
        //   507: bipush          6
        //   509: if_icmpne       566
        //   512: aload_0        
        //   513: invokestatic    org/telegram/messenger/AndroidUtilities.isGoogleMapsInstalled:(Lorg/telegram/ui/ActionBar/BaseFragment;)Z
        //   516: ifne            520
        //   519: return         
        //   520: iload_2        
        //   521: istore_1       
        //   522: aload_0        
        //   523: getfield        org/telegram/ui/ChatActivity.currentEncryptedChat:Lorg/telegram/tgnet/TLRPC$EncryptedChat;
        //   526: ifnonnull       531
        //   529: iconst_1       
        //   530: istore_1       
        //   531: new             Lorg/telegram/ui/LocationActivity;
        //   534: dup            
        //   535: iload_1        
        //   536: invokespecial   org/telegram/ui/LocationActivity.<init>:(I)V
        //   539: astore          5
        //   541: aload           5
        //   543: aload_0        
        //   544: getfield        org/telegram/ui/ChatActivity.dialog_id:J
        //   547: invokevirtual   org/telegram/ui/LocationActivity.setDialogId:(J)V
        //   550: aload           5
        //   552: aload_0        
        //   553: invokevirtual   org/telegram/ui/LocationActivity.setDelegate:(Lorg/telegram/ui/LocationActivity$LocationActivityDelegate;)V
        //   556: aload_0        
        //   557: aload           5
        //   559: invokevirtual   org/telegram/ui/ActionBar/BaseFragment.presentFragment:(Lorg/telegram/ui/ActionBar/BaseFragment;)Z
        //   562: pop            
        //   563: goto            876
        //   566: iload_1        
        //   567: iconst_4       
        //   568: if_icmpne       665
        //   571: getstatic       android/os/Build$VERSION.SDK_INT:I
        //   574: bipush          23
        //   576: if_icmplt       611
        //   579: aload_0        
        //   580: invokevirtual   org/telegram/ui/ActionBar/BaseFragment.getParentActivity:()Landroid/app/Activity;
        //   583: ldc_w           "android.permission.READ_EXTERNAL_STORAGE"
        //   586: invokevirtual   android/app/Activity.checkSelfPermission:(Ljava/lang/String;)I
        //   589: ifeq            611
        //   592: aload_0        
        //   593: invokevirtual   org/telegram/ui/ActionBar/BaseFragment.getParentActivity:()Landroid/app/Activity;
        //   596: iconst_1       
        //   597: anewarray       Ljava/lang/String;
        //   600: dup            
        //   601: iconst_0       
        //   602: ldc_w           "android.permission.READ_EXTERNAL_STORAGE"
        //   605: aastore        
        //   606: iconst_4       
        //   607: invokevirtual   android/app/Activity.requestPermissions:([Ljava/lang/String;I)V
        //   610: return         
        //   611: new             Lorg/telegram/ui/DocumentSelectActivity;
        //   614: dup            
        //   615: iconst_1       
        //   616: invokespecial   org/telegram/ui/DocumentSelectActivity.<init>:(Z)V
        //   619: astore          5
        //   621: aload_0        
        //   622: getfield        org/telegram/ui/ChatActivity.editingMessageObject:Lorg/telegram/messenger/MessageObject;
        //   625: ifnull          634
        //   628: iload           4
        //   630: istore_1       
        //   631: goto            636
        //   634: iconst_m1      
        //   635: istore_1       
        //   636: aload           5
        //   638: iload_1        
        //   639: invokevirtual   org/telegram/ui/DocumentSelectActivity.setMaxSelectedFiles:(I)V
        //   642: aload           5
        //   644: new             Lorg/telegram/ui/ChatActivity$48;
        //   647: dup            
        //   648: aload_0        
        //   649: invokespecial   org/telegram/ui/ChatActivity$48.<init>:(Lorg/telegram/ui/ChatActivity;)V
        //   652: invokevirtual   org/telegram/ui/DocumentSelectActivity.setDelegate:(Lorg/telegram/ui/DocumentSelectActivity$DocumentSelectActivityDelegate;)V
        //   655: aload_0        
        //   656: aload           5
        //   658: invokevirtual   org/telegram/ui/ActionBar/BaseFragment.presentFragment:(Lorg/telegram/ui/ActionBar/BaseFragment;)Z
        //   661: pop            
        //   662: goto            876
        //   665: iload_1        
        //   666: iconst_3       
        //   667: if_icmpne       742
        //   670: getstatic       android/os/Build$VERSION.SDK_INT:I
        //   673: bipush          23
        //   675: if_icmplt       710
        //   678: aload_0        
        //   679: invokevirtual   org/telegram/ui/ActionBar/BaseFragment.getParentActivity:()Landroid/app/Activity;
        //   682: ldc_w           "android.permission.READ_EXTERNAL_STORAGE"
        //   685: invokevirtual   android/app/Activity.checkSelfPermission:(Ljava/lang/String;)I
        //   688: ifeq            710
        //   691: aload_0        
        //   692: invokevirtual   org/telegram/ui/ActionBar/BaseFragment.getParentActivity:()Landroid/app/Activity;
        //   695: iconst_1       
        //   696: anewarray       Ljava/lang/String;
        //   699: dup            
        //   700: iconst_0       
        //   701: ldc_w           "android.permission.READ_EXTERNAL_STORAGE"
        //   704: aastore        
        //   705: iconst_4       
        //   706: invokevirtual   android/app/Activity.requestPermissions:([Ljava/lang/String;I)V
        //   709: return         
        //   710: new             Lorg/telegram/ui/AudioSelectActivity;
        //   713: dup            
        //   714: invokespecial   org/telegram/ui/AudioSelectActivity.<init>:()V
        //   717: astore          5
        //   719: aload           5
        //   721: new             Lorg/telegram/ui/_$$Lambda$ChatActivity$bmi0DWwdmf6ud9aJqSdrchMhdS8;
        //   724: dup            
        //   725: aload_0        
        //   726: invokespecial   org/telegram/ui/_$$Lambda$ChatActivity$bmi0DWwdmf6ud9aJqSdrchMhdS8.<init>:(Lorg/telegram/ui/ChatActivity;)V
        //   729: invokevirtual   org/telegram/ui/AudioSelectActivity.setDelegate:(Lorg/telegram/ui/AudioSelectActivity$AudioSelectActivityDelegate;)V
        //   732: aload_0        
        //   733: aload           5
        //   735: invokevirtual   org/telegram/ui/ActionBar/BaseFragment.presentFragment:(Lorg/telegram/ui/ActionBar/BaseFragment;)Z
        //   738: pop            
        //   739: goto            876
        //   742: iload_1        
        //   743: iconst_5       
        //   744: if_icmpne       819
        //   747: getstatic       android/os/Build$VERSION.SDK_INT:I
        //   750: bipush          23
        //   752: if_icmplt       787
        //   755: aload_0        
        //   756: invokevirtual   org/telegram/ui/ActionBar/BaseFragment.getParentActivity:()Landroid/app/Activity;
        //   759: ldc_w           "android.permission.READ_CONTACTS"
        //   762: invokevirtual   android/app/Activity.checkSelfPermission:(Ljava/lang/String;)I
        //   765: ifeq            787
        //   768: aload_0        
        //   769: invokevirtual   org/telegram/ui/ActionBar/BaseFragment.getParentActivity:()Landroid/app/Activity;
        //   772: iconst_1       
        //   773: anewarray       Ljava/lang/String;
        //   776: dup            
        //   777: iconst_0       
        //   778: ldc_w           "android.permission.READ_CONTACTS"
        //   781: aastore        
        //   782: iconst_5       
        //   783: invokevirtual   android/app/Activity.requestPermissions:([Ljava/lang/String;I)V
        //   786: return         
        //   787: new             Lorg/telegram/ui/PhonebookSelectActivity;
        //   790: dup            
        //   791: invokespecial   org/telegram/ui/PhonebookSelectActivity.<init>:()V
        //   794: astore          5
        //   796: aload           5
        //   798: new             Lorg/telegram/ui/_$$Lambda$ChatActivity$NigUKwurkV8y3w_c45IqajRbqSw;
        //   801: dup            
        //   802: aload_0        
        //   803: invokespecial   org/telegram/ui/_$$Lambda$ChatActivity$NigUKwurkV8y3w_c45IqajRbqSw.<init>:(Lorg/telegram/ui/ChatActivity;)V
        //   806: invokevirtual   org/telegram/ui/PhonebookSelectActivity.setDelegate:(Lorg/telegram/ui/PhonebookSelectActivity$PhonebookSelectActivityDelegate;)V
        //   809: aload_0        
        //   810: aload           5
        //   812: invokevirtual   org/telegram/ui/ActionBar/BaseFragment.presentFragment:(Lorg/telegram/ui/ActionBar/BaseFragment;)Z
        //   815: pop            
        //   816: goto            876
        //   819: iload_1        
        //   820: bipush          9
        //   822: if_icmpne       876
        //   825: aload_0        
        //   826: getfield        org/telegram/ui/ChatActivity.currentChat:Lorg/telegram/tgnet/TLRPC$Chat;
        //   829: astore          5
        //   831: aload           5
        //   833: ifnull          876
        //   836: aload           5
        //   838: invokestatic    org/telegram/messenger/ChatObject.canSendPolls:(Lorg/telegram/tgnet/TLRPC$Chat;)Z
        //   841: ifne            847
        //   844: goto            876
        //   847: new             Lorg/telegram/ui/PollCreateActivity;
        //   850: dup            
        //   851: invokespecial   org/telegram/ui/PollCreateActivity.<init>:()V
        //   854: astore          5
        //   856: aload           5
        //   858: new             Lorg/telegram/ui/_$$Lambda$ChatActivity$6WXJc4YH8LQTBuHben4e3iABxOY;
        //   861: dup            
        //   862: aload_0        
        //   863: invokespecial   org/telegram/ui/_$$Lambda$ChatActivity$6WXJc4YH8LQTBuHben4e3iABxOY.<init>:(Lorg/telegram/ui/ChatActivity;)V
        //   866: invokevirtual   org/telegram/ui/PollCreateActivity.setDelegate:(Lorg/telegram/ui/PollCreateActivity$PollCreateActivityDelegate;)V
        //   869: aload_0        
        //   870: aload           5
        //   872: invokevirtual   org/telegram/ui/ActionBar/BaseFragment.presentFragment:(Lorg/telegram/ui/ActionBar/BaseFragment;)Z
        //   875: pop            
        //   876: return         
        //   877: astore          5
        //   879: goto            208
        //   882: astore          5
        //   884: goto            373
        //   887: astore          5
        //   889: goto            610
        //    Exceptions:
        //  Try           Handler
        //  Start  End    Start  End    Type                 
        //  -----  -----  -----  -----  ---------------------
        //  52     70     154    164    Ljava/lang/Exception;
        //  75     118    154    164    Ljava/lang/Exception;
        //  121    135    154    164    Ljava/lang/Exception;
        //  135    144    154    164    Ljava/lang/Exception;
        //  144    151    154    164    Ljava/lang/Exception;
        //  190    208    877    882    Ljava/lang/Throwable;
        //  354    373    882    887    Ljava/lang/Throwable;
        //  374    392    496    506    Ljava/lang/Exception;
        //  397    440    496    506    Ljava/lang/Exception;
        //  443    465    496    506    Ljava/lang/Exception;
        //  465    486    496    506    Ljava/lang/Exception;
        //  486    493    496    506    Ljava/lang/Exception;
        //  592    610    887    892    Ljava/lang/Throwable;
        // 
        // The error that occurred was:
        // 
        // java.lang.IndexOutOfBoundsException: Index 421 out-of-bounds for length 421
        //     at java.base/jdk.internal.util.Preconditions.outOfBounds(Preconditions.java:64)
        //     at java.base/jdk.internal.util.Preconditions.outOfBoundsCheckIndex(Preconditions.java:70)
        //     at java.base/jdk.internal.util.Preconditions.checkIndex(Preconditions.java:248)
        //     at java.base/java.util.Objects.checkIndex(Objects.java:372)
        //     at java.base/java.util.ArrayList.get(ArrayList.java:439)
        //     at com.strobel.decompiler.ast.AstBuilder.convertToAst(AstBuilder.java:3321)
        //     at com.strobel.decompiler.ast.AstBuilder.build(AstBuilder.java:113)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:211)
        //     at com.strobel.decompiler.languages.java.ast.AstMethodBodyBuilder.createMethodBody(AstMethodBodyBuilder.java:99)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethodBody(AstBuilder.java:782)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createMethod(AstBuilder.java:675)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addTypeMembers(AstBuilder.java:552)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeCore(AstBuilder.java:519)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createTypeNoCache(AstBuilder.java:161)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.createType(AstBuilder.java:150)
        //     at com.strobel.decompiler.languages.java.ast.AstBuilder.addType(AstBuilder.java:125)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.buildAst(JavaLanguage.java:71)
        //     at com.strobel.decompiler.languages.java.JavaLanguage.decompileType(JavaLanguage.java:59)
        //     at com.strobel.decompiler.DecompilerDriver.decompileType(DecompilerDriver.java:330)
        //     at com.strobel.decompiler.DecompilerDriver.decompileJar(DecompilerDriver.java:251)
        //     at com.strobel.decompiler.DecompilerDriver.main(DecompilerDriver.java:126)
        // 
        throw new IllegalStateException("An error occurred while decompiling this method.");
    }
    
    private void processSelectedOption(int i) {
        if (this.selectedObject == null) {
            return;
        }
        if (this.getParentActivity() == null) {
            return;
        }
        final String s = "";
        final int n = 3;
        boolean b = true;
        final int n2 = 0;
        final int n3 = 0;
        MessageObject selectedObject;
        AlertDialog.Builder builder;
        AlertDialog[] array;
        TLRPC.TL_channels_exportMessageLink tl_channels_exportMessageLink;
        DataQuery instance;
        MessageObject selectedObject2;
        DataQuery instance2;
        MessageObject selectedObject3;
        TLRPC.User currentUser;
        StringBuilder sb;
        Intent intent;
        Bundle bundle;
        AlertDialog.Builder builder2;
        int id;
        AlertDialog.Builder builder3;
        boolean[] array2 = null;
        TLRPC.Chat currentChat;
        FrameLayout view;
        CheckBoxCell checkBoxCell;
        int dp;
        TLRPC.Document document;
        String s2;
        String attachPath;
        String s3;
        String string = null;
        Activity parentActivity;
        String mime_type;
        Activity parentActivity2;
        TLRPC.InputStickerSet inputStickerSet;
        TLRPC.Chat currentChat2;
        Object chatActivityEnterView = null;
        String attachPath2;
        String pathname;
        String string2 = null;
        String attachPath3;
        String pathname2;
        String string3 = null;
        Intent intent2 = null;
        File file;
        GridLayoutManagerFixed chatLayoutManager;
        File file2;
        Theme.ThemeInfo applyThemeFile;
        AlertDialog.Builder builder4;
        File file3;
        Bundle bundle2;
        DialogsActivity dialogsActivity;
        RecyclerListView.Holder holder;
        File pathToMessage;
        AlertDialog.Builder builder5;
        Block_57_Outer:Block_65_Outer:Label_2763_Outer:Label_2586_Outer:
        while (true) {
            Label_2754: {
                switch (i) {
                    default: {
                        break Label_2852;
                    }
                    case 26: {
                        selectedObject = this.selectedObject;
                        builder = new AlertDialog.Builder((Context)this.getParentActivity());
                        builder.setTitle(LocaleController.getString("StopPollAlertTitle", 2131560830));
                        builder.setMessage(LocaleController.getString("StopPollAlertText", 2131560829));
                        builder.setPositiveButton(LocaleController.getString("Stop", 2131560820), (DialogInterface$OnClickListener)new _$$Lambda$ChatActivity$Tr_7Iy8c3EReHr8wdqnTYAGvNzs(this, selectedObject));
                        builder.setNegativeButton(LocaleController.getString("Cancel", 2131558891), null);
                        this.showDialog(builder.create());
                        break Label_2852;
                    }
                    case 25: {
                        array = new AlertDialog[] { new AlertDialog((Context)this.getParentActivity(), 3) };
                        i = SendMessagesHelper.getInstance(super.currentAccount).sendVote(this.selectedObject, null, new _$$Lambda$ChatActivity$U5tUhQH3wNylNCt20uIdE_5vUKg(array));
                        if (i != 0) {
                            AndroidUtilities.runOnUIThread(new _$$Lambda$ChatActivity$w4cBn7eVI_jA_9l5l0qJf_RFppg(this, array, i), 500L);
                            break Label_2852;
                        }
                        break Label_2852;
                    }
                    case 24: {
                        if (this.selectedObject.isEditing() || (this.selectedObject.isSending() && this.selectedObjectGroup == null)) {
                            SendMessagesHelper.getInstance(super.currentAccount).cancelSendingMessage(this.selectedObject);
                            break Label_2852;
                        }
                        if (this.selectedObject.isSending() && this.selectedObjectGroup != null) {
                            for (i = n3; i < this.selectedObjectGroup.messages.size(); ++i) {
                                SendMessagesHelper.getInstance(super.currentAccount).cancelSendingMessage(new ArrayList<MessageObject>(this.selectedObjectGroup.messages));
                            }
                            break Label_2852;
                        }
                        break Label_2852;
                    }
                    case 23: {
                        AlertsCreator.createReportAlert((Context)this.getParentActivity(), this.dialog_id, this.selectedObject.getId(), this);
                        break Label_2852;
                    }
                    case 22: {
                        tl_channels_exportMessageLink = new TLRPC.TL_channels_exportMessageLink();
                        tl_channels_exportMessageLink.id = this.selectedObject.getId();
                        tl_channels_exportMessageLink.channel = MessagesController.getInputChannel(this.currentChat);
                        ConnectionsManager.getInstance(super.currentAccount).sendRequest(tl_channels_exportMessageLink, (RequestDelegate)_$$Lambda$ChatActivity$1VidRY4qKSsVbsBnftG46vcEx_4.INSTANCE);
                        break Label_2852;
                    }
                    case 21: {
                        instance = DataQuery.getInstance(super.currentAccount);
                        selectedObject2 = this.selectedObject;
                        instance.addRecentSticker(2, selectedObject2, selectedObject2.getDocument(), (int)(System.currentTimeMillis() / 1000L), true);
                        break Label_2852;
                    }
                    case 20: {
                        instance2 = DataQuery.getInstance(super.currentAccount);
                        selectedObject3 = this.selectedObject;
                        instance2.addRecentSticker(2, selectedObject3, selectedObject3.getDocument(), (int)(System.currentTimeMillis() / 1000L), false);
                        break Label_2852;
                    }
                    case 19: {
                        VoIPHelper.showRateAlert((Context)this.getParentActivity(), (TLRPC.TL_messageActionPhoneCall)this.selectedObject.messageOwner.action);
                        break Label_2852;
                    }
                    case 18: {
                        currentUser = this.currentUser;
                        if (currentUser != null) {
                            VoIPHelper.startCall(currentUser, this.getParentActivity(), MessagesController.getInstance(super.currentAccount).getUserFull(this.currentUser.id));
                            break Label_2852;
                        }
                        break Label_2852;
                    }
                    case 17: {
                        try {
                            sb = new StringBuilder();
                            sb.append("tel:");
                            sb.append(this.selectedObject.messageOwner.media.phone_number);
                            intent = new Intent("android.intent.action.DIAL", Uri.parse(sb.toString()));
                            intent.addFlags(268435456);
                            this.getParentActivity().startActivityForResult(intent, 500);
                            break Label_2852;
                        }
                        catch (Exception ex) {
                            FileLog.e(ex);
                            break Label_2852;
                        }
                        break Label_2852;
                    }
                    case 16: {
                        AndroidUtilities.addToClipboard(this.selectedObject.messageOwner.media.phone_number);
                        break Label_2852;
                    }
                    case 15: {
                        bundle = new Bundle();
                        bundle.putInt("user_id", this.selectedObject.messageOwner.media.user_id);
                        bundle.putString("phone", this.selectedObject.messageOwner.media.phone_number);
                        bundle.putBoolean("addContact", true);
                        this.presentFragment(new ContactAddActivity(bundle));
                        break Label_2852;
                    }
                    case 14: {
                        builder2 = new AlertDialog.Builder((Context)this.getParentActivity());
                        builder2.setTitle(LocaleController.getString("UnpinMessageAlertTitle", 2131560944));
                        builder2.setMessage(LocaleController.getString("UnpinMessageAlert", 2131560943));
                        builder2.setPositiveButton(LocaleController.getString("OK", 2131560097), (DialogInterface$OnClickListener)new _$$Lambda$ChatActivity$aXplLEy4nNbY_nnfg_F29323SEg(this));
                        builder2.setNegativeButton(LocaleController.getString("Cancel", 2131558891), null);
                        this.showDialog(builder2.create());
                        break Label_2852;
                    }
                    case 13: {
                        id = this.selectedObject.getId();
                        builder3 = new AlertDialog.Builder((Context)this.getParentActivity());
                        builder3.setTitle(LocaleController.getString("PinMessageAlertTitle", 2131560445));
                        Label_1255: {
                            if (this.currentUser != null) {
                                builder3.setMessage(LocaleController.getString("PinMessageAlertChat", 2131560444));
                                array2 = new boolean[] { false };
                            }
                            else {
                                if (!ChatObject.isChannel(this.currentChat) || !this.currentChat.megagroup) {
                                    currentChat = this.currentChat;
                                    if (currentChat == null || ChatObject.isChannel(currentChat)) {
                                        builder3.setMessage(LocaleController.getString("PinMessageAlertChannel", 2131560443));
                                        array2 = new boolean[] { false };
                                        break Label_1255;
                                    }
                                }
                                builder3.setMessage(LocaleController.getString("PinMessageAlert", 2131560442));
                                array2 = new boolean[] { true };
                                view = new FrameLayout((Context)this.getParentActivity());
                                checkBoxCell = new CheckBoxCell((Context)this.getParentActivity(), 1);
                                checkBoxCell.setBackgroundDrawable(Theme.getSelectorDrawable(false));
                                checkBoxCell.setText(LocaleController.getString("PinNotify", 2131560446), "", true, false);
                                if (LocaleController.isRTL) {
                                    i = AndroidUtilities.dp(8.0f);
                                }
                                else {
                                    i = 0;
                                }
                                if (LocaleController.isRTL) {
                                    dp = 0;
                                }
                                else {
                                    dp = AndroidUtilities.dp(8.0f);
                                }
                                checkBoxCell.setPadding(i, 0, dp, 0);
                                view.addView((View)checkBoxCell, (ViewGroup$LayoutParams)LayoutHelper.createFrame(-1, 48.0f, 51, 8.0f, 0.0f, 8.0f, 0.0f));
                                checkBoxCell.setOnClickListener((View$OnClickListener)new _$$Lambda$ChatActivity$2_dMuEnyKRHzIQ_s63bwz1PvMDI(array2));
                                builder3.setView((View)view);
                            }
                        }
                        builder3.setPositiveButton(LocaleController.getString("OK", 2131560097), (DialogInterface$OnClickListener)new _$$Lambda$ChatActivity$LW75pIpHHJP0gvpPWzQnAnCQJXM(this, id, array2));
                        builder3.setNegativeButton(LocaleController.getString("Cancel", 2131558891), null);
                        this.showDialog(builder3.create());
                        break Label_2852;
                    }
                    case 12: {
                        this.startEditingMessageObject(this.selectedObject);
                        this.selectedObject = null;
                        this.selectedObjectGroup = null;
                        break Label_2852;
                    }
                    case 11: {
                        document = this.selectedObject.getDocument();
                        MessagesController.getInstance(super.currentAccount).saveGif(this.selectedObject, document);
                        this.showGifHint();
                        this.chatActivityEnterView.addRecentGif(document);
                        break Label_2852;
                    }
                    case 10: {
                        if (Build$VERSION.SDK_INT >= 23 && this.getParentActivity().checkSelfPermission("android.permission.WRITE_EXTERNAL_STORAGE") != 0) {
                            this.getParentActivity().requestPermissions(new String[] { "android.permission.WRITE_EXTERNAL_STORAGE" }, 4);
                            this.selectedObject = null;
                            this.selectedObjectGroup = null;
                            return;
                        }
                        if (TextUtils.isEmpty((CharSequence)(s2 = FileLoader.getDocumentFileName(this.selectedObject.getDocument())))) {
                            s2 = this.selectedObject.getFileName();
                        }
                        attachPath = this.selectedObject.messageOwner.attachPath;
                        if ((s3 = attachPath) != null) {
                            s3 = attachPath;
                            if (attachPath.length() > 0) {
                                s3 = attachPath;
                                if (!new File(attachPath).exists()) {
                                    s3 = null;
                                }
                            }
                        }
                        Label_1543: {
                            if (s3 != null) {
                                string = s3;
                                if (s3.length() != 0) {
                                    break Label_1543;
                                }
                            }
                            string = FileLoader.getPathToMessage(this.selectedObject.messageOwner).toString();
                        }
                        parentActivity = this.getParentActivity();
                        if (this.selectedObject.isMusic()) {
                            i = n;
                        }
                        else {
                            i = 2;
                        }
                        mime_type = s;
                        if (this.selectedObject.getDocument() != null) {
                            mime_type = this.selectedObject.getDocument().mime_type;
                        }
                        MediaController.saveFile(string, (Context)parentActivity, i, s2, mime_type);
                        break Label_2852;
                    }
                    case 9: {
                        parentActivity2 = this.getParentActivity();
                        inputStickerSet = this.selectedObject.getInputStickerSet();
                        Label_1662: {
                            if (this.bottomOverlayChat.getVisibility() != 0) {
                                currentChat2 = this.currentChat;
                                if (currentChat2 == null || ChatObject.canSendStickers(currentChat2)) {
                                    chatActivityEnterView = this.chatActivityEnterView;
                                    break Label_1662;
                                }
                            }
                            chatActivityEnterView = null;
                        }
                        this.showDialog(new StickersAlert((Context)parentActivity2, this, inputStickerSet, null, (StickersAlert.StickersAlertDelegate)chatActivityEnterView));
                        break Label_2852;
                    }
                    case 8: {
                        this.showFieldPanelForReply(this.selectedObject);
                        break Label_2852;
                    }
                    case 7: {
                        pathname = (attachPath2 = this.selectedObject.messageOwner.attachPath);
                        if (pathname != null) {
                            attachPath2 = pathname;
                            if (pathname.length() > 0) {
                                attachPath2 = pathname;
                                if (!new File(pathname).exists()) {
                                    attachPath2 = null;
                                }
                            }
                        }
                        Label_1783: {
                            if (attachPath2 != null) {
                                string2 = attachPath2;
                                if (attachPath2.length() != 0) {
                                    break Label_1783;
                                }
                            }
                            string2 = FileLoader.getPathToMessage(this.selectedObject.messageOwner).toString();
                        }
                        if (Build$VERSION.SDK_INT >= 23 && this.getParentActivity().checkSelfPermission("android.permission.WRITE_EXTERNAL_STORAGE") != 0) {
                            this.getParentActivity().requestPermissions(new String[] { "android.permission.WRITE_EXTERNAL_STORAGE" }, 4);
                            this.selectedObject = null;
                            this.selectedObjectGroup = null;
                            return;
                        }
                        MediaController.saveFile(string2, (Context)this.getParentActivity(), 0, null, null);
                        break Label_2852;
                    }
                    case 6: {
                        pathname2 = (attachPath3 = this.selectedObject.messageOwner.attachPath);
                        if (pathname2 != null) {
                            attachPath3 = pathname2;
                            if (pathname2.length() > 0) {
                                attachPath3 = pathname2;
                                if (!new File(pathname2).exists()) {
                                    attachPath3 = null;
                                }
                            }
                        }
                        Label_1935: {
                            if (attachPath3 != null) {
                                string3 = attachPath3;
                                if (attachPath3.length() != 0) {
                                    break Label_1935;
                                }
                            }
                            string3 = FileLoader.getPathToMessage(this.selectedObject.messageOwner).toString();
                        }
                        intent2 = new Intent("android.intent.action.SEND");
                        intent2.setType(this.selectedObject.getDocument().mime_type);
                        file = new File(string3);
                        if (Build$VERSION.SDK_INT >= 24) {
                            try {
                                intent2.putExtra("android.intent.extra.STREAM", (Parcelable)FileProvider.getUriForFile((Context)this.getParentActivity(), "org.telegram.messenger.provider", file));
                                intent2.setFlags(1);
                            }
                            catch (Exception ex2) {
                                intent2.putExtra("android.intent.extra.STREAM", (Parcelable)Uri.fromFile(file));
                            }
                            break;
                        }
                        intent2.putExtra("android.intent.extra.STREAM", (Parcelable)Uri.fromFile(file));
                        break;
                    }
                    case 5: {
                        break Label_2754;
                    }
                    case 4: {
                        break Label_2754;
                    }
                    case 3: {
                        break Label_2754;
                    }
                    case 2: {
                        break Label_2754;
                    }
                    case 1: {
                        break Label_2754;
                    }
                    case 0: {
                        break Label_2754;
                    }
                }
                try {
                    this.getParentActivity().startActivityForResult(Intent.createChooser(intent2, (CharSequence)LocaleController.getString("ShareFile", 2131560748)), 500);
                    this.selectedObject = null;
                    this.selectedObjectGroup = null;
                    return;
                    // iftrue(Label_2267:, i == 0)
                    // iftrue(Label_2272:, chatLayoutManager == null)
                    // iftrue(Label_2311:, applyThemeFile == null)
                    // iftrue(Label_2406:, !file2.getName().toLowerCase().endsWith("attheme"))
                    // iftrue(Label_2814:, i >= this.selectedObjectGroup.messages.size())
                    // iftrue(Label_2852:, file2 == null)
                    // iftrue(Label_2119:, TextUtils.isEmpty((CharSequence)this.selectedObject.messageOwner.attachPath))
                    // iftrue(Label_2159:, file3 != null)
                    // iftrue(Label_2852:, !b)
                    // iftrue(Label_2334:, this.getParentActivity() != null)
                    // iftrue(Label_2436:, !LocaleController.getInstance().applyLanguageFile(file2, super.currentAccount))
                    // iftrue(Label_2808:, SendMessagesHelper.getInstance(super.currentAccount).retrySendMessage((MessageObject)this.selectedObjectGroup.messages.get(i), false))
                    // iftrue(Label_2826:, this.selectedObjectGroup == null)
                    // iftrue(Label_2259:, holder == null)
                    // iftrue(Label_2576:, Build$VERSION.SDK_INT < 23 || this.getParentActivity().checkSelfPermission("android.permission.WRITE_EXTERNAL_STORAGE") == 0)
                    // iftrue(Label_2159:, !pathToMessage.exists())
                    // iftrue(Label_2454:, this.getParentActivity() != null)
                    // iftrue(Label_2739:, this.getParentActivity() != null)
                    // iftrue(Label_2119:, !file3.exists())
                    // iftrue(Label_2852:, !SendMessagesHelper.getInstance(super.currentAccount).retrySendMessage(this.selectedObject, false))
                    // iftrue(Label_2624:, this.selectedObjectGroup == null)
                Label_2586:
                    while (true) {
                        Label_2763:Block_58_Outer:
                        while (true) {
                            Label_2808: {
                                while (true) {
                                    Label_2159_Outer:Block_44_Outer:
                                    while (true) {
                                        Block_55_Outer:Block_60_Outer:
                                        while (true) {
                                            Block_43: {
                                                while (true) {
                                                    Block_52: {
                                                        Block_54: {
                                                            Block_64: {
                                                                Block_53: {
                                                                    while (true) {
                                                                    Block_45:
                                                                        while (true) {
                                                                            Block_49_Outer:Label_2272_Outer:Block_51_Outer:
                                                                            while (true) {
                                                                                this.getParentActivity().requestPermissions(new String[] { "android.permission.WRITE_EXTERNAL_STORAGE" }, 4);
                                                                                this.selectedObject = null;
                                                                                this.selectedObjectGroup = null;
                                                                                return;
                                                                                while (true) {
                                                                                    Block_50: {
                                                                                        while (true) {
                                                                                            while (true) {
                                                                                                Block_62: {
                                                                                                Block_47_Outer:
                                                                                                    while (true) {
                                                                                                        while (true) {
                                                                                                            while (true) {
                                                                                                                while (true) {
                                                                                                                    i = chatLayoutManager.findFirstVisibleItemPosition();
                                                                                                                    break Block_50;
                                                                                                                    this.updateVisibleRows();
                                                                                                                    this.moveScrollToLastMessage();
                                                                                                                    continue Block_57_Outer;
                                                                                                                    chatLayoutManager = this.chatLayoutManager;
                                                                                                                    continue Block_65_Outer;
                                                                                                                }
                                                                                                                applyThemeFile = Theme.applyThemeFile(file2, this.selectedObject.getDocumentName(), true);
                                                                                                                break Block_52;
                                                                                                                Label_2334: {
                                                                                                                    builder4 = new AlertDialog.Builder((Context)this.getParentActivity());
                                                                                                                }
                                                                                                                builder4.setTitle(LocaleController.getString("AppName", 2131558635));
                                                                                                                builder4.setMessage(LocaleController.getString("IncorrectTheme", 2131559664));
                                                                                                                builder4.setPositiveButton(LocaleController.getString("OK", 2131560097), null);
                                                                                                                this.showDialog(builder4.create());
                                                                                                                continue Block_57_Outer;
                                                                                                                continue Label_2272_Outer;
                                                                                                            }
                                                                                                            break Block_62;
                                                                                                            Label_2259: {
                                                                                                                this.scrollToPositionOnRecreate = -1;
                                                                                                            }
                                                                                                            continue Block_47_Outer;
                                                                                                            i = 0;
                                                                                                            continue Label_2763;
                                                                                                            continue Label_2763_Outer;
                                                                                                        }
                                                                                                        Label_2267: {
                                                                                                            this.scrollToPositionOnRecreate = -1;
                                                                                                        }
                                                                                                        continue Block_47_Outer;
                                                                                                        break Block_43;
                                                                                                        file2 = file3;
                                                                                                        break Block_45;
                                                                                                        this.forwardingMessage = this.selectedObject;
                                                                                                        this.forwardingMessageGroup = this.selectedObjectGroup;
                                                                                                        bundle2 = new Bundle();
                                                                                                        bundle2.putBoolean("onlySelect", true);
                                                                                                        bundle2.putInt("dialogsType", 3);
                                                                                                        dialogsActivity = new DialogsActivity(bundle2);
                                                                                                        dialogsActivity.setDelegate((DialogsActivity.DialogsActivityDelegate)this);
                                                                                                        this.presentFragment(dialogsActivity);
                                                                                                        continue Block_57_Outer;
                                                                                                        Label_2814:
                                                                                                        break Block_64;
                                                                                                        AndroidUtilities.addToClipboard(this.getMessageContent(this.selectedObject, 0, false));
                                                                                                        continue Block_57_Outer;
                                                                                                        Label_2739:
                                                                                                        this.createDeleteMessagesAlert(this.selectedObject, this.selectedObjectGroup);
                                                                                                        continue Block_57_Outer;
                                                                                                        this.scrollToOffsetOnRecreate = this.chatListView.getMeasuredHeight() - holder.itemView.getBottom() - this.chatListView.getPaddingBottom();
                                                                                                        continue Block_47_Outer;
                                                                                                    }
                                                                                                    Label_2311: {
                                                                                                        this.scrollToPositionOnRecreate = -1;
                                                                                                    }
                                                                                                    break Block_53;
                                                                                                    Label_2119:
                                                                                                    file3 = null;
                                                                                                    continue Block_51_Outer;
                                                                                                    Label_2406:
                                                                                                    break Block_54;
                                                                                                }
                                                                                                break Block_49_Outer;
                                                                                                continue Block_51_Outer;
                                                                                            }
                                                                                            Label_2624: {
                                                                                                this.saveMessageToGallery(this.selectedObject);
                                                                                            }
                                                                                            continue Block_57_Outer;
                                                                                            continue Label_2159_Outer;
                                                                                        }
                                                                                    }
                                                                                    this.scrollToPositionOnRecreate = i;
                                                                                    holder = (RecyclerListView.Holder)this.chatListView.findViewHolderForAdapterPosition(this.scrollToPositionOnRecreate);
                                                                                    continue Block_44_Outer;
                                                                                }
                                                                                continue Block_49_Outer;
                                                                            }
                                                                            b = false;
                                                                            break Label_2808;
                                                                            file2 = pathToMessage;
                                                                            continue Block_44_Outer;
                                                                        }
                                                                        pathToMessage = FileLoader.getPathToMessage(this.selectedObject.messageOwner);
                                                                        file2 = file3;
                                                                        continue Block_55_Outer;
                                                                    }
                                                                    while (true) {
                                                                        this.selectedObject = null;
                                                                        this.selectedObjectGroup = null;
                                                                        return;
                                                                        this.selectedObject = null;
                                                                        this.selectedObjectGroup = null;
                                                                        return;
                                                                        Label_2436: {
                                                                            continue Block_60_Outer;
                                                                        }
                                                                    }
                                                                }
                                                                this.selectedObject = null;
                                                                this.selectedObjectGroup = null;
                                                                return;
                                                            }
                                                            this.moveScrollToLastMessage();
                                                            continue Block_57_Outer;
                                                        }
                                                        this.presentFragment(new LanguageSelectActivity());
                                                        continue Block_57_Outer;
                                                        i = n2;
                                                        break Label_2586;
                                                    }
                                                    this.presentFragment(new ThemePreviewActivity(file2, applyThemeFile));
                                                    continue Block_57_Outer;
                                                    continue Block_58_Outer;
                                                }
                                            }
                                            file3 = new File(this.selectedObject.messageOwner.attachPath);
                                            continue Block_58_Outer;
                                        }
                                        Label_2826: {
                                            continue Label_2763_Outer;
                                        }
                                    }
                                    Label_2576: {
                                        continue Label_2586_Outer;
                                    }
                                }
                            }
                            ++i;
                            continue Label_2763;
                        }
                        Block_59: {
                            break Block_59;
                            Label_2454: {
                                builder5 = new AlertDialog.Builder((Context)this.getParentActivity());
                            }
                            builder5.setTitle(LocaleController.getString("AppName", 2131558635));
                            builder5.setMessage(LocaleController.getString("IncorrectLocalization", 2131559663));
                            builder5.setPositiveButton(LocaleController.getString("OK", 2131560097), null);
                            this.showDialog(builder5.create());
                            continue Block_57_Outer;
                        }
                        this.saveMessageToGallery(this.selectedObjectGroup.messages.get(i));
                        ++i;
                        continue Label_2586;
                    }
                }
                // iftrue(Label_2852:, i >= this.selectedObjectGroup.messages.size())
                catch (Throwable t) {
                    continue;
                }
            }
            break;
        }
    }
    
    private void removeMessageObject(final MessageObject o) {
        final int index = this.messages.indexOf(o);
        if (index == -1) {
            return;
        }
        this.messages.remove(index);
        final ChatActivityAdapter chatAdapter = this.chatAdapter;
        if (chatAdapter != null) {
            chatAdapter.notifyItemRemoved(chatAdapter.messagesStartRow + index);
        }
    }
    
    private void removeSelectedMessageHighlight() {
        final Runnable unselectRunnable = this.unselectRunnable;
        if (unselectRunnable != null) {
            AndroidUtilities.cancelRunOnUIThread(unselectRunnable);
            this.unselectRunnable = null;
        }
        this.highlightMessageId = Integer.MAX_VALUE;
    }
    
    private void removeUnreadPlane(final boolean b) {
        if (this.unreadMessageObject != null) {
            if (b) {
                final boolean[] forwardEndReached = this.forwardEndReached;
                forwardEndReached[0] = (forwardEndReached[1] = true);
                this.first_unread_id = 0;
                this.last_message_id = 0;
            }
            this.createUnreadMessageAfterId = 0;
            this.createUnreadMessageAfterIdLoading = false;
            this.removeMessageObject(this.unreadMessageObject);
            this.unreadMessageObject = null;
        }
    }
    
    private void saveMessageToGallery(final MessageObject messageObject) {
        String attachPath;
        final String pathname = attachPath = messageObject.messageOwner.attachPath;
        if (!TextUtils.isEmpty((CharSequence)pathname)) {
            attachPath = pathname;
            if (!new File(pathname).exists()) {
                attachPath = null;
            }
        }
        String string = attachPath;
        if (TextUtils.isEmpty((CharSequence)attachPath)) {
            string = FileLoader.getPathToMessage(messageObject.messageOwner).toString();
        }
        MediaController.saveFile(string, (Context)this.getParentActivity(), messageObject.isVideo() ? 1 : 0, null, null);
    }
    
    private void scrollToLastMessage(final boolean b) {
        if (this.forwardEndReached[0] && this.first_unread_id == 0 && this.startLoadFromMessageId == 0) {
            if (b && this.chatLayoutManager.findFirstCompletelyVisibleItemPosition() == 0) {
                this.showPagedownButton(false, true);
                this.removeSelectedMessageHighlight();
                this.updateVisibleRows();
            }
            else {
                this.chatLayoutManager.scrollToPositionWithOffset(0, 0);
            }
        }
        else {
            this.clearChatData();
            this.waitingForLoad.add(this.lastLoadIndex);
            MessagesController.getInstance(super.currentAccount).loadMessages(this.dialog_id, 30, 0, 0, true, 0, super.classGuid, 0, 0, ChatObject.isChannel(this.currentChat), this.lastLoadIndex++);
        }
    }
    
    private void searchLinks(final CharSequence charSequence, final boolean b) {
        if (this.currentEncryptedChat != null && (MessagesController.getInstance(super.currentAccount).secretWebpagePreview == 0 || AndroidUtilities.getPeerLayerVersion(this.currentEncryptedChat.layer) < 46)) {
            return;
        }
        if (b) {
            final TLRPC.WebPage foundWebPage = this.foundWebPage;
            if (foundWebPage != null) {
                final String url = foundWebPage.url;
                if (url != null) {
                    final int index = TextUtils.indexOf(charSequence, (CharSequence)url);
                    final int n = 1;
                    boolean b2 = true;
                    int n2 = 0;
                    int n3 = 0;
                    int char2 = 0;
                    Label_0280: {
                        if (index == -1) {
                            final String display_url = this.foundWebPage.display_url;
                            if (display_url != null) {
                                final int index2 = TextUtils.indexOf(charSequence, (CharSequence)display_url);
                                if (index2 == -1 || this.foundWebPage.display_url.length() + index2 != charSequence.length()) {
                                    b2 = false;
                                }
                                n2 = index2;
                                n3 = (b2 ? 1 : 0);
                                if (index2 != -1) {
                                    n2 = index2;
                                    if ((n3 = (b2 ? 1 : 0)) == 0) {
                                        final char char1 = charSequence.charAt(this.foundWebPage.display_url.length() + index2);
                                        n2 = index2;
                                        n3 = (b2 ? 1 : 0);
                                        char2 = char1;
                                        break Label_0280;
                                    }
                                }
                            }
                            else {
                                n3 = 0;
                                n2 = index;
                            }
                        }
                        else {
                            int n4;
                            if (this.foundWebPage.url.length() + index == charSequence.length()) {
                                n4 = n;
                            }
                            else {
                                n4 = 0;
                            }
                            n2 = index;
                            n3 = n4;
                            if (n4 == 0) {
                                char2 = charSequence.charAt(this.foundWebPage.url.length() + index);
                                n3 = n4;
                                n2 = index;
                                break Label_0280;
                            }
                        }
                        char2 = 0;
                    }
                    if (n2 != -1 && (n3 != 0 || char2 == 32 || char2 == 44 || char2 == 46 || char2 == 33 || char2 == 47)) {
                        return;
                    }
                }
                this.pendingLinkSearchString = null;
                this.foundUrls = null;
                this.showFieldPanelForWebPage(false, this.foundWebPage, false);
            }
        }
        Utilities.searchQueue.postRunnable(new _$$Lambda$ChatActivity$A6saBtiVC7KZVlD_BKI_DC5XR4I(this, charSequence, MessagesController.getInstance(super.currentAccount), b));
    }
    
    private void sendBotInlineResult(final TLRPC.BotInlineResult botInlineResult) {
        final int contextBotId = this.mentionsAdapter.getContextBotId();
        final HashMap<String, String> hashMap = new HashMap<String, String>();
        hashMap.put("id", botInlineResult.id);
        final StringBuilder sb = new StringBuilder();
        sb.append("");
        sb.append(botInlineResult.query_id);
        hashMap.put("query_id", sb.toString());
        final StringBuilder sb2 = new StringBuilder();
        sb2.append("");
        sb2.append(contextBotId);
        hashMap.put("bot", sb2.toString());
        hashMap.put("bot_name", this.mentionsAdapter.getContextBotName());
        SendMessagesHelper.prepareSendingBotContextResult(botInlineResult, hashMap, this.dialog_id, this.replyingMessageObject);
        this.chatActivityEnterView.setFieldText("");
        this.hideFieldPanel(false);
        DataQuery.getInstance(super.currentAccount).increaseInlineRaiting(contextBotId);
    }
    
    private boolean sendSecretMessageRead(final MessageObject messageObject) {
        if (messageObject != null && !messageObject.isOut() && messageObject.isSecretMedia()) {
            final TLRPC.Message messageOwner = messageObject.messageOwner;
            if (messageOwner.destroyTime == 0) {
                if (messageOwner.ttl > 0) {
                    if (this.currentEncryptedChat != null) {
                        final MessagesController instance = MessagesController.getInstance(super.currentAccount);
                        final long dialog_id = this.dialog_id;
                        final TLRPC.Message messageOwner2 = messageObject.messageOwner;
                        instance.markMessageAsRead(dialog_id, messageOwner2.random_id, messageOwner2.ttl);
                    }
                    else {
                        final MessagesController instance2 = MessagesController.getInstance(super.currentAccount);
                        final int id = messageObject.getId();
                        int id2;
                        if (ChatObject.isChannel(this.currentChat)) {
                            id2 = this.currentChat.id;
                        }
                        else {
                            id2 = 0;
                        }
                        instance2.markMessageAsRead(id, id2, null, messageObject.messageOwner.ttl, 0L);
                    }
                    final TLRPC.Message messageOwner3 = messageObject.messageOwner;
                    messageOwner3.destroyTime = messageOwner3.ttl + ConnectionsManager.getInstance(super.currentAccount).getCurrentTime();
                    return true;
                }
            }
        }
        return false;
    }
    
    private void sendUriAsDocument(final Uri uri) {
        if (uri == null) {
            return;
        }
        final String string = uri.toString();
        Uri parse = uri;
        if (string.contains("com.google.android.apps.photos.contentprovider")) {
            try {
                final String s = string.split("/1/")[1];
                final int index = s.indexOf("/ACTUAL");
                parse = uri;
                if (index != -1) {
                    parse = Uri.parse(URLDecoder.decode(s.substring(0, index), "UTF-8"));
                }
            }
            catch (Exception ex) {
                FileLog.e(ex);
                parse = uri;
            }
        }
        final String path = AndroidUtilities.getPath(parse);
        String copyFileToCache;
        String s2;
        if (path == null) {
            final String string2 = parse.toString();
            copyFileToCache = MediaController.copyFileToCache(parse, "file");
            s2 = string2;
        }
        else {
            s2 = path;
            copyFileToCache = path;
        }
        if (copyFileToCache == null) {
            this.showAttachmentError();
            return;
        }
        this.fillEditingMediaWithCaption(null, null);
        SendMessagesHelper.prepareSendingDocument(copyFileToCache, s2, null, null, null, this.dialog_id, this.replyingMessageObject, null, this.editingMessageObject);
        this.hideFieldPanel(false);
    }
    
    private void setCellSelectionBackground(final MessageObject messageObject, final ChatMessageCell chatMessageCell, int n, final boolean b) {
        final MessageObject.GroupedMessages validGroupedMessage = this.getValidGroupedMessage(messageObject);
        final boolean b2 = false;
        MessageObject.GroupedMessages groupedMessages = validGroupedMessage;
        Label_0084: {
            if (validGroupedMessage != null) {
                int i = 0;
                while (true) {
                    while (i < validGroupedMessage.messages.size()) {
                        if (this.selectedMessagesIds[n].indexOfKey(validGroupedMessage.messages.get(i).getId()) < 0) {
                            n = 1;
                            groupedMessages = validGroupedMessage;
                            if (n == 0) {
                                groupedMessages = null;
                            }
                            break Label_0084;
                        }
                        else {
                            ++i;
                        }
                    }
                    n = 0;
                    continue;
                }
            }
        }
        chatMessageCell.setDrawSelectionBackground(groupedMessages == null);
        boolean b3 = b2;
        if (groupedMessages == null) {
            b3 = true;
        }
        chatMessageCell.setChecked(true, b3, b);
    }
    
    private void setItemAnimationsEnabled(final boolean b) {
    }
    
    private void showAttachmentError() {
        if (this.getParentActivity() == null) {
            return;
        }
        Toast.makeText((Context)this.getParentActivity(), (CharSequence)LocaleController.getString("UnsupportedAttachment", 2131560946), 0).show();
    }
    
    private void showBottomOverlayProgress(final boolean b, final boolean b2) {
        if ((b && this.bottomOverlayProgress.getTag() != null) || (!b && this.bottomOverlayProgress.getTag() == null)) {
            return;
        }
        final AnimatorSet bottomOverlayAnimation = this.bottomOverlayAnimation;
        Object value = null;
        if (bottomOverlayAnimation != null) {
            bottomOverlayAnimation.cancel();
            this.bottomOverlayAnimation = null;
        }
        final RadialProgressView bottomOverlayProgress = this.bottomOverlayProgress;
        if (b) {
            value = 1;
        }
        bottomOverlayProgress.setTag(value);
        final int n = 4;
        final float n2 = 0.0f;
        final float n3 = 0.1f;
        if (b2) {
            this.bottomOverlayAnimation = new AnimatorSet();
            if (b) {
                this.bottomOverlayProgress.setVisibility(0);
                this.bottomOverlayAnimation.playTogether(new Animator[] { (Animator)ObjectAnimator.ofFloat((Object)this.bottomOverlayChatText, View.SCALE_X, new float[] { 0.1f }), (Animator)ObjectAnimator.ofFloat((Object)this.bottomOverlayChatText, View.SCALE_Y, new float[] { 0.1f }), (Animator)ObjectAnimator.ofFloat((Object)this.bottomOverlayChatText, View.ALPHA, new float[] { 0.0f }), (Animator)ObjectAnimator.ofFloat((Object)this.bottomOverlayChatText2, View.SCALE_X, new float[] { 0.1f }), (Animator)ObjectAnimator.ofFloat((Object)this.bottomOverlayChatText2, View.SCALE_Y, new float[] { 0.1f }), (Animator)ObjectAnimator.ofFloat((Object)this.bottomOverlayChatText2, View.ALPHA, new float[] { 0.0f }), (Animator)ObjectAnimator.ofFloat((Object)this.bottomOverlayProgress, View.SCALE_X, new float[] { 1.0f }), (Animator)ObjectAnimator.ofFloat((Object)this.bottomOverlayProgress, View.SCALE_Y, new float[] { 1.0f }), (Animator)ObjectAnimator.ofFloat((Object)this.bottomOverlayProgress, View.ALPHA, new float[] { 1.0f }) });
            }
            else {
                this.bottomOverlayChatText.setVisibility(0);
                this.bottomOverlayAnimation.playTogether(new Animator[] { (Animator)ObjectAnimator.ofFloat((Object)this.bottomOverlayProgress, View.SCALE_X, new float[] { 0.1f }), (Animator)ObjectAnimator.ofFloat((Object)this.bottomOverlayProgress, View.SCALE_Y, new float[] { 0.1f }), (Animator)ObjectAnimator.ofFloat((Object)this.bottomOverlayProgress, View.ALPHA, new float[] { 0.0f }), (Animator)ObjectAnimator.ofFloat((Object)this.bottomOverlayChatText, View.SCALE_X, new float[] { 1.0f }), (Animator)ObjectAnimator.ofFloat((Object)this.bottomOverlayChatText, View.SCALE_Y, new float[] { 1.0f }), (Animator)ObjectAnimator.ofFloat((Object)this.bottomOverlayChatText, View.ALPHA, new float[] { 1.0f }), (Animator)ObjectAnimator.ofFloat((Object)this.bottomOverlayChatText2, View.SCALE_X, new float[] { 1.0f }), (Animator)ObjectAnimator.ofFloat((Object)this.bottomOverlayChatText2, View.SCALE_Y, new float[] { 1.0f }), (Animator)ObjectAnimator.ofFloat((Object)this.bottomOverlayChatText2, View.ALPHA, new float[] { 1.0f }) });
            }
            this.bottomOverlayAnimation.addListener((Animator$AnimatorListener)new AnimatorListenerAdapter() {
                public void onAnimationCancel(final Animator obj) {
                    if (ChatActivity.this.bottomOverlayAnimation != null && ChatActivity.this.bottomOverlayAnimation.equals(obj)) {
                        ChatActivity.this.bottomOverlayAnimation = null;
                    }
                }
                
                public void onAnimationEnd(final Animator obj) {
                    if (ChatActivity.this.bottomOverlayAnimation != null && ChatActivity.this.bottomOverlayAnimation.equals(obj)) {
                        if (!b) {
                            ChatActivity.this.bottomOverlayProgress.setVisibility(4);
                        }
                        else {
                            ChatActivity.this.bottomOverlayChatText.setVisibility(4);
                        }
                    }
                }
            });
            this.bottomOverlayAnimation.setDuration(150L);
            this.bottomOverlayAnimation.start();
        }
        else {
            final RadialProgressView bottomOverlayProgress2 = this.bottomOverlayProgress;
            int visibility;
            if (b) {
                visibility = 0;
            }
            else {
                visibility = 4;
            }
            bottomOverlayProgress2.setVisibility(visibility);
            final RadialProgressView bottomOverlayProgress3 = this.bottomOverlayProgress;
            float scaleX;
            if (b) {
                scaleX = 1.0f;
            }
            else {
                scaleX = 0.1f;
            }
            bottomOverlayProgress3.setScaleX(scaleX);
            final RadialProgressView bottomOverlayProgress4 = this.bottomOverlayProgress;
            float scaleY;
            if (b) {
                scaleY = 1.0f;
            }
            else {
                scaleY = 0.1f;
            }
            bottomOverlayProgress4.setScaleY(scaleY);
            this.bottomOverlayProgress.setAlpha(1.0f);
            final TextView bottomOverlayChatText = this.bottomOverlayChatText;
            int visibility2;
            if (b) {
                visibility2 = n;
            }
            else {
                visibility2 = 0;
            }
            bottomOverlayChatText.setVisibility(visibility2);
            final TextView bottomOverlayChatText2 = this.bottomOverlayChatText;
            float scaleX2;
            if (b) {
                scaleX2 = 0.1f;
            }
            else {
                scaleX2 = 1.0f;
            }
            bottomOverlayChatText2.setScaleX(scaleX2);
            final TextView bottomOverlayChatText3 = this.bottomOverlayChatText;
            float scaleY2;
            if (b) {
                scaleY2 = 0.1f;
            }
            else {
                scaleY2 = 1.0f;
            }
            bottomOverlayChatText3.setScaleY(scaleY2);
            final TextView bottomOverlayChatText4 = this.bottomOverlayChatText;
            float alpha;
            if (b) {
                alpha = 0.0f;
            }
            else {
                alpha = 1.0f;
            }
            bottomOverlayChatText4.setAlpha(alpha);
            final UnreadCounterTextView bottomOverlayChatText5 = this.bottomOverlayChatText2;
            float scaleX3;
            if (b) {
                scaleX3 = 0.1f;
            }
            else {
                scaleX3 = 1.0f;
            }
            bottomOverlayChatText5.setScaleX(scaleX3);
            final UnreadCounterTextView bottomOverlayChatText6 = this.bottomOverlayChatText2;
            float scaleY3;
            if (b) {
                scaleY3 = n3;
            }
            else {
                scaleY3 = 1.0f;
            }
            bottomOverlayChatText6.setScaleY(scaleY3);
            final UnreadCounterTextView bottomOverlayChatText7 = this.bottomOverlayChatText2;
            float alpha2;
            if (b) {
                alpha2 = n2;
            }
            else {
                alpha2 = 1.0f;
            }
            bottomOverlayChatText7.setAlpha(alpha2);
        }
    }
    
    private void showFloatingDateView(final boolean b) {
        if (this.floatingDateView.getTag() == null) {
            final AnimatorSet floatingDateAnimation = this.floatingDateAnimation;
            if (floatingDateAnimation != null) {
                floatingDateAnimation.cancel();
            }
            this.floatingDateView.setTag((Object)1);
            (this.floatingDateAnimation = new AnimatorSet()).setDuration(150L);
            this.floatingDateAnimation.playTogether(new Animator[] { (Animator)ObjectAnimator.ofFloat((Object)this.floatingDateView, View.ALPHA, new float[] { 1.0f }) });
            this.floatingDateAnimation.addListener((Animator$AnimatorListener)new AnimatorListenerAdapter() {
                public void onAnimationEnd(final Animator animator) {
                    if (animator.equals(ChatActivity.this.floatingDateAnimation)) {
                        ChatActivity.this.floatingDateAnimation = null;
                    }
                }
            });
            this.floatingDateAnimation.start();
        }
        if (!b) {
            this.updateMessagesVisiblePart(false);
            this.hideDateDelay = 1000;
        }
    }
    
    private void showForwardHint(final ChatMessageCell chatMessageCell) {
        if (!this.scrollingChatListView && this.chatListView != null && this.getParentActivity() != null) {
            final View fragmentView = super.fragmentView;
            if (fragmentView != null) {
                if (this.forwardHintView == null) {
                    final SizeNotifierFrameLayout sizeNotifierFrameLayout = (SizeNotifierFrameLayout)fragmentView;
                    final int indexOfChild = sizeNotifierFrameLayout.indexOfChild((View)this.chatActivityEnterView);
                    if (indexOfChild == -1) {
                        return;
                    }
                    sizeNotifierFrameLayout.addView((View)(this.forwardHintView = new HintView((Context)this.getParentActivity(), 1)), indexOfChild + 1, (ViewGroup$LayoutParams)LayoutHelper.createFrame(-2, -2.0f, 51, 19.0f, 0.0f, 19.0f, 0.0f));
                    this.forwardHintView.setAlpha(0.0f);
                    this.forwardHintView.setVisibility(4);
                }
                this.forwardHintView.showForMessageCell(chatMessageCell, true);
            }
        }
    }
    
    private void showGifHint() {
        final SharedPreferences globalMainSettings = MessagesController.getGlobalMainSettings();
        if (globalMainSettings.getBoolean("gifhint", false)) {
            return;
        }
        globalMainSettings.edit().putBoolean("gifhint", true).commit();
        if (this.getParentActivity() != null) {
            final View fragmentView = super.fragmentView;
            if (fragmentView != null) {
                if (this.gifHintTextView == null) {
                    if (!this.allowContextBotPanelSecond) {
                        final ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
                        if (chatActivityEnterView != null) {
                            chatActivityEnterView.setOpenGifsTabFirst();
                        }
                        return;
                    }
                    final SizeNotifierFrameLayout sizeNotifierFrameLayout = (SizeNotifierFrameLayout)fragmentView;
                    int indexOfChild = sizeNotifierFrameLayout.indexOfChild((View)this.chatActivityEnterView);
                    if (indexOfChild == -1) {
                        return;
                    }
                    this.chatActivityEnterView.setOpenGifsTabFirst();
                    (this.emojiButtonRed = new View((Context)this.getParentActivity())).setBackgroundResource(2131165797);
                    final View emojiButtonRed = this.emojiButtonRed;
                    ++indexOfChild;
                    sizeNotifierFrameLayout.addView(emojiButtonRed, indexOfChild, (ViewGroup$LayoutParams)LayoutHelper.createFrame(10, 10.0f, 83, 30.0f, 0.0f, 0.0f, 27.0f));
                    (this.gifHintTextView = new TextView((Context)this.getParentActivity())).setBackgroundDrawable(Theme.createRoundRectDrawable(AndroidUtilities.dp(3.0f), Theme.getColor("chat_gifSaveHintBackground")));
                    this.gifHintTextView.setTextColor(Theme.getColor("chat_gifSaveHintText"));
                    this.gifHintTextView.setTextSize(1, 14.0f);
                    this.gifHintTextView.setPadding(AndroidUtilities.dp(8.0f), AndroidUtilities.dp(7.0f), AndroidUtilities.dp(8.0f), AndroidUtilities.dp(7.0f));
                    this.gifHintTextView.setText((CharSequence)LocaleController.getString("TapHereGifs", 2131560858));
                    this.gifHintTextView.setGravity(16);
                    sizeNotifierFrameLayout.addView((View)this.gifHintTextView, indexOfChild, (ViewGroup$LayoutParams)LayoutHelper.createFrame(-2, -2.0f, 83, 5.0f, 0.0f, 5.0f, 3.0f));
                    final AnimatorSet set = new AnimatorSet();
                    set.playTogether(new Animator[] { (Animator)ObjectAnimator.ofFloat((Object)this.gifHintTextView, View.ALPHA, new float[] { 0.0f, 1.0f }), (Animator)ObjectAnimator.ofFloat((Object)this.emojiButtonRed, View.ALPHA, new float[] { 0.0f, 1.0f }) });
                    set.addListener((Animator$AnimatorListener)new AnimatorListenerAdapter() {
                        public void onAnimationEnd(final Animator animator) {
                            AndroidUtilities.runOnUIThread(new _$$Lambda$ChatActivity$42$q_FtZ4mUBdWh5WQN98Sbu_ePbjs(this), 2000L);
                        }
                    });
                    set.setDuration(300L);
                    set.start();
                }
            }
        }
    }
    
    private void showMediaBannedHint() {
        if (this.getParentActivity() != null && this.currentChat != null && super.fragmentView != null) {
            final TextView mediaBanTooltip = this.mediaBanTooltip;
            if (mediaBanTooltip == null || mediaBanTooltip.getVisibility() != 0) {
                final SizeNotifierFrameLayout sizeNotifierFrameLayout = (SizeNotifierFrameLayout)super.fragmentView;
                final int indexOfChild = sizeNotifierFrameLayout.indexOfChild((View)this.chatActivityEnterView);
                if (indexOfChild == -1) {
                    return;
                }
                if (this.mediaBanTooltip == null) {
                    (this.mediaBanTooltip = new CorrectlyMeasuringTextView((Context)this.getParentActivity())).setBackgroundDrawable(Theme.createRoundRectDrawable(AndroidUtilities.dp(3.0f), Theme.getColor("chat_gifSaveHintBackground")));
                    this.mediaBanTooltip.setTextColor(Theme.getColor("chat_gifSaveHintText"));
                    this.mediaBanTooltip.setPadding(AndroidUtilities.dp(8.0f), AndroidUtilities.dp(7.0f), AndroidUtilities.dp(8.0f), AndroidUtilities.dp(7.0f));
                    this.mediaBanTooltip.setGravity(16);
                    this.mediaBanTooltip.setTextSize(1, 14.0f);
                    this.mediaBanTooltip.setVisibility(8);
                    sizeNotifierFrameLayout.addView((View)this.mediaBanTooltip, indexOfChild + 1, (ViewGroup$LayoutParams)LayoutHelper.createFrame(-2, -2.0f, 85, 30.0f, 0.0f, 5.0f, 3.0f));
                }
                if (ChatObject.isActionBannedByDefault(this.currentChat, 7)) {
                    this.mediaBanTooltip.setText((CharSequence)LocaleController.getString("GlobalAttachMediaRestricted", 2131559592));
                }
                else {
                    final TLRPC.TL_chatBannedRights banned_rights = this.currentChat.banned_rights;
                    if (banned_rights == null) {
                        return;
                    }
                    if (AndroidUtilities.isBannedForever(banned_rights)) {
                        this.mediaBanTooltip.setText((CharSequence)LocaleController.getString("AttachMediaRestrictedForever", 2131558725));
                    }
                    else {
                        this.mediaBanTooltip.setText((CharSequence)LocaleController.formatString("AttachMediaRestricted", 2131558724, LocaleController.formatDateForBan(this.currentChat.banned_rights.until_date)));
                    }
                }
                this.mediaBanTooltip.setVisibility(0);
                final AnimatorSet set = new AnimatorSet();
                set.playTogether(new Animator[] { (Animator)ObjectAnimator.ofFloat((Object)this.mediaBanTooltip, View.ALPHA, new float[] { 0.0f, 1.0f }) });
                set.addListener((Animator$AnimatorListener)new AnimatorListenerAdapter() {
                    public void onAnimationEnd(final Animator animator) {
                        AndroidUtilities.runOnUIThread(new _$$Lambda$ChatActivity$41$8fiwN1aRW9i7tMSud_cpL2PkIsM(this), 5000L);
                    }
                });
                set.setDuration(300L);
                set.start();
            }
        }
    }
    
    private void showMentionDownButton(final boolean b, final boolean b2) {
        final FrameLayout mentiondownButton = this.mentiondownButton;
        if (mentiondownButton == null) {
            return;
        }
        if (b) {
            if (mentiondownButton.getTag() == null) {
                final ObjectAnimator mentiondownButtonAnimation = this.mentiondownButtonAnimation;
                if (mentiondownButtonAnimation != null) {
                    mentiondownButtonAnimation.cancel();
                    this.mentiondownButtonAnimation = null;
                }
                if (b2) {
                    this.mentiondownButton.setVisibility(0);
                    this.mentiondownButton.setTag((Object)1);
                    if (this.pagedownButton.getVisibility() == 0) {
                        this.mentiondownButton.setTranslationY((float)(-AndroidUtilities.dp(72.0f)));
                        this.mentiondownButtonAnimation = ObjectAnimator.ofFloat((Object)this.mentiondownButton, View.ALPHA, new float[] { 0.0f, 1.0f }).setDuration(200L);
                    }
                    else {
                        if (this.mentiondownButton.getTranslationY() == 0.0f) {
                            this.mentiondownButton.setTranslationY((float)AndroidUtilities.dp(100.0f));
                        }
                        this.mentiondownButtonAnimation = ObjectAnimator.ofFloat((Object)this.mentiondownButton, View.TRANSLATION_Y, new float[] { 0.0f }).setDuration(200L);
                    }
                    this.mentiondownButtonAnimation.start();
                }
                else {
                    this.mentiondownButton.setVisibility(0);
                }
            }
        }
        else {
            this.returnToMessageId = 0;
            if (mentiondownButton.getTag() != null) {
                this.mentiondownButton.setTag((Object)null);
                final ObjectAnimator mentiondownButtonAnimation2 = this.mentiondownButtonAnimation;
                if (mentiondownButtonAnimation2 != null) {
                    mentiondownButtonAnimation2.cancel();
                    this.mentiondownButtonAnimation = null;
                }
                if (b2) {
                    if (this.pagedownButton.getVisibility() == 0) {
                        this.mentiondownButtonAnimation = ObjectAnimator.ofFloat((Object)this.mentiondownButton, View.ALPHA, new float[] { 1.0f, 0.0f }).setDuration(200L);
                    }
                    else {
                        this.mentiondownButtonAnimation = ObjectAnimator.ofFloat((Object)this.mentiondownButton, View.TRANSLATION_Y, new float[] { (float)AndroidUtilities.dp(100.0f) }).setDuration(200L);
                    }
                    this.mentiondownButtonAnimation.addListener((Animator$AnimatorListener)new AnimatorListenerAdapter() {
                        public void onAnimationEnd(final Animator animator) {
                            ChatActivity.this.mentiondownButtonCounter.setVisibility(4);
                            ChatActivity.this.mentiondownButton.setVisibility(4);
                        }
                    });
                    this.mentiondownButtonAnimation.start();
                }
                else {
                    this.mentiondownButton.setVisibility(4);
                }
            }
        }
    }
    
    private void showNoSoundHint() {
        if (!this.scrollingChatListView && !SharedConfig.noSoundHintShowed && this.chatListView != null && this.getParentActivity() != null && super.fragmentView != null) {
            final HintView noSoundHintView = this.noSoundHintView;
            if (noSoundHintView == null || noSoundHintView.getTag() == null) {
                final HintView noSoundHintView2 = this.noSoundHintView;
                int i = 0;
                if (noSoundHintView2 == null) {
                    final SizeNotifierFrameLayout sizeNotifierFrameLayout = (SizeNotifierFrameLayout)super.fragmentView;
                    final int indexOfChild = sizeNotifierFrameLayout.indexOfChild((View)this.chatActivityEnterView);
                    if (indexOfChild == -1) {
                        return;
                    }
                    sizeNotifierFrameLayout.addView((View)(this.noSoundHintView = new HintView((Context)this.getParentActivity(), 0)), indexOfChild + 1, (ViewGroup$LayoutParams)LayoutHelper.createFrame(-2, -2.0f, 51, 19.0f, 0.0f, 19.0f, 0.0f));
                    this.noSoundHintView.setAlpha(0.0f);
                    this.noSoundHintView.setVisibility(4);
                }
                while (i < this.chatListView.getChildCount()) {
                    final View child = this.chatListView.getChildAt(i);
                    if (child instanceof ChatMessageCell) {
                        final ChatMessageCell chatMessageCell = (ChatMessageCell)child;
                        final MessageObject messageObject = chatMessageCell.getMessageObject();
                        if (messageObject != null) {
                            if (messageObject.isVideo()) {
                                final AnimatedFileDrawable animation = chatMessageCell.getPhotoImage().getAnimation();
                                if (animation != null) {
                                    if (animation.getCurrentProgressMs() >= 3000) {
                                        if (this.noSoundHintView.showForMessageCell(chatMessageCell, true)) {
                                            SharedConfig.setNoSoundHintShowed(true);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    ++i;
                }
            }
        }
    }
    
    private void showPagedownButton(final boolean b, final boolean b2) {
        final FrameLayout pagedownButton = this.pagedownButton;
        if (pagedownButton == null) {
            return;
        }
        if (b) {
            this.pagedownButtonShowedByScroll = false;
            if (pagedownButton.getTag() == null) {
                final AnimatorSet pagedownButtonAnimation = this.pagedownButtonAnimation;
                if (pagedownButtonAnimation != null) {
                    pagedownButtonAnimation.cancel();
                    this.pagedownButtonAnimation = null;
                }
                if (b2) {
                    if (this.pagedownButton.getTranslationY() == 0.0f) {
                        this.pagedownButton.setTranslationY((float)AndroidUtilities.dp(100.0f));
                    }
                    this.pagedownButton.setVisibility(0);
                    this.pagedownButton.setTag((Object)1);
                    this.pagedownButtonAnimation = new AnimatorSet();
                    if (this.mentiondownButton.getVisibility() == 0) {
                        this.pagedownButtonAnimation.playTogether(new Animator[] { (Animator)ObjectAnimator.ofFloat((Object)this.pagedownButton, View.TRANSLATION_Y, new float[] { 0.0f }), (Animator)ObjectAnimator.ofFloat((Object)this.mentiondownButton, View.TRANSLATION_Y, new float[] { (float)(-AndroidUtilities.dp(72.0f)) }) });
                    }
                    else {
                        this.pagedownButtonAnimation.playTogether(new Animator[] { (Animator)ObjectAnimator.ofFloat((Object)this.pagedownButton, View.TRANSLATION_Y, new float[] { 0.0f }) });
                    }
                    this.pagedownButtonAnimation.setDuration(200L);
                    this.pagedownButtonAnimation.start();
                }
                else {
                    this.pagedownButton.setVisibility(0);
                }
            }
        }
        else {
            this.returnToMessageId = 0;
            this.newUnreadMessageCount = 0;
            if (pagedownButton.getTag() != null) {
                this.pagedownButton.setTag((Object)null);
                final AnimatorSet pagedownButtonAnimation2 = this.pagedownButtonAnimation;
                if (pagedownButtonAnimation2 != null) {
                    pagedownButtonAnimation2.cancel();
                    this.pagedownButtonAnimation = null;
                }
                if (b2) {
                    this.pagedownButtonAnimation = new AnimatorSet();
                    if (this.mentiondownButton.getVisibility() == 0) {
                        this.pagedownButtonAnimation.playTogether(new Animator[] { (Animator)ObjectAnimator.ofFloat((Object)this.pagedownButton, View.TRANSLATION_Y, new float[] { (float)AndroidUtilities.dp(100.0f) }), (Animator)ObjectAnimator.ofFloat((Object)this.mentiondownButton, View.TRANSLATION_Y, new float[] { 0.0f }) });
                    }
                    else {
                        this.pagedownButtonAnimation.playTogether(new Animator[] { (Animator)ObjectAnimator.ofFloat((Object)this.pagedownButton, View.TRANSLATION_Y, new float[] { (float)AndroidUtilities.dp(100.0f) }) });
                    }
                    this.pagedownButtonAnimation.setDuration(200L);
                    this.pagedownButtonAnimation.addListener((Animator$AnimatorListener)new AnimatorListenerAdapter() {
                        public void onAnimationEnd(final Animator animator) {
                            ChatActivity.this.pagedownButtonCounter.setVisibility(4);
                            ChatActivity.this.pagedownButton.setVisibility(4);
                        }
                    });
                    this.pagedownButtonAnimation.start();
                }
                else {
                    this.pagedownButton.setVisibility(4);
                }
            }
        }
    }
    
    private void showVoiceHint(final boolean b, final boolean b2) {
        if (this.getParentActivity() != null && super.fragmentView != null) {
            if (!b || this.voiceHintTextView != null) {
                if (this.voiceHintTextView == null) {
                    final SizeNotifierFrameLayout sizeNotifierFrameLayout = (SizeNotifierFrameLayout)super.fragmentView;
                    final int indexOfChild = sizeNotifierFrameLayout.indexOfChild((View)this.chatActivityEnterView);
                    if (indexOfChild == -1) {
                        return;
                    }
                    (this.voiceHintTextView = new TextView((Context)this.getParentActivity())).setBackgroundDrawable(Theme.createRoundRectDrawable(AndroidUtilities.dp(3.0f), Theme.getColor("chat_gifSaveHintBackground")));
                    this.voiceHintTextView.setTextColor(Theme.getColor("chat_gifSaveHintText"));
                    this.voiceHintTextView.setTextSize(1, 14.0f);
                    this.voiceHintTextView.setPadding(AndroidUtilities.dp(8.0f), AndroidUtilities.dp(7.0f), AndroidUtilities.dp(8.0f), AndroidUtilities.dp(7.0f));
                    this.voiceHintTextView.setGravity(16);
                    this.voiceHintTextView.setAlpha(0.0f);
                    sizeNotifierFrameLayout.addView((View)this.voiceHintTextView, indexOfChild + 1, (ViewGroup$LayoutParams)LayoutHelper.createFrame(-2, -2.0f, 85, 5.0f, 0.0f, 5.0f, 3.0f));
                }
                if (b) {
                    final AnimatorSet voiceHintAnimation = this.voiceHintAnimation;
                    if (voiceHintAnimation != null) {
                        voiceHintAnimation.cancel();
                        this.voiceHintAnimation = null;
                    }
                    AndroidUtilities.cancelRunOnUIThread(this.voiceHintHideRunnable);
                    this.voiceHintHideRunnable = null;
                    if (this.voiceHintTextView.getVisibility() == 0) {
                        this.hideVoiceHint();
                    }
                    return;
                }
                final TextView voiceHintTextView = this.voiceHintTextView;
                int n;
                String s;
                if (b2) {
                    n = 2131559642;
                    s = "HoldToVideo";
                }
                else {
                    n = 2131559641;
                    s = "HoldToAudio";
                }
                voiceHintTextView.setText((CharSequence)LocaleController.getString(s, n));
                final Runnable voiceHintHideRunnable = this.voiceHintHideRunnable;
                if (voiceHintHideRunnable != null) {
                    final AnimatorSet voiceHintAnimation2 = this.voiceHintAnimation;
                    if (voiceHintAnimation2 == null) {
                        AndroidUtilities.cancelRunOnUIThread(voiceHintHideRunnable);
                        AndroidUtilities.runOnUIThread(this.voiceHintHideRunnable = new _$$Lambda$ChatActivity$pe75AXzEVBCivaaObrUmNMqELz0(this), 2000L);
                        return;
                    }
                    voiceHintAnimation2.cancel();
                    this.voiceHintAnimation = null;
                }
                else if (this.voiceHintAnimation != null) {
                    return;
                }
                this.voiceHintTextView.setVisibility(0);
                (this.voiceHintAnimation = new AnimatorSet()).playTogether(new Animator[] { (Animator)ObjectAnimator.ofFloat((Object)this.voiceHintTextView, View.ALPHA, new float[] { 1.0f }) });
                this.voiceHintAnimation.addListener((Animator$AnimatorListener)new AnimatorListenerAdapter() {
                    public void onAnimationCancel(final Animator animator) {
                        if (animator.equals(ChatActivity.this.voiceHintAnimation)) {
                            ChatActivity.this.voiceHintAnimation = null;
                        }
                    }
                    
                    public void onAnimationEnd(final Animator animator) {
                        if (animator.equals(ChatActivity.this.voiceHintAnimation)) {
                            ChatActivity.this.voiceHintAnimation = null;
                            final ChatActivity this$0 = ChatActivity.this;
                            final _$$Lambda$ChatActivity$40$x1QrRetqBzyWICWSMBETTX_n11w $$Lambda$ChatActivity$40$x1QrRetqBzyWICWSMBETTX_n11w = new _$$Lambda$ChatActivity$40$x1QrRetqBzyWICWSMBETTX_n11w(this);
                            this$0.voiceHintHideRunnable = $$Lambda$ChatActivity$40$x1QrRetqBzyWICWSMBETTX_n11w;
                            AndroidUtilities.runOnUIThread($$Lambda$ChatActivity$40$x1QrRetqBzyWICWSMBETTX_n11w, 2000L);
                        }
                    }
                });
                this.voiceHintAnimation.setDuration(300L);
                this.voiceHintAnimation.start();
            }
        }
    }
    
    private void startEditingMessageObject(final MessageObject messageObject) {
        if (messageObject != null) {
            if (this.getParentActivity() != null) {
                if (this.searchItem != null && super.actionBar.isSearchFieldVisible()) {
                    super.actionBar.closeSearchField();
                    this.chatActivityEnterView.setFieldFocused();
                }
                this.mentionsAdapter.setNeedBotContext(false);
                this.chatActivityEnterView.setVisibility(0);
                this.showFieldPanelForEdit(true, messageObject);
                this.updateBottomOverlay();
                this.checkEditTimer();
                this.chatActivityEnterView.setAllowStickersAndGifs(false, false);
                this.updatePinnedMessageView(true);
                this.updateVisibleRows();
                final TLRPC.TL_messages_getMessageEditData tl_messages_getMessageEditData = new TLRPC.TL_messages_getMessageEditData();
                tl_messages_getMessageEditData.peer = MessagesController.getInstance(super.currentAccount).getInputPeer((int)this.dialog_id);
                tl_messages_getMessageEditData.id = messageObject.getId();
                this.editingMessageObjectReqId = ConnectionsManager.getInstance(super.currentAccount).sendRequest(tl_messages_getMessageEditData, new _$$Lambda$ChatActivity$MGypkmy8t7OJpHH0z_YM20VQ6qU(this));
            }
        }
    }
    
    private void startMessageUnselect() {
        final Runnable unselectRunnable = this.unselectRunnable;
        if (unselectRunnable != null) {
            AndroidUtilities.cancelRunOnUIThread(unselectRunnable);
        }
        AndroidUtilities.runOnUIThread(this.unselectRunnable = new _$$Lambda$ChatActivity$6ly2o5QUXgQxoffscWywpCCYJVI(this), 1000L);
    }
    
    private void toggleMute(final boolean b) {
        if (!MessagesController.getInstance(super.currentAccount).isDialogMuted(this.dialog_id)) {
            if (b) {
                final SharedPreferences$Editor edit = MessagesController.getNotificationsSettings(super.currentAccount).edit();
                final StringBuilder sb = new StringBuilder();
                sb.append("notify2_");
                sb.append(this.dialog_id);
                edit.putInt(sb.toString(), 2);
                MessagesStorage.getInstance(super.currentAccount).setDialogFlags(this.dialog_id, 1L);
                edit.commit();
                final TLRPC.Dialog dialog = (TLRPC.Dialog)MessagesController.getInstance(super.currentAccount).dialogs_dict.get(this.dialog_id);
                if (dialog != null) {
                    dialog.notify_settings = new TLRPC.TL_peerNotifySettings();
                    dialog.notify_settings.mute_until = Integer.MAX_VALUE;
                }
                NotificationsController.getInstance(super.currentAccount).updateServerNotificationsSettings(this.dialog_id);
                NotificationsController.getInstance(super.currentAccount).removeNotificationsForDialog(this.dialog_id);
            }
            else {
                this.showDialog(AlertsCreator.createMuteAlert((Context)this.getParentActivity(), this.dialog_id));
            }
        }
        else {
            final SharedPreferences$Editor edit2 = MessagesController.getNotificationsSettings(super.currentAccount).edit();
            final StringBuilder sb2 = new StringBuilder();
            sb2.append("notify2_");
            sb2.append(this.dialog_id);
            edit2.putInt(sb2.toString(), 0);
            MessagesStorage.getInstance(super.currentAccount).setDialogFlags(this.dialog_id, 0L);
            edit2.commit();
            final TLRPC.Dialog dialog2 = (TLRPC.Dialog)MessagesController.getInstance(super.currentAccount).dialogs_dict.get(this.dialog_id);
            if (dialog2 != null) {
                dialog2.notify_settings = new TLRPC.TL_peerNotifySettings();
            }
            NotificationsController.getInstance(super.currentAccount).updateServerNotificationsSettings(this.dialog_id);
        }
    }
    
    private void updateActionModeTitle() {
        if (!super.actionBar.isActionModeShowed()) {
            return;
        }
        if (this.selectedMessagesIds[0].size() != 0 || this.selectedMessagesIds[1].size() != 0) {
            this.selectedMessagesCountTextView.setNumber(this.selectedMessagesIds[0].size() + this.selectedMessagesIds[1].size(), true);
        }
    }
    
    private void updateBotButtons() {
        if (this.headerItem != null) {
            final TLRPC.User currentUser = this.currentUser;
            if (currentUser != null && this.currentEncryptedChat == null) {
                if (currentUser.bot) {
                    final int size = this.botInfo.size();
                    int n = 0;
                    int n2;
                    if (size != 0) {
                        int i = 0;
                        n = 0;
                        n2 = 0;
                        while (i < this.botInfo.size()) {
                            final TLRPC.BotInfo botInfo = (TLRPC.BotInfo)this.botInfo.valueAt(i);
                            int index = 0;
                            int n3 = n2;
                            int n4;
                            while (true) {
                                n2 = n3;
                                n4 = n;
                                if (index >= botInfo.commands.size()) {
                                    break;
                                }
                                final TLRPC.TL_botCommand tl_botCommand = botInfo.commands.get(index);
                                if (tl_botCommand.command.toLowerCase().equals("help")) {
                                    n4 = 1;
                                    n2 = n3;
                                }
                                else {
                                    n2 = n3;
                                    n4 = n;
                                    if (tl_botCommand.command.toLowerCase().equals("settings")) {
                                        n2 = 1;
                                        n4 = n;
                                    }
                                }
                                if (n2 != 0 && n4 != 0) {
                                    break;
                                }
                                ++index;
                                n3 = n2;
                                n = n4;
                            }
                            n = n4;
                            ++i;
                        }
                    }
                    else {
                        n2 = 0;
                    }
                    if (n != 0) {
                        this.headerItem.showSubItem(30);
                    }
                    else {
                        this.headerItem.hideSubItem(30);
                    }
                    if (n2 != 0) {
                        this.headerItem.showSubItem(31);
                    }
                    else {
                        this.headerItem.hideSubItem(31);
                    }
                }
            }
        }
    }
    
    private void updateBottomOverlay() {
        if (this.bottomOverlayChatText == null) {
            return;
        }
        final TLRPC.Chat currentChat = this.currentChat;
        Label_0478: {
            if (currentChat != null) {
                if (ChatObject.isChannel(currentChat)) {
                    final TLRPC.Chat currentChat2 = this.currentChat;
                    if (!(currentChat2 instanceof TLRPC.TL_channelForbidden)) {
                        if (ChatObject.isNotInChat(currentChat2)) {
                            if (MessagesController.getInstance(super.currentAccount).isJoiningChannel(this.currentChat.id)) {
                                this.showBottomOverlayProgress(true, false);
                            }
                            else {
                                this.bottomOverlayChatText.setText((CharSequence)LocaleController.getString("ChannelJoin", 2131558954));
                                this.showBottomOverlayProgress(false, false);
                            }
                        }
                        else {
                            if (!MessagesController.getInstance(super.currentAccount).isDialogMuted(this.dialog_id)) {
                                this.bottomOverlayChatText.setText((CharSequence)LocaleController.getString("ChannelMute", 2131558980));
                            }
                            else {
                                this.bottomOverlayChatText.setText((CharSequence)LocaleController.getString("ChannelUnmute", 2131559007));
                            }
                            this.showBottomOverlayProgress(false, this.bottomOverlayProgress.getTag() != null);
                        }
                        Label_0251: {
                            if (!ChatObject.isNotInChat(this.currentChat)) {
                                final TLRPC.Chat currentChat3 = this.currentChat;
                                if (!currentChat3.megagroup) {
                                    if (!currentChat3.has_link) {
                                        final TLRPC.ChatFull chatInfo = this.chatInfo;
                                        if (chatInfo == null || chatInfo.linked_chat_id == 0) {
                                            break Label_0251;
                                        }
                                    }
                                    this.bottomOverlayChatText2.setText((CharSequence)LocaleController.getString("ChannelDiscuss", 2131558949));
                                    this.bottomOverlayChatText2.setVisibility(0);
                                    this.bottomOverlayChatText2.updateCounter();
                                    break Label_0478;
                                }
                            }
                        }
                        this.bottomOverlayChatText2.setVisibility(8);
                        break Label_0478;
                    }
                }
                this.bottomOverlayChatText.setText((CharSequence)LocaleController.getString("DeleteThisGroup", 2131559262));
            }
            else {
                this.showBottomOverlayProgress(false, false);
                if (this.userBlocked) {
                    if (this.currentUser.bot) {
                        this.bottomOverlayChatText.setText((CharSequence)LocaleController.getString("BotUnblock", 2131558861));
                    }
                    else {
                        this.bottomOverlayChatText.setText((CharSequence)LocaleController.getString("Unblock", 2131560932));
                    }
                    if (this.botButtons != null) {
                        this.botButtons = null;
                        if (this.chatActivityEnterView != null) {
                            final MessageObject replyingMessageObject = this.replyingMessageObject;
                            if (replyingMessageObject != null && this.botReplyButtons == replyingMessageObject) {
                                this.botReplyButtons = null;
                                this.hideFieldPanel(false);
                            }
                            this.chatActivityEnterView.setButtons(this.botButtons, false);
                        }
                    }
                }
                else if (this.botUser != null && this.currentUser.bot) {
                    this.bottomOverlayChatText.setText((CharSequence)LocaleController.getString("BotStart", 2131558857));
                    this.chatActivityEnterView.hidePopup(false);
                    if (this.getParentActivity() != null) {
                        AndroidUtilities.hideKeyboard(this.getParentActivity().getCurrentFocus());
                    }
                }
                else {
                    this.bottomOverlayChatText.setText((CharSequence)LocaleController.getString("DeleteThisChat", 2131559261));
                }
            }
        }
        if (super.inPreviewMode) {
            this.searchContainer.setVisibility(4);
            this.bottomOverlayChat.setVisibility(4);
            this.chatActivityEnterView.setFieldFocused(false);
            this.chatActivityEnterView.setVisibility(4);
        }
        else {
            final ActionBarMenuItem searchItem = this.searchItem;
            if (searchItem != null && searchItem.getVisibility() == 0) {
                this.searchContainer.setVisibility(0);
                this.bottomOverlayChat.setVisibility(4);
                this.chatActivityEnterView.setFieldFocused(false);
                this.chatActivityEnterView.setVisibility(4);
                if (this.chatActivityEnterView.isTopViewVisible()) {
                    this.topViewWasVisible = 1;
                    this.chatActivityEnterView.hideTopView(false);
                }
                else {
                    this.topViewWasVisible = 2;
                }
            }
            else {
                this.searchContainer.setVisibility(4);
                if (this.muteItem != null) {
                    final TLRPC.Chat currentChat4 = this.currentChat;
                    if (currentChat4 != null && ChatObject.isNotInChat(currentChat4)) {
                        this.muteItem.setVisibility(8);
                    }
                    else {
                        this.muteItem.setVisibility(0);
                    }
                }
                final TLRPC.Chat currentChat5 = this.currentChat;
                Label_0877: {
                    if (currentChat5 == null || (!ChatObject.isNotInChat(currentChat5) && ChatObject.canWriteToChat(this.currentChat))) {
                        final TLRPC.User currentUser = this.currentUser;
                        if (currentUser == null || (!UserObject.isDeleted(currentUser) && !this.userBlocked)) {
                            if (this.botUser != null && this.currentUser.bot) {
                                this.bottomOverlayChat.setVisibility(0);
                                this.chatActivityEnterView.setVisibility(4);
                                break Label_0877;
                            }
                            this.chatActivityEnterView.setVisibility(0);
                            this.bottomOverlayChat.setVisibility(4);
                            break Label_0877;
                        }
                    }
                    if (this.chatActivityEnterView.isEditingMessage()) {
                        this.chatActivityEnterView.setVisibility(0);
                        this.bottomOverlayChat.setVisibility(4);
                        this.chatActivityEnterView.setFieldFocused();
                        AndroidUtilities.runOnUIThread(new _$$Lambda$ChatActivity$tu3m9cGe9e2Smhr7BU5CtV3WWds(this), 100L);
                    }
                    else {
                        this.bottomOverlayChat.setVisibility(0);
                        this.chatActivityEnterView.setFieldFocused(false);
                        this.chatActivityEnterView.setVisibility(4);
                        this.chatActivityEnterView.closeKeyboard();
                        final StickersAdapter stickersAdapter = this.stickersAdapter;
                        if (stickersAdapter != null) {
                            stickersAdapter.hide();
                        }
                    }
                    this.attachItem.setVisibility(8);
                    this.editTextItem.setVisibility(8);
                    this.headerItem.setVisibility(0);
                }
                if (this.topViewWasVisible == 1) {
                    this.chatActivityEnterView.showTopView(false, false);
                    this.topViewWasVisible = 0;
                }
            }
        }
        this.checkRaiseSensors();
    }
    
    private void updateContactStatus() {
        final ActionBarMenuSubItem addContactItem = this.addContactItem;
        if (addContactItem == null) {
            return;
        }
        Label_0349: {
            if (this.currentUser == null) {
                addContactItem.setVisibility(8);
            }
            else {
                final TLRPC.User user = MessagesController.getInstance(super.currentAccount).getUser(this.currentUser.id);
                if (user != null) {
                    this.currentUser = user;
                }
                final TLRPC.EncryptedChat currentEncryptedChat = this.currentEncryptedChat;
                Label_0340: {
                    if ((currentEncryptedChat == null || currentEncryptedChat instanceof TLRPC.TL_encryptedChat) && !MessagesController.isSupportUser(this.currentUser) && !UserObject.isDeleted(this.currentUser) && !ContactsController.getInstance(super.currentAccount).isLoadingContacts()) {
                        if (!TextUtils.isEmpty((CharSequence)this.currentUser.phone) && ContactsController.getInstance(super.currentAccount).contactsDict.get(this.currentUser.id) != null) {
                            if (ContactsController.getInstance(super.currentAccount).contactsDict.size() != 0) {
                                break Label_0340;
                            }
                            if (!ContactsController.getInstance(super.currentAccount).isLoadingContacts()) {
                                break Label_0340;
                            }
                        }
                        this.addContactItem.setVisibility(0);
                        if (!TextUtils.isEmpty((CharSequence)this.currentUser.phone)) {
                            this.addContactItem.setText(LocaleController.getString("AddToContacts", 2131558589));
                            this.reportSpamButton.setPadding(AndroidUtilities.dp(4.0f), 0, AndroidUtilities.dp(50.0f), 0);
                            this.addToContactsButton.setVisibility(0);
                            this.reportSpamContainer.setLayoutParams((ViewGroup$LayoutParams)LayoutHelper.createLinear(-1, -1, 0.5f, 51, 0, 0, 0, AndroidUtilities.dp(1.0f)));
                            break Label_0349;
                        }
                        this.addContactItem.setText(LocaleController.getString("ShareMyContactInfo", 2131560751));
                        this.addToContactsButton.setVisibility(8);
                        this.reportSpamButton.setPadding(AndroidUtilities.dp(50.0f), 0, AndroidUtilities.dp(50.0f), 0);
                        this.reportSpamContainer.setLayoutParams((ViewGroup$LayoutParams)LayoutHelper.createLinear(-1, -1, 1.0f, 51, 0, 0, 0, AndroidUtilities.dp(1.0f)));
                        break Label_0349;
                    }
                }
                this.addContactItem.setVisibility(8);
            }
        }
        this.checkListViewPaddings();
    }
    
    private void updateInformationForScreenshotDetector() {
        if (this.currentUser == null) {
            return;
        }
        if (this.currentEncryptedChat != null) {
            final ArrayList<Long> list = new ArrayList<Long>();
            final RecyclerListView chatListView = this.chatListView;
            if (chatListView != null) {
                for (int childCount = chatListView.getChildCount(), i = 0; i < childCount; ++i) {
                    final View child = this.chatListView.getChildAt(i);
                    MessageObject messageObject = null;
                    if (child instanceof ChatMessageCell) {
                        messageObject = ((ChatMessageCell)child).getMessageObject();
                    }
                    if (messageObject != null && messageObject.getId() < 0) {
                        final long random_id = messageObject.messageOwner.random_id;
                        if (random_id != 0L) {
                            list.add(random_id);
                        }
                    }
                }
            }
            MediaController.getInstance().setLastVisibleMessageIds(super.currentAccount, this.chatEnterTime, this.chatLeaveTime, this.currentUser, this.currentEncryptedChat, list, 0);
        }
        else {
            final SecretMediaViewer instance = SecretMediaViewer.getInstance();
            final MessageObject currentMessageObject = instance.getCurrentMessageObject();
            if (currentMessageObject != null && !currentMessageObject.isOut()) {
                MediaController.getInstance().setLastVisibleMessageIds(super.currentAccount, instance.getOpenTime(), instance.getCloseTime(), this.currentUser, null, null, currentMessageObject.getId());
            }
        }
    }
    
    private void updateMessageListAccessibilityVisibility() {
        if (this.currentEncryptedChat != null) {
            return;
        }
        if (Build$VERSION.SDK_INT >= 19) {
            final RecyclerListView chatListView = this.chatListView;
            int importantForAccessibility = 0;
            Label_0057: {
                if (this.mentionContainer.getVisibility() != 0) {
                    final ActionBarPopupWindow scrimPopupWindow = this.scrimPopupWindow;
                    if (scrimPopupWindow == null || !scrimPopupWindow.isShowing()) {
                        importantForAccessibility = 0;
                        break Label_0057;
                    }
                }
                importantForAccessibility = 4;
            }
            chatListView.setImportantForAccessibility(importantForAccessibility);
        }
    }
    
    private void updateMessagesVisiblePart(final boolean b) {
        final RecyclerListView chatListView = this.chatListView;
        if (chatListView == null) {
            return;
        }
        final int childCount = chatListView.getChildCount();
        final int measuredHeight = this.chatListView.getMeasuredHeight();
        final TLRPC.EncryptedChat currentEncryptedChat = this.currentEncryptedChat;
        this.pollsToCheck.clear();
        int n = Integer.MAX_VALUE;
        int i = 0;
        int n2 = 0;
        Object o = null;
        View view = null;
        View view2 = null;
        int n3 = Integer.MAX_VALUE;
        int a = Integer.MIN_VALUE;
        int a2 = Integer.MIN_VALUE;
        int a3 = Integer.MAX_VALUE;
        while (i < childCount) {
            final View child = this.chatListView.getChildAt(i);
            final boolean b2 = child instanceof ChatMessageCell;
            MessageObject e;
            int n6;
            if (b2) {
                final ChatMessageCell chatMessageCell = (ChatMessageCell)child;
                final int top = chatMessageCell.getTop();
                chatMessageCell.getBottom();
                int n4;
                if (top >= 0) {
                    n4 = 0;
                }
                else {
                    n4 = -top;
                }
                int measuredHeight2;
                if ((measuredHeight2 = chatMessageCell.getMeasuredHeight()) > measuredHeight) {
                    measuredHeight2 = n4 + measuredHeight;
                }
                chatMessageCell.setVisiblePart(n4, measuredHeight2 - n4);
                e = chatMessageCell.getMessageObject();
                if (this.videoPlayerContainer != null) {
                    final boolean b3 = e.isVideo() || e.isRoundVideo();
                    if (b3 && MediaController.getInstance().isPlayingMessage(e)) {
                        final ImageReceiver photoImage = chatMessageCell.getPhotoImage();
                        if (b3 && photoImage.getImageY2() + top < 0) {
                            n2 = 0;
                        }
                        else {
                            this.videoPlayerContainer.setTranslationX(photoImage.getImageX() + chatMessageCell.getX());
                            final FrameLayout videoPlayerContainer = this.videoPlayerContainer;
                            final float n5 = (float)(super.fragmentView.getPaddingTop() + top + photoImage.getImageY() - this.chatListViewClipTop);
                            final float translationY = this.chatListView.getTranslationY();
                            int statusBarHeight;
                            if (super.inPreviewMode) {
                                statusBarHeight = AndroidUtilities.statusBarHeight;
                            }
                            else {
                                statusBarHeight = 0;
                            }
                            videoPlayerContainer.setTranslationY(n5 + translationY + statusBarHeight);
                            super.fragmentView.invalidate();
                            this.videoPlayerContainer.invalidate();
                            n2 = 1;
                        }
                    }
                }
                n6 = n2;
            }
            else if (child instanceof ChatActionCell) {
                e = ((ChatActionCell)child).getMessageObject();
                n6 = n2;
            }
            else {
                e = null;
                n6 = n2;
            }
            int n7 = a;
            int n8 = a2;
            int n9 = a3;
            if (e != null) {
                int max = a;
                int max2 = a2;
                int min = a3;
                if (!e.isOut()) {
                    max = a;
                    max2 = a2;
                    min = a3;
                    if (e.isUnread()) {
                        final int id = e.getId();
                        max2 = a2;
                        if (id > 0) {
                            max2 = Math.max(a2, e.getId());
                        }
                        min = a3;
                        if (id < 0) {
                            min = Math.min(a3, e.getId());
                        }
                        max = Math.max(a, e.messageOwner.date);
                    }
                }
                n7 = max;
                n8 = max2;
                n9 = min;
                if (e.type == 17) {
                    this.pollsToCheck.add(e);
                    n9 = min;
                    n8 = max2;
                    n7 = max;
                }
            }
            int n10 = 0;
            Label_0615: {
                View view3;
                if (child.getBottom() <= this.chatListView.getPaddingTop() + AndroidUtilities.dp(1.0f) + this.chatListViewClipTop) {
                    view3 = view2;
                }
                else {
                    final int bottom = child.getBottom();
                    Object o2 = o;
                    if (bottom < (n10 = n3)) {
                        if (b2 || child instanceof ChatActionCell) {
                            o = child;
                        }
                        n10 = bottom;
                        view2 = child;
                        o2 = o;
                    }
                    o = o2;
                    n3 = n10;
                    view3 = view2;
                    if (child instanceof ChatActionCell) {
                        o = o2;
                        n3 = n10;
                        view3 = view2;
                        if (e.isDateObject) {
                            if (child.getAlpha() != 1.0f) {
                                child.setAlpha(1.0f);
                            }
                            o = o2;
                            n3 = n10;
                            view3 = view2;
                            if (bottom < n) {
                                view = child;
                                n = bottom;
                                o = o2;
                                break Label_0615;
                            }
                        }
                    }
                }
                view2 = view3;
                n10 = n3;
            }
            ++i;
            n2 = n6;
            n3 = n10;
            a = n7;
            a2 = n8;
            a3 = n9;
        }
        MessagesController.getInstance(super.currentAccount).addToPollsQueue(this.dialog_id, this.pollsToCheck);
        if (this.videoPlayerContainer != null) {
            if (n2 == 0) {
                final MessageObject playingMessageObject = MediaController.getInstance().getPlayingMessageObject();
                if (playingMessageObject != null) {
                    if (this.checkTextureViewPosition && playingMessageObject.isVideo()) {
                        MediaController.getInstance().cleanupPlayer(true, true);
                    }
                    else {
                        this.videoPlayerContainer.setTranslationY((float)(-AndroidUtilities.roundMessageSize - 100));
                        super.fragmentView.invalidate();
                        if ((playingMessageObject.isRoundVideo() || playingMessageObject.isVideo()) && playingMessageObject.eventId == 0L && this.checkTextureViewPosition) {
                            MediaController.getInstance().setCurrentVideoVisible(false);
                        }
                    }
                }
            }
            else {
                MediaController.getInstance().setCurrentVideoVisible(true);
            }
        }
        if (o != null) {
            MessageObject messageObject;
            if (o instanceof ChatMessageCell) {
                messageObject = ((ChatMessageCell)o).getMessageObject();
            }
            else {
                messageObject = ((ChatActionCell)o).getMessageObject();
            }
            this.floatingDateView.setCustomDate(messageObject.messageOwner.date);
        }
        this.currentFloatingDateOnScreen = false;
        this.currentFloatingTopIsNotMessage = (!(view2 instanceof ChatMessageCell) && !(view2 instanceof ChatActionCell));
        if (view != null) {
            if (view.getTop() - this.chatListViewClipTop <= this.chatListView.getPaddingTop() && !this.currentFloatingTopIsNotMessage) {
                if (view.getAlpha() != 0.0f) {
                    view.setAlpha(0.0f);
                }
                final AnimatorSet floatingDateAnimation = this.floatingDateAnimation;
                if (floatingDateAnimation != null) {
                    floatingDateAnimation.cancel();
                    this.floatingDateAnimation = null;
                }
                if (this.floatingDateView.getTag() == null) {
                    this.floatingDateView.setTag((Object)1);
                }
                if (this.floatingDateView.getAlpha() != 1.0f) {
                    this.floatingDateView.setAlpha(1.0f);
                }
                this.currentFloatingDateOnScreen = true;
            }
            else {
                final View view4 = view;
                if (view4.getAlpha() != 1.0f) {
                    view4.setAlpha(1.0f);
                }
                this.hideFloatingDateView(this.currentFloatingTopIsNotMessage ^ true);
            }
            final float n11 = (float)(view.getBottom() - this.chatListView.getPaddingTop() - this.chatListViewClipTop);
            if (n11 > this.floatingDateView.getMeasuredHeight() && n11 < this.floatingDateView.getMeasuredHeight() * 2) {
                final ChatActionCell floatingDateView = this.floatingDateView;
                floatingDateView.setTranslationY(-floatingDateView.getMeasuredHeight() * 2 + n11);
            }
            else {
                this.floatingDateView.setTranslationY(0.0f);
            }
        }
        else {
            this.hideFloatingDateView(true);
            this.floatingDateView.setTranslationY(0.0f);
        }
        if (!this.firstLoading && !this.paused && !super.inPreviewMode) {
            if (a2 == Integer.MIN_VALUE && a3 == Integer.MAX_VALUE) {
                if (!this.firstUnreadSent && this.chatLayoutManager.findFirstVisibleItemPosition() == 0) {
                    this.newUnreadMessageCount = 0;
                    if (b) {
                        AndroidUtilities.runOnUIThread(new _$$Lambda$ChatActivity$NFR4cP3nNe6c_Xs7PotAXGjVKSQ(this));
                    }
                    else {
                        this.inlineUpdate2();
                    }
                    final MessagesController instance = MessagesController.getInstance(super.currentAccount);
                    final long dialog_id = this.dialog_id;
                    final int[] minMessageId = this.minMessageId;
                    instance.markDialogAsRead(dialog_id, minMessageId[0], minMessageId[0], this.maxDate[0], false, 0, true);
                    this.firstUnreadSent = true;
                }
            }
            else {
                int j = 0;
                int n12 = 0;
                while (j < this.messages.size()) {
                    final MessageObject messageObject2 = this.messages.get(j);
                    final int id2 = messageObject2.getId();
                    int n13 = n12;
                    if (a2 != Integer.MIN_VALUE) {
                        n13 = n12;
                        if (id2 > 0) {
                            n13 = n12;
                            if (id2 <= a2) {
                                n13 = n12;
                                if (messageObject2.isUnread()) {
                                    messageObject2.setIsRead();
                                    n13 = n12 + 1;
                                }
                            }
                        }
                    }
                    n12 = n13;
                    if (a3 != Integer.MAX_VALUE) {
                        n12 = n13;
                        if (id2 < 0) {
                            n12 = n13;
                            if (id2 >= a3) {
                                n12 = n13;
                                if (messageObject2.isUnread()) {
                                    messageObject2.setIsRead();
                                    n12 = n13 + 1;
                                }
                            }
                        }
                    }
                    ++j;
                }
                if ((this.forwardEndReached[0] && a2 == this.minMessageId[0]) || a3 == this.minMessageId[0]) {
                    this.newUnreadMessageCount = 0;
                }
                else {
                    this.newUnreadMessageCount -= n12;
                    if (this.newUnreadMessageCount < 0) {
                        this.newUnreadMessageCount = 0;
                    }
                }
                if (b) {
                    AndroidUtilities.runOnUIThread(new _$$Lambda$ChatActivity$r8G5ryI3TCtj8E_vwPu9tBJgvUE(this));
                }
                else {
                    this.inlineUpdate1();
                }
                final MessagesController instance2 = MessagesController.getInstance(super.currentAccount);
                final long dialog_id2 = this.dialog_id;
                final int[] minMessageId2 = this.minMessageId;
                instance2.markDialogAsRead(dialog_id2, a2, a3, a, false, n12, a2 == minMessageId2[0] || a3 == minMessageId2[0]);
                this.firstUnreadSent = true;
            }
        }
    }
    
    private void updatePinnedMessageView(final boolean b) {
        if (this.pinnedMessageView == null) {
            return;
        }
        final TLRPC.ChatFull chatInfo = this.chatInfo;
        int loadingPinnedMessage;
        if (chatInfo != null) {
            final MessageObject pinnedMessageObject = this.pinnedMessageObject;
            if (pinnedMessageObject != null && chatInfo.pinned_msg_id != pinnedMessageObject.getId()) {
                this.pinnedMessageObject = null;
            }
            final int pinned_msg_id = this.chatInfo.pinned_msg_id;
            if (pinned_msg_id != 0 && this.pinnedMessageObject == null) {
                this.pinnedMessageObject = (MessageObject)this.messagesDict[0].get(pinned_msg_id);
            }
            loadingPinnedMessage = this.chatInfo.pinned_msg_id;
        }
        else {
            final TLRPC.UserFull userInfo = this.userInfo;
            if (userInfo != null) {
                final MessageObject pinnedMessageObject2 = this.pinnedMessageObject;
                if (pinnedMessageObject2 != null && userInfo.pinned_msg_id != pinnedMessageObject2.getId()) {
                    this.pinnedMessageObject = null;
                }
                final int pinned_msg_id2 = this.userInfo.pinned_msg_id;
                if (pinned_msg_id2 != 0 && this.pinnedMessageObject == null) {
                    this.pinnedMessageObject = (MessageObject)this.messagesDict[0].get(pinned_msg_id2);
                }
                loadingPinnedMessage = this.userInfo.pinned_msg_id;
            }
            else {
                loadingPinnedMessage = 0;
            }
        }
        final SharedPreferences notificationsSettings = MessagesController.getNotificationsSettings(super.currentAccount);
        Label_1332: {
            Label_1327: {
                if ((this.chatInfo != null || this.userInfo != null) && loadingPinnedMessage != 0) {
                    final StringBuilder sb = new StringBuilder();
                    sb.append("pin_");
                    sb.append(this.dialog_id);
                    if (loadingPinnedMessage != notificationsSettings.getInt(sb.toString(), 0)) {
                        final ActionBar actionBar = super.actionBar;
                        if (actionBar != null) {
                            if (actionBar.isActionModeShowed()) {
                                break Label_1327;
                            }
                            if (super.actionBar.isSearchFieldVisible()) {
                                break Label_1327;
                            }
                        }
                        if (this.pinnedMessageObject != null) {
                            if (this.pinnedMessageView.getTag() != null) {
                                this.pinnedMessageView.setTag((Object)null);
                                final AnimatorSet pinnedMessageViewAnimator = this.pinnedMessageViewAnimator;
                                if (pinnedMessageViewAnimator != null) {
                                    pinnedMessageViewAnimator.cancel();
                                    this.pinnedMessageViewAnimator = null;
                                }
                                if (b) {
                                    this.pinnedMessageView.setVisibility(0);
                                    (this.pinnedMessageViewAnimator = new AnimatorSet()).playTogether(new Animator[] { (Animator)ObjectAnimator.ofFloat((Object)this.pinnedMessageView, View.TRANSLATION_Y, new float[] { 0.0f }) });
                                    this.pinnedMessageViewAnimator.setDuration(200L);
                                    this.pinnedMessageViewAnimator.addListener((Animator$AnimatorListener)new AnimatorListenerAdapter() {
                                        public void onAnimationCancel(final Animator obj) {
                                            if (ChatActivity.this.pinnedMessageViewAnimator != null && ChatActivity.this.pinnedMessageViewAnimator.equals(obj)) {
                                                ChatActivity.this.pinnedMessageViewAnimator = null;
                                            }
                                        }
                                        
                                        public void onAnimationEnd(final Animator obj) {
                                            if (ChatActivity.this.pinnedMessageViewAnimator != null && ChatActivity.this.pinnedMessageViewAnimator.equals(obj)) {
                                                ChatActivity.this.pinnedMessageViewAnimator = null;
                                            }
                                        }
                                    });
                                    this.pinnedMessageViewAnimator.start();
                                }
                                else {
                                    this.pinnedMessageView.setTranslationY(0.0f);
                                    this.pinnedMessageView.setVisibility(0);
                                }
                            }
                            final FrameLayout$LayoutParams layoutParams = (FrameLayout$LayoutParams)this.pinnedMessageNameTextView.getLayoutParams();
                            final FrameLayout$LayoutParams layoutParams2 = (FrameLayout$LayoutParams)this.pinnedMessageTextView.getLayoutParams();
                            TLRPC.PhotoSize closestPhotoSizeWithSize = FileLoader.getClosestPhotoSizeWithSize(this.pinnedMessageObject.photoThumbs2, AndroidUtilities.dp(320.0f));
                            TLRPC.PhotoSize closestPhotoSizeWithSize2 = FileLoader.getClosestPhotoSizeWithSize(this.pinnedMessageObject.photoThumbs2, AndroidUtilities.dp(40.0f));
                            final MessageObject pinnedMessageObject3 = this.pinnedMessageObject;
                            TLObject photoThumbsObject2 = pinnedMessageObject3.photoThumbsObject2;
                            int size;
                            int pinnedImageCacheType;
                            if (closestPhotoSizeWithSize == null) {
                                TLRPC.PhotoSize photoSize;
                                if (pinnedMessageObject3.mediaExists) {
                                    photoSize = FileLoader.getClosestPhotoSizeWithSize(pinnedMessageObject3.photoThumbs, AndroidUtilities.getPhotoSize());
                                    if (photoSize != null) {
                                        size = photoSize.size;
                                    }
                                    else {
                                        size = 0;
                                    }
                                    pinnedImageCacheType = 0;
                                }
                                else {
                                    photoSize = FileLoader.getClosestPhotoSizeWithSize(pinnedMessageObject3.photoThumbs, AndroidUtilities.dp(320.0f));
                                    size = 0;
                                    pinnedImageCacheType = 1;
                                }
                                final TLRPC.PhotoSize closestPhotoSizeWithSize3 = FileLoader.getClosestPhotoSizeWithSize(this.pinnedMessageObject.photoThumbs, AndroidUtilities.dp(40.0f));
                                final TLObject photoThumbsObject3 = this.pinnedMessageObject.photoThumbsObject;
                                closestPhotoSizeWithSize = photoSize;
                                closestPhotoSizeWithSize2 = closestPhotoSizeWithSize3;
                                photoThumbsObject2 = photoThumbsObject3;
                            }
                            else {
                                pinnedImageCacheType = 1;
                                size = 0;
                            }
                            TLRPC.PhotoSize pinnedImageThumbLocation = closestPhotoSizeWithSize2;
                            if (closestPhotoSizeWithSize == closestPhotoSizeWithSize2) {
                                pinnedImageThumbLocation = null;
                            }
                            Label_0838: {
                                if (closestPhotoSizeWithSize != null && !(closestPhotoSizeWithSize instanceof TLRPC.TL_photoSizeEmpty) && !(closestPhotoSizeWithSize.location instanceof TLRPC.TL_fileLocationUnavailable)) {
                                    final MessageObject pinnedMessageObject4 = this.pinnedMessageObject;
                                    if (pinnedMessageObject4.type != 13) {
                                        if (pinnedMessageObject4.isRoundVideo()) {
                                            this.pinnedMessageImageView.setRoundRadius(AndroidUtilities.dp(16.0f));
                                        }
                                        else {
                                            this.pinnedMessageImageView.setRoundRadius(0);
                                        }
                                        this.pinnedImageSize = size;
                                        this.pinnedImageCacheType = pinnedImageCacheType;
                                        this.pinnedImageLocation = closestPhotoSizeWithSize;
                                        this.pinnedImageThumbLocation = pinnedImageThumbLocation;
                                        this.pinnedImageLocationObject = photoThumbsObject2;
                                        this.pinnedMessageImageView.setImage(ImageLocation.getForObject(this.pinnedImageLocation, photoThumbsObject2), "50_50", ImageLocation.getForObject(pinnedImageThumbLocation, photoThumbsObject2), "50_50_b", null, size, pinnedImageCacheType, this.pinnedMessageObject);
                                        this.pinnedMessageImageView.setVisibility(0);
                                        final int dp = AndroidUtilities.dp(55.0f);
                                        layoutParams2.leftMargin = dp;
                                        layoutParams.leftMargin = dp;
                                        break Label_0838;
                                    }
                                }
                                this.pinnedMessageImageView.setImageBitmap(null);
                                this.pinnedImageLocation = null;
                                this.pinnedImageLocationObject = null;
                                this.pinnedMessageImageView.setVisibility(4);
                                final int dp2 = AndroidUtilities.dp(18.0f);
                                layoutParams2.leftMargin = dp2;
                                layoutParams.leftMargin = dp2;
                            }
                            this.pinnedMessageNameTextView.setLayoutParams((ViewGroup$LayoutParams)layoutParams);
                            this.pinnedMessageTextView.setLayoutParams((ViewGroup$LayoutParams)layoutParams2);
                            if (this.pinnedMessageObject.type == 17) {
                                this.pinnedMessageNameTextView.setText(LocaleController.getString("PinnedPoll", 2131560453));
                            }
                            else {
                                this.pinnedMessageNameTextView.setText(LocaleController.getString("PinnedMessage", 2131560451));
                            }
                            final MessageObject pinnedMessageObject5 = this.pinnedMessageObject;
                            final int type = pinnedMessageObject5.type;
                            if (type == 14) {
                                this.pinnedMessageTextView.setText(String.format("%s - %s", pinnedMessageObject5.getMusicAuthor(), this.pinnedMessageObject.getMusicTitle()));
                                break Label_1332;
                            }
                            if (type == 17) {
                                String s2;
                                final String s = s2 = ((TLRPC.TL_messageMediaPoll)pinnedMessageObject5.messageOwner.media).poll.question;
                                if (s.length() > 150) {
                                    s2 = s.substring(0, 150);
                                }
                                this.pinnedMessageTextView.setText(s2.replace('\n', ' '));
                                break Label_1332;
                            }
                            final TLRPC.MessageMedia media = pinnedMessageObject5.messageOwner.media;
                            if (media instanceof TLRPC.TL_messageMediaGame) {
                                final SimpleTextView pinnedMessageTextView = this.pinnedMessageTextView;
                                pinnedMessageTextView.setText(Emoji.replaceEmoji(media.game.title, pinnedMessageTextView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14.0f), false));
                                break Label_1332;
                            }
                            if (!TextUtils.isEmpty(pinnedMessageObject5.caption)) {
                                String s4;
                                final String s3 = s4 = this.pinnedMessageObject.caption.toString();
                                if (s3.length() > 150) {
                                    s4 = s3.substring(0, 150);
                                }
                                final String replace = s4.replace('\n', ' ');
                                final SimpleTextView pinnedMessageTextView2 = this.pinnedMessageTextView;
                                pinnedMessageTextView2.setText(Emoji.replaceEmoji(replace, pinnedMessageTextView2.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14.0f), false));
                                break Label_1332;
                            }
                            final CharSequence messageText = this.pinnedMessageObject.messageText;
                            if (messageText != null) {
                                String s6;
                                final String s5 = s6 = messageText.toString();
                                if (s5.length() > 150) {
                                    s6 = s5.substring(0, 150);
                                }
                                final String replace2 = s6.replace('\n', ' ');
                                final SimpleTextView pinnedMessageTextView3 = this.pinnedMessageTextView;
                                pinnedMessageTextView3.setText(Emoji.replaceEmoji(replace2, pinnedMessageTextView3.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14.0f), false));
                            }
                            break Label_1332;
                        }
                        else {
                            this.pinnedImageLocation = null;
                            this.pinnedImageLocationObject = null;
                            this.hidePinnedMessageView(b);
                            if (this.loadingPinnedMessage != loadingPinnedMessage) {
                                this.loadingPinnedMessage = loadingPinnedMessage;
                                final DataQuery instance = DataQuery.getInstance(super.currentAccount);
                                final long dialog_id = this.dialog_id;
                                int id;
                                if (ChatObject.isChannel(this.currentChat)) {
                                    id = this.currentChat.id;
                                }
                                else {
                                    id = 0;
                                }
                                instance.loadPinnedMessage(dialog_id, id, loadingPinnedMessage, true);
                            }
                            break Label_1332;
                        }
                    }
                }
            }
            this.hidePinnedMessageView(b);
        }
        this.checkListViewPaddings();
    }
    
    private void updateSearchButtons(final int n, final int n2, final int i) {
        final ImageView searchUpButton = this.searchUpButton;
        if (searchUpButton != null) {
            searchUpButton.setEnabled((n & 0x1) != 0x0);
            this.searchDownButton.setEnabled((n & 0x2) != 0x0);
            final ImageView searchUpButton2 = this.searchUpButton;
            final boolean enabled = searchUpButton2.isEnabled();
            final float n3 = 1.0f;
            float alpha;
            if (enabled) {
                alpha = 1.0f;
            }
            else {
                alpha = 0.5f;
            }
            searchUpButton2.setAlpha(alpha);
            final ImageView searchDownButton = this.searchDownButton;
            float alpha2;
            if (searchDownButton.isEnabled()) {
                alpha2 = n3;
            }
            else {
                alpha2 = 0.5f;
            }
            searchDownButton.setAlpha(alpha2);
            if (i < 0) {
                this.searchCountText.setText("");
            }
            else if (i == 0) {
                this.searchCountText.setText(LocaleController.getString("NoResult", 2131559943));
            }
            else {
                this.searchCountText.setText(LocaleController.formatString("Of", 2131560099, n2 + 1, i));
            }
        }
    }
    
    private void updateSecretStatus() {
        if (this.bottomOverlay == null) {
            return;
        }
        final TLRPC.Chat currentChat = this.currentChat;
        final boolean b = true;
        int n = 1;
        if (currentChat != null && !ChatObject.canSendMessages(currentChat) && (!ChatObject.isChannel(this.currentChat) || this.currentChat.megagroup)) {
            final TLRPC.TL_chatBannedRights default_banned_rights = this.currentChat.default_banned_rights;
            if (default_banned_rights != null && default_banned_rights.send_messages) {
                this.bottomOverlayText.setText((CharSequence)LocaleController.getString("GlobalSendMessageRestricted", 2131559595));
            }
            else if (AndroidUtilities.isBannedForever(this.currentChat.banned_rights)) {
                this.bottomOverlayText.setText((CharSequence)LocaleController.getString("SendMessageRestrictedForever", 2131560702));
            }
            else {
                this.bottomOverlayText.setText((CharSequence)LocaleController.formatString("SendMessageRestricted", 2131560701, LocaleController.formatDateForBan(this.currentChat.banned_rights.until_date)));
            }
            this.bottomOverlay.setVisibility(0);
            final AnimatorSet mentionListAnimation = this.mentionListAnimation;
            if (mentionListAnimation != null) {
                mentionListAnimation.cancel();
                this.mentionListAnimation = null;
            }
            this.mentionContainer.setVisibility(8);
            this.mentionContainer.setTag((Object)null);
            this.updateMessageListAccessibilityVisibility();
            final StickersAdapter stickersAdapter = this.stickersAdapter;
            n = (b ? 1 : 0);
            if (stickersAdapter != null) {
                stickersAdapter.hide();
                n = (b ? 1 : 0);
            }
        }
        else {
            final TLRPC.EncryptedChat currentEncryptedChat = this.currentEncryptedChat;
            if (currentEncryptedChat == null || this.bigEmptyView == null) {
                this.bottomOverlay.setVisibility(4);
                if (this.stickersAdapter != null) {
                    final ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
                    if (chatActivityEnterView != null && chatActivityEnterView.hasText()) {
                        this.stickersAdapter.loadStikersForEmoji(this.chatActivityEnterView.getFieldText(), false);
                    }
                }
                return;
            }
            if (currentEncryptedChat instanceof TLRPC.TL_encryptedChatRequested) {
                this.bottomOverlayText.setText((CharSequence)LocaleController.getString("EncryptionProcessing", 2131559363));
                this.bottomOverlay.setVisibility(0);
            }
            else if (currentEncryptedChat instanceof TLRPC.TL_encryptedChatWaiting) {
                final TextView bottomOverlayText = this.bottomOverlayText;
                final StringBuilder sb = new StringBuilder();
                sb.append("<b>");
                sb.append(this.currentUser.first_name);
                sb.append("</b>");
                bottomOverlayText.setText((CharSequence)AndroidUtilities.replaceTags(LocaleController.formatString("AwaitingEncryption", 2131558808, sb.toString())));
                this.bottomOverlay.setVisibility(0);
            }
            else if (currentEncryptedChat instanceof TLRPC.TL_encryptedChatDiscarded) {
                this.bottomOverlayText.setText((CharSequence)LocaleController.getString("EncryptionRejected", 2131559364));
                this.bottomOverlay.setVisibility(0);
                this.chatActivityEnterView.setFieldText("");
                DataQuery.getInstance(super.currentAccount).cleanDraft(this.dialog_id, false);
            }
            else {
                if (currentEncryptedChat instanceof TLRPC.TL_encryptedChat) {
                    this.bottomOverlay.setVisibility(4);
                }
                n = 0;
            }
            this.checkRaiseSensors();
            this.checkActionBarMenu();
        }
        if (super.inPreviewMode) {
            this.bottomOverlay.setVisibility(4);
        }
        if (n != 0) {
            this.chatActivityEnterView.hidePopup(false);
            if (this.getParentActivity() != null) {
                AndroidUtilities.hideKeyboard(this.getParentActivity().getCurrentFocus());
            }
        }
    }
    
    private void updateSpamView() {
        if (this.reportSpamView == null) {
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("no spam view found");
            }
            return;
        }
        final SharedPreferences notificationsSettings = MessagesController.getNotificationsSettings(super.currentAccount);
        final TLRPC.EncryptedChat currentEncryptedChat = this.currentEncryptedChat;
        int n = 0;
        Label_0194: {
            Label_0144: {
                if (currentEncryptedChat != null) {
                    if (currentEncryptedChat.admin_id != UserConfig.getInstance(super.currentAccount).getClientUserId() && !ContactsController.getInstance(super.currentAccount).isLoadingContacts() && ContactsController.getInstance(super.currentAccount).contactsDict.get(this.currentUser.id) == null) {
                        n = 1;
                    }
                    else {
                        n = 0;
                    }
                    if (n != 0) {
                        final StringBuilder sb = new StringBuilder();
                        sb.append("spam3_");
                        sb.append(this.dialog_id);
                        if (notificationsSettings.getInt(sb.toString(), 0) == 1) {
                            break Label_0144;
                        }
                    }
                    break Label_0194;
                }
                final StringBuilder sb2 = new StringBuilder();
                sb2.append("spam3_");
                sb2.append(this.dialog_id);
                if (notificationsSettings.getInt(sb2.toString(), 0) == 2) {
                    n = 1;
                    break Label_0194;
                }
            }
            n = 0;
        }
        if (n == 0) {
            if (this.reportSpamView.getTag() == null) {
                if (BuildVars.LOGS_ENABLED) {
                    FileLog.d("hide spam button");
                }
                this.reportSpamView.setTag((Object)1);
                final AnimatorSet reportSpamViewAnimator = this.reportSpamViewAnimator;
                if (reportSpamViewAnimator != null) {
                    reportSpamViewAnimator.cancel();
                }
                (this.reportSpamViewAnimator = new AnimatorSet()).playTogether(new Animator[] { (Animator)ObjectAnimator.ofFloat((Object)this.reportSpamView, View.TRANSLATION_Y, new float[] { (float)(-AndroidUtilities.dp(50.0f)) }) });
                this.reportSpamViewAnimator.setDuration(200L);
                this.reportSpamViewAnimator.addListener((Animator$AnimatorListener)new AnimatorListenerAdapter() {
                    public void onAnimationCancel(final Animator obj) {
                        if (ChatActivity.this.reportSpamViewAnimator != null && ChatActivity.this.reportSpamViewAnimator.equals(obj)) {
                            ChatActivity.this.reportSpamViewAnimator = null;
                        }
                    }
                    
                    public void onAnimationEnd(final Animator obj) {
                        if (ChatActivity.this.reportSpamViewAnimator != null && ChatActivity.this.reportSpamViewAnimator.equals(obj)) {
                            ChatActivity.this.reportSpamView.setVisibility(8);
                            ChatActivity.this.reportSpamViewAnimator = null;
                        }
                    }
                });
                this.reportSpamViewAnimator.start();
            }
        }
        else if (this.reportSpamView.getTag() != null) {
            if (BuildVars.LOGS_ENABLED) {
                FileLog.d("show spam button");
            }
            this.reportSpamView.setTag((Object)null);
            this.reportSpamView.setVisibility(0);
            final AnimatorSet reportSpamViewAnimator2 = this.reportSpamViewAnimator;
            if (reportSpamViewAnimator2 != null) {
                reportSpamViewAnimator2.cancel();
            }
            (this.reportSpamViewAnimator = new AnimatorSet()).playTogether(new Animator[] { (Animator)ObjectAnimator.ofFloat((Object)this.reportSpamView, View.TRANSLATION_Y, new float[] { 0.0f }) });
            this.reportSpamViewAnimator.setDuration(200L);
            this.reportSpamViewAnimator.addListener((Animator$AnimatorListener)new AnimatorListenerAdapter() {
                public void onAnimationCancel(final Animator obj) {
                    if (ChatActivity.this.reportSpamViewAnimator != null && ChatActivity.this.reportSpamViewAnimator.equals(obj)) {
                        ChatActivity.this.reportSpamViewAnimator = null;
                    }
                }
                
                public void onAnimationEnd(final Animator obj) {
                    if (ChatActivity.this.reportSpamViewAnimator != null && ChatActivity.this.reportSpamViewAnimator.equals(obj)) {
                        ChatActivity.this.reportSpamViewAnimator = null;
                    }
                }
            });
            this.reportSpamViewAnimator.start();
        }
        this.checkListViewPaddings();
    }
    
    private void updateTitle() {
        final ChatAvatarContainer avatarContainer = this.avatarContainer;
        if (avatarContainer == null) {
            return;
        }
        final TLRPC.Chat currentChat = this.currentChat;
        if (currentChat != null) {
            avatarContainer.setTitle(currentChat.title, currentChat.scam);
        }
        else {
            final TLRPC.User currentUser = this.currentUser;
            if (currentUser != null) {
                if (currentUser.self) {
                    avatarContainer.setTitle(LocaleController.getString("SavedMessages", 2131560633));
                }
                else if (!MessagesController.isSupportUser(currentUser) && ContactsController.getInstance(super.currentAccount).contactsDict.get(this.currentUser.id) == null && (ContactsController.getInstance(super.currentAccount).contactsDict.size() != 0 || !ContactsController.getInstance(super.currentAccount).isLoadingContacts())) {
                    if (!TextUtils.isEmpty((CharSequence)this.currentUser.phone)) {
                        final ChatAvatarContainer avatarContainer2 = this.avatarContainer;
                        final PhoneFormat instance = PhoneFormat.getInstance();
                        final StringBuilder sb = new StringBuilder();
                        sb.append("+");
                        sb.append(this.currentUser.phone);
                        avatarContainer2.setTitle(instance.format(sb.toString()));
                    }
                    else {
                        this.avatarContainer.setTitle(UserObject.getUserName(this.currentUser), this.currentUser.scam);
                    }
                }
                else {
                    this.avatarContainer.setTitle(UserObject.getUserName(this.currentUser), this.currentUser.scam);
                }
            }
        }
        this.setParentActivityTitle(this.avatarContainer.getTitleTextView().getText());
    }
    
    private void updateTitleIcons() {
        if (this.avatarContainer == null) {
            return;
        }
        final boolean dialogMuted = MessagesController.getInstance(super.currentAccount).isDialogMuted(this.dialog_id);
        Drawable chat_lockIconDrawable = null;
        Drawable chat_muteIconDrawable;
        if (dialogMuted) {
            chat_muteIconDrawable = Theme.chat_muteIconDrawable;
        }
        else {
            chat_muteIconDrawable = null;
        }
        final ChatAvatarContainer avatarContainer = this.avatarContainer;
        if (this.currentEncryptedChat != null) {
            chat_lockIconDrawable = Theme.chat_lockIconDrawable;
        }
        avatarContainer.setTitleIcons(chat_lockIconDrawable, chat_muteIconDrawable);
        final ActionBarMenuSubItem muteItem = this.muteItem;
        if (muteItem != null) {
            if (chat_muteIconDrawable != null) {
                muteItem.setTextAndIcon(LocaleController.getString("UnmuteNotifications", 2131560939), 2131165678);
            }
            else {
                muteItem.setTextAndIcon(LocaleController.getString("MuteNotifications", 2131559887), 2131165648);
            }
        }
    }
    
    private void updateVisibleRows() {
        final RecyclerListView chatListView = this.chatListView;
        if (chatListView == null) {
            return;
        }
        int n = 0;
        Label_0062: {
            if (!this.wasManualScroll && this.unreadMessageObject != null && chatListView.getMeasuredHeight() != 0) {
                final int index = this.messages.indexOf(this.unreadMessageObject);
                if (index >= 0) {
                    n = index + this.chatAdapter.messagesStartRow;
                    break Label_0062;
                }
            }
            n = -1;
        }
        final int childCount = this.chatListView.getChildCount();
        final ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        MessageObject editingMessageObject;
        if (chatActivityEnterView != null) {
            editingMessageObject = chatActivityEnterView.getEditingMessageObject();
        }
        else {
            editingMessageObject = null;
        }
        for (int i = 0; i < childCount; ++i) {
            final View child = this.chatListView.getChildAt(i);
            if (child instanceof ChatMessageCell) {
                final ChatMessageCell chatMessageCell = (ChatMessageCell)child;
                final MessageObject messageObject = chatMessageCell.getMessageObject();
                final boolean actionModeShowed = super.actionBar.isActionModeShowed();
                final boolean b = true;
                boolean b2;
                boolean b3;
                if (actionModeShowed) {
                    chatMessageCell.setCheckBoxVisible(true, true);
                    int n2;
                    if (messageObject.getDialogId() == this.dialog_id) {
                        n2 = 0;
                    }
                    else {
                        n2 = 1;
                    }
                    if (messageObject != editingMessageObject && this.selectedMessagesIds[n2].indexOfKey(messageObject.getId()) < 0) {
                        chatMessageCell.setDrawSelectionBackground(false);
                        chatMessageCell.setChecked(false, false, true);
                        b2 = false;
                    }
                    else {
                        this.setCellSelectionBackground(messageObject, chatMessageCell, n2, true);
                        b2 = true;
                    }
                    b3 = true;
                }
                else {
                    chatMessageCell.setDrawSelectionBackground(false);
                    chatMessageCell.setCheckBoxVisible(false, true);
                    chatMessageCell.setChecked(false, false, true);
                    b3 = false;
                    b2 = false;
                }
                chatMessageCell.setMessageObject(chatMessageCell.getMessageObject(), chatMessageCell.getCurrentMessagesGroup(), chatMessageCell.isPinnedBottom(), chatMessageCell.isPinnedTop());
                if (chatMessageCell != this.scrimView) {
                    chatMessageCell.setCheckPressed(b3 ^ true, b3 && b2);
                }
                chatMessageCell.setHighlighted(this.highlightMessageId != Integer.MAX_VALUE && messageObject != null && messageObject.getId() == this.highlightMessageId);
                if (this.highlightMessageId != Integer.MAX_VALUE) {
                    this.startMessageUnselect();
                }
                final FrameLayout searchContainer = this.searchContainer;
                if (searchContainer != null && searchContainer.getVisibility() == 0 && DataQuery.getInstance(super.currentAccount).isMessageFound(messageObject.getId(), messageObject.getDialogId() == this.mergeDialogId && b) && DataQuery.getInstance(super.currentAccount).getLastSearchQuery() != null) {
                    chatMessageCell.setHighlightedText(DataQuery.getInstance(super.currentAccount).getLastSearchQuery());
                }
                else {
                    chatMessageCell.setHighlightedText(null);
                }
            }
            else if (child instanceof ChatActionCell) {
                final ChatActionCell chatActionCell = (ChatActionCell)child;
                chatActionCell.setMessageObject(chatActionCell.getMessageObject());
            }
        }
        this.chatListView.invalidate();
        if (n != -1) {
            this.chatLayoutManager.scrollToPositionWithOffset(n, this.chatListView.getMeasuredHeight() - this.chatListView.getPaddingBottom() - this.chatListView.getPaddingTop() - AndroidUtilities.dp(29.0f));
        }
    }
    
    public boolean allowGroupPhotos() {
        if (!this.isEditingMessageMedia()) {
            final TLRPC.EncryptedChat currentEncryptedChat = this.currentEncryptedChat;
            if (currentEncryptedChat == null || AndroidUtilities.getPeerLayerVersion(currentEncryptedChat.layer) >= 73) {
                return true;
            }
        }
        return false;
    }
    
    public boolean checkRecordLocked() {
        final ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null && chatActivityEnterView.isRecordLocked()) {
            final AlertDialog.Builder builder = new AlertDialog.Builder((Context)this.getParentActivity());
            if (this.chatActivityEnterView.isInVideoMode()) {
                builder.setTitle(LocaleController.getString("DiscardVideoMessageTitle", 2131559275));
                builder.setMessage(LocaleController.getString("DiscardVideoMessageDescription", 2131559274));
            }
            else {
                builder.setTitle(LocaleController.getString("DiscardVoiceMessageTitle", 2131559278));
                builder.setMessage(LocaleController.getString("DiscardVoiceMessageDescription", 2131559277));
            }
            builder.setPositiveButton(LocaleController.getString("DiscardVoiceMessageAction", 2131559276), (DialogInterface$OnClickListener)new _$$Lambda$ChatActivity$d4PnyMqJwfFc9tc5ei7XntK9KQI(this));
            builder.setNegativeButton(LocaleController.getString("Continue", 2131559153), null);
            this.showDialog(builder.create());
            return true;
        }
        return false;
    }
    
    @Override
    public View createView(Context progressView) {
        if (this.chatMessageCellsCache.isEmpty()) {
            for (int i = 0; i < 8; ++i) {
                this.chatMessageCellsCache.add(new ChatMessageCell((Context)progressView));
            }
        }
        for (int j = 1; j >= 0; --j) {
            this.selectedMessagesIds[j].clear();
            this.selectedMessagesCanCopyIds[j].clear();
            this.selectedMessagesCanStarIds[j].clear();
        }
        this.cantDeleteMessagesCount = 0;
        this.canEditMessagesCount = 0;
        this.cantForwardMessagesCount = 0;
        this.videoPlayerContainer = null;
        super.hasOwnBackground = true;
        final ChatAttachAlert chatAttachAlert = this.chatAttachAlert;
        Label_0139: {
            if (chatAttachAlert == null) {
                break Label_0139;
            }
            while (true) {
                try {
                    if (chatAttachAlert.isShowing()) {
                        this.chatAttachAlert.dismiss();
                    }
                    this.chatAttachAlert.onDestroy();
                    this.chatAttachAlert = null;
                    final StickersAdapter stickersAdapter = this.stickersAdapter;
                    if (stickersAdapter != null) {
                        stickersAdapter.onDestroy();
                        this.stickersAdapter = null;
                    }
                    Theme.createChatResources((Context)progressView, false);
                    super.actionBar.setAddToContainer(false);
                    if (super.inPreviewMode) {
                        super.actionBar.setBackButtonDrawable(null);
                    }
                    else {
                        super.actionBar.setBackButtonDrawable(new BackDrawable(false));
                    }
                    super.actionBar.setActionBarMenuOnItemClick((ActionBar.ActionBarMenuOnItemClick)new ActionBar.ActionBarMenuOnItemClick() {
                        @Override
                        public void onItemClick(int i) {
                            if (i == -1) {
                                if (ChatActivity.this.actionBar.isActionModeShowed()) {
                                    for (i = 1; i >= 0; --i) {
                                        ChatActivity.this.selectedMessagesIds[i].clear();
                                        ChatActivity.this.selectedMessagesCanCopyIds[i].clear();
                                        ChatActivity.this.selectedMessagesCanStarIds[i].clear();
                                    }
                                    ChatActivity.this.hideActionMode();
                                    ChatActivity.this.updatePinnedMessageView(true);
                                    ChatActivity.this.updateVisibleRows();
                                }
                                else {
                                    ChatActivity.this.finishFragment();
                                }
                            }
                            else if (i == 10) {
                                String string = "";
                                int j = 1;
                                i = 0;
                                while (j >= 0) {
                                    final ArrayList<Integer> list = (ArrayList<Integer>)new ArrayList<Comparable>();
                                    for (int k = 0; k < ChatActivity.this.selectedMessagesCanCopyIds[j].size(); ++k) {
                                        list.add(ChatActivity.this.selectedMessagesCanCopyIds[j].keyAt(k));
                                    }
                                    if (ChatActivity.this.currentEncryptedChat == null) {
                                        Collections.sort((List<Comparable>)list);
                                    }
                                    else {
                                        Collections.sort((List<T>)list, Collections.reverseOrder());
                                    }
                                    for (int l = 0; l < list.size(); ++l) {
                                        final MessageObject messageObject = (MessageObject)ChatActivity.this.selectedMessagesCanCopyIds[j].get((int)list.get(l));
                                        String string2 = string;
                                        if (string.length() != 0) {
                                            final StringBuilder sb = new StringBuilder();
                                            sb.append(string);
                                            sb.append("\n\n");
                                            string2 = sb.toString();
                                        }
                                        final StringBuilder sb2 = new StringBuilder();
                                        sb2.append(string2);
                                        final ChatActivity this$0 = ChatActivity.this;
                                        boolean b = false;
                                        Label_0353: {
                                            if (list.size() != 1) {
                                                final TLRPC.User currentUser = ChatActivity.this.currentUser;
                                                if (currentUser == null || !currentUser.self) {
                                                    b = true;
                                                    break Label_0353;
                                                }
                                            }
                                            b = false;
                                        }
                                        sb2.append(this$0.getMessageContent(messageObject, i, b));
                                        string = sb2.toString();
                                        i = messageObject.messageOwner.from_id;
                                    }
                                    --j;
                                }
                                if (string.length() != 0) {
                                    AndroidUtilities.addToClipboard(string);
                                }
                                for (i = 1; i >= 0; --i) {
                                    ChatActivity.this.selectedMessagesIds[i].clear();
                                    ChatActivity.this.selectedMessagesCanCopyIds[i].clear();
                                    ChatActivity.this.selectedMessagesCanStarIds[i].clear();
                                }
                                ChatActivity.this.hideActionMode();
                                ChatActivity.this.updatePinnedMessageView(true);
                                ChatActivity.this.updateVisibleRows();
                            }
                            else {
                                MessageObject messageObject2 = null;
                                if (i == 12) {
                                    if (ChatActivity.this.getParentActivity() == null) {
                                        return;
                                    }
                                    ChatActivity.this.createDeleteMessagesAlert(null, null);
                                }
                                else if (i == 11) {
                                    ChatActivity.this.openForward();
                                }
                                else if (i == 13) {
                                    if (ChatActivity.this.getParentActivity() == null) {
                                        return;
                                    }
                                    final ChatActivity this$2 = ChatActivity.this;
                                    this$2.showDialog(AlertsCreator.createTTLAlert((Context)this$2.getParentActivity(), ChatActivity.this.currentEncryptedChat).create());
                                }
                                else if (i != 15 && i != 16) {
                                    if (i == 17) {
                                        final ChatActivity this$3 = ChatActivity.this;
                                        if (this$3.currentUser == null || this$3.getParentActivity() == null) {
                                            return;
                                        }
                                        final String phone = ChatActivity.this.currentUser.phone;
                                        if (phone != null && phone.length() != 0) {
                                            final Bundle bundle = new Bundle();
                                            bundle.putInt("user_id", ChatActivity.this.currentUser.id);
                                            bundle.putBoolean("addContact", true);
                                            ChatActivity.this.presentFragment(new ContactAddActivity(bundle));
                                        }
                                        else {
                                            final ChatActivity this$4 = ChatActivity.this;
                                            this$4.shareMyContact(this$4.replyingMessageObject);
                                        }
                                    }
                                    else if (i == 18) {
                                        ChatActivity.this.toggleMute(false);
                                    }
                                    else if (i == 24) {
                                        try {
                                            DataQuery.getInstance(ChatActivity.this.currentAccount).installShortcut(ChatActivity.this.currentUser.id);
                                        }
                                        catch (Exception ex) {
                                            FileLog.e(ex);
                                        }
                                    }
                                    else if (i == 21) {
                                        AlertsCreator.createReportAlert((Context)ChatActivity.this.getParentActivity(), ChatActivity.this.dialog_id, 0, ChatActivity.this);
                                    }
                                    else if (i == 22) {
                                        int n;
                                        MessageObject messageObject3;
                                        for (i = 0; i < 2; ++i) {
                                            for (n = 0; n < ChatActivity.this.selectedMessagesCanStarIds[i].size(); ++n) {
                                                messageObject3 = (MessageObject)ChatActivity.this.selectedMessagesCanStarIds[i].valueAt(n);
                                                DataQuery.getInstance(ChatActivity.this.currentAccount).addRecentSticker(2, messageObject3, messageObject3.getDocument(), (int)(System.currentTimeMillis() / 1000L), ChatActivity.this.hasUnfavedSelected ^ true);
                                            }
                                        }
                                        for (i = 1; i >= 0; --i) {
                                            ChatActivity.this.selectedMessagesIds[i].clear();
                                            ChatActivity.this.selectedMessagesCanCopyIds[i].clear();
                                            ChatActivity.this.selectedMessagesCanStarIds[i].clear();
                                        }
                                        ChatActivity.this.hideActionMode();
                                        ChatActivity.this.updatePinnedMessageView(true);
                                        ChatActivity.this.updateVisibleRows();
                                    }
                                    else if (i == 23) {
                                        MessageObject messageObject4;
                                        ArrayList<Integer> list2;
                                        int n2;
                                        for (i = 1; i >= 0; --i, messageObject2 = messageObject4) {
                                            if ((messageObject4 = messageObject2) == null) {
                                                messageObject4 = messageObject2;
                                                if (ChatActivity.this.selectedMessagesIds[i].size() == 1) {
                                                    list2 = new ArrayList<Integer>();
                                                    for (n2 = 0; n2 < ChatActivity.this.selectedMessagesIds[i].size(); ++n2) {
                                                        list2.add(ChatActivity.this.selectedMessagesIds[i].keyAt(n2));
                                                    }
                                                    messageObject4 = (MessageObject)ChatActivity.this.messagesDict[i].get((int)list2.get(0));
                                                }
                                            }
                                            ChatActivity.this.selectedMessagesIds[i].clear();
                                            ChatActivity.this.selectedMessagesCanCopyIds[i].clear();
                                            ChatActivity.this.selectedMessagesCanStarIds[i].clear();
                                        }
                                        ChatActivity.this.startEditingMessageObject(messageObject2);
                                        ChatActivity.this.hideActionMode();
                                        ChatActivity.this.updatePinnedMessageView(true);
                                        ChatActivity.this.updateVisibleRows();
                                    }
                                    else if (i == 14) {
                                        if (ChatActivity.this.chatAttachAlert != null) {
                                            ChatActivity.this.chatAttachAlert.setEditingMessageObject(null);
                                        }
                                        ChatActivity.this.openAttachMenu();
                                    }
                                    else if (i == 30) {
                                        SendMessagesHelper.getInstance(ChatActivity.this.currentAccount).sendMessage("/help", ChatActivity.this.dialog_id, null, null, false, null, null, null);
                                    }
                                    else if (i == 31) {
                                        SendMessagesHelper.getInstance(ChatActivity.this.currentAccount).sendMessage("/settings", ChatActivity.this.dialog_id, null, null, false, null, null, null);
                                    }
                                    else if (i == 40) {
                                        ChatActivity.this.openSearchWithText(null);
                                    }
                                    else if (i == 32) {
                                        final ChatActivity this$5 = ChatActivity.this;
                                        if (this$5.currentUser != null && this$5.getParentActivity() != null) {
                                            final ChatActivity this$6 = ChatActivity.this;
                                            VoIPHelper.startCall(this$6.currentUser, this$6.getParentActivity(), MessagesController.getInstance(ChatActivity.this.currentAccount).getUserFull(ChatActivity.this.currentUser.id));
                                        }
                                    }
                                    else if (i == 50) {
                                        final ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                                        if (chatActivityEnterView != null) {
                                            chatActivityEnterView.getEditField().setSelectionOverride(ChatActivity.this.editTextStart, ChatActivity.this.editTextEnd);
                                            ChatActivity.this.chatActivityEnterView.getEditField().makeSelectedBold();
                                        }
                                    }
                                    else if (i == 51) {
                                        final ChatActivityEnterView chatActivityEnterView2 = ChatActivity.this.chatActivityEnterView;
                                        if (chatActivityEnterView2 != null) {
                                            chatActivityEnterView2.getEditField().setSelectionOverride(ChatActivity.this.editTextStart, ChatActivity.this.editTextEnd);
                                            ChatActivity.this.chatActivityEnterView.getEditField().makeSelectedItalic();
                                        }
                                    }
                                    else if (i == 52) {
                                        final ChatActivityEnterView chatActivityEnterView3 = ChatActivity.this.chatActivityEnterView;
                                        if (chatActivityEnterView3 != null) {
                                            chatActivityEnterView3.getEditField().setSelectionOverride(ChatActivity.this.editTextStart, ChatActivity.this.editTextEnd);
                                            ChatActivity.this.chatActivityEnterView.getEditField().makeSelectedMono();
                                        }
                                    }
                                    else if (i == 53) {
                                        final ChatActivityEnterView chatActivityEnterView4 = ChatActivity.this.chatActivityEnterView;
                                        if (chatActivityEnterView4 != null) {
                                            chatActivityEnterView4.getEditField().setSelectionOverride(ChatActivity.this.editTextStart, ChatActivity.this.editTextEnd);
                                            ChatActivity.this.chatActivityEnterView.getEditField().makeSelectedUrl();
                                        }
                                    }
                                    else if (i == 54) {
                                        final ChatActivityEnterView chatActivityEnterView5 = ChatActivity.this.chatActivityEnterView;
                                        if (chatActivityEnterView5 != null) {
                                            chatActivityEnterView5.getEditField().setSelectionOverride(ChatActivity.this.editTextStart, ChatActivity.this.editTextEnd);
                                            ChatActivity.this.chatActivityEnterView.getEditField().makeSelectedRegular();
                                        }
                                    }
                                }
                                else {
                                    if (ChatActivity.this.getParentActivity() == null) {
                                        return;
                                    }
                                    final boolean b2 = (int)ChatActivity.this.dialog_id < 0 && (int)(ChatActivity.this.dialog_id >> 32) != 1;
                                    final ChatActivity this$7 = ChatActivity.this;
                                    final boolean b3 = i == 15;
                                    final ChatActivity this$8 = ChatActivity.this;
                                    AlertsCreator.createClearOrDeleteDialogAlert(this$7, b3, this$8.currentChat, this$8.currentUser, this$8.currentEncryptedChat != null, new _$$Lambda$ChatActivity$5$b9Ik29mFvRs1ApO4Eb84R_wHrMg(this, i, b2));
                                }
                            }
                        }
                    });
                    this.avatarContainer = new ChatAvatarContainer((Context)progressView, this, this.currentEncryptedChat != null);
                    if (super.inPreviewMode) {
                        this.avatarContainer.setOccupyStatusBar(false);
                    }
                    final ActionBar actionBar = super.actionBar;
                    final ChatAvatarContainer avatarContainer = this.avatarContainer;
                    float n;
                    if (!super.inPreviewMode) {
                        n = 56.0f;
                    }
                    else {
                        n = 0.0f;
                    }
                    actionBar.addView((View)avatarContainer, 0, (ViewGroup$LayoutParams)LayoutHelper.createFrame(-2, -1.0f, 51, n, 0.0f, 40.0f, 0.0f));
                    final TLRPC.Chat currentChat = this.currentChat;
                    Label_0418: {
                        if (currentChat != null && !ChatObject.isChannel(currentChat)) {
                            int n2 = this.currentChat.participants_count;
                            final TLRPC.ChatFull chatInfo = this.chatInfo;
                            if (chatInfo != null) {
                                n2 = chatInfo.participants.participants.size();
                            }
                            if (n2 != 0) {
                                final TLRPC.Chat currentChat2 = this.currentChat;
                                if (!currentChat2.deactivated && !currentChat2.left && !(currentChat2 instanceof TLRPC.TL_chatForbidden)) {
                                    final TLRPC.ChatFull chatInfo2 = this.chatInfo;
                                    if (chatInfo2 == null || !(chatInfo2.participants instanceof TLRPC.TL_chatParticipantsForbidden)) {
                                        break Label_0418;
                                    }
                                }
                            }
                            this.avatarContainer.setEnabled(false);
                        }
                    }
                    final ActionBarMenu menu = super.actionBar.createMenu();
                    if (this.currentEncryptedChat == null && !this.isBroadcast) {
                        (this.searchItem = menu.addItem(0, 2131165419).setIsSearchField(true).setActionBarMenuItemSearchListener((ActionBarMenuItem.ActionBarMenuItemSearchListener)new ActionBarMenuItem.ActionBarMenuItemSearchListener() {
                            boolean searchWas;
                            
                            @Override
                            public boolean forceShowClear() {
                                return ChatActivity.this.searchingForUser;
                            }
                            
                            @Override
                            public void onCaptionCleared() {
                                if (ChatActivity.this.searchingUserMessages != null) {
                                    ChatActivity.this.searchUserButton.callOnClick();
                                }
                                else {
                                    if (ChatActivity.this.searchingForUser) {
                                        ChatActivity.this.mentionsAdapter.searchUsernameOrHashtag(null, 0, null, false);
                                        ChatActivity.this.searchingForUser = false;
                                        ChatActivity.this.searchItem.setSearchFieldText("", true);
                                    }
                                    ChatActivity.this.searchItem.setSearchFieldHint(LocaleController.getString("Search", 2131560640));
                                    ChatActivity.this.searchCalendarButton.setVisibility(0);
                                    ChatActivity.this.searchUserButton.setVisibility(0);
                                    ChatActivity.this.searchingUserMessages = null;
                                }
                            }
                            
                            @Override
                            public void onSearchCollapse() {
                                ChatActivity.this.searchCalendarButton.setVisibility(0);
                                if (ChatActivity.this.searchUserButton != null) {
                                    ChatActivity.this.searchUserButton.setVisibility(0);
                                }
                                if (ChatActivity.this.searchingForUser) {
                                    ChatActivity.this.mentionsAdapter.searchUsernameOrHashtag(null, 0, null, false);
                                    ChatActivity.this.searchingForUser = false;
                                }
                                ChatActivity.this.mentionLayoutManager.setReverseLayout(false);
                                ChatActivity.this.mentionsAdapter.setSearchingMentions(false);
                                ChatActivity.this.searchingUserMessages = null;
                                ChatActivity.this.searchItem.setSearchFieldHint(LocaleController.getString("Search", 2131560640));
                                ChatActivity.this.searchItem.setSearchFieldCaption(null);
                                ChatActivity.this.avatarContainer.setVisibility(0);
                                if (ChatActivity.this.editTextItem.getTag() != null) {
                                    if (ChatActivity.this.headerItem != null) {
                                        ChatActivity.this.headerItem.setVisibility(8);
                                        ChatActivity.this.editTextItem.setVisibility(0);
                                        ChatActivity.this.attachItem.setVisibility(8);
                                    }
                                }
                                else if (ChatActivity.this.chatActivityEnterView.hasText()) {
                                    if (ChatActivity.this.headerItem != null) {
                                        ChatActivity.this.headerItem.setVisibility(8);
                                        ChatActivity.this.editTextItem.setVisibility(8);
                                        ChatActivity.this.attachItem.setVisibility(0);
                                    }
                                }
                                else if (ChatActivity.this.headerItem != null) {
                                    ChatActivity.this.headerItem.setVisibility(0);
                                    ChatActivity.this.editTextItem.setVisibility(8);
                                    ChatActivity.this.attachItem.setVisibility(8);
                                }
                                ChatActivity.this.searchItem.setVisibility(8);
                                ChatActivity.this.removeSelectedMessageHighlight();
                                ChatActivity.this.updateBottomOverlay();
                                ChatActivity.this.updatePinnedMessageView(true);
                                ChatActivity.this.updateVisibleRows();
                            }
                            
                            @Override
                            public void onSearchExpand() {
                                if (!ChatActivity.this.openSearchKeyboard) {
                                    return;
                                }
                                AndroidUtilities.runOnUIThread(new _$$Lambda$ChatActivity$6$VwW_X3TtST6j3twN7e_r2fP0YGk(this), 300L);
                            }
                            
                            @Override
                            public void onSearchPressed(final EditText editText) {
                                this.searchWas = true;
                                ChatActivity.this.updateSearchButtons(0, 0, -1);
                                DataQuery.getInstance(ChatActivity.this.currentAccount).searchMessagesInChat(editText.getText().toString(), ChatActivity.this.dialog_id, ChatActivity.this.mergeDialogId, ChatActivity.this.classGuid, 0, ChatActivity.this.searchingUserMessages);
                            }
                            
                            @Override
                            public void onTextChanged(final EditText editText) {
                                if (ChatActivity.this.searchingForUser) {
                                    final MentionsAdapter access$5800 = ChatActivity.this.mentionsAdapter;
                                    final StringBuilder sb = new StringBuilder();
                                    sb.append("@");
                                    sb.append(editText.getText().toString());
                                    access$5800.searchUsernameOrHashtag(sb.toString(), 0, ChatActivity.this.messages, true);
                                }
                                else if (!ChatActivity.this.searchingForUser && ChatActivity.this.searchingUserMessages == null && ChatActivity.this.searchUserButton != null && TextUtils.equals((CharSequence)editText.getText(), (CharSequence)LocaleController.getString("SearchFrom", 2131560647))) {
                                    ChatActivity.this.searchUserButton.callOnClick();
                                }
                            }
                        })).setSearchFieldHint(LocaleController.getString("Search", 2131560640));
                        this.searchItem.setVisibility(8);
                    }
                    (this.headerItem = menu.addItem(0, 2131165416)).setContentDescription((CharSequence)LocaleController.getString("AccDescrMoreOptions", 2131558443));
                    if (this.currentUser != null) {
                        this.headerItem.addSubItem(32, 2131165616, LocaleController.getString("Call", 2131558869));
                        final TLRPC.UserFull userFull = MessagesController.getInstance(super.currentAccount).getUserFull(this.currentUser.id);
                        if (userFull != null && userFull.phone_calls_available) {
                            this.headerItem.showSubItem(32);
                        }
                        else {
                            this.headerItem.hideSubItem(32);
                        }
                    }
                    (this.editTextItem = menu.addItem(0, 2131165416)).setTag((Object)null);
                    this.editTextItem.setVisibility(8);
                    final SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder((CharSequence)LocaleController.getString("Bold", 2131558847));
                    spannableStringBuilder.setSpan((Object)new TypefaceSpan(AndroidUtilities.getTypeface("fonts/rmedium.ttf")), 0, spannableStringBuilder.length(), 33);
                    this.editTextItem.addSubItem(50, (CharSequence)spannableStringBuilder);
                    final SpannableStringBuilder spannableStringBuilder2 = new SpannableStringBuilder((CharSequence)LocaleController.getString("Italic", 2131559701));
                    spannableStringBuilder2.setSpan((Object)new TypefaceSpan(AndroidUtilities.getTypeface("fonts/ritalic.ttf")), 0, spannableStringBuilder2.length(), 33);
                    this.editTextItem.addSubItem(51, (CharSequence)spannableStringBuilder2);
                    final SpannableStringBuilder spannableStringBuilder3 = new SpannableStringBuilder((CharSequence)LocaleController.getString("Mono", 2131559876));
                    spannableStringBuilder3.setSpan((Object)new TypefaceSpan(Typeface.MONOSPACE), 0, spannableStringBuilder3.length(), 33);
                    this.editTextItem.addSubItem(52, (CharSequence)spannableStringBuilder3);
                    this.editTextItem.addSubItem(53, LocaleController.getString("CreateLink", 2131559169));
                    this.editTextItem.addSubItem(54, LocaleController.getString("Regular", 2131560552));
                    if (this.searchItem != null) {
                        this.headerItem.addSubItem(40, 2131165669, LocaleController.getString("Search", 2131560640));
                    }
                    final TLRPC.Chat currentChat3 = this.currentChat;
                    if (currentChat3 != null && !currentChat3.creator) {
                        this.headerItem.addSubItem(21, 2131165660, LocaleController.getString("ReportChat", 2131560568));
                    }
                    if (this.currentUser != null) {
                        this.addContactItem = this.headerItem.addSubItem(17, 2131165612, "");
                    }
                    if (this.currentEncryptedChat != null) {
                        this.timeItem2 = (View)this.headerItem.addSubItem(13, 2131165675, LocaleController.getString("SetTimer", 2131560737));
                    }
                    Label_1024: {
                        if (ChatObject.isChannel(this.currentChat)) {
                            final TLRPC.Chat currentChat4 = this.currentChat;
                            if (currentChat4 == null || !currentChat4.megagroup || !TextUtils.isEmpty((CharSequence)currentChat4.username)) {
                                break Label_1024;
                            }
                        }
                        this.headerItem.addSubItem(15, 2131165619, LocaleController.getString("ClearHistory", 2131559107));
                    }
                    final TLRPC.User currentUser = this.currentUser;
                    if (currentUser == null || !currentUser.self) {
                        this.muteItem = this.headerItem.addSubItem(18, 2131165648, null);
                    }
                    Label_1223: {
                        if (ChatObject.isChannel(this.currentChat)) {
                            final TLRPC.Chat currentChat5 = this.currentChat;
                            if (!currentChat5.creator) {
                                if (ChatObject.isNotInChat(currentChat5)) {
                                    break Label_1223;
                                }
                                if (this.currentChat.megagroup) {
                                    this.headerItem.addSubItem(16, 2131165639, LocaleController.getString("DeleteAndExit", 2131559234));
                                    break Label_1223;
                                }
                                this.headerItem.addSubItem(16, 2131165639, LocaleController.getString("LeaveChannelMenu", 2131559745));
                                break Label_1223;
                            }
                        }
                        if (!ChatObject.isChannel(this.currentChat)) {
                            if (this.currentChat != null && !this.isBroadcast) {
                                this.headerItem.addSubItem(16, 2131165639, LocaleController.getString("DeleteAndExit", 2131559234));
                            }
                            else {
                                this.headerItem.addSubItem(16, 2131165623, LocaleController.getString("DeleteChatUser", 2131559240));
                            }
                        }
                    }
                    final TLRPC.User currentUser2 = this.currentUser;
                    if (currentUser2 != null && currentUser2.self) {
                        this.headerItem.addSubItem(24, 2131165633, LocaleController.getString("AddShortcut", 2131558583));
                    }
                    final TLRPC.User currentUser3 = this.currentUser;
                    if (currentUser3 != null && this.currentEncryptedChat == null && currentUser3.bot) {
                        this.headerItem.addSubItem(31, 2131165596, LocaleController.getString("BotSettings", 2131558855));
                        this.headerItem.addSubItem(30, 2131165582, LocaleController.getString("BotHelp", 2131558850));
                        this.updateBotButtons();
                    }
                    this.updateTitle();
                    this.avatarContainer.updateOnlineCount();
                    this.avatarContainer.updateSubtitle();
                    this.updateTitleIcons();
                    (this.attachItem = menu.addItem(14, 2131165416).setOverrideMenuClick(true).setAllowCloseAnimation(false)).setVisibility(8);
                    this.actionModeViews.clear();
                    if (super.inPreviewMode) {
                        this.headerItem.setAlpha(0.0f);
                        this.attachItem.setAlpha(0.0f);
                    }
                    final ActionBarMenu actionMode = super.actionBar.createActionMode();
                    (this.selectedMessagesCountTextView = new NumberTextView(actionMode.getContext())).setTextSize(18);
                    this.selectedMessagesCountTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                    this.selectedMessagesCountTextView.setTextColor(Theme.getColor("actionBarActionModeDefaultIcon"));
                    actionMode.addView((View)this.selectedMessagesCountTextView, (ViewGroup$LayoutParams)LayoutHelper.createLinear(0, -1, 1.0f, 65, 0, 0, 0));
                    this.selectedMessagesCountTextView.setOnTouchListener((View$OnTouchListener)_$$Lambda$ChatActivity$NimgLxaIUxUA1P59a4CSYNRrn9s.INSTANCE);
                    if (this.currentEncryptedChat == null) {
                        this.actionModeViews.add((View)actionMode.addItemWithWidth(23, 2131165625, AndroidUtilities.dp(54.0f), LocaleController.getString("Edit", 2131559301)));
                        this.actionModeViews.add((View)actionMode.addItemWithWidth(22, 2131165626, AndroidUtilities.dp(54.0f), LocaleController.getString("AddToFavorites", 2131558591)));
                        this.actionModeViews.add((View)actionMode.addItemWithWidth(10, 2131165622, AndroidUtilities.dp(54.0f), LocaleController.getString("Copy", 2131559163)));
                        this.actionModeViews.add((View)actionMode.addItemWithWidth(11, 2131165627, AndroidUtilities.dp(54.0f), LocaleController.getString("Forward", 2131559504)));
                        this.actionModeViews.add((View)actionMode.addItemWithWidth(12, 2131165623, AndroidUtilities.dp(54.0f), LocaleController.getString("Delete", 2131559227)));
                    }
                    else {
                        this.actionModeViews.add((View)actionMode.addItemWithWidth(23, 2131165625, AndroidUtilities.dp(54.0f), LocaleController.getString("Edit", 2131559301)));
                        this.actionModeViews.add((View)actionMode.addItemWithWidth(22, 2131165626, AndroidUtilities.dp(54.0f), LocaleController.getString("AddToFavorites", 2131558591)));
                        this.actionModeViews.add((View)actionMode.addItemWithWidth(10, 2131165622, AndroidUtilities.dp(54.0f), LocaleController.getString("Copy", 2131559163)));
                        this.actionModeViews.add((View)actionMode.addItemWithWidth(12, 2131165623, AndroidUtilities.dp(54.0f), LocaleController.getString("Delete", 2131559227)));
                    }
                    final ActionBarMenuItem item = actionMode.getItem(23);
                    int visibility;
                    if (this.canEditMessagesCount == 1 && this.selectedMessagesIds[0].size() + this.selectedMessagesIds[1].size() == 1) {
                        visibility = 0;
                    }
                    else {
                        visibility = 8;
                    }
                    item.setVisibility(visibility);
                    final ActionBarMenuItem item2 = actionMode.getItem(10);
                    int visibility2;
                    if (this.selectedMessagesCanCopyIds[0].size() + this.selectedMessagesCanCopyIds[1].size() != 0) {
                        visibility2 = 0;
                    }
                    else {
                        visibility2 = 8;
                    }
                    item2.setVisibility(visibility2);
                    final ActionBarMenuItem item3 = actionMode.getItem(22);
                    int visibility3;
                    if (this.selectedMessagesCanStarIds[0].size() + this.selectedMessagesCanStarIds[1].size() != 0) {
                        visibility3 = 0;
                    }
                    else {
                        visibility3 = 8;
                    }
                    item3.setVisibility(visibility3);
                    final ActionBarMenuItem item4 = actionMode.getItem(12);
                    int visibility4;
                    if (this.cantDeleteMessagesCount == 0) {
                        visibility4 = 0;
                    }
                    else {
                        visibility4 = 8;
                    }
                    item4.setVisibility(visibility4);
                    this.checkActionBarMenu();
                    this.scrimPaint = new Paint() {
                        public void setAlpha(final int alpha) {
                            super.setAlpha(alpha);
                            if (ChatActivity.this.fragmentView != null) {
                                ChatActivity.this.fragmentView.invalidate();
                            }
                        }
                    };
                    super.fragmentView = (View)new SizeNotifierFrameLayout(progressView) {
                        ArrayList<ChatMessageCell> drawCaptionAfter = new ArrayList<ChatMessageCell>();
                        ArrayList<ChatMessageCell> drawNamesAfter = new ArrayList<ChatMessageCell>();
                        ArrayList<ChatMessageCell> drawTimeAfter = new ArrayList<ChatMessageCell>();
                        int inputFieldHeight = 0;
                        
                        private void drawChildElement(final Canvas canvas, final float n, final ChatMessageCell chatMessageCell, final int n2) {
                            canvas.save();
                            canvas.clipRect((float)ChatActivity.this.chatListView.getLeft(), n, (float)ChatActivity.this.chatListView.getRight(), ChatActivity.this.chatListView.getY() + ChatActivity.this.chatListView.getMeasuredHeight());
                            canvas.translate((float)(ChatActivity.this.chatListView.getLeft() + chatMessageCell.getLeft()), ChatActivity.this.chatListView.getY() + chatMessageCell.getTop());
                            if (n2 == 0) {
                                chatMessageCell.drawTime(canvas);
                            }
                            else {
                                boolean b = true;
                                if (n2 == 1) {
                                    chatMessageCell.drawNamesLayout(canvas);
                                }
                                else {
                                    if ((chatMessageCell.getCurrentPosition().flags & 0x1) != 0x0) {
                                        b = false;
                                    }
                                    chatMessageCell.drawCaptionLayout(canvas, b);
                                }
                            }
                            canvas.restore();
                        }
                        
                        protected void dispatchDraw(final Canvas canvas) {
                            super.dispatchDraw(canvas);
                            if (ChatActivity.this.scrimView != null) {
                                canvas.drawRect(0.0f, 0.0f, (float)this.getMeasuredWidth(), (float)this.getMeasuredHeight(), ChatActivity.this.scrimPaint);
                                ChatActivity.this.chatListView.getY();
                                ChatActivity.this.chatListView.getMeasuredHeight();
                                final int n = ChatActivity.this.chatListView.getTop() + ChatActivity.this.chatListView.getPaddingTop() - AndroidUtilities.dp(4.0f) + (ChatActivity.this.chatActivityEnterView.getMeasuredHeight() - AndroidUtilities.dp(51.0f));
                                MessageObject.GroupedMessages currentMessagesGroup;
                                if (ChatActivity.this.scrimView instanceof ChatMessageCell) {
                                    currentMessagesGroup = ((ChatMessageCell)ChatActivity.this.scrimView).getCurrentMessagesGroup();
                                }
                                else {
                                    currentMessagesGroup = null;
                                }
                                final int childCount = ChatActivity.this.chatListView.getChildCount();
                                final int n2 = 0;
                                for (int i = 0; i < childCount; ++i) {
                                    final View child = ChatActivity.this.chatListView.getChildAt(i);
                                    ChatMessageCell e;
                                    MessageObject.GroupedMessages currentMessagesGroup2;
                                    MessageObject.GroupedMessagePosition currentPosition;
                                    if (child instanceof ChatMessageCell) {
                                        e = (ChatMessageCell)child;
                                        currentMessagesGroup2 = e.getCurrentMessagesGroup();
                                        currentPosition = e.getCurrentPosition();
                                    }
                                    else {
                                        e = null;
                                        currentMessagesGroup2 = null;
                                        currentPosition = null;
                                    }
                                    if (child != ChatActivity.this.scrimView) {
                                        if (currentMessagesGroup == null) {
                                            continue;
                                        }
                                        if (currentMessagesGroup != currentMessagesGroup2) {
                                            continue;
                                        }
                                    }
                                    int backgroundDrawableLeft = 0;
                                    int n3 = 0;
                                    Label_0341: {
                                        Label_0338: {
                                            if (currentPosition != null) {
                                                final int pw = currentPosition.pw;
                                                final int spanSize = currentPosition.spanSize;
                                                if (pw != spanSize && spanSize == 1000 && currentPosition.siblingHeights == null && currentMessagesGroup2.hasSibling) {
                                                    backgroundDrawableLeft = e.getBackgroundDrawableLeft();
                                                    break Label_0338;
                                                }
                                                if (currentPosition.siblingHeights != null) {
                                                    n3 = child.getBottom() - AndroidUtilities.dp((float)((e.isPinnedBottom() ? 1 : 0) + 1));
                                                    backgroundDrawableLeft = 0;
                                                    break Label_0341;
                                                }
                                            }
                                            backgroundDrawableLeft = 0;
                                        }
                                        n3 = 0;
                                    }
                                    float n4;
                                    float n5;
                                    float n6;
                                    float n7;
                                    if (backgroundDrawableLeft != 0) {
                                        final float b = ChatActivity.this.chatListView.getLeft() + backgroundDrawableLeft + child.getTranslationX();
                                        final float b2 = (float)(ChatActivity.this.chatListView.getTop() + child.getTop());
                                        n4 = Math.max((float)ChatActivity.this.chatListView.getLeft(), b);
                                        n5 = Math.max((float)n, b2);
                                        n6 = Math.min((float)ChatActivity.this.chatListView.getRight(), b + child.getMeasuredWidth());
                                        n7 = Math.min(ChatActivity.this.chatListView.getY() + ChatActivity.this.chatListView.getMeasuredHeight(), ChatActivity.this.chatListView.getY() + child.getTop() + child.getMeasuredHeight());
                                    }
                                    else if (n3 != 0) {
                                        final float b3 = ChatActivity.this.chatListView.getLeft() + child.getTranslationX();
                                        final float b4 = (float)(ChatActivity.this.chatListView.getTop() + child.getTop());
                                        n4 = Math.max((float)ChatActivity.this.chatListView.getLeft(), b3);
                                        n5 = Math.max((float)n, b4);
                                        n6 = Math.min((float)ChatActivity.this.chatListView.getRight(), b3 + child.getMeasuredWidth());
                                        n7 = Math.min(ChatActivity.this.chatListView.getY() + ChatActivity.this.chatListView.getMeasuredHeight(), ChatActivity.this.chatListView.getY() + n3);
                                    }
                                    else {
                                        n4 = Math.max((float)ChatActivity.this.chatListView.getLeft(), ChatActivity.this.chatListView.getLeft() + child.getX());
                                        n5 = Math.max((float)n, ChatActivity.this.chatListView.getTop() + child.getY());
                                        n6 = Math.min((float)ChatActivity.this.chatListView.getRight(), ChatActivity.this.chatListView.getLeft() + child.getX() + child.getMeasuredWidth());
                                        n7 = Math.min(ChatActivity.this.chatListView.getY() + ChatActivity.this.chatListView.getMeasuredHeight(), ChatActivity.this.chatListView.getY() + child.getY() + child.getMeasuredHeight());
                                    }
                                    if (n5 < n7) {
                                        canvas.save();
                                        canvas.clipRect(n4, n5, n6, n7);
                                        canvas.translate((float)(ChatActivity.this.chatListView.getLeft() + child.getLeft()), ChatActivity.this.chatListView.getY() + child.getTop());
                                        child.draw(canvas);
                                        canvas.restore();
                                    }
                                    if (currentPosition != null) {
                                        if (currentPosition.last || (currentPosition.minX == 0 && currentPosition.minY == 0)) {
                                            if (currentPosition.last) {
                                                this.drawTimeAfter.add(e);
                                            }
                                            if (currentPosition.minX == 0 && currentPosition.minY == 0 && e.hasNameLayout()) {
                                                this.drawNamesAfter.add(e);
                                            }
                                        }
                                        if (e.hasCaptionLayout() && (currentPosition.flags & 0x8) != 0x0) {
                                            this.drawCaptionAfter.add(e);
                                        }
                                    }
                                }
                                final int size = this.drawTimeAfter.size();
                                if (size > 0) {
                                    for (int j = 0; j < size; ++j) {
                                        this.drawChildElement(canvas, (float)n, this.drawTimeAfter.get(j), 0);
                                    }
                                    this.drawTimeAfter.clear();
                                }
                                final int size2 = this.drawNamesAfter.size();
                                if (size2 > 0) {
                                    for (int k = 0; k < size2; ++k) {
                                        this.drawChildElement(canvas, (float)n, this.drawNamesAfter.get(k), 1);
                                    }
                                    this.drawNamesAfter.clear();
                                }
                                final int size3 = this.drawCaptionAfter.size();
                                if (size3 > 0) {
                                    for (int l = n2; l < size3; ++l) {
                                        final ChatMessageCell chatMessageCell = this.drawCaptionAfter.get(l);
                                        if (chatMessageCell.getCurrentPosition() != null) {
                                            this.drawChildElement(canvas, (float)n, chatMessageCell, 2);
                                        }
                                    }
                                    this.drawCaptionAfter.clear();
                                }
                                if (ChatActivity.this.pagedownButton != null && ChatActivity.this.pagedownButton.getTag() != null) {
                                    super.drawChild(canvas, (View)ChatActivity.this.pagedownButton, SystemClock.uptimeMillis());
                                }
                                if (ChatActivity.this.mentiondownButton != null && ChatActivity.this.mentiondownButton.getTag() != null) {
                                    super.drawChild(canvas, (View)ChatActivity.this.mentiondownButton, SystemClock.uptimeMillis());
                                }
                                if (ChatActivity.this.floatingDateView != null && ChatActivity.this.floatingDateView.getTag() != null) {
                                    super.drawChild(canvas, (View)ChatActivity.this.floatingDateView, SystemClock.uptimeMillis());
                                }
                            }
                        }
                        
                        public boolean dispatchTouchEvent(final MotionEvent motionEvent) {
                            if (ChatActivity.this.scrimView == null) {
                                final ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                                if (chatActivityEnterView == null || !chatActivityEnterView.isStickersExpanded() || motionEvent.getY() >= ChatActivity.this.chatActivityEnterView.getY()) {
                                    return super.dispatchTouchEvent(motionEvent);
                                }
                            }
                            return false;
                        }
                        
                        protected boolean drawChild(final Canvas canvas, final View view, final long n) {
                            final View access$7800 = ChatActivity.this.scrimView;
                            final int n2 = 0;
                            final int n3 = 0;
                            if (access$7800 != null && (view == ChatActivity.this.pagedownButton || view == ChatActivity.this.mentiondownButton || view == ChatActivity.this.floatingDateView)) {
                                return false;
                            }
                            final MessageObject playingMessageObject = MediaController.getInstance().getPlayingMessageObject();
                            boolean b = false;
                            boolean b2 = false;
                            Label_0118: {
                                Label_0115: {
                                    if (playingMessageObject != null && playingMessageObject.eventId == 0L) {
                                        final boolean roundVideo = playingMessageObject.isRoundVideo();
                                        if (!roundVideo) {
                                            b = roundVideo;
                                            if (!playingMessageObject.isVideo()) {
                                                break Label_0115;
                                            }
                                        }
                                        b2 = true;
                                        b = roundVideo;
                                        break Label_0118;
                                    }
                                    b = false;
                                }
                                b2 = false;
                            }
                            boolean b3;
                            if (view == ChatActivity.this.videoPlayerContainer) {
                                if (playingMessageObject != null && playingMessageObject.type == 5) {
                                    if (Theme.chat_roundVideoShadow != null && ChatActivity.this.aspectRatioFrameLayout.isDrawingReady()) {
                                        final int n4 = (int)view.getX() - AndroidUtilities.dp(3.0f);
                                        final int n5 = (int)view.getY() - AndroidUtilities.dp(2.0f);
                                        Theme.chat_roundVideoShadow.setAlpha(255);
                                        Theme.chat_roundVideoShadow.setBounds(n4, n5, AndroidUtilities.roundMessageSize + n4 + AndroidUtilities.dp(6.0f), AndroidUtilities.roundMessageSize + n5 + AndroidUtilities.dp(6.0f));
                                        Theme.chat_roundVideoShadow.draw(canvas);
                                    }
                                    b3 = super.drawChild(canvas, view, n);
                                }
                                else if (view.getTag() == null) {
                                    final float translationY = view.getTranslationY();
                                    view.setTranslationY((float)(-AndroidUtilities.dp(1000.0f)));
                                    b3 = super.drawChild(canvas, view, n);
                                    view.setTranslationY(translationY);
                                }
                                else {
                                    b3 = false;
                                }
                            }
                            else {
                                final boolean drawChild = super.drawChild(canvas, view, n);
                                if (b2 && view == ChatActivity.this.chatListView && playingMessageObject.type != 5 && ChatActivity.this.videoPlayerContainer != null && ChatActivity.this.videoPlayerContainer.getTag() != null) {
                                    super.drawChild(canvas, (View)ChatActivity.this.videoPlayerContainer, n);
                                    if (ChatActivity.this.drawLaterRoundProgressCell != null) {
                                        canvas.save();
                                        canvas.translate(ChatActivity.this.drawLaterRoundProgressCell.getX(), ChatActivity.this.drawLaterRoundProgressCell.getTop() + ChatActivity.this.chatListView.getY());
                                        if (b) {
                                            ChatActivity.this.drawLaterRoundProgressCell.drawRoundProgress(canvas);
                                            ChatActivity.this.drawLaterRoundProgressCell.drawOverlays(canvas);
                                        }
                                        else {
                                            ChatActivity.this.drawLaterRoundProgressCell.drawOverlays(canvas);
                                            if (ChatActivity.this.drawLaterRoundProgressCell.needDrawTime()) {
                                                ChatActivity.this.drawLaterRoundProgressCell.drawTime(canvas);
                                            }
                                        }
                                        canvas.restore();
                                    }
                                }
                                b3 = drawChild;
                            }
                            if (view == ChatActivity.this.actionBar && ChatActivity.this.parentLayout != null) {
                                final ActionBarLayout access$7801 = ChatActivity.this.parentLayout;
                                int n6 = n2;
                                if (ChatActivity.this.actionBar.getVisibility() == 0) {
                                    final int measuredHeight = ChatActivity.this.actionBar.getMeasuredHeight();
                                    int statusBarHeight = n3;
                                    if (ChatActivity.this.inPreviewMode) {
                                        statusBarHeight = n3;
                                        if (Build$VERSION.SDK_INT >= 21) {
                                            statusBarHeight = AndroidUtilities.statusBarHeight;
                                        }
                                    }
                                    n6 = statusBarHeight + measuredHeight;
                                }
                                access$7801.drawHeaderShadow(canvas, n6);
                            }
                            return b3;
                        }
                        
                        @Override
                        protected boolean isActionBarVisible() {
                            return ChatActivity.this.actionBar.getVisibility() == 0;
                        }
                        
                        protected void onAttachedToWindow() {
                            super.onAttachedToWindow();
                            final MessageObject playingMessageObject = MediaController.getInstance().getPlayingMessageObject();
                            if (playingMessageObject != null && (playingMessageObject.isRoundVideo() || playingMessageObject.isVideo()) && playingMessageObject.eventId == 0L && playingMessageObject.getDialogId() == ChatActivity.this.dialog_id) {
                                MediaController.getInstance().setTextureView(ChatActivity.this.createTextureView(false), ChatActivity.this.aspectRatioFrameLayout, ChatActivity.this.videoPlayerContainer, true);
                            }
                        }
                        
                        @Override
                        protected void onLayout(final boolean b, final int n, final int n2, final int n3, final int n4) {
                            final int childCount = this.getChildCount();
                            int emojiPadding;
                            if (this.getKeyboardHeight() <= AndroidUtilities.dp(20.0f) && !AndroidUtilities.isInMultiwindow) {
                                emojiPadding = ChatActivity.this.chatActivityEnterView.getEmojiPadding();
                            }
                            else {
                                emojiPadding = 0;
                            }
                            this.setBottomClip(emojiPadding);
                            for (int i = 0; i < childCount; ++i) {
                                final View child = this.getChildAt(i);
                                if (child != null) {
                                    if (child.getVisibility() != 8) {
                                        final FrameLayout$LayoutParams frameLayout$LayoutParams = (FrameLayout$LayoutParams)child.getLayoutParams();
                                        final int measuredWidth = child.getMeasuredWidth();
                                        final int measuredHeight = child.getMeasuredHeight();
                                        int gravity;
                                        if ((gravity = frameLayout$LayoutParams.gravity) == -1) {
                                            gravity = 51;
                                        }
                                        final int n5 = gravity & 0x70;
                                        final int n6 = gravity & 0x7 & 0x7;
                                        int leftMargin = 0;
                                        Label_0217: {
                                            int n7;
                                            int n8;
                                            if (n6 != 1) {
                                                if (n6 != 5) {
                                                    leftMargin = frameLayout$LayoutParams.leftMargin;
                                                    break Label_0217;
                                                }
                                                n7 = n3 - measuredWidth;
                                                n8 = frameLayout$LayoutParams.rightMargin;
                                            }
                                            else {
                                                n7 = (n3 - n - measuredWidth) / 2 + frameLayout$LayoutParams.leftMargin;
                                                n8 = frameLayout$LayoutParams.rightMargin;
                                            }
                                            leftMargin = n7 - n8;
                                        }
                                        int topMargin = 0;
                                        Label_0401: {
                                            int n9;
                                            int n10;
                                            if (n5 != 16) {
                                                if (n5 != 48) {
                                                    if (n5 != 80) {
                                                        topMargin = frameLayout$LayoutParams.topMargin;
                                                        break Label_0401;
                                                    }
                                                    n9 = n4 - emojiPadding - n2 - measuredHeight;
                                                    n10 = frameLayout$LayoutParams.bottomMargin;
                                                }
                                                else {
                                                    final int n11 = topMargin = frameLayout$LayoutParams.topMargin + this.getPaddingTop();
                                                    if (child == ChatActivity.this.actionBar) {
                                                        break Label_0401;
                                                    }
                                                    topMargin = n11;
                                                    if (ChatActivity.this.actionBar.getVisibility() != 0) {
                                                        break Label_0401;
                                                    }
                                                    final int n12 = topMargin = n11 + ChatActivity.this.actionBar.getMeasuredHeight();
                                                    if (!ChatActivity.this.inPreviewMode) {
                                                        break Label_0401;
                                                    }
                                                    topMargin = n12;
                                                    if (Build$VERSION.SDK_INT >= 21) {
                                                        topMargin = n12 + AndroidUtilities.statusBarHeight;
                                                    }
                                                    break Label_0401;
                                                }
                                            }
                                            else {
                                                n9 = (n4 - emojiPadding - n2 - measuredHeight) / 2 + frameLayout$LayoutParams.topMargin;
                                                n10 = frameLayout$LayoutParams.bottomMargin;
                                            }
                                            topMargin = n9 - n10;
                                        }
                                        int n15 = 0;
                                        Label_0902: {
                                            int n16 = 0;
                                            Label_0438: {
                                                int n13;
                                                int n14;
                                                if (child == ChatActivity.this.mentionContainer) {
                                                    n13 = ChatActivity.this.chatActivityEnterView.getMeasuredHeight();
                                                    n14 = AndroidUtilities.dp(2.0f);
                                                }
                                                else if (child == ChatActivity.this.pagedownButton) {
                                                    n15 = topMargin;
                                                    if (!ChatActivity.this.inPreviewMode) {
                                                        n16 = ChatActivity.this.chatActivityEnterView.getMeasuredHeight();
                                                        break Label_0438;
                                                    }
                                                    break Label_0902;
                                                }
                                                else if (child == ChatActivity.this.mentiondownButton) {
                                                    n15 = topMargin;
                                                    if (!ChatActivity.this.inPreviewMode) {
                                                        n16 = ChatActivity.this.chatActivityEnterView.getMeasuredHeight();
                                                        break Label_0438;
                                                    }
                                                    break Label_0902;
                                                }
                                                else if (child == ChatActivity.this.emptyViewContainer) {
                                                    n13 = this.inputFieldHeight / 2;
                                                    if (ChatActivity.this.actionBar.getVisibility() == 0) {
                                                        n14 = ChatActivity.this.actionBar.getMeasuredHeight() / 2;
                                                    }
                                                    else {
                                                        n14 = 0;
                                                    }
                                                }
                                                else if (ChatActivity.this.chatActivityEnterView.isPopupView(child)) {
                                                    if (AndroidUtilities.isInMultiwindow) {
                                                        n15 = ChatActivity.this.chatActivityEnterView.getTop() - child.getMeasuredHeight() + AndroidUtilities.dp(1.0f);
                                                        break Label_0902;
                                                    }
                                                    n15 = ChatActivity.this.chatActivityEnterView.getBottom();
                                                    break Label_0902;
                                                }
                                                else {
                                                    if (child == ChatActivity.this.gifHintTextView || child == ChatActivity.this.voiceHintTextView || child == ChatActivity.this.mediaBanTooltip) {
                                                        n16 = this.inputFieldHeight;
                                                        break Label_0438;
                                                    }
                                                    if (child == ChatActivity.this.chatListView) {
                                                        n15 = topMargin;
                                                        if (ChatActivity.this.inPreviewMode) {
                                                            break Label_0902;
                                                        }
                                                        n13 = this.inputFieldHeight;
                                                        n14 = AndroidUtilities.dp(51.0f);
                                                    }
                                                    else if (child == ChatActivity.this.progressView) {
                                                        n15 = topMargin;
                                                        if (ChatActivity.this.chatActivityEnterView.isTopViewVisible()) {
                                                            n16 = AndroidUtilities.dp(48.0f);
                                                            break Label_0438;
                                                        }
                                                        break Label_0902;
                                                    }
                                                    else {
                                                        if (child == ChatActivity.this.actionBar) {
                                                            int n17 = topMargin;
                                                            if (ChatActivity.this.inPreviewMode) {
                                                                n17 = topMargin;
                                                                if (Build$VERSION.SDK_INT >= 21) {
                                                                    n17 = topMargin + AndroidUtilities.statusBarHeight;
                                                                }
                                                            }
                                                            final int paddingTop = this.getPaddingTop();
                                                            topMargin = n17;
                                                            n16 = paddingTop;
                                                            break Label_0438;
                                                        }
                                                        if (child == ChatActivity.this.videoPlayerContainer) {
                                                            n15 = ChatActivity.this.actionBar.getMeasuredHeight();
                                                            break Label_0902;
                                                        }
                                                        if (child != ChatActivity.this.instantCameraView) {
                                                            n15 = topMargin;
                                                            if (child != ChatActivity.this.overlayView) {
                                                                break Label_0902;
                                                            }
                                                        }
                                                        n15 = 0;
                                                        break Label_0902;
                                                    }
                                                }
                                                n16 = n13 - n14;
                                            }
                                            n15 = topMargin - n16;
                                        }
                                        child.layout(leftMargin, n15, measuredWidth + leftMargin, measuredHeight + n15);
                                    }
                                }
                            }
                            ChatActivity.this.updateMessagesVisiblePart(true);
                            ChatActivity.this.updateTextureViewPosition(false);
                            if (!ChatActivity.this.scrollingChatListView) {
                                ChatActivity.this.checkAutoDownloadMessages(false);
                            }
                            this.notifyHeightChanged();
                        }
                        
                        protected void onMeasure(final int n, final int n2) {
                            final int size = View$MeasureSpec.getSize(n);
                            final int size2 = View$MeasureSpec.getSize(n2);
                            this.setMeasuredDimension(size, size2);
                            final int n3 = size2 - this.getPaddingTop();
                            this.measureChildWithMargins((View)ChatActivity.this.actionBar, n, 0, n2, 0);
                            final int measuredHeight = ChatActivity.this.actionBar.getMeasuredHeight();
                            int n4 = n3;
                            if (ChatActivity.this.actionBar.getVisibility() == 0) {
                                n4 = n3 - measuredHeight;
                            }
                            int n5;
                            int n6;
                            if (this.getKeyboardHeight() <= AndroidUtilities.dp(20.0f)) {
                                n5 = size2;
                                n6 = n4;
                                if (!AndroidUtilities.isInMultiwindow) {
                                    n6 = n4 - ChatActivity.this.chatActivityEnterView.getEmojiPadding();
                                    n5 = size2 - ChatActivity.this.chatActivityEnterView.getEmojiPadding();
                                }
                            }
                            else {
                                ChatActivity.this.globalIgnoreLayout = true;
                                ChatActivity.this.chatActivityEnterView.hideEmojiView();
                                ChatActivity.this.globalIgnoreLayout = false;
                                n6 = n4;
                                n5 = size2;
                            }
                            final int childCount = this.getChildCount();
                            this.measureChildWithMargins((View)ChatActivity.this.chatActivityEnterView, n, 0, n2, 0);
                            int dp;
                            if (ChatActivity.this.inPreviewMode) {
                                this.inputFieldHeight = 0;
                                dp = 0;
                            }
                            else {
                                this.inputFieldHeight = ChatActivity.this.chatActivityEnterView.getMeasuredHeight();
                                dp = AndroidUtilities.dp(49.0f);
                            }
                            for (int i = 0; i < childCount; ++i) {
                                final View child = this.getChildAt(i);
                                if (child != null && child.getVisibility() != 8) {
                                    final ChatActivity this$0 = ChatActivity.this;
                                    if (child != this$0.chatActivityEnterView) {
                                        if (child != this$0.actionBar) {
                                            if (child == ChatActivity.this.chatListView) {
                                                if (ChatActivity.this.chatActivityEnterView.getAlpha() != 1.0f) {
                                                    ChatActivity.this.chatListView.setTranslationY((float)(this.inputFieldHeight - AndroidUtilities.dp(51.0f)));
                                                }
                                                final ChatActivity this$2 = ChatActivity.this;
                                                int n7;
                                                if (this$2.inPreviewMode) {
                                                    n7 = 0;
                                                }
                                                else {
                                                    n7 = this.inputFieldHeight - AndroidUtilities.dp(51.0f);
                                                }
                                                this$2.chatListViewClipTop = n7;
                                                final int measureSpec = View$MeasureSpec.makeMeasureSpec(size, 1073741824);
                                                final int dp2 = AndroidUtilities.dp(10.0f);
                                                int statusBarHeight;
                                                if (ChatActivity.this.inPreviewMode && Build$VERSION.SDK_INT >= 21) {
                                                    statusBarHeight = AndroidUtilities.statusBarHeight;
                                                }
                                                else {
                                                    statusBarHeight = 0;
                                                }
                                                child.measure(measureSpec, View$MeasureSpec.makeMeasureSpec(Math.max(dp2, n6 - dp - statusBarHeight), 1073741824));
                                            }
                                            else if (child == ChatActivity.this.progressView) {
                                                final int measureSpec2 = View$MeasureSpec.makeMeasureSpec(size, 1073741824);
                                                final int dp3 = AndroidUtilities.dp(10.0f);
                                                final int inputFieldHeight = this.inputFieldHeight;
                                                int statusBarHeight2;
                                                if (ChatActivity.this.inPreviewMode && Build$VERSION.SDK_INT >= 21) {
                                                    statusBarHeight2 = AndroidUtilities.statusBarHeight;
                                                }
                                                else {
                                                    statusBarHeight2 = 0;
                                                }
                                                int n8;
                                                if (ChatActivity.this.chatActivityEnterView.isTopViewVisible()) {
                                                    n8 = 48;
                                                }
                                                else {
                                                    n8 = 0;
                                                }
                                                child.measure(measureSpec2, View$MeasureSpec.makeMeasureSpec(Math.max(dp3, n6 - inputFieldHeight - statusBarHeight2 + AndroidUtilities.dp((float)(n8 + 2))), 1073741824));
                                            }
                                            else if (child != ChatActivity.this.instantCameraView && child != ChatActivity.this.overlayView) {
                                                if (child == ChatActivity.this.emptyViewContainer) {
                                                    child.measure(View$MeasureSpec.makeMeasureSpec(size, 1073741824), View$MeasureSpec.makeMeasureSpec(n6, 1073741824));
                                                }
                                                else if (ChatActivity.this.chatActivityEnterView.isPopupView(child)) {
                                                    if (AndroidUtilities.isInMultiwindow) {
                                                        if (AndroidUtilities.isTablet()) {
                                                            child.measure(View$MeasureSpec.makeMeasureSpec(size, 1073741824), View$MeasureSpec.makeMeasureSpec(Math.min(AndroidUtilities.dp(320.0f), n6 - this.inputFieldHeight + measuredHeight - AndroidUtilities.statusBarHeight + this.getPaddingTop()), 1073741824));
                                                        }
                                                        else {
                                                            child.measure(View$MeasureSpec.makeMeasureSpec(size, 1073741824), View$MeasureSpec.makeMeasureSpec(n6 - this.inputFieldHeight + measuredHeight - AndroidUtilities.statusBarHeight + this.getPaddingTop(), 1073741824));
                                                        }
                                                    }
                                                    else {
                                                        final int height = child.getLayoutParams().height;
                                                        child.measure(View$MeasureSpec.makeMeasureSpec(size, 1073741824), View$MeasureSpec.makeMeasureSpec(child.getLayoutParams().height, 1073741824));
                                                    }
                                                }
                                                else if (child == ChatActivity.this.mentionContainer) {
                                                    final FrameLayout$LayoutParams frameLayout$LayoutParams = (FrameLayout$LayoutParams)ChatActivity.this.mentionContainer.getLayoutParams();
                                                    if (ChatActivity.this.mentionsAdapter.isBannedInline()) {
                                                        child.measure(View$MeasureSpec.makeMeasureSpec(size, 1073741824), View$MeasureSpec.makeMeasureSpec(n6, Integer.MIN_VALUE));
                                                    }
                                                    else {
                                                        ChatActivity.this.mentionListViewIgnoreLayout = true;
                                                        int height2;
                                                        if (ChatActivity.this.mentionsAdapter.isBotContext() && ChatActivity.this.mentionsAdapter.isMediaLayout()) {
                                                            int n10;
                                                            final int n9 = n10 = ChatActivity.this.mentionGridLayoutManager.getRowsCount(size) * 102;
                                                            if (ChatActivity.this.mentionsAdapter.isBotContext()) {
                                                                n10 = n9;
                                                                if (ChatActivity.this.mentionsAdapter.getBotContextSwitch() != null) {
                                                                    n10 = n9 + 34;
                                                                }
                                                            }
                                                            final int measuredHeight2 = ChatActivity.this.chatActivityEnterView.getMeasuredHeight();
                                                            int dp4;
                                                            if (n10 != 0) {
                                                                dp4 = AndroidUtilities.dp(2.0f);
                                                            }
                                                            else {
                                                                dp4 = 0;
                                                            }
                                                            final int n11 = n6 - measuredHeight2 + dp4;
                                                            final int max = Math.max(0, n11 - AndroidUtilities.dp(Math.min((float)n10, 122.399994f)));
                                                            if (ChatActivity.this.mentionLayoutManager.getReverseLayout()) {
                                                                ChatActivity.this.mentionListView.setPadding(0, 0, 0, max);
                                                            }
                                                            else {
                                                                ChatActivity.this.mentionListView.setPadding(0, max, 0, 0);
                                                            }
                                                            height2 = n11;
                                                        }
                                                        else {
                                                            int itemCount = ChatActivity.this.mentionsAdapter.getItemCount();
                                                            int n13;
                                                            if (ChatActivity.this.mentionsAdapter.isBotContext()) {
                                                                int n12;
                                                                if (ChatActivity.this.mentionsAdapter.getBotContextSwitch() != null) {
                                                                    --itemCount;
                                                                    n12 = 36;
                                                                }
                                                                else {
                                                                    n12 = 0;
                                                                }
                                                                n13 = n12 + itemCount * 68;
                                                            }
                                                            else {
                                                                n13 = itemCount * 36 + 0;
                                                            }
                                                            final int measuredHeight3 = ChatActivity.this.chatActivityEnterView.getMeasuredHeight();
                                                            int dp5;
                                                            if (n13 != 0) {
                                                                dp5 = AndroidUtilities.dp(2.0f);
                                                            }
                                                            else {
                                                                dp5 = 0;
                                                            }
                                                            final int n14 = n6 - measuredHeight3 + dp5;
                                                            final int max2 = Math.max(0, n14 - AndroidUtilities.dp(Math.min((float)n13, 122.399994f)));
                                                            if (ChatActivity.this.mentionLayoutManager.getReverseLayout()) {
                                                                ChatActivity.this.mentionListView.setPadding(0, 0, 0, max2);
                                                                height2 = n14;
                                                            }
                                                            else {
                                                                ChatActivity.this.mentionListView.setPadding(0, max2, 0, 0);
                                                                height2 = n14;
                                                            }
                                                        }
                                                        frameLayout$LayoutParams.height = height2;
                                                        frameLayout$LayoutParams.topMargin = 0;
                                                        ChatActivity.this.mentionListViewIgnoreLayout = false;
                                                        child.measure(View$MeasureSpec.makeMeasureSpec(size, 1073741824), View$MeasureSpec.makeMeasureSpec(frameLayout$LayoutParams.height, 1073741824));
                                                    }
                                                }
                                                else {
                                                    this.measureChildWithMargins(child, n, 0, n2, 0);
                                                }
                                            }
                                            else {
                                                child.measure(View$MeasureSpec.makeMeasureSpec(size, 1073741824), View$MeasureSpec.makeMeasureSpec(n5 - this.inputFieldHeight + AndroidUtilities.dp(3.0f), 1073741824));
                                            }
                                        }
                                    }
                                }
                            }
                            if (ChatActivity.this.fixPaddingsInLayout) {
                                ChatActivity.this.globalIgnoreLayout = true;
                                ChatActivity.this.checkListViewPaddingsInternal();
                                ChatActivity.this.fixPaddingsInLayout = false;
                                ChatActivity.this.chatListView.measure(View$MeasureSpec.makeMeasureSpec(ChatActivity.this.chatListView.getMeasuredWidth(), 1073741824), View$MeasureSpec.makeMeasureSpec(ChatActivity.this.chatListView.getMeasuredHeight(), 1073741824));
                                ChatActivity.this.globalIgnoreLayout = false;
                            }
                            if (ChatActivity.this.scrollToPositionOnRecreate != -1) {
                                AndroidUtilities.runOnUIThread(new _$$Lambda$ChatActivity$8$_XCV7vWC5uHsxQLMfJWVnGoel04(this, ChatActivity.this.scrollToPositionOnRecreate));
                                ChatActivity.this.globalIgnoreLayout = true;
                                ChatActivity.this.scrollToPositionOnRecreate = -1;
                                ChatActivity.this.globalIgnoreLayout = false;
                            }
                        }
                        
                        public void requestLayout() {
                            if (ChatActivity.this.globalIgnoreLayout) {
                                return;
                            }
                            super.requestLayout();
                        }
                    };
                    (this.contentView = (SizeNotifierFrameLayout)super.fragmentView).setBackgroundImage(Theme.getCachedWallpaper(), Theme.isWallpaperMotion());
                    this.emptyViewContainer = new FrameLayout((Context)progressView);
                    final FrameLayout emptyViewContainer = this.emptyViewContainer;
                    final int n3 = 4;
                    emptyViewContainer.setVisibility(4);
                    this.contentView.addView((View)this.emptyViewContainer, (ViewGroup$LayoutParams)LayoutHelper.createFrame(-1, -2, 17));
                    this.emptyViewContainer.setOnTouchListener((View$OnTouchListener)_$$Lambda$ChatActivity$hcAWiiBslensQzGGfNwnu6FWkPI.INSTANCE);
                    Label_2533: {
                        if (this.currentEncryptedChat == null) {
                            final TLRPC.User currentUser4 = this.currentUser;
                            if (currentUser4 == null || !currentUser4.self) {
                                final TLRPC.Chat currentChat6 = this.currentChat;
                                if (currentChat6 == null || !currentChat6.creator) {
                                    this.emptyView = new TextView((Context)progressView);
                                    final TLRPC.User currentUser5 = this.currentUser;
                                    Label_2288: {
                                        if (currentUser5 != null) {
                                            final int id = currentUser5.id;
                                            if (id != 777000 && id != 429000 && id != 4244000 && MessagesController.isSupportUser(currentUser5)) {
                                                this.emptyView.setText((CharSequence)LocaleController.getString("GotAQuestion", 2131559596));
                                                break Label_2288;
                                            }
                                        }
                                        this.emptyView.setText((CharSequence)LocaleController.getString("NoMessages", 2131559932));
                                    }
                                    this.emptyView.setTextSize(1, 14.0f);
                                    this.emptyView.setGravity(17);
                                    this.emptyView.setTextColor(Theme.getColor("chat_serviceText"));
                                    this.emptyView.setBackgroundResource(2131165871);
                                    this.emptyView.getBackground().setColorFilter((ColorFilter)Theme.colorFilter);
                                    this.emptyView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                                    this.emptyView.setPadding(AndroidUtilities.dp(10.0f), AndroidUtilities.dp(2.0f), AndroidUtilities.dp(10.0f), AndroidUtilities.dp(3.0f));
                                    this.emptyViewContainer.addView((View)this.emptyView, (ViewGroup$LayoutParams)new FrameLayout$LayoutParams(-2, -2, 17));
                                    break Label_2533;
                                }
                            }
                            int n4;
                            if (this.currentChat != null) {
                                n4 = 1;
                            }
                            else {
                                n4 = 2;
                            }
                            this.bigEmptyView = new ChatBigEmptyView((Context)progressView, n4);
                            this.emptyViewContainer.addView((View)this.bigEmptyView, (ViewGroup$LayoutParams)new FrameLayout$LayoutParams(-2, -2, 17));
                            if (this.currentChat != null) {
                                this.bigEmptyView.setStatusText((CharSequence)AndroidUtilities.replaceTags(LocaleController.getString("GroupEmptyTitle1", 2131559607)));
                            }
                        }
                        else {
                            this.bigEmptyView = new ChatBigEmptyView((Context)progressView, 0);
                            if (this.currentEncryptedChat.admin_id == UserConfig.getInstance(super.currentAccount).getClientUserId()) {
                                this.bigEmptyView.setStatusText(LocaleController.formatString("EncryptedPlaceholderTitleOutgoing", 2131559359, UserObject.getFirstName(this.currentUser)));
                            }
                            else {
                                this.bigEmptyView.setStatusText(LocaleController.formatString("EncryptedPlaceholderTitleIncoming", 2131559358, UserObject.getFirstName(this.currentUser)));
                            }
                            this.emptyViewContainer.addView((View)this.bigEmptyView, (ViewGroup$LayoutParams)new FrameLayout$LayoutParams(-2, -2, 17));
                        }
                    }
                    final ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
                    CharSequence fieldText = null;
                    Label_2569: {
                        if (chatActivityEnterView != null) {
                            chatActivityEnterView.onDestroy();
                            if (!this.chatActivityEnterView.isEditingMessage()) {
                                fieldText = this.chatActivityEnterView.getFieldText();
                                break Label_2569;
                            }
                        }
                        fieldText = null;
                    }
                    final MentionsAdapter mentionsAdapter = this.mentionsAdapter;
                    if (mentionsAdapter != null) {
                        mentionsAdapter.onDestroy();
                    }
                    this.chatListView = new RecyclerListView(progressView) {
                        ArrayList<ChatMessageCell> drawCaptionAfter = new ArrayList<ChatMessageCell>();
                        ArrayList<ChatMessageCell> drawNamesAfter = new ArrayList<ChatMessageCell>();
                        ArrayList<ChatMessageCell> drawTimeAfter = new ArrayList<ChatMessageCell>();
                        private float endedTrackingX;
                        private long lastReplyButtonAnimationTime;
                        private long lastTrackingAnimationTime;
                        private int lastWidth;
                        private boolean maybeStartTracking;
                        private float replyButtonProgress;
                        private boolean slideAnimationInProgress;
                        private ChatMessageCell slidingView;
                        private boolean startedTracking;
                        private int startedTrackingPointerId;
                        private int startedTrackingX;
                        private int startedTrackingY;
                        private float trackAnimationProgress;
                        private boolean wasTrackingVibrate;
                        
                        private void drawReplyButton(final Canvas canvas) {
                            final ChatMessageCell slidingView = this.slidingView;
                            if (slidingView == null) {
                                return;
                            }
                            final float translationX = slidingView.getTranslationX();
                            final long currentTimeMillis = System.currentTimeMillis();
                            final long min = Math.min(17L, currentTimeMillis - this.lastReplyButtonAnimationTime);
                            this.lastReplyButtonAnimationTime = currentTimeMillis;
                            final boolean b = translationX <= -AndroidUtilities.dp(50.0f);
                            if (b) {
                                final float replyButtonProgress = this.replyButtonProgress;
                                if (replyButtonProgress < 1.0f) {
                                    this.replyButtonProgress = replyButtonProgress + min / 180.0f;
                                    if (this.replyButtonProgress > 1.0f) {
                                        this.replyButtonProgress = 1.0f;
                                    }
                                    else {
                                        this.invalidate();
                                    }
                                }
                            }
                            else {
                                final float replyButtonProgress2 = this.replyButtonProgress;
                                if (replyButtonProgress2 > 0.0f) {
                                    this.replyButtonProgress = replyButtonProgress2 - min / 180.0f;
                                    if (this.replyButtonProgress < 0.0f) {
                                        this.replyButtonProgress = 0.0f;
                                    }
                                    else {
                                        this.invalidate();
                                    }
                                }
                            }
                            float replyButtonProgress4;
                            float n;
                            if (b) {
                                final float replyButtonProgress3 = this.replyButtonProgress;
                                if (replyButtonProgress3 <= 0.8f) {
                                    replyButtonProgress4 = replyButtonProgress3 / 0.8f * 1.2f;
                                }
                                else {
                                    replyButtonProgress4 = 1.2f - (replyButtonProgress3 - 0.8f) / 0.2f * 0.2f;
                                }
                                n = Math.min(255.0f, this.replyButtonProgress / 0.8f * 255.0f);
                            }
                            else {
                                replyButtonProgress4 = this.replyButtonProgress;
                                n = Math.min(255.0f, replyButtonProgress4 * 255.0f);
                            }
                            final int n2 = (int)n;
                            Theme.chat_shareDrawable.setAlpha(n2);
                            Theme.chat_replyIconDrawable.setAlpha(n2);
                            final float n3 = this.getMeasuredWidth() + this.slidingView.getTranslationX() / 2.0f;
                            final float n4 = (float)(this.slidingView.getTop() + this.slidingView.getMeasuredHeight() / 2);
                            if (Theme.isCustomTheme() && !Theme.hasThemeKey("chat_shareBackground")) {
                                Theme.chat_shareDrawable.setColorFilter((ColorFilter)Theme.colorFilter2);
                            }
                            else {
                                Theme.chat_shareDrawable.setColorFilter(Theme.getShareColorFilter(Theme.getColor("chat_shareBackground"), false));
                            }
                            Theme.chat_shareDrawable.setBounds((int)(n3 - AndroidUtilities.dp(14.0f) * replyButtonProgress4), (int)(n4 - AndroidUtilities.dp(14.0f) * replyButtonProgress4), (int)(AndroidUtilities.dp(14.0f) * replyButtonProgress4 + n3), (int)(AndroidUtilities.dp(14.0f) * replyButtonProgress4 + n4));
                            Theme.chat_shareDrawable.draw(canvas);
                            Theme.chat_replyIconDrawable.setBounds((int)(n3 - AndroidUtilities.dp(7.0f) * replyButtonProgress4), (int)(n4 - AndroidUtilities.dp(6.0f) * replyButtonProgress4), (int)(n3 + AndroidUtilities.dp(7.0f) * replyButtonProgress4), (int)(n4 + AndroidUtilities.dp(5.0f) * replyButtonProgress4));
                            Theme.chat_replyIconDrawable.draw(canvas);
                            Theme.chat_shareDrawable.setAlpha(255);
                            Theme.chat_replyIconDrawable.setAlpha(255);
                        }
                        
                        private void processTouchEvent(final MotionEvent motionEvent) {
                            ChatActivity.this.wasManualScroll = true;
                        Label_0510_Outer:
                            while (true) {
                                int max;
                                if (motionEvent.getAction() == 0 && !this.startedTracking && !this.maybeStartTracking) {
                                    final View pressedChildView = this.getPressedChildView();
                                    if (pressedChildView instanceof ChatMessageCell) {
                                        this.slidingView = (ChatMessageCell)pressedChildView;
                                        final MessageObject messageObject = this.slidingView.getMessageObject();
                                        final TLRPC.EncryptedChat currentEncryptedChat = ChatActivity.this.currentEncryptedChat;
                                        Label_0275: {
                                            if ((currentEncryptedChat == null || AndroidUtilities.getPeerLayerVersion(currentEncryptedChat.layer) >= 46) && (ChatActivity.this.getMessageType(messageObject) != 1 || (messageObject.getDialogId() != ChatActivity.this.mergeDialogId && !messageObject.needDrawBluredPreview())) && (ChatActivity.this.currentEncryptedChat != null || messageObject.getId() >= 0) && (ChatActivity.this.bottomOverlayChat == null || ChatActivity.this.bottomOverlayChat.getVisibility() != 0) && !ChatActivity.this.isBroadcast) {
                                                final TLRPC.Chat currentChat = ChatActivity.this.currentChat;
                                                if (currentChat != null) {
                                                    if (ChatObject.isNotInChat(currentChat) || (ChatObject.isChannel(ChatActivity.this.currentChat) && !ChatObject.canPost(ChatActivity.this.currentChat) && !ChatActivity.this.currentChat.megagroup)) {
                                                        break Label_0275;
                                                    }
                                                    if (!ChatObject.canSendMessages(ChatActivity.this.currentChat)) {
                                                        break Label_0275;
                                                    }
                                                }
                                                this.startedTrackingPointerId = motionEvent.getPointerId(0);
                                                this.maybeStartTracking = true;
                                                this.startedTrackingX = (int)motionEvent.getX();
                                                this.startedTrackingY = (int)motionEvent.getY();
                                                return;
                                            }
                                        }
                                        this.slidingView = null;
                                    }
                                    return;
                                }
                                else {
                                    if (this.slidingView == null || motionEvent.getAction() != 2 || motionEvent.getPointerId(0) != this.startedTrackingPointerId) {
                                        break Label_0510_Outer;
                                    }
                                    max = Math.max(AndroidUtilities.dp(-80.0f), Math.min(0, (int)(motionEvent.getX() - this.startedTrackingX)));
                                    final int abs = Math.abs((int)motionEvent.getY() - this.startedTrackingY);
                                    if (this.getScrollState() == 0 && this.maybeStartTracking && !this.startedTracking && max <= -AndroidUtilities.getPixelsInCM(0.4f, true) && Math.abs(max) / 3 > abs) {
                                        final MotionEvent obtain = MotionEvent.obtain(0L, 0L, 3, 0.0f, 0.0f, 0);
                                        this.slidingView.onTouchEvent(obtain);
                                        super.onInterceptTouchEvent(obtain);
                                        obtain.recycle();
                                        ChatActivity.this.chatLayoutManager.setCanScrollVertically(false);
                                        this.maybeStartTracking = false;
                                        this.startedTracking = true;
                                        this.startedTrackingX = (int)motionEvent.getX();
                                        if (this.getParent() != null) {
                                            this.getParent().requestDisallowInterceptTouchEvent(true);
                                        }
                                        return;
                                    }
                                    else {
                                        if (!this.startedTracking) {
                                            return;
                                        }
                                        if (Math.abs(max) < AndroidUtilities.dp(50.0f)) {
                                            break Label_0510_Outer;
                                        }
                                        if (this.wasTrackingVibrate) {
                                            break Label_0523;
                                        }
                                    }
                                }
                                while (true) {
                                    try {
                                        this.performHapticFeedback(3, 2);
                                        this.wasTrackingVibrate = true;
                                        final ChatMessageCell slidingView = this.slidingView;
                                        final float translationX = (float)max;
                                        slidingView.setTranslationX(translationX);
                                        final MessageObject messageObject2 = this.slidingView.getMessageObject();
                                        if (messageObject2.isRoundVideo() || messageObject2.isVideo()) {
                                            ChatActivity.this.updateTextureViewPosition(false);
                                        }
                                        this.setGroupTranslationX(this.slidingView, translationX);
                                        this.invalidate();
                                        Label_0712: {
                                            return;
                                        }
                                    Label_0630_Outer:
                                        while (true) {
                                            this.endedTrackingX = this.slidingView.getTranslationX();
                                            this.lastTrackingAnimationTime = System.currentTimeMillis();
                                            this.trackAnimationProgress = 0.0f;
                                            this.invalidate();
                                            this.maybeStartTracking = false;
                                            this.startedTracking = false;
                                            ChatActivity.this.chatLayoutManager.setCanScrollVertically(true);
                                            return;
                                            this.wasTrackingVibrate = false;
                                            continue Label_0510_Outer;
                                        Block_34:
                                            while (true) {
                                                break Block_34;
                                                continue;
                                            }
                                            ChatActivity.this.showFieldPanelForReply(this.slidingView.getMessageObject());
                                            continue Label_0630_Outer;
                                        }
                                    }
                                    // iftrue(Label_0664:, Math.abs(this.slidingView.getTranslationX()) < (float)AndroidUtilities.dp(50.0f))
                                    // iftrue(Label_0712:, this.slidingView == null || motionEvent.getPointerId(0) != this.startedTrackingPointerId || motionEvent.getAction() != 3 && motionEvent.getAction() != 1 && motionEvent.getAction() != 6)
                                    catch (Exception ex) {
                                        continue;
                                    }
                                    break;
                                }
                                break;
                            }
                        }
                        
                        private void setGroupTranslationX(final ChatMessageCell chatMessageCell, final float translationX) {
                            final MessageObject.GroupedMessages currentMessagesGroup = chatMessageCell.getCurrentMessagesGroup();
                            if (currentMessagesGroup == null) {
                                return;
                            }
                            for (int childCount = this.getChildCount(), i = 0; i < childCount; ++i) {
                                final View child = this.getChildAt(i);
                                if (child != this) {
                                    if (child instanceof ChatMessageCell) {
                                        final ChatMessageCell chatMessageCell2 = (ChatMessageCell)child;
                                        if (chatMessageCell2.getCurrentMessagesGroup() == currentMessagesGroup) {
                                            chatMessageCell2.setTranslationX(translationX);
                                            chatMessageCell2.invalidate();
                                        }
                                    }
                                }
                            }
                            this.invalidate();
                        }
                        
                        public AccessibilityNodeInfo createAccessibilityNodeInfo() {
                            if (ChatActivity.this.currentEncryptedChat != null) {
                                return null;
                            }
                            return super.createAccessibilityNodeInfo();
                        }
                        
                        @Override
                        protected void dispatchDraw(final Canvas canvas) {
                            ChatActivity.this.drawLaterRoundProgressCell = null;
                            for (int childCount = this.getChildCount(), i = 0; i < childCount; ++i) {
                                final View child = this.getChildAt(i);
                                if (child instanceof ChatMessageCell) {
                                    final ChatMessageCell chatMessageCell = (ChatMessageCell)child;
                                    final MessageObject.GroupedMessagePosition currentPosition = chatMessageCell.getCurrentPosition();
                                    if (chatMessageCell.isDrawingSelectionBackground() && (currentPosition == null || (currentPosition.flags & 0x2) != 0x0)) {
                                        final int alpha = Color.alpha(Theme.getColor("chat_selectedBackground"));
                                        Theme.chat_replyLinePaint.setColor(Theme.getColor("chat_selectedBackground"));
                                        Theme.chat_replyLinePaint.setAlpha((int)(alpha * chatMessageCell.getHightlightAlpha()));
                                        canvas.drawRect(0.0f, (float)chatMessageCell.getTop(), (float)this.getMeasuredWidth(), (float)chatMessageCell.getBottom(), Theme.chat_replyLinePaint);
                                    }
                                }
                            }
                            super.dispatchDraw(canvas);
                        }
                        
                        @Override
                        public boolean drawChild(final Canvas canvas, final View view, final long n) {
                            final View access$7800 = ChatActivity.this.scrimView;
                            final int n2 = 0;
                            final boolean b = view == access$7800;
                            final boolean b2 = view instanceof ChatMessageCell;
                            boolean b3;
                            ChatMessageCell chatMessageCell2;
                            int n4;
                            int n5;
                            if (b2) {
                                final ChatMessageCell chatMessageCell = (ChatMessageCell)view;
                                final MessageObject.GroupedMessagePosition currentPosition = chatMessageCell.getCurrentPosition();
                                final MessageObject.GroupedMessages currentMessagesGroup = chatMessageCell.getCurrentMessagesGroup();
                                int backgroundDrawableLeft = 0;
                                int n3 = 0;
                                Label_0156: {
                                    Label_0153: {
                                        if (currentPosition != null) {
                                            final int pw = currentPosition.pw;
                                            final int spanSize = currentPosition.spanSize;
                                            if (pw != spanSize && spanSize == 1000 && currentPosition.siblingHeights == null && currentMessagesGroup.hasSibling) {
                                                backgroundDrawableLeft = chatMessageCell.getBackgroundDrawableLeft();
                                                break Label_0153;
                                            }
                                            if (currentPosition.siblingHeights != null) {
                                                n3 = view.getBottom() - AndroidUtilities.dp((float)((chatMessageCell.isPinnedBottom() ? 1 : 0) + 1));
                                                backgroundDrawableLeft = 0;
                                                break Label_0156;
                                            }
                                        }
                                        backgroundDrawableLeft = 0;
                                    }
                                    n3 = 0;
                                }
                                if (chatMessageCell.needDelayRoundProgressDraw()) {
                                    ChatActivity.this.drawLaterRoundProgressCell = chatMessageCell;
                                }
                                b3 = b;
                                chatMessageCell2 = chatMessageCell;
                                n4 = backgroundDrawableLeft;
                                n5 = n3;
                                if (!b) {
                                    b3 = b;
                                    chatMessageCell2 = chatMessageCell;
                                    n4 = backgroundDrawableLeft;
                                    n5 = n3;
                                    if (ChatActivity.this.scrimView instanceof ChatMessageCell) {
                                        final ChatMessageCell chatMessageCell3 = (ChatMessageCell)ChatActivity.this.scrimView;
                                        b3 = b;
                                        chatMessageCell2 = chatMessageCell;
                                        n4 = backgroundDrawableLeft;
                                        n5 = n3;
                                        if (chatMessageCell3.getCurrentMessagesGroup() != null) {
                                            b3 = b;
                                            chatMessageCell2 = chatMessageCell;
                                            n4 = backgroundDrawableLeft;
                                            n5 = n3;
                                            if (chatMessageCell3.getCurrentMessagesGroup() == currentMessagesGroup) {
                                                b3 = true;
                                                chatMessageCell2 = chatMessageCell;
                                                n4 = backgroundDrawableLeft;
                                                n5 = n3;
                                            }
                                        }
                                    }
                                }
                            }
                            else {
                                chatMessageCell2 = null;
                                n4 = 0;
                                n5 = 0;
                                b3 = b;
                            }
                            if (n4 != 0) {
                                canvas.save();
                            }
                            else if (n5 != 0) {
                                canvas.save();
                            }
                            final boolean b4 = !b3 && super.drawChild(canvas, view, n);
                            if (n4 != 0 || n5 != 0) {
                                canvas.restore();
                            }
                            if (chatMessageCell2 != null) {
                                chatMessageCell2.drawCheckBox(canvas);
                            }
                            while (true) {
                                for (int childCount = this.getChildCount(), i = 0; i < childCount; ++i) {
                                    if (this.getChildAt(i) == view) {
                                        final int n6 = childCount - 1;
                                        if (i == n6) {
                                            final int size = this.drawTimeAfter.size();
                                            if (size > 0) {
                                                for (int j = 0; j < size; ++j) {
                                                    final ChatMessageCell chatMessageCell4 = this.drawTimeAfter.get(j);
                                                    canvas.save();
                                                    canvas.translate(chatMessageCell4.getLeft() + chatMessageCell4.getTranslationX(), (float)chatMessageCell4.getTop());
                                                    chatMessageCell4.drawTime(canvas);
                                                    canvas.restore();
                                                }
                                                this.drawTimeAfter.clear();
                                            }
                                            final int size2 = this.drawNamesAfter.size();
                                            if (size2 > 0) {
                                                for (int k = 0; k < size2; ++k) {
                                                    final ChatMessageCell chatMessageCell5 = this.drawNamesAfter.get(k);
                                                    canvas.save();
                                                    canvas.translate(chatMessageCell5.getLeft() + chatMessageCell5.getTranslationX(), (float)chatMessageCell5.getTop());
                                                    chatMessageCell5.drawNamesLayout(canvas);
                                                    canvas.restore();
                                                }
                                                this.drawNamesAfter.clear();
                                            }
                                            final int size3 = this.drawCaptionAfter.size();
                                            if (size3 > 0) {
                                                for (int l = 0; l < size3; ++l) {
                                                    final ChatMessageCell chatMessageCell6 = this.drawCaptionAfter.get(l);
                                                    if (chatMessageCell6.getCurrentPosition() != null) {
                                                        canvas.save();
                                                        canvas.translate(chatMessageCell6.getLeft() + chatMessageCell6.getTranslationX(), (float)chatMessageCell6.getTop());
                                                        chatMessageCell6.drawCaptionLayout(canvas, (chatMessageCell6.getCurrentPosition().flags & 0x1) == 0x0);
                                                        canvas.restore();
                                                    }
                                                }
                                                this.drawCaptionAfter.clear();
                                            }
                                        }
                                        if (b2) {
                                            final ChatMessageCell e = (ChatMessageCell)view;
                                            final MessageObject.GroupedMessagePosition currentPosition2 = e.getCurrentPosition();
                                            if (currentPosition2 != null) {
                                                if (currentPosition2.last || (currentPosition2.minX == 0 && currentPosition2.minY == 0)) {
                                                    if (i == n6) {
                                                        canvas.save();
                                                        canvas.translate(e.getLeft() + e.getTranslationX(), (float)e.getTop());
                                                        if (currentPosition2.last) {
                                                            e.drawTime(canvas);
                                                        }
                                                        if (currentPosition2.minX == 0 && currentPosition2.minY == 0) {
                                                            e.drawNamesLayout(canvas);
                                                        }
                                                        canvas.restore();
                                                    }
                                                    else {
                                                        if (currentPosition2.last) {
                                                            this.drawTimeAfter.add(e);
                                                        }
                                                        if (currentPosition2.minX == 0 && currentPosition2.minY == 0 && e.hasNameLayout()) {
                                                            this.drawNamesAfter.add(e);
                                                        }
                                                    }
                                                }
                                                if (i == n6) {
                                                    canvas.save();
                                                    canvas.translate(e.getLeft() + e.getTranslationX(), (float)e.getTop());
                                                    if (e.hasCaptionLayout()) {
                                                        final int flags = currentPosition2.flags;
                                                        if ((flags & 0x8) != 0x0) {
                                                            e.drawCaptionLayout(canvas, (flags & 0x1) == 0x0);
                                                        }
                                                    }
                                                    canvas.restore();
                                                }
                                                else if (e.hasCaptionLayout() && (currentPosition2.flags & 0x8) != 0x0) {
                                                    this.drawCaptionAfter.add(e);
                                                }
                                            }
                                            final MessageObject messageObject = e.getMessageObject();
                                            if (ChatActivity.this.videoPlayerContainer != null && (messageObject.isRoundVideo() || messageObject.isVideo()) && MediaController.getInstance().isPlayingMessage(messageObject)) {
                                                final ImageReceiver photoImage = e.getPhotoImage();
                                                final float translationX = photoImage.getImageX() + e.getX();
                                                final float n7 = (float)(ChatActivity.this.fragmentView.getPaddingTop() + e.getTop() + photoImage.getImageY() - ChatActivity.this.chatListViewClipTop);
                                                final float translationY = ChatActivity.this.chatListView.getTranslationY();
                                                int statusBarHeight;
                                                if (ChatActivity.this.inPreviewMode) {
                                                    statusBarHeight = AndroidUtilities.statusBarHeight;
                                                }
                                                else {
                                                    statusBarHeight = 0;
                                                }
                                                final float translationY2 = n7 + translationY + statusBarHeight;
                                                if (ChatActivity.this.videoPlayerContainer.getTranslationX() != translationX || ChatActivity.this.videoPlayerContainer.getTranslationY() != translationY2) {
                                                    ChatActivity.this.videoPlayerContainer.setTranslationX(translationX);
                                                    ChatActivity.this.videoPlayerContainer.setTranslationY(translationY2);
                                                    ChatActivity.this.fragmentView.invalidate();
                                                    ChatActivity.this.videoPlayerContainer.invalidate();
                                                }
                                            }
                                            final ImageReceiver avatarImage = e.getAvatarImage();
                                            if (avatarImage != null) {
                                                final MessageObject.GroupedMessages access$7801 = ChatActivity.this.getValidGroupedMessage(messageObject);
                                                final int top = view.getTop();
                                                if (e.isPinnedBottom()) {
                                                    final ViewHolder childViewHolder = ChatActivity.this.chatListView.getChildViewHolder(view);
                                                    if (childViewHolder != null) {
                                                        int adapterPosition = childViewHolder.getAdapterPosition();
                                                        int n8;
                                                        if (access$7801 != null && currentPosition2 != null) {
                                                            final int index = access$7801.posArray.indexOf(currentPosition2);
                                                            final int size4 = access$7801.posArray.size();
                                                            if ((currentPosition2.flags & 0x8) != 0x0) {
                                                                n8 = adapterPosition - size4 + index;
                                                            }
                                                            else {
                                                                --adapterPosition;
                                                                int index2 = index + 1;
                                                                while (true) {
                                                                    n8 = adapterPosition;
                                                                    if (index2 >= size4) {
                                                                        break;
                                                                    }
                                                                    if (access$7801.posArray.get(index2).minY > currentPosition2.maxY) {
                                                                        n8 = adapterPosition;
                                                                        break;
                                                                    }
                                                                    --adapterPosition;
                                                                    ++index2;
                                                                }
                                                            }
                                                        }
                                                        else {
                                                            n8 = adapterPosition - 1;
                                                        }
                                                        if (ChatActivity.this.chatListView.findViewHolderForAdapterPosition(n8) != null) {
                                                            avatarImage.setImageY(-AndroidUtilities.dp(1000.0f));
                                                            avatarImage.draw(canvas);
                                                            return b4;
                                                        }
                                                    }
                                                }
                                                float translationX2 = e.getTranslationX();
                                                final int n9 = view.getTop() + e.getLayoutHeight();
                                                final int n10 = ChatActivity.this.chatListView.getMeasuredHeight() - ChatActivity.this.chatListView.getPaddingBottom();
                                                int n11;
                                                if ((n11 = n9) > n10) {
                                                    n11 = n10;
                                                }
                                                int n12 = top;
                                                float n13 = translationX2;
                                                Label_1847: {
                                                    if (e.isPinnedTop()) {
                                                        ViewHolder viewHolder = ChatActivity.this.chatListView.getChildViewHolder(view);
                                                        n12 = top;
                                                        n13 = translationX2;
                                                        if (viewHolder != null) {
                                                            n12 = top;
                                                            int n14 = n2;
                                                            while (n14 < 20) {
                                                                final int n15 = n14 + 1;
                                                                int adapterPosition2 = viewHolder.getAdapterPosition();
                                                                int n16;
                                                                if (access$7801 != null && currentPosition2 != null) {
                                                                    final int index3 = access$7801.posArray.indexOf(currentPosition2);
                                                                    if (index3 < 0) {
                                                                        n13 = translationX2;
                                                                        break Label_1847;
                                                                    }
                                                                    access$7801.posArray.size();
                                                                    if ((currentPosition2.flags & 0x4) != 0x0) {
                                                                        n16 = adapterPosition2 + index3 + 1;
                                                                    }
                                                                    else {
                                                                        ++adapterPosition2;
                                                                        int index4 = index3 - 1;
                                                                        while (true) {
                                                                            n16 = adapterPosition2;
                                                                            if (index4 < 0) {
                                                                                break;
                                                                            }
                                                                            if (access$7801.posArray.get(index4).maxY < currentPosition2.minY) {
                                                                                n16 = adapterPosition2;
                                                                                break;
                                                                            }
                                                                            ++adapterPosition2;
                                                                            --index4;
                                                                        }
                                                                    }
                                                                }
                                                                else {
                                                                    n16 = adapterPosition2 + 1;
                                                                }
                                                                viewHolder = ChatActivity.this.chatListView.findViewHolderForAdapterPosition(n16);
                                                                n13 = translationX2;
                                                                if (viewHolder == null) {
                                                                    break Label_1847;
                                                                }
                                                                final int top2 = viewHolder.itemView.getTop();
                                                                float min = translationX2;
                                                                if (n11 - AndroidUtilities.dp(48.0f) < viewHolder.itemView.getBottom()) {
                                                                    min = Math.min(viewHolder.itemView.getTranslationX(), translationX2);
                                                                }
                                                                final View itemView = viewHolder.itemView;
                                                                n12 = top2;
                                                                n13 = min;
                                                                if (!(itemView instanceof ChatMessageCell)) {
                                                                    break Label_1847;
                                                                }
                                                                n14 = n15;
                                                                n12 = top2;
                                                                translationX2 = min;
                                                                if (!((ChatMessageCell)itemView).isPinnedTop()) {
                                                                    n13 = min;
                                                                    n12 = top2;
                                                                    break Label_1847;
                                                                }
                                                            }
                                                            n13 = translationX2;
                                                        }
                                                    }
                                                }
                                                int n17 = n11;
                                                if (n11 - AndroidUtilities.dp(48.0f) < n12) {
                                                    n17 = n12 + AndroidUtilities.dp(48.0f);
                                                }
                                                if (n13 != 0.0f) {
                                                    canvas.save();
                                                    canvas.translate(n13, 0.0f);
                                                }
                                                avatarImage.setImageY(n17 - AndroidUtilities.dp(44.0f));
                                                avatarImage.draw(canvas);
                                                if (n13 != 0.0f) {
                                                    canvas.restore();
                                                }
                                            }
                                        }
                                        return b4;
                                    }
                                }
                                int i = 0;
                                continue;
                            }
                        }
                        
                        @Override
                        protected void onChildPressed(final View view, final boolean pressed) {
                            super.onChildPressed(view, pressed);
                            if (view instanceof ChatMessageCell) {
                                final MessageObject.GroupedMessages currentMessagesGroup = ((ChatMessageCell)view).getCurrentMessagesGroup();
                                if (currentMessagesGroup != null) {
                                    for (int childCount = this.getChildCount(), i = 0; i < childCount; ++i) {
                                        final View child = this.getChildAt(i);
                                        if (child != view) {
                                            if (child instanceof ChatMessageCell) {
                                                final ChatMessageCell chatMessageCell = (ChatMessageCell)child;
                                                if (chatMessageCell.getCurrentMessagesGroup() == currentMessagesGroup) {
                                                    chatMessageCell.setPressed(pressed);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        
                        @Override
                        public void onDraw(final Canvas canvas) {
                            super.onDraw(canvas);
                            final ChatMessageCell slidingView = this.slidingView;
                            if (slidingView != null) {
                                final float translationX = slidingView.getTranslationX();
                                if (!this.maybeStartTracking && !this.startedTracking && this.endedTrackingX != 0.0f && translationX != 0.0f) {
                                    final long currentTimeMillis = System.currentTimeMillis();
                                    this.trackAnimationProgress += (currentTimeMillis - this.lastTrackingAnimationTime) / 180.0f;
                                    if (this.trackAnimationProgress > 1.0f) {
                                        this.trackAnimationProgress = 1.0f;
                                    }
                                    this.lastTrackingAnimationTime = currentTimeMillis;
                                    final float translationX2 = this.endedTrackingX * (1.0f - AndroidUtilities.decelerateInterpolator.getInterpolation(this.trackAnimationProgress));
                                    if (translationX2 == 0.0f) {
                                        this.endedTrackingX = 0.0f;
                                    }
                                    this.setGroupTranslationX(this.slidingView, translationX2);
                                    this.slidingView.setTranslationX(translationX2);
                                    final MessageObject messageObject = this.slidingView.getMessageObject();
                                    if (messageObject.isRoundVideo() || messageObject.isVideo()) {
                                        ChatActivity.this.updateTextureViewPosition(false);
                                    }
                                    this.invalidate();
                                }
                                this.drawReplyButton(canvas);
                            }
                        }
                        
                        public void onInitializeAccessibilityNodeInfo(final AccessibilityNodeInfo accessibilityNodeInfo) {
                            if (ChatActivity.this.currentEncryptedChat != null) {
                                return;
                            }
                            super.onInitializeAccessibilityNodeInfo(accessibilityNodeInfo);
                            if (Build$VERSION.SDK_INT >= 19) {
                                final AccessibilityNodeInfo$CollectionInfo collectionInfo = accessibilityNodeInfo.getCollectionInfo();
                                if (collectionInfo != null) {
                                    accessibilityNodeInfo.setCollectionInfo(AccessibilityNodeInfo$CollectionInfo.obtain(collectionInfo.getRowCount(), 1, false));
                                }
                            }
                        }
                        
                        @Override
                        public boolean onInterceptTouchEvent(final MotionEvent motionEvent) {
                            final boolean onInterceptTouchEvent = super.onInterceptTouchEvent(motionEvent);
                            if (ChatActivity.this.actionBar.isActionModeShowed()) {
                                return onInterceptTouchEvent;
                            }
                            this.processTouchEvent(motionEvent);
                            return onInterceptTouchEvent;
                        }
                        
                        @Override
                        protected void onLayout(final boolean b, int i, final int n, int lastWidth, final int n2) {
                            super.onLayout(b, i, n, lastWidth, n2);
                            final int lastWidth2 = this.lastWidth;
                            lastWidth -= i;
                            if (lastWidth2 != lastWidth) {
                                this.lastWidth = lastWidth;
                                if (ChatActivity.this.noSoundHintView != null) {
                                    ChatActivity.this.noSoundHintView.hide();
                                }
                                if (ChatActivity.this.forwardHintView != null) {
                                    ChatActivity.this.forwardHintView.hide();
                                }
                            }
                            ChatActivity.this.forceScrollToTop = false;
                            if (ChatActivity.this.chatAdapter.isBot) {
                                final int childCount = this.getChildCount();
                                i = 0;
                                while (i < childCount) {
                                    final View child = this.getChildAt(i);
                                    if (child instanceof BotHelpCell) {
                                        i = (n2 - n) / 2 - child.getMeasuredHeight() / 2;
                                        if (child.getTop() > i) {
                                            child.layout(0, i, lastWidth, child.getMeasuredHeight() + i);
                                            break;
                                        }
                                        break;
                                    }
                                    else {
                                        ++i;
                                    }
                                }
                            }
                        }
                        
                        @Override
                        public boolean onTouchEvent(final MotionEvent motionEvent) {
                            final boolean onTouchEvent = super.onTouchEvent(motionEvent);
                            if (ChatActivity.this.actionBar.isActionModeShowed()) {
                                return onTouchEvent;
                            }
                            this.processTouchEvent(motionEvent);
                            return this.startedTracking || onTouchEvent;
                        }
                        
                        @Override
                        public boolean requestChildRectangleOnScreen(final View view, final Rect rect, final boolean b) {
                            return ChatActivity.this.scrimPopupWindow == null && super.requestChildRectangleOnScreen(view, rect, b);
                        }
                        
                        @Override
                        public void requestDisallowInterceptTouchEvent(final boolean b) {
                            super.requestDisallowInterceptTouchEvent(b);
                            final ChatMessageCell slidingView = this.slidingView;
                            if (slidingView != null) {
                                this.endedTrackingX = slidingView.getTranslationX();
                                this.lastTrackingAnimationTime = System.currentTimeMillis();
                                this.trackAnimationProgress = 0.0f;
                                this.invalidate();
                                this.maybeStartTracking = false;
                                this.startedTracking = false;
                                ChatActivity.this.chatLayoutManager.setCanScrollVertically(true);
                            }
                        }
                    };
                    if (this.currentEncryptedChat != null && Build$VERSION.SDK_INT >= 19) {
                        this.chatListView.setImportantForAccessibility(4);
                    }
                    this.chatListView.setInstantClick(true);
                    this.chatListView.setDisableHighlightState(true);
                    this.chatListView.setTag((Object)1);
                    this.chatListView.setVerticalScrollBarEnabled(true);
                    this.chatListView.setAdapter(this.chatAdapter = new ChatActivityAdapter((Context)progressView));
                    this.chatListView.setClipToPadding(false);
                    this.chatListView.setPadding(0, AndroidUtilities.dp(4.0f), 0, AndroidUtilities.dp(3.0f));
                    this.chatListView.setItemAnimator(null);
                    this.chatListView.setLayoutAnimation((LayoutAnimationController)null);
                    (this.chatLayoutManager = new GridLayoutManagerFixed(progressView, 1000, 1, true) {
                        @Override
                        protected boolean hasSiblingChild(int i) {
                            if (i >= ChatActivity.this.chatAdapter.messagesStartRow && i < ChatActivity.this.chatAdapter.messagesEndRow) {
                                i -= ChatActivity.this.chatAdapter.messagesStartRow;
                                if (i >= 0 && i < ChatActivity.this.messages.size()) {
                                    final MessageObject key = ChatActivity.this.messages.get(i);
                                    final MessageObject.GroupedMessages access$14300 = ChatActivity.this.getValidGroupedMessage(key);
                                    if (access$14300 != null) {
                                        final MessageObject.GroupedMessagePosition groupedMessagePosition = access$14300.positions.get(key);
                                        if (groupedMessagePosition.minX != groupedMessagePosition.maxX) {
                                            i = groupedMessagePosition.minY;
                                            if (i == groupedMessagePosition.maxY) {
                                                if (i != 0) {
                                                    int size;
                                                    MessageObject.GroupedMessagePosition groupedMessagePosition2;
                                                    byte minY;
                                                    byte minY2;
                                                    for (size = access$14300.posArray.size(), i = 0; i < size; ++i) {
                                                        groupedMessagePosition2 = access$14300.posArray.get(i);
                                                        if (groupedMessagePosition2 != groupedMessagePosition) {
                                                            minY = groupedMessagePosition2.minY;
                                                            minY2 = groupedMessagePosition.minY;
                                                            if (minY <= minY2 && groupedMessagePosition2.maxY >= minY2) {
                                                                return true;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            return false;
                        }
                        
                        @Override
                        public boolean shouldLayoutChildFromOpositeSide(final View view) {
                            return view instanceof ChatMessageCell && (((ChatMessageCell)view).getMessageObject().isOutOwner() ^ true);
                        }
                        
                        @Override
                        public void smoothScrollToPosition(final RecyclerView recyclerView, final State state, final int targetPosition) {
                            final LinearSmoothScrollerMiddle linearSmoothScrollerMiddle = new LinearSmoothScrollerMiddle(recyclerView.getContext());
                            ((RecyclerView.SmoothScroller)linearSmoothScrollerMiddle).setTargetPosition(targetPosition);
                            ((RecyclerView.LayoutManager)this).startSmoothScroll(linearSmoothScrollerMiddle);
                        }
                        
                        @Override
                        public boolean supportsPredictiveItemAnimations() {
                            return false;
                        }
                    }).setSpanSizeLookup((GridLayoutManager.SpanSizeLookup)new GridLayoutManager.SpanSizeLookup() {
                        @Override
                        public int getSpanSize(int index) {
                            if (index >= ChatActivity.this.chatAdapter.messagesStartRow && index < ChatActivity.this.chatAdapter.messagesEndRow) {
                                index -= ChatActivity.this.chatAdapter.messagesStartRow;
                                if (index >= 0 && index < ChatActivity.this.messages.size()) {
                                    final MessageObject key = ChatActivity.this.messages.get(index);
                                    final MessageObject.GroupedMessages access$14300 = ChatActivity.this.getValidGroupedMessage(key);
                                    if (access$14300 != null) {
                                        return access$14300.positions.get(key).spanSize;
                                    }
                                }
                            }
                            return 1000;
                        }
                    });
                    this.chatListView.setLayoutManager((RecyclerView.LayoutManager)this.chatLayoutManager);
                    this.chatListView.addItemDecoration((RecyclerView.ItemDecoration)new RecyclerView.ItemDecoration() {
                        @Override
                        public void getItemOffsets(final Rect rect, final View view, final RecyclerView recyclerView, final State state) {
                            final int n = 0;
                            rect.bottom = 0;
                            if (view instanceof ChatMessageCell) {
                                final ChatMessageCell chatMessageCell = (ChatMessageCell)view;
                                final MessageObject.GroupedMessages currentMessagesGroup = chatMessageCell.getCurrentMessagesGroup();
                                if (currentMessagesGroup != null) {
                                    final MessageObject.GroupedMessagePosition currentPosition = chatMessageCell.getCurrentPosition();
                                    if (currentPosition != null && currentPosition.siblingHeights != null) {
                                        final Point displaySize = AndroidUtilities.displaySize;
                                        final float n2 = Math.max(displaySize.x, displaySize.y) * 0.5f;
                                        int captionHeight = chatMessageCell.getCaptionHeight();
                                        int n3 = 0;
                                        while (true) {
                                            final float[] siblingHeights = currentPosition.siblingHeights;
                                            if (n3 >= siblingHeights.length) {
                                                break;
                                            }
                                            captionHeight += (int)Math.ceil(siblingHeights[n3] * n2);
                                            ++n3;
                                        }
                                        final int n4 = captionHeight + (currentPosition.maxY - currentPosition.minY) * Math.round(AndroidUtilities.density * 7.0f);
                                        final int size = currentMessagesGroup.posArray.size();
                                        int index = n;
                                        int n5;
                                        while (true) {
                                            n5 = n4;
                                            if (index >= size) {
                                                break;
                                            }
                                            final MessageObject.GroupedMessagePosition groupedMessagePosition = currentMessagesGroup.posArray.get(index);
                                            final byte minY = groupedMessagePosition.minY;
                                            final byte minY2 = currentPosition.minY;
                                            if (minY == minY2) {
                                                if (groupedMessagePosition.minX != currentPosition.minX || groupedMessagePosition.maxX != currentPosition.maxX || minY != minY2 || groupedMessagePosition.maxY != currentPosition.maxY) {
                                                    if (groupedMessagePosition.minY == currentPosition.minY) {
                                                        n5 = n4 - ((int)Math.ceil(n2 * groupedMessagePosition.ph) - AndroidUtilities.dp(4.0f));
                                                        break;
                                                    }
                                                }
                                            }
                                            ++index;
                                        }
                                        rect.bottom = -n5;
                                    }
                                }
                            }
                        }
                    });
                    this.contentView.addView((View)this.chatListView, (ViewGroup$LayoutParams)LayoutHelper.createFrame(-1, -1.0f));
                    this.chatListView.setOnItemLongClickListener(this.onItemLongClickListener);
                    this.chatListView.setOnItemClickListener(this.onItemClickListener);
                    this.chatListView.setOnScrollListener(new RecyclerView.OnScrollListener() {
                        private boolean scrollUp;
                        private final int scrollValue = AndroidUtilities.dp(100.0f);
                        private float totalDy = 0.0f;
                        
                        @Override
                        public void onScrollStateChanged(final RecyclerView recyclerView, final int n) {
                            if (n == 2) {
                                ChatActivity.this.wasManualScroll = true;
                                ChatActivity.this.scrollingChatListView = true;
                            }
                            else if (n == 1) {
                                ChatActivity.this.wasManualScroll = true;
                                ChatActivity.this.scrollingFloatingDate = true;
                                ChatActivity.this.checkTextureViewPosition = true;
                                ChatActivity.this.scrollingChatListView = true;
                            }
                            else if (n == 0) {
                                ChatActivity.this.scrollingFloatingDate = false;
                                ChatActivity.this.scrollingChatListView = false;
                                ChatActivity.this.checkTextureViewPosition = false;
                                ChatActivity.this.hideFloatingDateView(true);
                                ChatActivity.this.checkAutoDownloadMessages(this.scrollUp);
                            }
                        }
                        
                        @Override
                        public void onScrolled(final RecyclerView recyclerView, int firstVisibleItemPosition, final int n) {
                            ChatActivity.this.chatListView.invalidate();
                            this.scrollUp = (n < 0);
                            if (!ChatActivity.this.wasManualScroll && n != 0) {
                                ChatActivity.this.wasManualScroll = true;
                            }
                            if (n != 0) {
                                if (ChatActivity.this.noSoundHintView != null) {
                                    ChatActivity.this.noSoundHintView.hide();
                                }
                                if (ChatActivity.this.forwardHintView != null) {
                                    ChatActivity.this.forwardHintView.hide();
                                }
                            }
                            if (n != 0 && ChatActivity.this.scrollingFloatingDate && !ChatActivity.this.currentFloatingTopIsNotMessage) {
                                if (ChatActivity.this.highlightMessageId != Integer.MAX_VALUE) {
                                    ChatActivity.this.removeSelectedMessageHighlight();
                                    ChatActivity.this.updateVisibleRows();
                                }
                                ChatActivity.this.showFloatingDateView(true);
                            }
                            ChatActivity.this.checkScrollForLoad(true);
                            firstVisibleItemPosition = ChatActivity.this.chatLayoutManager.findFirstVisibleItemPosition();
                            if (firstVisibleItemPosition != -1) {
                                ChatActivity.this.chatAdapter.getItemCount();
                                if (firstVisibleItemPosition == 0 && ChatActivity.this.forwardEndReached[0]) {
                                    ChatActivity.this.showPagedownButton(false, true);
                                }
                                else if (n > 0) {
                                    if (ChatActivity.this.pagedownButton.getTag() == null) {
                                        this.totalDy += n;
                                        if (this.totalDy > this.scrollValue) {
                                            this.totalDy = 0.0f;
                                            ChatActivity.this.showPagedownButton(true, true);
                                            ChatActivity.this.pagedownButtonShowedByScroll = true;
                                        }
                                    }
                                }
                                else if (ChatActivity.this.pagedownButtonShowedByScroll && ChatActivity.this.pagedownButton.getTag() != null) {
                                    this.totalDy += n;
                                    if (this.totalDy < -this.scrollValue) {
                                        ChatActivity.this.showPagedownButton(false, true);
                                        this.totalDy = 0.0f;
                                    }
                                }
                            }
                            ChatActivity.this.updateMessagesVisiblePart(true);
                        }
                    });
                    (this.progressView = new FrameLayout((Context)progressView)).setVisibility(4);
                    this.contentView.addView((View)this.progressView, (ViewGroup$LayoutParams)LayoutHelper.createFrame(-1, -1, 51));
                    (this.progressView2 = new View((Context)progressView)).setBackgroundResource(2131165872);
                    this.progressView2.getBackground().setColorFilter((ColorFilter)Theme.colorFilter);
                    this.progressView.addView(this.progressView2, (ViewGroup$LayoutParams)LayoutHelper.createFrame(36, 36, 17));
                    (this.progressBar = new RadialProgressView((Context)progressView)).setSize(AndroidUtilities.dp(28.0f));
                    this.progressBar.setProgressColor(Theme.getColor("chat_serviceText"));
                    this.progressView.addView((View)this.progressBar, (ViewGroup$LayoutParams)LayoutHelper.createFrame(32, 32, 17));
                    (this.floatingDateView = new ChatActionCell(progressView) {
                        public boolean onInterceptTouchEvent(final MotionEvent motionEvent) {
                            return this.getAlpha() != 0.0f && !ChatActivity.this.actionBar.isActionModeShowed() && super.onInterceptTouchEvent(motionEvent);
                        }
                        
                        @Override
                        public boolean onTouchEvent(final MotionEvent motionEvent) {
                            return this.getAlpha() != 0.0f && !ChatActivity.this.actionBar.isActionModeShowed() && super.onTouchEvent(motionEvent);
                        }
                    }).setAlpha(0.0f);
                    this.contentView.addView((View)this.floatingDateView, (ViewGroup$LayoutParams)LayoutHelper.createFrame(-2, -2.0f, 49, 0.0f, 4.0f, 0.0f, 0.0f));
                    this.floatingDateView.setOnClickListener((View$OnClickListener)new _$$Lambda$ChatActivity$TRtVc5U1jd24GfIVVVdgV24kMHw(this));
                    if (this.currentEncryptedChat == null) {
                        (this.pinnedMessageView = new FrameLayout((Context)progressView)).setTag((Object)1);
                        this.pinnedMessageView.setTranslationY((float)(-AndroidUtilities.dp(50.0f)));
                        this.pinnedMessageView.setVisibility(8);
                        this.pinnedMessageView.setBackgroundResource(2131165305);
                        this.pinnedMessageView.getBackground().setColorFilter((ColorFilter)new PorterDuffColorFilter(Theme.getColor("chat_topPanelBackground"), PorterDuff$Mode.MULTIPLY));
                        this.contentView.addView((View)this.pinnedMessageView, (ViewGroup$LayoutParams)LayoutHelper.createFrame(-1, 50, 51));
                        this.pinnedMessageView.setOnClickListener((View$OnClickListener)new _$$Lambda$ChatActivity$eO37gXPlV8wUc5mdxL8y_mJBqno(this));
                        (this.pinnedLineView = new View((Context)progressView)).setBackgroundColor(Theme.getColor("chat_topPanelLine"));
                        this.pinnedMessageView.addView(this.pinnedLineView, (ViewGroup$LayoutParams)LayoutHelper.createFrame(2, 32.0f, 51, 8.0f, 8.0f, 0.0f, 0.0f));
                        this.pinnedMessageImageView = new BackupImageView((Context)progressView);
                        this.pinnedMessageView.addView((View)this.pinnedMessageImageView, (ViewGroup$LayoutParams)LayoutHelper.createFrame(32, 32.0f, 51, 17.0f, 8.0f, 0.0f, 0.0f));
                        (this.pinnedMessageNameTextView = new SimpleTextView((Context)progressView)).setTextSize(14);
                        this.pinnedMessageNameTextView.setTextColor(Theme.getColor("chat_topPanelTitle"));
                        this.pinnedMessageNameTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                        this.pinnedMessageView.addView((View)this.pinnedMessageNameTextView, (ViewGroup$LayoutParams)LayoutHelper.createFrame(-1, (float)AndroidUtilities.dp(18.0f), 51, 18.0f, 7.3f, 40.0f, 0.0f));
                        (this.pinnedMessageTextView = new SimpleTextView((Context)progressView)).setTextSize(14);
                        this.pinnedMessageTextView.setTextColor(Theme.getColor("chat_topPanelMessage"));
                        this.pinnedMessageView.addView((View)this.pinnedMessageTextView, (ViewGroup$LayoutParams)LayoutHelper.createFrame(-1, (float)AndroidUtilities.dp(18.0f), 51, 18.0f, 25.3f, 40.0f, 0.0f));
                        (this.closePinned = new ImageView((Context)progressView)).setImageResource(2131165604);
                        this.closePinned.setColorFilter((ColorFilter)new PorterDuffColorFilter(Theme.getColor("chat_topPanelClose"), PorterDuff$Mode.MULTIPLY));
                        this.closePinned.setScaleType(ImageView$ScaleType.CENTER);
                        this.closePinned.setContentDescription((CharSequence)LocaleController.getString("Close", 2131559117));
                        this.pinnedMessageView.addView((View)this.closePinned, (ViewGroup$LayoutParams)LayoutHelper.createFrame(36, 48, 53));
                        this.closePinned.setOnClickListener((View$OnClickListener)new _$$Lambda$ChatActivity$MC1nlfA7DBtHsUYoqPF_QO9JBh4(this));
                    }
                    (this.reportSpamView = new LinearLayout((Context)progressView)).setTag((Object)1);
                    this.reportSpamView.setTranslationY((float)(-AndroidUtilities.dp(50.0f)));
                    this.reportSpamView.setVisibility(8);
                    this.reportSpamView.setBackgroundResource(2131165305);
                    this.reportSpamView.getBackground().setColorFilter((ColorFilter)new PorterDuffColorFilter(Theme.getColor("chat_topPanelBackground"), PorterDuff$Mode.MULTIPLY));
                    this.contentView.addView((View)this.reportSpamView, (ViewGroup$LayoutParams)LayoutHelper.createFrame(-1, 50, 51));
                    (this.addToContactsButton = new TextView((Context)progressView)).setTextColor(Theme.getColor("chat_addContact"));
                    this.addToContactsButton.setVisibility(8);
                    this.addToContactsButton.setTextSize(1, 14.0f);
                    this.addToContactsButton.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                    this.addToContactsButton.setSingleLine(true);
                    this.addToContactsButton.setMaxLines(1);
                    this.addToContactsButton.setPadding(AndroidUtilities.dp(4.0f), 0, AndroidUtilities.dp(4.0f), 0);
                    this.addToContactsButton.setGravity(17);
                    this.addToContactsButton.setText((CharSequence)LocaleController.getString("AddContactChat", 2131558568));
                    this.reportSpamView.addView((View)this.addToContactsButton, (ViewGroup$LayoutParams)LayoutHelper.createLinear(-1, -1, 0.5f, 51, 0, 0, 0, AndroidUtilities.dp(1.0f)));
                    this.addToContactsButton.setOnClickListener((View$OnClickListener)new _$$Lambda$ChatActivity$Wxpp0NnBw1B_RABTqRtxQIyzsu4(this));
                    this.reportSpamContainer = new FrameLayout((Context)progressView);
                    this.reportSpamView.addView((View)this.reportSpamContainer, (ViewGroup$LayoutParams)LayoutHelper.createLinear(-1, -1, 1.0f, 51, 0, 0, 0, AndroidUtilities.dp(1.0f)));
                    (this.reportSpamButton = new TextView((Context)progressView)).setTextColor(Theme.getColor("chat_reportSpam"));
                    this.reportSpamButton.setTextSize(1, 14.0f);
                    this.reportSpamButton.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                    this.reportSpamButton.setSingleLine(true);
                    this.reportSpamButton.setMaxLines(1);
                    if (this.currentChat != null) {
                        this.reportSpamButton.setText((CharSequence)LocaleController.getString("ReportSpamAndLeave", 2131560580));
                    }
                    else {
                        this.reportSpamButton.setText((CharSequence)LocaleController.getString("ReportSpam", 2131560576));
                    }
                    this.reportSpamButton.setGravity(17);
                    this.reportSpamButton.setPadding(AndroidUtilities.dp(50.0f), 0, AndroidUtilities.dp(50.0f), 0);
                    this.reportSpamContainer.addView((View)this.reportSpamButton, (ViewGroup$LayoutParams)LayoutHelper.createFrame(-1, -1, 51));
                    this.reportSpamButton.setOnClickListener((View$OnClickListener)new _$$Lambda$ChatActivity$df_WH8DglycOP9kTI3yHoOkfKQ4(this));
                    (this.closeReportSpam = new ImageView((Context)progressView)).setImageResource(2131165604);
                    this.closeReportSpam.setColorFilter((ColorFilter)new PorterDuffColorFilter(Theme.getColor("chat_topPanelClose"), PorterDuff$Mode.MULTIPLY));
                    this.closeReportSpam.setScaleType(ImageView$ScaleType.CENTER);
                    this.reportSpamContainer.addView((View)this.closeReportSpam, (ViewGroup$LayoutParams)LayoutHelper.createFrame(48, 48, 53));
                    this.closeReportSpam.setOnClickListener((View$OnClickListener)new _$$Lambda$ChatActivity$IBbC6tGGvSanxWVehZQ8A5DagBM(this));
                    (this.alertView = new FrameLayout((Context)progressView)).setTag((Object)1);
                    this.alertView.setTranslationY((float)(-AndroidUtilities.dp(50.0f)));
                    this.alertView.setVisibility(8);
                    this.alertView.setBackgroundResource(2131165305);
                    this.alertView.getBackground().setColorFilter((ColorFilter)new PorterDuffColorFilter(Theme.getColor("chat_topPanelBackground"), PorterDuff$Mode.MULTIPLY));
                    this.contentView.addView((View)this.alertView, (ViewGroup$LayoutParams)LayoutHelper.createFrame(-1, 50, 51));
                    (this.alertNameTextView = new TextView((Context)progressView)).setTextSize(1, 14.0f);
                    this.alertNameTextView.setTextColor(Theme.getColor("chat_topPanelTitle"));
                    this.alertNameTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                    this.alertNameTextView.setSingleLine(true);
                    this.alertNameTextView.setEllipsize(TextUtils$TruncateAt.END);
                    this.alertNameTextView.setMaxLines(1);
                    this.alertView.addView((View)this.alertNameTextView, (ViewGroup$LayoutParams)LayoutHelper.createFrame(-2, -2.0f, 51, 8.0f, 5.0f, 8.0f, 0.0f));
                    (this.alertTextView = new TextView((Context)progressView)).setTextSize(1, 14.0f);
                    this.alertTextView.setTextColor(Theme.getColor("chat_topPanelMessage"));
                    this.alertTextView.setSingleLine(true);
                    this.alertTextView.setEllipsize(TextUtils$TruncateAt.END);
                    this.alertTextView.setMaxLines(1);
                    this.alertView.addView((View)this.alertTextView, (ViewGroup$LayoutParams)LayoutHelper.createFrame(-2, -2.0f, 51, 8.0f, 23.0f, 8.0f, 0.0f));
                    (this.pagedownButton = new FrameLayout((Context)progressView)).setVisibility(4);
                    this.contentView.addView((View)this.pagedownButton, (ViewGroup$LayoutParams)LayoutHelper.createFrame(66, 59.0f, 85, 0.0f, 0.0f, -3.0f, 5.0f));
                    this.pagedownButton.setOnClickListener((View$OnClickListener)new _$$Lambda$ChatActivity$8zbREdQOEF7GEfjtwX3ytHFHUU8(this));
                    (this.mentiondownButton = new FrameLayout((Context)progressView)).setVisibility(4);
                    this.contentView.addView((View)this.mentiondownButton, (ViewGroup$LayoutParams)LayoutHelper.createFrame(46, 59.0f, 85, 0.0f, 0.0f, 7.0f, 5.0f));
                    this.mentiondownButton.setOnClickListener((View$OnClickListener)new View$OnClickListener() {
                        private void loadLastUnreadMention() {
                            ChatActivity.this.wasManualScroll = true;
                            if (ChatActivity.this.hasAllMentionsLocal) {
                                MessagesStorage.getInstance(ChatActivity.this.currentAccount).getUnreadMention(ChatActivity.this.dialog_id, (MessagesStorage.IntCallback)new _$$Lambda$ChatActivity$15$YszPBmqpkUY2LK3hO1BNGpmmT7E(this));
                            }
                            else {
                                final MessagesStorage instance = MessagesStorage.getInstance(ChatActivity.this.currentAccount);
                                final TLRPC.TL_messages_getUnreadMentions tl_messages_getUnreadMentions = new TLRPC.TL_messages_getUnreadMentions();
                                tl_messages_getUnreadMentions.peer = MessagesController.getInstance(ChatActivity.this.currentAccount).getInputPeer((int)ChatActivity.this.dialog_id);
                                tl_messages_getUnreadMentions.limit = 1;
                                tl_messages_getUnreadMentions.add_offset = ChatActivity.this.newMentionsCount - 1;
                                ConnectionsManager.getInstance(ChatActivity.this.currentAccount).sendRequest(tl_messages_getUnreadMentions, new _$$Lambda$ChatActivity$15$TWyfKj_zNuWPP70_9PkaiO4T_9Q(this, instance));
                            }
                        }
                        
                        public void onClick(final View view) {
                            this.loadLastUnreadMention();
                        }
                    });
                    this.mentiondownButton.setOnLongClickListener((View$OnLongClickListener)new _$$Lambda$ChatActivity$qWx1xNvyjcE0eUD8CIvcA7RTi9U(this));
                    if (!this.isBroadcast) {
                        (this.mentionContainer = new FrameLayout(progressView) {
                            public void onDraw(final Canvas canvas) {
                                if (ChatActivity.this.mentionListView.getChildCount() <= 0) {
                                    return;
                                }
                                if (ChatActivity.this.mentionLayoutManager.getReverseLayout()) {
                                    final int n = ChatActivity.this.mentionListViewScrollOffsetY + AndroidUtilities.dp(2.0f);
                                    Theme.chat_composeShadowDrawable.setBounds(0, Theme.chat_composeShadowDrawable.getIntrinsicHeight() + n, this.getMeasuredWidth(), n);
                                    Theme.chat_composeShadowDrawable.draw(canvas);
                                    canvas.drawRect(0.0f, 0.0f, (float)this.getMeasuredWidth(), (float)n, Theme.chat_composeBackgroundPaint);
                                }
                                else {
                                    int n2;
                                    int n3;
                                    if (ChatActivity.this.mentionsAdapter.isBotContext() && ChatActivity.this.mentionsAdapter.isMediaLayout() && ChatActivity.this.mentionsAdapter.getBotContextSwitch() == null) {
                                        n2 = ChatActivity.this.mentionListViewScrollOffsetY;
                                        n3 = AndroidUtilities.dp(4.0f);
                                    }
                                    else {
                                        n2 = ChatActivity.this.mentionListViewScrollOffsetY;
                                        n3 = AndroidUtilities.dp(2.0f);
                                    }
                                    final int n4 = n2 - n3;
                                    final int n5 = Theme.chat_composeShadowDrawable.getIntrinsicHeight() + n4;
                                    Theme.chat_composeShadowDrawable.setBounds(0, n4, this.getMeasuredWidth(), n5);
                                    Theme.chat_composeShadowDrawable.draw(canvas);
                                    canvas.drawRect(0.0f, (float)n5, (float)this.getMeasuredWidth(), (float)this.getMeasuredHeight(), Theme.chat_composeBackgroundPaint);
                                }
                            }
                            
                            public void requestLayout() {
                                if (ChatActivity.this.mentionListViewIgnoreLayout) {
                                    return;
                                }
                                super.requestLayout();
                            }
                        }).setVisibility(8);
                        this.updateMessageListAccessibilityVisibility();
                        this.mentionContainer.setWillNotDraw(false);
                        this.contentView.addView((View)this.mentionContainer, (ViewGroup$LayoutParams)LayoutHelper.createFrame(-1, 110, 83));
                        (this.mentionListView = new RecyclerListView(progressView) {
                            private int lastHeight;
                            private int lastWidth;
                            
                            @Override
                            public boolean onInterceptTouchEvent(final MotionEvent motionEvent) {
                                final boolean reverseLayout = ChatActivity.this.mentionLayoutManager.getReverseLayout();
                                boolean b = false;
                                if (reverseLayout) {
                                    if (!ChatActivity.this.mentionListViewIsScrolling && ChatActivity.this.mentionListViewScrollOffsetY != 0 && motionEvent.getY() > ChatActivity.this.mentionListViewScrollOffsetY) {
                                        return false;
                                    }
                                }
                                else if (!ChatActivity.this.mentionListViewIsScrolling && ChatActivity.this.mentionListViewScrollOffsetY != 0 && motionEvent.getY() < ChatActivity.this.mentionListViewScrollOffsetY) {
                                    return false;
                                }
                                final boolean onInterceptTouchEvent = ContentPreviewViewer.getInstance().onInterceptTouchEvent(motionEvent, ChatActivity.this.mentionListView, 0, null);
                                if (super.onInterceptTouchEvent(motionEvent) || onInterceptTouchEvent) {
                                    b = true;
                                }
                                return b;
                            }
                            
                            @Override
                            protected void onLayout(final boolean b, final int n, final int n2, final int n3, final int n4) {
                                final int lastWidth = n3 - n;
                                final int lastHeight = n4 - n2;
                                int access$16800;
                                int n5;
                                if (!ChatActivity.this.mentionLayoutManager.getReverseLayout() && ChatActivity.this.mentionListView != null && ChatActivity.this.mentionListViewLastViewPosition >= 0 && lastWidth == this.lastWidth && lastHeight - this.lastHeight != 0) {
                                    access$16800 = ChatActivity.this.mentionListViewLastViewPosition;
                                    n5 = ChatActivity.this.mentionListViewLastViewTop + lastHeight - this.lastHeight - this.getPaddingTop();
                                }
                                else {
                                    access$16800 = -1;
                                    n5 = 0;
                                }
                                super.onLayout(b, n, n2, n3, n4);
                                if (access$16800 != -1) {
                                    ChatActivity.this.mentionListViewIgnoreLayout = true;
                                    if (ChatActivity.this.mentionsAdapter.isBotContext() && ChatActivity.this.mentionsAdapter.isMediaLayout()) {
                                        ChatActivity.this.mentionGridLayoutManager.scrollToPositionWithOffset(access$16800, n5);
                                    }
                                    else {
                                        ChatActivity.this.mentionLayoutManager.scrollToPositionWithOffset(access$16800, n5);
                                    }
                                    super.onLayout(false, n, n2, n3, n4);
                                    ChatActivity.this.mentionListViewIgnoreLayout = false;
                                }
                                this.lastHeight = lastHeight;
                                this.lastWidth = lastWidth;
                                ChatActivity.this.mentionListViewUpdateLayout();
                            }
                            
                            @Override
                            public boolean onTouchEvent(final MotionEvent motionEvent) {
                                if (ChatActivity.this.mentionLayoutManager.getReverseLayout()) {
                                    if (!ChatActivity.this.mentionListViewIsScrolling && ChatActivity.this.mentionListViewScrollOffsetY != 0 && motionEvent.getY() > ChatActivity.this.mentionListViewScrollOffsetY) {
                                        return false;
                                    }
                                }
                                else if (!ChatActivity.this.mentionListViewIsScrolling && ChatActivity.this.mentionListViewScrollOffsetY != 0 && motionEvent.getY() < ChatActivity.this.mentionListViewScrollOffsetY) {
                                    return false;
                                }
                                return super.onTouchEvent(motionEvent);
                            }
                            
                            @Override
                            public void requestLayout() {
                                if (ChatActivity.this.mentionListViewIgnoreLayout) {
                                    return;
                                }
                                super.requestLayout();
                            }
                        }).setOnTouchListener((View$OnTouchListener)new _$$Lambda$ChatActivity$u9129r_c2oid4B9nFfEqrAorkw0(this));
                        this.mentionListView.setTag((Object)2);
                        (this.mentionLayoutManager = new LinearLayoutManager(progressView) {
                            @Override
                            public boolean supportsPredictiveItemAnimations() {
                                return false;
                            }
                        }).setOrientation(1);
                        (this.mentionGridLayoutManager = new ExtendedGridLayoutManager(progressView, 100) {
                            private Size size = new Size();
                            
                            @Override
                            protected int getFlowItemCount() {
                                if (ChatActivity.this.mentionsAdapter.getBotContextSwitch() != null) {
                                    return ((RecyclerView.LayoutManager)this).getItemCount() - 1;
                                }
                                return super.getFlowItemCount();
                            }
                            
                            @Override
                            protected Size getSizeForItem(int i) {
                                int n = i;
                                if (ChatActivity.this.mentionsAdapter.getBotContextSwitch() != null) {
                                    n = i + 1;
                                }
                                final Size size = this.size;
                                size.width = 0.0f;
                                size.height = 0.0f;
                                final Object item = ChatActivity.this.mentionsAdapter.getItem(n);
                                if (item instanceof TLRPC.BotInlineResult) {
                                    final TLRPC.BotInlineResult botInlineResult = (TLRPC.BotInlineResult)item;
                                    final TLRPC.Document document = botInlineResult.document;
                                    final int n2 = 0;
                                    final int n3 = 0;
                                    i = 0;
                                    if (document != null) {
                                        final TLRPC.PhotoSize closestPhotoSizeWithSize = FileLoader.getClosestPhotoSizeWithSize(document.thumbs, 90);
                                        final Size size2 = this.size;
                                        final float n4 = 100.0f;
                                        float width;
                                        if (closestPhotoSizeWithSize != null) {
                                            width = (float)closestPhotoSizeWithSize.w;
                                        }
                                        else {
                                            width = 100.0f;
                                        }
                                        size2.width = width;
                                        final Size size3 = this.size;
                                        float height = n4;
                                        if (closestPhotoSizeWithSize != null) {
                                            height = (float)closestPhotoSizeWithSize.h;
                                        }
                                        size3.height = height;
                                        while (i < botInlineResult.document.attributes.size()) {
                                            final TLRPC.DocumentAttribute documentAttribute = botInlineResult.document.attributes.get(i);
                                            if (documentAttribute instanceof TLRPC.TL_documentAttributeImageSize || documentAttribute instanceof TLRPC.TL_documentAttributeVideo) {
                                                final Size size4 = this.size;
                                                size4.width = (float)documentAttribute.w;
                                                size4.height = (float)documentAttribute.h;
                                                break;
                                            }
                                            ++i;
                                        }
                                    }
                                    else if (botInlineResult.content != null) {
                                        TLRPC.DocumentAttribute documentAttribute2;
                                        Size size5;
                                        for (i = n2; i < botInlineResult.content.attributes.size(); ++i) {
                                            documentAttribute2 = botInlineResult.content.attributes.get(i);
                                            if (documentAttribute2 instanceof TLRPC.TL_documentAttributeImageSize || documentAttribute2 instanceof TLRPC.TL_documentAttributeVideo) {
                                                size5 = this.size;
                                                size5.width = (float)documentAttribute2.w;
                                                size5.height = (float)documentAttribute2.h;
                                                break;
                                            }
                                        }
                                    }
                                    else if (botInlineResult.thumb != null) {
                                        TLRPC.DocumentAttribute documentAttribute3;
                                        Size size6;
                                        for (i = n3; i < botInlineResult.thumb.attributes.size(); ++i) {
                                            documentAttribute3 = botInlineResult.thumb.attributes.get(i);
                                            if (documentAttribute3 instanceof TLRPC.TL_documentAttributeImageSize || documentAttribute3 instanceof TLRPC.TL_documentAttributeVideo) {
                                                size6 = this.size;
                                                size6.width = (float)documentAttribute3.w;
                                                size6.height = (float)documentAttribute3.h;
                                                break;
                                            }
                                        }
                                    }
                                    else {
                                        final TLRPC.Photo photo = botInlineResult.photo;
                                        if (photo != null) {
                                            final TLRPC.PhotoSize closestPhotoSizeWithSize2 = FileLoader.getClosestPhotoSizeWithSize(photo.sizes, AndroidUtilities.photoSize);
                                            if (closestPhotoSizeWithSize2 != null) {
                                                final Size size7 = this.size;
                                                size7.width = (float)closestPhotoSizeWithSize2.w;
                                                size7.height = (float)closestPhotoSizeWithSize2.h;
                                            }
                                        }
                                    }
                                }
                                return this.size;
                            }
                        }).setSpanSizeLookup((GridLayoutManager.SpanSizeLookup)new GridLayoutManager.SpanSizeLookup() {
                            @Override
                            public int getSpanSize(final int n) {
                                if (ChatActivity.this.mentionsAdapter.getItem(n) instanceof TLRPC.TL_inlineBotSwitchPM) {
                                    return 100;
                                }
                                int n2 = n;
                                if (ChatActivity.this.mentionsAdapter.getBotContextSwitch() != null) {
                                    n2 = n - 1;
                                }
                                return ChatActivity.this.mentionGridLayoutManager.getSpanSizeForItem(n2);
                            }
                        });
                        this.mentionListView.addItemDecoration((RecyclerView.ItemDecoration)new RecyclerView.ItemDecoration() {
                            @Override
                            public void getItemOffsets(final Rect rect, final View view, final RecyclerView recyclerView, final State state) {
                                final int n = 0;
                                rect.left = 0;
                                rect.right = 0;
                                rect.top = 0;
                                rect.bottom = 0;
                                if (recyclerView.getLayoutManager() == ChatActivity.this.mentionGridLayoutManager) {
                                    int childAdapterPosition = recyclerView.getChildAdapterPosition(view);
                                    if (ChatActivity.this.mentionsAdapter.getBotContextSwitch() != null) {
                                        if (childAdapterPosition == 0) {
                                            return;
                                        }
                                        final int n2 = --childAdapterPosition;
                                        if (!ChatActivity.this.mentionGridLayoutManager.isFirstRow(n2)) {
                                            rect.top = AndroidUtilities.dp(2.0f);
                                            childAdapterPosition = n2;
                                        }
                                    }
                                    else {
                                        rect.top = AndroidUtilities.dp(2.0f);
                                    }
                                    int dp;
                                    if (ChatActivity.this.mentionGridLayoutManager.isLastInRow(childAdapterPosition)) {
                                        dp = n;
                                    }
                                    else {
                                        dp = AndroidUtilities.dp(2.0f);
                                    }
                                    rect.right = dp;
                                }
                            }
                        });
                        this.mentionListView.setItemAnimator(null);
                        this.mentionListView.setLayoutAnimation((LayoutAnimationController)null);
                        this.mentionListView.setClipToPadding(false);
                        this.mentionListView.setLayoutManager((RecyclerView.LayoutManager)this.mentionLayoutManager);
                        this.mentionListView.setOverScrollMode(2);
                        this.mentionContainer.addView((View)this.mentionListView, (ViewGroup$LayoutParams)LayoutHelper.createFrame(-1, -1.0f));
                        this.mentionListView.setAdapter(this.mentionsAdapter = new MentionsAdapter((Context)progressView, false, this.dialog_id, (MentionsAdapter.MentionsAdapterDelegate)new MentionsAdapter.MentionsAdapterDelegate() {
                            @Override
                            public void needChangePanelVisibility(final boolean b) {
                                if (ChatActivity.this.mentionsAdapter.isBotContext() && ChatActivity.this.mentionsAdapter.isMediaLayout()) {
                                    ChatActivity.this.mentionListView.setLayoutManager((RecyclerView.LayoutManager)ChatActivity.this.mentionGridLayoutManager);
                                }
                                else {
                                    ChatActivity.this.mentionListView.setLayoutManager((RecyclerView.LayoutManager)ChatActivity.this.mentionLayoutManager);
                                }
                                boolean b2 = b;
                                if (b) {
                                    b2 = b;
                                    if (ChatActivity.this.bottomOverlay.getVisibility() == 0) {
                                        b2 = false;
                                    }
                                }
                                if (b2) {
                                    if (ChatActivity.this.mentionListAnimation != null) {
                                        ChatActivity.this.mentionListAnimation.cancel();
                                        ChatActivity.this.mentionListAnimation = null;
                                    }
                                    if (ChatActivity.this.mentionContainer.getVisibility() == 0) {
                                        ChatActivity.this.mentionContainer.setAlpha(1.0f);
                                        return;
                                    }
                                    final boolean botContext = ChatActivity.this.mentionsAdapter.isBotContext();
                                    int n = 10000;
                                    if (botContext && ChatActivity.this.mentionsAdapter.isMediaLayout()) {
                                        ChatActivity.this.mentionGridLayoutManager.scrollToPositionWithOffset(0, 10000);
                                    }
                                    else if (!ChatActivity.this.mentionLayoutManager.getReverseLayout()) {
                                        final LinearLayoutManager access$5900 = ChatActivity.this.mentionLayoutManager;
                                        if (ChatActivity.this.mentionLayoutManager.getReverseLayout()) {
                                            n = -10000;
                                        }
                                        access$5900.scrollToPositionWithOffset(0, n);
                                    }
                                    if (ChatActivity.this.allowStickersPanel && (!ChatActivity.this.mentionsAdapter.isBotContext() || ChatActivity.this.allowContextBotPanel || ChatActivity.this.allowContextBotPanelSecond)) {
                                        final ChatActivity this$0 = ChatActivity.this;
                                        if (this$0.currentEncryptedChat != null && this$0.mentionsAdapter.isBotContext()) {
                                            final SharedPreferences globalMainSettings = MessagesController.getGlobalMainSettings();
                                            if (!globalMainSettings.getBoolean("secretbot", false)) {
                                                final AlertDialog.Builder builder = new AlertDialog.Builder((Context)ChatActivity.this.getParentActivity());
                                                builder.setTitle(LocaleController.getString("AppName", 2131558635));
                                                builder.setMessage(LocaleController.getString("SecretChatContextBotAlert", 2131560670));
                                                builder.setPositiveButton(LocaleController.getString("OK", 2131560097), null);
                                                ChatActivity.this.showDialog(builder.create());
                                                globalMainSettings.edit().putBoolean("secretbot", true).commit();
                                            }
                                        }
                                        ChatActivity.this.mentionContainer.setVisibility(0);
                                        ChatActivity.this.updateMessageListAccessibilityVisibility();
                                        ChatActivity.this.mentionContainer.setTag((Object)null);
                                        ChatActivity.this.mentionListAnimation = new AnimatorSet();
                                        ChatActivity.this.mentionListAnimation.playTogether(new Animator[] { (Animator)ObjectAnimator.ofFloat((Object)ChatActivity.this.mentionContainer, View.ALPHA, new float[] { 0.0f, 1.0f }) });
                                        ChatActivity.this.mentionListAnimation.addListener((Animator$AnimatorListener)new AnimatorListenerAdapter() {
                                            public void onAnimationCancel(final Animator obj) {
                                                if (ChatActivity.this.mentionListAnimation != null && ChatActivity.this.mentionListAnimation.equals(obj)) {
                                                    ChatActivity.this.mentionListAnimation = null;
                                                }
                                            }
                                            
                                            public void onAnimationEnd(final Animator obj) {
                                                if (ChatActivity.this.mentionListAnimation != null && ChatActivity.this.mentionListAnimation.equals(obj)) {
                                                    ChatActivity.this.mentionListAnimation = null;
                                                }
                                            }
                                        });
                                        ChatActivity.this.mentionListAnimation.setDuration(200L);
                                        ChatActivity.this.mentionListAnimation.start();
                                    }
                                    else {
                                        ChatActivity.this.mentionContainer.setAlpha(1.0f);
                                        ChatActivity.this.mentionContainer.setVisibility(4);
                                        ChatActivity.this.updateMessageListAccessibilityVisibility();
                                    }
                                }
                                else {
                                    if (ChatActivity.this.mentionListAnimation != null) {
                                        ChatActivity.this.mentionListAnimation.cancel();
                                        ChatActivity.this.mentionListAnimation = null;
                                    }
                                    if (ChatActivity.this.mentionContainer.getVisibility() == 8) {
                                        return;
                                    }
                                    if (ChatActivity.this.allowStickersPanel) {
                                        ChatActivity.this.mentionListAnimation = new AnimatorSet();
                                        ChatActivity.this.mentionListAnimation.playTogether(new Animator[] { (Animator)ObjectAnimator.ofFloat((Object)ChatActivity.this.mentionContainer, View.ALPHA, new float[] { 0.0f }) });
                                        ChatActivity.this.mentionListAnimation.addListener((Animator$AnimatorListener)new AnimatorListenerAdapter() {
                                            public void onAnimationCancel(final Animator obj) {
                                                if (ChatActivity.this.mentionListAnimation != null && ChatActivity.this.mentionListAnimation.equals(obj)) {
                                                    ChatActivity.this.mentionListAnimation = null;
                                                }
                                            }
                                            
                                            public void onAnimationEnd(final Animator obj) {
                                                if (ChatActivity.this.mentionListAnimation != null && ChatActivity.this.mentionListAnimation.equals(obj)) {
                                                    ChatActivity.this.mentionContainer.setVisibility(8);
                                                    ChatActivity.this.mentionContainer.setTag((Object)null);
                                                    ChatActivity.this.updateMessageListAccessibilityVisibility();
                                                    ChatActivity.this.mentionListAnimation = null;
                                                }
                                            }
                                        });
                                        ChatActivity.this.mentionListAnimation.setDuration(200L);
                                        ChatActivity.this.mentionListAnimation.start();
                                    }
                                    else {
                                        ChatActivity.this.mentionContainer.setTag((Object)null);
                                        ChatActivity.this.mentionContainer.setVisibility(8);
                                        ChatActivity.this.updateMessageListAccessibilityVisibility();
                                    }
                                }
                            }
                            
                            @Override
                            public void onContextClick(final TLRPC.BotInlineResult botInlineResult) {
                                if (ChatActivity.this.getParentActivity() != null) {
                                    if (botInlineResult.content != null) {
                                        if (!botInlineResult.type.equals("video") && !botInlineResult.type.equals("web_player_video")) {
                                            Browser.openUrl((Context)ChatActivity.this.getParentActivity(), botInlineResult.content.url);
                                        }
                                        else {
                                            final int[] inlineResultWidthAndHeight = MessageObject.getInlineResultWidthAndHeight(botInlineResult);
                                            final Activity parentActivity = ChatActivity.this.getParentActivity();
                                            String title = botInlineResult.title;
                                            if (title == null) {
                                                title = "";
                                            }
                                            final String description = botInlineResult.description;
                                            final String url = botInlineResult.content.url;
                                            EmbedBottomSheet.show((Context)parentActivity, title, description, url, url, inlineResultWidthAndHeight[0], inlineResultWidthAndHeight[1]);
                                        }
                                    }
                                }
                            }
                            
                            @Override
                            public void onContextSearch(final boolean b) {
                                final ChatActivity this$0 = ChatActivity.this;
                                final ChatActivityEnterView chatActivityEnterView = this$0.chatActivityEnterView;
                                if (chatActivityEnterView != null) {
                                    chatActivityEnterView.setCaption(this$0.mentionsAdapter.getBotCaption());
                                    ChatActivity.this.chatActivityEnterView.showContextProgress(b);
                                }
                            }
                        }));
                        Label_4847: {
                            if (ChatObject.isChannel(this.currentChat)) {
                                final TLRPC.Chat currentChat7 = this.currentChat;
                                if (currentChat7 == null || !currentChat7.megagroup) {
                                    break Label_4847;
                                }
                            }
                            this.mentionsAdapter.setBotInfo(this.botInfo);
                        }
                        this.mentionsAdapter.setParentFragment(this);
                        this.mentionsAdapter.setChatInfo(this.chatInfo);
                        this.mentionsAdapter.setNeedUsernames(this.currentChat != null);
                        final MentionsAdapter mentionsAdapter2 = this.mentionsAdapter;
                        final TLRPC.EncryptedChat currentEncryptedChat = this.currentEncryptedChat;
                        mentionsAdapter2.setNeedBotContext(currentEncryptedChat == null || AndroidUtilities.getPeerLayerVersion(currentEncryptedChat.layer) >= 46);
                        final MentionsAdapter mentionsAdapter3 = this.mentionsAdapter;
                        int botsCount;
                        if (this.currentChat != null) {
                            botsCount = this.botsCount;
                        }
                        else {
                            botsCount = 1;
                        }
                        mentionsAdapter3.setBotsCount(botsCount);
                        this.mentionListView.setOnItemClickListener(this.mentionsOnItemClickListener = new _$$Lambda$ChatActivity$3T4cmfYIkHu65uxGq3sGjGr7WuI(this));
                        this.mentionListView.setOnItemLongClickListener((RecyclerListView.OnItemLongClickListener)new _$$Lambda$ChatActivity$59jI_z9Qk5v3zW1I6TNTF1hJXy4(this));
                        this.mentionListView.setOnScrollListener(new RecyclerView.OnScrollListener() {
                            @Override
                            public void onScrollStateChanged(final RecyclerView recyclerView, final int n) {
                                final ChatActivity this$0 = ChatActivity.this;
                                boolean b = true;
                                if (n != 1) {
                                    b = false;
                                }
                                this$0.mentionListViewIsScrolling = b;
                            }
                            
                            @Override
                            public void onScrolled(final RecyclerView recyclerView, int n, int n2) {
                                if (ChatActivity.this.mentionsAdapter.isBotContext() && ChatActivity.this.mentionsAdapter.isMediaLayout()) {
                                    n = ChatActivity.this.mentionGridLayoutManager.findLastVisibleItemPosition();
                                }
                                else {
                                    n = ChatActivity.this.mentionLayoutManager.findLastVisibleItemPosition();
                                }
                                if (n == -1) {
                                    n2 = 0;
                                }
                                else {
                                    n2 = n;
                                }
                                if (n2 > 0 && n > ChatActivity.this.mentionsAdapter.getItemCount() - 5) {
                                    ChatActivity.this.mentionsAdapter.searchForContextBotForNextOffset();
                                }
                                ChatActivity.this.mentionListViewUpdateLayout();
                            }
                        });
                    }
                    (this.pagedownButtonImage = new ImageView((Context)progressView)).setImageResource(2131165725);
                    this.pagedownButtonImage.setScaleType(ImageView$ScaleType.CENTER);
                    this.pagedownButtonImage.setColorFilter((ColorFilter)new PorterDuffColorFilter(Theme.getColor("chat_goDownButtonIcon"), PorterDuff$Mode.MULTIPLY));
                    this.pagedownButtonImage.setPadding(0, AndroidUtilities.dp(2.0f), 0, 0);
                    final Drawable circleDrawable = Theme.createCircleDrawable(AndroidUtilities.dp(42.0f), Theme.getColor("chat_goDownButton"));
                    final Drawable mutate = ((Context)progressView).getResources().getDrawable(2131165726).mutate();
                    mutate.setColorFilter((ColorFilter)new PorterDuffColorFilter(Theme.getColor("chat_goDownButtonShadow"), PorterDuff$Mode.MULTIPLY));
                    final CombinedDrawable backgroundDrawable = new CombinedDrawable(mutate, circleDrawable, 0, 0);
                    backgroundDrawable.setIconSize(AndroidUtilities.dp(42.0f), AndroidUtilities.dp(42.0f));
                    this.pagedownButtonImage.setBackgroundDrawable((Drawable)backgroundDrawable);
                    this.pagedownButton.addView((View)this.pagedownButtonImage, (ViewGroup$LayoutParams)LayoutHelper.createFrame(46, 46, 81));
                    this.pagedownButton.setContentDescription((CharSequence)LocaleController.getString("AccDescrPageDown", 2131558452));
                    (this.pagedownButtonCounter = new TextView((Context)progressView)).setVisibility(4);
                    this.pagedownButtonCounter.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                    this.pagedownButtonCounter.setTextSize(1, 13.0f);
                    this.pagedownButtonCounter.setTextColor(Theme.getColor("chat_goDownButtonCounter"));
                    this.pagedownButtonCounter.setGravity(17);
                    this.pagedownButtonCounter.setBackgroundDrawable(Theme.createRoundRectDrawable(AndroidUtilities.dp(11.5f), Theme.getColor("chat_goDownButtonCounterBackground")));
                    this.pagedownButtonCounter.setMinWidth(AndroidUtilities.dp(23.0f));
                    this.pagedownButtonCounter.setPadding(AndroidUtilities.dp(8.0f), 0, AndroidUtilities.dp(8.0f), AndroidUtilities.dp(1.0f));
                    this.pagedownButton.addView((View)this.pagedownButtonCounter, (ViewGroup$LayoutParams)LayoutHelper.createFrame(-2, 23, 49));
                    (this.mentiondownButtonImage = new ImageView((Context)progressView)).setImageResource(2131165564);
                    this.mentiondownButtonImage.setScaleType(ImageView$ScaleType.CENTER);
                    this.mentiondownButtonImage.setColorFilter((ColorFilter)new PorterDuffColorFilter(Theme.getColor("chat_goDownButtonIcon"), PorterDuff$Mode.MULTIPLY));
                    this.mentiondownButtonImage.setPadding(0, AndroidUtilities.dp(2.0f), 0, 0);
                    final Drawable circleDrawable2 = Theme.createCircleDrawable(AndroidUtilities.dp(42.0f), Theme.getColor("chat_goDownButton"));
                    final Drawable mutate2 = ((Context)progressView).getResources().getDrawable(2131165726).mutate();
                    mutate2.setColorFilter((ColorFilter)new PorterDuffColorFilter(Theme.getColor("chat_goDownButtonShadow"), PorterDuff$Mode.MULTIPLY));
                    final CombinedDrawable backgroundDrawable2 = new CombinedDrawable(mutate2, circleDrawable2, 0, 0);
                    backgroundDrawable2.setIconSize(AndroidUtilities.dp(42.0f), AndroidUtilities.dp(42.0f));
                    this.mentiondownButtonImage.setBackgroundDrawable((Drawable)backgroundDrawable2);
                    this.mentiondownButton.addView((View)this.mentiondownButtonImage, (ViewGroup$LayoutParams)LayoutHelper.createFrame(46, 46, 83));
                    (this.mentiondownButtonCounter = new TextView((Context)progressView)).setVisibility(4);
                    this.mentiondownButtonCounter.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                    this.mentiondownButtonCounter.setTextSize(1, 13.0f);
                    this.mentiondownButtonCounter.setTextColor(Theme.getColor("chat_goDownButtonCounter"));
                    this.mentiondownButtonCounter.setGravity(17);
                    this.mentiondownButtonCounter.setBackgroundDrawable(Theme.createRoundRectDrawable(AndroidUtilities.dp(11.5f), Theme.getColor("chat_goDownButtonCounterBackground")));
                    this.mentiondownButtonCounter.setMinWidth(AndroidUtilities.dp(23.0f));
                    this.mentiondownButtonCounter.setPadding(AndroidUtilities.dp(8.0f), 0, AndroidUtilities.dp(8.0f), AndroidUtilities.dp(1.0f));
                    this.mentiondownButton.addView((View)this.mentiondownButtonCounter, (ViewGroup$LayoutParams)LayoutHelper.createFrame(-2, 23, 49));
                    this.mentiondownButton.setContentDescription((CharSequence)LocaleController.getString("AccDescrMentionDown", 2131558442));
                    if (!AndroidUtilities.isTablet() || AndroidUtilities.isSmallTablet()) {
                        final FragmentContextView additionalContextView = new FragmentContextView((Context)progressView, this, true);
                        this.contentView.addView((View)additionalContextView, (ViewGroup$LayoutParams)LayoutHelper.createFrame(-1, 39.0f, 51, 0.0f, -36.0f, 0.0f, 0.0f));
                        this.contentView.addView((View)(this.fragmentContextView = new FragmentContextView((Context)progressView, this, false)), (ViewGroup$LayoutParams)LayoutHelper.createFrame(-1, 39.0f, 51, 0.0f, -36.0f, 0.0f, 0.0f));
                        this.fragmentContextView.setAdditionalContextView(additionalContextView);
                        additionalContextView.setAdditionalContextView(this.fragmentContextView);
                    }
                    this.contentView.addView((View)super.actionBar);
                    (this.overlayView = new View((Context)progressView)).setOnTouchListener((View$OnTouchListener)new _$$Lambda$ChatActivity$1a9ijLxqzo_X_eqGs1fRijFldGM(this));
                    this.contentView.addView(this.overlayView, (ViewGroup$LayoutParams)LayoutHelper.createFrame(-1, -1, 51));
                    this.overlayView.setVisibility(8);
                    this.instantCameraView = new InstantCameraView((Context)progressView, this);
                    this.contentView.addView((View)this.instantCameraView, (ViewGroup$LayoutParams)LayoutHelper.createFrame(-1, -1, 51));
                    (this.bottomMessagesActionContainer = new FrameLayout(progressView) {
                        public void onDraw(final Canvas canvas) {
                            final int intrinsicHeight = Theme.chat_composeShadowDrawable.getIntrinsicHeight();
                            Theme.chat_composeShadowDrawable.setBounds(0, 0, this.getMeasuredWidth(), intrinsicHeight);
                            Theme.chat_composeShadowDrawable.draw(canvas);
                            canvas.drawRect(0.0f, (float)intrinsicHeight, (float)this.getMeasuredWidth(), (float)this.getMeasuredHeight(), Theme.chat_composeBackgroundPaint);
                        }
                    }).setVisibility(4);
                    this.bottomMessagesActionContainer.setWillNotDraw(false);
                    this.bottomMessagesActionContainer.setPadding(0, AndroidUtilities.dp(2.0f), 0, 0);
                    this.contentView.addView((View)this.bottomMessagesActionContainer, (ViewGroup$LayoutParams)LayoutHelper.createFrame(-1, 51, 80));
                    this.bottomMessagesActionContainer.setOnTouchListener((View$OnTouchListener)_$$Lambda$ChatActivity$z1jahyjaaFP53MoZguLvaL665PA.INSTANCE);
                    (this.chatActivityEnterView = new ChatActivityEnterView(this.getParentActivity(), this.contentView, this, true) {
                        public boolean dispatchTouchEvent(final MotionEvent motionEvent) {
                            return this.getAlpha() == 1.0f && super.dispatchTouchEvent(motionEvent);
                        }
                        
                        @Override
                        public boolean onInterceptTouchEvent(final MotionEvent motionEvent) {
                            return this.getAlpha() == 1.0f && super.onInterceptTouchEvent(motionEvent);
                        }
                        
                        public boolean onTouchEvent(final MotionEvent motionEvent) {
                            return this.getAlpha() == 1.0f && super.onTouchEvent(motionEvent);
                        }
                    }).setDialogId(this.dialog_id, super.currentAccount);
                    this.chatActivityEnterView.setId(1000);
                    this.chatActivityEnterView.setBotsCount(this.botsCount, this.hasBotsCommands);
                    this.chatActivityEnterView.setMinimumHeight(AndroidUtilities.dp(51.0f));
                    final ChatActivityEnterView chatActivityEnterView2 = this.chatActivityEnterView;
                    final TLRPC.EncryptedChat currentEncryptedChat2 = this.currentEncryptedChat;
                    final boolean b = currentEncryptedChat2 == null || AndroidUtilities.getPeerLayerVersion(currentEncryptedChat2.layer) >= 23;
                    final TLRPC.EncryptedChat currentEncryptedChat3 = this.currentEncryptedChat;
                    chatActivityEnterView2.setAllowStickersAndGifs(b, currentEncryptedChat3 == null || AndroidUtilities.getPeerLayerVersion(currentEncryptedChat3.layer) >= 46);
                    if (super.inPreviewMode) {
                        this.chatActivityEnterView.setVisibility(4);
                    }
                    final SizeNotifierFrameLayout contentView = this.contentView;
                    contentView.addView((View)this.chatActivityEnterView, contentView.getChildCount() - 1, (ViewGroup$LayoutParams)LayoutHelper.createFrame(-1, -2, 83));
                    this.chatActivityEnterView.setDelegate((ChatActivityEnterView.ChatActivityEnterViewDelegate)new ChatActivityEnterView.ChatActivityEnterViewDelegate() {
                        @Override
                        public void didPressedAttachButton() {
                            if (ChatActivity.this.chatAttachAlert != null) {
                                ChatActivity.this.chatAttachAlert.setEditingMessageObject(null);
                            }
                            ChatActivity.this.openAttachMenu();
                        }
                        
                        @Override
                        public void needChangeVideoPreviewState(final int n, final float n2) {
                            if (ChatActivity.this.instantCameraView != null) {
                                ChatActivity.this.instantCameraView.changeVideoPreviewState(n, n2);
                            }
                        }
                        
                        @Override
                        public void needSendTyping() {
                            MessagesController.getInstance(ChatActivity.this.currentAccount).sendTyping(ChatActivity.this.dialog_id, 0, ChatActivity.this.classGuid);
                        }
                        
                        @Override
                        public void needShowMediaBanHint() {
                            ChatActivity.this.showMediaBannedHint();
                        }
                        
                        @Override
                        public void needStartRecordAudio(int visibility) {
                            if (visibility == 0) {
                                visibility = 8;
                            }
                            else {
                                visibility = 0;
                            }
                            if (ChatActivity.this.overlayView.getVisibility() != visibility) {
                                ChatActivity.this.overlayView.setVisibility(visibility);
                            }
                        }
                        
                        @Override
                        public void needStartRecordVideo(final int n) {
                            if (ChatActivity.this.instantCameraView != null) {
                                if (n == 0) {
                                    ChatActivity.this.instantCameraView.showCamera();
                                }
                                else if (n != 1 && n != 3 && n != 4) {
                                    if (n == 2) {
                                        ChatActivity.this.instantCameraView.cancel();
                                    }
                                }
                                else {
                                    ChatActivity.this.instantCameraView.send(n);
                                }
                            }
                        }
                        
                        @Override
                        public void onAttachButtonHidden() {
                            if (ChatActivity.this.actionBar.isSearchFieldVisible()) {
                                return;
                            }
                            if (ChatActivity.this.headerItem != null) {
                                ChatActivity.this.headerItem.setVisibility(8);
                                ChatActivity.this.editTextItem.setVisibility(8);
                                ChatActivity.this.attachItem.setVisibility(0);
                            }
                        }
                        
                        @Override
                        public void onAttachButtonShow() {
                            if (ChatActivity.this.actionBar.isSearchFieldVisible()) {
                                return;
                            }
                            if (ChatActivity.this.headerItem != null) {
                                ChatActivity.this.headerItem.setVisibility(0);
                                ChatActivity.this.editTextItem.setVisibility(8);
                                ChatActivity.this.attachItem.setVisibility(8);
                            }
                        }
                        
                        @Override
                        public void onMessageEditEnd(final boolean b) {
                            if (!b) {
                                final MentionsAdapter access$5800 = ChatActivity.this.mentionsAdapter;
                                final TLRPC.EncryptedChat currentEncryptedChat = ChatActivity.this.currentEncryptedChat;
                                access$5800.setNeedBotContext(currentEncryptedChat == null || AndroidUtilities.getPeerLayerVersion(currentEncryptedChat.layer) >= 46);
                                if (ChatActivity.this.editingMessageObject != null) {
                                    ChatActivity.this.hideFieldPanel(false);
                                }
                                final ChatActivity this$0 = ChatActivity.this;
                                final ChatActivityEnterView chatActivityEnterView = this$0.chatActivityEnterView;
                                final TLRPC.EncryptedChat currentEncryptedChat2 = this$0.currentEncryptedChat;
                                final boolean b2 = currentEncryptedChat2 == null || AndroidUtilities.getPeerLayerVersion(currentEncryptedChat2.layer) >= 23;
                                final TLRPC.EncryptedChat currentEncryptedChat3 = ChatActivity.this.currentEncryptedChat;
                                chatActivityEnterView.setAllowStickersAndGifs(b2, currentEncryptedChat3 == null || AndroidUtilities.getPeerLayerVersion(currentEncryptedChat3.layer) >= 46);
                                if (ChatActivity.this.editingMessageObjectReqId != 0) {
                                    ConnectionsManager.getInstance(ChatActivity.this.currentAccount).cancelRequest(ChatActivity.this.editingMessageObjectReqId, true);
                                    ChatActivity.this.editingMessageObjectReqId = 0;
                                }
                                ChatActivity.this.updatePinnedMessageView(true);
                                ChatActivity.this.updateBottomOverlay();
                                ChatActivity.this.updateVisibleRows();
                            }
                        }
                        
                        @Override
                        public void onMessageSend(final CharSequence charSequence) {
                            ChatActivity.this.moveScrollToLastMessage();
                            ChatActivity.this.hideFieldPanel(false);
                            if (ChatActivity.this.mentionsAdapter != null) {
                                ChatActivity.this.mentionsAdapter.addHashtagsFromMessage(charSequence);
                            }
                        }
                        
                        @Override
                        public void onPreAudioVideoRecord() {
                            ChatActivity.this.showVoiceHint(true, false);
                        }
                        
                        @Override
                        public void onStickersExpandedChange() {
                            ChatActivity.this.checkRaiseSensors();
                        }
                        
                        @Override
                        public void onStickersTab(final boolean b) {
                            if (ChatActivity.this.emojiButtonRed != null) {
                                ChatActivity.this.emojiButtonRed.setVisibility(8);
                            }
                            ChatActivity.this.allowContextBotPanelSecond = (b ^ true);
                            ChatActivity.this.checkContextBotPanel();
                        }
                        
                        @Override
                        public void onSwitchRecordMode(final boolean b) {
                            ChatActivity.this.showVoiceHint(false, b);
                        }
                        
                        @Override
                        public void onTextChanged(final CharSequence charSequence, final boolean b) {
                            MediaController.getInstance().setInputFieldHasText(!TextUtils.isEmpty(charSequence) || ChatActivity.this.chatActivityEnterView.isEditingMessage());
                            if (ChatActivity.this.stickersAdapter != null) {
                                final ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                                if (chatActivityEnterView != null && chatActivityEnterView.getVisibility() == 0 && (ChatActivity.this.bottomOverlay == null || ChatActivity.this.bottomOverlay.getVisibility() != 0)) {
                                    final StickersAdapter access$17900 = ChatActivity.this.stickersAdapter;
                                    final TLRPC.Chat currentChat = ChatActivity.this.currentChat;
                                    access$17900.loadStikersForEmoji(charSequence, (currentChat != null && !ChatObject.canSendStickers(currentChat)) || ChatActivity.this.chatActivityEnterView.isEditingMessage());
                                }
                            }
                            if (ChatActivity.this.mentionsAdapter != null) {
                                ChatActivity.this.mentionsAdapter.searchUsernameOrHashtag(charSequence.toString(), ChatActivity.this.chatActivityEnterView.getCursorPosition(), ChatActivity.this.messages, false);
                            }
                            if (ChatActivity.this.waitingForCharaterEnterRunnable != null) {
                                AndroidUtilities.cancelRunOnUIThread(ChatActivity.this.waitingForCharaterEnterRunnable);
                                ChatActivity.this.waitingForCharaterEnterRunnable = null;
                            }
                            final TLRPC.Chat currentChat2 = ChatActivity.this.currentChat;
                            if ((currentChat2 == null || ChatObject.canSendEmbed(currentChat2)) && ChatActivity.this.chatActivityEnterView.isMessageWebPageSearchEnabled() && (!ChatActivity.this.chatActivityEnterView.isEditingMessage() || !ChatActivity.this.chatActivityEnterView.isEditingCaption())) {
                                if (b) {
                                    ChatActivity.this.searchLinks(charSequence, true);
                                }
                                else {
                                    ChatActivity.this.waitingForCharaterEnterRunnable = new Runnable() {
                                        @Override
                                        public void run() {
                                            if (this == ChatActivity.this.waitingForCharaterEnterRunnable) {
                                                ChatActivity.this.searchLinks(charSequence, false);
                                                ChatActivity.this.waitingForCharaterEnterRunnable = null;
                                            }
                                        }
                                    };
                                    final Runnable access$17901 = ChatActivity.this.waitingForCharaterEnterRunnable;
                                    long n;
                                    if (AndroidUtilities.WEB_URL == null) {
                                        n = 3000L;
                                    }
                                    else {
                                        n = 1000L;
                                    }
                                    AndroidUtilities.runOnUIThread(access$17901, n);
                                }
                            }
                        }
                        
                        @Override
                        public void onTextSelectionChanged(final int n, final int n2) {
                            if (ChatActivity.this.editTextItem == null) {
                                return;
                            }
                            if (n2 - n > 0) {
                                if (ChatActivity.this.editTextItem.getTag() == null) {
                                    ChatActivity.this.editTextItem.setTag((Object)1);
                                    ChatActivity.this.editTextItem.setVisibility(0);
                                    ChatActivity.this.headerItem.setVisibility(8);
                                    ChatActivity.this.attachItem.setVisibility(8);
                                }
                                ChatActivity.this.editTextStart = n;
                                ChatActivity.this.editTextEnd = n2;
                            }
                            else if (ChatActivity.this.editTextItem.getTag() != null) {
                                ChatActivity.this.editTextItem.setTag((Object)null);
                                ChatActivity.this.editTextItem.setVisibility(8);
                                if (ChatActivity.this.chatActivityEnterView.hasText()) {
                                    ChatActivity.this.headerItem.setVisibility(8);
                                    ChatActivity.this.attachItem.setVisibility(0);
                                }
                                else {
                                    ChatActivity.this.headerItem.setVisibility(0);
                                    ChatActivity.this.attachItem.setVisibility(8);
                                }
                            }
                        }
                        
                        @Override
                        public void onTextSpansChanged(final CharSequence charSequence) {
                            ChatActivity.this.searchLinks(charSequence, true);
                        }
                        
                        @Override
                        public void onWindowSizeChanged(final int n) {
                            if (n < AndroidUtilities.dp(72.0f) + ActionBar.getCurrentActionBarHeight()) {
                                ChatActivity.this.allowStickersPanel = false;
                                if (ChatActivity.this.stickersPanel.getVisibility() == 0) {
                                    ChatActivity.this.stickersPanel.setVisibility(4);
                                }
                                if (ChatActivity.this.mentionContainer != null && ChatActivity.this.mentionContainer.getVisibility() == 0) {
                                    ChatActivity.this.mentionContainer.setVisibility(4);
                                    ChatActivity.this.updateMessageListAccessibilityVisibility();
                                }
                            }
                            else {
                                ChatActivity.this.allowStickersPanel = true;
                                if (ChatActivity.this.stickersPanel.getVisibility() == 4) {
                                    ChatActivity.this.stickersPanel.setVisibility(0);
                                }
                                if (ChatActivity.this.mentionContainer != null && ChatActivity.this.mentionContainer.getVisibility() == 4 && (!ChatActivity.this.mentionsAdapter.isBotContext() || ChatActivity.this.allowContextBotPanel || ChatActivity.this.allowContextBotPanelSecond)) {
                                    ChatActivity.this.mentionContainer.setVisibility(0);
                                    ChatActivity.this.mentionContainer.setTag((Object)null);
                                    ChatActivity.this.updateMessageListAccessibilityVisibility();
                                }
                            }
                            final ChatActivity this$0 = ChatActivity.this;
                            this$0.allowContextBotPanel = (this$0.chatActivityEnterView.isPopupShowing() ^ true);
                            ChatActivity.this.checkContextBotPanel();
                        }
                    });
                    final FrameLayout frameLayout = new FrameLayout(progressView) {
                        public boolean hasOverlappingRendering() {
                            return false;
                        }
                        
                        public void setTranslationY(float n) {
                            super.setTranslationY(n);
                            final ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                            if (chatActivityEnterView != null) {
                                chatActivityEnterView.invalidate();
                            }
                            if (this.getVisibility() != 8) {
                                if (ChatActivity.this.chatListView != null) {
                                    ChatActivity.this.chatListView.setTranslationY(n);
                                }
                                if (ChatActivity.this.progressView != null) {
                                    ChatActivity.this.progressView.setTranslationY(n);
                                }
                                if (ChatActivity.this.mentionContainer != null) {
                                    ChatActivity.this.mentionContainer.setTranslationY(n);
                                }
                                if (ChatActivity.this.pagedownButton != null) {
                                    ChatActivity.this.pagedownButton.setTranslationY(n);
                                }
                                if (ChatActivity.this.mentiondownButton != null) {
                                    final FrameLayout access$8000 = ChatActivity.this.mentiondownButton;
                                    if (ChatActivity.this.pagedownButton.getVisibility() == 0) {
                                        n -= AndroidUtilities.dp(72.0f);
                                    }
                                    access$8000.setTranslationY(n);
                                }
                                ChatActivity.this.updateMessagesVisiblePart(false);
                                if (ChatActivity.this.fragmentView != null) {
                                    ChatActivity.this.fragmentView.invalidate();
                                }
                            }
                        }
                        
                        public void setVisibility(int dp) {
                            super.setVisibility(dp);
                            if (dp == 8) {
                                final RecyclerListView access$100 = ChatActivity.this.chatListView;
                                float translationY = 0.0f;
                                if (access$100 != null) {
                                    ChatActivity.this.chatListView.setTranslationY(0.0f);
                                }
                                if (ChatActivity.this.progressView != null) {
                                    ChatActivity.this.progressView.setTranslationY(0.0f);
                                }
                                if (ChatActivity.this.mentionContainer != null) {
                                    ChatActivity.this.mentionContainer.setTranslationY(0.0f);
                                }
                                if (ChatActivity.this.pagedownButton != null) {
                                    final FrameLayout access$101 = ChatActivity.this.pagedownButton;
                                    if (ChatActivity.this.pagedownButton.getTag() == null) {
                                        translationY = (float)AndroidUtilities.dp(100.0f);
                                    }
                                    access$101.setTranslationY(translationY);
                                }
                                if (ChatActivity.this.mentiondownButton != null) {
                                    final FrameLayout access$102 = ChatActivity.this.mentiondownButton;
                                    if (ChatActivity.this.mentiondownButton.getTag() == null) {
                                        dp = AndroidUtilities.dp(100.0f);
                                    }
                                    else if (ChatActivity.this.pagedownButton.getVisibility() == 0) {
                                        dp = -AndroidUtilities.dp(72.0f);
                                    }
                                    else {
                                        dp = 0;
                                    }
                                    access$102.setTranslationY((float)dp);
                                }
                            }
                        }
                    };
                    (this.replyLineView = new View((Context)progressView)).setBackgroundColor(Theme.getColor("chat_replyPanelLine"));
                    this.chatActivityEnterView.addTopView((View)frameLayout, this.replyLineView, 48);
                    frameLayout.setOnClickListener((View$OnClickListener)new _$$Lambda$ChatActivity$vOTVCsVfGrCvW6Ia7FqWB9zg2fc(this));
                    (this.replyIconImageView = new ImageView((Context)progressView)).setColorFilter((ColorFilter)new PorterDuffColorFilter(Theme.getColor("chat_replyPanelIcons"), PorterDuff$Mode.MULTIPLY));
                    this.replyIconImageView.setScaleType(ImageView$ScaleType.CENTER);
                    frameLayout.addView((View)this.replyIconImageView, (ViewGroup$LayoutParams)LayoutHelper.createFrame(52, 46, 51));
                    (this.replyCloseImageView = new ImageView((Context)progressView)).setColorFilter((ColorFilter)new PorterDuffColorFilter(Theme.getColor("chat_replyPanelClose"), PorterDuff$Mode.MULTIPLY));
                    this.replyCloseImageView.setImageResource(2131165483);
                    this.replyCloseImageView.setScaleType(ImageView$ScaleType.CENTER);
                    frameLayout.addView((View)this.replyCloseImageView, (ViewGroup$LayoutParams)LayoutHelper.createFrame(52, 46.0f, 53, 0.0f, 0.5f, 0.0f, 0.0f));
                    this.replyCloseImageView.setOnClickListener((View$OnClickListener)new _$$Lambda$ChatActivity$S608bx2oIMaZW_qZppW8aaTId_g(this));
                    (this.replyNameTextView = new SimpleTextView((Context)progressView)).setTextSize(14);
                    this.replyNameTextView.setTextColor(Theme.getColor("chat_replyPanelName"));
                    this.replyNameTextView.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                    frameLayout.addView((View)this.replyNameTextView, (ViewGroup$LayoutParams)LayoutHelper.createFrame(-1, 18.0f, 51, 52.0f, 6.0f, 52.0f, 0.0f));
                    (this.replyObjectTextView = new SimpleTextView((Context)progressView)).setTextSize(14);
                    this.replyObjectTextView.setTextColor(Theme.getColor("chat_replyPanelMessage"));
                    frameLayout.addView((View)this.replyObjectTextView, (ViewGroup$LayoutParams)LayoutHelper.createFrame(-1, 18.0f, 51, 52.0f, 24.0f, 52.0f, 0.0f));
                    frameLayout.addView((View)(this.replyImageView = new BackupImageView((Context)progressView)), (ViewGroup$LayoutParams)LayoutHelper.createFrame(34, 34.0f, 51, 52.0f, 6.0f, 0.0f, 0.0f));
                    (this.stickersPanel = new FrameLayout((Context)progressView)).setVisibility(8);
                    this.contentView.addView((View)this.stickersPanel, (ViewGroup$LayoutParams)LayoutHelper.createFrame(-2, 81.5f, 83, 0.0f, 0.0f, 0.0f, 38.0f));
                    final ContentPreviewViewer.ContentPreviewViewerDelegate contentPreviewViewerDelegate = new ContentPreviewViewer.ContentPreviewViewerDelegate() {
                        @Override
                        public boolean needSend() {
                            return false;
                        }
                        
                        @Override
                        public void openSet(final TLRPC.InputStickerSet set, final boolean clearsInputField) {
                            if (set != null) {
                                if (ChatActivity.this.getParentActivity() != null) {
                                    final TLRPC.TL_inputStickerSetID tl_inputStickerSetID = new TLRPC.TL_inputStickerSetID();
                                    tl_inputStickerSetID.access_hash = set.access_hash;
                                    tl_inputStickerSetID.id = set.id;
                                    final Activity parentActivity = ChatActivity.this.getParentActivity();
                                    final ChatActivity this$0 = ChatActivity.this;
                                    final StickersAlert stickersAlert = new StickersAlert((Context)parentActivity, this$0, tl_inputStickerSetID, null, (StickersAlert.StickersAlertDelegate)this$0.chatActivityEnterView);
                                    stickersAlert.setClearsInputField(clearsInputField);
                                    ChatActivity.this.showDialog(stickersAlert);
                                }
                            }
                        }
                        
                        @Override
                        public void sendSticker(final TLRPC.Document document, final Object o) {
                        }
                    };
                    (this.stickersListView = new RecyclerListView(progressView) {
                        @Override
                        public boolean onInterceptTouchEvent(final MotionEvent motionEvent) {
                            final ContentPreviewViewer instance = ContentPreviewViewer.getInstance();
                            final RecyclerListView access$19600 = ChatActivity.this.stickersListView;
                            final ContentPreviewViewer.ContentPreviewViewerDelegate val$contentPreviewViewerDelegate = contentPreviewViewerDelegate;
                            boolean b = false;
                            final boolean onInterceptTouchEvent = instance.onInterceptTouchEvent(motionEvent, access$19600, 0, val$contentPreviewViewerDelegate);
                            if (super.onInterceptTouchEvent(motionEvent) || onInterceptTouchEvent) {
                                b = true;
                            }
                            return b;
                        }
                    }).setTag((Object)3);
                    this.stickersListView.setOnTouchListener((View$OnTouchListener)new _$$Lambda$ChatActivity$ihsVyPyraLc397NrumrLt_QVanE(this, contentPreviewViewerDelegate));
                    this.stickersListView.setDisallowInterceptTouchEvents(true);
                    final LinearLayoutManager layoutManager = new LinearLayoutManager((Context)progressView);
                    layoutManager.setOrientation(0);
                    this.stickersListView.setLayoutManager((RecyclerView.LayoutManager)layoutManager);
                    this.stickersListView.setClipToPadding(false);
                    this.stickersListView.setOverScrollMode(2);
                    this.stickersPanel.addView((View)this.stickersListView, (ViewGroup$LayoutParams)LayoutHelper.createFrame(-1, 78.0f));
                    this.initStickers();
                    (this.stickersPanelArrow = new ImageView((Context)progressView)).setImageResource(2131165860);
                    this.stickersPanelArrow.setColorFilter((ColorFilter)new PorterDuffColorFilter(Theme.getColor("chat_stickersHintPanel"), PorterDuff$Mode.MULTIPLY));
                    this.stickersPanel.addView((View)this.stickersPanelArrow, (ViewGroup$LayoutParams)LayoutHelper.createFrame(-2, -2.0f, 83, 53.0f, 0.0f, 53.0f, 0.0f));
                    (this.searchContainer = new FrameLayout(progressView) {
                        public void onDraw(final Canvas canvas) {
                            final int intrinsicHeight = Theme.chat_composeShadowDrawable.getIntrinsicHeight();
                            Theme.chat_composeShadowDrawable.setBounds(0, 0, this.getMeasuredWidth(), intrinsicHeight);
                            Theme.chat_composeShadowDrawable.draw(canvas);
                            canvas.drawRect(0.0f, (float)intrinsicHeight, (float)this.getMeasuredWidth(), (float)this.getMeasuredHeight(), Theme.chat_composeBackgroundPaint);
                        }
                    }).setOnTouchListener((View$OnTouchListener)_$$Lambda$ChatActivity$4HeR0jneWrxEOpNOz9G_tJXVOis.INSTANCE);
                    this.searchContainer.setWillNotDraw(false);
                    this.searchContainer.setVisibility(4);
                    this.searchContainer.setFocusable(true);
                    this.searchContainer.setFocusableInTouchMode(true);
                    this.searchContainer.setClickable(true);
                    this.searchContainer.setPadding(0, AndroidUtilities.dp(3.0f), 0, 0);
                    (this.searchUpButton = new ImageView((Context)progressView)).setScaleType(ImageView$ScaleType.CENTER);
                    this.searchUpButton.setImageResource(2131165631);
                    this.searchUpButton.setColorFilter((ColorFilter)new PorterDuffColorFilter(Theme.getColor("chat_searchPanelIcons"), PorterDuff$Mode.MULTIPLY));
                    this.searchUpButton.setBackgroundDrawable(Theme.createSelectorDrawable(Theme.getColor("actionBarActionModeDefaultSelector"), 1));
                    this.searchContainer.addView((View)this.searchUpButton, (ViewGroup$LayoutParams)LayoutHelper.createFrame(48, 48.0f, 53, 0.0f, 0.0f, 48.0f, 0.0f));
                    this.searchUpButton.setOnClickListener((View$OnClickListener)new _$$Lambda$ChatActivity$i__pe90wAGWXAlcLG1K1KxSjwJM(this));
                    this.searchUpButton.setContentDescription((CharSequence)LocaleController.getString("AccDescrSearchNext", 2131558468));
                    (this.searchDownButton = new ImageView((Context)progressView)).setScaleType(ImageView$ScaleType.CENTER);
                    this.searchDownButton.setImageResource(2131165630);
                    this.searchDownButton.setColorFilter((ColorFilter)new PorterDuffColorFilter(Theme.getColor("chat_searchPanelIcons"), PorterDuff$Mode.MULTIPLY));
                    this.searchDownButton.setBackgroundDrawable(Theme.createSelectorDrawable(Theme.getColor("actionBarActionModeDefaultSelector"), 1));
                    this.searchContainer.addView((View)this.searchDownButton, (ViewGroup$LayoutParams)LayoutHelper.createFrame(48, 48.0f, 53, 0.0f, 0.0f, 0.0f, 0.0f));
                    this.searchDownButton.setOnClickListener((View$OnClickListener)new _$$Lambda$ChatActivity$zuLfb_3UyBmXz28_TR_XfUeBQL0(this));
                    this.searchDownButton.setContentDescription((CharSequence)LocaleController.getString("AccDescrSearchPrev", 2131558469));
                    final TLRPC.Chat currentChat8 = this.currentChat;
                    if (currentChat8 != null && (!ChatObject.isChannel(currentChat8) || this.currentChat.megagroup)) {
                        (this.searchUserButton = new ImageView((Context)progressView)).setScaleType(ImageView$ScaleType.CENTER);
                        this.searchUserButton.setImageResource(2131165681);
                        this.searchUserButton.setColorFilter((ColorFilter)new PorterDuffColorFilter(Theme.getColor("chat_searchPanelIcons"), PorterDuff$Mode.MULTIPLY));
                        this.searchUserButton.setBackgroundDrawable(Theme.createSelectorDrawable(Theme.getColor("actionBarActionModeDefaultSelector"), 1));
                        this.searchContainer.addView((View)this.searchUserButton, (ViewGroup$LayoutParams)LayoutHelper.createFrame(48, 48.0f, 51, 48.0f, 0.0f, 0.0f, 0.0f));
                        this.searchUserButton.setOnClickListener((View$OnClickListener)new _$$Lambda$ChatActivity$CRYdccYggXGAOLHbGZiTyObk6GM(this));
                        this.searchUserButton.setContentDescription((CharSequence)LocaleController.getString("AccDescrSearchByUser", 2131558467));
                    }
                    (this.searchCalendarButton = new ImageView((Context)progressView)).setScaleType(ImageView$ScaleType.CENTER);
                    this.searchCalendarButton.setImageResource(2131165615);
                    this.searchCalendarButton.setColorFilter((ColorFilter)new PorterDuffColorFilter(Theme.getColor("chat_searchPanelIcons"), PorterDuff$Mode.MULTIPLY));
                    this.searchCalendarButton.setBackgroundDrawable(Theme.createSelectorDrawable(Theme.getColor("actionBarActionModeDefaultSelector"), 1));
                    this.searchContainer.addView((View)this.searchCalendarButton, (ViewGroup$LayoutParams)LayoutHelper.createFrame(48, 48, 51));
                    this.searchCalendarButton.setOnClickListener((View$OnClickListener)new _$$Lambda$ChatActivity$GtWzF3XwVjLwK5QO2beMs5bgGMY(this));
                    this.searchCalendarButton.setContentDescription((CharSequence)LocaleController.getString("JumpToDate", 2131559707));
                    (this.searchCountText = new SimpleTextView((Context)progressView)).setTextColor(Theme.getColor("chat_searchPanelText"));
                    this.searchCountText.setTextSize(15);
                    this.searchCountText.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                    this.searchCountText.setGravity(5);
                    this.searchContainer.addView((View)this.searchCountText, (ViewGroup$LayoutParams)LayoutHelper.createFrame(-2, -2.0f, 21, 0.0f, 0.0f, 108.0f, 0.0f));
                    (this.bottomOverlay = new FrameLayout(progressView) {
                        public void onDraw(final Canvas canvas) {
                            final int intrinsicHeight = Theme.chat_composeShadowDrawable.getIntrinsicHeight();
                            Theme.chat_composeShadowDrawable.setBounds(0, 0, this.getMeasuredWidth(), intrinsicHeight);
                            Theme.chat_composeShadowDrawable.draw(canvas);
                            canvas.drawRect(0.0f, (float)intrinsicHeight, (float)this.getMeasuredWidth(), (float)this.getMeasuredHeight(), Theme.chat_composeBackgroundPaint);
                        }
                    }).setWillNotDraw(false);
                    this.bottomOverlay.setVisibility(4);
                    this.bottomOverlay.setFocusable(true);
                    this.bottomOverlay.setFocusableInTouchMode(true);
                    this.bottomOverlay.setClickable(true);
                    this.bottomOverlay.setPadding(0, AndroidUtilities.dp(2.0f), 0, 0);
                    this.contentView.addView((View)this.bottomOverlay, (ViewGroup$LayoutParams)LayoutHelper.createFrame(-1, 51, 80));
                    (this.bottomOverlayText = new TextView((Context)progressView)).setTextSize(1, 14.0f);
                    this.bottomOverlayText.setGravity(17);
                    this.bottomOverlayText.setMaxLines(2);
                    this.bottomOverlayText.setEllipsize(TextUtils$TruncateAt.END);
                    this.bottomOverlayText.setLineSpacing((float)AndroidUtilities.dp(2.0f), 1.0f);
                    this.bottomOverlayText.setTextColor(Theme.getColor("chat_secretChatStatusText"));
                    this.bottomOverlay.addView((View)this.bottomOverlayText, (ViewGroup$LayoutParams)LayoutHelper.createFrame(-2, -2.0f, 17, 14.0f, 0.0f, 14.0f, 0.0f));
                    (this.bottomOverlayChat = new FrameLayout(progressView) {
                        public void onDraw(final Canvas canvas) {
                            final int intrinsicHeight = Theme.chat_composeShadowDrawable.getIntrinsicHeight();
                            Theme.chat_composeShadowDrawable.setBounds(0, 0, this.getMeasuredWidth(), intrinsicHeight);
                            Theme.chat_composeShadowDrawable.draw(canvas);
                            canvas.drawRect(0.0f, (float)intrinsicHeight, (float)this.getMeasuredWidth(), (float)this.getMeasuredHeight(), Theme.chat_composeBackgroundPaint);
                        }
                        
                        protected void onMeasure(final int n, final int n2) {
                            final int size = View$MeasureSpec.getSize(n);
                            if (ChatActivity.this.bottomOverlayChatText.getVisibility() == 0 && ChatActivity.this.bottomOverlayChatText2.getVisibility() == 0) {
                                final FrameLayout$LayoutParams frameLayout$LayoutParams = (FrameLayout$LayoutParams)ChatActivity.this.bottomOverlayChatText.getLayoutParams();
                                final int leftMargin = size / 2;
                                frameLayout$LayoutParams.width = leftMargin;
                                final FrameLayout$LayoutParams frameLayout$LayoutParams2 = (FrameLayout$LayoutParams)ChatActivity.this.bottomOverlayChatText2.getLayoutParams();
                                frameLayout$LayoutParams2.width = leftMargin;
                                frameLayout$LayoutParams2.leftMargin = leftMargin;
                            }
                            else {
                                ((FrameLayout$LayoutParams)ChatActivity.this.bottomOverlayChatText.getLayoutParams()).width = size;
                            }
                            super.onMeasure(n, n2);
                        }
                    }).setWillNotDraw(false);
                    this.bottomOverlayChat.setPadding(0, AndroidUtilities.dp(3.0f), 0, 0);
                    this.bottomOverlayChat.setVisibility(4);
                    this.contentView.addView((View)this.bottomOverlayChat, (ViewGroup$LayoutParams)LayoutHelper.createFrame(-1, 51, 80));
                    (this.bottomOverlayChatText = new TextView((Context)progressView)).setTextSize(1, 15.0f);
                    this.bottomOverlayChatText.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                    this.bottomOverlayChatText.setTextColor(Theme.getColor("chat_fieldOverlayText"));
                    this.bottomOverlayChatText.setGravity(17);
                    this.bottomOverlayChat.addView((View)this.bottomOverlayChatText, (ViewGroup$LayoutParams)LayoutHelper.createFrame(-1, -1.0f));
                    this.bottomOverlayChatText.setOnClickListener((View$OnClickListener)new _$$Lambda$ChatActivity$Xnch0OpMUH0ulmiGMAiifshDRCc(this));
                    (this.bottomOverlayChatText2 = new UnreadCounterTextView((Context)progressView)).setTextSize(1, 15.0f);
                    this.bottomOverlayChatText2.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                    this.bottomOverlayChatText2.setTextColor(Theme.getColor("chat_fieldOverlayText"));
                    this.bottomOverlayChatText2.setGravity(17);
                    this.bottomOverlayChatText2.setVisibility(8);
                    this.bottomOverlayChat.addView((View)this.bottomOverlayChatText2, (ViewGroup$LayoutParams)LayoutHelper.createFrame(-1, -1.0f));
                    this.bottomOverlayChatText2.setOnClickListener((View$OnClickListener)new _$$Lambda$ChatActivity$fwEBU17y4SYZ67VjN_jy2DJ10TA(this));
                    (this.bottomOverlayProgress = new RadialProgressView((Context)progressView)).setSize(AndroidUtilities.dp(22.0f));
                    this.bottomOverlayProgress.setProgressColor(Theme.getColor("chat_fieldOverlayText"));
                    this.bottomOverlayProgress.setVisibility(4);
                    this.bottomOverlayProgress.setScaleX(0.1f);
                    this.bottomOverlayProgress.setScaleY(0.1f);
                    this.bottomOverlayProgress.setAlpha(1.0f);
                    this.bottomOverlayChat.addView((View)this.bottomOverlayProgress, (ViewGroup$LayoutParams)LayoutHelper.createFrame(30, 30, 17));
                    if (!this.isBroadcast) {
                        (this.replyButton = new TextView((Context)progressView)).setText((CharSequence)LocaleController.getString("Reply", 2131560565));
                        this.replyButton.setGravity(16);
                        this.replyButton.setTextSize(1, 15.0f);
                        this.replyButton.setPadding(AndroidUtilities.dp(14.0f), 0, AndroidUtilities.dp(21.0f), 0);
                        this.replyButton.setBackgroundDrawable(Theme.createSelectorDrawable(Theme.getColor("actionBarActionModeDefaultSelector"), 3));
                        this.replyButton.setTextColor(Theme.getColor("actionBarActionModeDefaultIcon"));
                        this.replyButton.setCompoundDrawablePadding(AndroidUtilities.dp(7.0f));
                        this.replyButton.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                        final Drawable mutate3 = ((Context)progressView).getResources().getDrawable(2131165491).mutate();
                        mutate3.setColorFilter((ColorFilter)new PorterDuffColorFilter(Theme.getColor("actionBarActionModeDefaultIcon"), PorterDuff$Mode.MULTIPLY));
                        this.replyButton.setCompoundDrawablesWithIntrinsicBounds(mutate3, (Drawable)null, (Drawable)null, (Drawable)null);
                        this.replyButton.setOnClickListener((View$OnClickListener)new _$$Lambda$ChatActivity$XI5_iuaszK3El6MRKLRW6i8D4x0(this));
                        this.bottomMessagesActionContainer.addView((View)this.replyButton, (ViewGroup$LayoutParams)LayoutHelper.createFrame(-2, -1, 51));
                    }
                    (this.forwardButton = new TextView((Context)progressView)).setText((CharSequence)LocaleController.getString("Forward", 2131559504));
                    this.forwardButton.setGravity(16);
                    this.forwardButton.setTextSize(1, 15.0f);
                    this.forwardButton.setPadding(AndroidUtilities.dp(21.0f), 0, AndroidUtilities.dp(21.0f), 0);
                    this.forwardButton.setCompoundDrawablePadding(AndroidUtilities.dp(6.0f));
                    this.forwardButton.setBackgroundDrawable(Theme.createSelectorDrawable(Theme.getColor("actionBarActionModeDefaultSelector"), 3));
                    this.forwardButton.setTextColor(Theme.getColor("actionBarActionModeDefaultIcon"));
                    this.forwardButton.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
                    final Drawable mutate4 = ((Context)progressView).getResources().getDrawable(2131165485).mutate();
                    mutate4.setColorFilter((ColorFilter)new PorterDuffColorFilter(Theme.getColor("actionBarActionModeDefaultIcon"), PorterDuff$Mode.MULTIPLY));
                    this.forwardButton.setCompoundDrawablesWithIntrinsicBounds(mutate4, (Drawable)null, (Drawable)null, (Drawable)null);
                    this.forwardButton.setOnClickListener((View$OnClickListener)new _$$Lambda$ChatActivity$wlHsNE9I_Dn0FclPLAtTX2Iu9mg(this));
                    this.bottomMessagesActionContainer.addView((View)this.forwardButton, (ViewGroup$LayoutParams)LayoutHelper.createFrame(-2, -1, 53));
                    this.contentView.addView((View)this.searchContainer, (ViewGroup$LayoutParams)LayoutHelper.createFrame(-1, 51, 80));
                    this.undoView = new UndoView((Context)progressView);
                    this.contentView.addView((View)this.undoView, (ViewGroup$LayoutParams)LayoutHelper.createFrame(-1, -2.0f, 83, 8.0f, 0.0f, 8.0f, 8.0f));
                    this.chatAdapter.updateRows();
                    if (this.loading && this.messages.isEmpty()) {
                        progressView = (Throwable)this.progressView;
                        int visibility5 = n3;
                        if (this.chatAdapter.botInfoRow == -1) {
                            visibility5 = 0;
                        }
                        ((FrameLayout)progressView).setVisibility(visibility5);
                        this.chatListView.setEmptyView(null);
                    }
                    else {
                        this.progressView.setVisibility(4);
                        this.chatListView.setEmptyView((View)this.emptyViewContainer);
                    }
                    this.checkBotKeyboard();
                    this.updateContactStatus();
                    this.updateBottomOverlay();
                    this.updateSecretStatus();
                    this.updateSpamView();
                    this.updatePinnedMessageView(true);
                    try {
                        if (this.currentEncryptedChat != null && Build$VERSION.SDK_INT >= 23 && (SharedConfig.passcodeHash.length() == 0 || SharedConfig.allowScreenCapture)) {
                            MediaController.getInstance().setFlagSecure(this, true);
                        }
                    }
                    catch (Throwable progressView) {
                        FileLog.e(progressView);
                    }
                    if (fieldText != null) {
                        this.chatActivityEnterView.setFieldText(fieldText);
                    }
                    this.fixLayoutInternal();
                    return super.fragmentView;
                }
                catch (Exception ex) {
                    continue;
                }
                break;
            }
        }
    }
    
    @Override
    public void didReceivedNotification(int i, int j, Object... array) {
        if (i == NotificationCenter.messagesDidLoad) {
            if ((int)array[10] == super.classGuid) {
                this.setItemAnimationsEnabled(false);
                if (!this.openAnimationEnded) {
                    NotificationCenter.getInstance(super.currentAccount).setAllowedNotificationsDutingAnimation(new int[] { NotificationCenter.chatInfoDidLoad, NotificationCenter.dialogsNeedReload, NotificationCenter.closeChats, NotificationCenter.botKeyboardDidLoad, NotificationCenter.userInfoDidLoad, NotificationCenter.needDeleteDialog });
                }
                i = (int)array[11];
                i = this.waitingForLoad.indexOf(i);
                final int clientUserId = UserConfig.getInstance(super.currentAccount).getClientUserId();
                if (i == -1) {
                    return;
                }
                this.waitingForLoad.remove(i);
                final ArrayList list = (ArrayList)array[2];
                final boolean waitingForReplyMessageLoad = this.waitingForReplyMessageLoad;
                int createUnreadMessageAfterIdLoading;
                if (waitingForReplyMessageLoad) {
                    Label_0275: {
                        if (!this.createUnreadMessageAfterIdLoading) {
                            i = 0;
                            while (true) {
                                while (i < list.size()) {
                                    final MessageObject messageObject = list.get(i);
                                    Label_0196: {
                                        if (messageObject.getId() != this.startLoadFromMessageId) {
                                            if (++i >= list.size()) {
                                                continue;
                                            }
                                            final MessageObject messageObject2 = list.get(i);
                                            if (messageObject.getId() >= this.startLoadFromMessageId && messageObject2.getId() < this.startLoadFromMessageId) {
                                                this.startLoadFromMessageId = messageObject.getId();
                                                break Label_0196;
                                            }
                                            continue;
                                            continue;
                                        }
                                    }
                                    i = 1;
                                    if (i == 0) {
                                        this.startLoadFromMessageId = 0;
                                        return;
                                    }
                                    break Label_0275;
                                }
                                i = 0;
                                continue;
                            }
                        }
                    }
                    j = this.startLoadFromMessageId;
                    final boolean needSelectFromMessageId = this.needSelectFromMessageId;
                    i = this.createUnreadMessageAfterId;
                    createUnreadMessageAfterIdLoading = (this.createUnreadMessageAfterIdLoading ? 1 : 0);
                    this.clearChatData();
                    this.createUnreadMessageAfterId = i;
                    this.startLoadFromMessageId = j;
                    this.needSelectFromMessageId = needSelectFromMessageId;
                }
                else {
                    createUnreadMessageAfterIdLoading = 0;
                }
                ++this.loadsCount;
                int n;
                if ((long)array[0] == this.dialog_id) {
                    n = 0;
                }
                else {
                    n = 1;
                }
                final int intValue = (int)array[1];
                final boolean booleanValue = (boolean)array[3];
                final int intValue2 = (int)array[4];
                (int)array[7];
                final int intValue3 = (int)array[8];
                j = (int)array[12];
                i = (int)array[13];
                int n2;
                if (i < 0) {
                    n2 = i * -1;
                    this.hasAllMentionsLocal = false;
                }
                else {
                    n2 = i;
                    if (this.first) {
                        this.hasAllMentionsLocal = true;
                        n2 = i;
                    }
                }
                boolean b = waitingForReplyMessageLoad;
                if (intValue3 == 4) {
                    this.startLoadFromMessageId = j;
                    i = list.size() - 1;
                    while (true) {
                        b = waitingForReplyMessageLoad;
                        if (i <= 0) {
                            break;
                        }
                        final MessageObject messageObject3 = list.get(i);
                        if (messageObject3.type < 0 && messageObject3.getId() == this.startLoadFromMessageId) {
                            this.startLoadFromMessageId = list.get(i - 1).getId();
                            b = waitingForReplyMessageLoad;
                            break;
                        }
                        --i;
                    }
                }
                if (intValue2 != 0) {
                    this.last_message_id = (int)array[5];
                    if (intValue3 == 3) {
                        if (this.loadingFromOldPosition) {
                            j = (int)array[6];
                            if (j != 0) {
                                this.createUnreadMessageAfterId = intValue2;
                            }
                            this.loadingFromOldPosition = false;
                        }
                        else {
                            j = 0;
                        }
                        this.first_unread_id = 0;
                    }
                    else {
                        this.first_unread_id = intValue2;
                        j = (int)array[6];
                    }
                }
                else {
                    if (this.startLoadFromMessageId != 0 && (intValue3 == 3 || intValue3 == 4)) {
                        this.last_message_id = (int)array[5];
                    }
                    j = 0;
                }
                if (intValue3 != 0) {
                    if (this.startLoadFromMessageId != 0 || this.last_message_id != 0) {
                        this.forwardEndReached[n] = false;
                    }
                }
                if ((intValue3 == 1 || intValue3 == 3) && n == 1) {
                    this.endReached[0] = (this.cacheEndReached[0] = true);
                    this.forwardEndReached[0] = false;
                    this.minMessageId[0] = 0;
                }
                if (this.loadsCount == 1 && list.size() > 20) {
                    ++this.loadsCount;
                }
                if (this.firstLoading) {
                    if (!this.forwardEndReached[n]) {
                        this.messages.clear();
                        this.messagesByDays.clear();
                        this.groupedMessagesMap.clear();
                        for (i = 0; i < 2; ++i) {
                            this.messagesDict[i].clear();
                            if (this.currentEncryptedChat == null) {
                                this.maxMessageId[i] = Integer.MAX_VALUE;
                                this.minMessageId[i] = Integer.MIN_VALUE;
                            }
                            else {
                                this.maxMessageId[i] = Integer.MIN_VALUE;
                                this.minMessageId[i] = Integer.MAX_VALUE;
                            }
                            this.maxDate[i] = Integer.MIN_VALUE;
                            this.minDate[i] = 0;
                        }
                    }
                    this.firstLoading = false;
                    AndroidUtilities.runOnUIThread(new _$$Lambda$ChatActivity$FcQ_NOVyq6WAJ_k9m5uIe8kLYek(this));
                }
                if (intValue3 == 1) {
                    Collections.reverse(list);
                }
                if (this.currentEncryptedChat == null) {
                    DataQuery.getInstance(super.currentAccount).loadReplyMessagesForMessages(list, this.dialog_id);
                }
                if ((intValue3 == 2 || intValue3 == 1) && list.isEmpty() && !booleanValue) {
                    this.forwardEndReached[0] = true;
                }
                final MediaController instance = MediaController.getInstance();
                final int size = list.size();
                i = 0;
                int n3 = 0;
                TLRPC.MessageAction messageAction = null;
                while (i < size) {
                    final TLRPC.MessageAction action = list.get(size - i - 1).messageOwner.action;
                    int n4;
                    TLRPC.MessageAction messageAction2;
                    if (i == 0 && action instanceof TLRPC.TL_messageActionChatCreate) {
                        n4 = 1;
                        messageAction2 = messageAction;
                    }
                    else {
                        if (n3 == 0) {
                            break;
                        }
                        n4 = n3;
                        messageAction2 = messageAction;
                        if (i < 2) {
                            n4 = n3;
                            messageAction2 = messageAction;
                            if (action instanceof TLRPC.TL_messageActionChatEditPhoto) {
                                messageAction2 = action;
                                n4 = n3;
                            }
                        }
                    }
                    ++i;
                    n3 = n4;
                    messageAction = messageAction2;
                }
                int k = 0;
                LongSparseArray longSparseArray = null;
                LongSparseArray longSparseArray2 = null;
                int n5 = 0;
                i = 0;
                final int n6 = intValue;
                int n7 = createUnreadMessageAfterIdLoading;
                while (k < list.size()) {
                    final MessageObject messageObject4 = list.get(k);
                    final int n8 = n5 + messageObject4.getApproximateHeight();
                    final TLRPC.User currentUser = this.currentUser;
                    if (currentUser != null) {
                        if (currentUser.self) {
                            messageObject4.messageOwner.out = true;
                        }
                        if ((this.currentUser.bot && messageObject4.isOut()) || this.currentUser.id == clientUserId) {
                            messageObject4.setIsRead();
                        }
                    }
                    LongSparseArray longSparseArray7 = null;
                    LongSparseArray longSparseArray8 = null;
                    TLRPC.MessageAction messageAction5 = null;
                    Label_3184: {
                        Label_1277: {
                            if (this.messagesDict[n].indexOfKey(messageObject4.getId()) < 0) {
                                this.addToPolls(messageObject4, null);
                                if (this.isSecretChat()) {
                                    this.checkSecretMessageForLocation(messageObject4);
                                }
                                if (instance.isPlayingMessage(messageObject4)) {
                                    final MessageObject playingMessageObject = instance.getPlayingMessageObject();
                                    messageObject4.audioProgress = playingMessageObject.audioProgress;
                                    messageObject4.audioProgressSec = playingMessageObject.audioProgressSec;
                                    messageObject4.audioPlayerDuration = playingMessageObject.audioPlayerDuration;
                                }
                                if (n == 0 && ChatObject.isChannel(this.currentChat) && messageObject4.getId() == 1) {
                                    this.endReached[n] = true;
                                    this.cacheEndReached[n] = true;
                                }
                                if (messageObject4.getId() > 0) {
                                    this.maxMessageId[n] = Math.min(messageObject4.getId(), this.maxMessageId[n]);
                                    this.minMessageId[n] = Math.max(messageObject4.getId(), this.minMessageId[n]);
                                }
                                else if (this.currentEncryptedChat != null) {
                                    this.maxMessageId[n] = Math.max(messageObject4.getId(), this.maxMessageId[n]);
                                    this.minMessageId[n] = Math.min(messageObject4.getId(), this.minMessageId[n]);
                                }
                                final int date = messageObject4.messageOwner.date;
                                if (date != 0) {
                                    final int[] maxDate = this.maxDate;
                                    maxDate[n] = Math.max(maxDate[n], date);
                                    final int[] minDate = this.minDate;
                                    if (minDate[n] == 0 || messageObject4.messageOwner.date < minDate[n]) {
                                        this.minDate[n] = messageObject4.messageOwner.date;
                                    }
                                }
                                if (messageObject4.getId() == this.last_message_id) {
                                    this.forwardEndReached[n] = true;
                                }
                                final TLRPC.MessageAction action2 = messageObject4.messageOwner.action;
                                if (messageObject4.type >= 0) {
                                    if (n != 1 || !(action2 instanceof TLRPC.TL_messageActionChatMigrateTo)) {
                                        final TLRPC.Chat currentChat = this.currentChat;
                                        Label_1705: {
                                            if (currentChat != null && currentChat.creator) {
                                                if (action2 instanceof TLRPC.TL_messageActionChatCreate) {
                                                    break Label_1277;
                                                }
                                                final TLRPC.MessageAction messageAction3 = messageAction;
                                                if (messageAction3 != null && action2 == messageAction3) {
                                                    break Label_1705;
                                                }
                                            }
                                            final TLRPC.MessageAction messageAction4 = messageAction;
                                            if (!(messageObject4.messageOwner.action instanceof TLRPC.TL_messageActionChannelMigrateFrom)) {
                                                final MessageObject needAnimateToMessage = this.needAnimateToMessage;
                                                MessageObject needAnimateToMessage2 = messageObject4;
                                                if (needAnimateToMessage != null) {
                                                    needAnimateToMessage2 = messageObject4;
                                                    if (needAnimateToMessage.getId() == messageObject4.getId()) {
                                                        needAnimateToMessage2 = messageObject4;
                                                        if (messageObject4.getId() < 0) {
                                                            needAnimateToMessage2 = messageObject4;
                                                            if (messageObject4.type == 5) {
                                                                needAnimateToMessage2 = this.needAnimateToMessage;
                                                                this.animatingMessageObjects.add(needAnimateToMessage2);
                                                                this.needAnimateToMessage = null;
                                                            }
                                                        }
                                                    }
                                                }
                                                this.messagesDict[n].put(needAnimateToMessage2.getId(), (Object)needAnimateToMessage2);
                                                ArrayList<MessageObject> value = this.messagesByDays.get(needAnimateToMessage2.dateKey);
                                                if (value == null) {
                                                    value = new ArrayList<MessageObject>();
                                                    this.messagesByDays.put(needAnimateToMessage2.dateKey, value);
                                                    final TLRPC.TL_message tl_message = new TLRPC.TL_message();
                                                    tl_message.message = LocaleController.formatDateChat(needAnimateToMessage2.messageOwner.date);
                                                    tl_message.id = 0;
                                                    tl_message.date = needAnimateToMessage2.messageOwner.date;
                                                    final MessageObject messageObject5 = new MessageObject(super.currentAccount, tl_message, false);
                                                    messageObject5.type = 10;
                                                    messageObject5.contentType = 1;
                                                    messageObject5.isDateObject = true;
                                                    if (intValue3 == 1) {
                                                        this.messages.add(0, messageObject5);
                                                    }
                                                    else {
                                                        this.messages.add(messageObject5);
                                                    }
                                                    ++i;
                                                }
                                                int n9;
                                                LongSparseArray longSparseArray5;
                                                LongSparseArray longSparseArray6;
                                                if (needAnimateToMessage2.hasValidGroupId()) {
                                                    final MessageObject.GroupedMessages groupedMessages = (MessageObject.GroupedMessages)this.groupedMessagesMap.get(needAnimateToMessage2.getGroupIdForUse());
                                                    MessageObject.GroupedMessages groupedMessages2 = null;
                                                    Label_2114: {
                                                        if (groupedMessages != null && this.messages.size() > 1) {
                                                            MessageObject messageObject6;
                                                            if (intValue3 == 1) {
                                                                messageObject6 = this.messages.get(0);
                                                            }
                                                            else {
                                                                final ArrayList<MessageObject> messages = this.messages;
                                                                messageObject6 = messages.get(messages.size() - 2);
                                                            }
                                                            if (messageObject6.getGroupIdForUse() == needAnimateToMessage2.getGroupIdForUse()) {
                                                                final long localGroupId = messageObject6.localGroupId;
                                                                if (localGroupId != 0L) {
                                                                    needAnimateToMessage2.localGroupId = localGroupId;
                                                                    groupedMessages2 = (MessageObject.GroupedMessages)this.groupedMessagesMap.get(messageObject6.localGroupId);
                                                                    break Label_2114;
                                                                }
                                                            }
                                                            else if (messageObject6.getGroupIdForUse() != needAnimateToMessage2.getGroupIdForUse()) {
                                                                needAnimateToMessage2.localGroupId = Utilities.random.nextLong();
                                                                groupedMessages2 = null;
                                                                break Label_2114;
                                                            }
                                                        }
                                                        groupedMessages2 = groupedMessages;
                                                    }
                                                    MessageObject.GroupedMessages groupedMessages3 = null;
                                                    LongSparseArray longSparseArray3 = null;
                                                    Label_2215: {
                                                        if (groupedMessages2 == null) {
                                                            groupedMessages3 = new MessageObject.GroupedMessages();
                                                            groupedMessages3.groupId = needAnimateToMessage2.getGroupId();
                                                            this.groupedMessagesMap.put(groupedMessages3.groupId, (Object)groupedMessages3);
                                                            longSparseArray3 = longSparseArray;
                                                        }
                                                        else {
                                                            if (longSparseArray2 != null) {
                                                                longSparseArray3 = longSparseArray;
                                                                groupedMessages3 = groupedMessages2;
                                                                if (longSparseArray2.indexOfKey(needAnimateToMessage2.getGroupId()) >= 0) {
                                                                    break Label_2215;
                                                                }
                                                            }
                                                            if ((longSparseArray3 = longSparseArray) == null) {
                                                                longSparseArray3 = new LongSparseArray();
                                                            }
                                                            longSparseArray3.put(needAnimateToMessage2.getGroupId(), (Object)groupedMessages2);
                                                            groupedMessages3 = groupedMessages2;
                                                        }
                                                    }
                                                    n9 = n7;
                                                    LongSparseArray longSparseArray4;
                                                    if ((longSparseArray4 = longSparseArray2) == null) {
                                                        longSparseArray4 = new LongSparseArray();
                                                    }
                                                    longSparseArray4.put(groupedMessages3.groupId, (Object)groupedMessages3);
                                                    if (intValue3 == 1) {
                                                        groupedMessages3.messages.add(needAnimateToMessage2);
                                                        longSparseArray5 = longSparseArray3;
                                                        longSparseArray6 = longSparseArray4;
                                                    }
                                                    else {
                                                        groupedMessages3.messages.add(0, needAnimateToMessage2);
                                                        longSparseArray5 = longSparseArray3;
                                                        longSparseArray6 = longSparseArray4;
                                                    }
                                                }
                                                else {
                                                    longSparseArray5 = longSparseArray;
                                                    longSparseArray6 = longSparseArray2;
                                                    n9 = n7;
                                                    if (needAnimateToMessage2.getGroupIdForUse() != 0L) {
                                                        needAnimateToMessage2.messageOwner.grouped_id = 0L;
                                                        needAnimateToMessage2.localSentGroupId = 0L;
                                                        n9 = n7;
                                                        longSparseArray6 = longSparseArray2;
                                                        longSparseArray5 = longSparseArray;
                                                    }
                                                }
                                                ++i;
                                                value.add(needAnimateToMessage2);
                                                if (intValue3 == 1) {
                                                    this.messages.add(0, needAnimateToMessage2);
                                                }
                                                else {
                                                    final ArrayList<MessageObject> messages2 = this.messages;
                                                    messages2.add(messages2.size() - 1, needAnimateToMessage2);
                                                }
                                                MessageObject messageObject8 = null;
                                                Label_2532: {
                                                    if (this.currentEncryptedChat == null) {
                                                        if (this.createUnreadMessageAfterId != 0 && intValue3 != 1) {
                                                            final int index = k + 1;
                                                            if (index < list.size()) {
                                                                final MessageObject messageObject7 = list.get(index);
                                                                if (!needAnimateToMessage2.isOut()) {
                                                                    messageObject8 = messageObject7;
                                                                    if (messageObject7.getId() < this.createUnreadMessageAfterId) {
                                                                        break Label_2532;
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    else if (this.createUnreadMessageAfterId != 0 && intValue3 != 1) {
                                                        final int index2 = k - 1;
                                                        if (index2 >= 0) {
                                                            final MessageObject messageObject9 = list.get(index2);
                                                            if (!needAnimateToMessage2.isOut()) {
                                                                messageObject8 = messageObject9;
                                                                if (messageObject9.getId() < this.createUnreadMessageAfterId) {
                                                                    break Label_2532;
                                                                }
                                                            }
                                                        }
                                                    }
                                                    messageObject8 = null;
                                                }
                                                int n10 = 0;
                                                Label_2763: {
                                                    if (intValue3 == 2 && needAnimateToMessage2.getId() == this.first_unread_id) {
                                                        if (n8 <= AndroidUtilities.displaySize.y / 2) {
                                                            n10 = i;
                                                            if (this.forwardEndReached[0]) {
                                                                break Label_2763;
                                                            }
                                                        }
                                                        final TLRPC.TL_message tl_message2 = new TLRPC.TL_message();
                                                        tl_message2.message = "";
                                                        tl_message2.id = 0;
                                                        final MessageObject messageObject10 = new MessageObject(super.currentAccount, tl_message2, false);
                                                        messageObject10.type = 6;
                                                        messageObject10.contentType = 2;
                                                        final ArrayList<MessageObject> messages3 = this.messages;
                                                        messages3.add(messages3.size() - 1, messageObject10);
                                                        this.unreadMessageObject = messageObject10;
                                                        this.scrollToMessage = this.unreadMessageObject;
                                                        this.scrollToMessagePosition = -10000;
                                                        n10 = i + 1;
                                                    }
                                                    else {
                                                        if (intValue3 != 3) {
                                                            n10 = i;
                                                            if (intValue3 != 4) {
                                                                break Label_2763;
                                                            }
                                                        }
                                                        n10 = i;
                                                        if (needAnimateToMessage2.getId() == this.startLoadFromMessageId) {
                                                            this.removeSelectedMessageHighlight();
                                                            if (this.needSelectFromMessageId) {
                                                                this.highlightMessageId = needAnimateToMessage2.getId();
                                                            }
                                                            this.scrollToMessage = needAnimateToMessage2;
                                                            this.startLoadFromMessageId = 0;
                                                            n10 = i;
                                                            if (this.scrollToMessagePosition == -10000) {
                                                                this.scrollToMessagePosition = -9000;
                                                                n10 = i;
                                                            }
                                                        }
                                                    }
                                                }
                                                longSparseArray7 = longSparseArray5;
                                                longSparseArray8 = longSparseArray6;
                                                i = n10;
                                                messageAction5 = messageAction4;
                                                n7 = n9;
                                                if (intValue3 == 2) {
                                                    break Label_3184;
                                                }
                                                longSparseArray7 = longSparseArray5;
                                                longSparseArray8 = longSparseArray6;
                                                i = n10;
                                                messageAction5 = messageAction4;
                                                n7 = n9;
                                                if (this.unreadMessageObject != null) {
                                                    break Label_3184;
                                                }
                                                longSparseArray7 = longSparseArray5;
                                                longSparseArray8 = longSparseArray6;
                                                i = n10;
                                                messageAction5 = messageAction4;
                                                n7 = n9;
                                                if (this.createUnreadMessageAfterId != 0) {
                                                    if (this.currentEncryptedChat != null || needAnimateToMessage2.isOut() || needAnimateToMessage2.getId() < this.createUnreadMessageAfterId) {
                                                        longSparseArray7 = longSparseArray5;
                                                        longSparseArray8 = longSparseArray6;
                                                        i = n10;
                                                        messageAction5 = messageAction4;
                                                        n7 = n9;
                                                        if (this.currentEncryptedChat == null) {
                                                            break Label_3184;
                                                        }
                                                        longSparseArray7 = longSparseArray5;
                                                        longSparseArray8 = longSparseArray6;
                                                        i = n10;
                                                        messageAction5 = messageAction4;
                                                        n7 = n9;
                                                        if (needAnimateToMessage2.isOut()) {
                                                            break Label_3184;
                                                        }
                                                        longSparseArray7 = longSparseArray5;
                                                        longSparseArray8 = longSparseArray6;
                                                        i = n10;
                                                        messageAction5 = messageAction4;
                                                        n7 = n9;
                                                        if (needAnimateToMessage2.getId() > this.createUnreadMessageAfterId) {
                                                            break Label_3184;
                                                        }
                                                    }
                                                    if (intValue3 != 1 && messageObject8 == null) {
                                                        longSparseArray7 = longSparseArray5;
                                                        longSparseArray8 = longSparseArray6;
                                                        i = n10;
                                                        messageAction5 = messageAction4;
                                                        n7 = n9;
                                                        if (messageObject8 != null) {
                                                            break Label_3184;
                                                        }
                                                        longSparseArray7 = longSparseArray5;
                                                        longSparseArray8 = longSparseArray6;
                                                        i = n10;
                                                        messageAction5 = messageAction4;
                                                        if ((n7 = n9) == 0) {
                                                            break Label_3184;
                                                        }
                                                        longSparseArray7 = longSparseArray5;
                                                        longSparseArray8 = longSparseArray6;
                                                        i = n10;
                                                        messageAction5 = messageAction4;
                                                        n7 = n9;
                                                        if (k != list.size() - 1) {
                                                            break Label_3184;
                                                        }
                                                    }
                                                    final TLRPC.TL_message tl_message3 = new TLRPC.TL_message();
                                                    tl_message3.message = "";
                                                    tl_message3.id = 0;
                                                    final MessageObject unreadMessageObject = new MessageObject(super.currentAccount, tl_message3, false);
                                                    unreadMessageObject.type = 6;
                                                    unreadMessageObject.contentType = 2;
                                                    if (intValue3 == 1) {
                                                        this.messages.add(1, unreadMessageObject);
                                                    }
                                                    else {
                                                        final ArrayList<MessageObject> messages4 = this.messages;
                                                        messages4.add(messages4.size() - 1, unreadMessageObject);
                                                    }
                                                    this.unreadMessageObject = unreadMessageObject;
                                                    if (intValue3 == 3) {
                                                        this.scrollToMessage = this.unreadMessageObject;
                                                        this.startLoadFromMessageId = 0;
                                                        this.scrollToMessagePosition = -9000;
                                                    }
                                                    i = n10 + 1;
                                                    n7 = n9;
                                                    messageAction5 = messageAction4;
                                                    longSparseArray8 = longSparseArray6;
                                                    longSparseArray7 = longSparseArray5;
                                                }
                                                break Label_3184;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        longSparseArray7 = longSparseArray;
                        longSparseArray8 = longSparseArray2;
                        messageAction5 = messageAction;
                    }
                    ++k;
                    messageAction = messageAction5;
                    longSparseArray = longSparseArray7;
                    longSparseArray2 = longSparseArray8;
                    n5 = n8;
                }
                if (n7 != 0) {
                    this.createUnreadMessageAfterId = 0;
                }
                if (intValue3 == 0 && i == 0) {
                    --this.loadsCount;
                }
                if (this.forwardEndReached[n] && n != 1) {
                    this.first_unread_id = 0;
                    this.last_message_id = 0;
                    this.createUnreadMessageAfterId = 0;
                }
                if (intValue3 == 1) {
                    int n11;
                    if (list.size() != n6 && (!booleanValue || this.currentEncryptedChat != null || this.forwardEndReached[n])) {
                        this.forwardEndReached[n] = true;
                        if (n != 1) {
                            this.first_unread_id = 0;
                            this.last_message_id = 0;
                            this.createUnreadMessageAfterId = 0;
                            final ChatActivityAdapter chatAdapter = this.chatAdapter;
                            chatAdapter.notifyItemRemoved(chatAdapter.loadingDownRow);
                            j = 1;
                        }
                        else {
                            j = 0;
                        }
                        this.startLoadFromMessageId = 0;
                        n11 = j;
                    }
                    else {
                        n11 = 0;
                    }
                    if (i > 0) {
                        final int firstVisibleItemPosition = this.chatLayoutManager.findFirstVisibleItemPosition();
                        if ((j = firstVisibleItemPosition) == 0) {
                            j = firstVisibleItemPosition + 1;
                        }
                        final View viewByPosition = this.chatLayoutManager.findViewByPosition(j);
                        View viewByPosition2 = null;
                        Label_3474: {
                            if (viewByPosition != null) {
                                viewByPosition2 = viewByPosition;
                                int n12 = j;
                                while (viewByPosition2 instanceof ChatMessageCell && ((ChatMessageCell)viewByPosition2).getMessageObject().hasValidGroupId()) {
                                    ++n12;
                                    if ((viewByPosition2 = this.chatLayoutManager.findViewByPosition(n12)) == null) {
                                        viewByPosition2 = viewByPosition;
                                        break Label_3474;
                                    }
                                }
                                j = n12;
                            }
                            else {
                                viewByPosition2 = null;
                                j = -1;
                            }
                        }
                        int n13;
                        if (viewByPosition2 == null) {
                            n13 = 0;
                        }
                        else {
                            n13 = this.chatListView.getMeasuredHeight() - viewByPosition2.getBottom() - this.chatListView.getPaddingBottom();
                        }
                        this.chatAdapter.notifyItemRangeInserted(1, i);
                        if (j != -1) {
                            this.chatLayoutManager.scrollToPositionWithOffset(j + i - n11, n13);
                        }
                    }
                    this.loadingForward = false;
                }
                else {
                    if (list.size() < n6 && intValue3 != 3 && intValue3 != 4) {
                        if (booleanValue) {
                            if (this.currentEncryptedChat != null || this.isBroadcast) {
                                this.endReached[n] = true;
                            }
                            if (intValue3 != 2) {
                                this.cacheEndReached[n] = true;
                            }
                        }
                        else if (intValue3 != 2 || (list.size() == 0 && this.messages.isEmpty())) {
                            this.endReached[n] = true;
                        }
                    }
                    this.loading = false;
                    if (this.chatListView != null) {
                        if (!this.first && !this.scrollToTopOnResume && !this.forceScrollToTop) {
                            if (i != 0) {
                                int n14 = 0;
                                Label_3755: {
                                    Label_3752: {
                                        if (this.endReached[n]) {
                                            if (n != 0 || this.mergeDialogId != 0L) {
                                                if (n != 1) {
                                                    break Label_3752;
                                                }
                                            }
                                            final ChatActivityAdapter chatAdapter2 = this.chatAdapter;
                                            chatAdapter2.notifyItemRangeChanged(chatAdapter2.loadingUpRow - 1, 2);
                                            this.chatAdapter.updateRows();
                                            n14 = 1;
                                            break Label_3755;
                                        }
                                    }
                                    n14 = 0;
                                }
                                final int firstVisibleItemPosition2 = this.chatLayoutManager.findFirstVisibleItemPosition();
                                final View viewByPosition3 = this.chatLayoutManager.findViewByPosition(firstVisibleItemPosition2);
                                View viewByPosition4;
                                if (viewByPosition3 != null) {
                                    viewByPosition4 = viewByPosition3;
                                    j = firstVisibleItemPosition2;
                                    while (viewByPosition4 instanceof ChatMessageCell && ((ChatMessageCell)viewByPosition4).getMessageObject().hasValidGroupId()) {
                                        ++j;
                                        if ((viewByPosition4 = this.chatLayoutManager.findViewByPosition(j)) == null) {
                                            viewByPosition4 = viewByPosition3;
                                            j = firstVisibleItemPosition2;
                                            break;
                                        }
                                    }
                                }
                                else {
                                    viewByPosition4 = null;
                                    j = -1;
                                }
                                int n15;
                                if (viewByPosition4 == null) {
                                    n15 = 0;
                                }
                                else {
                                    n15 = this.chatListView.getMeasuredHeight() - viewByPosition4.getBottom() - this.chatListView.getPaddingBottom();
                                }
                                if (i - n14 > 0) {
                                    final int access$14500 = this.chatAdapter.messagesEndRow;
                                    final ChatActivityAdapter chatAdapter3 = this.chatAdapter;
                                    chatAdapter3.notifyItemChanged(chatAdapter3.loadingUpRow);
                                    this.chatAdapter.notifyItemRangeInserted(access$14500, i - n14);
                                }
                                if (j != -1) {
                                    this.chatLayoutManager.scrollToPositionWithOffset(j, n15);
                                }
                            }
                            else if (this.endReached[n] && ((n == 0 && this.mergeDialogId == 0L) || n == 1)) {
                                final ChatActivityAdapter chatAdapter4 = this.chatAdapter;
                                chatAdapter4.notifyItemRemoved(chatAdapter4.loadingUpRow);
                            }
                        }
                        else {
                            this.forceScrollToTop = false;
                            this.chatAdapter.notifyDataSetChanged();
                            final MessageObject scrollToMessage = this.scrollToMessage;
                            if (scrollToMessage != null) {
                                final int startLoadFromMessageOffset = this.startLoadFromMessageOffset;
                                int n16 = 0;
                                boolean b2 = false;
                                Label_4092: {
                                    Label_4036: {
                                        if (startLoadFromMessageOffset == Integer.MAX_VALUE) {
                                            n16 = this.scrollToMessagePosition;
                                            if (n16 == -9000) {
                                                n16 = this.getScrollOffsetForMessage(scrollToMessage);
                                            }
                                            else {
                                                if (n16 != -10000) {
                                                    break Label_4036;
                                                }
                                                n16 = -AndroidUtilities.dp(11.0f);
                                            }
                                            b2 = false;
                                            break Label_4092;
                                        }
                                        n16 = -startLoadFromMessageOffset - this.chatListView.getPaddingBottom();
                                        this.startLoadFromMessageOffset = Integer.MAX_VALUE;
                                    }
                                    b2 = true;
                                }
                                Label_4218: {
                                    if (!this.messages.isEmpty()) {
                                        Label_4188: {
                                            if (this.chatAdapter.loadingUpRow != -1 && !this.messages.isEmpty()) {
                                                final ArrayList<MessageObject> messages5 = this.messages;
                                                if (messages5.get(messages5.size() - 1) != this.scrollToMessage) {
                                                    final ArrayList<MessageObject> messages6 = this.messages;
                                                    if (messages6.get(messages6.size() - 2) != this.scrollToMessage) {
                                                        break Label_4188;
                                                    }
                                                }
                                                this.chatLayoutManager.scrollToPositionWithOffset(this.chatAdapter.loadingUpRow, n16, b2);
                                                break Label_4218;
                                            }
                                        }
                                        this.chatLayoutManager.scrollToPositionWithOffset(this.chatAdapter.messagesStartRow + this.messages.indexOf(this.scrollToMessage), n16, b2);
                                    }
                                }
                                this.chatListView.invalidate();
                                final int scrollToMessagePosition = this.scrollToMessagePosition;
                                if (scrollToMessagePosition == -10000 || scrollToMessagePosition == -9000) {
                                    this.showPagedownButton(true, true);
                                    if (j != 0) {
                                        final TextView pagedownButtonCounter = this.pagedownButtonCounter;
                                        if (pagedownButtonCounter != null) {
                                            pagedownButtonCounter.setVisibility(0);
                                            if (this.prevSetUnreadCount != this.newUnreadMessageCount) {
                                                final TextView pagedownButtonCounter2 = this.pagedownButtonCounter;
                                                this.newUnreadMessageCount = j;
                                                pagedownButtonCounter2.setText((CharSequence)String.format("%d", j));
                                                this.prevSetUnreadCount = this.newUnreadMessageCount;
                                            }
                                        }
                                    }
                                }
                                this.scrollToMessagePosition = -10000;
                                this.scrollToMessage = null;
                            }
                            else {
                                this.moveScrollToLastMessage();
                            }
                            if (n2 != 0) {
                                this.showMentionDownButton(true, true);
                                final TextView mentiondownButtonCounter = this.mentiondownButtonCounter;
                                if (mentiondownButtonCounter != null) {
                                    mentiondownButtonCounter.setVisibility(0);
                                    final TextView mentiondownButtonCounter2 = this.mentiondownButtonCounter;
                                    this.newMentionsCount = n2;
                                    mentiondownButtonCounter2.setText((CharSequence)String.format("%d", n2));
                                }
                            }
                        }
                        if (this.paused) {
                            this.scrollToTopOnResume = true;
                            if (this.scrollToMessage != null) {
                                this.scrollToTopUnReadOnResume = true;
                            }
                        }
                        if (this.first) {
                            final RecyclerListView chatListView = this.chatListView;
                            if (chatListView != null) {
                                chatListView.setEmptyView((View)this.emptyViewContainer);
                            }
                        }
                    }
                    else {
                        this.scrollToTopOnResume = true;
                        if (this.scrollToMessage != null) {
                            this.scrollToTopUnReadOnResume = true;
                        }
                    }
                }
                if (longSparseArray2 != null) {
                    MessageObject.GroupedMessages groupedMessages4;
                    ArrayList<MessageObject> messages7;
                    int index3;
                    ChatActivityAdapter chatAdapter5;
                    for (j = 0; j < longSparseArray2.size(); ++j) {
                        groupedMessages4 = (MessageObject.GroupedMessages)longSparseArray2.valueAt(j);
                        groupedMessages4.calculate();
                        if (this.chatAdapter != null && longSparseArray != null && longSparseArray.indexOfKey(longSparseArray2.keyAt(j)) >= 0) {
                            messages7 = groupedMessages4.messages;
                            index3 = this.messages.indexOf(messages7.get(messages7.size() - 1));
                            if (index3 >= 0) {
                                chatAdapter5 = this.chatAdapter;
                                chatAdapter5.notifyItemRangeChanged(index3 + chatAdapter5.messagesStartRow, groupedMessages4.messages.size());
                            }
                        }
                    }
                }
                if (this.first && this.messages.size() > 0) {
                    this.first = false;
                }
                if (this.messages.isEmpty() && this.currentEncryptedChat == null) {
                    final TLRPC.User currentUser2 = this.currentUser;
                    if (currentUser2 != null && currentUser2.bot && this.botUser == null) {
                        this.botUser = "";
                        this.updateBottomOverlay();
                    }
                }
                if (i == 0 && ((this.mergeDialogId != 0L && n == 0) || (this.currentEncryptedChat != null && !this.endReached[0]))) {
                    this.first = true;
                    final RecyclerListView chatListView2 = this.chatListView;
                    if (chatListView2 != null) {
                        chatListView2.setEmptyView(null);
                    }
                    final FrameLayout emptyViewContainer = this.emptyViewContainer;
                    if (emptyViewContainer != null) {
                        emptyViewContainer.setVisibility(4);
                    }
                }
                else {
                    final FrameLayout progressView = this.progressView;
                    if (progressView != null) {
                        progressView.setVisibility(4);
                    }
                }
                if (i == 0 && this.mergeDialogId != 0L && n == 0) {
                    NotificationCenter.getInstance(super.currentAccount).setAllowedNotificationsDutingAnimation(new int[] { NotificationCenter.chatInfoDidLoad, NotificationCenter.dialogsNeedReload, NotificationCenter.closeChats, NotificationCenter.messagesDidLoad, NotificationCenter.botKeyboardDidLoad, NotificationCenter.userInfoDidLoad, NotificationCenter.needDeleteDialog });
                }
                if (b) {
                    this.showFloatingDateView(false);
                }
                this.checkScrollForLoad(false);
                this.setItemAnimationsEnabled(true);
            }
        }
        else if (i == NotificationCenter.emojiDidLoad) {
            final RecyclerListView chatListView3 = this.chatListView;
            if (chatListView3 != null) {
                chatListView3.invalidateViews();
            }
            final SimpleTextView replyObjectTextView = this.replyObjectTextView;
            if (replyObjectTextView != null) {
                replyObjectTextView.invalidate();
            }
            final TextView alertTextView = this.alertTextView;
            if (alertTextView != null) {
                alertTextView.invalidate();
            }
            final SimpleTextView pinnedMessageTextView = this.pinnedMessageTextView;
            if (pinnedMessageTextView != null) {
                pinnedMessageTextView.invalidate();
            }
            final RecyclerListView mentionListView = this.mentionListView;
            if (mentionListView != null) {
                mentionListView.invalidateViews();
            }
            final RecyclerListView stickersListView = this.stickersListView;
            if (stickersListView != null) {
                stickersListView.invalidateViews();
            }
        }
        else if (i == NotificationCenter.didUpdateConnectionState) {
            if (ConnectionsManager.getInstance(j).getConnectionState() == 3) {
                this.checkAutoDownloadMessages(false);
            }
        }
        else {
            if (i == NotificationCenter.chatOnlineCountDidLoad) {
                final Integer n17 = (Integer)array[0];
                if (this.chatInfo != null) {
                    final TLRPC.Chat currentChat2 = this.currentChat;
                    if (currentChat2 != null) {
                        if (currentChat2.id == n17) {
                            this.chatInfo.online_count = (int)array[1];
                            final ChatAvatarContainer avatarContainer = this.avatarContainer;
                            if (avatarContainer != null) {
                                avatarContainer.updateOnlineCount();
                                this.avatarContainer.updateSubtitle();
                            }
                        }
                    }
                }
                return;
            }
            if (i == NotificationCenter.updateInterfaces) {
                final int intValue4 = (int)array[0];
                j = (intValue4 & 0x1);
                if (j != 0 || (intValue4 & 0x10) != 0x0) {
                    if (this.currentChat != null) {
                        final TLRPC.Chat chat = MessagesController.getInstance(super.currentAccount).getChat(this.currentChat.id);
                        if (chat != null) {
                            this.currentChat = chat;
                        }
                    }
                    else if (this.currentUser != null) {
                        final TLRPC.User user = MessagesController.getInstance(super.currentAccount).getUser(this.currentUser.id);
                        if (user != null) {
                            this.currentUser = user;
                        }
                    }
                    this.updateTitle();
                }
                if ((intValue4 & 0x20) == 0x0 && (intValue4 & 0x4) == 0x0) {
                    i = 0;
                }
                else {
                    if (this.currentChat != null) {
                        final ChatAvatarContainer avatarContainer2 = this.avatarContainer;
                        if (avatarContainer2 != null) {
                            avatarContainer2.updateOnlineCount();
                        }
                    }
                    i = 1;
                }
                if ((intValue4 & 0x2) != 0x0 || (intValue4 & 0x8) != 0x0 || j != 0) {
                    this.checkAndUpdateAvatar();
                    this.updateVisibleRows();
                }
                if ((intValue4 & 0x40) != 0x0) {
                    i = 1;
                }
                j = i;
                if ((intValue4 & 0x2000) != 0x0) {
                    j = i;
                    if (this.currentChat != null) {
                        final TLRPC.Chat chat2 = MessagesController.getInstance(super.currentAccount).getChat(this.currentChat.id);
                        if (chat2 == null) {
                            return;
                        }
                        this.currentChat = chat2;
                        this.updateBottomOverlay();
                        final ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
                        if (chatActivityEnterView != null) {
                            chatActivityEnterView.setDialogId(this.dialog_id, super.currentAccount);
                        }
                        j = 1;
                    }
                }
                if ((intValue4 & 0x100) != 0x0 && this.bottomOverlayChatText2 != null && this.chatInfo != null && ChatObject.isChannel(this.currentChat) && !this.currentChat.megagroup && -this.chatInfo.linked_chat_id != 0) {
                    this.bottomOverlayChatText2.updateCounter();
                }
                final ChatAvatarContainer avatarContainer3 = this.avatarContainer;
                if (avatarContainer3 != null && j != 0) {
                    avatarContainer3.updateSubtitle();
                }
                if ((intValue4 & 0x80) != 0x0) {
                    this.updateContactStatus();
                }
            }
            else if (i == NotificationCenter.didReceiveNewMessages) {
                if ((long)array[0] == this.dialog_id) {
                    final int clientUserId2 = UserConfig.getInstance(super.currentAccount).getClientUserId();
                    final ArrayList list2 = (ArrayList)array[1];
                    if (this.currentEncryptedChat != null && list2.size() == 1) {
                        final MessageObject messageObject11 = list2.get(0);
                        if (this.currentEncryptedChat != null && messageObject11.isOut()) {
                            final TLRPC.MessageAction action3 = messageObject11.messageOwner.action;
                            if (action3 instanceof TLRPC.TL_messageEncryptedAction && action3.encryptedAction instanceof TLRPC.TL_decryptedMessageActionSetMessageTTL && this.getParentActivity() != null && AndroidUtilities.getPeerLayerVersion(this.currentEncryptedChat.layer) < 17) {
                                i = this.currentEncryptedChat.ttl;
                                if (i > 0 && i <= 60) {
                                    final AlertDialog.Builder builder = new AlertDialog.Builder((Context)this.getParentActivity());
                                    builder.setTitle(LocaleController.getString("AppName", 2131558635));
                                    builder.setPositiveButton(LocaleController.getString("OK", 2131560097), null);
                                    final String first_name = this.currentUser.first_name;
                                    builder.setMessage(LocaleController.formatString("CompatibilityChat", 2131559134, first_name, first_name));
                                    this.showDialog(builder.create());
                                }
                            }
                        }
                    }
                    i = 0;
                    int n18 = 0;
                    while (i < list2.size()) {
                        final MessageObject messageObject12 = list2.get(i);
                        if ((j = n18) == 0) {
                            j = n18;
                            if (messageObject12.isOut()) {
                                NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.closeSearchByActiveAction, new Object[0]);
                                j = 1;
                            }
                        }
                        Label_5983: {
                            if (this.currentChat != null) {
                                final TLRPC.MessageAction action4 = messageObject12.messageOwner.action;
                                if (!(action4 instanceof TLRPC.TL_messageActionChatDeleteUser) || action4.user_id != clientUserId2) {
                                    final TLRPC.MessageAction action5 = messageObject12.messageOwner.action;
                                    if (!(action5 instanceof TLRPC.TL_messageActionChatAddUser) || !action5.users.contains(clientUserId2)) {
                                        break Label_5983;
                                    }
                                }
                                final TLRPC.Chat chat3 = MessagesController.getInstance(super.currentAccount).getChat(this.currentChat.id);
                                if (chat3 != null) {
                                    this.currentChat = chat3;
                                    this.checkActionBarMenu();
                                    this.updateBottomOverlay();
                                    final ChatAvatarContainer avatarContainer4 = this.avatarContainer;
                                    if (avatarContainer4 != null) {
                                        avatarContainer4.updateSubtitle();
                                    }
                                }
                            }
                            else if (this.inlineReturn != 0L && messageObject12.messageOwner.reply_markup != null) {
                                for (int l = 0; l < messageObject12.messageOwner.reply_markup.rows.size(); ++l) {
                                    final TLRPC.TL_keyboardButtonRow tl_keyboardButtonRow = messageObject12.messageOwner.reply_markup.rows.get(l);
                                    for (int index4 = 0; index4 < tl_keyboardButtonRow.buttons.size(); ++index4) {
                                        final TLRPC.KeyboardButton keyboardButton = tl_keyboardButtonRow.buttons.get(index4);
                                        if (keyboardButton instanceof TLRPC.TL_keyboardButtonSwitchInline) {
                                            this.processSwitchButton((TLRPC.TL_keyboardButtonSwitchInline)keyboardButton);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        final int reply_to_msg_id = messageObject12.messageOwner.reply_to_msg_id;
                        if (reply_to_msg_id != 0 && messageObject12.replyMessageObject == null) {
                            messageObject12.replyMessageObject = (MessageObject)this.messagesDict[0].get(reply_to_msg_id);
                            final TLRPC.MessageAction action6 = messageObject12.messageOwner.action;
                            if (action6 instanceof TLRPC.TL_messageActionPinMessage) {
                                messageObject12.generatePinMessageText(null, null);
                            }
                            else if (action6 instanceof TLRPC.TL_messageActionGameScore) {
                                messageObject12.generateGameMessageText(null);
                            }
                            else if (action6 instanceof TLRPC.TL_messageActionPaymentSent) {
                                messageObject12.generatePaymentSentMessageText(null);
                            }
                            if (messageObject12.isMegagroup()) {
                                final MessageObject replyMessageObject = messageObject12.replyMessageObject;
                                if (replyMessageObject != null) {
                                    final TLRPC.Message messageOwner = replyMessageObject.messageOwner;
                                    if (messageOwner != null) {
                                        messageOwner.flags |= Integer.MIN_VALUE;
                                    }
                                }
                            }
                        }
                        ++i;
                        n18 = j;
                    }
                    if (!this.forwardEndReached[0]) {
                        if (this.currentEncryptedChat != null) {
                            i = Integer.MAX_VALUE;
                        }
                        else {
                            i = Integer.MIN_VALUE;
                        }
                        int n19 = i;
                        int index5 = 0;
                        j = 0;
                        int a = Integer.MIN_VALUE;
                        i = 0;
                        while (index5 < list2.size()) {
                            final MessageObject needAnimateToMessage3 = list2.get(index5);
                            final TLRPC.User currentUser3 = this.currentUser;
                            if (currentUser3 != null && ((currentUser3.bot && needAnimateToMessage3.isOut()) || this.currentUser.id == clientUserId2)) {
                                needAnimateToMessage3.setIsRead();
                            }
                            final TLRPC.MessageAction action7 = needAnimateToMessage3.messageOwner.action;
                            final ChatAvatarContainer avatarContainer5 = this.avatarContainer;
                            if (avatarContainer5 != null && this.currentEncryptedChat != null && action7 instanceof TLRPC.TL_messageEncryptedAction) {
                                final TLRPC.DecryptedMessageAction encryptedAction = action7.encryptedAction;
                                if (encryptedAction instanceof TLRPC.TL_decryptedMessageActionSetMessageTTL) {
                                    avatarContainer5.setTime(((TLRPC.TL_decryptedMessageActionSetMessageTTL)encryptedAction).ttl_seconds);
                                }
                            }
                            if (action7 instanceof TLRPC.TL_messageActionChatMigrateTo) {
                                this.migrateToNewChat(needAnimateToMessage3);
                                return;
                            }
                            final TLRPC.Chat currentChat3 = this.currentChat;
                            int n20 = i;
                            Label_6352: {
                                if (currentChat3 != null) {
                                    n20 = i;
                                    if (currentChat3.megagroup) {
                                        if (!(action7 instanceof TLRPC.TL_messageActionChatAddUser)) {
                                            n20 = i;
                                            if (!(action7 instanceof TLRPC.TL_messageActionChatDeleteUser)) {
                                                break Label_6352;
                                            }
                                        }
                                        n20 = 1;
                                    }
                                }
                            }
                            if (index5 == 0 && needAnimateToMessage3.messageOwner.id < 0 && needAnimateToMessage3.type == 5) {
                                this.needAnimateToMessage = needAnimateToMessage3;
                            }
                            if (needAnimateToMessage3.isOut() && needAnimateToMessage3.isSending()) {
                                this.scrollToLastMessage(false);
                                return;
                            }
                            int n21 = j;
                            int n22 = a;
                            int n23 = n19;
                            Label_6716: {
                                if (needAnimateToMessage3.type >= 0) {
                                    if (this.messagesDict[0].indexOfKey(needAnimateToMessage3.getId()) >= 0) {
                                        n21 = j;
                                        n22 = a;
                                        n23 = n19;
                                    }
                                    else {
                                        final TLRPC.Chat currentChat4 = this.currentChat;
                                        if (currentChat4 != null && currentChat4.creator) {
                                            n21 = j;
                                            n22 = a;
                                            n23 = n19;
                                            if (action7 instanceof TLRPC.TL_messageActionChatCreate) {
                                                break Label_6716;
                                            }
                                            if (action7 instanceof TLRPC.TL_messageActionChatEditPhoto && this.messages.size() < 4) {
                                                n21 = j;
                                                n22 = a;
                                                n23 = n19;
                                                break Label_6716;
                                            }
                                        }
                                        if (action7 instanceof TLRPC.TL_messageActionChannelMigrateFrom) {
                                            n21 = j;
                                            n22 = a;
                                            n23 = n19;
                                        }
                                        else {
                                            this.addToPolls(needAnimateToMessage3, null);
                                            needAnimateToMessage3.checkLayout();
                                            final int max = Math.max(a, needAnimateToMessage3.messageOwner.date);
                                            if (needAnimateToMessage3.getId() > 0) {
                                                i = Math.max(needAnimateToMessage3.getId(), n19);
                                                this.last_message_id = Math.max(this.last_message_id, needAnimateToMessage3.getId());
                                            }
                                            else {
                                                i = n19;
                                                if (this.currentEncryptedChat != null) {
                                                    i = Math.min(needAnimateToMessage3.getId(), n19);
                                                    this.last_message_id = Math.min(this.last_message_id, needAnimateToMessage3.getId());
                                                }
                                            }
                                            if (needAnimateToMessage3.messageOwner.mentioned && needAnimateToMessage3.isContentUnread()) {
                                                ++this.newMentionsCount;
                                            }
                                            ++this.newUnreadMessageCount;
                                            final int type = needAnimateToMessage3.type;
                                            if (type != 10) {
                                                n21 = j;
                                                n22 = max;
                                                n23 = i;
                                                if (type != 11) {
                                                    break Label_6716;
                                                }
                                            }
                                            n21 = 1;
                                            n23 = i;
                                            n22 = max;
                                        }
                                    }
                                }
                            }
                            ++index5;
                            j = n21;
                            a = n22;
                            n19 = n23;
                            i = n20;
                        }
                        if (this.newUnreadMessageCount != 0) {
                            final TextView pagedownButtonCounter3 = this.pagedownButtonCounter;
                            if (pagedownButtonCounter3 != null) {
                                pagedownButtonCounter3.setVisibility(0);
                                final int prevSetUnreadCount = this.prevSetUnreadCount;
                                final int newUnreadMessageCount = this.newUnreadMessageCount;
                                if (prevSetUnreadCount != newUnreadMessageCount) {
                                    this.prevSetUnreadCount = newUnreadMessageCount;
                                    this.pagedownButtonCounter.setText((CharSequence)String.format("%d", newUnreadMessageCount));
                                }
                            }
                        }
                        if (this.newMentionsCount != 0) {
                            final TextView mentiondownButtonCounter3 = this.mentiondownButtonCounter;
                            if (mentiondownButtonCounter3 != null) {
                                mentiondownButtonCounter3.setVisibility(0);
                                this.mentiondownButtonCounter.setText((CharSequence)String.format("%d", this.newMentionsCount));
                                this.showMentionDownButton(true, true);
                            }
                        }
                        this.updateVisibleRows();
                    }
                    else {
                        if (BuildVars.LOGS_ENABLED) {
                            final StringBuilder sb = new StringBuilder();
                            sb.append("received new messages ");
                            sb.append(list2.size());
                            sb.append(" in dialog ");
                            sb.append(this.dialog_id);
                            FileLog.d(sb.toString());
                        }
                        int index6 = 0;
                        HashMap<String, ArrayList<MessageObject>> hashMap = null;
                        LongSparseArray longSparseArray9 = null;
                        j = 0;
                        int n24 = 0;
                        int n25 = 0;
                        i = clientUserId2;
                    Label_7655_Outer:
                        while (index6 < list2.size()) {
                            final MessageObject element = list2.get(index6);
                            if (this.isSecretChat()) {
                                this.checkSecretMessageForLocation(element);
                            }
                            final TLRPC.User currentUser4 = this.currentUser;
                            if (currentUser4 != null && ((currentUser4.bot && element.isOut()) || this.currentUser.id == i)) {
                                element.setIsRead();
                            }
                            final TLRPC.MessageAction action8 = element.messageOwner.action;
                            final ChatAvatarContainer avatarContainer6 = this.avatarContainer;
                            if (avatarContainer6 != null && this.currentEncryptedChat != null && action8 instanceof TLRPC.TL_messageEncryptedAction) {
                                final TLRPC.DecryptedMessageAction encryptedAction2 = action8.encryptedAction;
                                if (encryptedAction2 instanceof TLRPC.TL_decryptedMessageActionSetMessageTTL) {
                                    avatarContainer6.setTime(((TLRPC.TL_decryptedMessageActionSetMessageTTL)encryptedAction2).ttl_seconds);
                                }
                            }
                            int n32 = 0;
                            Label_8665: {
                                LongSparseArray longSparseArray11 = null;
                                int n30 = 0;
                                int n31 = 0;
                                Label_8648: {
                                    Label_8635: {
                                        if (element.type >= 0) {
                                            if (this.messagesDict[0].indexOfKey(element.getId()) < 0) {
                                                final TLRPC.Chat currentChat5 = this.currentChat;
                                                if (currentChat5 != null && currentChat5.creator) {
                                                    if (action8 instanceof TLRPC.TL_messageActionChatCreate) {
                                                        break Label_8635;
                                                    }
                                                    if (action8 instanceof TLRPC.TL_messageActionChatEditPhoto && this.messages.size() < 4) {
                                                        break Label_8635;
                                                    }
                                                }
                                                if (!(action8 instanceof TLRPC.TL_messageActionChannelMigrateFrom)) {
                                                    this.addToPolls(element, null);
                                                    if (index6 == 0 && element.messageOwner.id < 0 && element.type == 5) {
                                                        this.animatingMessageObjects.add(element);
                                                    }
                                                    MessageObject.GroupedMessages groupedMessages6;
                                                    if (element.hasValidGroupId()) {
                                                        MessageObject.GroupedMessages groupedMessages5;
                                                        if ((groupedMessages5 = (MessageObject.GroupedMessages)this.groupedMessagesMap.get(element.getGroupId())) == null) {
                                                            groupedMessages5 = new MessageObject.GroupedMessages();
                                                            groupedMessages5.groupId = element.getGroupId();
                                                            this.groupedMessagesMap.put(groupedMessages5.groupId, (Object)groupedMessages5);
                                                        }
                                                        groupedMessages6 = groupedMessages5;
                                                        LongSparseArray longSparseArray10;
                                                        if ((longSparseArray10 = longSparseArray9) == null) {
                                                            longSparseArray10 = new LongSparseArray();
                                                        }
                                                        longSparseArray10.put(groupedMessages6.groupId, (Object)groupedMessages6);
                                                        groupedMessages6.messages.add(element);
                                                        longSparseArray9 = longSparseArray10;
                                                    }
                                                    else {
                                                        groupedMessages6 = null;
                                                    }
                                                    int n26 = 0;
                                                    Label_7409: {
                                                        if (groupedMessages6 != null) {
                                                            MessageObject o;
                                                            if (groupedMessages6.messages.size() > 1) {
                                                                final ArrayList<MessageObject> messages8 = groupedMessages6.messages;
                                                                o = messages8.get(messages8.size() - 2);
                                                            }
                                                            else {
                                                                o = null;
                                                            }
                                                            if (o != null) {
                                                                n26 = this.messages.indexOf(o);
                                                                break Label_7409;
                                                            }
                                                        }
                                                        n26 = -1;
                                                    }
                                                    Label_7704: {
                                                        if (n26 == -1) {
                                                            if (element.messageOwner.id >= 0 && !this.messages.isEmpty()) {
                                                                while (true) {
                                                                    for (int size2 = this.messages.size(), index7 = 0; index7 < size2; ++index7) {
                                                                        final MessageObject messageObject13 = this.messages.get(index7);
                                                                        if (messageObject13.type >= 0) {
                                                                            final TLRPC.Message messageOwner2 = messageObject13.messageOwner;
                                                                            if (messageOwner2.date > 0) {
                                                                                final int id = messageOwner2.id;
                                                                                Label_7548: {
                                                                                    if (id > 0) {
                                                                                        final int id2 = element.messageOwner.id;
                                                                                        if (id2 > 0 && id < id2) {
                                                                                            break Label_7548;
                                                                                        }
                                                                                    }
                                                                                    if (messageObject13.messageOwner.date >= element.messageOwner.date) {
                                                                                        continue Label_7655_Outer;
                                                                                    }
                                                                                }
                                                                                MessageObject.GroupedMessages groupedMessages8 = null;
                                                                                Label_7602: {
                                                                                    if (messageObject13.getGroupId() != 0L) {
                                                                                        final MessageObject.GroupedMessages groupedMessages7 = (MessageObject.GroupedMessages)this.groupedMessagesMap.get(messageObject13.getGroupId());
                                                                                        if ((groupedMessages8 = groupedMessages7) == null) {
                                                                                            break Label_7602;
                                                                                        }
                                                                                        groupedMessages8 = groupedMessages7;
                                                                                        if (groupedMessages7.messages.size() != 0) {
                                                                                            break Label_7602;
                                                                                        }
                                                                                    }
                                                                                    groupedMessages8 = null;
                                                                                }
                                                                                if (groupedMessages8 != null) {
                                                                                    final ArrayList<MessageObject> messages9 = this.messages;
                                                                                    final ArrayList<MessageObject> messages10 = groupedMessages8.messages;
                                                                                    index7 = messages9.indexOf(messages10.get(messages10.size() - 1));
                                                                                }
                                                                                final int n27 = i;
                                                                                if (index7 != -1) {
                                                                                    n26 = index7;
                                                                                    i = n27;
                                                                                    if (index7 <= this.messages.size()) {
                                                                                        break Label_7704;
                                                                                    }
                                                                                }
                                                                                n26 = this.messages.size();
                                                                                i = n27;
                                                                                break Label_7704;
                                                                            }
                                                                        }
                                                                    }
                                                                    int index7 = n26;
                                                                    continue;
                                                                }
                                                            }
                                                            n26 = 0;
                                                        }
                                                    }
                                                    HashMap<String, ArrayList<MessageObject>> hashMap2 = hashMap;
                                                    if (this.currentEncryptedChat != null) {
                                                        final TLRPC.MessageMedia media = element.messageOwner.media;
                                                        hashMap2 = hashMap;
                                                        if (media instanceof TLRPC.TL_messageMediaWebPage) {
                                                            hashMap2 = hashMap;
                                                            if (media.webpage instanceof TLRPC.TL_webPageUrlPending) {
                                                                if ((hashMap2 = hashMap) == null) {
                                                                    hashMap2 = new HashMap<String, ArrayList<MessageObject>>();
                                                                }
                                                                ArrayList<MessageObject> value2;
                                                                if ((value2 = hashMap2.get(element.messageOwner.media.webpage.url)) == null) {
                                                                    value2 = new ArrayList<MessageObject>();
                                                                    hashMap2.put(element.messageOwner.media.webpage.url, value2);
                                                                }
                                                                value2.add(element);
                                                            }
                                                        }
                                                    }
                                                    element.checkLayout();
                                                    if (action8 instanceof TLRPC.TL_messageActionChatMigrateTo) {
                                                        this.migrateToNewChat(element);
                                                        if (longSparseArray9 != null) {
                                                            for (i = 0; i < longSparseArray9.size(); ++i) {
                                                                ((MessageObject.GroupedMessages)longSparseArray9.valueAt(i)).calculate();
                                                            }
                                                        }
                                                        return;
                                                    }
                                                    final TLRPC.Chat currentChat6 = this.currentChat;
                                                    int n28;
                                                    if (currentChat6 != null && currentChat6.megagroup && (action8 instanceof TLRPC.TL_messageActionChatAddUser || action8 instanceof TLRPC.TL_messageActionChatDeleteUser)) {
                                                        n28 = 1;
                                                    }
                                                    else {
                                                        n28 = j;
                                                    }
                                                    final int[] minDate2 = this.minDate;
                                                    if (minDate2[0] == 0 || element.messageOwner.date < minDate2[0]) {
                                                        this.minDate[0] = element.messageOwner.date;
                                                    }
                                                    if (element.isOut()) {
                                                        this.removeUnreadPlane(true);
                                                        n25 = 1;
                                                    }
                                                    if (element.getId() > 0) {
                                                        this.maxMessageId[0] = Math.min(element.getId(), this.maxMessageId[0]);
                                                        this.minMessageId[0] = Math.max(element.getId(), this.minMessageId[0]);
                                                    }
                                                    else if (this.currentEncryptedChat != null) {
                                                        this.maxMessageId[0] = Math.max(element.getId(), this.maxMessageId[0]);
                                                        this.minMessageId[0] = Math.min(element.getId(), this.minMessageId[0]);
                                                    }
                                                    final int[] maxDate2 = this.maxDate;
                                                    maxDate2[0] = Math.max(maxDate2[0], element.messageOwner.date);
                                                    this.messagesDict[0].put(element.getId(), (Object)element);
                                                    final ArrayList<MessageObject> list3 = this.messagesByDays.get(element.dateKey);
                                                    if ((j = n26) > this.messages.size()) {
                                                        j = this.messages.size();
                                                    }
                                                    ArrayList<MessageObject> list4;
                                                    if ((list4 = list3) == null) {
                                                        final ArrayList<MessageObject> value3 = new ArrayList<MessageObject>();
                                                        this.messagesByDays.put(element.dateKey, value3);
                                                        final TLRPC.TL_message tl_message4 = new TLRPC.TL_message();
                                                        tl_message4.message = LocaleController.formatDateChat(element.messageOwner.date);
                                                        tl_message4.id = 0;
                                                        tl_message4.date = element.messageOwner.date;
                                                        final MessageObject element2 = new MessageObject(super.currentAccount, tl_message4, false);
                                                        element2.type = 10;
                                                        element2.contentType = 1;
                                                        element2.isDateObject = true;
                                                        this.messages.add(j, element2);
                                                        final ChatActivityAdapter chatAdapter6 = this.chatAdapter;
                                                        list4 = value3;
                                                        if (chatAdapter6 != null) {
                                                            chatAdapter6.notifyItemInserted(j);
                                                            list4 = value3;
                                                        }
                                                    }
                                                    int n29 = j;
                                                    int index8 = 0;
                                                    Label_8493: {
                                                        if (!element.isOut()) {
                                                            n29 = j;
                                                            if (this.paused && (n29 = j) == 0) {
                                                                index8 = j;
                                                                if (!this.scrollToTopUnReadOnResume) {
                                                                    final MessageObject unreadMessageObject2 = this.unreadMessageObject;
                                                                    index8 = j;
                                                                    if (unreadMessageObject2 != null) {
                                                                        this.removeMessageObject(unreadMessageObject2);
                                                                        if ((index8 = j) > 0) {
                                                                            index8 = j - 1;
                                                                        }
                                                                        this.unreadMessageObject = null;
                                                                    }
                                                                }
                                                                n29 = index8;
                                                                if (this.unreadMessageObject == null) {
                                                                    final TLRPC.TL_message tl_message5 = new TLRPC.TL_message();
                                                                    tl_message5.message = "";
                                                                    tl_message5.id = 0;
                                                                    final MessageObject messageObject14 = new MessageObject(super.currentAccount, tl_message5, false);
                                                                    messageObject14.type = 6;
                                                                    messageObject14.contentType = 2;
                                                                    this.messages.add(0, messageObject14);
                                                                    final ChatActivityAdapter chatAdapter7 = this.chatAdapter;
                                                                    if (chatAdapter7 != null) {
                                                                        chatAdapter7.notifyItemInserted(0);
                                                                    }
                                                                    this.unreadMessageObject = messageObject14;
                                                                    this.scrollToMessage = this.unreadMessageObject;
                                                                    this.scrollToMessagePosition = -10000;
                                                                    this.scrollToTopUnReadOnResume = true;
                                                                    break Label_8493;
                                                                }
                                                            }
                                                        }
                                                        index8 = n29;
                                                    }
                                                    list4.add(0, element);
                                                    this.messages.add(index8, element);
                                                    final ChatActivityAdapter chatAdapter8 = this.chatAdapter;
                                                    if (chatAdapter8 != null) {
                                                        chatAdapter8.notifyItemChanged(index8);
                                                        this.chatAdapter.notifyItemInserted(index8);
                                                    }
                                                    if (!element.isOut() && element.messageOwner.mentioned && element.isContentUnread()) {
                                                        ++this.newMentionsCount;
                                                    }
                                                    ++this.newUnreadMessageCount;
                                                    final int type2 = element.type;
                                                    if (type2 != 10) {
                                                        hashMap = hashMap2;
                                                        longSparseArray11 = longSparseArray9;
                                                        n30 = n28;
                                                        n31 = n25;
                                                        j = i;
                                                        if (type2 != 11) {
                                                            break Label_8648;
                                                        }
                                                    }
                                                    n32 = 1;
                                                    hashMap = hashMap2;
                                                    j = n28;
                                                    break Label_8665;
                                                }
                                            }
                                        }
                                    }
                                    n30 = j;
                                    j = i;
                                    n31 = n25;
                                    longSparseArray11 = longSparseArray9;
                                }
                                i = j;
                                n25 = n31;
                                j = n30;
                                longSparseArray9 = longSparseArray11;
                                n32 = n24;
                            }
                            ++index6;
                            n24 = n32;
                        }
                        if (hashMap != null) {
                            MessagesController.getInstance(super.currentAccount).reloadWebPages(this.dialog_id, hashMap);
                        }
                        if (longSparseArray9 != null) {
                            MessageObject.GroupedMessages groupedMessages9;
                            int size3;
                            int size4;
                            ArrayList<MessageObject> messages11;
                            ArrayList<MessageObject> messages12;
                            int index9;
                            for (i = 0; i < longSparseArray9.size(); ++i) {
                                groupedMessages9 = (MessageObject.GroupedMessages)longSparseArray9.valueAt(i);
                                size3 = groupedMessages9.posArray.size();
                                groupedMessages9.calculate();
                                size4 = groupedMessages9.posArray.size();
                                if (size4 - size3 > 0 && this.chatAdapter != null) {
                                    messages11 = this.messages;
                                    messages12 = groupedMessages9.messages;
                                    index9 = messages11.indexOf(messages12.get(messages12.size() - 1));
                                    if (index9 >= 0) {
                                        this.chatAdapter.notifyItemRangeChanged(index9, size4);
                                    }
                                }
                            }
                        }
                        final FrameLayout progressView2 = this.progressView;
                        if (progressView2 != null) {
                            progressView2.setVisibility(4);
                        }
                        if (this.chatAdapter == null) {
                            this.scrollToTopOnResume = true;
                        }
                        if (this.chatListView != null && this.chatAdapter != null) {
                            if ((i = this.chatLayoutManager.findFirstVisibleItemPosition()) == -1) {
                                i = 0;
                            }
                            final View viewByPosition5 = this.chatLayoutManager.findViewByPosition(i);
                            int n33;
                            if (viewByPosition5 != null) {
                                n33 = viewByPosition5.getBottom() - this.chatListView.getMeasuredHeight();
                            }
                            else {
                                n33 = 0;
                            }
                            if ((i == 0 && n33 <= AndroidUtilities.dp(5.0f)) || n25 != 0) {
                                this.newUnreadMessageCount = 0;
                                if (!this.firstLoading) {
                                    if (this.paused) {
                                        this.scrollToTopOnResume = true;
                                    }
                                    else {
                                        this.forceScrollToTop = true;
                                        this.moveScrollToLastMessage();
                                    }
                                }
                            }
                            else {
                                if (this.newUnreadMessageCount != 0) {
                                    final TextView pagedownButtonCounter4 = this.pagedownButtonCounter;
                                    if (pagedownButtonCounter4 != null) {
                                        pagedownButtonCounter4.setVisibility(0);
                                        i = this.prevSetUnreadCount;
                                        final int newUnreadMessageCount2 = this.newUnreadMessageCount;
                                        if (i != newUnreadMessageCount2) {
                                            this.prevSetUnreadCount = newUnreadMessageCount2;
                                            this.pagedownButtonCounter.setText((CharSequence)String.format("%d", newUnreadMessageCount2));
                                        }
                                    }
                                }
                                this.showPagedownButton(true, true);
                            }
                            if (this.newMentionsCount != 0) {
                                final TextView mentiondownButtonCounter4 = this.mentiondownButtonCounter;
                                if (mentiondownButtonCounter4 != null) {
                                    mentiondownButtonCounter4.setVisibility(0);
                                    this.mentiondownButtonCounter.setText((CharSequence)String.format("%d", this.newMentionsCount));
                                    this.showMentionDownButton(true, true);
                                }
                            }
                        }
                        else {
                            this.scrollToTopOnResume = true;
                        }
                        i = j;
                        j = n24;
                    }
                    if (!this.messages.isEmpty()) {
                        final String botUser = this.botUser;
                        if (botUser != null && botUser.length() == 0) {
                            this.botUser = null;
                            this.updateBottomOverlay();
                        }
                    }
                    if (j != 0) {
                        this.updateTitle();
                        this.checkAndUpdateAvatar();
                    }
                    if (i != 0) {
                        MessagesController.getInstance(super.currentAccount).loadFullChat(this.currentChat.id, 0, true);
                    }
                }
            }
            else if (i == NotificationCenter.closeChats) {
                if (array != null && array.length > 0) {
                    if ((long)array[0] == this.dialog_id) {
                        this.finishFragment();
                    }
                }
                else {
                    this.removeSelfFromStack();
                }
            }
            else if (i == NotificationCenter.messagesRead) {
                final SparseLongArray sparseLongArray = (SparseLongArray)array[0];
                final SparseLongArray sparseLongArray2 = (SparseLongArray)array[1];
                Label_9472: {
                    if (sparseLongArray != null) {
                        if (this.bottomOverlayChatText2 != null && this.chatInfo != null && ChatObject.isChannel(this.currentChat) && !this.currentChat.megagroup && -this.chatInfo.linked_chat_id != 0) {
                            this.bottomOverlayChatText2.updateCounter();
                        }
                        int key;
                        long value4;
                        int size5;
                        MessageObject messageObject15;
                        int n34;
                        for (j = sparseLongArray.size(), i = 0; i < j; ++i) {
                            key = sparseLongArray.keyAt(i);
                            value4 = sparseLongArray.get(key);
                            if (key == this.dialog_id) {
                                size5 = this.messages.size();
                                j = 0;
                                i = 0;
                                while (j < size5) {
                                    messageObject15 = this.messages.get(j);
                                    n34 = i;
                                    if (!messageObject15.isOut()) {
                                        n34 = i;
                                        if (messageObject15.getId() > 0) {
                                            n34 = i;
                                            if (messageObject15.getId() <= (int)value4) {
                                                if (!messageObject15.isUnread()) {
                                                    break;
                                                }
                                                messageObject15.setIsRead();
                                                --this.newUnreadMessageCount;
                                                n34 = 1;
                                            }
                                        }
                                    }
                                    ++j;
                                    i = n34;
                                }
                                this.removeUnreadPlane(false);
                                break Label_9472;
                            }
                        }
                    }
                    i = 0;
                }
                if (i != 0) {
                    if (this.newUnreadMessageCount < 0) {
                        this.newUnreadMessageCount = 0;
                    }
                    final TextView pagedownButtonCounter5 = this.pagedownButtonCounter;
                    if (pagedownButtonCounter5 != null) {
                        final int prevSetUnreadCount2 = this.prevSetUnreadCount;
                        j = this.newUnreadMessageCount;
                        if (prevSetUnreadCount2 != j) {
                            this.prevSetUnreadCount = j;
                            pagedownButtonCounter5.setText((CharSequence)String.format("%d", j));
                        }
                        if (this.newUnreadMessageCount <= 0) {
                            if (this.pagedownButtonCounter.getVisibility() != 4) {
                                this.pagedownButtonCounter.setVisibility(4);
                            }
                        }
                        else if (this.pagedownButtonCounter.getVisibility() != 0) {
                            this.pagedownButtonCounter.setVisibility(0);
                        }
                    }
                }
                j = i;
                Label_9734: {
                    if (sparseLongArray2 != null) {
                        final int size6 = sparseLongArray2.size();
                        int n35 = 0;
                        while (true) {
                            j = i;
                            if (n35 >= size6) {
                                break;
                            }
                            j = sparseLongArray2.keyAt(n35);
                            final int n36 = (int)sparseLongArray2.get(j);
                            if (j != this.dialog_id) {
                                ++n35;
                            }
                            else {
                                final int size7 = this.messages.size();
                                int index10 = 0;
                                while (true) {
                                    j = i;
                                    if (index10 >= size7) {
                                        break Label_9734;
                                    }
                                    final MessageObject messageObject16 = this.messages.get(index10);
                                    j = i;
                                    if (messageObject16.isOut()) {
                                        j = i;
                                        if (messageObject16.getId() > 0) {
                                            j = i;
                                            if (messageObject16.getId() <= n36) {
                                                if (!messageObject16.isUnread()) {
                                                    j = i;
                                                    break Label_9734;
                                                }
                                                messageObject16.setIsRead();
                                                j = 1;
                                            }
                                        }
                                    }
                                    ++index10;
                                    i = j;
                                }
                            }
                        }
                    }
                }
                if (j != 0) {
                    this.updateVisibleRows();
                }
            }
            else if (i == NotificationCenter.historyCleared) {
                if ((long)array[0] != this.dialog_id) {
                    return;
                }
                final int intValue5 = (int)array[1];
                i = 0;
                j = 0;
                while (i < this.messages.size()) {
                    final MessageObject o2 = this.messages.get(i);
                    final int id3 = o2.getId();
                    if (id3 > 0) {
                        if (id3 <= intValue5) {
                            final TLRPC.ChatFull chatInfo = this.chatInfo;
                            if (chatInfo != null && chatInfo.pinned_msg_id == id3) {
                                this.pinnedMessageObject = null;
                                chatInfo.pinned_msg_id = 0;
                                MessagesStorage.getInstance(super.currentAccount).updateChatPinnedMessage(this.chatInfo.id, 0);
                                this.updatePinnedMessageView(true);
                            }
                            else {
                                final TLRPC.UserFull userInfo = this.userInfo;
                                if (userInfo != null && userInfo.pinned_msg_id == id3) {
                                    this.pinnedMessageObject = null;
                                    userInfo.pinned_msg_id = 0;
                                    MessagesStorage.getInstance(super.currentAccount).updateUserPinnedMessage(this.chatInfo.id, 0);
                                    this.updatePinnedMessageView(true);
                                }
                            }
                            this.messages.remove(i);
                            j = i - 1;
                            this.messagesDict[0].remove(id3);
                            final ArrayList<MessageObject> list5 = this.messagesByDays.get(o2.dateKey);
                            i = j;
                            if (list5 != null) {
                                list5.remove(o2);
                                i = j;
                                if (list5.isEmpty()) {
                                    this.messagesByDays.remove(o2.dateKey);
                                    if ((i = j) >= 0 && (i = j) < this.messages.size()) {
                                        this.messages.remove(j);
                                        i = j - 1;
                                    }
                                }
                            }
                            j = 1;
                        }
                    }
                    ++i;
                }
                if (this.messages.isEmpty()) {
                    if (!this.endReached[0] && !this.loading) {
                        final FrameLayout progressView3 = this.progressView;
                        if (progressView3 != null) {
                            progressView3.setVisibility(4);
                        }
                        final RecyclerListView chatListView4 = this.chatListView;
                        if (chatListView4 != null) {
                            chatListView4.setEmptyView(null);
                        }
                        if (this.currentEncryptedChat == null) {
                            final int[] maxMessageId = this.maxMessageId;
                            maxMessageId[0] = (maxMessageId[1] = Integer.MAX_VALUE);
                            final int[] minMessageId = this.minMessageId;
                            minMessageId[0] = (minMessageId[1] = Integer.MIN_VALUE);
                        }
                        else {
                            final int[] maxMessageId2 = this.maxMessageId;
                            maxMessageId2[0] = (maxMessageId2[1] = Integer.MIN_VALUE);
                            final int[] minMessageId2 = this.minMessageId;
                            minMessageId2[0] = (minMessageId2[1] = Integer.MAX_VALUE);
                        }
                        final int[] maxDate3 = this.maxDate;
                        maxDate3[0] = (maxDate3[1] = Integer.MIN_VALUE);
                        final int[] minDate3 = this.minDate;
                        minDate3[minDate3[1] = 0] = 0;
                        this.waitingForLoad.add(this.lastLoadIndex);
                        final MessagesController instance2 = MessagesController.getInstance(super.currentAccount);
                        final long dialog_id = this.dialog_id;
                        final boolean b3 = this.cacheEndReached[0];
                        final int n37 = this.minDate[0];
                        i = super.classGuid;
                        instance2.loadMessages(dialog_id, 30, 0, 0, b3 ^ true, n37, i, 0, 0, ChatObject.isChannel(this.currentChat), this.lastLoadIndex++);
                        this.loading = true;
                    }
                    else {
                        if (this.botButtons != null) {
                            this.botButtons = null;
                            final ChatActivityEnterView chatActivityEnterView2 = this.chatActivityEnterView;
                            if (chatActivityEnterView2 != null) {
                                chatActivityEnterView2.setButtons(null, false);
                            }
                        }
                        if (this.currentEncryptedChat == null) {
                            final TLRPC.User currentUser5 = this.currentUser;
                            if (currentUser5 != null && currentUser5.bot && this.botUser == null) {
                                this.botUser = "";
                                this.updateBottomOverlay();
                            }
                        }
                    }
                }
                this.showPagedownButton(false, true);
                this.showMentionDownButton(false, true);
                if (j != 0 && this.chatAdapter != null) {
                    this.removeUnreadPlane(true);
                    this.chatAdapter.notifyDataSetChanged();
                }
            }
            else if (i == NotificationCenter.messagesDeleted) {
                final ArrayList list6 = (ArrayList)array[0];
                final int intValue6 = (int)array[1];
                Label_10512: {
                    if (ChatObject.isChannel(this.currentChat)) {
                        if (intValue6 == 0 && this.mergeDialogId != 0L) {
                            j = 1;
                            break Label_10512;
                        }
                        if (intValue6 != this.currentChat.id) {
                            return;
                        }
                    }
                    else if (intValue6 != 0) {
                        return;
                    }
                    j = 0;
                }
                final int size8 = list6.size();
                int index11 = 0;
                boolean b4 = false;
                LongSparseArray longSparseArray12 = null;
                boolean b5 = false;
                i = 0;
                while (index11 < size8) {
                    final Integer n38 = list6.get(index11);
                    final MessageObject o3 = (MessageObject)this.messagesDict[j].get((int)n38);
                    Label_10694: {
                        if (j == 0) {
                            final TLRPC.ChatFull chatInfo2 = this.chatInfo;
                            if (chatInfo2 == null || chatInfo2.pinned_msg_id != n38) {
                                final TLRPC.UserFull userInfo2 = this.userInfo;
                                if (userInfo2 == null || userInfo2.pinned_msg_id != n38) {
                                    break Label_10694;
                                }
                            }
                            this.pinnedMessageObject = null;
                            final TLRPC.ChatFull chatInfo3 = this.chatInfo;
                            if (chatInfo3 != null) {
                                chatInfo3.pinned_msg_id = 0;
                            }
                            else {
                                final TLRPC.UserFull userInfo3 = this.userInfo;
                                if (userInfo3 != null) {
                                    userInfo3.pinned_msg_id = 0;
                                }
                            }
                            MessagesStorage.getInstance(super.currentAccount).updateChatPinnedMessage(intValue6, 0);
                            this.updatePinnedMessageView(true);
                        }
                    }
                    if (o3 != null) {
                        if (this.editingMessageObject == o3) {
                            this.hideFieldPanel(true);
                        }
                        final int index12 = this.messages.indexOf(o3);
                        if (index12 != -1) {
                            this.removeUnreadPlane(false);
                            if (this.selectedMessagesIds[j].indexOfKey((int)n38) >= 0) {
                                b4 = (index11 == size8 - 1);
                                this.addToSelectedMessages(o3, false, b4);
                                i = 1;
                            }
                            final MessageObject messageObject17 = this.messages.remove(index12);
                            if (messageObject17.getGroupId() != 0L) {
                                final MessageObject.GroupedMessages groupedMessages10 = (MessageObject.GroupedMessages)this.groupedMessagesMap.get(messageObject17.getGroupId());
                                if (groupedMessages10 != null) {
                                    LongSparseArray longSparseArray13;
                                    if ((longSparseArray13 = longSparseArray12) == null) {
                                        longSparseArray13 = new LongSparseArray();
                                    }
                                    longSparseArray13.put(groupedMessages10.groupId, (Object)groupedMessages10);
                                    groupedMessages10.messages.remove(o3);
                                    longSparseArray12 = longSparseArray13;
                                }
                            }
                            this.messagesDict[j].remove((int)n38);
                            final ArrayList<MessageObject> list7 = this.messagesByDays.get(o3.dateKey);
                            if (list7 != null) {
                                list7.remove(o3);
                                if (list7.isEmpty()) {
                                    this.messagesByDays.remove(o3.dateKey);
                                    if (index12 >= 0 && index12 < this.messages.size()) {
                                        this.messages.remove(index12);
                                    }
                                }
                            }
                            b5 = true;
                        }
                    }
                    ++index11;
                }
                if (i != 0) {
                    if (!b4) {
                        this.addToSelectedMessages(null, false, true);
                    }
                    this.updateActionModeTitle();
                }
                if (longSparseArray12 != null) {
                    MessageObject.GroupedMessages groupedMessages11;
                    ArrayList<MessageObject> messages13;
                    ChatActivityAdapter chatAdapter9;
                    for (i = 0; i < longSparseArray12.size(); ++i) {
                        groupedMessages11 = (MessageObject.GroupedMessages)longSparseArray12.valueAt(i);
                        if (groupedMessages11.messages.isEmpty()) {
                            this.groupedMessagesMap.remove(groupedMessages11.groupId);
                        }
                        else {
                            groupedMessages11.calculate();
                            messages13 = groupedMessages11.messages;
                            j = this.messages.indexOf(messages13.get(messages13.size() - 1));
                            if (j >= 0) {
                                chatAdapter9 = this.chatAdapter;
                                if (chatAdapter9 != null) {
                                    chatAdapter9.notifyItemRangeChanged(j + chatAdapter9.messagesStartRow, groupedMessages11.messages.size());
                                }
                            }
                        }
                    }
                }
                if (this.messages.isEmpty()) {
                    if (!this.endReached[0] && !this.loading) {
                        final FrameLayout progressView4 = this.progressView;
                        if (progressView4 != null) {
                            progressView4.setVisibility(4);
                        }
                        final RecyclerListView chatListView5 = this.chatListView;
                        if (chatListView5 != null) {
                            chatListView5.setEmptyView(null);
                        }
                        if (this.currentEncryptedChat == null) {
                            final int[] maxMessageId3 = this.maxMessageId;
                            maxMessageId3[0] = (maxMessageId3[1] = Integer.MAX_VALUE);
                            final int[] minMessageId3 = this.minMessageId;
                            minMessageId3[0] = (minMessageId3[1] = Integer.MIN_VALUE);
                        }
                        else {
                            final int[] maxMessageId4 = this.maxMessageId;
                            maxMessageId4[0] = (maxMessageId4[1] = Integer.MIN_VALUE);
                            final int[] minMessageId4 = this.minMessageId;
                            minMessageId4[0] = (minMessageId4[1] = Integer.MAX_VALUE);
                        }
                        final int[] maxDate4 = this.maxDate;
                        maxDate4[0] = (maxDate4[1] = Integer.MIN_VALUE);
                        final int[] minDate4 = this.minDate;
                        minDate4[minDate4[1] = 0] = 0;
                        this.waitingForLoad.add(this.lastLoadIndex);
                        final MessagesController instance3 = MessagesController.getInstance(super.currentAccount);
                        final long dialog_id2 = this.dialog_id;
                        final boolean b6 = this.cacheEndReached[0];
                        i = this.minDate[0];
                        final int classGuid = super.classGuid;
                        final boolean channel = ChatObject.isChannel(this.currentChat);
                        j = this.lastLoadIndex++;
                        instance3.loadMessages(dialog_id2, 30, 0, 0, b6 ^ true, i, classGuid, 0, 0, channel, j);
                        this.loading = true;
                    }
                    else {
                        if (this.botButtons != null) {
                            this.botButtons = null;
                            final ChatActivityEnterView chatActivityEnterView3 = this.chatActivityEnterView;
                            if (chatActivityEnterView3 != null) {
                                chatActivityEnterView3.setButtons(null, false);
                            }
                        }
                        if (this.currentEncryptedChat == null) {
                            final TLRPC.User currentUser6 = this.currentUser;
                            if (currentUser6 != null && currentUser6.bot && this.botUser == null) {
                                this.botUser = "";
                                this.updateBottomOverlay();
                            }
                        }
                    }
                    this.showPagedownButton(false, true);
                    this.showMentionDownButton(false, true);
                }
                if (this.chatAdapter != null) {
                    if (b5) {
                        while (true) {
                            View child;
                            MessageObject o4;
                            int index13;
                            for (j = this.chatListView.getChildCount(), i = 0; i < j; ++i) {
                                child = this.chatListView.getChildAt(i);
                                if (child instanceof ChatMessageCell) {
                                    o4 = ((ChatMessageCell)child).getMessageObject();
                                }
                                else if (child instanceof ChatActionCell) {
                                    o4 = ((ChatActionCell)child).getMessageObject();
                                }
                                else {
                                    o4 = null;
                                }
                                if (o4 != null) {
                                    index13 = this.messages.indexOf(o4);
                                    if (index13 >= 0) {
                                        i = this.chatAdapter.messagesStartRow + index13;
                                        j = child.getBottom();
                                        this.chatAdapter.notifyDataSetChanged();
                                        if (i != -1) {
                                            this.chatLayoutManager.scrollToPositionWithOffset(i, this.chatListView.getMeasuredHeight() - j - this.chatListView.getPaddingBottom());
                                        }
                                        return;
                                    }
                                }
                            }
                            i = -1;
                            j = 0;
                            continue;
                        }
                    }
                    this.first_unread_id = 0;
                    this.last_message_id = 0;
                    this.createUnreadMessageAfterId = 0;
                    this.removeMessageObject(this.unreadMessageObject);
                    this.unreadMessageObject = null;
                    final TextView pagedownButtonCounter6 = this.pagedownButtonCounter;
                    if (pagedownButtonCounter6 != null) {
                        pagedownButtonCounter6.setVisibility(4);
                    }
                }
            }
            else if (i == NotificationCenter.messageReceivedByServer) {
                final Integer obj = (Integer)array[0];
                final MessageObject messageObject18 = (MessageObject)this.messagesDict[0].get((int)obj);
                if (messageObject18 != null) {
                    final Integer n39 = (Integer)array[1];
                    if (!n39.equals(obj) && this.messagesDict[0].indexOfKey((int)n39) >= 0) {
                        final MessageObject o5 = (MessageObject)this.messagesDict[0].get((int)obj);
                        this.messagesDict[0].remove((int)obj);
                        if (o5 != null) {
                            i = this.messages.indexOf(o5);
                            this.messages.remove(i);
                            final ArrayList<MessageObject> list8 = this.messagesByDays.get(o5.dateKey);
                            list8.remove(messageObject18);
                            if (list8.isEmpty()) {
                                this.messagesByDays.remove(messageObject18.dateKey);
                                if (i >= 0 && i < this.messages.size()) {
                                    this.messages.remove(i);
                                }
                            }
                            final ChatActivityAdapter chatAdapter10 = this.chatAdapter;
                            if (chatAdapter10 != null) {
                                chatAdapter10.notifyDataSetChanged();
                            }
                        }
                        return;
                    }
                    final TLRPC.Message messageOwner3 = (TLRPC.Message)array[2];
                    Long value5;
                    if (array.length >= 4) {
                        value5 = (Long)array[4];
                    }
                    else {
                        value5 = 0L;
                    }
                    boolean forceUpdate;
                    if (messageOwner3 != null) {
                        boolean b7 = false;
                        Label_12102: {
                            Label_12097: {
                                Label_12090: {
                                    try {
                                        if (messageObject18.isForwarded() && ((messageObject18.messageOwner.reply_markup == null && messageOwner3.reply_markup != null) || !messageObject18.messageOwner.message.equals(messageOwner3.message))) {
                                            i = 1;
                                        }
                                        else {
                                            i = 0;
                                        }
                                        if (i == 0) {
                                            try {
                                                if (messageObject18.messageOwner.params == null || !messageObject18.messageOwner.params.containsKey("query_id")) {
                                                    j = i;
                                                    if (messageOwner3.media == null) {
                                                        break Label_12097;
                                                    }
                                                    j = i;
                                                    if (messageObject18.messageOwner.media == null) {
                                                        break Label_12097;
                                                    }
                                                    final boolean equals = messageOwner3.media.getClass().equals(messageObject18.messageOwner.media.getClass());
                                                    j = i;
                                                    if (equals) {
                                                        break Label_12097;
                                                    }
                                                }
                                            }
                                            catch (Exception ex) {
                                                break Label_12090;
                                            }
                                        }
                                        b7 = true;
                                        break Label_12102;
                                    }
                                    catch (Exception ex) {
                                        i = 0;
                                    }
                                }
                                final Exception ex;
                                FileLog.e(ex);
                                j = i;
                            }
                            b7 = false;
                            i = j;
                        }
                        if (messageObject18.getGroupId() != 0L && messageOwner3.grouped_id != 0L) {
                            final MessageObject.GroupedMessages groupedMessages12 = (MessageObject.GroupedMessages)this.groupedMessagesMap.get(messageObject18.getGroupId());
                            if (groupedMessages12 != null) {
                                this.groupedMessagesMap.put(messageOwner3.grouped_id, (Object)groupedMessages12);
                            }
                            final TLRPC.Message messageOwner4 = messageObject18.messageOwner;
                            messageObject18.localSentGroupId = messageOwner4.grouped_id;
                            messageOwner4.grouped_id = value5;
                        }
                        final TLRPC.MessageFwdHeader fwd_from = messageObject18.messageOwner.fwd_from;
                        messageObject18.messageOwner = messageOwner3;
                        if (fwd_from != null) {
                            final TLRPC.MessageFwdHeader fwd_from2 = messageOwner3.fwd_from;
                            if (fwd_from2 != null && !TextUtils.isEmpty((CharSequence)fwd_from2.from_name)) {
                                messageObject18.messageOwner.fwd_from = fwd_from;
                            }
                        }
                        messageObject18.generateThumbs(true);
                        messageObject18.setType();
                        forceUpdate = b7;
                        j = i;
                        if (messageOwner3.media instanceof TLRPC.TL_messageMediaGame) {
                            messageObject18.applyNewText();
                            forceUpdate = b7;
                            j = i;
                        }
                    }
                    else {
                        forceUpdate = false;
                        j = 0;
                    }
                    if (j != 0) {
                        messageObject18.measureInlineBotButtons();
                    }
                    this.messagesDict[0].remove((int)obj);
                    this.messagesDict[0].put((int)n39, (Object)messageObject18);
                    messageObject18.messageOwner.id = n39;
                    messageObject18.messageOwner.send_state = 0;
                    messageObject18.forceUpdate = forceUpdate;
                    if (array.length >= 6) {
                        messageObject18.applyMediaExistanceFlags((int)array[5]);
                    }
                    this.addToPolls(messageObject18, null);
                    final ArrayList<MessageObject> list9 = new ArrayList<MessageObject>();
                    list9.add(messageObject18);
                    if (this.currentEncryptedChat == null) {
                        DataQuery.getInstance(super.currentAccount).loadReplyMessagesForMessages(list9, this.dialog_id);
                    }
                    final ChatActivityAdapter chatAdapter11 = this.chatAdapter;
                    if (chatAdapter11 != null) {
                        chatAdapter11.updateRowWithMessageObject(messageObject18, true);
                    }
                    final GridLayoutManagerFixed chatLayoutManager = this.chatLayoutManager;
                    if (chatLayoutManager != null && forceUpdate && chatLayoutManager.findFirstVisibleItemPosition() == 0) {
                        this.moveScrollToLastMessage();
                    }
                    NotificationsController.getInstance(super.currentAccount).playOutChatSound();
                }
            }
            else if (i == NotificationCenter.messageReceivedByAck) {
                final MessageObject messageObject19 = (MessageObject)this.messagesDict[0].get((int)array[0]);
                if (messageObject19 != null) {
                    messageObject19.messageOwner.send_state = 0;
                    final ChatActivityAdapter chatAdapter12 = this.chatAdapter;
                    if (chatAdapter12 != null) {
                        chatAdapter12.updateRowWithMessageObject(messageObject19, true);
                    }
                }
            }
            else if (i == NotificationCenter.messageSendError) {
                final MessageObject messageObject20 = (MessageObject)this.messagesDict[0].get((int)array[0]);
                if (messageObject20 != null) {
                    messageObject20.messageOwner.send_state = 2;
                    this.updateVisibleRows();
                }
            }
            else if (i == NotificationCenter.chatInfoDidLoad) {
                final TLRPC.ChatFull chatInfo4 = (TLRPC.ChatFull)array[0];
                final TLRPC.Chat currentChat7 = this.currentChat;
                if (currentChat7 != null && chatInfo4.id == currentChat7.id) {
                    if (chatInfo4 instanceof TLRPC.TL_channelFull) {
                        if (currentChat7.megagroup) {
                            int n40;
                            if (chatInfo4.participants != null) {
                                j = 0;
                                i = 0;
                                while (true) {
                                    n40 = i;
                                    if (j >= chatInfo4.participants.participants.size()) {
                                        break;
                                    }
                                    i = Math.max(chatInfo4.participants.participants.get(j).date, i);
                                    ++j;
                                }
                            }
                            else {
                                n40 = 0;
                            }
                            if (n40 == 0 || Math.abs(System.currentTimeMillis() / 1000L - n40) > 3600L) {
                                MessagesController.getInstance(super.currentAccount).loadChannelParticipants(this.currentChat.id);
                            }
                        }
                        if (chatInfo4.participants == null) {
                            final TLRPC.ChatFull chatInfo5 = this.chatInfo;
                            if (chatInfo5 != null) {
                                chatInfo4.participants = chatInfo5.participants;
                            }
                        }
                    }
                    this.chatInfo = chatInfo4;
                    final ChatActivityEnterView chatActivityEnterView4 = this.chatActivityEnterView;
                    if (chatActivityEnterView4 != null) {
                        chatActivityEnterView4.setChatInfo(this.chatInfo);
                    }
                    final MentionsAdapter mentionsAdapter = this.mentionsAdapter;
                    if (mentionsAdapter != null) {
                        mentionsAdapter.setChatInfo(this.chatInfo);
                    }
                    if (array[3] instanceof MessageObject) {
                        this.pinnedMessageObject = (MessageObject)array[3];
                        this.updatePinnedMessageView(false);
                    }
                    else {
                        this.updatePinnedMessageView(true);
                    }
                    final ChatAvatarContainer avatarContainer7 = this.avatarContainer;
                    if (avatarContainer7 != null) {
                        avatarContainer7.updateOnlineCount();
                        this.avatarContainer.updateSubtitle();
                    }
                    if (this.isBroadcast) {
                        SendMessagesHelper.getInstance(super.currentAccount).setCurrentChatInfo(this.chatInfo);
                    }
                    final TLRPC.ChatFull chatInfo6 = this.chatInfo;
                    if (chatInfo6 instanceof TLRPC.TL_chatFull) {
                        this.hasBotsCommands = false;
                        this.botInfo.clear();
                        this.botsCount = 0;
                        URLSpanBotCommand.enabled = false;
                        TLRPC.User user2;
                        for (i = 0; i < this.chatInfo.participants.participants.size(); ++i) {
                            user2 = MessagesController.getInstance(super.currentAccount).getUser(this.chatInfo.participants.participants.get(i).user_id);
                            if (user2 != null && user2.bot) {
                                URLSpanBotCommand.enabled = true;
                                ++this.botsCount;
                                DataQuery.getInstance(super.currentAccount).loadBotInfo(user2.id, true, super.classGuid);
                            }
                        }
                        final RecyclerListView chatListView6 = this.chatListView;
                        if (chatListView6 != null) {
                            chatListView6.invalidateViews();
                        }
                    }
                    else if (chatInfo6 instanceof TLRPC.TL_channelFull) {
                        this.hasBotsCommands = false;
                        this.botInfo.clear();
                        this.botsCount = 0;
                        boolean enabled = false;
                        Label_13115: {
                            if (!this.chatInfo.bot_info.isEmpty()) {
                                final TLRPC.Chat currentChat8 = this.currentChat;
                                if (currentChat8 != null && currentChat8.megagroup) {
                                    enabled = true;
                                    break Label_13115;
                                }
                            }
                            enabled = false;
                        }
                        URLSpanBotCommand.enabled = enabled;
                        this.botsCount = this.chatInfo.bot_info.size();
                        TLRPC.BotInfo botInfo;
                        TLRPC.Chat currentChat9;
                        for (i = 0; i < this.chatInfo.bot_info.size(); ++i) {
                            botInfo = this.chatInfo.bot_info.get(i);
                            Label_13208: {
                                if (!botInfo.commands.isEmpty()) {
                                    if (ChatObject.isChannel(this.currentChat)) {
                                        currentChat9 = this.currentChat;
                                        if (currentChat9 == null || !currentChat9.megagroup) {
                                            break Label_13208;
                                        }
                                    }
                                    this.hasBotsCommands = true;
                                }
                            }
                            this.botInfo.put(botInfo.user_id, (Object)botInfo);
                        }
                        final RecyclerListView chatListView7 = this.chatListView;
                        if (chatListView7 != null) {
                            chatListView7.invalidateViews();
                        }
                        Label_13285: {
                            if (this.mentionsAdapter != null) {
                                if (ChatObject.isChannel(this.currentChat)) {
                                    final TLRPC.Chat currentChat10 = this.currentChat;
                                    if (currentChat10 == null || !currentChat10.megagroup) {
                                        break Label_13285;
                                    }
                                }
                                this.mentionsAdapter.setBotInfo(this.botInfo);
                            }
                        }
                        if (this.bottomOverlayChatText2 != null && ChatObject.isChannel(this.currentChat) && !this.currentChat.megagroup && -this.chatInfo.linked_chat_id != 0) {
                            this.bottomOverlayChatText2.updateCounter();
                        }
                    }
                    final ChatActivityEnterView chatActivityEnterView5 = this.chatActivityEnterView;
                    if (chatActivityEnterView5 != null) {
                        chatActivityEnterView5.setBotsCount(this.botsCount, this.hasBotsCommands);
                    }
                    final MentionsAdapter mentionsAdapter2 = this.mentionsAdapter;
                    if (mentionsAdapter2 != null) {
                        mentionsAdapter2.setBotsCount(this.botsCount);
                    }
                    if (ChatObject.isChannel(this.currentChat) && this.mergeDialogId == 0L) {
                        final TLRPC.ChatFull chatInfo7 = this.chatInfo;
                        i = chatInfo7.migrated_from_chat_id;
                        if (i != 0) {
                            this.mergeDialogId = -i;
                            this.maxMessageId[1] = chatInfo7.migrated_from_max_id;
                            final ChatActivityAdapter chatAdapter13 = this.chatAdapter;
                            if (chatAdapter13 != null) {
                                chatAdapter13.notifyDataSetChanged();
                            }
                            if (this.mergeDialogId != 0L && this.endReached[0]) {
                                this.checkScrollForLoad(false);
                            }
                        }
                    }
                }
            }
            else if (i == NotificationCenter.chatInfoCantLoad) {
                i = (int)array[0];
                final TLRPC.Chat currentChat11 = this.currentChat;
                if (currentChat11 != null && currentChat11.id == i) {
                    i = (int)array[1];
                    if (this.getParentActivity() == null || this.closeChatDialog != null) {
                        return;
                    }
                    final AlertDialog.Builder builder2 = new AlertDialog.Builder((Context)this.getParentActivity());
                    builder2.setTitle(LocaleController.getString("AppName", 2131558635));
                    if (i == 0) {
                        builder2.setMessage(LocaleController.getString("ChannelCantOpenPrivate", 2131558939));
                    }
                    else if (i == 1) {
                        builder2.setMessage(LocaleController.getString("ChannelCantOpenNa", 2131558938));
                    }
                    else if (i == 2) {
                        builder2.setMessage(LocaleController.getString("ChannelCantOpenBanned", 2131558937));
                    }
                    builder2.setPositiveButton(LocaleController.getString("OK", 2131560097), null);
                    this.showDialog(this.closeChatDialog = builder2.create());
                    this.loading = false;
                    final FrameLayout progressView5 = this.progressView;
                    if (progressView5 != null) {
                        progressView5.setVisibility(4);
                    }
                    final ChatActivityAdapter chatAdapter14 = this.chatAdapter;
                    if (chatAdapter14 != null) {
                        chatAdapter14.notifyDataSetChanged();
                    }
                }
            }
            else if (i == NotificationCenter.contactsDidLoad) {
                this.updateContactStatus();
                if (this.currentEncryptedChat != null) {
                    this.updateSpamView();
                }
                final ChatAvatarContainer avatarContainer8 = this.avatarContainer;
                if (avatarContainer8 != null) {
                    avatarContainer8.updateSubtitle();
                }
            }
            else if (i == NotificationCenter.encryptedChatUpdated) {
                final TLRPC.EncryptedChat currentEncryptedChat = (TLRPC.EncryptedChat)array[0];
                final TLRPC.EncryptedChat currentEncryptedChat2 = this.currentEncryptedChat;
                if (currentEncryptedChat2 != null && currentEncryptedChat.id == currentEncryptedChat2.id) {
                    this.currentEncryptedChat = currentEncryptedChat;
                    this.updateContactStatus();
                    this.updateSecretStatus();
                    this.initStickers();
                    final ChatActivityEnterView chatActivityEnterView6 = this.chatActivityEnterView;
                    if (chatActivityEnterView6 != null) {
                        final TLRPC.EncryptedChat currentEncryptedChat3 = this.currentEncryptedChat;
                        final boolean b8 = currentEncryptedChat3 == null || AndroidUtilities.getPeerLayerVersion(currentEncryptedChat3.layer) >= 23;
                        final TLRPC.EncryptedChat currentEncryptedChat4 = this.currentEncryptedChat;
                        chatActivityEnterView6.setAllowStickersAndGifs(b8, currentEncryptedChat4 == null || AndroidUtilities.getPeerLayerVersion(currentEncryptedChat4.layer) >= 46);
                        this.chatActivityEnterView.checkRoundVideo();
                    }
                    final MentionsAdapter mentionsAdapter3 = this.mentionsAdapter;
                    if (mentionsAdapter3 != null) {
                        boolean needBotContext = false;
                        Label_13916: {
                            if (!this.chatActivityEnterView.isEditingMessage()) {
                                final TLRPC.EncryptedChat currentEncryptedChat5 = this.currentEncryptedChat;
                                if (currentEncryptedChat5 == null || AndroidUtilities.getPeerLayerVersion(currentEncryptedChat5.layer) >= 46) {
                                    needBotContext = true;
                                    break Label_13916;
                                }
                            }
                            needBotContext = false;
                        }
                        mentionsAdapter3.setNeedBotContext(needBotContext);
                    }
                }
            }
            else if (i == NotificationCenter.messagesReadEncrypted) {
                i = (int)array[0];
                final TLRPC.EncryptedChat currentEncryptedChat6 = this.currentEncryptedChat;
                if (currentEncryptedChat6 != null && currentEncryptedChat6.id == i) {
                    i = (int)array[1];
                    for (final MessageObject messageObject21 : this.messages) {
                        if (!messageObject21.isOut()) {
                            continue;
                        }
                        if (messageObject21.isOut() && !messageObject21.isUnread()) {
                            break;
                        }
                        if (messageObject21.messageOwner.date - 1 > i) {
                            continue;
                        }
                        messageObject21.setIsRead();
                    }
                    this.updateVisibleRows();
                }
            }
            else if (i == NotificationCenter.removeAllMessagesFromDialog) {
                if (this.dialog_id == (long)array[0]) {
                    this.clearHistory((boolean)array[1]);
                }
            }
            else if (i == NotificationCenter.screenshotTook) {
                this.updateInformationForScreenshotDetector();
            }
            else if (i == NotificationCenter.blockedUsersDidLoad) {
                if (this.currentUser != null) {
                    final boolean userBlocked = this.userBlocked;
                    this.userBlocked = (MessagesController.getInstance(super.currentAccount).blockedUsers.indexOfKey(this.currentUser.id) >= 0);
                    if (userBlocked != this.userBlocked) {
                        this.updateBottomOverlay();
                    }
                }
            }
            else if (i == NotificationCenter.fileNewChunkAvailable) {
                final MessageObject messageObject22 = (MessageObject)array[0];
                final long longValue = (long)array[3];
                if (longValue != 0L && this.dialog_id == messageObject22.getDialogId()) {
                    final MessageObject messageObject23 = (MessageObject)this.messagesDict[0].get(messageObject22.getId());
                    if (messageObject23 != null) {
                        final TLRPC.Document document = messageObject23.messageOwner.media.document;
                        if (document != null) {
                            document.size = (int)longValue;
                            this.updateVisibleRows();
                        }
                    }
                }
            }
            else if (i == NotificationCenter.didCreatedNewDeleteTask) {
                final SparseArray sparseArray = (SparseArray)array[0];
                j = 0;
                i = 0;
                while (j < sparseArray.size()) {
                    final int key2 = sparseArray.keyAt(j);
                    final ArrayList list10 = (ArrayList)sparseArray.get(key2);
                    for (int index14 = 0; index14 < list10.size(); ++index14) {
                        final long longValue2 = list10.get(index14);
                        if (index14 == 0) {
                            int n41;
                            if ((n41 = (int)(longValue2 >> 32)) < 0) {
                                n41 = 0;
                            }
                            int id4;
                            if (ChatObject.isChannel(this.currentChat)) {
                                id4 = this.currentChat.id;
                            }
                            else {
                                id4 = 0;
                            }
                            if (n41 != id4) {
                                return;
                            }
                        }
                        final MessageObject messageObject24 = (MessageObject)this.messagesDict[0].get((int)longValue2);
                        if (messageObject24 != null) {
                            messageObject24.messageOwner.destroyTime = key2;
                            i = 1;
                        }
                    }
                    ++j;
                }
                if (i != 0) {
                    this.updateVisibleRows();
                }
            }
            else if (i == NotificationCenter.messagePlayingDidStart) {
                final MessageObject messageObject25 = (MessageObject)array[0];
                if (messageObject25.eventId != 0L) {
                    return;
                }
                this.sendSecretMessageRead(messageObject25);
                if (messageObject25.isRoundVideo() || messageObject25.isVideo()) {
                    final View fragmentView = super.fragmentView;
                    if (fragmentView != null && fragmentView.getParent() != null) {
                        MediaController.getInstance().setTextureView(this.createTextureView(true), this.aspectRatioFrameLayout, this.videoPlayerContainer, true);
                        this.updateTextureViewPosition(true);
                    }
                }
                final RecyclerListView chatListView8 = this.chatListView;
                if (chatListView8 != null) {
                    View child2;
                    ChatMessageCell chatMessageCell;
                    MessageObject messageObject26;
                    boolean video;
                    AnimatedFileDrawable animation;
                    for (j = chatListView8.getChildCount(), i = 0; i < j; ++i) {
                        child2 = this.chatListView.getChildAt(i);
                        if (child2 instanceof ChatMessageCell) {
                            chatMessageCell = (ChatMessageCell)child2;
                            messageObject26 = chatMessageCell.getMessageObject();
                            if (messageObject26 != null) {
                                video = messageObject26.isVideo();
                                if (!messageObject26.isRoundVideo() && !video) {
                                    if (messageObject26.isVoice() || messageObject26.isMusic()) {
                                        chatMessageCell.updateButtonState(false, true, false);
                                    }
                                }
                                else {
                                    chatMessageCell.checkVideoPlayback(false);
                                    if (!MediaController.getInstance().isPlayingMessage(messageObject26)) {
                                        if (video && !MediaController.getInstance().isGoingToShowMessageObject(messageObject26)) {
                                            animation = chatMessageCell.getPhotoImage().getAnimation();
                                            if (animation != null) {
                                                animation.start();
                                            }
                                        }
                                        if (messageObject26.audioProgress != 0.0f) {
                                            messageObject26.resetPlayingProgress();
                                            chatMessageCell.invalidate();
                                        }
                                    }
                                    else if (video) {
                                        chatMessageCell.updateButtonState(false, true, false);
                                    }
                                }
                            }
                        }
                    }
                    View child3;
                    ContextLinkCell contextLinkCell;
                    MessageObject messageObject27;
                    for (j = this.mentionListView.getChildCount(), i = 0; i < j; ++i) {
                        child3 = this.mentionListView.getChildAt(i);
                        if (child3 instanceof ContextLinkCell) {
                            contextLinkCell = (ContextLinkCell)child3;
                            messageObject27 = contextLinkCell.getMessageObject();
                            if (messageObject27 != null && (messageObject27.isVoice() || messageObject27.isMusic())) {
                                contextLinkCell.updateButtonState(false, true);
                            }
                        }
                    }
                }
            }
            else if (i == NotificationCenter.messagePlayingGoingToStop) {
                if (array[1]) {
                    this.contentView.removeView((View)this.videoPlayerContainer);
                    this.videoPlayerContainer = null;
                    this.videoTextureView = null;
                    this.aspectRatioFrameLayout = null;
                }
                else if (this.chatListView != null) {
                    final FrameLayout videoPlayerContainer = this.videoPlayerContainer;
                    if (videoPlayerContainer != null && videoPlayerContainer.getTag() != null) {
                        array = (Object[])array[0];
                        View child4;
                        ChatMessageCell chatMessageCell2;
                        AnimatedFileDrawable animation2;
                        Bitmap animatedBitmap;
                        Bitmap bitmap;
                        for (j = this.chatListView.getChildCount(), i = 0; i < j; ++i) {
                            child4 = this.chatListView.getChildAt(i);
                            if (child4 instanceof ChatMessageCell) {
                                chatMessageCell2 = (ChatMessageCell)child4;
                                if (array == chatMessageCell2.getMessageObject()) {
                                    animation2 = chatMessageCell2.getPhotoImage().getAnimation();
                                    if (animation2 != null) {
                                        animatedBitmap = animation2.getAnimatedBitmap();
                                        if (animatedBitmap != null) {
                                            try {
                                                bitmap = this.videoTextureView.getBitmap(animatedBitmap.getWidth(), animatedBitmap.getHeight());
                                                new Canvas(animatedBitmap).drawBitmap(bitmap, 0.0f, 0.0f, (Paint)null);
                                                bitmap.recycle();
                                            }
                                            catch (Throwable t) {
                                                FileLog.e(t);
                                            }
                                        }
                                        animation2.seekTo(((MessageObject)array).audioProgressMs, FileLoader.getInstance(super.currentAccount).isLoadingVideo(((MessageObject)array).getDocument(), true) ^ true);
                                        break;
                                    }
                                    break;
                                }
                            }
                        }
                    }
                }
            }
            else if (i != NotificationCenter.messagePlayingDidReset && i != NotificationCenter.messagePlayingPlayStateChanged) {
                if (i == NotificationCenter.messagePlayingProgressDidChanged) {
                    final Integer n42 = (Integer)array[0];
                    final RecyclerListView chatListView9 = this.chatListView;
                    if (chatListView9 != null) {
                        View child5;
                        ChatMessageCell chatMessageCell3;
                        MessageObject messageObject28;
                        MessageObject playingMessageObject2;
                        for (j = chatListView9.getChildCount(), i = 0; i < j; ++i) {
                            child5 = this.chatListView.getChildAt(i);
                            if (child5 instanceof ChatMessageCell) {
                                chatMessageCell3 = (ChatMessageCell)child5;
                                messageObject28 = chatMessageCell3.getMessageObject();
                                if (messageObject28 != null && messageObject28.getId() == n42) {
                                    playingMessageObject2 = MediaController.getInstance().getPlayingMessageObject();
                                    if (playingMessageObject2 == null) {
                                        break;
                                    }
                                    messageObject28.audioProgress = playingMessageObject2.audioProgress;
                                    messageObject28.audioProgressSec = playingMessageObject2.audioProgressSec;
                                    messageObject28.audioPlayerDuration = playingMessageObject2.audioPlayerDuration;
                                    chatMessageCell3.updatePlayingMessageProgress();
                                    if (this.drawLaterRoundProgressCell == chatMessageCell3) {
                                        super.fragmentView.invalidate();
                                        break;
                                    }
                                    break;
                                }
                            }
                        }
                    }
                }
                else if (i == NotificationCenter.didUpdatePollResults) {
                    final ArrayList list11 = (ArrayList)this.polls.get((long)array[0]);
                    if (list11 != null) {
                        final TLRPC.TL_poll poll = (TLRPC.TL_poll)array[1];
                        final TLRPC.TL_pollResults tl_pollResults = (TLRPC.TL_pollResults)array[2];
                        MessageObject messageObject29;
                        TLRPC.TL_messageMediaPoll tl_messageMediaPoll;
                        ChatActivityAdapter chatAdapter15;
                        for (j = list11.size(), i = 0; i < j; ++i) {
                            messageObject29 = list11.get(i);
                            tl_messageMediaPoll = (TLRPC.TL_messageMediaPoll)messageObject29.messageOwner.media;
                            if (poll != null) {
                                tl_messageMediaPoll.poll = poll;
                            }
                            MessageObject.updatePollResults(tl_messageMediaPoll, tl_pollResults);
                            chatAdapter15 = this.chatAdapter;
                            if (chatAdapter15 != null) {
                                chatAdapter15.updateRowWithMessageObject(messageObject29, true);
                            }
                        }
                    }
                }
                else if (i == NotificationCenter.updateMessageMedia) {
                    final TLRPC.Message message = (TLRPC.Message)array[0];
                    final MessageObject o6 = (MessageObject)this.messagesDict[0].get(message.id);
                    if (o6 != null) {
                        final TLRPC.Message messageOwner5 = o6.messageOwner;
                        messageOwner5.media = message.media;
                        messageOwner5.attachPath = message.attachPath;
                        o6.generateThumbs(false);
                        if (o6.getGroupId() != 0L) {
                            final ArrayList<TLRPC.PhotoSize> photoThumbs = o6.photoThumbs;
                            if (photoThumbs == null || photoThumbs.isEmpty()) {
                                final MessageObject.GroupedMessages groupedMessages13 = (MessageObject.GroupedMessages)this.groupedMessagesMap.get(o6.getGroupId());
                                if (groupedMessages13 != null) {
                                    final int index15 = groupedMessages13.messages.indexOf(o6);
                                    if (index15 >= 0) {
                                        j = groupedMessages13.messages.size();
                                        MessageObject messageObject30;
                                        if (index15 > 0 && index15 < groupedMessages13.messages.size() - 1) {
                                            final MessageObject.GroupedMessages groupedMessages14 = new MessageObject.GroupedMessages();
                                            groupedMessages14.groupId = Utilities.random.nextLong();
                                            final ArrayList<MessageObject> messages14 = groupedMessages14.messages;
                                            final ArrayList<MessageObject> messages15 = groupedMessages13.messages;
                                            final int n43 = index15 + 1;
                                            messages14.addAll(messages15.subList(n43, messages15.size()));
                                            for (i = 0; i < groupedMessages14.messages.size(); ++i) {
                                                groupedMessages14.messages.get(i).localGroupId = groupedMessages14.groupId;
                                                groupedMessages13.messages.remove(n43);
                                            }
                                            this.groupedMessagesMap.put(groupedMessages14.groupId, (Object)groupedMessages14);
                                            final ArrayList<MessageObject> messages16 = groupedMessages14.messages;
                                            messageObject30 = messages16.get(messages16.size() - 1);
                                            groupedMessages14.calculate();
                                        }
                                        else {
                                            messageObject30 = null;
                                        }
                                        groupedMessages13.messages.remove(index15);
                                        if (groupedMessages13.messages.isEmpty()) {
                                            this.groupedMessagesMap.remove(groupedMessages13.groupId);
                                        }
                                        else {
                                            MessageObject o7;
                                            if ((o7 = messageObject30) == null) {
                                                final ArrayList<MessageObject> messages17 = groupedMessages13.messages;
                                                o7 = messages17.get(messages17.size() - 1);
                                            }
                                            groupedMessages13.calculate();
                                            i = this.messages.indexOf(o7);
                                            if (i >= 0) {
                                                final ChatActivityAdapter chatAdapter16 = this.chatAdapter;
                                                if (chatAdapter16 != null) {
                                                    chatAdapter16.notifyItemRangeChanged(i + chatAdapter16.messagesStartRow, j);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        final TLRPC.MessageMedia media2 = message.media;
                        if (media2.ttl_seconds != 0 && (media2.photo instanceof TLRPC.TL_photoEmpty || media2.document instanceof TLRPC.TL_documentEmpty)) {
                            o6.setType();
                            final ChatActivityAdapter chatAdapter17 = this.chatAdapter;
                            if (chatAdapter17 != null) {
                                chatAdapter17.updateRowWithMessageObject(o6, false);
                            }
                        }
                        else {
                            this.updateVisibleRows();
                        }
                    }
                }
                else if (i == NotificationCenter.replaceMessagesObjects) {
                    final long longValue3 = (long)array[0];
                    if (longValue3 != this.dialog_id && longValue3 != this.mergeDialogId) {
                        return;
                    }
                    if (longValue3 == this.dialog_id) {
                        j = 0;
                    }
                    else {
                        j = 1;
                    }
                    ArrayList<MessageObject> list12 = (ArrayList<MessageObject>)array[1];
                    i = 0;
                    LongSparseArray longSparseArray14 = null;
                    while (i < list12.size()) {
                        final MessageObject element3 = list12.get(i);
                        final MessageObject messageObject31 = (MessageObject)this.messagesDict[j].get(element3.getId());
                        final MessageObject pinnedMessageObject = this.pinnedMessageObject;
                        if (pinnedMessageObject != null && pinnedMessageObject.getId() == element3.getId()) {
                            this.pinnedMessageObject = element3;
                            this.updatePinnedMessageView(true);
                        }
                        int n45 = 0;
                        ArrayList<MessageObject> list14 = null;
                        Label_16847: {
                            if (messageObject31 != null) {
                                this.addToPolls(element3, messageObject31);
                                if (element3.type >= 0) {
                                    final MessageObject replyMessageObject2 = messageObject31.replyMessageObject;
                                    if (replyMessageObject2 != null) {
                                        element3.replyMessageObject = replyMessageObject2;
                                        final TLRPC.MessageAction action9 = element3.messageOwner.action;
                                        if (action9 instanceof TLRPC.TL_messageActionGameScore) {
                                            element3.generateGameMessageText(null);
                                        }
                                        else if (action9 instanceof TLRPC.TL_messageActionPaymentSent) {
                                            element3.generatePaymentSentMessageText(null);
                                        }
                                    }
                                    if (!messageObject31.isEditing()) {
                                        if (messageObject31.getFileName().equals(element3.getFileName())) {
                                            element3.messageOwner.attachPath = messageObject31.messageOwner.attachPath;
                                            element3.attachPathExists = messageObject31.attachPathExists;
                                            element3.mediaExists = messageObject31.mediaExists;
                                        }
                                        else {
                                            element3.checkMediaExistance();
                                        }
                                    }
                                    this.messagesDict[j].put(messageObject31.getId(), (Object)element3);
                                }
                                else {
                                    this.messagesDict[j].remove(messageObject31.getId());
                                }
                                final int index16 = this.messages.indexOf(messageObject31);
                                if (index16 >= 0) {
                                    final ArrayList<MessageObject> list13 = this.messagesByDays.get(messageObject31.dateKey);
                                    int index17;
                                    if (list13 != null) {
                                        index17 = list13.indexOf(messageObject31);
                                    }
                                    else {
                                        index17 = -1;
                                    }
                                    LongSparseArray longSparseArray15 = longSparseArray14;
                                    if (messageObject31.getGroupId() != 0L) {
                                        final MessageObject.GroupedMessages groupedMessages15 = (MessageObject.GroupedMessages)this.groupedMessagesMap.get(messageObject31.getGroupId());
                                        longSparseArray15 = longSparseArray14;
                                        if (groupedMessages15 != null) {
                                            final int index18 = groupedMessages15.messages.indexOf(messageObject31);
                                            longSparseArray15 = longSparseArray14;
                                            if (index18 >= 0) {
                                                if (messageObject31.getGroupId() != element3.getGroupId()) {
                                                    this.groupedMessagesMap.put(element3.getGroupId(), (Object)groupedMessages15);
                                                }
                                                final ArrayList<TLRPC.PhotoSize> photoThumbs2 = element3.photoThumbs;
                                                if (photoThumbs2 != null && !photoThumbs2.isEmpty()) {
                                                    groupedMessages15.messages.set(index18, element3);
                                                    final MessageObject.GroupedMessagePosition value6 = groupedMessages15.positions.remove(messageObject31);
                                                    if (value6 != null) {
                                                        groupedMessages15.positions.put(element3, value6);
                                                    }
                                                    if ((longSparseArray15 = longSparseArray14) == null) {
                                                        longSparseArray15 = new LongSparseArray();
                                                    }
                                                    longSparseArray15.put(groupedMessages15.groupId, (Object)groupedMessages15);
                                                }
                                                else {
                                                    if ((longSparseArray15 = longSparseArray14) == null) {
                                                        longSparseArray15 = new LongSparseArray();
                                                    }
                                                    longSparseArray15.put(groupedMessages15.groupId, (Object)groupedMessages15);
                                                    if (index18 > 0 && index18 < groupedMessages15.messages.size() - 1) {
                                                        final MessageObject.GroupedMessages groupedMessages16 = new MessageObject.GroupedMessages();
                                                        groupedMessages16.groupId = Utilities.random.nextLong();
                                                        final ArrayList<MessageObject> messages18 = groupedMessages16.messages;
                                                        final ArrayList<MessageObject> messages19 = groupedMessages15.messages;
                                                        final int n44 = index18 + 1;
                                                        messages18.addAll(messages19.subList(n44, messages19.size()));
                                                        for (int index19 = 0; index19 < groupedMessages16.messages.size(); ++index19) {
                                                            groupedMessages16.messages.get(index19).localGroupId = groupedMessages16.groupId;
                                                            groupedMessages15.messages.remove(n44);
                                                        }
                                                        longSparseArray15.put(groupedMessages16.groupId, (Object)groupedMessages16);
                                                        this.groupedMessagesMap.put(groupedMessages16.groupId, (Object)groupedMessages16);
                                                    }
                                                    groupedMessages15.messages.remove(index18);
                                                }
                                            }
                                        }
                                    }
                                    if (element3.type >= 0) {
                                        this.messages.set(index16, element3);
                                        final ChatActivityAdapter chatAdapter18 = this.chatAdapter;
                                        if (chatAdapter18 != null) {
                                            chatAdapter18.updateRowAtPosition(chatAdapter18.messagesStartRow + index16);
                                        }
                                        longSparseArray14 = longSparseArray15;
                                        n45 = i;
                                        list14 = list12;
                                        if (index17 >= 0) {
                                            list13.set(index17, element3);
                                            longSparseArray14 = longSparseArray15;
                                            n45 = i;
                                            list14 = list12;
                                        }
                                        break Label_16847;
                                    }
                                    else {
                                        this.messages.remove(index16);
                                        final ChatActivityAdapter chatAdapter19 = this.chatAdapter;
                                        if (chatAdapter19 != null) {
                                            chatAdapter19.notifyItemRemoved(chatAdapter19.messagesStartRow + index16);
                                        }
                                        longSparseArray14 = longSparseArray15;
                                        n45 = i;
                                        list14 = list12;
                                        if (index17 < 0) {
                                            break Label_16847;
                                        }
                                        list13.remove(index17);
                                        longSparseArray14 = longSparseArray15;
                                        n45 = i;
                                        list14 = list12;
                                        if (list13.isEmpty()) {
                                            this.messagesByDays.remove(messageObject31.dateKey);
                                            this.messages.remove(index16);
                                            final ChatActivityAdapter chatAdapter20 = this.chatAdapter;
                                            chatAdapter20.notifyItemRemoved(chatAdapter20.messagesStartRow);
                                            longSparseArray14 = longSparseArray15;
                                            n45 = i;
                                            list14 = list12;
                                        }
                                        break Label_16847;
                                    }
                                }
                            }
                            list14 = list12;
                            n45 = i;
                        }
                        i = n45 + 1;
                        list12 = list14;
                    }
                    if (longSparseArray14 != null) {
                        MessageObject.GroupedMessages groupedMessages17;
                        ArrayList<MessageObject> messages20;
                        ChatActivityAdapter chatAdapter21;
                        for (i = 0; i < longSparseArray14.size(); ++i) {
                            groupedMessages17 = (MessageObject.GroupedMessages)longSparseArray14.valueAt(i);
                            if (groupedMessages17.messages.isEmpty()) {
                                this.groupedMessagesMap.remove(groupedMessages17.groupId);
                            }
                            else {
                                groupedMessages17.calculate();
                                messages20 = groupedMessages17.messages;
                                j = this.messages.indexOf(messages20.get(messages20.size() - 1));
                                if (j >= 0) {
                                    chatAdapter21 = this.chatAdapter;
                                    if (chatAdapter21 != null) {
                                        chatAdapter21.notifyItemRangeChanged(j + chatAdapter21.messagesStartRow, groupedMessages17.messages.size());
                                    }
                                }
                            }
                        }
                    }
                }
                else if (i == NotificationCenter.notificationsSettingsUpdated) {
                    this.updateTitleIcons();
                    if (ChatObject.isChannel(this.currentChat)) {
                        this.updateBottomOverlay();
                    }
                }
                else if (i == NotificationCenter.replyMessagesDidLoad) {
                    if ((long)array[0] == this.dialog_id) {
                        this.updateVisibleRows();
                    }
                }
                else if (i == NotificationCenter.pinnedMessageDidLoad) {
                    final MessageObject pinnedMessageObject2 = (MessageObject)array[0];
                    if (pinnedMessageObject2.getDialogId() == this.dialog_id) {
                        final TLRPC.ChatFull chatInfo8 = this.chatInfo;
                        if (chatInfo8 == null || chatInfo8.pinned_msg_id != pinnedMessageObject2.getId()) {
                            final TLRPC.UserFull userInfo4 = this.userInfo;
                            if (userInfo4 == null || userInfo4.pinned_msg_id != pinnedMessageObject2.getId()) {
                                return;
                            }
                        }
                        this.pinnedMessageObject = pinnedMessageObject2;
                        this.loadingPinnedMessage = 0;
                        this.updatePinnedMessageView(true);
                    }
                }
                else if (i == NotificationCenter.didReceivedWebpages) {
                    final ArrayList list15 = (ArrayList)array[0];
                    i = 0;
                    j = 0;
                    while (i < list15.size()) {
                        final TLRPC.Message message2 = list15.get(i);
                        final long dialogId = MessageObject.getDialogId(message2);
                        if (dialogId == this.dialog_id || dialogId == this.mergeDialogId) {
                            final SparseArray<MessageObject>[] messagesDict = this.messagesDict;
                            int n46;
                            if (dialogId == this.dialog_id) {
                                n46 = 0;
                            }
                            else {
                                n46 = 1;
                            }
                            final MessageObject messageObject32 = (MessageObject)messagesDict[n46].get(message2.id);
                            if (messageObject32 != null) {
                                messageObject32.messageOwner.media = new TLRPC.TL_messageMediaWebPage();
                                messageObject32.messageOwner.media.webpage = message2.media.webpage;
                                messageObject32.generateThumbs(true);
                                j = 1;
                            }
                        }
                        ++i;
                    }
                    if (j != 0) {
                        this.updateVisibleRows();
                    }
                }
                else if (i == NotificationCenter.didReceivedWebpagesInUpdates) {
                    if (this.foundWebPage != null) {
                        LongSparseArray longSparseArray16;
                        TLRPC.WebPage webPage;
                        for (longSparseArray16 = (LongSparseArray)array[0], i = 0; i < longSparseArray16.size(); ++i) {
                            webPage = (TLRPC.WebPage)longSparseArray16.valueAt(i);
                            if (webPage.id == this.foundWebPage.id) {
                                this.showFieldPanelForWebPage(!(webPage instanceof TLRPC.TL_webPageEmpty), webPage, false);
                                break;
                            }
                        }
                    }
                }
                else if (i == NotificationCenter.messagesReadContent) {
                    final ArrayList list16 = (ArrayList)array[0];
                    if (ChatObject.isChannel(this.currentChat)) {
                        i = this.currentChat.id;
                    }
                    else {
                        i = 0;
                    }
                    j = 0;
                    boolean b9 = false;
                    while (j < list16.size()) {
                        final long longValue4 = list16.get(j);
                        int n47;
                        if ((n47 = (int)(longValue4 >> 32)) < 0) {
                            n47 = 0;
                        }
                        if (n47 == i) {
                            final MessageObject messageObject33 = (MessageObject)this.messagesDict[0].get((int)longValue4);
                            if (messageObject33 != null) {
                                messageObject33.setContentIsRead();
                                if (messageObject33.messageOwner.mentioned) {
                                    --this.newMentionsCount;
                                    final int newMentionsCount = this.newMentionsCount;
                                    if (newMentionsCount <= 0) {
                                        this.newMentionsCount = 0;
                                        this.showMentionDownButton(false, this.hasAllMentionsLocal = true);
                                    }
                                    else {
                                        final TextView mentiondownButtonCounter5 = this.mentiondownButtonCounter;
                                        if (mentiondownButtonCounter5 != null) {
                                            mentiondownButtonCounter5.setText((CharSequence)String.format("%d", newMentionsCount));
                                        }
                                    }
                                }
                                b9 = true;
                            }
                        }
                        ++j;
                    }
                    if (b9) {
                        this.updateVisibleRows();
                    }
                }
                else if (i == NotificationCenter.botInfoDidLoad) {
                    i = (int)array[1];
                    if (super.classGuid == i) {
                        final TLRPC.BotInfo botInfo2 = (TLRPC.BotInfo)array[0];
                        if (this.currentEncryptedChat == null) {
                            if (!botInfo2.commands.isEmpty() && !ChatObject.isChannel(this.currentChat)) {
                                this.hasBotsCommands = true;
                            }
                            this.botInfo.put(botInfo2.user_id, (Object)botInfo2);
                            final ChatActivityAdapter chatAdapter22 = this.chatAdapter;
                            if (chatAdapter22 != null) {
                                chatAdapter22.notifyItemChanged(chatAdapter22.botInfoRow);
                            }
                            Label_17759: {
                                if (this.mentionsAdapter != null) {
                                    if (ChatObject.isChannel(this.currentChat)) {
                                        final TLRPC.Chat currentChat12 = this.currentChat;
                                        if (currentChat12 == null || !currentChat12.megagroup) {
                                            break Label_17759;
                                        }
                                    }
                                    this.mentionsAdapter.setBotInfo(this.botInfo);
                                }
                            }
                            final ChatActivityEnterView chatActivityEnterView7 = this.chatActivityEnterView;
                            if (chatActivityEnterView7 != null) {
                                chatActivityEnterView7.setBotsCount(this.botsCount, this.hasBotsCommands);
                            }
                        }
                        this.updateBotButtons();
                    }
                }
                else if (i == NotificationCenter.botKeyboardDidLoad) {
                    if (this.dialog_id == (long)array[1]) {
                        final TLRPC.Message message3 = (TLRPC.Message)array[0];
                        if (message3 != null && !this.userBlocked) {
                            this.botButtons = new MessageObject(super.currentAccount, message3, false);
                            this.checkBotKeyboard();
                        }
                        else {
                            this.botButtons = null;
                            if (this.chatActivityEnterView != null) {
                                final MessageObject replyingMessageObject = this.replyingMessageObject;
                                if (replyingMessageObject != null && this.botReplyButtons == replyingMessageObject) {
                                    this.botReplyButtons = null;
                                    this.hideFieldPanel(true);
                                }
                                this.chatActivityEnterView.setButtons(this.botButtons);
                            }
                        }
                    }
                }
                else if (i == NotificationCenter.chatSearchResultsAvailable) {
                    if (super.classGuid == (int)array[0]) {
                        j = (int)array[1];
                        final long longValue5 = (long)array[3];
                        if (j != 0) {
                            if (longValue5 == this.dialog_id) {
                                i = 0;
                            }
                            else {
                                i = 1;
                            }
                            this.scrollToMessageId(j, 0, true, i, false);
                        }
                        else {
                            this.updateVisibleRows();
                        }
                        this.updateSearchButtons((int)array[2], (int)array[4], (int)array[5]);
                        final ActionBarMenuItem searchItem = this.searchItem;
                        if (searchItem != null) {
                            searchItem.setShowSearchProgress(false);
                        }
                    }
                }
                else if (i == NotificationCenter.chatSearchResultsLoading) {
                    if (super.classGuid == (int)array[0]) {
                        final ActionBarMenuItem searchItem2 = this.searchItem;
                        if (searchItem2 != null) {
                            searchItem2.setShowSearchProgress(true);
                        }
                    }
                }
                else if (i == NotificationCenter.didUpdatedMessagesViews) {
                    final SparseIntArray sparseIntArray = (SparseIntArray)((SparseArray)array[0]).get((int)this.dialog_id);
                    if (sparseIntArray != null) {
                        j = 0;
                        i = 0;
                        while (j < sparseIntArray.size()) {
                            final int key3 = sparseIntArray.keyAt(j);
                            final MessageObject messageObject34 = (MessageObject)this.messagesDict[0].get(key3);
                            int n48 = i;
                            if (messageObject34 != null) {
                                final int value7 = sparseIntArray.get(key3);
                                final TLRPC.Message messageOwner6 = messageObject34.messageOwner;
                                n48 = i;
                                if (value7 > messageOwner6.views) {
                                    messageOwner6.views = value7;
                                    n48 = 1;
                                }
                            }
                            ++j;
                            i = n48;
                        }
                        if (i != 0) {
                            this.updateVisibleRows();
                        }
                    }
                }
                else if (i == NotificationCenter.peerSettingsDidLoad) {
                    if ((long)array[0] == this.dialog_id) {
                        this.updateSpamView();
                    }
                }
                else if (i == NotificationCenter.newDraftReceived) {
                    if ((long)array[0] == this.dialog_id) {
                        this.applyDraftMaybe(true);
                    }
                }
                else if (i == NotificationCenter.userInfoDidLoad) {
                    final Integer n49 = (Integer)array[0];
                    final TLRPC.User currentUser7 = this.currentUser;
                    if (currentUser7 != null && currentUser7.id == n49) {
                        this.userInfo = (TLRPC.UserFull)array[1];
                        final ActionBarMenuItem headerItem = this.headerItem;
                        if (headerItem != null) {
                            if (this.userInfo.phone_calls_available) {
                                headerItem.showSubItem(32);
                            }
                            else {
                                headerItem.hideSubItem(32);
                            }
                        }
                        if (array[2] instanceof MessageObject) {
                            this.pinnedMessageObject = (MessageObject)array[2];
                            this.updatePinnedMessageView(false);
                        }
                        else {
                            this.updatePinnedMessageView(true);
                        }
                    }
                }
                else if (i == NotificationCenter.didSetNewWallpapper) {
                    if (super.fragmentView != null) {
                        this.contentView.setBackgroundImage(Theme.getCachedWallpaper(), Theme.isWallpaperMotion());
                        this.progressView2.getBackground().setColorFilter((ColorFilter)Theme.colorFilter);
                        final TextView emptyView = this.emptyView;
                        if (emptyView != null) {
                            emptyView.getBackground().setColorFilter((ColorFilter)Theme.colorFilter);
                        }
                        final ChatBigEmptyView bigEmptyView = this.bigEmptyView;
                        if (bigEmptyView != null) {
                            bigEmptyView.getBackground().setColorFilter((ColorFilter)Theme.colorFilter);
                        }
                        this.chatListView.invalidateViews();
                    }
                }
                else if (i == NotificationCenter.channelRightsUpdated) {
                    final TLRPC.Chat currentChat13 = (TLRPC.Chat)array[0];
                    final TLRPC.Chat currentChat14 = this.currentChat;
                    if (currentChat14 != null && currentChat13.id == currentChat14.id) {
                        final ChatActivityEnterView chatActivityEnterView8 = this.chatActivityEnterView;
                        if (chatActivityEnterView8 != null) {
                            this.currentChat = currentChat13;
                            chatActivityEnterView8.checkChannelRights();
                            this.checkRaiseSensors();
                            this.updateSecretStatus();
                        }
                    }
                }
                else if (i == NotificationCenter.updateMentionsCount) {
                    if (this.dialog_id == (long)array[0]) {
                        i = (int)array[1];
                        if (this.newMentionsCount > i) {
                            this.newMentionsCount = i;
                            i = this.newMentionsCount;
                            if (i <= 0) {
                                this.newMentionsCount = 0;
                                this.showMentionDownButton(false, this.hasAllMentionsLocal = true);
                            }
                            else {
                                this.mentiondownButtonCounter.setText((CharSequence)String.format("%d", i));
                            }
                        }
                    }
                }
                else if (i == NotificationCenter.audioRecordTooShort) {
                    this.showVoiceHint(false, (boolean)array[0]);
                }
                else if (i == NotificationCenter.videoLoadingStateChanged) {
                    final RecyclerListView chatListView10 = this.chatListView;
                    if (chatListView10 != null) {
                        final String anObject = (String)array[0];
                        View child6;
                        ChatMessageCell chatMessageCell4;
                        TLRPC.Document streamingMedia;
                        for (j = chatListView10.getChildCount(), i = 0; i < j; ++i) {
                            child6 = this.chatListView.getChildAt(i);
                            if (child6 instanceof ChatMessageCell) {
                                chatMessageCell4 = (ChatMessageCell)child6;
                                streamingMedia = chatMessageCell4.getStreamingMedia();
                                if (streamingMedia != null) {
                                    if (FileLoader.getAttachFileName(streamingMedia).equals(anObject)) {
                                        chatMessageCell4.updateButtonState(false, true, false);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            else {
                if (i == NotificationCenter.messagePlayingDidReset) {
                    this.destroyTextureView();
                }
                final RecyclerListView chatListView11 = this.chatListView;
                if (chatListView11 != null) {
                    View child7;
                    ChatMessageCell chatMessageCell5;
                    MessageObject messageObject35;
                    AnimatedFileDrawable animation3;
                    for (j = chatListView11.getChildCount(), i = 0; i < j; ++i) {
                        child7 = this.chatListView.getChildAt(i);
                        if (child7 instanceof ChatMessageCell) {
                            chatMessageCell5 = (ChatMessageCell)child7;
                            messageObject35 = chatMessageCell5.getMessageObject();
                            if (messageObject35 != null) {
                                if (!messageObject35.isVoice() && !messageObject35.isMusic()) {
                                    if (messageObject35.isVideo()) {
                                        chatMessageCell5.updateButtonState(false, true, false);
                                        if (!MediaController.getInstance().isPlayingMessage(messageObject35) && !MediaController.getInstance().isGoingToShowMessageObject(messageObject35)) {
                                            animation3 = chatMessageCell5.getPhotoImage().getAnimation();
                                            if (animation3 != null) {
                                                animation3.start();
                                            }
                                        }
                                    }
                                    else if (messageObject35.isRoundVideo() && !MediaController.getInstance().isPlayingMessage(messageObject35)) {
                                        chatMessageCell5.checkVideoPlayback(true);
                                    }
                                }
                                else {
                                    chatMessageCell5.updateButtonState(false, true, false);
                                }
                            }
                        }
                    }
                    View child8;
                    ContextLinkCell contextLinkCell2;
                    MessageObject messageObject36;
                    for (j = this.mentionListView.getChildCount(), i = 0; i < j; ++i) {
                        child8 = this.mentionListView.getChildAt(i);
                        if (child8 instanceof ContextLinkCell) {
                            contextLinkCell2 = (ContextLinkCell)child8;
                            messageObject36 = contextLinkCell2.getMessageObject();
                            if (messageObject36 != null && (messageObject36.isVoice() || messageObject36.isMusic())) {
                                contextLinkCell2.updateButtonState(false, true);
                            }
                        }
                    }
                }
            }
        }
    }
    
    @Override
    public void didSelectDialogs(final DialogsActivity dialogsActivity, final ArrayList<Long> list, final CharSequence charSequence, final boolean b) {
        final MessageObject forwardingMessage = this.forwardingMessage;
        final int n = 0;
        if (forwardingMessage == null && this.selectedMessagesIds[0].size() == 0 && this.selectedMessagesIds[1].size() == 0) {
            return;
        }
        final ArrayList<MessageObject> list2 = new ArrayList<MessageObject>();
        final MessageObject forwardingMessage2 = this.forwardingMessage;
        if (forwardingMessage2 != null) {
            final MessageObject.GroupedMessages forwardingMessageGroup = this.forwardingMessageGroup;
            if (forwardingMessageGroup != null) {
                list2.addAll(forwardingMessageGroup.messages);
            }
            else {
                list2.add(forwardingMessage2);
            }
            this.forwardingMessage = null;
            this.forwardingMessageGroup = null;
        }
        else {
            for (int i = 1; i >= 0; --i) {
                final ArrayList<Comparable> list3 = new ArrayList<Comparable>();
                for (int j = 0; j < this.selectedMessagesIds[i].size(); ++j) {
                    list3.add(this.selectedMessagesIds[i].keyAt(j));
                }
                Collections.sort(list3);
                for (int k = 0; k < list3.size(); ++k) {
                    final MessageObject e = (MessageObject)this.selectedMessagesIds[i].get((int)list3.get(k));
                    if (e != null) {
                        list2.add(e);
                    }
                }
                this.selectedMessagesCanCopyIds[i].clear();
                this.selectedMessagesCanStarIds[i].clear();
                this.selectedMessagesIds[i].clear();
            }
            this.hideActionMode();
            this.updatePinnedMessageView(true);
        }
        if (list.size() <= 1 && list.get(0) != UserConfig.getInstance(super.currentAccount).getClientUserId() && charSequence == null) {
            final long longValue = list.get(0);
            if (longValue != this.dialog_id) {
                final int n2 = (int)longValue;
                final int n3 = (int)(longValue >> 32);
                final Bundle bundle = new Bundle();
                bundle.putBoolean("scrollToTopOnResume", this.scrollToTopOnResume);
                if (n2 != 0) {
                    if (n2 > 0) {
                        bundle.putInt("user_id", n2);
                    }
                    else if (n2 < 0) {
                        bundle.putInt("chat_id", -n2);
                    }
                }
                else {
                    bundle.putInt("enc_id", n3);
                }
                if (n2 != 0 && !MessagesController.getInstance(super.currentAccount).checkCanOpenChat(bundle, dialogsActivity)) {
                    return;
                }
                final ChatActivity chatActivity = new ChatActivity(bundle);
                if (this.presentFragment(chatActivity, true)) {
                    chatActivity.showFieldPanelForForward(true, list2);
                    if (!AndroidUtilities.isTablet()) {
                        this.removeSelfFromStack();
                    }
                }
                else {
                    dialogsActivity.finishFragment();
                }
            }
            else {
                dialogsActivity.finishFragment();
                this.moveScrollToLastMessage();
                this.showFieldPanelForForward(true, list2);
                if (AndroidUtilities.isTablet()) {
                    this.hideActionMode();
                    this.updatePinnedMessageView(true);
                }
                this.updateVisibleRows();
            }
        }
        else {
            for (int l = n; l < list.size(); ++l) {
                final long longValue2 = list.get(l);
                if (charSequence != null) {
                    SendMessagesHelper.getInstance(super.currentAccount).sendMessage(charSequence.toString(), longValue2, null, null, true, null, null, null);
                }
                SendMessagesHelper.getInstance(super.currentAccount).sendMessage(list2, longValue2);
            }
            dialogsActivity.finishFragment();
        }
    }
    
    @Override
    public void didSelectLocation(final TLRPC.MessageMedia messageMedia, final int n) {
        SendMessagesHelper.getInstance(super.currentAccount).sendMessage(messageMedia, this.dialog_id, this.replyingMessageObject, null, null);
        this.moveScrollToLastMessage();
        if (n == 1) {
            this.hideFieldPanel(false);
            DataQuery.getInstance(super.currentAccount).cleanDraft(this.dialog_id, true);
        }
        if (this.paused) {
            this.scrollToTopOnResume = true;
        }
    }
    
    @Override
    public void dismissCurrentDialig() {
        final ChatAttachAlert chatAttachAlert = this.chatAttachAlert;
        if (chatAttachAlert != null && super.visibleDialog == chatAttachAlert) {
            chatAttachAlert.closeCamera(false);
            this.chatAttachAlert.dismissInternal();
            this.chatAttachAlert.hideCamera(true);
            return;
        }
        super.dismissCurrentDialig();
    }
    
    @Override
    public boolean dismissDialogOnPause(final Dialog dialog) {
        return dialog != this.chatAttachAlert && super.dismissDialogOnPause(dialog);
    }
    
    @Override
    public boolean extendActionMode(final Menu menu) {
        if (PhotoViewer.hasInstance() && PhotoViewer.getInstance().isVisible()) {
            if (PhotoViewer.getInstance().getSelectiongLength() == 0 || menu.findItem(16908321) == null) {
                return true;
            }
        }
        else {
            if (this.chatActivityEnterView.getSelectionLength() == 0) {
                return true;
            }
            if (menu.findItem(16908321) == null) {
                return true;
            }
        }
        if (Build$VERSION.SDK_INT >= 23) {
            menu.removeItem(16908341);
        }
        final SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder((CharSequence)LocaleController.getString("Bold", 2131558847));
        spannableStringBuilder.setSpan((Object)new TypefaceSpan(AndroidUtilities.getTypeface("fonts/rmedium.ttf")), 0, spannableStringBuilder.length(), 33);
        menu.add(2131230843, 2131230842, 6, (CharSequence)spannableStringBuilder);
        final SpannableStringBuilder spannableStringBuilder2 = new SpannableStringBuilder((CharSequence)LocaleController.getString("Italic", 2131559701));
        spannableStringBuilder2.setSpan((Object)new TypefaceSpan(AndroidUtilities.getTypeface("fonts/ritalic.ttf")), 0, spannableStringBuilder2.length(), 33);
        menu.add(2131230843, 2131230844, 7, (CharSequence)spannableStringBuilder2);
        final SpannableStringBuilder spannableStringBuilder3 = new SpannableStringBuilder((CharSequence)LocaleController.getString("Mono", 2131559876));
        spannableStringBuilder3.setSpan((Object)new TypefaceSpan(Typeface.MONOSPACE), 0, spannableStringBuilder3.length(), 33);
        menu.add(2131230843, 2131230846, 8, (CharSequence)spannableStringBuilder3);
        menu.add(2131230843, 2131230845, 9, (CharSequence)LocaleController.getString("CreateLink", 2131559169));
        menu.add(2131230843, 2131230847, 10, (CharSequence)LocaleController.getString("Regular", 2131560552));
        return true;
    }
    
    @Override
    public void finishFragment() {
        super.finishFragment();
        final ActionBarPopupWindow scrimPopupWindow = this.scrimPopupWindow;
        if (scrimPopupWindow != null) {
            scrimPopupWindow.dismiss();
        }
    }
    
    public TLRPC.Chat getCurrentChat() {
        return this.currentChat;
    }
    
    public TLRPC.ChatFull getCurrentChatInfo() {
        return this.chatInfo;
    }
    
    public TLRPC.EncryptedChat getCurrentEncryptedChat() {
        return this.currentEncryptedChat;
    }
    
    public TLRPC.User getCurrentUser() {
        return this.currentUser;
    }
    
    public TLRPC.UserFull getCurrentUserInfo() {
        return this.userInfo;
    }
    
    public long getDialogId() {
        return this.dialog_id;
    }
    
    @Override
    public ThemeDescription[] getThemeDescriptions() {
        final _$$Lambda$ChatActivity$WruAO1rnumLf6ecGnTvBssodWEc $$Lambda$ChatActivity$WruAO1rnumLf6ecGnTvBssodWEc = new _$$Lambda$ChatActivity$WruAO1rnumLf6ecGnTvBssodWEc(this);
        final ThemeDescription themeDescription = new ThemeDescription(super.fragmentView, 0, null, null, null, null, "chat_wallpaper");
        final ThemeDescription themeDescription2 = new ThemeDescription((View)super.actionBar, ThemeDescription.FLAG_BACKGROUND, null, null, null, null, "actionBarDefault");
        final ThemeDescription themeDescription3 = new ThemeDescription((View)this.chatListView, ThemeDescription.FLAG_LISTGLOWCOLOR, null, null, null, null, "actionBarDefault");
        final ThemeDescription themeDescription4 = new ThemeDescription((View)super.actionBar, ThemeDescription.FLAG_AB_ITEMSCOLOR, null, null, null, null, "actionBarDefaultIcon");
        final ThemeDescription themeDescription5 = new ThemeDescription((View)super.actionBar, ThemeDescription.FLAG_AB_SELECTORCOLOR, null, null, null, null, "actionBarDefaultSelector");
        final ThemeDescription themeDescription6 = new ThemeDescription((View)super.actionBar, ThemeDescription.FLAG_AB_SUBMENUBACKGROUND, null, null, null, null, "actionBarDefaultSubmenuBackground");
        final ThemeDescription themeDescription7 = new ThemeDescription((View)super.actionBar, ThemeDescription.FLAG_AB_SUBMENUITEM, null, null, null, null, "actionBarDefaultSubmenuItem");
        final ThemeDescription themeDescription8 = new ThemeDescription((View)super.actionBar, ThemeDescription.FLAG_AB_SUBMENUITEM | ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, "actionBarDefaultSubmenuItemIcon");
        final ThemeDescription themeDescription9 = new ThemeDescription((View)super.actionBar, ThemeDescription.FLAG_BACKGROUND, null, null, null, null, "actionBarDefault");
        final ThemeDescription themeDescription10 = new ThemeDescription((View)this.chatListView, ThemeDescription.FLAG_LISTGLOWCOLOR, null, null, null, null, "actionBarDefault");
        final ThemeDescription themeDescription11 = new ThemeDescription((View)super.actionBar, ThemeDescription.FLAG_AB_ITEMSCOLOR, null, null, null, null, "actionBarDefaultIcon");
        final ChatAvatarContainer avatarContainer = this.avatarContainer;
        final View view = null;
        SimpleTextView titleTextView;
        if (avatarContainer != null) {
            titleTextView = avatarContainer.getTitleTextView();
        }
        else {
            titleTextView = null;
        }
        final ThemeDescription themeDescription12 = new ThemeDescription(titleTextView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, "actionBarDefaultTitle");
        final ChatAvatarContainer avatarContainer2 = this.avatarContainer;
        SimpleTextView titleTextView2;
        if (avatarContainer2 != null) {
            titleTextView2 = avatarContainer2.getTitleTextView();
        }
        else {
            titleTextView2 = null;
        }
        final ThemeDescription themeDescription13 = new ThemeDescription(titleTextView2, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, "actionBarDefaultSubtitle");
        final ChatAvatarContainer avatarContainer3 = this.avatarContainer;
        SimpleTextView subtitleTextView;
        if (avatarContainer3 != null) {
            subtitleTextView = avatarContainer3.getSubtitleTextView();
        }
        else {
            subtitleTextView = null;
        }
        final ThemeDescription themeDescription14 = new ThemeDescription(subtitleTextView, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_CHECKTAG, null, new Paint[] { Theme.chat_statusPaint, Theme.chat_statusRecordPaint }, null, null, "chat_status", null);
        final ChatAvatarContainer avatarContainer4 = this.avatarContainer;
        SimpleTextView subtitleTextView2;
        if (avatarContainer4 != null) {
            subtitleTextView2 = avatarContainer4.getSubtitleTextView();
        }
        else {
            subtitleTextView2 = null;
        }
        final ThemeDescription themeDescription15 = new ThemeDescription(subtitleTextView2, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_CHECKTAG, null, null, null, null, "actionBarDefaultSubtitle", null);
        final ThemeDescription themeDescription16 = new ThemeDescription((View)super.actionBar, ThemeDescription.FLAG_AB_SELECTORCOLOR, null, null, null, null, "actionBarDefaultSelector");
        final ThemeDescription themeDescription17 = new ThemeDescription((View)super.actionBar, ThemeDescription.FLAG_AB_SEARCH, null, null, null, null, "actionBarDefaultSearch");
        final ThemeDescription themeDescription18 = new ThemeDescription((View)super.actionBar, ThemeDescription.FLAG_AB_SEARCHPLACEHOLDER, null, null, null, null, "actionBarDefaultSearchPlaceholder");
        final ThemeDescription themeDescription19 = new ThemeDescription((View)super.actionBar, ThemeDescription.FLAG_AB_AM_ITEMSCOLOR, null, null, null, null, "actionBarActionModeDefaultIcon");
        final ThemeDescription themeDescription20 = new ThemeDescription((View)super.actionBar, ThemeDescription.FLAG_AB_AM_BACKGROUND, null, null, null, null, "actionBarActionModeDefault");
        final ThemeDescription themeDescription21 = new ThemeDescription((View)super.actionBar, ThemeDescription.FLAG_AB_AM_TOPBACKGROUND, null, null, null, null, "actionBarActionModeDefaultTop");
        final ThemeDescription themeDescription22 = new ThemeDescription((View)super.actionBar, ThemeDescription.FLAG_AB_AM_SELECTORCOLOR, null, null, null, null, "actionBarActionModeDefaultSelector");
        final ThemeDescription themeDescription23 = new ThemeDescription(this.selectedMessagesCountTextView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, "actionBarActionModeDefaultIcon");
        final ChatAvatarContainer avatarContainer5 = this.avatarContainer;
        SimpleTextView titleTextView3;
        if (avatarContainer5 != null) {
            titleTextView3 = avatarContainer5.getTitleTextView();
        }
        else {
            titleTextView3 = null;
        }
        final ThemeDescription themeDescription24 = new ThemeDescription(titleTextView3, 0, null, null, new Drawable[] { Theme.chat_muteIconDrawable }, null, "chat_muteIcon");
        final ChatAvatarContainer avatarContainer6 = this.avatarContainer;
        SimpleTextView titleTextView4;
        if (avatarContainer6 != null) {
            titleTextView4 = avatarContainer6.getTitleTextView();
        }
        else {
            titleTextView4 = null;
        }
        final ThemeDescription themeDescription25 = new ThemeDescription(titleTextView4, 0, null, null, new Drawable[] { Theme.chat_lockIconDrawable }, null, "chat_lockIcon");
        final ThemeDescription themeDescription26 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, new Drawable[] { Theme.avatar_broadcastDrawable, Theme.avatar_savedDrawable }, null, "avatar_text");
        final ThemeDescription themeDescription27 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "avatar_backgroundRed");
        final ThemeDescription themeDescription28 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "avatar_backgroundOrange");
        final ThemeDescription themeDescription29 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "avatar_backgroundViolet");
        final ThemeDescription themeDescription30 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "avatar_backgroundGreen");
        final ThemeDescription themeDescription31 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "avatar_backgroundCyan");
        final ThemeDescription themeDescription32 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "avatar_backgroundBlue");
        final ThemeDescription themeDescription33 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "avatar_backgroundPink");
        final ThemeDescription themeDescription34 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "avatar_nameInMessageRed");
        final ThemeDescription themeDescription35 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "avatar_nameInMessageOrange");
        final ThemeDescription themeDescription36 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "avatar_nameInMessageViolet");
        final ThemeDescription themeDescription37 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "avatar_nameInMessageGreen");
        final ThemeDescription themeDescription38 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "avatar_nameInMessageCyan");
        final ThemeDescription themeDescription39 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "avatar_nameInMessageBlue");
        final ThemeDescription themeDescription40 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "avatar_nameInMessagePink");
        final ThemeDescription themeDescription41 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class, BotHelpCell.class }, null, new Drawable[] { Theme.chat_msgInDrawable, Theme.chat_msgInMediaDrawable }, null, "chat_inBubble");
        final ThemeDescription themeDescription42 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, new Drawable[] { Theme.chat_msgInSelectedDrawable, Theme.chat_msgInMediaSelectedDrawable }, null, "chat_inBubbleSelected");
        final ThemeDescription themeDescription43 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class, BotHelpCell.class }, null, new Drawable[] { Theme.chat_msgInShadowDrawable, Theme.chat_msgInMediaShadowDrawable }, null, "chat_inBubbleShadow");
        final ThemeDescription themeDescription44 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, new Drawable[] { Theme.chat_msgOutDrawable, Theme.chat_msgOutMediaDrawable }, null, "chat_outBubble");
        final ThemeDescription themeDescription45 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, new Drawable[] { Theme.chat_msgOutSelectedDrawable, Theme.chat_msgOutMediaSelectedDrawable }, null, "chat_outBubbleSelected");
        final ThemeDescription themeDescription46 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, new Drawable[] { Theme.chat_msgOutShadowDrawable, Theme.chat_msgOutMediaShadowDrawable }, null, "chat_outBubbleShadow");
        final ThemeDescription themeDescription47 = new ThemeDescription((View)this.chatListView, ThemeDescription.FLAG_TEXTCOLOR, new Class[] { ChatActionCell.class }, (Paint)Theme.chat_actionTextPaint, null, null, "chat_serviceText");
        final ThemeDescription themeDescription48 = new ThemeDescription((View)this.chatListView, ThemeDescription.FLAG_LINKCOLOR, new Class[] { ChatActionCell.class }, (Paint)Theme.chat_actionTextPaint, null, null, "chat_serviceLink");
        final ThemeDescription themeDescription49 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, new Drawable[] { Theme.chat_shareIconDrawable, Theme.chat_replyIconDrawable, Theme.chat_botInlineDrawable, Theme.chat_botLinkDrawalbe, Theme.chat_goIconDrawable }, null, "chat_serviceIcon");
        final ThemeDescription themeDescription50 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class, ChatActionCell.class }, null, null, null, "chat_serviceBackground");
        final ThemeDescription themeDescription51 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class, ChatActionCell.class }, null, null, null, "chat_serviceBackgroundSelected");
        final ThemeDescription themeDescription52 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class, BotHelpCell.class }, null, null, null, "chat_messageTextIn");
        final ThemeDescription themeDescription53 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_messageTextOut");
        final ThemeDescription themeDescription54 = new ThemeDescription((View)this.chatListView, ThemeDescription.FLAG_LINKCOLOR, new Class[] { ChatMessageCell.class, BotHelpCell.class }, null, null, null, "chat_messageLinkIn", null);
        final ThemeDescription themeDescription55 = new ThemeDescription((View)this.chatListView, ThemeDescription.FLAG_LINKCOLOR, new Class[] { ChatMessageCell.class }, null, null, null, "chat_messageLinkOut", null);
        final ThemeDescription themeDescription56 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, new Drawable[] { Theme.chat_msgNoSoundDrawable }, null, "chat_mediaTimeText");
        final ThemeDescription themeDescription57 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, new Drawable[] { Theme.chat_msgOutCheckDrawable, Theme.chat_msgOutHalfCheckDrawable }, null, "chat_outSentCheck");
        final ThemeDescription themeDescription58 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, new Drawable[] { Theme.chat_msgOutCheckSelectedDrawable, Theme.chat_msgOutHalfCheckSelectedDrawable }, null, "chat_outSentCheckSelected");
        final ThemeDescription themeDescription59 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, new Drawable[] { Theme.chat_msgOutClockDrawable }, null, "chat_outSentClock");
        final ThemeDescription themeDescription60 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, new Drawable[] { Theme.chat_msgOutSelectedClockDrawable }, null, "chat_outSentClockSelected");
        final ThemeDescription themeDescription61 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, new Drawable[] { Theme.chat_msgInClockDrawable }, null, "chat_inSentClock");
        final ThemeDescription themeDescription62 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, new Drawable[] { Theme.chat_msgInSelectedClockDrawable }, null, "chat_inSentClockSelected");
        final ThemeDescription themeDescription63 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, new Drawable[] { Theme.chat_msgMediaCheckDrawable, Theme.chat_msgMediaHalfCheckDrawable }, null, "chat_mediaSentCheck");
        final ThemeDescription themeDescription64 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, new Drawable[] { Theme.chat_msgStickerHalfCheckDrawable, Theme.chat_msgStickerCheckDrawable, Theme.chat_msgStickerClockDrawable, Theme.chat_msgStickerViewsDrawable }, null, "chat_serviceText");
        final ThemeDescription themeDescription65 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, new Drawable[] { Theme.chat_msgMediaClockDrawable }, null, "chat_mediaSentClock");
        final ThemeDescription themeDescription66 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, new Drawable[] { Theme.chat_msgOutViewsDrawable }, null, "chat_outViews");
        final ThemeDescription themeDescription67 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, new Drawable[] { Theme.chat_msgOutViewsSelectedDrawable }, null, "chat_outViewsSelected");
        final ThemeDescription themeDescription68 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, new Drawable[] { Theme.chat_msgInViewsDrawable }, null, "chat_inViews");
        final ThemeDescription themeDescription69 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, new Drawable[] { Theme.chat_msgInViewsSelectedDrawable }, null, "chat_inViewsSelected");
        final ThemeDescription themeDescription70 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, new Drawable[] { Theme.chat_msgMediaViewsDrawable }, null, "chat_mediaViews");
        final ThemeDescription themeDescription71 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, new Drawable[] { Theme.chat_msgOutMenuDrawable }, null, "chat_outMenu");
        final ThemeDescription themeDescription72 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, new Drawable[] { Theme.chat_msgOutMenuSelectedDrawable }, null, "chat_outMenuSelected");
        final ThemeDescription themeDescription73 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, new Drawable[] { Theme.chat_msgInMenuDrawable }, null, "chat_inMenu");
        final ThemeDescription themeDescription74 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, new Drawable[] { Theme.chat_msgInMenuSelectedDrawable }, null, "chat_inMenuSelected");
        final ThemeDescription themeDescription75 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, new Drawable[] { Theme.chat_msgMediaMenuDrawable }, null, "chat_mediaMenu");
        final ThemeDescription themeDescription76 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, new Drawable[] { Theme.chat_msgOutInstantDrawable, Theme.chat_msgOutCallDrawable }, null, "chat_outInstant");
        final ThemeDescription themeDescription77 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, new Drawable[] { Theme.chat_msgOutCallSelectedDrawable }, null, "chat_outInstantSelected");
        final ThemeDescription themeDescription78 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, new Drawable[] { Theme.chat_msgInInstantDrawable, Theme.chat_msgInCallDrawable }, null, "chat_inInstant");
        final ThemeDescription themeDescription79 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, new Drawable[] { Theme.chat_msgInCallSelectedDrawable }, null, "chat_inInstantSelected");
        final ThemeDescription themeDescription80 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, new Drawable[] { Theme.chat_msgCallUpGreenDrawable }, null, "chat_outUpCall");
        final ThemeDescription themeDescription81 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, new Drawable[] { Theme.chat_msgCallDownRedDrawable }, null, "chat_inUpCall");
        final ThemeDescription themeDescription82 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, new Drawable[] { Theme.chat_msgCallDownGreenDrawable }, null, "chat_inDownCall");
        final ThemeDescription themeDescription83 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, Theme.chat_msgErrorPaint, null, null, "chat_sentError");
        final ThemeDescription themeDescription84 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, new Drawable[] { Theme.chat_msgErrorDrawable }, null, "chat_sentErrorIcon");
        final ThemeDescription themeDescription85 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, (ThemeDescription.ThemeDescriptionDelegate)$$Lambda$ChatActivity$WruAO1rnumLf6ecGnTvBssodWEc, "chat_selectedBackground");
        final ThemeDescription themeDescription86 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, (Paint)Theme.chat_durationPaint, null, null, "chat_previewDurationText");
        final ThemeDescription themeDescription87 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, (Paint)Theme.chat_gamePaint, null, null, "chat_previewGameText");
        final ThemeDescription themeDescription88 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_inPreviewInstantText");
        final ThemeDescription themeDescription89 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_outPreviewInstantText");
        final ThemeDescription themeDescription90 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_inPreviewInstantSelectedText");
        final ThemeDescription themeDescription91 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_outPreviewInstantSelectedText");
        final ThemeDescription themeDescription92 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, Theme.chat_deleteProgressPaint, null, null, "chat_secretTimeText");
        final ThemeDescription themeDescription93 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_stickerNameText");
        final ThemeDescription themeDescription94 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, (Paint)Theme.chat_botButtonPaint, null, null, "chat_botButtonText");
        final ThemeDescription themeDescription95 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, Theme.chat_botProgressPaint, null, null, "chat_botProgress");
        final ThemeDescription themeDescription96 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, Theme.chat_timeBackgroundPaint, null, null, "chat_mediaTimeBackground");
        final ThemeDescription themeDescription97 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_inForwardedNameText");
        final ThemeDescription themeDescription98 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_outForwardedNameText");
        final ThemeDescription themeDescription99 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_inViaBotNameText");
        final ThemeDescription themeDescription100 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_outViaBotNameText");
        final ThemeDescription themeDescription101 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_stickerViaBotNameText");
        final ThemeDescription themeDescription102 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_inReplyLine");
        final ThemeDescription themeDescription103 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_outReplyLine");
        final ThemeDescription themeDescription104 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_stickerReplyLine");
        final ThemeDescription themeDescription105 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_inReplyNameText");
        final ThemeDescription themeDescription106 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_outReplyNameText");
        final ThemeDescription themeDescription107 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_stickerReplyNameText");
        final ThemeDescription themeDescription108 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_inReplyMessageText");
        final ThemeDescription themeDescription109 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_outReplyMessageText");
        final ThemeDescription themeDescription110 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_inReplyMediaMessageText");
        final ThemeDescription themeDescription111 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_outReplyMediaMessageText");
        final ThemeDescription themeDescription112 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_inReplyMediaMessageSelectedText");
        final ThemeDescription themeDescription113 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_outReplyMediaMessageSelectedText");
        final ThemeDescription themeDescription114 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_stickerReplyMessageText");
        final ThemeDescription themeDescription115 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_inPreviewLine");
        final ThemeDescription themeDescription116 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_outPreviewLine");
        final ThemeDescription themeDescription117 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_inSiteNameText");
        final ThemeDescription themeDescription118 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_outSiteNameText");
        final ThemeDescription themeDescription119 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_inContactNameText");
        final ThemeDescription themeDescription120 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_outContactNameText");
        final ThemeDescription themeDescription121 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_inContactPhoneText");
        final ThemeDescription themeDescription122 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_inContactPhoneSelectedText");
        final ThemeDescription themeDescription123 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_outContactPhoneText");
        final ThemeDescription themeDescription124 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_outContactPhoneSelectedText");
        final ThemeDescription themeDescription125 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_mediaProgress");
        final ThemeDescription themeDescription126 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_inAudioProgress");
        final ThemeDescription themeDescription127 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_outAudioProgress");
        final ThemeDescription themeDescription128 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_inAudioSelectedProgress");
        final ThemeDescription themeDescription129 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_outAudioSelectedProgress");
        final ThemeDescription themeDescription130 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_mediaTimeText");
        final ThemeDescription themeDescription131 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_inTimeText");
        final ThemeDescription themeDescription132 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_outTimeText");
        final ThemeDescription themeDescription133 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_inTimeSelectedText");
        final ThemeDescription themeDescription134 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_adminText");
        final ThemeDescription themeDescription135 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_adminSelectedText");
        final ThemeDescription themeDescription136 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_outTimeSelectedText");
        final ThemeDescription themeDescription137 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_inAudioPerfomerText");
        final ThemeDescription themeDescription138 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_inAudioPerfomerSelectedText");
        final ThemeDescription themeDescription139 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_outAudioPerfomerText");
        final ThemeDescription themeDescription140 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_outAudioPerfomerSelectedText");
        final ThemeDescription themeDescription141 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_inAudioTitleText");
        final ThemeDescription themeDescription142 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_outAudioTitleText");
        final ThemeDescription themeDescription143 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_inAudioDurationText");
        final ThemeDescription themeDescription144 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_outAudioDurationText");
        final ThemeDescription themeDescription145 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_inAudioDurationSelectedText");
        final ThemeDescription themeDescription146 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_outAudioDurationSelectedText");
        final ThemeDescription themeDescription147 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_inAudioSeekbar");
        final ThemeDescription themeDescription148 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_outAudioSeekbar");
        final ThemeDescription themeDescription149 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_inAudioSeekbarSelected");
        final ThemeDescription themeDescription150 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_outAudioSeekbarSelected");
        final ThemeDescription themeDescription151 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_inAudioSeekbarFill");
        final ThemeDescription themeDescription152 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_inAudioCacheSeekbar");
        final ThemeDescription themeDescription153 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_outAudioSeekbarFill");
        final ThemeDescription themeDescription154 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_outAudioCacheSeekbar");
        final ThemeDescription themeDescription155 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_inVoiceSeekbar");
        final ThemeDescription themeDescription156 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_outVoiceSeekbar");
        final ThemeDescription themeDescription157 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_inVoiceSeekbarSelected");
        final ThemeDescription themeDescription158 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_outVoiceSeekbarSelected");
        final ThemeDescription themeDescription159 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_inVoiceSeekbarFill");
        final ThemeDescription themeDescription160 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_outVoiceSeekbarFill");
        final ThemeDescription themeDescription161 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_inFileProgress");
        final ThemeDescription themeDescription162 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_outFileProgress");
        final ThemeDescription themeDescription163 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_inFileProgressSelected");
        final ThemeDescription themeDescription164 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_outFileProgressSelected");
        final ThemeDescription themeDescription165 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_inFileNameText");
        final ThemeDescription themeDescription166 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_outFileNameText");
        final ThemeDescription themeDescription167 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_inFileInfoText");
        final ThemeDescription themeDescription168 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_outFileInfoText");
        final ThemeDescription themeDescription169 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_inFileInfoSelectedText");
        final ThemeDescription themeDescription170 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_outFileInfoSelectedText");
        final ThemeDescription themeDescription171 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_inFileBackground");
        final ThemeDescription themeDescription172 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_outFileBackground");
        final ThemeDescription themeDescription173 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_inFileBackgroundSelected");
        final ThemeDescription themeDescription174 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_outFileBackgroundSelected");
        final ThemeDescription themeDescription175 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_inVenueInfoText");
        final ThemeDescription themeDescription176 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_outVenueInfoText");
        final ThemeDescription themeDescription177 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_inVenueInfoSelectedText");
        final ThemeDescription themeDescription178 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_outVenueInfoSelectedText");
        final ThemeDescription themeDescription179 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_mediaInfoText");
        final ThemeDescription themeDescription180 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, Theme.chat_urlPaint, null, null, "chat_linkSelectBackground");
        final ThemeDescription themeDescription181 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, Theme.chat_textSearchSelectionPaint, null, null, "chat_textSelectBackground");
        final ThemeDescription themeDescription182 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_outLoader");
        final ThemeDescription themeDescription183 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_outMediaIcon");
        final ThemeDescription themeDescription184 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_outLoaderSelected");
        final ThemeDescription themeDescription185 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_outMediaIconSelected");
        final ThemeDescription themeDescription186 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_inLoader");
        final ThemeDescription themeDescription187 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_inMediaIcon");
        final ThemeDescription themeDescription188 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_inLoaderSelected");
        final ThemeDescription themeDescription189 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, null, null, "chat_inMediaIconSelected");
        final RecyclerListView chatListView = this.chatListView;
        final int flag_BACKGROUNDFILTER = ThemeDescription.FLAG_BACKGROUNDFILTER;
        final Drawable[][] chat_photoStatesDrawables = Theme.chat_photoStatesDrawables;
        final ThemeDescription themeDescription190 = new ThemeDescription((View)chatListView, flag_BACKGROUNDFILTER, new Class[] { ChatMessageCell.class }, null, new Drawable[] { chat_photoStatesDrawables[0][0], chat_photoStatesDrawables[1][0], chat_photoStatesDrawables[2][0], chat_photoStatesDrawables[3][0] }, null, "chat_mediaLoaderPhoto");
        final RecyclerListView chatListView2 = this.chatListView;
        final Drawable[][] chat_photoStatesDrawables2 = Theme.chat_photoStatesDrawables;
        final ThemeDescription themeDescription191 = new ThemeDescription((View)chatListView2, 0, new Class[] { ChatMessageCell.class }, null, new Drawable[] { chat_photoStatesDrawables2[0][0], chat_photoStatesDrawables2[1][0], chat_photoStatesDrawables2[2][0], chat_photoStatesDrawables2[3][0] }, null, "chat_mediaLoaderPhotoIcon");
        final RecyclerListView chatListView3 = this.chatListView;
        final int flag_BACKGROUNDFILTER2 = ThemeDescription.FLAG_BACKGROUNDFILTER;
        final Drawable[][] chat_photoStatesDrawables3 = Theme.chat_photoStatesDrawables;
        final ThemeDescription themeDescription192 = new ThemeDescription((View)chatListView3, flag_BACKGROUNDFILTER2, new Class[] { ChatMessageCell.class }, null, new Drawable[] { chat_photoStatesDrawables3[0][1], chat_photoStatesDrawables3[1][1], chat_photoStatesDrawables3[2][1], chat_photoStatesDrawables3[3][1] }, null, "chat_mediaLoaderPhotoSelected");
        final RecyclerListView chatListView4 = this.chatListView;
        final Drawable[][] chat_photoStatesDrawables4 = Theme.chat_photoStatesDrawables;
        final ThemeDescription themeDescription193 = new ThemeDescription((View)chatListView4, 0, new Class[] { ChatMessageCell.class }, null, new Drawable[] { chat_photoStatesDrawables4[0][1], chat_photoStatesDrawables4[1][1], chat_photoStatesDrawables4[2][1], chat_photoStatesDrawables4[3][1] }, null, "chat_mediaLoaderPhotoIconSelected");
        final RecyclerListView chatListView5 = this.chatListView;
        final int flag_BACKGROUNDFILTER3 = ThemeDescription.FLAG_BACKGROUNDFILTER;
        final Drawable[][] chat_photoStatesDrawables5 = Theme.chat_photoStatesDrawables;
        final ThemeDescription themeDescription194 = new ThemeDescription((View)chatListView5, flag_BACKGROUNDFILTER3, new Class[] { ChatMessageCell.class }, null, new Drawable[] { chat_photoStatesDrawables5[7][0], chat_photoStatesDrawables5[8][0] }, null, "chat_outLoaderPhoto");
        final RecyclerListView chatListView6 = this.chatListView;
        final Drawable[][] chat_photoStatesDrawables6 = Theme.chat_photoStatesDrawables;
        final ThemeDescription themeDescription195 = new ThemeDescription((View)chatListView6, 0, new Class[] { ChatMessageCell.class }, null, new Drawable[] { chat_photoStatesDrawables6[7][0], chat_photoStatesDrawables6[8][0] }, null, "chat_outLoaderPhotoIcon");
        final RecyclerListView chatListView7 = this.chatListView;
        final int flag_BACKGROUNDFILTER4 = ThemeDescription.FLAG_BACKGROUNDFILTER;
        final Drawable[][] chat_photoStatesDrawables7 = Theme.chat_photoStatesDrawables;
        final ThemeDescription themeDescription196 = new ThemeDescription((View)chatListView7, flag_BACKGROUNDFILTER4, new Class[] { ChatMessageCell.class }, null, new Drawable[] { chat_photoStatesDrawables7[7][1], chat_photoStatesDrawables7[8][1] }, null, "chat_outLoaderPhotoSelected");
        final RecyclerListView chatListView8 = this.chatListView;
        final Drawable[][] chat_photoStatesDrawables8 = Theme.chat_photoStatesDrawables;
        final ThemeDescription themeDescription197 = new ThemeDescription((View)chatListView8, 0, new Class[] { ChatMessageCell.class }, null, new Drawable[] { chat_photoStatesDrawables8[7][1], chat_photoStatesDrawables8[8][1] }, null, "chat_outLoaderPhotoIconSelected");
        final RecyclerListView chatListView9 = this.chatListView;
        final int flag_BACKGROUNDFILTER5 = ThemeDescription.FLAG_BACKGROUNDFILTER;
        final Drawable[][] chat_photoStatesDrawables9 = Theme.chat_photoStatesDrawables;
        final ThemeDescription themeDescription198 = new ThemeDescription((View)chatListView9, flag_BACKGROUNDFILTER5, new Class[] { ChatMessageCell.class }, null, new Drawable[] { chat_photoStatesDrawables9[10][0], chat_photoStatesDrawables9[11][0] }, null, "chat_inLoaderPhoto");
        final RecyclerListView chatListView10 = this.chatListView;
        final Drawable[][] chat_photoStatesDrawables10 = Theme.chat_photoStatesDrawables;
        final ThemeDescription themeDescription199 = new ThemeDescription((View)chatListView10, 0, new Class[] { ChatMessageCell.class }, null, new Drawable[] { chat_photoStatesDrawables10[10][0], chat_photoStatesDrawables10[11][0] }, null, "chat_inLoaderPhotoIcon");
        final RecyclerListView chatListView11 = this.chatListView;
        final int flag_BACKGROUNDFILTER6 = ThemeDescription.FLAG_BACKGROUNDFILTER;
        final Drawable[][] chat_photoStatesDrawables11 = Theme.chat_photoStatesDrawables;
        final ThemeDescription themeDescription200 = new ThemeDescription((View)chatListView11, flag_BACKGROUNDFILTER6, new Class[] { ChatMessageCell.class }, null, new Drawable[] { chat_photoStatesDrawables11[10][1], chat_photoStatesDrawables11[11][1] }, null, "chat_inLoaderPhotoSelected");
        final RecyclerListView chatListView12 = this.chatListView;
        final Drawable[][] chat_photoStatesDrawables12 = Theme.chat_photoStatesDrawables;
        final ThemeDescription themeDescription201 = new ThemeDescription((View)chatListView12, 0, new Class[] { ChatMessageCell.class }, null, new Drawable[] { chat_photoStatesDrawables12[10][1], chat_photoStatesDrawables12[11][1] }, null, "chat_inLoaderPhotoIconSelected");
        final ThemeDescription themeDescription202 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, new Drawable[] { Theme.chat_photoStatesDrawables[9][0] }, null, "chat_outFileIcon");
        final ThemeDescription themeDescription203 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, new Drawable[] { Theme.chat_photoStatesDrawables[9][1] }, null, "chat_outFileSelectedIcon");
        final ThemeDescription themeDescription204 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, new Drawable[] { Theme.chat_photoStatesDrawables[12][0] }, null, "chat_inFileIcon");
        final ThemeDescription themeDescription205 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, new Drawable[] { Theme.chat_photoStatesDrawables[12][1] }, null, "chat_inFileSelectedIcon");
        final ThemeDescription themeDescription206 = new ThemeDescription((View)this.chatListView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[] { ChatMessageCell.class }, null, new Drawable[] { Theme.chat_contactDrawable[0] }, null, "chat_inContactBackground");
        final ThemeDescription themeDescription207 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, new Drawable[] { Theme.chat_contactDrawable[0] }, null, "chat_inContactIcon");
        final ThemeDescription themeDescription208 = new ThemeDescription((View)this.chatListView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[] { ChatMessageCell.class }, null, new Drawable[] { Theme.chat_contactDrawable[1] }, null, "chat_outContactBackground");
        final ThemeDescription themeDescription209 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, new Drawable[] { Theme.chat_contactDrawable[1] }, null, "chat_outContactIcon");
        final ThemeDescription themeDescription210 = new ThemeDescription((View)this.chatListView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[] { ChatMessageCell.class }, null, new Drawable[] { Theme.chat_locationDrawable[0] }, null, "chat_inLocationBackground");
        final ThemeDescription themeDescription211 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, new Drawable[] { Theme.chat_locationDrawable[0] }, null, "chat_inLocationIcon");
        final ThemeDescription themeDescription212 = new ThemeDescription((View)this.chatListView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[] { ChatMessageCell.class }, null, new Drawable[] { Theme.chat_locationDrawable[1] }, null, "chat_outLocationBackground");
        final ThemeDescription themeDescription213 = new ThemeDescription((View)this.chatListView, 0, new Class[] { ChatMessageCell.class }, null, new Drawable[] { Theme.chat_locationDrawable[1] }, null, "chat_outLocationIcon");
        final ThemeDescription themeDescription214 = new ThemeDescription((View)this.mentionContainer, 0, null, Theme.chat_composeBackgroundPaint, null, null, "chat_messagePanelBackground");
        final ThemeDescription themeDescription215 = new ThemeDescription((View)this.mentionContainer, 0, null, null, new Drawable[] { Theme.chat_composeShadowDrawable }, null, "chat_messagePanelShadow");
        final ThemeDescription themeDescription216 = new ThemeDescription((View)this.searchContainer, 0, null, Theme.chat_composeBackgroundPaint, null, null, "chat_messagePanelBackground");
        final ThemeDescription themeDescription217 = new ThemeDescription((View)this.searchContainer, 0, null, null, new Drawable[] { Theme.chat_composeShadowDrawable }, null, "chat_messagePanelShadow");
        final ThemeDescription themeDescription218 = new ThemeDescription((View)this.bottomOverlay, 0, null, Theme.chat_composeBackgroundPaint, null, null, "chat_messagePanelBackground");
        final ThemeDescription themeDescription219 = new ThemeDescription((View)this.bottomOverlay, 0, null, null, new Drawable[] { Theme.chat_composeShadowDrawable }, null, "chat_messagePanelShadow");
        final ThemeDescription themeDescription220 = new ThemeDescription((View)this.bottomOverlayChat, 0, null, Theme.chat_composeBackgroundPaint, null, null, "chat_messagePanelBackground");
        final ThemeDescription themeDescription221 = new ThemeDescription((View)this.bottomOverlayChat, 0, null, null, new Drawable[] { Theme.chat_composeShadowDrawable }, null, "chat_messagePanelShadow");
        final ThemeDescription themeDescription222 = new ThemeDescription((View)this.bottomMessagesActionContainer, 0, null, Theme.chat_composeBackgroundPaint, null, null, "chat_messagePanelBackground");
        final ThemeDescription themeDescription223 = new ThemeDescription((View)this.bottomMessagesActionContainer, 0, null, null, new Drawable[] { Theme.chat_composeShadowDrawable }, null, "chat_messagePanelShadow");
        final ThemeDescription themeDescription224 = new ThemeDescription((View)this.chatActivityEnterView, 0, null, Theme.chat_composeBackgroundPaint, null, null, "chat_messagePanelBackground");
        final ThemeDescription themeDescription225 = new ThemeDescription((View)this.chatActivityEnterView, 0, null, null, new Drawable[] { Theme.chat_composeShadowDrawable }, null, "chat_messagePanelShadow");
        final ThemeDescription themeDescription226 = new ThemeDescription((View)this.chatActivityEnterView, ThemeDescription.FLAG_BACKGROUND, new Class[] { ChatActivityEnterView.class }, new String[] { "audioVideoButtonContainer" }, null, null, null, "chat_messagePanelBackground");
        final ThemeDescription themeDescription227 = new ThemeDescription((View)this.chatActivityEnterView, ThemeDescription.FLAG_TEXTCOLOR, new Class[] { ChatActivityEnterView.class }, new String[] { "messageEditText" }, null, null, null, "chat_messagePanelText");
        final ThemeDescription themeDescription228 = new ThemeDescription((View)this.chatActivityEnterView, ThemeDescription.FLAG_TEXTCOLOR, new Class[] { ChatActivityEnterView.class }, new String[] { "recordSendText" }, null, null, null, "chat_fieldOverlayText");
        final ThemeDescription themeDescription229 = new ThemeDescription((View)this.chatActivityEnterView, ThemeDescription.FLAG_HINTTEXTCOLOR, new Class[] { ChatActivityEnterView.class }, new String[] { "messageEditText" }, null, null, null, "chat_messagePanelHint");
        final ThemeDescription themeDescription230 = new ThemeDescription((View)this.chatActivityEnterView, 0, new Class[] { ChatActivityEnterView.class }, new String[] { "sendButton" }, null, null, null, "chat_messagePanelSend");
        final ThemeDescription themeDescription231 = new ThemeDescription((View)this.chatActivityEnterView, 0, new Class[] { ChatActivityEnterView.class }, new String[] { "emojiButton" }, null, null, null, "chat_messagePanelIcons");
        final ThemeDescription themeDescription232 = new ThemeDescription((View)this.chatActivityEnterView, 0, new Class[] { ChatActivityEnterView.class }, new String[] { "botButton" }, null, null, null, "chat_messagePanelIcons");
        final ThemeDescription themeDescription233 = new ThemeDescription((View)this.chatActivityEnterView, 0, new Class[] { ChatActivityEnterView.class }, new String[] { "notifyButton" }, null, null, null, "chat_messagePanelIcons");
        final ThemeDescription themeDescription234 = new ThemeDescription((View)this.chatActivityEnterView, 0, new Class[] { ChatActivityEnterView.class }, new String[] { "attachButton" }, null, null, null, "chat_messagePanelIcons");
        final ThemeDescription themeDescription235 = new ThemeDescription((View)this.chatActivityEnterView, 0, new Class[] { ChatActivityEnterView.class }, new String[] { "audioSendButton" }, null, null, null, "chat_messagePanelIcons");
        final ThemeDescription themeDescription236 = new ThemeDescription((View)this.chatActivityEnterView, 0, new Class[] { ChatActivityEnterView.class }, new String[] { "videoSendButton" }, null, null, null, "chat_messagePanelIcons");
        final ThemeDescription themeDescription237 = new ThemeDescription((View)this.chatActivityEnterView, ThemeDescription.FLAG_IMAGECOLOR | ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[] { ChatActivityEnterView.class }, new String[] { "doneButtonImage" }, null, null, null, "chat_messagePanelSend");
        final ThemeDescription themeDescription238 = new ThemeDescription((View)this.chatActivityEnterView, ThemeDescription.FLAG_IMAGECOLOR, new Class[] { ChatActivityEnterView.class }, new String[] { "doneButtonImage" }, null, null, null, "chat_messagePanelBackground");
        final ThemeDescription themeDescription239 = new ThemeDescription((View)this.chatActivityEnterView, ThemeDescription.FLAG_BACKGROUND, new Class[] { ChatActivityEnterView.class }, new String[] { "recordedAudioPanel" }, null, null, null, "chat_messagePanelBackground");
        final ThemeDescription themeDescription240 = new ThemeDescription((View)this.chatActivityEnterView, 0, new Class[] { ChatActivityEnterView.class }, new String[] { "micDrawable" }, null, null, null, "chat_messagePanelVoicePressed");
        final ThemeDescription themeDescription241 = new ThemeDescription((View)this.chatActivityEnterView, 0, new Class[] { ChatActivityEnterView.class }, new String[] { "cameraDrawable" }, null, null, null, "chat_messagePanelVoicePressed");
        final ThemeDescription themeDescription242 = new ThemeDescription((View)this.chatActivityEnterView, 0, new Class[] { ChatActivityEnterView.class }, new String[] { "sendDrawable" }, null, null, null, "chat_messagePanelVoicePressed");
        final ThemeDescription themeDescription243 = new ThemeDescription((View)this.chatActivityEnterView, 0, new Class[] { ChatActivityEnterView.class }, new String[] { "lockDrawable" }, null, null, null, "key_chat_messagePanelVoiceLock");
        final ThemeDescription themeDescription244 = new ThemeDescription((View)this.chatActivityEnterView, 0, new Class[] { ChatActivityEnterView.class }, new String[] { "lockTopDrawable" }, null, null, null, "key_chat_messagePanelVoiceLock");
        final ThemeDescription themeDescription245 = new ThemeDescription((View)this.chatActivityEnterView, 0, new Class[] { ChatActivityEnterView.class }, new String[] { "lockArrowDrawable" }, null, null, null, "key_chat_messagePanelVoiceLock");
        final ThemeDescription themeDescription246 = new ThemeDescription((View)this.chatActivityEnterView, 0, new Class[] { ChatActivityEnterView.class }, new String[] { "lockBackgroundDrawable" }, null, null, null, "key_chat_messagePanelVoiceLockBackground");
        final ThemeDescription themeDescription247 = new ThemeDescription((View)this.chatActivityEnterView, 0, new Class[] { ChatActivityEnterView.class }, new String[] { "lockShadowDrawable" }, null, null, null, "key_chat_messagePanelVoiceLockShadow");
        final ThemeDescription themeDescription248 = new ThemeDescription((View)this.chatActivityEnterView, ThemeDescription.FLAG_IMAGECOLOR, new Class[] { ChatActivityEnterView.class }, new String[] { "recordDeleteImageView" }, null, null, null, "chat_messagePanelVoiceDelete");
        final ThemeDescription themeDescription249 = new ThemeDescription((View)this.chatActivityEnterView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[] { ChatActivityEnterView.class }, new String[] { "recordedAudioBackground" }, null, null, null, "chat_recordedVoiceBackground");
        final ThemeDescription themeDescription250 = new ThemeDescription((View)this.chatActivityEnterView, ThemeDescription.FLAG_TEXTCOLOR, new Class[] { ChatActivityEnterView.class }, new String[] { "recordTimeText" }, null, null, null, "chat_recordTime");
        final ThemeDescription themeDescription251 = new ThemeDescription((View)this.chatActivityEnterView, ThemeDescription.FLAG_BACKGROUND, new Class[] { ChatActivityEnterView.class }, new String[] { "recordTimeContainer" }, null, null, null, "chat_messagePanelBackground");
        final ThemeDescription themeDescription252 = new ThemeDescription((View)this.chatActivityEnterView, ThemeDescription.FLAG_TEXTCOLOR, new Class[] { ChatActivityEnterView.class }, new String[] { "recordCancelText" }, null, null, null, "chat_recordVoiceCancel");
        final ThemeDescription themeDescription253 = new ThemeDescription((View)this.chatActivityEnterView, ThemeDescription.FLAG_BACKGROUND, new Class[] { ChatActivityEnterView.class }, new String[] { "recordPanel" }, null, null, null, "chat_messagePanelBackground");
        final ThemeDescription themeDescription254 = new ThemeDescription((View)this.chatActivityEnterView, ThemeDescription.FLAG_TEXTCOLOR, new Class[] { ChatActivityEnterView.class }, new String[] { "recordedAudioTimeTextView" }, null, null, null, "chat_messagePanelVoiceDuration");
        final ThemeDescription themeDescription255 = new ThemeDescription((View)this.chatActivityEnterView, ThemeDescription.FLAG_IMAGECOLOR, new Class[] { ChatActivityEnterView.class }, new String[] { "recordCancelImage" }, null, null, null, "chat_recordVoiceCancel");
        final ThemeDescription themeDescription256 = new ThemeDescription((View)this.chatActivityEnterView, 0, new Class[] { ChatActivityEnterView.class }, new String[] { "doneButtonProgress" }, null, null, null, "contextProgressInner1");
        final ThemeDescription themeDescription257 = new ThemeDescription((View)this.chatActivityEnterView, 0, new Class[] { ChatActivityEnterView.class }, new String[] { "doneButtonProgress" }, null, null, null, "contextProgressOuter1");
        final ThemeDescription themeDescription258 = new ThemeDescription((View)this.chatActivityEnterView, ThemeDescription.FLAG_IMAGECOLOR, new Class[] { ChatActivityEnterView.class }, new String[] { "cancelBotButton" }, null, null, null, "chat_messagePanelCancelInlineBot");
        final ThemeDescription themeDescription259 = new ThemeDescription((View)this.chatActivityEnterView, 0, new Class[] { ChatActivityEnterView.class }, new String[] { "redDotPaint" }, null, null, null, "chat_recordedVoiceDot");
        final ThemeDescription themeDescription260 = new ThemeDescription((View)this.chatActivityEnterView, 0, new Class[] { ChatActivityEnterView.class }, new String[] { "paint" }, null, null, null, "chat_messagePanelVoiceBackground");
        final ThemeDescription themeDescription261 = new ThemeDescription((View)this.chatActivityEnterView, 0, new Class[] { ChatActivityEnterView.class }, new String[] { "paintRecord" }, null, null, null, "chat_messagePanelVoiceShadow");
        final ThemeDescription themeDescription262 = new ThemeDescription((View)this.chatActivityEnterView, 0, new Class[] { ChatActivityEnterView.class }, new String[] { "seekBarWaveform" }, null, null, null, "chat_recordedVoiceProgress");
        final ThemeDescription themeDescription263 = new ThemeDescription((View)this.chatActivityEnterView, 0, new Class[] { ChatActivityEnterView.class }, new String[] { "seekBarWaveform" }, null, null, null, "chat_recordedVoiceProgressInner");
        final ThemeDescription themeDescription264 = new ThemeDescription((View)this.chatActivityEnterView, 0, new Class[] { ChatActivityEnterView.class }, new String[] { "playDrawable" }, null, null, null, "chat_recordedVoicePlayPause");
        final ThemeDescription themeDescription265 = new ThemeDescription((View)this.chatActivityEnterView, 0, new Class[] { ChatActivityEnterView.class }, new String[] { "pauseDrawable" }, null, null, null, "chat_recordedVoicePlayPause");
        final ThemeDescription themeDescription266 = new ThemeDescription((View)this.chatActivityEnterView, ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, new Class[] { ChatActivityEnterView.class }, new String[] { "playDrawable" }, null, null, null, "chat_recordedVoicePlayPausePressed");
        final ThemeDescription themeDescription267 = new ThemeDescription((View)this.chatActivityEnterView, ThemeDescription.FLAG_DRAWABLESELECTEDSTATE, new Class[] { ChatActivityEnterView.class }, new String[] { "pauseDrawable" }, null, null, null, "chat_recordedVoicePlayPausePressed");
        final ThemeDescription themeDescription268 = new ThemeDescription((View)this.chatActivityEnterView, 0, new Class[] { ChatActivityEnterView.class }, new String[] { "dotPaint" }, null, null, null, "chat_emojiPanelNewTrending");
        EmojiView emojiView;
        final ChatActivityEnterView chatActivityEnterView = (ChatActivityEnterView)(emojiView = (EmojiView)this.chatActivityEnterView);
        if (chatActivityEnterView != null) {
            emojiView = chatActivityEnterView.getEmojiView();
        }
        final ThemeDescription themeDescription269 = new ThemeDescription((View)emojiView, 0, new Class[] { EmojiView.class }, null, null, null, (ThemeDescription.ThemeDescriptionDelegate)$$Lambda$ChatActivity$WruAO1rnumLf6ecGnTvBssodWEc, "chat_emojiPanelBackground");
        final ChatActivityEnterView chatActivityEnterView2 = this.chatActivityEnterView;
        NotificationCenterDelegate emojiView2;
        if ((emojiView2 = chatActivityEnterView2) != null) {
            emojiView2 = chatActivityEnterView2.getEmojiView();
        }
        final ThemeDescription themeDescription270 = new ThemeDescription((View)emojiView2, 0, new Class[] { EmojiView.class }, null, null, null, (ThemeDescription.ThemeDescriptionDelegate)$$Lambda$ChatActivity$WruAO1rnumLf6ecGnTvBssodWEc, "chat_emojiPanelShadowLine");
        final ChatActivityEnterView chatActivityEnterView3 = this.chatActivityEnterView;
        NotificationCenterDelegate emojiView3;
        if ((emojiView3 = chatActivityEnterView3) != null) {
            emojiView3 = chatActivityEnterView3.getEmojiView();
        }
        final ThemeDescription themeDescription271 = new ThemeDescription((View)emojiView3, 0, new Class[] { EmojiView.class }, null, null, null, (ThemeDescription.ThemeDescriptionDelegate)$$Lambda$ChatActivity$WruAO1rnumLf6ecGnTvBssodWEc, "chat_emojiPanelEmptyText");
        final ChatActivityEnterView chatActivityEnterView4 = this.chatActivityEnterView;
        NotificationCenterDelegate emojiView4;
        if ((emojiView4 = chatActivityEnterView4) != null) {
            emojiView4 = chatActivityEnterView4.getEmojiView();
        }
        final ThemeDescription themeDescription272 = new ThemeDescription((View)emojiView4, 0, new Class[] { EmojiView.class }, null, null, null, (ThemeDescription.ThemeDescriptionDelegate)$$Lambda$ChatActivity$WruAO1rnumLf6ecGnTvBssodWEc, "chat_emojiPanelIcon");
        final ChatActivityEnterView chatActivityEnterView5 = this.chatActivityEnterView;
        NotificationCenterDelegate emojiView5;
        if ((emojiView5 = chatActivityEnterView5) != null) {
            emojiView5 = chatActivityEnterView5.getEmojiView();
        }
        final ThemeDescription themeDescription273 = new ThemeDescription((View)emojiView5, 0, new Class[] { EmojiView.class }, null, null, null, (ThemeDescription.ThemeDescriptionDelegate)$$Lambda$ChatActivity$WruAO1rnumLf6ecGnTvBssodWEc, "chat_emojiPanelIconSelected");
        final ChatActivityEnterView chatActivityEnterView6 = this.chatActivityEnterView;
        NotificationCenterDelegate emojiView6;
        if ((emojiView6 = chatActivityEnterView6) != null) {
            emojiView6 = chatActivityEnterView6.getEmojiView();
        }
        final ThemeDescription themeDescription274 = new ThemeDescription((View)emojiView6, 0, new Class[] { EmojiView.class }, null, null, null, (ThemeDescription.ThemeDescriptionDelegate)$$Lambda$ChatActivity$WruAO1rnumLf6ecGnTvBssodWEc, "chat_emojiPanelStickerPackSelector");
        final ChatActivityEnterView chatActivityEnterView7 = this.chatActivityEnterView;
        NotificationCenterDelegate emojiView7;
        if ((emojiView7 = chatActivityEnterView7) != null) {
            emojiView7 = chatActivityEnterView7.getEmojiView();
        }
        final ThemeDescription themeDescription275 = new ThemeDescription((View)emojiView7, 0, new Class[] { EmojiView.class }, null, null, null, (ThemeDescription.ThemeDescriptionDelegate)$$Lambda$ChatActivity$WruAO1rnumLf6ecGnTvBssodWEc, "chat_emojiPanelBackspace");
        final ChatActivityEnterView chatActivityEnterView8 = this.chatActivityEnterView;
        NotificationCenterDelegate emojiView8;
        if ((emojiView8 = chatActivityEnterView8) != null) {
            emojiView8 = chatActivityEnterView8.getEmojiView();
        }
        final ThemeDescription themeDescription276 = new ThemeDescription((View)emojiView8, 0, new Class[] { EmojiView.class }, null, null, null, (ThemeDescription.ThemeDescriptionDelegate)$$Lambda$ChatActivity$WruAO1rnumLf6ecGnTvBssodWEc, "chat_emojiPanelTrendingTitle");
        final ChatActivityEnterView chatActivityEnterView9 = this.chatActivityEnterView;
        NotificationCenterDelegate emojiView9;
        if ((emojiView9 = chatActivityEnterView9) != null) {
            emojiView9 = chatActivityEnterView9.getEmojiView();
        }
        final ThemeDescription themeDescription277 = new ThemeDescription((View)emojiView9, 0, new Class[] { EmojiView.class }, null, null, null, (ThemeDescription.ThemeDescriptionDelegate)$$Lambda$ChatActivity$WruAO1rnumLf6ecGnTvBssodWEc, "chat_emojiPanelTrendingDescription");
        final ChatActivityEnterView chatActivityEnterView10 = this.chatActivityEnterView;
        NotificationCenterDelegate emojiView10;
        if ((emojiView10 = chatActivityEnterView10) != null) {
            emojiView10 = chatActivityEnterView10.getEmojiView();
        }
        final ThemeDescription themeDescription278 = new ThemeDescription((View)emojiView10, 0, new Class[] { EmojiView.class }, null, null, null, (ThemeDescription.ThemeDescriptionDelegate)$$Lambda$ChatActivity$WruAO1rnumLf6ecGnTvBssodWEc, "chat_emojiPanelBadgeText");
        final ChatActivityEnterView chatActivityEnterView11 = this.chatActivityEnterView;
        NotificationCenterDelegate emojiView11;
        if ((emojiView11 = chatActivityEnterView11) != null) {
            emojiView11 = chatActivityEnterView11.getEmojiView();
        }
        final ThemeDescription themeDescription279 = new ThemeDescription((View)emojiView11, 0, new Class[] { EmojiView.class }, null, null, null, (ThemeDescription.ThemeDescriptionDelegate)$$Lambda$ChatActivity$WruAO1rnumLf6ecGnTvBssodWEc, "chat_emojiPanelBadgeBackground");
        final ChatActivityEnterView chatActivityEnterView12 = this.chatActivityEnterView;
        NotificationCenterDelegate emojiView12;
        if ((emojiView12 = chatActivityEnterView12) != null) {
            emojiView12 = chatActivityEnterView12.getEmojiView();
        }
        final ThemeDescription themeDescription280 = new ThemeDescription((View)emojiView12, 0, new Class[] { EmojiView.class }, null, null, null, (ThemeDescription.ThemeDescriptionDelegate)$$Lambda$ChatActivity$WruAO1rnumLf6ecGnTvBssodWEc, "chat_emojiBottomPanelIcon");
        final ChatActivityEnterView chatActivityEnterView13 = this.chatActivityEnterView;
        NotificationCenterDelegate emojiView13;
        if ((emojiView13 = chatActivityEnterView13) != null) {
            emojiView13 = chatActivityEnterView13.getEmojiView();
        }
        final ThemeDescription themeDescription281 = new ThemeDescription((View)emojiView13, 0, new Class[] { EmojiView.class }, null, null, null, (ThemeDescription.ThemeDescriptionDelegate)$$Lambda$ChatActivity$WruAO1rnumLf6ecGnTvBssodWEc, "chat_emojiSearchIcon");
        final ChatActivityEnterView chatActivityEnterView14 = this.chatActivityEnterView;
        NotificationCenterDelegate emojiView14;
        if ((emojiView14 = chatActivityEnterView14) != null) {
            emojiView14 = chatActivityEnterView14.getEmojiView();
        }
        final ThemeDescription themeDescription282 = new ThemeDescription((View)emojiView14, 0, new Class[] { EmojiView.class }, null, null, null, (ThemeDescription.ThemeDescriptionDelegate)$$Lambda$ChatActivity$WruAO1rnumLf6ecGnTvBssodWEc, "chat_emojiPanelStickerSetNameHighlight");
        final ChatActivityEnterView chatActivityEnterView15 = this.chatActivityEnterView;
        NotificationCenterDelegate emojiView15;
        if ((emojiView15 = chatActivityEnterView15) != null) {
            emojiView15 = chatActivityEnterView15.getEmojiView();
        }
        final ThemeDescription themeDescription283 = new ThemeDescription((View)emojiView15, 0, new Class[] { EmojiView.class }, null, null, null, (ThemeDescription.ThemeDescriptionDelegate)$$Lambda$ChatActivity$WruAO1rnumLf6ecGnTvBssodWEc, "chat_emojiPanelStickerPackSelectorLine");
        final ThemeDescription themeDescription284 = new ThemeDescription((View)this.undoView, ThemeDescription.FLAG_BACKGROUND, null, null, null, null, "undo_background");
        final ThemeDescription themeDescription285 = new ThemeDescription((View)this.undoView, 0, new Class[] { UndoView.class }, new String[] { "undoImageView" }, null, null, null, "undo_cancelColor");
        final ThemeDescription themeDescription286 = new ThemeDescription((View)this.undoView, 0, new Class[] { UndoView.class }, new String[] { "undoTextView" }, null, null, null, "undo_cancelColor");
        final ThemeDescription themeDescription287 = new ThemeDescription((View)this.undoView, 0, new Class[] { UndoView.class }, new String[] { "infoTextView" }, null, null, null, "undo_infoColor");
        final ThemeDescription themeDescription288 = new ThemeDescription((View)this.undoView, 0, new Class[] { UndoView.class }, new String[] { "textPaint" }, null, null, null, "undo_infoColor");
        final ThemeDescription themeDescription289 = new ThemeDescription((View)this.undoView, 0, new Class[] { UndoView.class }, new String[] { "progressPaint" }, null, null, null, "undo_infoColor");
        final ThemeDescription themeDescription290 = new ThemeDescription((View)this.undoView, ThemeDescription.FLAG_IMAGECOLOR, new Class[] { UndoView.class }, new String[] { "leftImageView" }, null, null, null, "undo_infoColor");
        final ThemeDescription themeDescription291 = new ThemeDescription(null, 0, null, null, null, null, "chat_botKeyboardButtonText");
        final ThemeDescription themeDescription292 = new ThemeDescription(null, 0, null, null, null, null, "chat_botKeyboardButtonBackground");
        final ThemeDescription themeDescription293 = new ThemeDescription(null, 0, null, null, null, null, "chat_botKeyboardButtonBackgroundPressed");
        final ThemeDescription themeDescription294 = new ThemeDescription(super.fragmentView, ThemeDescription.FLAG_BACKGROUND | ThemeDescription.FLAG_CHECKTAG, new Class[] { FragmentContextView.class }, new String[] { "frameLayout" }, null, null, null, "inappPlayerBackground");
        final ThemeDescription themeDescription295 = new ThemeDescription(super.fragmentView, ThemeDescription.FLAG_IMAGECOLOR, new Class[] { FragmentContextView.class }, new String[] { "playButton" }, null, null, null, "inappPlayerPlayPause");
        final ThemeDescription themeDescription296 = new ThemeDescription(super.fragmentView, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_CHECKTAG, new Class[] { FragmentContextView.class }, new String[] { "titleTextView" }, null, null, null, "inappPlayerTitle");
        final ThemeDescription themeDescription297 = new ThemeDescription(super.fragmentView, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_FASTSCROLL, new Class[] { FragmentContextView.class }, new String[] { "titleTextView" }, null, null, null, "inappPlayerPerformer");
        final ThemeDescription themeDescription298 = new ThemeDescription(super.fragmentView, ThemeDescription.FLAG_IMAGECOLOR, new Class[] { FragmentContextView.class }, new String[] { "closeButton" }, null, null, null, "inappPlayerClose");
        final ThemeDescription themeDescription299 = new ThemeDescription(super.fragmentView, ThemeDescription.FLAG_BACKGROUND | ThemeDescription.FLAG_CHECKTAG, new Class[] { FragmentContextView.class }, new String[] { "frameLayout" }, null, null, null, "returnToCallBackground");
        final ThemeDescription themeDescription300 = new ThemeDescription(super.fragmentView, ThemeDescription.FLAG_TEXTCOLOR | ThemeDescription.FLAG_CHECKTAG, new Class[] { FragmentContextView.class }, new String[] { "titleTextView" }, null, null, null, "returnToCallText");
        final ThemeDescription themeDescription301 = new ThemeDescription(this.pinnedLineView, ThemeDescription.FLAG_BACKGROUND, null, null, null, null, "chat_topPanelLine");
        final ThemeDescription themeDescription302 = new ThemeDescription(this.pinnedMessageNameTextView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, "chat_topPanelTitle");
        final ThemeDescription themeDescription303 = new ThemeDescription(this.pinnedMessageTextView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, "chat_topPanelMessage");
        final ThemeDescription themeDescription304 = new ThemeDescription((View)this.alertNameTextView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, "chat_topPanelTitle");
        final ThemeDescription themeDescription305 = new ThemeDescription((View)this.alertTextView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, "chat_topPanelMessage");
        final ThemeDescription themeDescription306 = new ThemeDescription((View)this.closePinned, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, "chat_topPanelClose");
        final ThemeDescription themeDescription307 = new ThemeDescription((View)this.closeReportSpam, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, "chat_topPanelClose");
        final ThemeDescription themeDescription308 = new ThemeDescription((View)this.reportSpamView, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, "chat_topPanelBackground");
        final ThemeDescription themeDescription309 = new ThemeDescription((View)this.alertView, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, "chat_topPanelBackground");
        final ThemeDescription themeDescription310 = new ThemeDescription((View)this.pinnedMessageView, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, "chat_topPanelBackground");
        final ThemeDescription themeDescription311 = new ThemeDescription((View)this.addToContactsButton, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, "chat_addContact");
        final ThemeDescription themeDescription312 = new ThemeDescription((View)this.reportSpamButton, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, "chat_reportSpam");
        final ThemeDescription themeDescription313 = new ThemeDescription(this.replyLineView, ThemeDescription.FLAG_BACKGROUND, null, null, null, null, "chat_replyPanelLine");
        final ThemeDescription themeDescription314 = new ThemeDescription(this.replyNameTextView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, "chat_replyPanelName");
        final ThemeDescription themeDescription315 = new ThemeDescription(this.replyObjectTextView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, "chat_replyPanelMessage");
        final ThemeDescription themeDescription316 = new ThemeDescription((View)this.replyIconImageView, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, "chat_replyPanelIcons");
        final ThemeDescription themeDescription317 = new ThemeDescription((View)this.replyCloseImageView, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, "chat_replyPanelClose");
        final ThemeDescription themeDescription318 = new ThemeDescription((View)this.searchUpButton, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, "chat_searchPanelIcons");
        final ThemeDescription themeDescription319 = new ThemeDescription((View)this.searchDownButton, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, "chat_searchPanelIcons");
        final ThemeDescription themeDescription320 = new ThemeDescription((View)this.searchCalendarButton, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, "chat_searchPanelIcons");
        final ThemeDescription themeDescription321 = new ThemeDescription((View)this.searchUserButton, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, "chat_searchPanelIcons");
        final ThemeDescription themeDescription322 = new ThemeDescription(this.searchCountText, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, "chat_searchPanelText");
        final ThemeDescription themeDescription323 = new ThemeDescription((View)this.bottomOverlayText, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, "chat_secretChatStatusText");
        final ThemeDescription themeDescription324 = new ThemeDescription((View)this.bottomOverlayChatText, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, "chat_fieldOverlayText");
        final ThemeDescription themeDescription325 = new ThemeDescription((View)this.bottomOverlayChatText2, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, "chat_fieldOverlayText");
        final ThemeDescription themeDescription326 = new ThemeDescription(this.bottomOverlayProgress, 0, null, null, null, null, "chat_fieldOverlayText");
        final ThemeDescription themeDescription327 = new ThemeDescription((View)this.bigEmptyView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, "chat_serviceText");
        final ThemeDescription themeDescription328 = new ThemeDescription((View)this.emptyView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, "chat_serviceText");
        final ThemeDescription themeDescription329 = new ThemeDescription(this.progressBar, ThemeDescription.FLAG_PROGRESSBAR, null, null, null, null, "chat_serviceText");
        final ThemeDescription themeDescription330 = new ThemeDescription((View)this.stickersPanelArrow, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, "chat_stickersHintPanel");
        final ThemeDescription themeDescription331 = new ThemeDescription((View)this.stickersListView, ThemeDescription.FLAG_BACKGROUNDFILTER, new Class[] { StickerCell.class }, null, null, null, "chat_stickersHintPanel");
        final ThemeDescription themeDescription332 = new ThemeDescription((View)this.chatListView, ThemeDescription.FLAG_USEBACKGROUNDDRAWABLE, new Class[] { ChatUnreadCell.class }, new String[] { "backgroundLayout" }, null, null, null, "chat_unreadMessagesStartBackground");
        final ThemeDescription themeDescription333 = new ThemeDescription((View)this.chatListView, ThemeDescription.FLAG_IMAGECOLOR, new Class[] { ChatUnreadCell.class }, new String[] { "imageView" }, null, null, null, "chat_unreadMessagesStartArrowIcon");
        final ThemeDescription themeDescription334 = new ThemeDescription((View)this.chatListView, ThemeDescription.FLAG_TEXTCOLOR, new Class[] { ChatUnreadCell.class }, new String[] { "textView" }, null, null, null, "chat_unreadMessagesStartText");
        final ThemeDescription themeDescription335 = new ThemeDescription(this.progressView2, ThemeDescription.FLAG_SERVICEBACKGROUND, null, null, null, null, "chat_serviceBackground");
        final ThemeDescription themeDescription336 = new ThemeDescription((View)this.emptyView, ThemeDescription.FLAG_SERVICEBACKGROUND, null, null, null, null, "chat_serviceBackground");
        final ThemeDescription themeDescription337 = new ThemeDescription((View)this.bigEmptyView, ThemeDescription.FLAG_SERVICEBACKGROUND, null, null, null, null, "chat_serviceBackground");
        final ThemeDescription themeDescription338 = new ThemeDescription((View)this.chatListView, ThemeDescription.FLAG_SERVICEBACKGROUND, new Class[] { ChatLoadingCell.class }, new String[] { "textView" }, null, null, null, "chat_serviceBackground");
        final ThemeDescription themeDescription339 = new ThemeDescription((View)this.chatListView, ThemeDescription.FLAG_PROGRESSBAR, new Class[] { ChatLoadingCell.class }, new String[] { "textView" }, null, null, null, "chat_serviceText");
        final ThemeDescription themeDescription340 = new ThemeDescription((View)this.mentionListView, ThemeDescription.FLAG_TEXTCOLOR, new Class[] { BotSwitchCell.class }, new String[] { "textView" }, null, null, null, "chat_botSwitchToInlineText");
        final ThemeDescription themeDescription341 = new ThemeDescription((View)this.mentionListView, ThemeDescription.FLAG_TEXTCOLOR, new Class[] { MentionCell.class }, new String[] { "nameTextView" }, null, null, null, "windowBackgroundWhiteBlackText");
        final ThemeDescription themeDescription342 = new ThemeDescription((View)this.mentionListView, ThemeDescription.FLAG_TEXTCOLOR, new Class[] { MentionCell.class }, new String[] { "usernameTextView" }, null, null, null, "windowBackgroundWhiteGrayText3");
        final ThemeDescription themeDescription343 = new ThemeDescription((View)this.mentionListView, 0, new Class[] { ContextLinkCell.class }, null, new Drawable[] { Theme.chat_inlineResultFile, Theme.chat_inlineResultAudio, Theme.chat_inlineResultLocation }, null, "chat_inlineResultIcon");
        final ThemeDescription themeDescription344 = new ThemeDescription((View)this.mentionListView, 0, new Class[] { ContextLinkCell.class }, null, null, null, "windowBackgroundWhiteGrayText2");
        final ThemeDescription themeDescription345 = new ThemeDescription((View)this.mentionListView, 0, new Class[] { ContextLinkCell.class }, null, null, null, "windowBackgroundWhiteLinkText");
        final ThemeDescription themeDescription346 = new ThemeDescription((View)this.mentionListView, 0, new Class[] { ContextLinkCell.class }, null, null, null, "windowBackgroundWhiteBlackText");
        final ThemeDescription themeDescription347 = new ThemeDescription((View)this.mentionListView, 0, new Class[] { ContextLinkCell.class }, null, null, null, "chat_inAudioProgress");
        final ThemeDescription themeDescription348 = new ThemeDescription((View)this.mentionListView, 0, new Class[] { ContextLinkCell.class }, null, null, null, "chat_inAudioSelectedProgress");
        final ThemeDescription themeDescription349 = new ThemeDescription((View)this.mentionListView, 0, new Class[] { ContextLinkCell.class }, null, null, null, "divider");
        final ThemeDescription themeDescription350 = new ThemeDescription((View)this.gifHintTextView, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, "chat_gifSaveHintBackground");
        final ThemeDescription themeDescription351 = new ThemeDescription((View)this.gifHintTextView, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, "chat_gifSaveHintText");
        final ThemeDescription themeDescription352 = new ThemeDescription(null, 0, null, null, null, (ThemeDescription.ThemeDescriptionDelegate)$$Lambda$ChatActivity$WruAO1rnumLf6ecGnTvBssodWEc, "chat_attachMediaBanBackground");
        final ThemeDescription themeDescription353 = new ThemeDescription(null, 0, null, null, null, (ThemeDescription.ThemeDescriptionDelegate)$$Lambda$ChatActivity$WruAO1rnumLf6ecGnTvBssodWEc, "chat_attachMediaBanText");
        final ThemeDescription themeDescription354 = new ThemeDescription((View)this.noSoundHintView, ThemeDescription.FLAG_TEXTCOLOR, new Class[] { HintView.class }, new String[] { "textView" }, null, null, null, "chat_gifSaveHintText");
        final ThemeDescription themeDescription355 = new ThemeDescription((View)this.noSoundHintView, ThemeDescription.FLAG_IMAGECOLOR, new Class[] { HintView.class }, new String[] { "imageView" }, null, null, null, "chat_gifSaveHintText");
        final ThemeDescription themeDescription356 = new ThemeDescription((View)this.noSoundHintView, ThemeDescription.FLAG_TEXTCOLOR, new Class[] { HintView.class }, new String[] { "arrowImageView" }, null, null, null, "chat_gifSaveHintBackground");
        final ThemeDescription themeDescription357 = new ThemeDescription((View)this.forwardHintView, ThemeDescription.FLAG_TEXTCOLOR, new Class[] { HintView.class }, new String[] { "textView" }, null, null, null, "chat_gifSaveHintText");
        final ThemeDescription themeDescription358 = new ThemeDescription((View)this.forwardHintView, ThemeDescription.FLAG_TEXTCOLOR, new Class[] { HintView.class }, new String[] { "arrowImageView" }, null, null, null, "chat_gifSaveHintBackground");
        final ThemeDescription themeDescription359 = new ThemeDescription((View)this.pagedownButtonCounter, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, "chat_goDownButtonCounterBackground");
        final ThemeDescription themeDescription360 = new ThemeDescription((View)this.pagedownButtonCounter, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, "chat_goDownButtonCounter");
        final ThemeDescription themeDescription361 = new ThemeDescription((View)this.pagedownButtonImage, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, "chat_goDownButton");
        final ThemeDescription themeDescription362 = new ThemeDescription((View)this.pagedownButtonImage, ThemeDescription.FLAG_DRAWABLESELECTEDSTATE | ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, "chat_goDownButtonShadow");
        final ThemeDescription themeDescription363 = new ThemeDescription((View)this.pagedownButtonImage, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, "chat_goDownButtonIcon");
        final ThemeDescription themeDescription364 = new ThemeDescription((View)this.mentiondownButtonCounter, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, "chat_goDownButtonCounterBackground");
        final ThemeDescription themeDescription365 = new ThemeDescription((View)this.mentiondownButtonCounter, ThemeDescription.FLAG_TEXTCOLOR, null, null, null, null, "chat_goDownButtonCounter");
        final ThemeDescription themeDescription366 = new ThemeDescription((View)this.mentiondownButtonImage, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, "chat_goDownButton");
        final ThemeDescription themeDescription367 = new ThemeDescription((View)this.mentiondownButtonImage, ThemeDescription.FLAG_DRAWABLESELECTEDSTATE | ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, null, null, "chat_goDownButtonShadow");
        final ThemeDescription themeDescription368 = new ThemeDescription((View)this.mentiondownButtonImage, ThemeDescription.FLAG_IMAGECOLOR, null, null, null, null, "chat_goDownButtonIcon");
        final ChatAvatarContainer avatarContainer7 = this.avatarContainer;
        Object timeItem;
        if (avatarContainer7 != null) {
            timeItem = avatarContainer7.getTimeItem();
        }
        else {
            timeItem = null;
        }
        final ThemeDescription themeDescription369 = new ThemeDescription((View)timeItem, 0, null, null, null, null, "chat_secretTimerBackground");
        final ChatAvatarContainer avatarContainer8 = this.avatarContainer;
        Object timeItem2 = view;
        if (avatarContainer8 != null) {
            timeItem2 = avatarContainer8.getTimeItem();
        }
        return new ThemeDescription[] { themeDescription, themeDescription2, themeDescription3, themeDescription4, themeDescription5, themeDescription6, themeDescription7, themeDescription8, themeDescription9, themeDescription10, themeDescription11, themeDescription12, themeDescription13, themeDescription14, themeDescription15, themeDescription16, themeDescription17, themeDescription18, themeDescription19, themeDescription20, themeDescription21, themeDescription22, themeDescription23, themeDescription24, themeDescription25, themeDescription26, themeDescription27, themeDescription28, themeDescription29, themeDescription30, themeDescription31, themeDescription32, themeDescription33, themeDescription34, themeDescription35, themeDescription36, themeDescription37, themeDescription38, themeDescription39, themeDescription40, themeDescription41, themeDescription42, themeDescription43, themeDescription44, themeDescription45, themeDescription46, themeDescription47, themeDescription48, themeDescription49, themeDescription50, themeDescription51, themeDescription52, themeDescription53, themeDescription54, themeDescription55, themeDescription56, themeDescription57, themeDescription58, themeDescription59, themeDescription60, themeDescription61, themeDescription62, themeDescription63, themeDescription64, themeDescription65, themeDescription66, themeDescription67, themeDescription68, themeDescription69, themeDescription70, themeDescription71, themeDescription72, themeDescription73, themeDescription74, themeDescription75, themeDescription76, themeDescription77, themeDescription78, themeDescription79, themeDescription80, themeDescription81, themeDescription82, themeDescription83, themeDescription84, themeDescription85, themeDescription86, themeDescription87, themeDescription88, themeDescription89, themeDescription90, themeDescription91, themeDescription92, themeDescription93, themeDescription94, themeDescription95, themeDescription96, themeDescription97, themeDescription98, themeDescription99, themeDescription100, themeDescription101, themeDescription102, themeDescription103, themeDescription104, themeDescription105, themeDescription106, themeDescription107, themeDescription108, themeDescription109, themeDescription110, themeDescription111, themeDescription112, themeDescription113, themeDescription114, themeDescription115, themeDescription116, themeDescription117, themeDescription118, themeDescription119, themeDescription120, themeDescription121, themeDescription122, themeDescription123, themeDescription124, themeDescription125, themeDescription126, themeDescription127, themeDescription128, themeDescription129, themeDescription130, themeDescription131, themeDescription132, themeDescription133, themeDescription134, themeDescription135, themeDescription136, themeDescription137, themeDescription138, themeDescription139, themeDescription140, themeDescription141, themeDescription142, themeDescription143, themeDescription144, themeDescription145, themeDescription146, themeDescription147, themeDescription148, themeDescription149, themeDescription150, themeDescription151, themeDescription152, themeDescription153, themeDescription154, themeDescription155, themeDescription156, themeDescription157, themeDescription158, themeDescription159, themeDescription160, themeDescription161, themeDescription162, themeDescription163, themeDescription164, themeDescription165, themeDescription166, themeDescription167, themeDescription168, themeDescription169, themeDescription170, themeDescription171, themeDescription172, themeDescription173, themeDescription174, themeDescription175, themeDescription176, themeDescription177, themeDescription178, themeDescription179, themeDescription180, themeDescription181, themeDescription182, themeDescription183, themeDescription184, themeDescription185, themeDescription186, themeDescription187, themeDescription188, themeDescription189, themeDescription190, themeDescription191, themeDescription192, themeDescription193, themeDescription194, themeDescription195, themeDescription196, themeDescription197, themeDescription198, themeDescription199, themeDescription200, themeDescription201, themeDescription202, themeDescription203, themeDescription204, themeDescription205, themeDescription206, themeDescription207, themeDescription208, themeDescription209, themeDescription210, themeDescription211, themeDescription212, themeDescription213, themeDescription214, themeDescription215, themeDescription216, themeDescription217, themeDescription218, themeDescription219, themeDescription220, themeDescription221, themeDescription222, themeDescription223, themeDescription224, themeDescription225, themeDescription226, themeDescription227, themeDescription228, themeDescription229, themeDescription230, themeDescription231, themeDescription232, themeDescription233, themeDescription234, themeDescription235, themeDescription236, themeDescription237, themeDescription238, themeDescription239, themeDescription240, themeDescription241, themeDescription242, themeDescription243, themeDescription244, themeDescription245, themeDescription246, themeDescription247, themeDescription248, themeDescription249, themeDescription250, themeDescription251, themeDescription252, themeDescription253, themeDescription254, themeDescription255, themeDescription256, themeDescription257, themeDescription258, themeDescription259, themeDescription260, themeDescription261, themeDescription262, themeDescription263, themeDescription264, themeDescription265, themeDescription266, themeDescription267, themeDescription268, themeDescription269, themeDescription270, themeDescription271, themeDescription272, themeDescription273, themeDescription274, themeDescription275, themeDescription276, themeDescription277, themeDescription278, themeDescription279, themeDescription280, themeDescription281, themeDescription282, themeDescription283, themeDescription284, themeDescription285, themeDescription286, themeDescription287, themeDescription288, themeDescription289, themeDescription290, themeDescription291, themeDescription292, themeDescription293, themeDescription294, themeDescription295, themeDescription296, themeDescription297, themeDescription298, themeDescription299, themeDescription300, themeDescription301, themeDescription302, themeDescription303, themeDescription304, themeDescription305, themeDescription306, themeDescription307, themeDescription308, themeDescription309, themeDescription310, themeDescription311, themeDescription312, themeDescription313, themeDescription314, themeDescription315, themeDescription316, themeDescription317, themeDescription318, themeDescription319, themeDescription320, themeDescription321, themeDescription322, themeDescription323, themeDescription324, themeDescription325, themeDescription326, themeDescription327, themeDescription328, themeDescription329, themeDescription330, themeDescription331, themeDescription332, themeDescription333, themeDescription334, themeDescription335, themeDescription336, themeDescription337, themeDescription338, themeDescription339, themeDescription340, themeDescription341, themeDescription342, themeDescription343, themeDescription344, themeDescription345, themeDescription346, themeDescription347, themeDescription348, themeDescription349, themeDescription350, themeDescription351, themeDescription352, themeDescription353, themeDescription354, themeDescription355, themeDescription356, themeDescription357, themeDescription358, themeDescription359, themeDescription360, themeDescription361, themeDescription362, themeDescription363, themeDescription364, themeDescription365, themeDescription366, themeDescription367, themeDescription368, themeDescription369, new ThemeDescription((View)timeItem2, 0, null, null, null, null, "chat_secretTimerText"), new ThemeDescription(null, 0, null, null, new Drawable[] { Theme.chat_attachButtonDrawables[0] }, null, "chat_attachCameraIcon1"), new ThemeDescription(null, 0, null, null, new Drawable[] { Theme.chat_attachButtonDrawables[0] }, null, "chat_attachCameraIcon2"), new ThemeDescription(null, 0, null, null, new Drawable[] { Theme.chat_attachButtonDrawables[0] }, null, "chat_attachCameraIcon3"), new ThemeDescription(null, 0, null, null, new Drawable[] { Theme.chat_attachButtonDrawables[0] }, null, "chat_attachCameraIcon4"), new ThemeDescription(null, 0, null, null, new Drawable[] { Theme.chat_attachButtonDrawables[0] }, null, "chat_attachCameraIcon5"), new ThemeDescription(null, 0, null, null, new Drawable[] { Theme.chat_attachButtonDrawables[0] }, null, "chat_attachCameraIcon6"), new ThemeDescription(null, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, new Drawable[] { Theme.chat_attachButtonDrawables[1] }, null, "chat_attachGalleryBackground"), new ThemeDescription(null, 0, null, null, new Drawable[] { Theme.chat_attachButtonDrawables[1] }, null, "chat_attachGalleryIcon"), new ThemeDescription(null, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, new Drawable[] { Theme.chat_attachButtonDrawables[2] }, null, "chat_attachVideoBackground"), new ThemeDescription(null, 0, null, null, new Drawable[] { Theme.chat_attachButtonDrawables[2] }, null, "chat_attachVideoIcon"), new ThemeDescription(null, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, new Drawable[] { Theme.chat_attachButtonDrawables[3] }, null, "chat_attachAudioBackground"), new ThemeDescription(null, 0, null, null, new Drawable[] { Theme.chat_attachButtonDrawables[3] }, null, "chat_attachAudioIcon"), new ThemeDescription(null, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, new Drawable[] { Theme.chat_attachButtonDrawables[4] }, null, "chat_attachFileBackground"), new ThemeDescription(null, 0, null, null, new Drawable[] { Theme.chat_attachButtonDrawables[4] }, null, "chat_attachFileIcon"), new ThemeDescription(null, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, new Drawable[] { Theme.chat_attachButtonDrawables[5] }, null, "chat_attachContactBackground"), new ThemeDescription(null, 0, null, null, new Drawable[] { Theme.chat_attachButtonDrawables[5] }, null, "chat_attachContactIcon"), new ThemeDescription(null, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, new Drawable[] { Theme.chat_attachButtonDrawables[6] }, null, "chat_attachLocationBackground"), new ThemeDescription(null, 0, null, null, new Drawable[] { Theme.chat_attachButtonDrawables[6] }, null, "chat_attachLocationIcon"), new ThemeDescription(null, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, new Drawable[] { Theme.chat_attachButtonDrawables[7] }, null, "chat_attachHideBackground"), new ThemeDescription(null, 0, null, null, new Drawable[] { Theme.chat_attachButtonDrawables[7] }, null, "chat_attachHideIcon"), new ThemeDescription(null, ThemeDescription.FLAG_BACKGROUNDFILTER, null, null, new Drawable[] { Theme.chat_attachButtonDrawables[8] }, null, "chat_attachSendBackground"), new ThemeDescription(null, 0, null, null, new Drawable[] { Theme.chat_attachButtonDrawables[8] }, null, "chat_attachSendIcon"), new ThemeDescription(null, 0, null, null, null, (ThemeDescription.ThemeDescriptionDelegate)$$Lambda$ChatActivity$WruAO1rnumLf6ecGnTvBssodWEc, "dialogBackground"), new ThemeDescription(null, 0, null, null, null, (ThemeDescription.ThemeDescriptionDelegate)$$Lambda$ChatActivity$WruAO1rnumLf6ecGnTvBssodWEc, "dialogBackgroundGray"), new ThemeDescription(null, 0, null, null, null, (ThemeDescription.ThemeDescriptionDelegate)$$Lambda$ChatActivity$WruAO1rnumLf6ecGnTvBssodWEc, "dialogTextGray2"), new ThemeDescription(null, 0, null, null, null, (ThemeDescription.ThemeDescriptionDelegate)$$Lambda$ChatActivity$WruAO1rnumLf6ecGnTvBssodWEc, "dialogScrollGlow"), new ThemeDescription(null, 0, null, null, null, (ThemeDescription.ThemeDescriptionDelegate)$$Lambda$ChatActivity$WruAO1rnumLf6ecGnTvBssodWEc, "dialogGrayLine"), new ThemeDescription(null, 0, null, null, null, (ThemeDescription.ThemeDescriptionDelegate)$$Lambda$ChatActivity$WruAO1rnumLf6ecGnTvBssodWEc, "dialogCameraIcon") };
    }
    
    public void hideFieldPanel(final boolean b) {
        this.showFieldPanel(false, null, null, null, null, false, b);
    }
    
    public boolean isEditingMessageMedia() {
        final ChatAttachAlert chatAttachAlert = this.chatAttachAlert;
        return chatAttachAlert != null && chatAttachAlert.getEditingMessageObject() != null;
    }
    
    public boolean isSecretChat() {
        return this.currentEncryptedChat != null;
    }
    
    public boolean maybePlayVisibleVideo() {
        if (this.chatListView == null) {
            return false;
        }
        final MessageObject playingMessageObject = MediaController.getInstance().getPlayingMessageObject();
        if (playingMessageObject != null && !playingMessageObject.isVideo()) {
            return false;
        }
        final HintView noSoundHintView = this.noSoundHintView;
        final ArrayList<MessageObject> list = null;
        Object animation;
        MessageObject messageObject;
        if (noSoundHintView != null && noSoundHintView.getTag() != null) {
            final ChatMessageCell messageCell = this.noSoundHintView.getMessageCell();
            final ImageReceiver photoImage = messageCell.getPhotoImage();
            animation = photoImage.getAnimation();
            if (animation != null) {
                messageObject = messageCell.getMessageObject();
                this.scrollToVideo = (messageCell.getTop() + photoImage.getImageY2() > this.chatListView.getMeasuredHeight());
            }
            else {
                messageObject = null;
            }
        }
        else {
            animation = (messageObject = null);
        }
        Object o = animation;
        MessageObject messageObject2 = messageObject;
        if (messageObject == null) {
            final int childCount = this.chatListView.getChildCount();
            int n = 0;
            while (true) {
                o = animation;
                messageObject2 = messageObject;
                if (n >= childCount) {
                    break;
                }
                final View child = this.chatListView.getChildAt(n);
                Object o2;
                MessageObject messageObject3;
                if (!(child instanceof ChatMessageCell)) {
                    o2 = animation;
                    messageObject3 = messageObject;
                }
                else {
                    final ChatMessageCell chatMessageCell = (ChatMessageCell)child;
                    final MessageObject messageObject4 = chatMessageCell.getMessageObject();
                    final boolean roundVideo = messageObject4.isRoundVideo();
                    if (!messageObject4.isVideo() && !roundVideo) {
                        o2 = animation;
                        messageObject3 = messageObject;
                    }
                    else {
                        final ImageReceiver photoImage2 = chatMessageCell.getPhotoImage();
                        final AnimatedFileDrawable animation2 = photoImage2.getAnimation();
                        if (animation2 == null) {
                            o2 = animation;
                            messageObject3 = messageObject;
                        }
                        else {
                            final int n2 = child.getTop() + photoImage2.getImageY();
                            final int n3 = photoImage2.getImageHeight() + n2;
                            o2 = animation;
                            messageObject3 = messageObject;
                            if (n3 >= 0) {
                                if (n2 > this.chatListView.getMeasuredHeight()) {
                                    o2 = animation;
                                    messageObject3 = messageObject;
                                }
                                else {
                                    if (messageObject != null && n2 < 0) {
                                        o = animation;
                                        messageObject2 = messageObject;
                                        break;
                                    }
                                    this.scrollToVideo = (n2 < 0 || n3 > this.chatListView.getMeasuredHeight());
                                    if (n2 >= 0 && n3 <= this.chatListView.getMeasuredHeight()) {
                                        final MessageObject messageObject5 = messageObject4;
                                        o = animation2;
                                        messageObject2 = messageObject5;
                                        break;
                                    }
                                    messageObject3 = messageObject4;
                                    o2 = animation2;
                                }
                            }
                        }
                    }
                }
                ++n;
                animation = o2;
                messageObject = messageObject3;
            }
        }
        if (messageObject2 == null) {
            return false;
        }
        if (MediaController.getInstance().isPlayingMessage(messageObject2)) {
            return false;
        }
        final HintView noSoundHintView2 = this.noSoundHintView;
        if (noSoundHintView2 != null) {
            noSoundHintView2.hide();
        }
        final HintView forwardHintView = this.forwardHintView;
        if (forwardHintView != null) {
            forwardHintView.hide();
        }
        if (messageObject2.isRoundVideo()) {
            final boolean playMessage = MediaController.getInstance().playMessage(messageObject2);
            final MediaController instance = MediaController.getInstance();
            ArrayList<MessageObject> voiceMessagesPlaylist = list;
            if (playMessage) {
                voiceMessagesPlaylist = this.createVoiceMessagesPlaylist(messageObject2, false);
            }
            instance.setVoiceMessagesPlaylist(voiceMessagesPlaylist, false);
            return playMessage;
        }
        SharedConfig.setNoSoundHintShowed(true);
        messageObject2.audioProgress = ((AnimatedFileDrawable)o).getCurrentProgress();
        messageObject2.audioProgressMs = ((AnimatedFileDrawable)o).getCurrentProgressMs();
        ((AnimatedFileDrawable)o).stop();
        if (PhotoViewer.isPlayingMessageInPip(messageObject2)) {
            PhotoViewer.getPipInstance().destroyPhotoViewer();
        }
        return MediaController.getInstance().playMessage(messageObject2);
    }
    
    @Override
    public boolean needDelayOpenAnimation() {
        return this.firstLoading;
    }
    
    @Override
    public void onActivityResultFragment(int i, final int n, final Intent intent) {
        if (n == -1) {
            if (i != 0 && i != 2) {
                if (i == 1) {
                    if (intent == null || intent.getData() == null) {
                        this.showAttachmentError();
                        return;
                    }
                    final Uri data = intent.getData();
                    if (data.toString().contains("video")) {
                        String path;
                        try {
                            path = AndroidUtilities.getPath(data);
                        }
                        catch (Exception ex) {
                            FileLog.e(ex);
                            path = null;
                        }
                        if (path == null) {
                            this.showAttachmentError();
                        }
                        if (this.paused) {
                            this.startVideoEdit = path;
                        }
                        else {
                            this.openVideoEditor(path, null);
                        }
                    }
                    else {
                        this.fillEditingMediaWithCaption(null, null);
                        SendMessagesHelper.prepareSendingPhoto(null, data, this.dialog_id, this.replyingMessageObject, null, null, null, null, 0, this.editingMessageObject);
                    }
                    this.hideFieldPanel(false);
                    DataQuery.getInstance(super.currentAccount).cleanDraft(this.dialog_id, true);
                }
                else if (i == 21) {
                    if (intent == null) {
                        this.showAttachmentError();
                        return;
                    }
                    if (intent.getData() != null) {
                        this.sendUriAsDocument(intent.getData());
                    }
                    else if (intent.getClipData() != null) {
                        ClipData clipData;
                        for (clipData = intent.getClipData(), i = 0; i < clipData.getItemCount(); ++i) {
                            this.sendUriAsDocument(clipData.getItemAt(i).getUri());
                        }
                    }
                    else {
                        this.showAttachmentError();
                    }
                    this.hideFieldPanel(false);
                    DataQuery.getInstance(super.currentAccount).cleanDraft(this.dialog_id, true);
                }
            }
            else {
                this.createChatAttachView();
                final ChatAttachAlert chatAttachAlert = this.chatAttachAlert;
                if (chatAttachAlert != null) {
                    chatAttachAlert.onActivityResultFragment(i, intent, this.currentPicturePath);
                }
                this.currentPicturePath = null;
            }
        }
    }
    
    @Override
    public boolean onBackPressed() {
        final ActionBarPopupWindow scrimPopupWindow = this.scrimPopupWindow;
        if (scrimPopupWindow != null) {
            scrimPopupWindow.dismiss();
            return false;
        }
        if (this.checkRecordLocked()) {
            return false;
        }
        final ActionBar actionBar = super.actionBar;
        if (actionBar != null && actionBar.isActionModeShowed()) {
            for (int i = 1; i >= 0; --i) {
                this.selectedMessagesIds[i].clear();
                this.selectedMessagesCanCopyIds[i].clear();
                this.selectedMessagesCanStarIds[i].clear();
            }
            this.hideActionMode();
            this.updatePinnedMessageView(true);
            this.updateVisibleRows();
            return false;
        }
        final ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null && chatActivityEnterView.isPopupShowing()) {
            this.chatActivityEnterView.hidePopup(true);
            return false;
        }
        return true;
    }
    
    @Override
    protected void onBecomeFullyHidden() {
        final UndoView undoView = this.undoView;
        if (undoView != null) {
            undoView.hide(true, 0);
        }
    }
    
    @Override
    public void onConfigurationChanged(final Configuration configuration) {
        this.fixLayout();
        final Dialog visibleDialog = super.visibleDialog;
        if (visibleDialog instanceof DatePickerDialog) {
            visibleDialog.dismiss();
        }
        final ActionBarPopupWindow scrimPopupWindow = this.scrimPopupWindow;
        if (scrimPopupWindow != null) {
            scrimPopupWindow.dismiss();
        }
        if (!AndroidUtilities.isTablet()) {
            if (configuration.orientation == 2) {
                if (PhotoViewer.hasInstance() && PhotoViewer.getInstance().isVisible()) {
                    return;
                }
                final MessageObject playingMessageObject = MediaController.getInstance().getPlayingMessageObject();
                if (playingMessageObject != null && playingMessageObject.isVideo()) {
                    PhotoViewer.getInstance().setParentActivity(this.getParentActivity());
                    FileLoader.getInstance(super.currentAccount).setLoadingVideoForPlayer(playingMessageObject.getDocument(), false);
                    MediaController.getInstance().cleanupPlayer(true, true, false, true);
                    final PhotoViewer instance = PhotoViewer.getInstance();
                    final int type = playingMessageObject.type;
                    long mergeDialogId = 0L;
                    long dialog_id;
                    if (type != 0) {
                        dialog_id = this.dialog_id;
                    }
                    else {
                        dialog_id = 0L;
                    }
                    if (playingMessageObject.type != 0) {
                        mergeDialogId = this.mergeDialogId;
                    }
                    if (instance.openPhoto(playingMessageObject, dialog_id, mergeDialogId, this.photoViewerProvider, false)) {
                        PhotoViewer.getInstance().setParentChatActivity(this);
                    }
                    final HintView noSoundHintView = this.noSoundHintView;
                    if (noSoundHintView != null) {
                        noSoundHintView.hide();
                    }
                    final HintView forwardHintView = this.forwardHintView;
                    if (forwardHintView != null) {
                        forwardHintView.hide();
                    }
                    MediaController.getInstance().resetGoingToShowMessageObject();
                }
            }
            else if (PhotoViewer.hasInstance() && PhotoViewer.getInstance().isOpenedFullScreenVideo()) {
                PhotoViewer.getInstance().injectVideoPlayerToMediaController();
                PhotoViewer.getInstance().closePhoto(false, true);
            }
        }
    }
    
    @Override
    protected void onDialogDismiss(final Dialog dialog) {
        final Dialog closeChatDialog = this.closeChatDialog;
        if (closeChatDialog != null && dialog == closeChatDialog) {
            MessagesController.getInstance(super.currentAccount).deleteDialog(this.dialog_id, 0);
            final ActionBarLayout parentLayout = super.parentLayout;
            if (parentLayout != null && !parentLayout.fragmentsStack.isEmpty()) {
                final ArrayList<BaseFragment> fragmentsStack = super.parentLayout.fragmentsStack;
                if (fragmentsStack.get(fragmentsStack.size() - 1) != this) {
                    final ArrayList<BaseFragment> fragmentsStack2 = super.parentLayout.fragmentsStack;
                    final BaseFragment baseFragment = fragmentsStack2.get(fragmentsStack2.size() - 1);
                    this.removeSelfFromStack();
                    baseFragment.finishFragment();
                    return;
                }
            }
            this.finishFragment();
        }
    }
    
    @Override
    public boolean onFragmentCreate() {
        final int int1 = super.arguments.getInt("chat_id", 0);
        final int int2 = super.arguments.getInt("user_id", 0);
        final int int3 = super.arguments.getInt("enc_id", 0);
        this.inlineReturn = super.arguments.getLong("inline_return", 0L);
        final String string = super.arguments.getString("inline_query");
        this.startLoadFromMessageId = super.arguments.getInt("message_id", 0);
        final int int4 = super.arguments.getInt("migrated_to", 0);
        this.scrollToTopOnResume = super.arguments.getBoolean("scrollToTopOnResume", false);
        if (int1 != 0) {
            this.currentChat = MessagesController.getInstance(super.currentAccount).getChat(int1);
            if (this.currentChat == null) {
                final CountDownLatch countDownLatch = new CountDownLatch(1);
                final MessagesStorage instance = MessagesStorage.getInstance(super.currentAccount);
                instance.getStorageQueue().postRunnable(new _$$Lambda$ChatActivity$diV3z76REAMmAeIIp51DTLTaiSg(this, instance, int1, countDownLatch));
                try {
                    countDownLatch.await();
                }
                catch (Exception ex) {
                    FileLog.e(ex);
                }
                if (this.currentChat == null) {
                    return false;
                }
                MessagesController.getInstance(super.currentAccount).putChat(this.currentChat, true);
            }
            if (int1 > 0) {
                this.dialog_id = -int1;
            }
            else {
                this.isBroadcast = true;
                this.dialog_id = AndroidUtilities.makeBroadcastId(int1);
            }
            if (ChatObject.isChannel(this.currentChat)) {
                MessagesController.getInstance(super.currentAccount).startShortPoll(this.currentChat, false);
            }
        }
        else if (int2 != 0) {
            this.currentUser = MessagesController.getInstance(super.currentAccount).getUser(int2);
            if (this.currentUser == null) {
                final MessagesStorage instance2 = MessagesStorage.getInstance(super.currentAccount);
                final CountDownLatch countDownLatch2 = new CountDownLatch(1);
                instance2.getStorageQueue().postRunnable(new _$$Lambda$ChatActivity$rqBjWQeWrMiTLhewd_W0HAwxKps(this, instance2, int2, countDownLatch2));
                try {
                    countDownLatch2.await();
                }
                catch (Exception ex2) {
                    FileLog.e(ex2);
                }
                if (this.currentUser == null) {
                    return false;
                }
                MessagesController.getInstance(super.currentAccount).putUser(this.currentUser, true);
            }
            this.dialog_id = int2;
            this.botUser = super.arguments.getString("botUser");
            if (string != null) {
                MessagesController.getInstance(super.currentAccount).sendBotStart(this.currentUser, string);
            }
        }
        else {
            if (int3 == 0) {
                return false;
            }
            this.currentEncryptedChat = MessagesController.getInstance(super.currentAccount).getEncryptedChat(int3);
            final MessagesStorage instance3 = MessagesStorage.getInstance(super.currentAccount);
            if (this.currentEncryptedChat == null) {
                final CountDownLatch countDownLatch3 = new CountDownLatch(1);
                instance3.getStorageQueue().postRunnable(new _$$Lambda$ChatActivity$8qYn5CerE3_o6oJqpu7NjPs2smE(this, instance3, int3, countDownLatch3));
                try {
                    countDownLatch3.await();
                }
                catch (Exception ex3) {
                    FileLog.e(ex3);
                }
                if (this.currentEncryptedChat == null) {
                    return false;
                }
                MessagesController.getInstance(super.currentAccount).putEncryptedChat(this.currentEncryptedChat, true);
            }
            this.currentUser = MessagesController.getInstance(super.currentAccount).getUser(this.currentEncryptedChat.user_id);
            if (this.currentUser == null) {
                final CountDownLatch countDownLatch4 = new CountDownLatch(1);
                instance3.getStorageQueue().postRunnable(new _$$Lambda$ChatActivity$zbo6FUWEskAD8BCSLY3b_JqK_JY(this, instance3, countDownLatch4));
                try {
                    countDownLatch4.await();
                }
                catch (Exception ex4) {
                    FileLog.e(ex4);
                }
                if (this.currentUser == null) {
                    return false;
                }
                MessagesController.getInstance(super.currentAccount).putUser(this.currentUser, true);
            }
            this.dialog_id = (long)int3 << 32;
            final int[] maxMessageId = this.maxMessageId;
            maxMessageId[0] = (maxMessageId[1] = Integer.MIN_VALUE);
            final int[] minMessageId = this.minMessageId;
            minMessageId[0] = (minMessageId[1] = Integer.MAX_VALUE);
        }
        if (this.currentUser != null) {
            MediaController.getInstance().startMediaObserver();
        }
        NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.messagesDidLoad);
        NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.emojiDidLoad);
        NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.didUpdateConnectionState);
        NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.updateInterfaces);
        NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.didReceiveNewMessages);
        NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.closeChats);
        NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.messagesRead);
        NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.messagesDeleted);
        NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.historyCleared);
        NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.messageReceivedByServer);
        NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.messageReceivedByAck);
        NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.messageSendError);
        NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.chatInfoDidLoad);
        NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.contactsDidLoad);
        NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.encryptedChatUpdated);
        NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.messagesReadEncrypted);
        NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.removeAllMessagesFromDialog);
        NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.messagePlayingProgressDidChanged);
        NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.messagePlayingDidReset);
        NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.messagePlayingGoingToStop);
        NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.messagePlayingPlayStateChanged);
        NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.screenshotTook);
        NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.blockedUsersDidLoad);
        NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.fileNewChunkAvailable);
        NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.didCreatedNewDeleteTask);
        NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.messagePlayingDidStart);
        NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.updateMessageMedia);
        NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.replaceMessagesObjects);
        NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.notificationsSettingsUpdated);
        NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.replyMessagesDidLoad);
        NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.didReceivedWebpages);
        NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.didReceivedWebpagesInUpdates);
        NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.messagesReadContent);
        NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.botInfoDidLoad);
        NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.botKeyboardDidLoad);
        NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.chatSearchResultsAvailable);
        NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.chatSearchResultsLoading);
        NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.didUpdatedMessagesViews);
        NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.chatInfoCantLoad);
        NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.pinnedMessageDidLoad);
        NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.peerSettingsDidLoad);
        NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.newDraftReceived);
        NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.userInfoDidLoad);
        NotificationCenter.getGlobalInstance().addObserver(this, NotificationCenter.didSetNewWallpapper);
        NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.channelRightsUpdated);
        NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.updateMentionsCount);
        NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.audioRecordTooShort);
        NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.didUpdatePollResults);
        NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.chatOnlineCountDidLoad);
        NotificationCenter.getInstance(super.currentAccount).addObserver(this, NotificationCenter.videoLoadingStateChanged);
        super.onFragmentCreate();
        if (this.currentEncryptedChat == null && !this.isBroadcast) {
            DataQuery.getInstance(super.currentAccount).loadBotKeyboard(this.dialog_id);
        }
        this.loading = true;
        MessagesController.getInstance(super.currentAccount).loadPeerSettings(this.currentUser, this.currentChat);
        MessagesController.getInstance(super.currentAccount).setLastCreatedDialogId(this.dialog_id, true);
        if (this.startLoadFromMessageId == 0) {
            final SharedPreferences notificationsSettings = MessagesController.getNotificationsSettings(super.currentAccount);
            final StringBuilder sb = new StringBuilder();
            sb.append("diditem");
            sb.append(this.dialog_id);
            final int int5 = notificationsSettings.getInt(sb.toString(), 0);
            if (int5 != 0) {
                this.wasManualScroll = true;
                this.loadingFromOldPosition = true;
                final StringBuilder sb2 = new StringBuilder();
                sb2.append("diditemo");
                sb2.append(this.dialog_id);
                this.startLoadFromMessageOffset = notificationsSettings.getInt(sb2.toString(), 0);
                this.startLoadFromMessageId = int5;
            }
        }
        else {
            this.needSelectFromMessageId = true;
        }
        if (this.startLoadFromMessageId != 0) {
            this.waitingForLoad.add(this.lastLoadIndex);
            if (int4 != 0) {
                this.mergeDialogId = int4;
                final MessagesController instance4 = MessagesController.getInstance(super.currentAccount);
                final long mergeDialogId = this.mergeDialogId;
                int n;
                if (this.loadingFromOldPosition) {
                    n = 50;
                }
                else if (AndroidUtilities.isTablet()) {
                    n = 30;
                }
                else {
                    n = 20;
                }
                instance4.loadMessages(mergeDialogId, n, this.startLoadFromMessageId, 0, true, 0, super.classGuid, 3, 0, ChatObject.isChannel(this.currentChat), this.lastLoadIndex++);
            }
            else {
                final MessagesController instance5 = MessagesController.getInstance(super.currentAccount);
                final long dialog_id = this.dialog_id;
                int n2;
                if (this.loadingFromOldPosition) {
                    n2 = 50;
                }
                else if (AndroidUtilities.isTablet()) {
                    n2 = 30;
                }
                else {
                    n2 = 20;
                }
                instance5.loadMessages(dialog_id, n2, this.startLoadFromMessageId, 0, true, 0, super.classGuid, 3, 0, ChatObject.isChannel(this.currentChat), this.lastLoadIndex++);
            }
        }
        else {
            this.waitingForLoad.add(this.lastLoadIndex);
            final MessagesController instance6 = MessagesController.getInstance(super.currentAccount);
            final long dialog_id2 = this.dialog_id;
            int n3;
            if (AndroidUtilities.isTablet()) {
                n3 = 30;
            }
            else {
                n3 = 20;
            }
            instance6.loadMessages(dialog_id2, n3, 0, 0, true, 0, super.classGuid, 2, 0, ChatObject.isChannel(this.currentChat), this.lastLoadIndex++);
        }
        if (this.currentChat != null) {
            CountDownLatch countDownLatch5;
            if (this.isBroadcast) {
                countDownLatch5 = new CountDownLatch(1);
            }
            else {
                countDownLatch5 = null;
            }
            MessagesController.getInstance(super.currentAccount).loadChatInfo(this.currentChat.id, countDownLatch5, true);
            this.chatInfo = this.getMessagesController().getChatFull(this.currentChat.id);
            if (this.isBroadcast && countDownLatch5 != null) {
                try {
                    countDownLatch5.await();
                }
                catch (Exception ex5) {
                    FileLog.e(ex5);
                }
            }
        }
        else if (this.currentUser != null) {
            MessagesController.getInstance(super.currentAccount).loadUserInfo(this.currentUser, true, super.classGuid);
        }
        if (int2 != 0 && this.currentUser.bot) {
            DataQuery.getInstance(super.currentAccount).loadBotInfo(int2, true, super.classGuid);
        }
        else if (this.chatInfo instanceof TLRPC.TL_chatFull) {
            for (int i = 0; i < this.chatInfo.participants.participants.size(); ++i) {
                final TLRPC.User user = MessagesController.getInstance(super.currentAccount).getUser(this.chatInfo.participants.participants.get(i).user_id);
                if (user != null && user.bot) {
                    DataQuery.getInstance(super.currentAccount).loadBotInfo(user.id, true, super.classGuid);
                }
            }
        }
        if (this.currentUser != null) {
            this.userBlocked = (MessagesController.getInstance(super.currentAccount).blockedUsers.indexOfKey(this.currentUser.id) >= 0);
        }
        if (AndroidUtilities.isTablet()) {
            NotificationCenter.getInstance(super.currentAccount).postNotificationName(NotificationCenter.openedChatChanged, this.dialog_id, false);
        }
        final TLRPC.EncryptedChat currentEncryptedChat = this.currentEncryptedChat;
        if (currentEncryptedChat != null && AndroidUtilities.getMyLayerVersion(currentEncryptedChat.layer) != 73) {
            SecretChatHelper.getInstance(super.currentAccount).sendNotifyLayerMessage(this.currentEncryptedChat, null);
        }
        return true;
    }
    
    @Override
    public void onFragmentDestroy() {
        super.onFragmentDestroy();
        final ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            chatActivityEnterView.onDestroy();
        }
        final MentionsAdapter mentionsAdapter = this.mentionsAdapter;
        if (mentionsAdapter != null) {
            mentionsAdapter.onDestroy();
        }
        final ChatAttachAlert chatAttachAlert = this.chatAttachAlert;
        if (chatAttachAlert != null) {
            chatAttachAlert.dismissInternal();
        }
        final UndoView undoView = this.undoView;
        if (undoView != null) {
            undoView.hide(true, 0);
        }
        MessagesController.getInstance(super.currentAccount).setLastCreatedDialogId(this.dialog_id, false);
        NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.messagesDidLoad);
        NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.emojiDidLoad);
        NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.didUpdateConnectionState);
        NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.updateInterfaces);
        NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.didReceiveNewMessages);
        NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.closeChats);
        NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.messagesRead);
        NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.messagesDeleted);
        NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.historyCleared);
        NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.messageReceivedByServer);
        NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.messageReceivedByAck);
        NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.messageSendError);
        NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.chatInfoDidLoad);
        NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.encryptedChatUpdated);
        NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.messagesReadEncrypted);
        NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.removeAllMessagesFromDialog);
        NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.contactsDidLoad);
        NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.messagePlayingProgressDidChanged);
        NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.messagePlayingDidReset);
        NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.screenshotTook);
        NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.blockedUsersDidLoad);
        NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.fileNewChunkAvailable);
        NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.didCreatedNewDeleteTask);
        NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.messagePlayingDidStart);
        NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.messagePlayingGoingToStop);
        NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.updateMessageMedia);
        NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.replaceMessagesObjects);
        NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.notificationsSettingsUpdated);
        NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.replyMessagesDidLoad);
        NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.didReceivedWebpages);
        NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.didReceivedWebpagesInUpdates);
        NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.messagesReadContent);
        NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.botInfoDidLoad);
        NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.botKeyboardDidLoad);
        NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.chatSearchResultsAvailable);
        NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.chatSearchResultsLoading);
        NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.messagePlayingPlayStateChanged);
        NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.didUpdatedMessagesViews);
        NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.chatInfoCantLoad);
        NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.pinnedMessageDidLoad);
        NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.peerSettingsDidLoad);
        NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.newDraftReceived);
        NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.userInfoDidLoad);
        NotificationCenter.getGlobalInstance().removeObserver(this, NotificationCenter.didSetNewWallpapper);
        NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.channelRightsUpdated);
        NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.updateMentionsCount);
        NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.audioRecordTooShort);
        NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.didUpdatePollResults);
        NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.chatOnlineCountDidLoad);
        NotificationCenter.getInstance(super.currentAccount).removeObserver(this, NotificationCenter.videoLoadingStateChanged);
        if (AndroidUtilities.isTablet()) {
            NotificationCenter.getInstance(super.currentAccount).postNotificationName(NotificationCenter.openedChatChanged, this.dialog_id, true);
        }
        if (this.currentUser != null) {
            MediaController.getInstance().stopMediaObserver();
        }
        if (this.currentEncryptedChat != null) {
            try {
                if (Build$VERSION.SDK_INT >= 23 && (SharedConfig.passcodeHash.length() == 0 || SharedConfig.allowScreenCapture)) {
                    MediaController.getInstance().setFlagSecure(this, false);
                }
            }
            catch (Throwable t) {
                FileLog.e(t);
            }
        }
        if (this.currentUser != null) {
            MessagesController.getInstance(super.currentAccount).cancelLoadFullUser(this.currentUser.id);
        }
        AndroidUtilities.removeAdjustResize(this.getParentActivity(), super.classGuid);
        final StickersAdapter stickersAdapter = this.stickersAdapter;
        if (stickersAdapter != null) {
            stickersAdapter.onDestroy();
        }
        final ChatAttachAlert chatAttachAlert2 = this.chatAttachAlert;
        if (chatAttachAlert2 != null) {
            chatAttachAlert2.onDestroy();
        }
        AndroidUtilities.unlockOrientation(this.getParentActivity());
        if (ChatObject.isChannel(this.currentChat)) {
            MessagesController.getInstance(super.currentAccount).startShortPoll(this.currentChat, true);
        }
    }
    
    @Override
    public void onPause() {
        super.onPause();
        final ActionBarPopupWindow scrimPopupWindow = this.scrimPopupWindow;
        if (scrimPopupWindow != null) {
            scrimPopupWindow.dismiss();
        }
        MessagesController.getInstance(super.currentAccount).markDialogAsReadNow(this.dialog_id);
        MediaController.getInstance().stopRaiseToEarSensors(this, true);
        this.paused = true;
        this.wasPaused = true;
        NotificationsController.getInstance(super.currentAccount).setOpenedDialogId(0L);
        MessagesController.getInstance(super.currentAccount).setLastVisibleDialogId(this.dialog_id, false);
        final boolean ignoreAttachOnPause = this.ignoreAttachOnPause;
        final TLRPC.Message message = null;
        Object replyingMessageObject;
        CharSequence trimmedString;
        boolean messageWebPageSearchEnabled;
        if (!ignoreAttachOnPause && this.chatActivityEnterView != null && this.bottomOverlayChat.getVisibility() != 0) {
            this.chatActivityEnterView.onPause();
            replyingMessageObject = this.replyingMessageObject;
            if (!this.chatActivityEnterView.isEditingMessage()) {
                trimmedString = AndroidUtilities.getTrimmedString(this.chatActivityEnterView.getFieldText());
            }
            else {
                trimmedString = null;
            }
            messageWebPageSearchEnabled = this.chatActivityEnterView.isMessageWebPageSearchEnabled();
            this.chatActivityEnterView.setFieldFocused(false);
        }
        else {
            replyingMessageObject = (trimmedString = null);
            messageWebPageSearchEnabled = true;
        }
        final ChatAttachAlert chatAttachAlert = this.chatAttachAlert;
        if (chatAttachAlert != null) {
            if (!this.ignoreAttachOnPause) {
                chatAttachAlert.onPause();
            }
            else {
                this.ignoreAttachOnPause = false;
            }
        }
        final SizeNotifierFrameLayout contentView = this.contentView;
        if (contentView != null) {
            contentView.onPause();
        }
        final CharSequence[] array = { trimmedString };
        final ArrayList<TLRPC.MessageEntity> entities = DataQuery.getInstance(super.currentAccount).getEntities(array);
        final DataQuery instance = DataQuery.getInstance(super.currentAccount);
        final long dialog_id = this.dialog_id;
        final CharSequence charSequence = array[0];
        TLRPC.Message messageOwner = message;
        if (replyingMessageObject != null) {
            messageOwner = ((MessageObject)replyingMessageObject).messageOwner;
        }
        instance.saveDraft(dialog_id, charSequence, entities, messageOwner, !messageWebPageSearchEnabled);
        MessagesController.getInstance(super.currentAccount).cancelTyping(0, this.dialog_id);
        if (!this.pausedOnLastMessage) {
            final SharedPreferences$Editor edit = MessagesController.getNotificationsSettings(super.currentAccount).edit();
            final GridLayoutManagerFixed chatLayoutManager = this.chatLayoutManager;
            int n2 = 0;
            int n3 = 0;
            Label_0724: {
                Label_0718: {
                    if (chatLayoutManager != null) {
                        final int firstVisibleItemPosition = chatLayoutManager.findFirstVisibleItemPosition();
                        if (firstVisibleItemPosition != 0) {
                            RecyclerListView.Holder holder = (RecyclerListView.Holder)this.chatListView.findViewHolderForAdapterPosition(firstVisibleItemPosition);
                            if (holder != null) {
                                final View itemView = holder.itemView;
                                int n;
                                if (itemView instanceof ChatMessageCell) {
                                    n = ((ChatMessageCell)itemView).getMessageObject().getId();
                                }
                                else if (itemView instanceof ChatActionCell) {
                                    n = ((ChatActionCell)itemView).getMessageObject().getId();
                                }
                                else {
                                    n = 0;
                                }
                                if (n == 0) {
                                    holder = (RecyclerListView.Holder)this.chatListView.findViewHolderForAdapterPosition(firstVisibleItemPosition + 1);
                                }
                                while (true) {
                                    for (int i = firstVisibleItemPosition - 1; i >= this.chatAdapter.messagesStartRow; --i) {
                                        final int index = i - this.chatAdapter.messagesStartRow;
                                        if (index >= 0) {
                                            if (index < this.messages.size()) {
                                                final MessageObject messageObject = this.messages.get(index);
                                                if (messageObject.getId() != 0) {
                                                    if (messageObject.isOut() || !messageObject.isUnread()) {
                                                        break;
                                                    }
                                                    final boolean b = true;
                                                    if (holder == null || b) {
                                                        break Label_0718;
                                                    }
                                                    final View itemView2 = holder.itemView;
                                                    int j;
                                                    if (itemView2 instanceof ChatMessageCell) {
                                                        j = ((ChatMessageCell)itemView2).getMessageObject().getId();
                                                    }
                                                    else if (itemView2 instanceof ChatActionCell) {
                                                        j = ((ChatActionCell)itemView2).getMessageObject().getId();
                                                    }
                                                    else {
                                                        j = 0;
                                                    }
                                                    if ((j <= 0 || this.currentEncryptedChat != null) && (j >= 0 || this.currentEncryptedChat == null)) {
                                                        break Label_0718;
                                                    }
                                                    final int k = holder.itemView.getBottom() - this.chatListView.getMeasuredHeight();
                                                    n2 = j;
                                                    n3 = k;
                                                    if (BuildVars.LOGS_ENABLED) {
                                                        final StringBuilder sb = new StringBuilder();
                                                        sb.append("save offset = ");
                                                        sb.append(k);
                                                        sb.append(" for mid ");
                                                        sb.append(j);
                                                        FileLog.d(sb.toString());
                                                        n2 = j;
                                                        n3 = k;
                                                    }
                                                    break Label_0724;
                                                }
                                            }
                                        }
                                    }
                                    final boolean b = false;
                                    continue;
                                }
                            }
                        }
                    }
                }
                n2 = 0;
                n3 = 0;
            }
            if (n2 != 0) {
                final StringBuilder sb2 = new StringBuilder();
                sb2.append("diditem");
                sb2.append(this.dialog_id);
                edit.putInt(sb2.toString(), n2);
                final StringBuilder sb3 = new StringBuilder();
                sb3.append("diditemo");
                sb3.append(this.dialog_id);
                edit.putInt(sb3.toString(), n3);
            }
            else {
                this.pausedOnLastMessage = true;
                final StringBuilder sb4 = new StringBuilder();
                sb4.append("diditem");
                sb4.append(this.dialog_id);
                edit.remove(sb4.toString());
                final StringBuilder sb5 = new StringBuilder();
                sb5.append("diditemo");
                sb5.append(this.dialog_id);
                edit.remove(sb5.toString());
            }
            edit.commit();
        }
        if (this.currentUser != null) {
            this.chatLeaveTime = System.currentTimeMillis();
            this.updateInformationForScreenshotDetector();
        }
        final UndoView undoView = this.undoView;
        if (undoView != null) {
            undoView.hide(true, 0);
        }
    }
    
    @Override
    protected void onRemoveFromParent() {
        final MessageObject playingMessageObject = MediaController.getInstance().getPlayingMessageObject();
        if (playingMessageObject != null && playingMessageObject.isVideo()) {
            MediaController.getInstance().cleanupPlayer(true, true);
        }
        else {
            MediaController.getInstance().setTextureView(this.videoTextureView, null, null, false);
        }
    }
    
    @Override
    public void onRequestPermissionsResultFragment(final int n, final String[] array, final int[] array2) {
        final ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            chatActivityEnterView.onRequestPermissionsResultFragment(n, array, array2);
        }
        final MentionsAdapter mentionsAdapter = this.mentionsAdapter;
        if (mentionsAdapter != null) {
            mentionsAdapter.onRequestPermissionsResultFragment(n, array, array2);
        }
        final boolean b = false;
        if (n == 17) {
            final ChatAttachAlert chatAttachAlert = this.chatAttachAlert;
            if (chatAttachAlert != null) {
                boolean b2 = b;
                if (array2.length > 0) {
                    b2 = b;
                    if (array2[0] == 0) {
                        b2 = true;
                    }
                }
                chatAttachAlert.checkCamera(b2);
                return;
            }
        }
        if (n == 21) {
            if (this.getParentActivity() == null) {
                return;
            }
            if (array2 != null && array2.length != 0 && array2[0] != 0) {
                final AlertDialog.Builder builder = new AlertDialog.Builder((Context)this.getParentActivity());
                builder.setTitle(LocaleController.getString("AppName", 2131558635));
                builder.setMessage(LocaleController.getString("PermissionNoAudioVideo", 2131560415));
                builder.setNegativeButton(LocaleController.getString("PermissionOpenSettings", 2131560419), (DialogInterface$OnClickListener)new _$$Lambda$ChatActivity$hJy6ruYBSg7XdCQj8r9RXHEznxM(this));
                builder.setPositiveButton(LocaleController.getString("OK", 2131560097), null);
                builder.show();
            }
        }
        else if (n == 19 && array2 != null && array2.length > 0 && array2[0] == 0) {
            this.processSelectedAttach(0);
        }
        else if (n == 20 && array2 != null && array2.length > 0 && array2[0] == 0) {
            this.processSelectedAttach(2);
        }
        else if (n == 101) {
            final TLRPC.User currentUser = this.currentUser;
            if (currentUser != null) {
                if (array2.length > 0 && array2[0] == 0) {
                    VoIPHelper.startCall(currentUser, this.getParentActivity(), MessagesController.getInstance(super.currentAccount).getUserFull(this.currentUser.id));
                }
                else {
                    VoIPHelper.permissionDenied(this.getParentActivity(), null);
                }
            }
        }
    }
    
    @Override
    public void onResume() {
        super.onResume();
        AndroidUtilities.requestAdjustResize(this.getParentActivity(), super.classGuid);
        MediaController.getInstance().startRaiseToEarSensors(this);
        this.checkRaiseSensors();
        final ChatAttachAlert chatAttachAlert = this.chatAttachAlert;
        if (chatAttachAlert != null) {
            chatAttachAlert.onResume();
        }
        final SizeNotifierFrameLayout contentView = this.contentView;
        if (contentView != null) {
            contentView.onResume();
        }
        if (this.firstOpen && MessagesController.getInstance(super.currentAccount).isProxyDialog(this.dialog_id, true)) {
            final SharedPreferences globalNotificationsSettings = MessagesController.getGlobalNotificationsSettings();
            if (globalNotificationsSettings.getLong("proxychannel", 0L) != this.dialog_id) {
                globalNotificationsSettings.edit().putLong("proxychannel", this.dialog_id).commit();
                final AlertDialog.Builder builder = new AlertDialog.Builder((Context)this.getParentActivity());
                builder.setTitle(LocaleController.getString("AppName", 2131558635));
                builder.setMessage(LocaleController.getString("UseProxySponsorInfo", 2131560981));
                builder.setPositiveButton(LocaleController.getString("OK", 2131560097), null);
                this.showDialog(builder.create());
            }
        }
        this.checkActionBarMenu();
        final TLRPC.PhotoSize replyImageLocation = this.replyImageLocation;
        if (replyImageLocation != null) {
            final BackupImageView replyImageView = this.replyImageView;
            if (replyImageView != null) {
                replyImageView.setImage(ImageLocation.getForObject(replyImageLocation, this.replyImageLocationObject), "50_50", ImageLocation.getForObject(this.replyImageThumbLocation, this.replyImageLocationObject), "50_50_b", null, this.replyImageSize, this.replyImageCacheType, this.replyingMessageObject);
            }
        }
        final TLRPC.PhotoSize pinnedImageLocation = this.pinnedImageLocation;
        if (pinnedImageLocation != null) {
            final BackupImageView pinnedMessageImageView = this.pinnedMessageImageView;
            if (pinnedMessageImageView != null) {
                pinnedMessageImageView.setImage(ImageLocation.getForObject(pinnedImageLocation, this.pinnedImageLocationObject), "50_50", ImageLocation.getForObject(this.pinnedImageThumbLocation, this.pinnedImageLocationObject), "50_50_b", null, this.pinnedImageSize, this.pinnedImageCacheType, this.pinnedMessageObject);
            }
        }
        NotificationsController.getInstance(super.currentAccount).setOpenedDialogId(this.dialog_id);
        MessagesController.getInstance(super.currentAccount).setLastVisibleDialogId(this.dialog_id, true);
        if (this.scrollToTopOnResume) {
            Label_0451: {
                if (this.scrollToTopUnReadOnResume) {
                    final MessageObject scrollToMessage = this.scrollToMessage;
                    if (scrollToMessage != null) {
                        if (this.chatListView != null) {
                            int n = this.scrollToMessagePosition;
                            boolean b = false;
                            Label_0415: {
                                if (n == -9000) {
                                    n = this.getScrollOffsetForMessage(scrollToMessage);
                                }
                                else {
                                    if (n != -10000) {
                                        b = true;
                                        break Label_0415;
                                    }
                                    n = -AndroidUtilities.dp(11.0f);
                                }
                                b = false;
                            }
                            this.chatLayoutManager.scrollToPositionWithOffset(this.chatAdapter.messagesStartRow + this.messages.indexOf(this.scrollToMessage), n, b);
                        }
                        break Label_0451;
                    }
                }
                this.moveScrollToLastMessage();
            }
            this.scrollToTopUnReadOnResume = false;
            this.scrollToTopOnResume = false;
            this.scrollToMessage = null;
        }
        this.paused = false;
        this.checkScrollForLoad(this.pausedOnLastMessage = false);
        if (this.wasPaused) {
            this.wasPaused = false;
            final ChatActivityAdapter chatAdapter = this.chatAdapter;
            if (chatAdapter != null) {
                chatAdapter.notifyDataSetChanged();
            }
        }
        this.fixLayout();
        this.applyDraftMaybe(false);
        final FrameLayout bottomOverlayChat = this.bottomOverlayChat;
        if (bottomOverlayChat != null && bottomOverlayChat.getVisibility() != 0 && !super.actionBar.isSearchFieldVisible()) {
            this.chatActivityEnterView.setFieldFocused(true);
        }
        final ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            chatActivityEnterView.onResume();
        }
        if (this.currentUser != null) {
            this.chatEnterTime = System.currentTimeMillis();
            this.chatLeaveTime = 0L;
        }
        if (this.startVideoEdit != null) {
            AndroidUtilities.runOnUIThread(new _$$Lambda$ChatActivity$N0ZOc1paMbjXSSSBzo7RxTgXKM0(this));
        }
        if (this.chatListView != null) {
            final ChatActivityEnterView chatActivityEnterView2 = this.chatActivityEnterView;
            if (chatActivityEnterView2 == null || !chatActivityEnterView2.isEditingMessage()) {
                this.chatListView.setOnItemLongClickListener(this.onItemLongClickListener);
                this.chatListView.setOnItemClickListener(this.onItemClickListener);
                this.chatListView.setLongClickable(true);
            }
        }
        this.checkBotCommands();
        this.updateTitle();
    }
    
    public void onTransitionAnimationEnd(final boolean b, final boolean b2) {
        final NotificationCenter instance = NotificationCenter.getInstance(super.currentAccount);
        final int n = 0;
        instance.setAnimationInProgress(false);
        if (b) {
            this.openAnimationEnded = true;
            if (Build$VERSION.SDK_INT >= 21) {
                this.createChatAttachView();
            }
            if (this.chatActivityEnterView.hasRecordVideo() && !this.chatActivityEnterView.isSendButtonVisible()) {
                final TLRPC.Chat currentChat = this.currentChat;
                final boolean b3 = currentChat != null && ChatObject.isChannel(currentChat) && !this.currentChat.megagroup;
                final SharedPreferences globalMainSettings = MessagesController.getGlobalMainSettings();
                String s;
                if (b3) {
                    s = "needShowRoundHintChannel";
                }
                else {
                    s = "needShowRoundHint";
                }
                if (globalMainSettings.getBoolean(s, true) && Utilities.random.nextFloat() < 0.2f) {
                    this.showVoiceHint(false, this.chatActivityEnterView.isInVideoMode());
                    globalMainSettings.edit().putBoolean(s, false).commit();
                }
            }
            if (!b2) {
                final ActionBarLayout parentLayout = super.parentLayout;
                if (parentLayout != null) {
                    for (int size = parentLayout.fragmentsStack.size(), i = n; i < size - 1; ++i) {
                        final BaseFragment baseFragment = super.parentLayout.fragmentsStack.get(i);
                        if (baseFragment != this && baseFragment instanceof ChatActivity && ((ChatActivity)baseFragment).dialog_id == this.dialog_id) {
                            baseFragment.removeSelfFromStack();
                            break;
                        }
                    }
                }
            }
        }
    }
    
    public void onTransitionAnimationStart(final boolean b, final boolean b2) {
        NotificationCenter.getInstance(super.currentAccount).setAllowedNotificationsDutingAnimation(new int[] { NotificationCenter.chatInfoDidLoad, NotificationCenter.dialogsNeedReload, NotificationCenter.closeChats, NotificationCenter.messagesDidLoad, NotificationCenter.botKeyboardDidLoad, NotificationCenter.userInfoDidLoad, NotificationCenter.needDeleteDialog });
        NotificationCenter.getInstance(super.currentAccount).setAnimationInProgress(true);
        if (b) {
            this.openAnimationEnded = false;
        }
    }
    
    public void openVCard(final String str, final String s, final String s2) {
        try {
            final File parent = new File(FileLoader.getDirectory(4), "sharing/");
            parent.mkdirs();
            final File file = new File(parent, "vcard.vcf");
            final BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(file));
            bufferedWriter.write(str);
            bufferedWriter.close();
            this.presentFragment(new PhonebookShareActivity(null, null, file, ContactsController.formatName(s, s2)));
        }
        catch (Exception ex) {
            FileLog.e(ex);
        }
    }
    
    public void openVideoEditor(final String s, final String caption) {
        if (this.getParentActivity() != null) {
            final Bitmap videoThumbnail = ThumbnailUtils.createVideoThumbnail(s, 1);
            PhotoViewer.getInstance().setParentActivity(this.getParentActivity());
            final ArrayList<Object> list = new ArrayList<Object>();
            final MediaController.PhotoEntry e = new MediaController.PhotoEntry(0, 0, 0L, s, 0, true);
            e.caption = caption;
            list.add(e);
            PhotoViewer.getInstance().openPhotoForSelect(list, 0, 2, (PhotoViewer.PhotoViewerProvider)new PhotoViewer.EmptyPhotoViewerProvider() {
                @Override
                public boolean canScrollAway() {
                    return false;
                }
                
                @Override
                public ImageReceiver.BitmapHolder getThumbForPhoto(final MessageObject messageObject, final TLRPC.FileLocation fileLocation, final int n) {
                    return new ImageReceiver.BitmapHolder(videoThumbnail, null);
                }
                
                @Override
                public void sendButtonPressed(final int n, final VideoEditedInfo videoEditedInfo) {
                    ChatActivity.this.sendMedia(list.get(0), videoEditedInfo);
                }
            }, this);
        }
        else {
            this.fillEditingMediaWithCaption(caption, null);
            SendMessagesHelper.prepareSendingVideo(s, 0L, 0L, 0, 0, null, this.dialog_id, this.replyingMessageObject, null, null, 0, this.editingMessageObject);
            this.hideFieldPanel(false);
            DataQuery.getInstance(super.currentAccount).cleanDraft(this.dialog_id, true);
        }
    }
    
    public boolean playFirstUnreadVoiceMessage() {
        final ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null && chatActivityEnterView.isRecordingAudioVideo()) {
            return true;
        }
        for (int i = this.messages.size() - 1; i >= 0; --i) {
            final MessageObject messageObject = this.messages.get(i);
            if ((messageObject.isVoice() || messageObject.isRoundVideo()) && messageObject.isContentUnread() && !messageObject.isOut()) {
                final MediaController instance = MediaController.getInstance();
                ArrayList<MessageObject> voiceMessagesPlaylist;
                if (MediaController.getInstance().playMessage(messageObject)) {
                    voiceMessagesPlaylist = this.createVoiceMessagesPlaylist(messageObject, true);
                }
                else {
                    voiceMessagesPlaylist = null;
                }
                instance.setVoiceMessagesPlaylist(voiceMessagesPlaylist, true);
                return true;
            }
        }
        if (Build$VERSION.SDK_INT >= 23 && this.getParentActivity() != null && this.getParentActivity().checkSelfPermission("android.permission.RECORD_AUDIO") != 0) {
            this.getParentActivity().requestPermissions(new String[] { "android.permission.RECORD_AUDIO" }, 3);
            return true;
        }
        return false;
    }
    
    public void processInlineBotContextPM(final TLRPC.TL_inlineBotSwitchPM tl_inlineBotSwitchPM) {
        if (tl_inlineBotSwitchPM == null) {
            return;
        }
        final TLRPC.User contextBotUser = this.mentionsAdapter.getContextBotUser();
        if (contextBotUser == null) {
            return;
        }
        this.chatActivityEnterView.setFieldText("");
        final long dialog_id = this.dialog_id;
        if (dialog_id == contextBotUser.id) {
            this.inlineReturn = dialog_id;
            MessagesController.getInstance(super.currentAccount).sendBotStart(this.currentUser, tl_inlineBotSwitchPM.start_param);
        }
        else {
            final Bundle bundle = new Bundle();
            bundle.putInt("user_id", contextBotUser.id);
            bundle.putString("inline_query", tl_inlineBotSwitchPM.start_param);
            bundle.putLong("inline_return", this.dialog_id);
            if (!MessagesController.getInstance(super.currentAccount).checkCanOpenChat(bundle, this)) {
                return;
            }
            this.presentFragment(new ChatActivity(bundle));
        }
    }
    
    public boolean processSendingText(final String s) {
        return this.chatActivityEnterView.processSendingText(s);
    }
    
    public boolean processSwitchButton(final TLRPC.TL_keyboardButtonSwitchInline tl_keyboardButtonSwitchInline) {
        if (this.inlineReturn != 0L && !tl_keyboardButtonSwitchInline.same_peer && super.parentLayout != null) {
            final StringBuilder sb = new StringBuilder();
            sb.append("@");
            sb.append(this.currentUser.username);
            sb.append(" ");
            sb.append(tl_keyboardButtonSwitchInline.query);
            final String string = sb.toString();
            if (this.inlineReturn == this.dialog_id) {
                this.inlineReturn = 0L;
                this.chatActivityEnterView.setFieldText(string);
            }
            else {
                DataQuery.getInstance(super.currentAccount).saveDraft(this.inlineReturn, string, null, null, false);
                if (super.parentLayout.fragmentsStack.size() > 1) {
                    final ArrayList<BaseFragment> fragmentsStack = super.parentLayout.fragmentsStack;
                    final BaseFragment baseFragment = fragmentsStack.get(fragmentsStack.size() - 2);
                    if (baseFragment instanceof ChatActivity && ((ChatActivity)baseFragment).dialog_id == this.inlineReturn) {
                        this.finishFragment();
                    }
                    else {
                        final Bundle bundle = new Bundle();
                        final long inlineReturn = this.inlineReturn;
                        final int n = (int)inlineReturn;
                        final int n2 = (int)(inlineReturn >> 32);
                        if (n != 0) {
                            if (n > 0) {
                                bundle.putInt("user_id", n);
                            }
                            else if (n < 0) {
                                bundle.putInt("chat_id", -n);
                            }
                        }
                        else {
                            bundle.putInt("enc_id", n2);
                        }
                        this.presentFragment(new ChatActivity(bundle), true);
                    }
                }
            }
            return true;
        }
        return false;
    }
    
    @Override
    public void restoreSelfArgs(final Bundle bundle) {
        this.currentPicturePath = bundle.getString("path");
    }
    
    @Override
    public void saveSelfArgs(final Bundle bundle) {
        final String currentPicturePath = this.currentPicturePath;
        if (currentPicturePath != null) {
            bundle.putString("path", currentPicturePath);
        }
    }
    
    public void scrollToMessageId(int n, final int returnToMessageId, final boolean needSelectFromMessageId, final int returnToLoadIndex, final boolean b) {
        this.wasManualScroll = true;
        final MessageObject o = (MessageObject)this.messagesDict[returnToLoadIndex].get(n);
        boolean b3 = false;
        Label_0364: {
            if (o != null && this.messages.indexOf(o) != -1) {
                this.removeSelectedMessageHighlight();
                if (needSelectFromMessageId) {
                    this.highlightMessageId = n;
                }
                final int scrollOffsetForMessage = this.getScrollOffsetForMessage(o);
                if (b) {
                    final ArrayList<MessageObject> messages = this.messages;
                    if (messages.get(messages.size() - 1) == o) {
                        this.chatListView.smoothScrollToPosition(this.chatAdapter.getItemCount() - 1);
                    }
                    else {
                        this.chatListView.smoothScrollToPosition(this.chatAdapter.messagesStartRow + this.messages.indexOf(o));
                    }
                }
                else {
                    final ArrayList<MessageObject> messages2 = this.messages;
                    if (messages2.get(messages2.size() - 1) == o) {
                        this.chatLayoutManager.scrollToPositionWithOffset(this.chatAdapter.getItemCount() - 1, scrollOffsetForMessage, false);
                    }
                    else {
                        this.chatLayoutManager.scrollToPositionWithOffset(this.chatAdapter.messagesStartRow + this.messages.indexOf(o), scrollOffsetForMessage, false);
                    }
                }
                this.updateVisibleRows();
                final int childCount = this.chatListView.getChildCount();
                int i = 0;
                while (true) {
                    while (i < childCount) {
                        final View child = this.chatListView.getChildAt(i);
                        Label_0283: {
                            if (child instanceof ChatMessageCell) {
                                final MessageObject messageObject = ((ChatMessageCell)child).getMessageObject();
                                if (messageObject != null && messageObject.getId() == o.getId()) {
                                    child.sendAccessibilityEvent(8);
                                    break Label_0283;
                                }
                            }
                            else if (child instanceof ChatActionCell) {
                                final MessageObject messageObject2 = ((ChatActionCell)child).getMessageObject();
                                if (messageObject2 != null && messageObject2.getId() == o.getId()) {
                                    child.sendAccessibilityEvent(8);
                                    break Label_0283;
                                }
                            }
                            ++i;
                            continue;
                        }
                        final boolean b2 = true;
                        if (!b2) {
                            this.showPagedownButton(true, true);
                        }
                        b3 = false;
                        break Label_0364;
                    }
                    final boolean b2 = false;
                    continue;
                }
            }
            b3 = true;
        }
        if (b3) {
            if (this.currentEncryptedChat != null && !MessagesStorage.getInstance(super.currentAccount).checkMessageId(this.dialog_id, this.startLoadFromMessageId)) {
                return;
            }
            this.waitingForLoad.clear();
            this.waitingForReplyMessageLoad = true;
            this.removeSelectedMessageHighlight();
            this.scrollToMessagePosition = -10000;
            if ((this.startLoadFromMessageId = n) == this.createUnreadMessageAfterId) {
                this.createUnreadMessageAfterIdLoading = true;
            }
            this.waitingForLoad.add(this.lastLoadIndex);
            final MessagesController instance = MessagesController.getInstance(super.currentAccount);
            long n2;
            if (returnToLoadIndex == 0) {
                n2 = this.dialog_id;
            }
            else {
                n2 = this.mergeDialogId;
            }
            if (AndroidUtilities.isTablet()) {
                n = 30;
            }
            else {
                n = 20;
            }
            instance.loadMessages(n2, n, this.startLoadFromMessageId, 0, true, 0, super.classGuid, 3, 0, ChatObject.isChannel(this.currentChat), this.lastLoadIndex++);
        }
        else {
            this.showFloatingDateView(false);
        }
        this.returnToMessageId = returnToMessageId;
        this.returnToLoadIndex = returnToLoadIndex;
        this.needSelectFromMessageId = needSelectFromMessageId;
    }
    
    public void sendMedia(final MediaController.PhotoEntry photoEntry, final VideoEditedInfo videoEditedInfo) {
        if (photoEntry == null) {
            return;
        }
        this.fillEditingMediaWithCaption(photoEntry.caption, photoEntry.entities);
        if (photoEntry.isVideo) {
            if (videoEditedInfo != null) {
                SendMessagesHelper.prepareSendingVideo(photoEntry.path, videoEditedInfo.estimatedSize, videoEditedInfo.estimatedDuration, videoEditedInfo.resultWidth, videoEditedInfo.resultHeight, videoEditedInfo, this.dialog_id, this.replyingMessageObject, photoEntry.caption, photoEntry.entities, photoEntry.ttl, this.editingMessageObject);
            }
            else {
                SendMessagesHelper.prepareSendingVideo(photoEntry.path, 0L, 0L, 0, 0, null, this.dialog_id, this.replyingMessageObject, photoEntry.caption, photoEntry.entities, photoEntry.ttl, this.editingMessageObject);
            }
            this.hideFieldPanel(false);
            DataQuery.getInstance(super.currentAccount).cleanDraft(this.dialog_id, true);
        }
        else {
            final String imagePath = photoEntry.imagePath;
            if (imagePath != null) {
                SendMessagesHelper.prepareSendingPhoto(imagePath, null, this.dialog_id, this.replyingMessageObject, photoEntry.caption, photoEntry.entities, photoEntry.stickers, null, photoEntry.ttl, this.editingMessageObject);
                this.hideFieldPanel(false);
                DataQuery.getInstance(super.currentAccount).cleanDraft(this.dialog_id, true);
            }
            else {
                final String path = photoEntry.path;
                if (path != null) {
                    SendMessagesHelper.prepareSendingPhoto(path, null, this.dialog_id, this.replyingMessageObject, photoEntry.caption, photoEntry.entities, photoEntry.stickers, null, photoEntry.ttl, this.editingMessageObject);
                    this.hideFieldPanel(false);
                    DataQuery.getInstance(super.currentAccount).cleanDraft(this.dialog_id, true);
                }
            }
        }
    }
    
    public void setBotUser(final String botUser) {
        if (this.inlineReturn != 0L) {
            MessagesController.getInstance(super.currentAccount).sendBotStart(this.currentUser, botUser);
        }
        else {
            this.botUser = botUser;
            this.updateBottomOverlay();
        }
    }
    
    protected void setIgnoreAttachOnPause(final boolean ignoreAttachOnPause) {
        this.ignoreAttachOnPause = ignoreAttachOnPause;
    }
    
    @Override
    protected void setInPreviewMode(final boolean inPreviewMode) {
        super.setInPreviewMode(inPreviewMode);
        final ChatAvatarContainer avatarContainer = this.avatarContainer;
        final float n = 0.0f;
        if (avatarContainer != null) {
            avatarContainer.setOccupyStatusBar(inPreviewMode ^ true);
            final ChatAvatarContainer avatarContainer2 = this.avatarContainer;
            float n2;
            if (!inPreviewMode) {
                n2 = 56.0f;
            }
            else {
                n2 = 0.0f;
            }
            avatarContainer2.setLayoutParams((ViewGroup$LayoutParams)LayoutHelper.createFrame(-2, -1.0f, 51, n2, 0.0f, 40.0f, 0.0f));
        }
        final ChatActivityEnterView chatActivityEnterView = this.chatActivityEnterView;
        if (chatActivityEnterView != null) {
            int visibility;
            if (!inPreviewMode) {
                visibility = 0;
            }
            else {
                visibility = 4;
            }
            chatActivityEnterView.setVisibility(visibility);
        }
        final ActionBar actionBar = super.actionBar;
        if (actionBar != null) {
            Drawable backButtonDrawable;
            if (!inPreviewMode) {
                backButtonDrawable = new BackDrawable(false);
            }
            else {
                backButtonDrawable = null;
            }
            actionBar.setBackButtonDrawable(backButtonDrawable);
            final ActionBarMenuItem headerItem = this.headerItem;
            float alpha;
            if (!inPreviewMode) {
                alpha = 1.0f;
            }
            else {
                alpha = 0.0f;
            }
            headerItem.setAlpha(alpha);
            final ActionBarMenuItem attachItem = this.attachItem;
            float alpha2 = n;
            if (!inPreviewMode) {
                alpha2 = 1.0f;
            }
            attachItem.setAlpha(alpha2);
        }
        final RecyclerListView chatListView = this.chatListView;
        if (chatListView != null) {
            for (int childCount = chatListView.getChildCount(), i = 0; i < childCount; ++i) {
                final View child = this.chatListView.getChildAt(i);
                final boolean b = child instanceof ChatMessageCell;
                MessageObject messageObject;
                if (b) {
                    messageObject = ((ChatMessageCell)child).getMessageObject();
                }
                else if (child instanceof ChatActionCell) {
                    messageObject = ((ChatActionCell)child).getMessageObject();
                }
                else {
                    messageObject = null;
                }
                if (messageObject != null) {
                    final TLRPC.Message messageOwner = messageObject.messageOwner;
                    if (messageOwner != null && messageOwner.media_unread && messageOwner.mentioned) {
                        if (!messageObject.isVoice() && !messageObject.isRoundVideo()) {
                            --this.newMentionsCount;
                            final int newMentionsCount = this.newMentionsCount;
                            if (newMentionsCount <= 0) {
                                this.newMentionsCount = 0;
                                this.showMentionDownButton(false, this.hasAllMentionsLocal = true);
                            }
                            else {
                                this.mentiondownButtonCounter.setText((CharSequence)String.format("%d", newMentionsCount));
                            }
                            final MessagesController instance = MessagesController.getInstance(super.currentAccount);
                            final int id = messageObject.getId();
                            int id2;
                            if (ChatObject.isChannel(this.currentChat)) {
                                id2 = this.currentChat.id;
                            }
                            else {
                                id2 = 0;
                            }
                            instance.markMentionMessageAsRead(id, id2, this.dialog_id);
                            messageObject.setContentIsRead();
                        }
                        if (b) {
                            final ChatMessageCell chatMessageCell = (ChatMessageCell)child;
                            chatMessageCell.setHighlighted(false);
                            chatMessageCell.setHighlightedAnimated();
                        }
                    }
                }
            }
        }
        this.updateBottomOverlay();
        this.updateSecretStatus();
    }
    
    public void shareMyContact(final MessageObject messageObject) {
        final AlertDialog.Builder builder = new AlertDialog.Builder((Context)this.getParentActivity());
        builder.setTitle(LocaleController.getString("ShareYouPhoneNumberTitle", 2131560759));
        final TLRPC.User currentUser = this.currentUser;
        if (currentUser != null) {
            if (currentUser.bot) {
                builder.setMessage(LocaleController.getString("AreYouSureShareMyContactInfoBot", 2131558700));
            }
            else {
                final PhoneFormat instance = PhoneFormat.getInstance();
                final StringBuilder sb = new StringBuilder();
                sb.append("+");
                sb.append(UserConfig.getInstance(super.currentAccount).getCurrentUser().phone);
                final String format = instance.format(sb.toString());
                final TLRPC.User currentUser2 = this.currentUser;
                builder.setMessage((CharSequence)AndroidUtilities.replaceTags(LocaleController.formatString("AreYouSureShareMyContactInfoUser", 2131558701, format, ContactsController.formatName(currentUser2.first_name, currentUser2.last_name))));
            }
        }
        else {
            builder.setMessage(LocaleController.getString("AreYouSureShareMyContactInfo", 2131558699));
        }
        builder.setPositiveButton(LocaleController.getString("OK", 2131560097), (DialogInterface$OnClickListener)new _$$Lambda$ChatActivity$6zewwavO2MzfYBN_l_zORHqG6Gc(this, messageObject));
        builder.setNegativeButton(LocaleController.getString("Cancel", 2131558891), null);
        this.showDialog(builder.create());
    }
    
    public void showAlert(final String text, final String s) {
        final FrameLayout alertView = this.alertView;
        if (alertView != null && text != null) {
            if (s != null) {
                if (alertView.getTag() != null) {
                    this.alertView.setTag((Object)null);
                    final AnimatorSet alertViewAnimator = this.alertViewAnimator;
                    if (alertViewAnimator != null) {
                        alertViewAnimator.cancel();
                        this.alertViewAnimator = null;
                    }
                    this.alertView.setVisibility(0);
                    (this.alertViewAnimator = new AnimatorSet()).playTogether(new Animator[] { (Animator)ObjectAnimator.ofFloat((Object)this.alertView, View.TRANSLATION_Y, new float[] { 0.0f }) });
                    this.alertViewAnimator.setDuration(200L);
                    this.alertViewAnimator.addListener((Animator$AnimatorListener)new AnimatorListenerAdapter() {
                        public void onAnimationCancel(final Animator obj) {
                            if (ChatActivity.this.alertViewAnimator != null && ChatActivity.this.alertViewAnimator.equals(obj)) {
                                ChatActivity.this.alertViewAnimator = null;
                            }
                        }
                        
                        public void onAnimationEnd(final Animator obj) {
                            if (ChatActivity.this.alertViewAnimator != null && ChatActivity.this.alertViewAnimator.equals(obj)) {
                                ChatActivity.this.alertViewAnimator = null;
                            }
                        }
                    });
                    this.alertViewAnimator.start();
                }
                this.alertNameTextView.setText((CharSequence)text);
                this.alertTextView.setText(Emoji.replaceEmoji(s.replace('\n', ' '), this.alertTextView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14.0f), false));
                final Runnable hideAlertViewRunnable = this.hideAlertViewRunnable;
                if (hideAlertViewRunnable != null) {
                    AndroidUtilities.cancelRunOnUIThread(hideAlertViewRunnable);
                }
                AndroidUtilities.runOnUIThread(this.hideAlertViewRunnable = new Runnable() {
                    @Override
                    public void run() {
                        if (ChatActivity.this.hideAlertViewRunnable != this) {
                            return;
                        }
                        if (ChatActivity.this.alertView.getTag() == null) {
                            ChatActivity.this.alertView.setTag((Object)1);
                            if (ChatActivity.this.alertViewAnimator != null) {
                                ChatActivity.this.alertViewAnimator.cancel();
                                ChatActivity.this.alertViewAnimator = null;
                            }
                            ChatActivity.this.alertViewAnimator = new AnimatorSet();
                            ChatActivity.this.alertViewAnimator.playTogether(new Animator[] { (Animator)ObjectAnimator.ofFloat((Object)ChatActivity.this.alertView, View.TRANSLATION_Y, new float[] { (float)(-AndroidUtilities.dp(50.0f)) }) });
                            ChatActivity.this.alertViewAnimator.setDuration(200L);
                            ChatActivity.this.alertViewAnimator.addListener((Animator$AnimatorListener)new AnimatorListenerAdapter() {
                                public void onAnimationCancel(final Animator obj) {
                                    if (ChatActivity.this.alertViewAnimator != null && ChatActivity.this.alertViewAnimator.equals(obj)) {
                                        ChatActivity.this.alertViewAnimator = null;
                                    }
                                }
                                
                                public void onAnimationEnd(final Animator obj) {
                                    if (ChatActivity.this.alertViewAnimator != null && ChatActivity.this.alertViewAnimator.equals(obj)) {
                                        ChatActivity.this.alertView.setVisibility(8);
                                        ChatActivity.this.alertViewAnimator = null;
                                    }
                                }
                            });
                            ChatActivity.this.alertViewAnimator.start();
                        }
                    }
                }, 3000L);
            }
        }
    }
    
    public void showFieldPanel(final boolean b, MessageObject replyingMessageObject, MessageObject editingMessageObject, final ArrayList<MessageObject> list, final TLRPC.WebPage webPage, final boolean b2, final boolean b3) {
        final MessageObject e = replyingMessageObject;
        if (this.chatActivityEnterView == null) {
            return;
        }
        if (b) {
            if (e == null && list == null && editingMessageObject == null && webPage == null) {
                return;
            }
            final HintView noSoundHintView = this.noSoundHintView;
            if (noSoundHintView != null) {
                noSoundHintView.hide();
            }
            final HintView forwardHintView = this.forwardHintView;
            if (forwardHintView != null) {
                forwardHintView.hide();
            }
            if (this.searchItem != null && super.actionBar.isSearchFieldVisible()) {
                super.actionBar.closeSearchField(false);
                this.chatActivityEnterView.setFieldFocused();
                AndroidUtilities.runOnUIThread(new _$$Lambda$ChatActivity$cQIsesUtx41bAXt2yOlBbwlh0Zk(this), 100L);
            }
            ArrayList<MessageObject> forwardingMessages;
            MessageObject messageObject;
            boolean b4;
            if (e != null && replyingMessageObject.getDialogId() != this.dialog_id) {
                forwardingMessages = new ArrayList<MessageObject>();
                forwardingMessages.add(e);
                messageObject = null;
                b4 = true;
            }
            else {
                b4 = false;
                forwardingMessages = list;
                messageObject = e;
            }
            Label_2426: {
                if (editingMessageObject != null) {
                    this.forwardingMessages = null;
                    this.replyingMessageObject = null;
                    this.editingMessageObject = editingMessageObject;
                    this.chatActivityEnterView.setReplyingMessageObject(null);
                    this.chatActivityEnterView.setEditingMessageObject(editingMessageObject, editingMessageObject.isMediaEmpty() ^ true);
                    if (this.foundWebPage != null) {
                        return;
                    }
                    this.chatActivityEnterView.setForceShowSendButton(false, false);
                    this.replyIconImageView.setImageResource(2131165403);
                    this.replyIconImageView.setContentDescription((CharSequence)LocaleController.getString("AccDescrEditing", 2131558430));
                    this.replyCloseImageView.setContentDescription((CharSequence)LocaleController.getString("AccDescrCancelEdit", 2131558420));
                    if (editingMessageObject.isMediaEmpty()) {
                        this.replyNameTextView.setText(LocaleController.getString("EditMessage", 2131559323));
                    }
                    else {
                        this.replyNameTextView.setText(LocaleController.getString("EditCaption", 2131559321));
                    }
                    if (editingMessageObject.canEditMedia()) {
                        this.replyObjectTextView.setText(LocaleController.getString("EditMessageMedia", 2131559325));
                        replyingMessageObject = messageObject;
                    }
                    else {
                        final CharSequence messageText = editingMessageObject.messageText;
                        replyingMessageObject = messageObject;
                        if (messageText != null) {
                            String s2;
                            final String s = s2 = messageText.toString();
                            if (s.length() > 150) {
                                s2 = s.substring(0, 150);
                            }
                            final String replace = s2.replace('\n', ' ');
                            final SimpleTextView replyObjectTextView = this.replyObjectTextView;
                            replyObjectTextView.setText(Emoji.replaceEmoji(replace, replyObjectTextView.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14.0f), false));
                            replyingMessageObject = messageObject;
                        }
                    }
                }
                else if (messageObject != null) {
                    this.forwardingMessages = null;
                    this.editingMessageObject = null;
                    this.replyingMessageObject = messageObject;
                    this.chatActivityEnterView.setReplyingMessageObject(messageObject);
                    this.chatActivityEnterView.setEditingMessageObject(null, false);
                    if (this.foundWebPage != null) {
                        return;
                    }
                    this.chatActivityEnterView.setForceShowSendButton(false, false);
                    String text;
                    if (messageObject.isFromUser()) {
                        final TLRPC.User user = MessagesController.getInstance(super.currentAccount).getUser(messageObject.messageOwner.from_id);
                        if (user == null) {
                            return;
                        }
                        text = UserObject.getUserName(user);
                    }
                    else {
                        TLRPC.Chat chat;
                        if (ChatObject.isChannel(this.currentChat) && this.currentChat.megagroup && messageObject.isForwardedChannelPost()) {
                            chat = MessagesController.getInstance(super.currentAccount).getChat(messageObject.messageOwner.fwd_from.channel_id);
                        }
                        else {
                            chat = MessagesController.getInstance(super.currentAccount).getChat(messageObject.messageOwner.to_id.channel_id);
                        }
                        if (chat == null) {
                            return;
                        }
                        text = chat.title;
                    }
                    this.replyIconImageView.setImageResource(2131165654);
                    this.replyNameTextView.setText(text);
                    this.replyIconImageView.setContentDescription((CharSequence)LocaleController.getString("AccDescrReplying", 2131558465));
                    this.replyCloseImageView.setContentDescription((CharSequence)LocaleController.getString("AccDescrCancelReply", 2131558422));
                    final TLRPC.MessageMedia media = messageObject.messageOwner.media;
                    if (media instanceof TLRPC.TL_messageMediaGame) {
                        final SimpleTextView replyObjectTextView2 = this.replyObjectTextView;
                        replyObjectTextView2.setText(Emoji.replaceEmoji(media.game.title, replyObjectTextView2.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14.0f), false));
                        replyingMessageObject = messageObject;
                    }
                    else {
                        final CharSequence messageText2 = messageObject.messageText;
                        replyingMessageObject = messageObject;
                        if (messageText2 != null) {
                            String s4;
                            final String s3 = s4 = messageText2.toString();
                            if (s3.length() > 150) {
                                s4 = s3.substring(0, 150);
                            }
                            final String replace2 = s4.replace('\n', ' ');
                            final SimpleTextView replyObjectTextView3 = this.replyObjectTextView;
                            replyObjectTextView3.setText(Emoji.replaceEmoji(replace2, replyObjectTextView3.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14.0f), false));
                            replyingMessageObject = messageObject;
                        }
                    }
                }
                else if (forwardingMessages != null) {
                    if (forwardingMessages.isEmpty()) {
                        return;
                    }
                    this.replyingMessageObject = null;
                    this.editingMessageObject = null;
                    this.chatActivityEnterView.setReplyingMessageObject(null);
                    this.chatActivityEnterView.setEditingMessageObject(null, false);
                    this.forwardingMessages = forwardingMessages;
                    if (this.foundWebPage != null) {
                        return;
                    }
                    this.chatActivityEnterView.setForceShowSendButton(true, false);
                    final ArrayList<Integer> list2 = new ArrayList<Integer>();
                    this.replyIconImageView.setImageResource(2131165653);
                    this.replyIconImageView.setContentDescription((CharSequence)LocaleController.getString("AccDescrForwarding", 2131558433));
                    this.replyCloseImageView.setContentDescription((CharSequence)LocaleController.getString("AccDescrCancelForward", 2131558421));
                    replyingMessageObject = forwardingMessages.get(0);
                    if (replyingMessageObject.isFromUser()) {
                        list2.add(replyingMessageObject.messageOwner.from_id);
                    }
                    else {
                        final TLRPC.Chat chat2 = this.getMessagesController().getChat(replyingMessageObject.messageOwner.to_id.channel_id);
                        if (ChatObject.isChannel(chat2) && chat2.megagroup && replyingMessageObject.isForwardedChannelPost()) {
                            list2.add(-replyingMessageObject.messageOwner.fwd_from.channel_id);
                        }
                        else {
                            list2.add(-replyingMessageObject.messageOwner.to_id.channel_id);
                        }
                    }
                    int type = forwardingMessages.get(0).type;
                    int n2;
                    for (int i = 1; i < forwardingMessages.size(); ++i, type = n2) {
                        replyingMessageObject = forwardingMessages.get(i);
                        int from_id;
                        if (replyingMessageObject.isFromUser()) {
                            from_id = replyingMessageObject.messageOwner.from_id;
                        }
                        else {
                            final TLRPC.Chat chat3 = this.getMessagesController().getChat(replyingMessageObject.messageOwner.to_id.channel_id);
                            int n;
                            if (ChatObject.isChannel(chat3) && chat3.megagroup && replyingMessageObject.isForwardedChannelPost()) {
                                n = replyingMessageObject.messageOwner.fwd_from.channel_id;
                            }
                            else {
                                n = replyingMessageObject.messageOwner.to_id.channel_id;
                            }
                            from_id = -n;
                        }
                        if (!list2.contains(from_id)) {
                            list2.add(from_id);
                        }
                        if (forwardingMessages.get(i).type != (n2 = type)) {
                            n2 = -1;
                        }
                    }
                    final StringBuilder text2 = new StringBuilder();
                    for (int j = 0; j < list2.size(); ++j) {
                        final Integer n3 = list2.get(j);
                        TLRPC.User user2;
                        TLRPC.Chat chat4;
                        if (n3 > 0) {
                            user2 = MessagesController.getInstance(super.currentAccount).getUser(n3);
                            chat4 = null;
                        }
                        else {
                            chat4 = MessagesController.getInstance(super.currentAccount).getChat(-n3);
                            user2 = null;
                        }
                        if (user2 != null || chat4 != null) {
                            if (list2.size() == 1) {
                                if (user2 != null) {
                                    text2.append(UserObject.getUserName(user2));
                                }
                                else {
                                    text2.append(chat4.title);
                                }
                            }
                            else {
                                if (list2.size() != 2 && text2.length() != 0) {
                                    text2.append(" ");
                                    text2.append(LocaleController.formatPluralString("AndOther", list2.size() - 1));
                                    break;
                                }
                                if (text2.length() > 0) {
                                    text2.append(", ");
                                }
                                if (user2 != null) {
                                    if (!TextUtils.isEmpty((CharSequence)user2.first_name)) {
                                        text2.append(user2.first_name);
                                    }
                                    else if (!TextUtils.isEmpty((CharSequence)user2.last_name)) {
                                        text2.append(user2.last_name);
                                    }
                                    else {
                                        text2.append(" ");
                                    }
                                }
                                else {
                                    text2.append(chat4.title);
                                }
                            }
                        }
                    }
                    this.replyNameTextView.setText(text2);
                    if (type != -1 && type != 0 && type != 10 && type != 11) {
                        if (type == 1) {
                            this.replyObjectTextView.setText(LocaleController.formatPluralString("ForwardedPhoto", forwardingMessages.size()));
                            replyingMessageObject = messageObject;
                            if (forwardingMessages.size() == 1) {
                                replyingMessageObject = forwardingMessages.get(0);
                            }
                        }
                        else if (type == 4) {
                            this.replyObjectTextView.setText(LocaleController.formatPluralString("ForwardedLocation", forwardingMessages.size()));
                            replyingMessageObject = messageObject;
                        }
                        else if (type == 3) {
                            this.replyObjectTextView.setText(LocaleController.formatPluralString("ForwardedVideo", forwardingMessages.size()));
                            replyingMessageObject = messageObject;
                            if (forwardingMessages.size() == 1) {
                                replyingMessageObject = forwardingMessages.get(0);
                            }
                        }
                        else if (type == 12) {
                            this.replyObjectTextView.setText(LocaleController.formatPluralString("ForwardedContact", forwardingMessages.size()));
                            replyingMessageObject = messageObject;
                        }
                        else if (type == 2) {
                            this.replyObjectTextView.setText(LocaleController.formatPluralString("ForwardedAudio", forwardingMessages.size()));
                            replyingMessageObject = messageObject;
                        }
                        else if (type == 5) {
                            this.replyObjectTextView.setText(LocaleController.formatPluralString("ForwardedRound", forwardingMessages.size()));
                            replyingMessageObject = messageObject;
                        }
                        else if (type == 14) {
                            this.replyObjectTextView.setText(LocaleController.formatPluralString("ForwardedMusic", forwardingMessages.size()));
                            replyingMessageObject = messageObject;
                        }
                        else if (type == 13) {
                            this.replyObjectTextView.setText(LocaleController.formatPluralString("ForwardedSticker", forwardingMessages.size()));
                            replyingMessageObject = messageObject;
                        }
                        else if (type == 17) {
                            this.replyObjectTextView.setText(LocaleController.formatPluralString("ForwardedPoll", forwardingMessages.size()));
                            replyingMessageObject = messageObject;
                        }
                        else {
                            if (type != 8) {
                                replyingMessageObject = messageObject;
                                if (type != 9) {
                                    break Label_2426;
                                }
                            }
                            if (forwardingMessages.size() == 1) {
                                if (type == 8) {
                                    this.replyObjectTextView.setText(LocaleController.getString("AttachGif", 2131558716));
                                    replyingMessageObject = messageObject;
                                }
                                else {
                                    final String documentFileName = FileLoader.getDocumentFileName(forwardingMessages.get(0).getDocument());
                                    if (documentFileName.length() != 0) {
                                        this.replyObjectTextView.setText(documentFileName);
                                    }
                                    replyingMessageObject = forwardingMessages.get(0);
                                }
                            }
                            else {
                                this.replyObjectTextView.setText(LocaleController.formatPluralString("ForwardedFile", forwardingMessages.size()));
                                replyingMessageObject = messageObject;
                            }
                        }
                    }
                    else if (forwardingMessages.size() == 1 && forwardingMessages.get(0).messageText != null) {
                        final MessageObject messageObject2 = forwardingMessages.get(0);
                        final TLRPC.MessageMedia media2 = messageObject2.messageOwner.media;
                        if (media2 instanceof TLRPC.TL_messageMediaGame) {
                            final SimpleTextView replyObjectTextView4 = this.replyObjectTextView;
                            replyObjectTextView4.setText(Emoji.replaceEmoji(media2.game.title, replyObjectTextView4.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14.0f), false));
                            replyingMessageObject = messageObject;
                        }
                        else {
                            String s6;
                            final String s5 = s6 = messageObject2.messageText.toString();
                            if (s5.length() > 150) {
                                s6 = s5.substring(0, 150);
                            }
                            final String replace3 = s6.replace('\n', ' ');
                            final SimpleTextView replyObjectTextView5 = this.replyObjectTextView;
                            replyObjectTextView5.setText(Emoji.replaceEmoji(replace3, replyObjectTextView5.getPaint().getFontMetricsInt(), AndroidUtilities.dp(14.0f), false));
                            replyingMessageObject = messageObject;
                        }
                    }
                    else {
                        this.replyObjectTextView.setText(LocaleController.formatPluralString("ForwardedMessageCount", forwardingMessages.size()));
                        replyingMessageObject = messageObject;
                    }
                }
                else {
                    this.replyIconImageView.setImageResource(2131165640);
                    if (webPage instanceof TLRPC.TL_webPagePending) {
                        this.replyNameTextView.setText(LocaleController.getString("GettingLinkInfo", 2131559588));
                        this.replyObjectTextView.setText(this.pendingLinkSearchString);
                        replyingMessageObject = messageObject;
                    }
                    else {
                        final String site_name = webPage.site_name;
                        if (site_name != null) {
                            this.replyNameTextView.setText(site_name);
                        }
                        else {
                            final String title = webPage.title;
                            if (title != null) {
                                this.replyNameTextView.setText(title);
                            }
                            else {
                                this.replyNameTextView.setText(LocaleController.getString("LinkPreview", 2131559762));
                            }
                        }
                        final String title2 = webPage.title;
                        if (title2 != null) {
                            this.replyObjectTextView.setText(title2);
                        }
                        else {
                            final String description = webPage.description;
                            if (description != null) {
                                this.replyObjectTextView.setText(description);
                            }
                            else {
                                final String author = webPage.author;
                                if (author != null) {
                                    this.replyObjectTextView.setText(author);
                                }
                                else {
                                    this.replyObjectTextView.setText(webPage.display_url);
                                }
                            }
                        }
                        this.chatActivityEnterView.setWebPage(webPage, true);
                        replyingMessageObject = messageObject;
                    }
                }
            }
            if (replyingMessageObject != null) {
                editingMessageObject = replyingMessageObject;
            }
            else if (editingMessageObject == null) {
                editingMessageObject = null;
            }
            final FrameLayout$LayoutParams layoutParams = (FrameLayout$LayoutParams)this.replyNameTextView.getLayoutParams();
            final FrameLayout$LayoutParams layoutParams2 = (FrameLayout$LayoutParams)this.replyObjectTextView.getLayoutParams();
            TLRPC.PhotoSize replyImageLocation;
            TLRPC.PhotoSize photoSize;
            TLObject replyImageLocationObject;
            int size;
            int replyImageCacheType;
            if (editingMessageObject != null) {
                replyImageLocation = FileLoader.getClosestPhotoSizeWithSize(editingMessageObject.photoThumbs2, 320);
                photoSize = FileLoader.getClosestPhotoSizeWithSize(editingMessageObject.photoThumbs2, AndroidUtilities.dp(40.0f));
                replyImageLocationObject = editingMessageObject.photoThumbsObject2;
                if (replyImageLocation == null) {
                    if (editingMessageObject.mediaExists) {
                        replyImageLocation = FileLoader.getClosestPhotoSizeWithSize(editingMessageObject.photoThumbs, AndroidUtilities.getPhotoSize());
                        if (replyImageLocation != null) {
                            size = replyImageLocation.size;
                        }
                        else {
                            size = 0;
                        }
                        replyImageCacheType = 0;
                    }
                    else {
                        replyImageLocation = FileLoader.getClosestPhotoSizeWithSize(editingMessageObject.photoThumbs, 320);
                        replyImageCacheType = 1;
                        size = 0;
                    }
                    photoSize = FileLoader.getClosestPhotoSizeWithSize(editingMessageObject.photoThumbs, AndroidUtilities.dp(40.0f));
                    replyImageLocationObject = editingMessageObject.photoThumbsObject;
                }
                else {
                    replyImageCacheType = 1;
                    size = 0;
                }
            }
            else {
                replyImageLocation = null;
                replyImageCacheType = 1;
                size = 0;
                photoSize = null;
                replyImageLocationObject = null;
            }
            TLRPC.PhotoSize replyImageThumbLocation = photoSize;
            if (replyImageLocation == photoSize) {
                replyImageThumbLocation = null;
            }
            if (replyImageLocation != null && !(replyImageLocation instanceof TLRPC.TL_photoSizeEmpty) && !(replyImageLocation.location instanceof TLRPC.TL_fileLocationUnavailable) && editingMessageObject.type != 13 && (editingMessageObject == null || !editingMessageObject.isSecretMedia())) {
                if (editingMessageObject != null && editingMessageObject.isRoundVideo()) {
                    this.replyImageView.setRoundRadius(AndroidUtilities.dp(17.0f));
                }
                else {
                    this.replyImageView.setRoundRadius(0);
                }
                this.replyImageSize = size;
                this.replyImageCacheType = replyImageCacheType;
                this.replyImageLocation = replyImageLocation;
                this.replyImageThumbLocation = replyImageThumbLocation;
                this.replyImageLocationObject = replyImageLocationObject;
                this.replyImageView.setImage(ImageLocation.getForObject(this.replyImageLocation, replyImageLocationObject), "50_50", ImageLocation.getForObject(replyImageThumbLocation, replyImageLocationObject), "50_50_b", null, size, replyImageCacheType, editingMessageObject);
                this.replyImageView.setVisibility(0);
                final int dp = AndroidUtilities.dp(96.0f);
                layoutParams2.leftMargin = dp;
                layoutParams.leftMargin = dp;
            }
            else {
                this.replyImageView.setImageBitmap(null);
                this.replyImageLocation = null;
                this.replyImageLocationObject = null;
                this.replyImageView.setVisibility(4);
                final int dp2 = AndroidUtilities.dp(52.0f);
                layoutParams2.leftMargin = dp2;
                layoutParams.leftMargin = dp2;
            }
            this.replyNameTextView.setLayoutParams((ViewGroup$LayoutParams)layoutParams);
            this.replyObjectTextView.setLayoutParams((ViewGroup$LayoutParams)layoutParams2);
            this.chatActivityEnterView.showTopView(true, b4);
        }
        else {
            if (this.replyingMessageObject == null && this.forwardingMessages == null && this.foundWebPage == null && this.editingMessageObject == null) {
                return;
            }
            replyingMessageObject = this.replyingMessageObject;
            if (replyingMessageObject != null && replyingMessageObject.messageOwner.reply_markup instanceof TLRPC.TL_replyKeyboardForceReply) {
                final SharedPreferences$Editor edit = MessagesController.getMainSettings(super.currentAccount).edit();
                final StringBuilder sb = new StringBuilder();
                sb.append("answered_");
                sb.append(this.dialog_id);
                edit.putInt(sb.toString(), this.replyingMessageObject.getId()).commit();
            }
            if (this.foundWebPage != null) {
                this.foundWebPage = null;
                this.chatActivityEnterView.setWebPage(null, b2 ^ true);
                if (webPage != null && (this.replyingMessageObject != null || this.forwardingMessages != null || this.editingMessageObject != null)) {
                    this.showFieldPanel(true, this.replyingMessageObject, this.editingMessageObject, this.forwardingMessages, null, false, true);
                    return;
                }
            }
            final ArrayList<MessageObject> forwardingMessages2 = this.forwardingMessages;
            if (forwardingMessages2 != null) {
                this.forwardMessages(forwardingMessages2, false);
            }
            this.chatActivityEnterView.setForceShowSendButton(false, false);
            this.chatActivityEnterView.hideTopView(b3);
            this.chatActivityEnterView.setReplyingMessageObject(null);
            this.chatActivityEnterView.setEditingMessageObject(null, false);
            this.replyingMessageObject = null;
            this.editingMessageObject = null;
            this.forwardingMessages = null;
            this.replyImageLocation = null;
            this.replyImageLocationObject = null;
        }
    }
    
    public void showFieldPanelForEdit(final boolean b, final MessageObject messageObject) {
        this.showFieldPanel(b, null, messageObject, null, null, false, true);
    }
    
    public void showFieldPanelForForward(final boolean b, final ArrayList<MessageObject> list) {
        this.showFieldPanel(b, null, null, list, null, false, true);
    }
    
    public void showFieldPanelForReply(final MessageObject messageObject) {
        this.showFieldPanel(true, messageObject, null, null, null, false, true);
    }
    
    public void showFieldPanelForWebPage(final boolean b, final TLRPC.WebPage webPage, final boolean b2) {
        this.showFieldPanel(b, null, null, null, webPage, b2, true);
    }
    
    public void showOpenGameAlert(final TLRPC.TL_game tl_game, final MessageObject messageObject, final String s, final boolean b, final int i) {
        final TLRPC.User user = MessagesController.getInstance(super.currentAccount).getUser(i);
        String formatName = "";
        if (b) {
            final AlertDialog.Builder builder = new AlertDialog.Builder((Context)this.getParentActivity());
            builder.setTitle(LocaleController.getString("AppName", 2131558635));
            if (user != null) {
                formatName = ContactsController.formatName(user.first_name, user.last_name);
            }
            builder.setMessage(LocaleController.formatString("BotPermissionGameAlert", 2131558853, formatName));
            builder.setPositiveButton(LocaleController.getString("OK", 2131560097), (DialogInterface$OnClickListener)new _$$Lambda$ChatActivity$wLknVd0V_Pw0Q2vz0E5De6YlT8g(this, tl_game, messageObject, s, i));
            builder.setNegativeButton(LocaleController.getString("Cancel", 2131558891), null);
            this.showDialog(builder.create());
        }
        else if (Build$VERSION.SDK_INT >= 21 && !AndroidUtilities.isTablet() && WebviewActivity.supportWebview()) {
            final ArrayList<BaseFragment> fragmentsStack = super.parentLayout.fragmentsStack;
            if (fragmentsStack.get(fragmentsStack.size() - 1) == this) {
                String username = formatName;
                if (user != null) {
                    username = formatName;
                    if (!TextUtils.isEmpty((CharSequence)user.username)) {
                        username = user.username;
                    }
                }
                this.presentFragment(new WebviewActivity(s, username, tl_game.title, tl_game.short_name, messageObject));
            }
        }
        else {
            final Activity parentActivity = this.getParentActivity();
            final String short_name = tl_game.short_name;
            String username2 = null;
            Label_0293: {
                if (user != null) {
                    username2 = user.username;
                    if (username2 != null) {
                        break Label_0293;
                    }
                }
                username2 = "";
            }
            WebviewActivity.openGameInBrowser(s, messageObject, parentActivity, short_name, username2);
        }
    }
    
    public void showOpenUrlAlert(final String s, final boolean b) {
        final boolean internalUrl = Browser.isInternalUrl(s, null);
        final boolean b2 = true;
        if (!internalUrl && b) {
            if (this.getParentActivity() == null) {
                return;
            }
            final AlertDialog.Builder builder = new AlertDialog.Builder((Context)this.getParentActivity());
            builder.setTitle(LocaleController.getString("OpenUrlTitle", 2131560121));
            final String string = LocaleController.getString("OpenUrlAlert2", 2131560118);
            final int index = string.indexOf("%");
            final SpannableStringBuilder message = new SpannableStringBuilder((CharSequence)String.format(string, s));
            if (index >= 0) {
                message.setSpan((Object)new URLSpan(s), index, s.length() + index, 33);
            }
            builder.setMessage((CharSequence)message);
            builder.setMessageTextViewClickable(false);
            builder.setPositiveButton(LocaleController.getString("Open", 2131560110), (DialogInterface$OnClickListener)new _$$Lambda$ChatActivity$FDrsm6mcMPqmDsmALxcjgPmFuS4(this, s));
            builder.setNegativeButton(LocaleController.getString("Cancel", 2131558891), null);
            this.showDialog(builder.create());
        }
        else {
            Browser.openUrl((Context)this.getParentActivity(), s, this.inlineReturn == 0L && b2);
        }
    }
    
    public void showRequestUrlAlert(final TLRPC.TL_urlAuthResultRequest tl_urlAuthResultRequest, final TLRPC.TL_messages_requestUrlAuth tl_messages_requestUrlAuth, final String s) {
        if (this.getParentActivity() == null) {
            return;
        }
        final AlertDialog.Builder builder = new AlertDialog.Builder((Context)this.getParentActivity());
        builder.setTitle(LocaleController.getString("OpenUrlTitle", 2131560121));
        final String string = LocaleController.getString("OpenUrlAlert2", 2131560118);
        final int index = string.indexOf("%");
        final SpannableStringBuilder message = new SpannableStringBuilder((CharSequence)String.format(string, s));
        if (index >= 0) {
            message.setSpan((Object)new URLSpan(s), index, s.length() + index, 33);
        }
        builder.setMessage((CharSequence)message);
        builder.setMessageTextViewClickable(false);
        builder.setNegativeButton(LocaleController.getString("Cancel", 2131558891), null);
        final CheckBoxCell[] array = new CheckBoxCell[2];
        final LinearLayout view = new LinearLayout((Context)this.getParentActivity());
        view.setOrientation(1);
        final TLRPC.User currentUser = this.getUserConfig().getCurrentUser();
        int i = 0;
        while (true) {
            int n;
            if (tl_urlAuthResultRequest.request_write_access) {
                n = 2;
            }
            else {
                n = 1;
            }
            if (i >= n) {
                break;
            }
            (array[i] = new CheckBoxCell((Context)this.getParentActivity(), 1)).setBackgroundDrawable(Theme.getSelectorDrawable(false));
            array[i].setMultiline(true);
            array[i].setTag((Object)i);
            if (i == 0) {
                final SpannableStringBuilder replaceTags = AndroidUtilities.replaceTags(LocaleController.formatString("OpenUrlOption1", 2131560119, tl_urlAuthResultRequest.domain, ContactsController.formatName(currentUser.first_name, currentUser.last_name)));
                final int index2 = TextUtils.indexOf((CharSequence)replaceTags, (CharSequence)tl_urlAuthResultRequest.domain);
                if (index2 >= 0) {
                    replaceTags.setSpan((Object)new URLSpan(""), index2, tl_urlAuthResultRequest.domain.length() + index2, 33);
                }
                array[i].setText((CharSequence)replaceTags, "", true, false);
            }
            else if (i == 1) {
                array[i].setText((CharSequence)AndroidUtilities.replaceTags(LocaleController.formatString("OpenUrlOption2", 2131560120, UserObject.getFirstName(tl_urlAuthResultRequest.bot))), "", true, false);
            }
            final CheckBoxCell checkBoxCell = array[i];
            int n2;
            if (LocaleController.isRTL) {
                n2 = AndroidUtilities.dp(16.0f);
            }
            else {
                n2 = AndroidUtilities.dp(8.0f);
            }
            int n3;
            if (LocaleController.isRTL) {
                n3 = AndroidUtilities.dp(8.0f);
            }
            else {
                n3 = AndroidUtilities.dp(16.0f);
            }
            checkBoxCell.setPadding(n2, 0, n3, 0);
            view.addView((View)array[i], (ViewGroup$LayoutParams)LayoutHelper.createLinear(-1, -2));
            array[i].setOnClickListener((View$OnClickListener)new _$$Lambda$ChatActivity$wvYiDIx4eLsIf8wqj2bNoytWsyQ(array));
            ++i;
        }
        builder.setCustomViewOffset(12);
        builder.setView((View)view);
        builder.setPositiveButton(LocaleController.getString("Open", 2131560110), (DialogInterface$OnClickListener)new _$$Lambda$ChatActivity$Ylfr0OF9_BXApgGlUw_IIZ6Lq80(this, array, s, tl_messages_requestUrlAuth, tl_urlAuthResultRequest));
        this.showDialog(builder.create());
    }
    
    public void updateTextureViewPosition(final boolean b) {
        if (super.fragmentView != null) {
            if (!this.paused) {
                while (true) {
                    for (int childCount = this.chatListView.getChildCount(), i = 0; i < childCount; ++i) {
                        final View child = this.chatListView.getChildAt(i);
                        if (child instanceof ChatMessageCell) {
                            final ChatMessageCell chatMessageCell = (ChatMessageCell)child;
                            final MessageObject messageObject = chatMessageCell.getMessageObject();
                            if (this.videoPlayerContainer != null && (messageObject.isRoundVideo() || messageObject.isVideo()) && MediaController.getInstance().isPlayingMessage(messageObject)) {
                                final ImageReceiver photoImage = chatMessageCell.getPhotoImage();
                                this.videoPlayerContainer.setTranslationX(photoImage.getImageX() + chatMessageCell.getX());
                                final FrameLayout videoPlayerContainer = this.videoPlayerContainer;
                                final float n = (float)(super.fragmentView.getPaddingTop() + chatMessageCell.getTop() + photoImage.getImageY() - this.chatListViewClipTop);
                                final float translationY = this.chatListView.getTranslationY();
                                int statusBarHeight;
                                if (super.inPreviewMode) {
                                    statusBarHeight = AndroidUtilities.statusBarHeight;
                                }
                                else {
                                    statusBarHeight = 0;
                                }
                                videoPlayerContainer.setTranslationY(n + translationY + statusBarHeight);
                                final FrameLayout$LayoutParams frameLayout$LayoutParams = (FrameLayout$LayoutParams)this.videoPlayerContainer.getLayoutParams();
                                if (messageObject.isRoundVideo()) {
                                    this.videoPlayerContainer.setTag(2131230860, (Object)null);
                                    if (frameLayout$LayoutParams.width != AndroidUtilities.roundMessageSize || frameLayout$LayoutParams.height != AndroidUtilities.roundMessageSize) {
                                        final int roundMessageSize = AndroidUtilities.roundMessageSize;
                                        frameLayout$LayoutParams.height = roundMessageSize;
                                        frameLayout$LayoutParams.width = roundMessageSize;
                                        this.aspectRatioFrameLayout.setResizeMode(0);
                                        this.videoPlayerContainer.setLayoutParams((ViewGroup$LayoutParams)frameLayout$LayoutParams);
                                    }
                                }
                                else {
                                    this.videoPlayerContainer.setTag(2131230860, (Object)1);
                                    if (frameLayout$LayoutParams.width != photoImage.getImageWidth() || frameLayout$LayoutParams.height != photoImage.getImageHeight()) {
                                        this.aspectRatioFrameLayout.setResizeMode(3);
                                        frameLayout$LayoutParams.width = photoImage.getImageWidth();
                                        frameLayout$LayoutParams.height = photoImage.getImageHeight();
                                        this.videoPlayerContainer.setLayoutParams((ViewGroup$LayoutParams)frameLayout$LayoutParams);
                                    }
                                }
                                super.fragmentView.invalidate();
                                this.videoPlayerContainer.invalidate();
                                final boolean b2 = true;
                                if (!b || this.videoPlayerContainer == null) {
                                    return;
                                }
                                final MessageObject playingMessageObject = MediaController.getInstance().getPlayingMessageObject();
                                if (playingMessageObject == null || playingMessageObject.eventId != 0L) {
                                    return;
                                }
                                if (!b2) {
                                    if (this.checkTextureViewPosition && playingMessageObject.isVideo()) {
                                        MediaController.getInstance().cleanupPlayer(true, true);
                                        return;
                                    }
                                    this.videoPlayerContainer.setTranslationY((float)(-AndroidUtilities.roundMessageSize - 100));
                                    super.fragmentView.invalidate();
                                    if (playingMessageObject == null || (!playingMessageObject.isRoundVideo() && !playingMessageObject.isVideo())) {
                                        return;
                                    }
                                    if (!this.checkTextureViewPosition && PipRoundVideoView.getInstance() == null) {
                                        this.scrollToMessageId(playingMessageObject.getId(), 0, false, 0, true);
                                        return;
                                    }
                                    MediaController.getInstance().setCurrentVideoVisible(false);
                                    return;
                                }
                                else {
                                    MediaController.getInstance().setCurrentVideoVisible(true);
                                    if (!playingMessageObject.isRoundVideo() && !this.scrollToVideo) {
                                        this.chatListView.invalidate();
                                        return;
                                    }
                                    this.scrollToMessageId(playingMessageObject.getId(), 0, false, 0, true);
                                    return;
                                }
                            }
                        }
                    }
                    final boolean b2 = false;
                    continue;
                }
            }
        }
    }
    
    public class ChatActivityAdapter extends Adapter
    {
        private int botInfoRow;
        private boolean isBot;
        private int loadingDownRow;
        private int loadingUpRow;
        private Context mContext;
        private int messagesEndRow;
        private int messagesStartRow;
        private int rowCount;
        final /* synthetic */ ChatActivity this$0;
        
        public ChatActivityAdapter(final Context mContext) {
            this.botInfoRow = -1;
            this.mContext = mContext;
            final TLRPC.User currentUser = ChatActivity.this.currentUser;
            this.isBot = (currentUser != null && currentUser.bot);
        }
        
        @Override
        public int getItemCount() {
            int rowCount;
            if (ChatActivity.this.clearingHistory) {
                rowCount = 0;
            }
            else {
                rowCount = this.rowCount;
            }
            return rowCount;
        }
        
        @Override
        public long getItemId(final int n) {
            return -1L;
        }
        
        @Override
        public int getItemViewType(final int n) {
            final int messagesStartRow = this.messagesStartRow;
            if (n >= messagesStartRow && n < this.messagesEndRow) {
                return ChatActivity.this.messages.get(n - messagesStartRow).contentType;
            }
            if (n == this.botInfoRow) {
                return 3;
            }
            return 4;
        }
        
        @Override
        public void notifyDataSetChanged() {
            this.updateRows();
            try {
                super.notifyDataSetChanged();
            }
            catch (Exception ex) {
                FileLog.e(ex);
            }
        }
        
        @Override
        public void notifyItemChanged(final int n) {
            this.updateRows();
            try {
                super.notifyItemChanged(n);
            }
            catch (Exception ex) {
                FileLog.e(ex);
            }
        }
        
        @Override
        public void notifyItemInserted(final int n) {
            this.updateRows();
            try {
                super.notifyItemInserted(n);
            }
            catch (Exception ex) {
                FileLog.e(ex);
            }
        }
        
        @Override
        public void notifyItemMoved(final int n, final int n2) {
            this.updateRows();
            try {
                super.notifyItemMoved(n, n2);
            }
            catch (Exception ex) {
                FileLog.e(ex);
            }
        }
        
        @Override
        public void notifyItemRangeChanged(final int n, final int n2) {
            this.updateRows();
            try {
                super.notifyItemRangeChanged(n, n2);
            }
            catch (Exception ex) {
                FileLog.e(ex);
            }
        }
        
        @Override
        public void notifyItemRangeInserted(final int n, final int n2) {
            this.updateRows();
            try {
                super.notifyItemRangeInserted(n, n2);
            }
            catch (Exception ex) {
                FileLog.e(ex);
            }
        }
        
        @Override
        public void notifyItemRangeRemoved(final int n, final int n2) {
            this.updateRows();
            try {
                super.notifyItemRangeRemoved(n, n2);
            }
            catch (Exception ex) {
                FileLog.e(ex);
            }
        }
        
        @Override
        public void notifyItemRemoved(final int n) {
            this.updateRows();
            try {
                super.notifyItemRemoved(n);
            }
            catch (Exception ex) {
                FileLog.e(ex);
            }
        }
        
        @Override
        public void onBindViewHolder(final ViewHolder viewHolder, int index) {
            if (index == this.botInfoRow) {
                final BotHelpCell botHelpCell = (BotHelpCell)viewHolder.itemView;
                String description;
                if (ChatActivity.this.botInfo.size() != 0) {
                    description = ((TLRPC.BotInfo)ChatActivity.this.botInfo.get(ChatActivity.this.currentUser.id)).description;
                }
                else {
                    description = null;
                }
                botHelpCell.setText(description);
            }
            else {
                final int loadingDownRow = this.loadingDownRow;
                boolean progressVisible = false;
                final boolean b = false;
                if (index != loadingDownRow && index != this.loadingUpRow) {
                    final int messagesStartRow = this.messagesStartRow;
                    if (index >= messagesStartRow && index < this.messagesEndRow) {
                        final MessageObject messageObject = ChatActivity.this.messages.get(index - messagesStartRow);
                        final View itemView = viewHolder.itemView;
                        if (itemView instanceof ChatMessageCell) {
                            final ChatMessageCell chatMessageCell = (ChatMessageCell)itemView;
                            final ChatActivity this$0 = ChatActivity.this;
                            chatMessageCell.isChat = (this$0.currentChat != null || UserObject.isUserSelf(this$0.currentUser));
                            chatMessageCell.isMegagroup = (ChatObject.isChannel(ChatActivity.this.currentChat) && ChatActivity.this.currentChat.megagroup);
                            final MessageObject.GroupedMessages access$14300 = ChatActivity.this.getValidGroupedMessage(messageObject);
                            int n2 = 0;
                            int n3 = 0;
                            int n4 = 0;
                            Label_0397: {
                                if (access$14300 != null) {
                                    final MessageObject.GroupedMessagePosition groupedMessagePosition = access$14300.positions.get(messageObject);
                                    final int n = -100;
                                    if (groupedMessagePosition != null) {
                                        if ((groupedMessagePosition.flags & 0x4) != 0x0) {
                                            n2 = access$14300.posArray.indexOf(groupedMessagePosition) + index + 1;
                                            n3 = 0;
                                        }
                                        else {
                                            n2 = -100;
                                            n3 = 1;
                                        }
                                        if ((groupedMessagePosition.flags & 0x8) != 0x0) {
                                            index = index - access$14300.posArray.size() + access$14300.posArray.indexOf(groupedMessagePosition);
                                            n4 = 0;
                                            break Label_0397;
                                        }
                                        n4 = 1;
                                        index = n;
                                        break Label_0397;
                                    }
                                    else {
                                        n2 = -100;
                                        index = n;
                                    }
                                }
                                else {
                                    final int n5 = index - 1;
                                    n2 = index + 1;
                                    index = n5;
                                }
                                n4 = 0;
                                n3 = 0;
                            }
                            final int itemViewType = this.getItemViewType(index);
                            final int itemViewType2 = this.getItemViewType(n2);
                            int n6 = n4;
                            Label_0584: {
                                if (!(messageObject.messageOwner.reply_markup instanceof TLRPC.TL_replyInlineMarkup)) {
                                    n6 = n4;
                                    if (itemViewType == viewHolder.getItemViewType()) {
                                        final MessageObject messageObject2 = ChatActivity.this.messages.get(index - this.messagesStartRow);
                                        n6 = ((messageObject2.isOutOwner() == messageObject.isOutOwner() && Math.abs(messageObject2.messageOwner.date - messageObject.messageOwner.date) <= 300) ? 1 : 0);
                                        if (n6 != 0) {
                                            final ChatActivity this$2 = ChatActivity.this;
                                            Label_0552: {
                                                if (this$2.currentChat != null) {
                                                    if (messageObject2.messageOwner.from_id != messageObject.messageOwner.from_id) {
                                                        break Label_0552;
                                                    }
                                                }
                                                else {
                                                    if (!UserObject.isUserSelf(this$2.currentUser)) {
                                                        break Label_0584;
                                                    }
                                                    if (messageObject2.getFromId() != messageObject.getFromId()) {
                                                        break Label_0552;
                                                    }
                                                }
                                                n6 = 1;
                                                break Label_0584;
                                            }
                                            n6 = 0;
                                        }
                                    }
                                }
                            }
                            int n7 = 0;
                            Label_0754: {
                                if (itemViewType2 == viewHolder.getItemViewType()) {
                                    final MessageObject messageObject3 = ChatActivity.this.messages.get(n2 - this.messagesStartRow);
                                    n7 = ((!(messageObject3.messageOwner.reply_markup instanceof TLRPC.TL_replyInlineMarkup) && messageObject3.isOutOwner() == messageObject.isOutOwner() && Math.abs(messageObject3.messageOwner.date - messageObject.messageOwner.date) <= 300) ? 1 : 0);
                                    Label_0747: {
                                        if (n7 != 0) {
                                            final ChatActivity this$3 = ChatActivity.this;
                                            Label_0716: {
                                                if (this$3.currentChat != null) {
                                                    if (messageObject3.messageOwner.from_id != messageObject.messageOwner.from_id) {
                                                        break Label_0716;
                                                    }
                                                }
                                                else {
                                                    if (!UserObject.isUserSelf(this$3.currentUser)) {
                                                        break Label_0747;
                                                    }
                                                    if (messageObject3.getFromId() != messageObject.getFromId()) {
                                                        break Label_0716;
                                                    }
                                                }
                                                n7 = 1;
                                                break Label_0754;
                                            }
                                            n7 = 0;
                                        }
                                    }
                                }
                                else {
                                    n7 = n3;
                                }
                            }
                            boolean b2 = n7 != 0;
                            boolean b3 = n6 != 0;
                            if (ChatObject.isChannel(ChatActivity.this.currentChat)) {
                                b2 = (n7 != 0);
                                b3 = (n6 != 0);
                                if (ChatActivity.this.currentChat.megagroup) {
                                    final TLRPC.Message messageOwner = messageObject.messageOwner;
                                    b2 = (n7 != 0);
                                    b3 = (n6 != 0);
                                    if (messageOwner.from_id <= 0) {
                                        final TLRPC.MessageFwdHeader fwd_from = messageOwner.fwd_from;
                                        b2 = (n7 != 0);
                                        b3 = (n6 != 0);
                                        if (fwd_from != null) {
                                            b2 = (n7 != 0);
                                            b3 = (n6 != 0);
                                            if (fwd_from.channel_post != 0) {
                                                b2 = false;
                                                b3 = false;
                                            }
                                        }
                                    }
                                }
                            }
                            chatMessageCell.setMessageObject(messageObject, access$14300, b3, b2);
                            boolean highlighted = b;
                            if (ChatActivity.this.highlightMessageId != Integer.MAX_VALUE) {
                                highlighted = b;
                                if (messageObject.getId() == ChatActivity.this.highlightMessageId) {
                                    highlighted = true;
                                }
                            }
                            chatMessageCell.setHighlighted(highlighted);
                            if (ChatActivity.this.highlightMessageId != Integer.MAX_VALUE) {
                                ChatActivity.this.startMessageUnselect();
                            }
                            index = ChatActivity.this.animatingMessageObjects.indexOf(messageObject);
                            if (index != -1) {
                                ChatActivity.this.animatingMessageObjects.remove(index);
                                chatMessageCell.getViewTreeObserver().addOnPreDrawListener((ViewTreeObserver$OnPreDrawListener)new ViewTreeObserver$OnPreDrawListener() {
                                    public boolean onPreDraw() {
                                        final PipRoundVideoView instance = PipRoundVideoView.getInstance();
                                        if (instance != null) {
                                            instance.showTemporary(true);
                                        }
                                        chatMessageCell.getViewTreeObserver().removeOnPreDrawListener((ViewTreeObserver$OnPreDrawListener)this);
                                        final ImageReceiver photoImage = chatMessageCell.getPhotoImage();
                                        final int imageWidth = photoImage.getImageWidth();
                                        final org.telegram.ui.Components.Rect cameraRect = ChatActivity.this.instantCameraView.getCameraRect();
                                        final float n = imageWidth / cameraRect.width;
                                        final int[] array = new int[2];
                                        chatMessageCell.setAlpha(0.0f);
                                        chatMessageCell.setTimeAlpha(0.0f);
                                        chatMessageCell.getLocationOnScreen(array);
                                        array[0] += photoImage.getImageX();
                                        array[1] += photoImage.getImageY();
                                        final FrameLayout cameraContainer = ChatActivity.this.instantCameraView.getCameraContainer();
                                        ((View)cameraContainer).setPivotX(0.0f);
                                        ((View)cameraContainer).setPivotY(0.0f);
                                        final AnimatorSet set = new AnimatorSet();
                                        set.playTogether(new Animator[] { (Animator)ObjectAnimator.ofFloat((Object)ChatActivity.this.instantCameraView, View.ALPHA, new float[] { 0.0f }), (Animator)ObjectAnimator.ofFloat((Object)cameraContainer, View.SCALE_X, new float[] { n }), (Animator)ObjectAnimator.ofFloat((Object)cameraContainer, View.SCALE_Y, new float[] { n }), (Animator)ObjectAnimator.ofFloat((Object)cameraContainer, View.TRANSLATION_X, new float[] { array[0] - cameraRect.x }), (Animator)ObjectAnimator.ofFloat((Object)cameraContainer, View.TRANSLATION_Y, new float[] { array[1] - cameraRect.y }), (Animator)ObjectAnimator.ofFloat((Object)ChatActivity.this.instantCameraView.getSwitchButtonView(), View.ALPHA, new float[] { 0.0f }), (Animator)ObjectAnimator.ofInt((Object)ChatActivity.this.instantCameraView.getPaint(), (Property)AnimationProperties.PAINT_ALPHA, new int[] { 0 }), (Animator)ObjectAnimator.ofFloat((Object)ChatActivity.this.instantCameraView.getMuteImageView(), View.ALPHA, new float[] { 0.0f }) });
                                        set.setDuration(180L);
                                        set.setInterpolator((TimeInterpolator)new DecelerateInterpolator());
                                        set.addListener((Animator$AnimatorListener)new AnimatorListenerAdapter() {
                                            public void onAnimationEnd(final Animator animator) {
                                                chatMessageCell.setAlpha(1.0f);
                                                final AnimationProperties.FloatProperty<ChatMessageCell> floatProperty = new AnimationProperties.FloatProperty<ChatMessageCell>("alpha") {
                                                    public Float get(final ChatMessageCell chatMessageCell) {
                                                        return chatMessageCell.getTimeAlpha();
                                                    }
                                                    
                                                    public void setValue(final ChatMessageCell chatMessageCell, final float timeAlpha) {
                                                        chatMessageCell.setTimeAlpha(timeAlpha);
                                                    }
                                                };
                                                final AnimatorSet set = new AnimatorSet();
                                                set.playTogether(new Animator[] { (Animator)ObjectAnimator.ofFloat((Object)cameraContainer, View.ALPHA, new float[] { 0.0f }), (Animator)ObjectAnimator.ofFloat((Object)chatMessageCell, (Property)floatProperty, new float[] { 1.0f }) });
                                                set.setDuration(100L);
                                                set.setInterpolator((TimeInterpolator)new DecelerateInterpolator());
                                                set.addListener((Animator$AnimatorListener)new AnimatorListenerAdapter() {
                                                    public void onAnimationEnd(final Animator animator) {
                                                        ChatActivity.this.instantCameraView.hideCamera(true);
                                                        ChatActivity.this.instantCameraView.setVisibility(4);
                                                    }
                                                });
                                                set.start();
                                            }
                                        });
                                        set.start();
                                        return true;
                                    }
                                });
                            }
                        }
                        else if (itemView instanceof ChatActionCell) {
                            final ChatActionCell chatActionCell = (ChatActionCell)itemView;
                            chatActionCell.setMessageObject(messageObject);
                            chatActionCell.setAlpha(1.0f);
                        }
                        else if (itemView instanceof ChatUnreadCell) {
                            ((ChatUnreadCell)itemView).setText(LocaleController.getString("UnreadMessages", 2131560945));
                            if (ChatActivity.this.createUnreadMessageAfterId != 0) {
                                ChatActivity.this.createUnreadMessageAfterId = 0;
                            }
                        }
                    }
                }
                else {
                    final ChatLoadingCell chatLoadingCell = (ChatLoadingCell)viewHolder.itemView;
                    if (ChatActivity.this.loadsCount > 1) {
                        progressVisible = true;
                    }
                    chatLoadingCell.setProgressVisible(progressVisible);
                }
            }
        }
        
        @Override
        public ViewHolder onCreateViewHolder(final ViewGroup viewGroup, final int n) {
            Object o2;
            if (n == 0) {
                Object o;
                if (!ChatActivity.this.chatMessageCellsCache.isEmpty()) {
                    o = ChatActivity.this.chatMessageCellsCache.get(0);
                    ChatActivity.this.chatMessageCellsCache.remove(0);
                }
                else {
                    o = new ChatMessageCell(this.mContext);
                }
                final ChatMessageCell chatMessageCell = (ChatMessageCell)o;
                chatMessageCell.setDelegate((ChatMessageCell.ChatMessageCellDelegate)new ChatMessageCell.ChatMessageCellDelegate() {
                    @Override
                    public boolean canPerformActions() {
                        return ChatActivity.this.actionBar != null && !ChatActivity.this.actionBar.isActionModeShowed();
                    }
                    
                    @Override
                    public void didLongPress(final ChatMessageCell chatMessageCell, final float n, final float n2) {
                        ChatActivity.this.createMenu((View)chatMessageCell, false, false, n, n2);
                    }
                    
                    @Override
                    public void didPressBotButton(final ChatMessageCell chatMessageCell, final TLRPC.KeyboardButton keyboardButton) {
                        if (ChatActivity.this.getParentActivity() != null) {
                            if (ChatActivity.this.bottomOverlayChat.getVisibility() != 0 || keyboardButton instanceof TLRPC.TL_keyboardButtonSwitchInline || keyboardButton instanceof TLRPC.TL_keyboardButtonCallback || keyboardButton instanceof TLRPC.TL_keyboardButtonGame || keyboardButton instanceof TLRPC.TL_keyboardButtonUrl || keyboardButton instanceof TLRPC.TL_keyboardButtonBuy || keyboardButton instanceof TLRPC.TL_keyboardButtonUrlAuth) {
                                ChatActivity.this.chatActivityEnterView.didPressedBotButton(keyboardButton, chatMessageCell.getMessageObject(), chatMessageCell.getMessageObject());
                            }
                        }
                    }
                    
                    @Override
                    public void didPressCancelSendButton(final ChatMessageCell chatMessageCell) {
                        final MessageObject messageObject = chatMessageCell.getMessageObject();
                        if (messageObject.messageOwner.send_state != 0) {
                            SendMessagesHelper.getInstance(ChatActivity.this.currentAccount).cancelSendingMessage(messageObject);
                        }
                    }
                    
                    @Override
                    public void didPressChannelAvatar(final ChatMessageCell chatMessageCell, final TLRPC.Chat chat, final int n, final float n2, final float n3) {
                        if (ChatActivity.this.actionBar.isActionModeShowed()) {
                            ChatActivity.this.processRowSelect((View)chatMessageCell, true, n2, n3);
                            return;
                        }
                        if (chat != null && chat != ChatActivity.this.currentChat) {
                            final Bundle bundle = new Bundle();
                            bundle.putInt("chat_id", chat.id);
                            if (n != 0) {
                                bundle.putInt("message_id", n);
                            }
                            if (MessagesController.getInstance(ChatActivity.this.currentAccount).checkCanOpenChat(bundle, ChatActivity.this, chatMessageCell.getMessageObject())) {
                                ChatActivity.this.presentFragment(new ChatActivity(bundle));
                            }
                        }
                    }
                    
                    @Override
                    public void didPressHiddenForward(final ChatMessageCell chatMessageCell) {
                        ChatActivity.this.showForwardHint(chatMessageCell);
                    }
                    
                    @Override
                    public void didPressImage(final ChatMessageCell chatMessageCell, final float n, final float n2) {
                        final MessageObject messageObject = chatMessageCell.getMessageObject();
                        if (messageObject.isSendError()) {
                            ChatActivity.this.createMenu((View)chatMessageCell, false, false, n, n2);
                            return;
                        }
                        if (messageObject.isSending()) {
                            return;
                        }
                        if (messageObject.needDrawBluredPreview()) {
                            if (ChatActivity.this.sendSecretMessageRead(messageObject)) {
                                chatMessageCell.invalidate();
                            }
                            SecretMediaViewer.getInstance().setParentActivity(ChatActivity.this.getParentActivity());
                            SecretMediaViewer.getInstance().openMedia(messageObject, ChatActivity.this.photoViewerProvider);
                        }
                        else {
                            final int type = messageObject.type;
                            final File file = null;
                            final StickersAlert.StickersAlertDelegate stickersAlertDelegate = null;
                            if (type == 13) {
                                final ChatActivity this$0 = ChatActivity.this;
                                final Activity parentActivity = this$0.getParentActivity();
                                final ChatActivity this$2 = ChatActivity.this;
                                final TLRPC.InputStickerSet inputStickerSet = messageObject.getInputStickerSet();
                                Object chatActivityEnterView = stickersAlertDelegate;
                                Label_0213: {
                                    if (ChatActivity.this.bottomOverlayChat.getVisibility() != 0) {
                                        final TLRPC.Chat currentChat = ChatActivity.this.currentChat;
                                        if (currentChat != null) {
                                            chatActivityEnterView = stickersAlertDelegate;
                                            if (!ChatObject.canSendStickers(currentChat)) {
                                                break Label_0213;
                                            }
                                        }
                                        chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                                    }
                                }
                                this$0.showDialog(new StickersAlert((Context)parentActivity, this$2, inputStickerSet, null, (StickersAlert.StickersAlertDelegate)chatActivityEnterView));
                            }
                            else {
                                final boolean video = messageObject.isVideo();
                                boolean b = false;
                                long n3 = 0L;
                                if (!video) {
                                    final int type2 = messageObject.type;
                                    if (type2 != 1 && (type2 != 0 || messageObject.isWebpageDocument())) {
                                        if (!messageObject.isGif()) {
                                            final int type3 = messageObject.type;
                                            final int n4 = 3;
                                            if (type3 == 3) {
                                                ChatActivity.this.sendSecretMessageRead(messageObject);
                                                File file2 = file;
                                                try {
                                                    if (messageObject.messageOwner.attachPath != null) {
                                                        file2 = file;
                                                        if (messageObject.messageOwner.attachPath.length() != 0) {
                                                            file2 = new File(messageObject.messageOwner.attachPath);
                                                        }
                                                    }
                                                    File pathToMessage = null;
                                                    Label_0392: {
                                                        if (file2 != null) {
                                                            pathToMessage = file2;
                                                            if (file2.exists()) {
                                                                break Label_0392;
                                                            }
                                                        }
                                                        pathToMessage = FileLoader.getPathToMessage(messageObject.messageOwner);
                                                    }
                                                    final Intent intent = new Intent("android.intent.action.VIEW");
                                                    if (Build$VERSION.SDK_INT >= 24) {
                                                        intent.setFlags(1);
                                                        intent.setDataAndType(FileProvider.getUriForFile((Context)ChatActivity.this.getParentActivity(), "org.telegram.messenger.provider", pathToMessage), "video/mp4");
                                                    }
                                                    else {
                                                        intent.setDataAndType(Uri.fromFile(pathToMessage), "video/mp4");
                                                    }
                                                    ChatActivity.this.getParentActivity().startActivityForResult(intent, 500);
                                                }
                                                catch (Exception ex) {
                                                    FileLog.e(ex);
                                                    ChatActivity.this.alertUserOpenError(messageObject);
                                                }
                                                return;
                                            }
                                            if (type3 == 4) {
                                                if (!AndroidUtilities.isGoogleMapsInstalled(ChatActivity.this)) {
                                                    return;
                                                }
                                                if (messageObject.isLiveLocation()) {
                                                    final LocationActivity locationActivity = new LocationActivity(2);
                                                    locationActivity.setMessageObject(messageObject);
                                                    locationActivity.setDelegate((LocationActivity.LocationActivityDelegate)ChatActivity.this);
                                                    ChatActivity.this.presentFragment(locationActivity);
                                                    return;
                                                }
                                                int n5;
                                                if (ChatActivity.this.currentEncryptedChat == null) {
                                                    n5 = n4;
                                                }
                                                else {
                                                    n5 = 0;
                                                }
                                                final LocationActivity locationActivity2 = new LocationActivity(n5);
                                                locationActivity2.setMessageObject(messageObject);
                                                locationActivity2.setDelegate((LocationActivity.LocationActivityDelegate)ChatActivity.this);
                                                ChatActivity.this.presentFragment(locationActivity2);
                                                return;
                                            }
                                            else {
                                                if (type3 != 9 && type3 != 0) {
                                                    return;
                                                }
                                                if (messageObject.getDocumentName().toLowerCase().endsWith("attheme")) {
                                                    final String attachPath = messageObject.messageOwner.attachPath;
                                                    File file3 = null;
                                                    Label_0714: {
                                                        if (attachPath != null && attachPath.length() != 0) {
                                                            file3 = new File(messageObject.messageOwner.attachPath);
                                                            if (file3.exists()) {
                                                                break Label_0714;
                                                            }
                                                        }
                                                        file3 = null;
                                                    }
                                                    File file4 = file3;
                                                    if (file3 == null) {
                                                        final File pathToMessage2 = FileLoader.getPathToMessage(messageObject.messageOwner);
                                                        file4 = file3;
                                                        if (pathToMessage2.exists()) {
                                                            file4 = pathToMessage2;
                                                        }
                                                    }
                                                    if (ChatActivity.this.chatLayoutManager != null) {
                                                        final int firstVisibleItemPosition = ChatActivity.this.chatLayoutManager.findFirstVisibleItemPosition();
                                                        if (firstVisibleItemPosition != 0) {
                                                            ChatActivity.this.scrollToPositionOnRecreate = firstVisibleItemPosition;
                                                            final RecyclerListView.Holder holder = (RecyclerListView.Holder)ChatActivity.this.chatListView.findViewHolderForAdapterPosition(ChatActivity.this.scrollToPositionOnRecreate);
                                                            if (holder != null) {
                                                                final ChatActivity this$3 = ChatActivity.this;
                                                                this$3.scrollToOffsetOnRecreate = this$3.chatListView.getMeasuredHeight() - holder.itemView.getBottom() - ChatActivity.this.chatListView.getPaddingBottom();
                                                            }
                                                            else {
                                                                ChatActivity.this.scrollToPositionOnRecreate = -1;
                                                            }
                                                        }
                                                        else {
                                                            ChatActivity.this.scrollToPositionOnRecreate = -1;
                                                        }
                                                    }
                                                    final Theme.ThemeInfo applyThemeFile = Theme.applyThemeFile(file4, messageObject.getDocumentName(), true);
                                                    if (applyThemeFile != null) {
                                                        ChatActivity.this.presentFragment(new ThemePreviewActivity(file4, applyThemeFile));
                                                        return;
                                                    }
                                                    ChatActivity.this.scrollToPositionOnRecreate = -1;
                                                }
                                                if (messageObject.canPreviewDocument()) {
                                                    PhotoViewer.getInstance().setParentActivity(ChatActivity.this.getParentActivity());
                                                    final PhotoViewer instance = PhotoViewer.getInstance();
                                                    long access$2300;
                                                    if (messageObject.type != 0) {
                                                        access$2300 = ChatActivity.this.dialog_id;
                                                    }
                                                    else {
                                                        access$2300 = 0L;
                                                    }
                                                    if (messageObject.type != 0) {
                                                        n3 = ChatActivity.this.mergeDialogId;
                                                    }
                                                    instance.openPhoto(messageObject, access$2300, n3, ChatActivity.this.photoViewerProvider);
                                                    b = true;
                                                }
                                                if (!b) {
                                                    try {
                                                        AndroidUtilities.openForView(messageObject, ChatActivity.this.getParentActivity());
                                                    }
                                                    catch (Exception ex2) {
                                                        FileLog.e(ex2);
                                                        ChatActivity.this.alertUserOpenError(messageObject);
                                                    }
                                                }
                                                return;
                                            }
                                        }
                                    }
                                }
                                if (messageObject.isVideo()) {
                                    ChatActivity.this.sendSecretMessageRead(messageObject);
                                }
                                PhotoViewer.getInstance().setParentActivity(ChatActivity.this.getParentActivity());
                                final MessageObject playingMessageObject = MediaController.getInstance().getPlayingMessageObject();
                                if (playingMessageObject != null && playingMessageObject.isVideo()) {
                                    FileLoader.getInstance(ChatActivity.this.currentAccount).setLoadingVideoForPlayer(playingMessageObject.getDocument(), false);
                                    if (playingMessageObject.equals(messageObject)) {
                                        final AnimatedFileDrawable animation = chatMessageCell.getPhotoImage().getAnimation();
                                        if (animation != null && ChatActivity.this.videoTextureView != null && ChatActivity.this.videoPlayerContainer.getTag() != null) {
                                            final Bitmap animatedBitmap = animation.getAnimatedBitmap();
                                            if (animatedBitmap != null) {
                                                try {
                                                    final Bitmap bitmap = ChatActivity.this.videoTextureView.getBitmap(animatedBitmap.getWidth(), animatedBitmap.getHeight());
                                                    new Canvas(animatedBitmap).drawBitmap(bitmap, 0.0f, 0.0f, (Paint)null);
                                                    bitmap.recycle();
                                                }
                                                catch (Throwable t) {
                                                    FileLog.e(t);
                                                }
                                            }
                                        }
                                    }
                                    MediaController.getInstance().cleanupPlayer(true, true, false, playingMessageObject.equals(messageObject));
                                }
                                final PhotoViewer instance2 = PhotoViewer.getInstance();
                                long access$2301;
                                if (messageObject.type != 0) {
                                    access$2301 = ChatActivity.this.dialog_id;
                                }
                                else {
                                    access$2301 = 0L;
                                }
                                if (messageObject.type != 0) {
                                    n3 = ChatActivity.this.mergeDialogId;
                                }
                                if (instance2.openPhoto(messageObject, access$2301, n3, ChatActivity.this.photoViewerProvider)) {
                                    PhotoViewer.getInstance().setParentChatActivity(ChatActivity.this);
                                }
                                if (ChatActivity.this.noSoundHintView != null) {
                                    ChatActivity.this.noSoundHintView.hide();
                                }
                                if (ChatActivity.this.forwardHintView != null) {
                                    ChatActivity.this.forwardHintView.hide();
                                }
                                MediaController.getInstance().resetGoingToShowMessageObject();
                            }
                        }
                    }
                    
                    @Override
                    public void didPressInstantButton(final ChatMessageCell chatMessageCell, final int n) {
                        final MessageObject messageObject = chatMessageCell.getMessageObject();
                        if (n == 0) {
                            final TLRPC.MessageMedia media = messageObject.messageOwner.media;
                            if (media != null) {
                                final TLRPC.WebPage webpage = media.webpage;
                                if (webpage != null && webpage.cached_page != null) {
                                    ArticleViewer.getInstance().setParentActivity(ChatActivity.this.getParentActivity(), ChatActivity.this);
                                    ArticleViewer.getInstance().open(messageObject);
                                }
                            }
                        }
                        else if (n == 5) {
                            final ChatActivity this$0 = ChatActivity.this;
                            final TLRPC.MessageMedia media2 = messageObject.messageOwner.media;
                            this$0.openVCard(media2.vcard, media2.first_name, media2.last_name);
                        }
                        else {
                            final TLRPC.MessageMedia media3 = messageObject.messageOwner.media;
                            if (media3 != null && media3.webpage != null) {
                                Browser.openUrl((Context)ChatActivity.this.getParentActivity(), messageObject.messageOwner.media.webpage.url);
                            }
                        }
                    }
                    
                    @Override
                    public void didPressOther(final ChatMessageCell chatMessageCell, final float n, final float n2) {
                        if (chatMessageCell.getMessageObject().type == 16) {
                            final ChatActivity this$0 = ChatActivity.this;
                            final TLRPC.User currentUser = this$0.currentUser;
                            if (currentUser != null) {
                                VoIPHelper.startCall(currentUser, this$0.getParentActivity(), MessagesController.getInstance(ChatActivity.this.currentAccount).getUserFull(ChatActivity.this.currentUser.id));
                            }
                        }
                        else {
                            ChatActivity.this.createMenu((View)chatMessageCell, true, false, n, n2, false);
                        }
                    }
                    
                    @Override
                    public void didPressReplyMessage(final ChatMessageCell chatMessageCell, final int n) {
                        final MessageObject messageObject = chatMessageCell.getMessageObject();
                        final ChatActivity this$0 = ChatActivity.this;
                        final int id = messageObject.getId();
                        int n2;
                        if (messageObject.getDialogId() == ChatActivity.this.mergeDialogId) {
                            n2 = 1;
                        }
                        else {
                            n2 = 0;
                        }
                        this$0.scrollToMessageId(n, id, true, n2, false);
                    }
                    
                    @Override
                    public void didPressShare(final ChatMessageCell chatMessageCell) {
                        if (ChatActivity.this.getParentActivity() == null) {
                            return;
                        }
                        final ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                        if (chatActivityEnterView != null) {
                            chatActivityEnterView.closeKeyboard();
                        }
                        final MessageObject messageObject = chatMessageCell.getMessageObject();
                        if (UserObject.isUserSelf(ChatActivity.this.currentUser) && messageObject.messageOwner.fwd_from.saved_from_peer != null) {
                            final Bundle bundle = new Bundle();
                            final TLRPC.Peer saved_from_peer = messageObject.messageOwner.fwd_from.saved_from_peer;
                            final int channel_id = saved_from_peer.channel_id;
                            if (channel_id != 0) {
                                bundle.putInt("chat_id", channel_id);
                            }
                            else {
                                final int chat_id = saved_from_peer.chat_id;
                                if (chat_id != 0) {
                                    bundle.putInt("chat_id", chat_id);
                                }
                                else {
                                    final int user_id = saved_from_peer.user_id;
                                    if (user_id != 0) {
                                        bundle.putInt("user_id", user_id);
                                    }
                                }
                            }
                            bundle.putInt("message_id", messageObject.messageOwner.fwd_from.saved_from_msg_id);
                            if (MessagesController.getInstance(ChatActivity.this.currentAccount).checkCanOpenChat(bundle, ChatActivity.this)) {
                                ChatActivity.this.presentFragment(new ChatActivity(bundle));
                            }
                        }
                        else {
                            ArrayList<MessageObject> messages = null;
                            if (messageObject.getGroupId() != 0L) {
                                final MessageObject.GroupedMessages groupedMessages = (MessageObject.GroupedMessages)ChatActivity.this.groupedMessagesMap.get(messageObject.getGroupId());
                                messages = messages;
                                if (groupedMessages != null) {
                                    messages = groupedMessages.messages;
                                }
                            }
                            ArrayList<MessageObject> list;
                            if ((list = messages) == null) {
                                list = new ArrayList<MessageObject>();
                                list.add(messageObject);
                            }
                            final ChatActivityAdapter this$1 = ChatActivityAdapter.this;
                            this$1.this$0.showDialog(new ShareAlert(this$1.mContext, list, null, ChatObject.isChannel(ChatActivity.this.currentChat), null, false) {
                                @Override
                                public void dismissInternal() {
                                    super.dismissInternal();
                                    AndroidUtilities.requestAdjustResize(ChatActivity.this.getParentActivity(), ChatActivity.this.classGuid);
                                    if (ChatActivity.this.chatActivityEnterView.getVisibility() == 0) {
                                        ChatActivity.this.fragmentView.requestLayout();
                                    }
                                }
                            });
                            AndroidUtilities.setAdjustResizeToNothing(ChatActivity.this.getParentActivity(), ChatActivity.this.classGuid);
                            ChatActivity.this.fragmentView.requestLayout();
                        }
                    }
                    
                    @Override
                    public void didPressUrl(final MessageObject messageObject, final CharacterStyle characterStyle, final boolean b) {
                        if (characterStyle != null) {
                            if (ChatActivity.this.getParentActivity() != null) {
                                final boolean b2 = characterStyle instanceof URLSpanMono;
                                final boolean b3 = false;
                                if (b2) {
                                    ((URLSpanMono)characterStyle).copyToClipboard();
                                    Toast.makeText((Context)ChatActivity.this.getParentActivity(), (CharSequence)LocaleController.getString("TextCopied", 2131560887), 0).show();
                                }
                                else if (characterStyle instanceof URLSpanUserMention) {
                                    final TLRPC.User user = MessagesController.getInstance(ChatActivity.this.currentAccount).getUser(Utilities.parseInt(((URLSpanUserMention)characterStyle).getURL()));
                                    if (user != null) {
                                        MessagesController.openChatOrProfileWith(user, null, ChatActivity.this, 0, false);
                                    }
                                }
                                else {
                                    final boolean b4 = characterStyle instanceof URLSpanNoUnderline;
                                    final boolean b5 = true;
                                    if (b4) {
                                        final String url = ((URLSpanNoUnderline)characterStyle).getURL();
                                        if (url.startsWith("@")) {
                                            final String lowerCase = url.substring(1).toLowerCase();
                                            final TLRPC.Chat currentChat = ChatActivity.this.currentChat;
                                            if (currentChat == null || TextUtils.isEmpty((CharSequence)currentChat.username) || !lowerCase.equals(ChatActivity.this.currentChat.username.toLowerCase())) {
                                                final TLRPC.User currentUser = ChatActivity.this.currentUser;
                                                if (currentUser == null || TextUtils.isEmpty((CharSequence)currentUser.username) || !lowerCase.equals(ChatActivity.this.currentUser.username.toLowerCase())) {
                                                    MessagesController.getInstance(ChatActivity.this.currentAccount).openByUserName(lowerCase, ChatActivity.this, 0);
                                                    return;
                                                }
                                            }
                                            final Bundle bundle = new Bundle();
                                            final ChatActivity this$0 = ChatActivity.this;
                                            final TLRPC.Chat currentChat2 = this$0.currentChat;
                                            if (currentChat2 != null) {
                                                bundle.putInt("chat_id", currentChat2.id);
                                            }
                                            else {
                                                final TLRPC.User currentUser2 = this$0.currentUser;
                                                if (currentUser2 != null) {
                                                    bundle.putInt("user_id", currentUser2.id);
                                                    final ChatActivity this$2 = ChatActivity.this;
                                                    if (this$2.currentEncryptedChat != null) {
                                                        bundle.putLong("dialog_id", this$2.dialog_id);
                                                    }
                                                }
                                            }
                                            final ProfileActivity profileActivity = new ProfileActivity(bundle);
                                            profileActivity.setPlayProfileAnimation(true);
                                            profileActivity.setChatInfo(ChatActivity.this.chatInfo);
                                            profileActivity.setUserInfo(ChatActivity.this.userInfo);
                                            ChatActivity.this.presentFragment(profileActivity);
                                        }
                                        else if (!url.startsWith("#") && !url.startsWith("$")) {
                                            if (url.startsWith("/") && URLSpanBotCommand.enabled) {
                                                final ChatActivity this$3 = ChatActivity.this;
                                                final ChatActivityEnterView chatActivityEnterView = this$3.chatActivityEnterView;
                                                final TLRPC.Chat currentChat3 = this$3.currentChat;
                                                chatActivityEnterView.setCommand(messageObject, url, b, currentChat3 != null && currentChat3.megagroup && b5);
                                                if (!b && ChatActivity.this.chatActivityEnterView.getFieldText() == null) {
                                                    ChatActivity.this.hideFieldPanel(false);
                                                }
                                            }
                                        }
                                        else if (ChatObject.isChannel(ChatActivity.this.currentChat)) {
                                            ChatActivity.this.openSearchWithText(url);
                                        }
                                        else {
                                            final DialogsActivity dialogsActivity = new DialogsActivity(null);
                                            dialogsActivity.setSearchString(url);
                                            ChatActivity.this.presentFragment(dialogsActivity);
                                        }
                                    }
                                    else {
                                        final String url2 = ((URLSpan)characterStyle).getURL();
                                        if (b) {
                                            final BottomSheet.Builder builder = new BottomSheet.Builder((Context)ChatActivity.this.getParentActivity());
                                            builder.setTitle(url2);
                                            builder.setItems(new CharSequence[] { LocaleController.getString("Open", 2131560110), LocaleController.getString("Copy", 2131559163) }, (DialogInterface$OnClickListener)new _$$Lambda$ChatActivity$ChatActivityAdapter$1$mvBU2f0l49KzASBTxcsB_CaLwnI(this, url2));
                                            ChatActivity.this.showDialog(builder.create());
                                        }
                                        else if (characterStyle instanceof URLSpanReplacement && (url2 == null || !url2.startsWith("mailto:"))) {
                                            ChatActivity.this.showOpenUrlAlert(url2, true);
                                        }
                                        else if (characterStyle instanceof URLSpan) {
                                            final TLRPC.MessageMedia media = messageObject.messageOwner.media;
                                            if (media instanceof TLRPC.TL_messageMediaWebPage) {
                                                final TLRPC.WebPage webpage = media.webpage;
                                                if (webpage != null && webpage.cached_page != null) {
                                                    final String lowerCase2 = url2.toLowerCase();
                                                    final String lowerCase3 = messageObject.messageOwner.media.webpage.url.toLowerCase();
                                                    if ((lowerCase2.contains("telegram.org/blog") || lowerCase2.contains("telegra.ph") || lowerCase2.contains("t.me/iv")) && (lowerCase2.contains(lowerCase3) || lowerCase3.contains(lowerCase2))) {
                                                        ArticleViewer.getInstance().setParentActivity(ChatActivity.this.getParentActivity(), ChatActivity.this);
                                                        ArticleViewer.getInstance().open(messageObject);
                                                        return;
                                                    }
                                                }
                                            }
                                            final Activity parentActivity = ChatActivity.this.getParentActivity();
                                            boolean b6 = b3;
                                            if (ChatActivity.this.inlineReturn == 0L) {
                                                b6 = true;
                                            }
                                            Browser.openUrl((Context)parentActivity, url2, b6);
                                        }
                                        else if (characterStyle instanceof ClickableSpan) {
                                            ((ClickableSpan)characterStyle).onClick(ChatActivity.this.fragmentView);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    
                    @Override
                    public void didPressUserAvatar(final ChatMessageCell chatMessageCell, final TLRPC.User user, final float n, final float n2) {
                        final boolean actionModeShowed = ChatActivity.this.actionBar.isActionModeShowed();
                        boolean playProfileAnimation = true;
                        if (actionModeShowed) {
                            ChatActivity.this.processRowSelect((View)chatMessageCell, true, n, n2);
                            return;
                        }
                        if (user != null && user.id != UserConfig.getInstance(ChatActivity.this.currentAccount).getClientUserId()) {
                            final Bundle bundle = new Bundle();
                            bundle.putInt("user_id", user.id);
                            final ProfileActivity profileActivity = new ProfileActivity(bundle);
                            final TLRPC.User currentUser = ChatActivity.this.currentUser;
                            if (currentUser == null || currentUser.id != user.id) {
                                playProfileAnimation = false;
                            }
                            profileActivity.setPlayProfileAnimation(playProfileAnimation);
                            ChatActivity.this.presentFragment(profileActivity);
                        }
                    }
                    
                    @Override
                    public void didPressViaBot(final ChatMessageCell chatMessageCell, final String str) {
                        if ((ChatActivity.this.bottomOverlayChat != null && ChatActivity.this.bottomOverlayChat.getVisibility() == 0) || (ChatActivity.this.bottomOverlay != null && ChatActivity.this.bottomOverlay.getVisibility() == 0)) {
                            return;
                        }
                        if (ChatActivity.this.chatActivityEnterView != null && str != null && str.length() > 0) {
                            final ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                            final StringBuilder sb = new StringBuilder();
                            sb.append("@");
                            sb.append(str);
                            sb.append(" ");
                            chatActivityEnterView.setFieldText(sb.toString());
                            ChatActivity.this.chatActivityEnterView.openKeyboard();
                        }
                    }
                    
                    @Override
                    public void didPressVoteButton(final ChatMessageCell chatMessageCell, final TLRPC.TL_pollAnswer tl_pollAnswer) {
                        SendMessagesHelper.getInstance(ChatActivity.this.currentAccount).sendVote(chatMessageCell.getMessageObject(), tl_pollAnswer, null);
                    }
                    
                    @Override
                    public void didStartVideoStream(final MessageObject messageObject) {
                        if (messageObject.isVideo()) {
                            ChatActivity.this.sendSecretMessageRead(messageObject);
                        }
                    }
                    
                    @Override
                    public boolean isChatAdminCell(final int n) {
                        if (ChatObject.isChannel(ChatActivity.this.currentChat)) {
                            final ChatActivity this$0 = ChatActivity.this;
                            if (this$0.currentChat.megagroup) {
                                return MessagesController.getInstance(this$0.currentAccount).isChannelAdmin(ChatActivity.this.currentChat.id, n);
                            }
                        }
                        return false;
                    }
                    
                    @Override
                    public void needOpenWebView(final String s, final String s2, final String s3, final String s4, final int n, final int n2) {
                        try {
                            EmbedBottomSheet.show(ChatActivityAdapter.this.mContext, s2, s3, s4, s, n, n2);
                        }
                        catch (Throwable t) {
                            FileLog.e(t);
                        }
                    }
                    
                    @Override
                    public boolean needPlayMessage(final MessageObject messageObject) {
                        if (!messageObject.isVoice() && !messageObject.isRoundVideo()) {
                            return messageObject.isMusic() && MediaController.getInstance().setPlaylist(ChatActivity.this.messages, messageObject);
                        }
                        final boolean playMessage = MediaController.getInstance().playMessage(messageObject);
                        final MediaController instance = MediaController.getInstance();
                        ArrayList<MessageObject> access$23800;
                        if (playMessage) {
                            access$23800 = ChatActivity.this.createVoiceMessagesPlaylist(messageObject, false);
                        }
                        else {
                            access$23800 = null;
                        }
                        instance.setVoiceMessagesPlaylist(access$23800, false);
                        return playMessage;
                    }
                    
                    @Override
                    public void videoTimerReached() {
                        ChatActivity.this.showNoSoundHint();
                    }
                });
                o2 = o;
                if (ChatActivity.this.currentEncryptedChat == null) {
                    chatMessageCell.setAllowAssistant(true);
                    o2 = o;
                }
            }
            else if (n == 1) {
                o2 = new ChatActionCell(this.mContext);
                ((ChatActionCell)o2).setDelegate((ChatActionCell.ChatActionCellDelegate)new ChatActionCell.ChatActionCellDelegate() {
                    @Override
                    public void didClickImage(final ChatActionCell chatActionCell) {
                        final MessageObject messageObject = chatActionCell.getMessageObject();
                        PhotoViewer.getInstance().setParentActivity(ChatActivity.this.getParentActivity());
                        final TLRPC.PhotoSize closestPhotoSizeWithSize = FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs, 640);
                        if (closestPhotoSizeWithSize != null) {
                            PhotoViewer.getInstance().openPhoto(closestPhotoSizeWithSize.location, ChatActivity.this.photoViewerProvider);
                        }
                        else {
                            PhotoViewer.getInstance().openPhoto(messageObject, 0L, 0L, ChatActivity.this.photoViewerProvider);
                        }
                    }
                    
                    @Override
                    public void didLongPress(final ChatActionCell chatActionCell, final float n, final float n2) {
                        ChatActivity.this.createMenu((View)chatActionCell, false, false, n, n2);
                    }
                    
                    @Override
                    public void didPressBotButton(final MessageObject messageObject, final TLRPC.KeyboardButton keyboardButton) {
                        if (ChatActivity.this.getParentActivity() != null) {
                            if (ChatActivity.this.bottomOverlayChat.getVisibility() != 0 || keyboardButton instanceof TLRPC.TL_keyboardButtonSwitchInline || keyboardButton instanceof TLRPC.TL_keyboardButtonCallback || keyboardButton instanceof TLRPC.TL_keyboardButtonGame || keyboardButton instanceof TLRPC.TL_keyboardButtonUrl || keyboardButton instanceof TLRPC.TL_keyboardButtonBuy || keyboardButton instanceof TLRPC.TL_keyboardButtonUrlAuth) {
                                ChatActivity.this.chatActivityEnterView.didPressedBotButton(keyboardButton, messageObject, messageObject);
                            }
                        }
                    }
                    
                    @Override
                    public void didPressReplyMessage(final ChatActionCell chatActionCell, final int n) {
                        final MessageObject messageObject = chatActionCell.getMessageObject();
                        final ChatActivity this$0 = ChatActivity.this;
                        final int id = messageObject.getId();
                        int n2;
                        if (messageObject.getDialogId() == ChatActivity.this.mergeDialogId) {
                            n2 = 1;
                        }
                        else {
                            n2 = 0;
                        }
                        this$0.scrollToMessageId(n, id, true, n2, false);
                    }
                    
                    @Override
                    public void needOpenUserProfile(final int n) {
                        if (n < 0) {
                            final Bundle bundle = new Bundle();
                            bundle.putInt("chat_id", -n);
                            if (MessagesController.getInstance(ChatActivity.this.currentAccount).checkCanOpenChat(bundle, ChatActivity.this)) {
                                ChatActivity.this.presentFragment(new ChatActivity(bundle));
                            }
                        }
                        else if (n != UserConfig.getInstance(ChatActivity.this.currentAccount).getClientUserId()) {
                            final Bundle bundle2 = new Bundle();
                            bundle2.putInt("user_id", n);
                            final ChatActivity this$0 = ChatActivity.this;
                            if (this$0.currentEncryptedChat != null && n == this$0.currentUser.id) {
                                bundle2.putLong("dialog_id", this$0.dialog_id);
                            }
                            final ProfileActivity profileActivity = new ProfileActivity(bundle2);
                            final TLRPC.User currentUser = ChatActivity.this.currentUser;
                            profileActivity.setPlayProfileAnimation(currentUser != null && currentUser.id == n);
                            ChatActivity.this.presentFragment(profileActivity);
                        }
                    }
                });
            }
            else if (n == 2) {
                o2 = new ChatUnreadCell(this.mContext);
            }
            else if (n == 3) {
                o2 = new BotHelpCell(this.mContext);
                ((BotHelpCell)o2).setDelegate((BotHelpCell.BotHelpCellDelegate)new _$$Lambda$ChatActivity$ChatActivityAdapter$XvP34CBh8veH5SfzBXUoiQ29tr8(this));
            }
            else if (n == 4) {
                o2 = new ChatLoadingCell(this.mContext);
            }
            else {
                o2 = null;
            }
            ((View)o2).setLayoutParams((ViewGroup$LayoutParams)new RecyclerView.LayoutParams(-1, -2));
            return new RecyclerListView.Holder((View)o2);
        }
        
        @Override
        public void onViewAttachedToWindow(final ViewHolder viewHolder) {
            final View itemView = viewHolder.itemView;
            final boolean b = itemView instanceof ChatMessageCell;
            final int n = 0;
            if (b) {
                final ChatMessageCell chatMessageCell = (ChatMessageCell)itemView;
                final MessageObject messageObject = chatMessageCell.getMessageObject();
                boolean b2;
                boolean b3;
                if (ChatActivity.this.actionBar.isActionModeShowed()) {
                    chatMessageCell.setCheckBoxVisible(true, false);
                    final ChatActivityEnterView chatActivityEnterView = ChatActivity.this.chatActivityEnterView;
                    MessageObject editingMessageObject;
                    if (chatActivityEnterView != null) {
                        editingMessageObject = chatActivityEnterView.getEditingMessageObject();
                    }
                    else {
                        editingMessageObject = null;
                    }
                    int n2;
                    if (messageObject.getDialogId() == ChatActivity.this.dialog_id) {
                        n2 = 0;
                    }
                    else {
                        n2 = 1;
                    }
                    if (editingMessageObject != messageObject && ChatActivity.this.selectedMessagesIds[n2].indexOfKey(messageObject.getId()) < 0) {
                        chatMessageCell.setDrawSelectionBackground(false);
                        chatMessageCell.setChecked(false, false, false);
                        b2 = false;
                    }
                    else {
                        ChatActivity.this.setCellSelectionBackground(messageObject, chatMessageCell, n2, false);
                        b2 = true;
                    }
                    b3 = true;
                }
                else {
                    chatMessageCell.setDrawSelectionBackground(false);
                    chatMessageCell.setChecked(false, false, false);
                    chatMessageCell.setCheckBoxVisible(false, false);
                    b3 = false;
                    b2 = false;
                }
                chatMessageCell.setCheckPressed(b3 ^ true, b3 && b2);
                if (ChatActivity.this.searchContainer != null && ChatActivity.this.searchContainer.getVisibility() == 0 && DataQuery.getInstance(ChatActivity.this.currentAccount).isMessageFound(messageObject.getId(), messageObject.getDialogId() == ChatActivity.this.mergeDialogId) && DataQuery.getInstance(ChatActivity.this.currentAccount).getLastSearchQuery() != null) {
                    chatMessageCell.setHighlightedText(DataQuery.getInstance(ChatActivity.this.currentAccount).getLastSearchQuery());
                }
                else {
                    chatMessageCell.setHighlightedText(null);
                }
                chatMessageCell.getViewTreeObserver().addOnPreDrawListener((ViewTreeObserver$OnPreDrawListener)new ViewTreeObserver$OnPreDrawListener() {
                    public boolean onPreDraw() {
                        chatMessageCell.getViewTreeObserver().removeOnPreDrawListener((ViewTreeObserver$OnPreDrawListener)this);
                        final int measuredHeight = ChatActivity.this.chatListView.getMeasuredHeight();
                        final int top = chatMessageCell.getTop();
                        chatMessageCell.getBottom();
                        int n;
                        if (top >= 0) {
                            n = 0;
                        }
                        else {
                            n = -top;
                        }
                        int measuredHeight2;
                        if ((measuredHeight2 = chatMessageCell.getMeasuredHeight()) > measuredHeight) {
                            measuredHeight2 = n + measuredHeight;
                        }
                        chatMessageCell.setVisiblePart(n, measuredHeight2 - n);
                        return true;
                    }
                });
                if (!ChatActivity.this.inPreviewMode || !chatMessageCell.isHighlighted()) {
                    chatMessageCell.setHighlighted(ChatActivity.this.highlightMessageId != Integer.MAX_VALUE && chatMessageCell.getMessageObject().getId() == ChatActivity.this.highlightMessageId);
                    if (ChatActivity.this.highlightMessageId != Integer.MAX_VALUE) {
                        ChatActivity.this.startMessageUnselect();
                    }
                }
            }
            final int adapterPosition = viewHolder.getAdapterPosition();
            final int messagesStartRow = this.messagesStartRow;
            if (adapterPosition >= messagesStartRow && adapterPosition < this.messagesEndRow) {
                final MessageObject messageObject2 = ChatActivity.this.messages.get(adapterPosition - messagesStartRow);
                final View itemView2 = viewHolder.itemView;
                if (messageObject2 != null) {
                    final TLRPC.Message messageOwner = messageObject2.messageOwner;
                    if (messageOwner != null && messageOwner.media_unread && messageOwner.mentioned) {
                        if (!ChatActivity.this.inPreviewMode && !messageObject2.isVoice() && !messageObject2.isRoundVideo()) {
                            ChatActivity.this.newMentionsCount--;
                            if (ChatActivity.this.newMentionsCount <= 0) {
                                ChatActivity.this.newMentionsCount = 0;
                                ChatActivity.this.hasAllMentionsLocal = true;
                                ChatActivity.this.showMentionDownButton(false, true);
                            }
                            else {
                                ChatActivity.this.mentiondownButtonCounter.setText((CharSequence)String.format("%d", ChatActivity.this.newMentionsCount));
                            }
                            final MessagesController instance = MessagesController.getInstance(ChatActivity.this.currentAccount);
                            final int id = messageObject2.getId();
                            int id2 = n;
                            if (ChatObject.isChannel(ChatActivity.this.currentChat)) {
                                id2 = ChatActivity.this.currentChat.id;
                            }
                            instance.markMentionMessageAsRead(id, id2, ChatActivity.this.dialog_id);
                            messageObject2.setContentIsRead();
                        }
                        if (itemView2 instanceof ChatMessageCell) {
                            final ChatMessageCell chatMessageCell2 = (ChatMessageCell)itemView2;
                            if (ChatActivity.this.inPreviewMode) {
                                chatMessageCell2.setHighlighted(true);
                            }
                            else {
                                chatMessageCell2.setHighlightedAnimated();
                            }
                        }
                    }
                }
            }
        }
        
        public void updateRowAtPosition(int dp) {
            if (ChatActivity.this.chatLayoutManager == null) {
                return;
            }
            int n = 0;
            Label_0064: {
                if (!ChatActivity.this.wasManualScroll && ChatActivity.this.unreadMessageObject != null) {
                    final ChatActivity this$0 = ChatActivity.this;
                    final int index = this$0.messages.indexOf(this$0.unreadMessageObject);
                    if (index >= 0) {
                        n = index + this.messagesStartRow;
                        break Label_0064;
                    }
                }
                n = -1;
            }
            this.notifyItemChanged(dp);
            if (n != -1) {
                final int measuredHeight = ChatActivity.this.chatListView.getMeasuredHeight();
                final int paddingBottom = ChatActivity.this.chatListView.getPaddingBottom();
                final int paddingTop = ChatActivity.this.chatListView.getPaddingTop();
                dp = AndroidUtilities.dp(29.0f);
                ChatActivity.this.chatLayoutManager.scrollToPositionWithOffset(n, measuredHeight - paddingBottom - paddingTop - dp);
            }
        }
        
        public void updateRowWithMessageObject(final MessageObject o, final boolean b) {
            if (b) {
                for (int childCount = ChatActivity.this.chatListView.getChildCount(), i = 0; i < childCount; ++i) {
                    final View child = ChatActivity.this.chatListView.getChildAt(i);
                    if (child instanceof ChatMessageCell) {
                        final ChatMessageCell chatMessageCell = (ChatMessageCell)child;
                        if (chatMessageCell.getMessageObject() == o) {
                            chatMessageCell.setMessageObject(o, chatMessageCell.getCurrentMessagesGroup(), chatMessageCell.isPinnedBottom(), chatMessageCell.isPinnedTop());
                            return;
                        }
                    }
                }
            }
            final int index = ChatActivity.this.messages.indexOf(o);
            if (index == -1) {
                return;
            }
            this.updateRowAtPosition(index + this.messagesStartRow);
        }
        
        public void updateRows() {
            this.rowCount = 0;
            if (!ChatActivity.this.messages.isEmpty()) {
                if (ChatActivity.this.forwardEndReached[0] && (ChatActivity.this.mergeDialogId == 0L || ChatActivity.this.forwardEndReached[1])) {
                    this.loadingDownRow = -1;
                }
                else {
                    this.loadingDownRow = this.rowCount++;
                }
                final int rowCount = this.rowCount;
                this.messagesStartRow = rowCount;
                this.rowCount = rowCount + ChatActivity.this.messages.size();
                final int rowCount2 = this.rowCount;
                this.messagesEndRow = rowCount2;
                final TLRPC.User currentUser = ChatActivity.this.currentUser;
                if (currentUser != null && currentUser.bot) {
                    this.rowCount = rowCount2 + 1;
                    this.botInfoRow = rowCount2;
                }
                else {
                    this.botInfoRow = -1;
                }
                if (ChatActivity.this.endReached[0] && (ChatActivity.this.mergeDialogId == 0L || ChatActivity.this.endReached[1])) {
                    this.loadingUpRow = -1;
                }
                else {
                    this.loadingUpRow = this.rowCount++;
                }
            }
            else {
                this.loadingUpRow = -1;
                this.loadingDownRow = -1;
                this.messagesStartRow = -1;
                this.messagesEndRow = -1;
                final TLRPC.User currentUser2 = ChatActivity.this.currentUser;
                if (currentUser2 != null && currentUser2.bot && !MessagesController.isSupportUser(currentUser2)) {
                    this.botInfoRow = this.rowCount++;
                }
                else {
                    this.botInfoRow = -1;
                }
            }
        }
    }
    
    private class UnreadCounterTextView extends TextView
    {
        private int circleWidth;
        private int currentCounter;
        private String currentCounterString;
        private Paint paint;
        private RectF rect;
        private TextPaint textPaint;
        private int textWidth;
        
        public UnreadCounterTextView(final Context context) {
            super(context);
            this.textPaint = new TextPaint(1);
            this.paint = new Paint(1);
            this.rect = new RectF();
            this.textPaint.setTextSize((float)AndroidUtilities.dp(13.0f));
            this.textPaint.setTypeface(AndroidUtilities.getTypeface("fonts/rmedium.ttf"));
        }
        
        protected void onDraw(final Canvas canvas) {
            super.onDraw(canvas);
            if (this.currentCounterString != null) {
                final Layout layout = this.getLayout();
                if (layout != null && this.getLineCount() > 0) {
                    final int n = (this.getMeasuredWidth() + ((int)Math.ceil(layout.getLineWidth(0)) - this.circleWidth)) / 2 + AndroidUtilities.dp(8.0f);
                    this.rect.set((float)n, (float)(this.getMeasuredHeight() / 2 - AndroidUtilities.dp(10.0f)), (float)(n + this.circleWidth), (float)(this.getMeasuredHeight() / 2 + AndroidUtilities.dp(10.0f)));
                    canvas.drawRoundRect(this.rect, (float)AndroidUtilities.dp(10.0f), (float)AndroidUtilities.dp(10.0f), this.paint);
                    canvas.drawText(this.currentCounterString, this.rect.centerX() - this.textWidth / 2.0f, this.rect.top + AndroidUtilities.dp(14.5f), (Paint)this.textPaint);
                }
            }
        }
        
        public void setTextColor(final int textColor) {
            super.setTextColor(textColor);
            this.textPaint.setColor(Theme.getColor("chat_messagePanelBackground"));
            this.paint.setColor(Theme.getColor("chat_goDownButtonCounterBackground"));
        }
        
        public void updateCounter() {
            int unread_count = 0;
            Label_0084: {
                if (ChatObject.isChannel(ChatActivity.this.currentChat)) {
                    final ChatActivity this$0 = ChatActivity.this;
                    if (!this$0.currentChat.megagroup) {
                        final TLRPC.ChatFull chatInfo = this$0.chatInfo;
                        if (chatInfo != null && chatInfo.linked_chat_id != 0) {
                            final TLRPC.Dialog dialog = (TLRPC.Dialog)this$0.getMessagesController().dialogs_dict.get((long)(-ChatActivity.this.chatInfo.linked_chat_id));
                            if (dialog != null) {
                                unread_count = dialog.unread_count;
                                break Label_0084;
                            }
                        }
                    }
                }
                unread_count = 0;
            }
            if (this.currentCounter != unread_count) {
                this.currentCounter = unread_count;
                final int currentCounter = this.currentCounter;
                if (currentCounter == 0) {
                    this.currentCounterString = null;
                    this.setPadding(this.circleWidth = 0, 0, 0, 0);
                }
                else {
                    this.currentCounterString = String.format("%d", currentCounter);
                    this.textWidth = (int)Math.ceil(this.textPaint.measureText(this.currentCounterString));
                    final int max = Math.max(AndroidUtilities.dp(20.0f), AndroidUtilities.dp(12.0f) + this.textWidth);
                    if (this.circleWidth != max) {
                        this.circleWidth = max;
                        this.setPadding(0, 0, this.circleWidth / 2 + AndroidUtilities.dp(7.0f), 0);
                    }
                }
                this.invalidate();
            }
        }
    }
}
